[
    {
        "type": "keyword",
        "keyword": "WITH RECURSIVE with_query_name AS ( select ) ",
        "tree": " (with_clause WITH RECURSIVE (cte_list (common_table_expr AS ( ))))",
        "description": "The <CodeLiteral>WITH</CodeLiteral> clause allows you to specify one or more subqueries that can be referenced by name in the primary query. The subqueries effectively act as temporary tables or views for the duration of the primary query. Each subquery can be a SELECT, TABLE, VALUES, INSERT, UPDATE or DELETE statement. When writing a data-modifying statement (INSERT, UPDATE or DELETE) in <CodeLiteral>WITH</CodeLiteral>, it is usual to include a <CodeLiteral>RETURNING</CodeLiteral> clause. It is the output of <CodeLiteral>RETURNING</CodeLiteral>, not the underlying table that the statement modifies, that forms the temporary table that is read by the primary query. If <CodeLiteral>RETURNING</CodeLiteral> is omitted, the statement is still executed, but it produces no output so it cannot be referenced as a table by the primary query.\n A name (without schema qualification) must be specified for each <CodeLiteral>WITH</CodeLiteral> query. Optionally, a list of column names can be specified; if this is omitted, the column names are inferred from the subquery.\n If <CodeLiteral>RECURSIVE</CodeLiteral> is specified, it allows a SELECT subquery to reference itself by name. Such a subquery must have the form\n <code>non_recursive_term UNION [ ALL | DISTINCT ] recursive_term\n</code>\n where the recursive self-reference must appear on the right-hand side of the <CodeLiteral>UNION</CodeLiteral>. Only one recursive self-reference is permitted per query. Recursive data-modifying statements are not supported, but you can use the results of a recursive SELECT query in a data-modifying statement. See Section 7.8 for an example.\n Another effect of <CodeLiteral>RECURSIVE</CodeLiteral> is that <CodeLiteral>WITH</CodeLiteral> queries need not be ordered: a query can reference another one that is later in the list. (However, circular references, or mutual recursion, are not implemented.) Without <CodeLiteral>RECURSIVE</CodeLiteral>, <CodeLiteral>WITH</CodeLiteral> queries can only reference sibling <CodeLiteral>WITH</CodeLiteral> queries that are earlier in the <CodeLiteral>WITH</CodeLiteral> list.\n When there are multiple queries in the <CodeLiteral>WITH</CodeLiteral> clause, <CodeLiteral>RECURSIVE</CodeLiteral> should be written only once, immediately after <CodeLiteral>WITH</CodeLiteral>. It applies to all queries in the <CodeLiteral>WITH</CodeLiteral> clause, though it has no effect on queries that do not use recursion or forward references.\n The primary query and the <CodeLiteral>WITH</CodeLiteral> queries are all (notionally) executed at the same time. This implies that the effects of a data-modifying statement in <CodeLiteral>WITH</CodeLiteral> cannot be seen from other parts of the query, other than by reading its <CodeLiteral>RETURNING</CodeLiteral> output. If two such data-modifying statements attempt to modify the same row, the results are unspecified.\n A key property of <CodeLiteral>WITH</CodeLiteral> queries is that they are normally evaluated only once per execution of the primary query, even if the primary query refers to them more than once. In particular, data-modifying statements are guaranteed to be executed once and only once, regardless of whether the primary query reads all or any of their output.\n However, a <CodeLiteral>WITH</CodeLiteral> query can be marked <CodeLiteral>NOT MATERIALIZED</CodeLiteral> to remove this guarantee. In that case, the <CodeLiteral>WITH</CodeLiteral> query can be folded into the primary query much as though it were a simple sub-<CodeLiteral>SELECT</CodeLiteral> in the primary query's <CodeLiteral>FROM</CodeLiteral> clause. This results in duplicate computations if the primary query refers to that <CodeLiteral>WITH</CodeLiteral> query more than once; but if each such use requires only a few rows of the <CodeLiteral>WITH</CodeLiteral> query's total output, <CodeLiteral>NOT MATERIALIZED</CodeLiteral> can provide a net savings by allowing the queries to be optimized jointly. <CodeLiteral>NOT MATERIALIZED</CodeLiteral> is ignored if it is attached to a <CodeLiteral>WITH</CodeLiteral> query that is recursive or is not side-effect-free (i.e., is not a plain <CodeLiteral>SELECT</CodeLiteral> containing no volatile functions).\n By default, a side-effect-free <CodeLiteral>WITH</CodeLiteral> query is folded into the primary query if it is used exactly once in the primary query's <CodeLiteral>FROM</CodeLiteral> clause. This allows joint optimization of the two query levels in situations where that should be semantically invisible. However, such folding can be prevented by marking the <CodeLiteral>WITH</CodeLiteral> query as <CodeLiteral>MATERIALIZED</CodeLiteral>. That might be useful, for example, if the <CodeLiteral>WITH</CodeLiteral> query is being used as an optimization fence to prevent the planner from choosing a bad plan. PostgreSQL versions before v12 never did such folding, so queries written for older versions might rely on <CodeLiteral>WITH</CodeLiteral> to act as an optimization fence.\n See Section 7.8 for additional information. ",
        "detail": "[DESCRIPTION]: The <CodeLiteral>WITH</CodeLiteral> clause allows you to specify one or more subqueries that can be referenced by name in the primary query. The subqueries effectively act as temporary tables or views for the duration of the primary query. Each subquery can be a SELECT, TABLE, VALUES, INSERT, UPDATE or DELETE statement. When writing a data-modifying statement (INSERT, UPDATE or DELETE) in <CodeLiteral>WITH</CodeLiteral>, it is usual to include a <CodeLiteral>RETURNING</CodeLiteral> clause. It is the output of <CodeLiteral>RETURNING</CodeLiteral>, not the underlying table that the statement modifies, that forms the temporary table that is read by the primary query. If <CodeLiteral>RETURNING</CodeLiteral> is omitted, the statement is still executed, but it produces no output so it cannot be referenced as a table by the primary query.\n A name (without schema qualification) must be specified for each <CodeLiteral>WITH</CodeLiteral> query. Optionally, a list of column names can be specified; if this is omitted, the column names are inferred from the subquery.\n If <CodeLiteral>RECURSIVE</CodeLiteral> is specified, it allows a SELECT subquery to reference itself by name. Such a subquery must have the form\n <code>non_recursive_term UNION [ ALL | DISTINCT ] recursive_term\n</code>\n where the recursive self-reference must appear on the right-hand side of the <CodeLiteral>UNION</CodeLiteral>. Only one recursive self-reference is permitted per query. Recursive data-modifying statements are not supported, but you can use the results of a recursive SELECT query in a data-modifying statement. See Section 7.8 for an example.\n Another effect of <CodeLiteral>RECURSIVE</CodeLiteral> is that <CodeLiteral>WITH</CodeLiteral> queries need not be ordered: a query can reference another one that is later in the list. (However, circular references, or mutual recursion, are not implemented.) Without <CodeLiteral>RECURSIVE</CodeLiteral>, <CodeLiteral>WITH</CodeLiteral> queries can only reference sibling <CodeLiteral>WITH</CodeLiteral> queries that are earlier in the <CodeLiteral>WITH</CodeLiteral> list.\n When there are multiple queries in the <CodeLiteral>WITH</CodeLiteral> clause, <CodeLiteral>RECURSIVE</CodeLiteral> should be written only once, immediately after <CodeLiteral>WITH</CodeLiteral>. It applies to all queries in the <CodeLiteral>WITH</CodeLiteral> clause, though it has no effect on queries that do not use recursion or forward references.\n The primary query and the <CodeLiteral>WITH</CodeLiteral> queries are all (notionally) executed at the same time. This implies that the effects of a data-modifying statement in <CodeLiteral>WITH</CodeLiteral> cannot be seen from other parts of the query, other than by reading its <CodeLiteral>RETURNING</CodeLiteral> output. If two such data-modifying statements attempt to modify the same row, the results are unspecified.\n A key property of <CodeLiteral>WITH</CodeLiteral> queries is that they are normally evaluated only once per execution of the primary query, even if the primary query refers to them more than once. In particular, data-modifying statements are guaranteed to be executed once and only once, regardless of whether the primary query reads all or any of their output.\n However, a <CodeLiteral>WITH</CodeLiteral> query can be marked <CodeLiteral>NOT MATERIALIZED</CodeLiteral> to remove this guarantee. In that case, the <CodeLiteral>WITH</CodeLiteral> query can be folded into the primary query much as though it were a simple sub-<CodeLiteral>SELECT</CodeLiteral> in the primary query's <CodeLiteral>FROM</CodeLiteral> clause. This results in duplicate computations if the primary query refers to that <CodeLiteral>WITH</CodeLiteral> query more than once; but if each such use requires only a few rows of the <CodeLiteral>WITH</CodeLiteral> query's total output, <CodeLiteral>NOT MATERIALIZED</CodeLiteral> can provide a net savings by allowing the queries to be optimized jointly. <CodeLiteral>NOT MATERIALIZED</CodeLiteral> is ignored if it is attached to a <CodeLiteral>WITH</CodeLiteral> query that is recursive or is not side-effect-free (i.e., is not a plain <CodeLiteral>SELECT</CodeLiteral> containing no volatile functions).\n By default, a side-effect-free <CodeLiteral>WITH</CodeLiteral> query is folded into the primary query if it is used exactly once in the primary query's <CodeLiteral>FROM</CodeLiteral> clause. This allows joint optimization of the two query levels in situations where that should be semantically invisible. However, such folding can be prevented by marking the <CodeLiteral>WITH</CodeLiteral> query as <CodeLiteral>MATERIALIZED</CodeLiteral>. That might be useful, for example, if the <CodeLiteral>WITH</CodeLiteral> query is being used as an optimization fence to prevent the planner from choosing a bad plan. PostgreSQL versions before v12 never did such folding, so queries written for older versions might rely on <CodeLiteral>WITH</CodeLiteral> to act as an optimization fence.\n See Section 7.8 for additional information. <sep>[DEMO]: WITH RECURSIVE numbers AS (\n  SELECT 1 AS num\n  UNION ALL\n  SELECT num + 1 FROM numbers WHERE num < 5\n)\nSELECT * FROM numbers;",
        "example": [
            "WITH RECURSIVE numbers AS (\n  SELECT 1 AS num\n  UNION ALL\n  SELECT num + 1 FROM numbers WHERE num < 5\n)\nSELECT * FROM numbers;"
        ],
        "link": []
    },
    {
        "type": "keyword",
        "keyword": "WITH with_query_name  ( column_name )  AS ( select ) ",
        "tree": " (with_clause WITH (cte_list (common_table_expr (opt_name_list ( )) AS ( ))))",
        "description": "The <CodeLiteral>WITH</CodeLiteral> clause allows you to specify one or more subqueries that can be referenced by name in the primary query. The subqueries effectively act as temporary tables or views for the duration of the primary query. Each subquery can be a SELECT, TABLE, VALUES, INSERT, UPDATE or DELETE statement. When writing a data-modifying statement (INSERT, UPDATE or DELETE) in <CodeLiteral>WITH</CodeLiteral>, it is usual to include a <CodeLiteral>RETURNING</CodeLiteral> clause. It is the output of <CodeLiteral>RETURNING</CodeLiteral>, not the underlying table that the statement modifies, that forms the temporary table that is read by the primary query. If <CodeLiteral>RETURNING</CodeLiteral> is omitted, the statement is still executed, but it produces no output so it cannot be referenced as a table by the primary query.\n A name (without schema qualification) must be specified for each <CodeLiteral>WITH</CodeLiteral> query. Optionally, a list of column names can be specified; if this is omitted, the column names are inferred from the subquery.\n If <CodeLiteral>RECURSIVE</CodeLiteral> is specified, it allows a SELECT subquery to reference itself by name. Such a subquery must have the form\n <code>non_recursive_term UNION [ ALL | DISTINCT ] recursive_term\n</code>\n where the recursive self-reference must appear on the right-hand side of the <CodeLiteral>UNION</CodeLiteral>. Only one recursive self-reference is permitted per query. Recursive data-modifying statements are not supported, but you can use the results of a recursive SELECT query in a data-modifying statement. See Section 7.8 for an example.\n Another effect of <CodeLiteral>RECURSIVE</CodeLiteral> is that <CodeLiteral>WITH</CodeLiteral> queries need not be ordered: a query can reference another one that is later in the list. (However, circular references, or mutual recursion, are not implemented.) Without <CodeLiteral>RECURSIVE</CodeLiteral>, <CodeLiteral>WITH</CodeLiteral> queries can only reference sibling <CodeLiteral>WITH</CodeLiteral> queries that are earlier in the <CodeLiteral>WITH</CodeLiteral> list.\n When there are multiple queries in the <CodeLiteral>WITH</CodeLiteral> clause, <CodeLiteral>RECURSIVE</CodeLiteral> should be written only once, immediately after <CodeLiteral>WITH</CodeLiteral>. It applies to all queries in the <CodeLiteral>WITH</CodeLiteral> clause, though it has no effect on queries that do not use recursion or forward references.\n The primary query and the <CodeLiteral>WITH</CodeLiteral> queries are all (notionally) executed at the same time. This implies that the effects of a data-modifying statement in <CodeLiteral>WITH</CodeLiteral> cannot be seen from other parts of the query, other than by reading its <CodeLiteral>RETURNING</CodeLiteral> output. If two such data-modifying statements attempt to modify the same row, the results are unspecified.\n A key property of <CodeLiteral>WITH</CodeLiteral> queries is that they are normally evaluated only once per execution of the primary query, even if the primary query refers to them more than once. In particular, data-modifying statements are guaranteed to be executed once and only once, regardless of whether the primary query reads all or any of their output.\n However, a <CodeLiteral>WITH</CodeLiteral> query can be marked <CodeLiteral>NOT MATERIALIZED</CodeLiteral> to remove this guarantee. In that case, the <CodeLiteral>WITH</CodeLiteral> query can be folded into the primary query much as though it were a simple sub-<CodeLiteral>SELECT</CodeLiteral> in the primary query's <CodeLiteral>FROM</CodeLiteral> clause. This results in duplicate computations if the primary query refers to that <CodeLiteral>WITH</CodeLiteral> query more than once; but if each such use requires only a few rows of the <CodeLiteral>WITH</CodeLiteral> query's total output, <CodeLiteral>NOT MATERIALIZED</CodeLiteral> can provide a net savings by allowing the queries to be optimized jointly. <CodeLiteral>NOT MATERIALIZED</CodeLiteral> is ignored if it is attached to a <CodeLiteral>WITH</CodeLiteral> query that is recursive or is not side-effect-free (i.e., is not a plain <CodeLiteral>SELECT</CodeLiteral> containing no volatile functions).\n By default, a side-effect-free <CodeLiteral>WITH</CodeLiteral> query is folded into the primary query if it is used exactly once in the primary query's <CodeLiteral>FROM</CodeLiteral> clause. This allows joint optimization of the two query levels in situations where that should be semantically invisible. However, such folding can be prevented by marking the <CodeLiteral>WITH</CodeLiteral> query as <CodeLiteral>MATERIALIZED</CodeLiteral>. That might be useful, for example, if the <CodeLiteral>WITH</CodeLiteral> query is being used as an optimization fence to prevent the planner from choosing a bad plan. PostgreSQL versions before v12 never did such folding, so queries written for older versions might rely on <CodeLiteral>WITH</CodeLiteral> to act as an optimization fence.\n See Section 7.8 for additional information. ",
        "detail": "[DESCRIPTION]: The <CodeLiteral>WITH</CodeLiteral> clause allows you to specify one or more subqueries that can be referenced by name in the primary query. The subqueries effectively act as temporary tables or views for the duration of the primary query. Each subquery can be a SELECT, TABLE, VALUES, INSERT, UPDATE or DELETE statement. When writing a data-modifying statement (INSERT, UPDATE or DELETE) in <CodeLiteral>WITH</CodeLiteral>, it is usual to include a <CodeLiteral>RETURNING</CodeLiteral> clause. It is the output of <CodeLiteral>RETURNING</CodeLiteral>, not the underlying table that the statement modifies, that forms the temporary table that is read by the primary query. If <CodeLiteral>RETURNING</CodeLiteral> is omitted, the statement is still executed, but it produces no output so it cannot be referenced as a table by the primary query.\n A name (without schema qualification) must be specified for each <CodeLiteral>WITH</CodeLiteral> query. Optionally, a list of column names can be specified; if this is omitted, the column names are inferred from the subquery.\n If <CodeLiteral>RECURSIVE</CodeLiteral> is specified, it allows a SELECT subquery to reference itself by name. Such a subquery must have the form\n <code>non_recursive_term UNION [ ALL | DISTINCT ] recursive_term\n</code>\n where the recursive self-reference must appear on the right-hand side of the <CodeLiteral>UNION</CodeLiteral>. Only one recursive self-reference is permitted per query. Recursive data-modifying statements are not supported, but you can use the results of a recursive SELECT query in a data-modifying statement. See Section 7.8 for an example.\n Another effect of <CodeLiteral>RECURSIVE</CodeLiteral> is that <CodeLiteral>WITH</CodeLiteral> queries need not be ordered: a query can reference another one that is later in the list. (However, circular references, or mutual recursion, are not implemented.) Without <CodeLiteral>RECURSIVE</CodeLiteral>, <CodeLiteral>WITH</CodeLiteral> queries can only reference sibling <CodeLiteral>WITH</CodeLiteral> queries that are earlier in the <CodeLiteral>WITH</CodeLiteral> list.\n When there are multiple queries in the <CodeLiteral>WITH</CodeLiteral> clause, <CodeLiteral>RECURSIVE</CodeLiteral> should be written only once, immediately after <CodeLiteral>WITH</CodeLiteral>. It applies to all queries in the <CodeLiteral>WITH</CodeLiteral> clause, though it has no effect on queries that do not use recursion or forward references.\n The primary query and the <CodeLiteral>WITH</CodeLiteral> queries are all (notionally) executed at the same time. This implies that the effects of a data-modifying statement in <CodeLiteral>WITH</CodeLiteral> cannot be seen from other parts of the query, other than by reading its <CodeLiteral>RETURNING</CodeLiteral> output. If two such data-modifying statements attempt to modify the same row, the results are unspecified.\n A key property of <CodeLiteral>WITH</CodeLiteral> queries is that they are normally evaluated only once per execution of the primary query, even if the primary query refers to them more than once. In particular, data-modifying statements are guaranteed to be executed once and only once, regardless of whether the primary query reads all or any of their output.\n However, a <CodeLiteral>WITH</CodeLiteral> query can be marked <CodeLiteral>NOT MATERIALIZED</CodeLiteral> to remove this guarantee. In that case, the <CodeLiteral>WITH</CodeLiteral> query can be folded into the primary query much as though it were a simple sub-<CodeLiteral>SELECT</CodeLiteral> in the primary query's <CodeLiteral>FROM</CodeLiteral> clause. This results in duplicate computations if the primary query refers to that <CodeLiteral>WITH</CodeLiteral> query more than once; but if each such use requires only a few rows of the <CodeLiteral>WITH</CodeLiteral> query's total output, <CodeLiteral>NOT MATERIALIZED</CodeLiteral> can provide a net savings by allowing the queries to be optimized jointly. <CodeLiteral>NOT MATERIALIZED</CodeLiteral> is ignored if it is attached to a <CodeLiteral>WITH</CodeLiteral> query that is recursive or is not side-effect-free (i.e., is not a plain <CodeLiteral>SELECT</CodeLiteral> containing no volatile functions).\n By default, a side-effect-free <CodeLiteral>WITH</CodeLiteral> query is folded into the primary query if it is used exactly once in the primary query's <CodeLiteral>FROM</CodeLiteral> clause. This allows joint optimization of the two query levels in situations where that should be semantically invisible. However, such folding can be prevented by marking the <CodeLiteral>WITH</CodeLiteral> query as <CodeLiteral>MATERIALIZED</CodeLiteral>. That might be useful, for example, if the <CodeLiteral>WITH</CodeLiteral> query is being used as an optimization fence to prevent the planner from choosing a bad plan. PostgreSQL versions before v12 never did such folding, so queries written for older versions might rely on <CodeLiteral>WITH</CodeLiteral> to act as an optimization fence.\n See Section 7.8 for additional information. <sep>[DEMO]: WITH with_query_name AS (SELECT * FROM some_table) SELECT * FROM with_query_name;",
        "example": [
            "WITH with_query_name AS (SELECT * FROM some_table) SELECT * FROM with_query_name;"
        ],
        "link": []
    },
    {
        "type": "keyword",
        "keyword": "WITH with_query_name AS NOT MATERIALIZED ( select ) ",
        "tree": " (with_clause WITH (cte_list (common_table_expr AS (opt_materialized NOT MATERIALIZED) ( ))))",
        "description": "The <CodeLiteral>WITH</CodeLiteral> clause allows you to specify one or more subqueries that can be referenced by name in the primary query. The subqueries effectively act as temporary tables or views for the duration of the primary query. Each subquery can be a SELECT, TABLE, VALUES, INSERT, UPDATE or DELETE statement. When writing a data-modifying statement (INSERT, UPDATE or DELETE) in <CodeLiteral>WITH</CodeLiteral>, it is usual to include a <CodeLiteral>RETURNING</CodeLiteral> clause. It is the output of <CodeLiteral>RETURNING</CodeLiteral>, not the underlying table that the statement modifies, that forms the temporary table that is read by the primary query. If <CodeLiteral>RETURNING</CodeLiteral> is omitted, the statement is still executed, but it produces no output so it cannot be referenced as a table by the primary query.\n A name (without schema qualification) must be specified for each <CodeLiteral>WITH</CodeLiteral> query. Optionally, a list of column names can be specified; if this is omitted, the column names are inferred from the subquery.\n If <CodeLiteral>RECURSIVE</CodeLiteral> is specified, it allows a SELECT subquery to reference itself by name. Such a subquery must have the form\n <code>non_recursive_term UNION [ ALL | DISTINCT ] recursive_term\n</code>\n where the recursive self-reference must appear on the right-hand side of the <CodeLiteral>UNION</CodeLiteral>. Only one recursive self-reference is permitted per query. Recursive data-modifying statements are not supported, but you can use the results of a recursive SELECT query in a data-modifying statement. See Section 7.8 for an example.\n Another effect of <CodeLiteral>RECURSIVE</CodeLiteral> is that <CodeLiteral>WITH</CodeLiteral> queries need not be ordered: a query can reference another one that is later in the list. (However, circular references, or mutual recursion, are not implemented.) Without <CodeLiteral>RECURSIVE</CodeLiteral>, <CodeLiteral>WITH</CodeLiteral> queries can only reference sibling <CodeLiteral>WITH</CodeLiteral> queries that are earlier in the <CodeLiteral>WITH</CodeLiteral> list.\n When there are multiple queries in the <CodeLiteral>WITH</CodeLiteral> clause, <CodeLiteral>RECURSIVE</CodeLiteral> should be written only once, immediately after <CodeLiteral>WITH</CodeLiteral>. It applies to all queries in the <CodeLiteral>WITH</CodeLiteral> clause, though it has no effect on queries that do not use recursion or forward references.\n The primary query and the <CodeLiteral>WITH</CodeLiteral> queries are all (notionally) executed at the same time. This implies that the effects of a data-modifying statement in <CodeLiteral>WITH</CodeLiteral> cannot be seen from other parts of the query, other than by reading its <CodeLiteral>RETURNING</CodeLiteral> output. If two such data-modifying statements attempt to modify the same row, the results are unspecified.\n A key property of <CodeLiteral>WITH</CodeLiteral> queries is that they are normally evaluated only once per execution of the primary query, even if the primary query refers to them more than once. In particular, data-modifying statements are guaranteed to be executed once and only once, regardless of whether the primary query reads all or any of their output.\n However, a <CodeLiteral>WITH</CodeLiteral> query can be marked <CodeLiteral>NOT MATERIALIZED</CodeLiteral> to remove this guarantee. In that case, the <CodeLiteral>WITH</CodeLiteral> query can be folded into the primary query much as though it were a simple sub-<CodeLiteral>SELECT</CodeLiteral> in the primary query's <CodeLiteral>FROM</CodeLiteral> clause. This results in duplicate computations if the primary query refers to that <CodeLiteral>WITH</CodeLiteral> query more than once; but if each such use requires only a few rows of the <CodeLiteral>WITH</CodeLiteral> query's total output, <CodeLiteral>NOT MATERIALIZED</CodeLiteral> can provide a net savings by allowing the queries to be optimized jointly. <CodeLiteral>NOT MATERIALIZED</CodeLiteral> is ignored if it is attached to a <CodeLiteral>WITH</CodeLiteral> query that is recursive or is not side-effect-free (i.e., is not a plain <CodeLiteral>SELECT</CodeLiteral> containing no volatile functions).\n By default, a side-effect-free <CodeLiteral>WITH</CodeLiteral> query is folded into the primary query if it is used exactly once in the primary query's <CodeLiteral>FROM</CodeLiteral> clause. This allows joint optimization of the two query levels in situations where that should be semantically invisible. However, such folding can be prevented by marking the <CodeLiteral>WITH</CodeLiteral> query as <CodeLiteral>MATERIALIZED</CodeLiteral>. That might be useful, for example, if the <CodeLiteral>WITH</CodeLiteral> query is being used as an optimization fence to prevent the planner from choosing a bad plan. PostgreSQL versions before v12 never did such folding, so queries written for older versions might rely on <CodeLiteral>WITH</CodeLiteral> to act as an optimization fence.\n See Section 7.8 for additional information. ",
        "detail": "[DESCRIPTION]: The <CodeLiteral>WITH</CodeLiteral> clause allows you to specify one or more subqueries that can be referenced by name in the primary query. The subqueries effectively act as temporary tables or views for the duration of the primary query. Each subquery can be a SELECT, TABLE, VALUES, INSERT, UPDATE or DELETE statement. When writing a data-modifying statement (INSERT, UPDATE or DELETE) in <CodeLiteral>WITH</CodeLiteral>, it is usual to include a <CodeLiteral>RETURNING</CodeLiteral> clause. It is the output of <CodeLiteral>RETURNING</CodeLiteral>, not the underlying table that the statement modifies, that forms the temporary table that is read by the primary query. If <CodeLiteral>RETURNING</CodeLiteral> is omitted, the statement is still executed, but it produces no output so it cannot be referenced as a table by the primary query.\n A name (without schema qualification) must be specified for each <CodeLiteral>WITH</CodeLiteral> query. Optionally, a list of column names can be specified; if this is omitted, the column names are inferred from the subquery.\n If <CodeLiteral>RECURSIVE</CodeLiteral> is specified, it allows a SELECT subquery to reference itself by name. Such a subquery must have the form\n <code>non_recursive_term UNION [ ALL | DISTINCT ] recursive_term\n</code>\n where the recursive self-reference must appear on the right-hand side of the <CodeLiteral>UNION</CodeLiteral>. Only one recursive self-reference is permitted per query. Recursive data-modifying statements are not supported, but you can use the results of a recursive SELECT query in a data-modifying statement. See Section 7.8 for an example.\n Another effect of <CodeLiteral>RECURSIVE</CodeLiteral> is that <CodeLiteral>WITH</CodeLiteral> queries need not be ordered: a query can reference another one that is later in the list. (However, circular references, or mutual recursion, are not implemented.) Without <CodeLiteral>RECURSIVE</CodeLiteral>, <CodeLiteral>WITH</CodeLiteral> queries can only reference sibling <CodeLiteral>WITH</CodeLiteral> queries that are earlier in the <CodeLiteral>WITH</CodeLiteral> list.\n When there are multiple queries in the <CodeLiteral>WITH</CodeLiteral> clause, <CodeLiteral>RECURSIVE</CodeLiteral> should be written only once, immediately after <CodeLiteral>WITH</CodeLiteral>. It applies to all queries in the <CodeLiteral>WITH</CodeLiteral> clause, though it has no effect on queries that do not use recursion or forward references.\n The primary query and the <CodeLiteral>WITH</CodeLiteral> queries are all (notionally) executed at the same time. This implies that the effects of a data-modifying statement in <CodeLiteral>WITH</CodeLiteral> cannot be seen from other parts of the query, other than by reading its <CodeLiteral>RETURNING</CodeLiteral> output. If two such data-modifying statements attempt to modify the same row, the results are unspecified.\n A key property of <CodeLiteral>WITH</CodeLiteral> queries is that they are normally evaluated only once per execution of the primary query, even if the primary query refers to them more than once. In particular, data-modifying statements are guaranteed to be executed once and only once, regardless of whether the primary query reads all or any of their output.\n However, a <CodeLiteral>WITH</CodeLiteral> query can be marked <CodeLiteral>NOT MATERIALIZED</CodeLiteral> to remove this guarantee. In that case, the <CodeLiteral>WITH</CodeLiteral> query can be folded into the primary query much as though it were a simple sub-<CodeLiteral>SELECT</CodeLiteral> in the primary query's <CodeLiteral>FROM</CodeLiteral> clause. This results in duplicate computations if the primary query refers to that <CodeLiteral>WITH</CodeLiteral> query more than once; but if each such use requires only a few rows of the <CodeLiteral>WITH</CodeLiteral> query's total output, <CodeLiteral>NOT MATERIALIZED</CodeLiteral> can provide a net savings by allowing the queries to be optimized jointly. <CodeLiteral>NOT MATERIALIZED</CodeLiteral> is ignored if it is attached to a <CodeLiteral>WITH</CodeLiteral> query that is recursive or is not side-effect-free (i.e., is not a plain <CodeLiteral>SELECT</CodeLiteral> containing no volatile functions).\n By default, a side-effect-free <CodeLiteral>WITH</CodeLiteral> query is folded into the primary query if it is used exactly once in the primary query's <CodeLiteral>FROM</CodeLiteral> clause. This allows joint optimization of the two query levels in situations where that should be semantically invisible. However, such folding can be prevented by marking the <CodeLiteral>WITH</CodeLiteral> query as <CodeLiteral>MATERIALIZED</CodeLiteral>. That might be useful, for example, if the <CodeLiteral>WITH</CodeLiteral> query is being used as an optimization fence to prevent the planner from choosing a bad plan. PostgreSQL versions before v12 never did such folding, so queries written for older versions might rely on <CodeLiteral>WITH</CodeLiteral> to act as an optimization fence.\n See Section 7.8 for additional information. <sep>[DEMO]: WITH with_query_name AS NOT MATERIALIZED (SELECT * FROM employees WHERE department_id = 3) SELECT * FROM with_query_name;",
        "example": [
            "WITH with_query_name AS NOT MATERIALIZED (SELECT * FROM employees WHERE department_id = 3) SELECT * FROM with_query_name;"
        ],
        "link": []
    },
    {
        "type": "keyword",
        "keyword": "WITH with_query_name AS MATERIALIZED ( select ) ",
        "tree": " (with_clause WITH (cte_list (common_table_expr AS (opt_materialized MATERIALIZED) ( ))))",
        "description": "The <CodeLiteral>WITH</CodeLiteral> clause allows you to specify one or more subqueries that can be referenced by name in the primary query. The subqueries effectively act as temporary tables or views for the duration of the primary query. Each subquery can be a SELECT, TABLE, VALUES, INSERT, UPDATE or DELETE statement. When writing a data-modifying statement (INSERT, UPDATE or DELETE) in <CodeLiteral>WITH</CodeLiteral>, it is usual to include a <CodeLiteral>RETURNING</CodeLiteral> clause. It is the output of <CodeLiteral>RETURNING</CodeLiteral>, not the underlying table that the statement modifies, that forms the temporary table that is read by the primary query. If <CodeLiteral>RETURNING</CodeLiteral> is omitted, the statement is still executed, but it produces no output so it cannot be referenced as a table by the primary query.\n A name (without schema qualification) must be specified for each <CodeLiteral>WITH</CodeLiteral> query. Optionally, a list of column names can be specified; if this is omitted, the column names are inferred from the subquery.\n If <CodeLiteral>RECURSIVE</CodeLiteral> is specified, it allows a SELECT subquery to reference itself by name. Such a subquery must have the form\n <code>non_recursive_term UNION [ ALL | DISTINCT ] recursive_term\n</code>\n where the recursive self-reference must appear on the right-hand side of the <CodeLiteral>UNION</CodeLiteral>. Only one recursive self-reference is permitted per query. Recursive data-modifying statements are not supported, but you can use the results of a recursive SELECT query in a data-modifying statement. See Section 7.8 for an example.\n Another effect of <CodeLiteral>RECURSIVE</CodeLiteral> is that <CodeLiteral>WITH</CodeLiteral> queries need not be ordered: a query can reference another one that is later in the list. (However, circular references, or mutual recursion, are not implemented.) Without <CodeLiteral>RECURSIVE</CodeLiteral>, <CodeLiteral>WITH</CodeLiteral> queries can only reference sibling <CodeLiteral>WITH</CodeLiteral> queries that are earlier in the <CodeLiteral>WITH</CodeLiteral> list.\n When there are multiple queries in the <CodeLiteral>WITH</CodeLiteral> clause, <CodeLiteral>RECURSIVE</CodeLiteral> should be written only once, immediately after <CodeLiteral>WITH</CodeLiteral>. It applies to all queries in the <CodeLiteral>WITH</CodeLiteral> clause, though it has no effect on queries that do not use recursion or forward references.\n The primary query and the <CodeLiteral>WITH</CodeLiteral> queries are all (notionally) executed at the same time. This implies that the effects of a data-modifying statement in <CodeLiteral>WITH</CodeLiteral> cannot be seen from other parts of the query, other than by reading its <CodeLiteral>RETURNING</CodeLiteral> output. If two such data-modifying statements attempt to modify the same row, the results are unspecified.\n A key property of <CodeLiteral>WITH</CodeLiteral> queries is that they are normally evaluated only once per execution of the primary query, even if the primary query refers to them more than once. In particular, data-modifying statements are guaranteed to be executed once and only once, regardless of whether the primary query reads all or any of their output.\n However, a <CodeLiteral>WITH</CodeLiteral> query can be marked <CodeLiteral>NOT MATERIALIZED</CodeLiteral> to remove this guarantee. In that case, the <CodeLiteral>WITH</CodeLiteral> query can be folded into the primary query much as though it were a simple sub-<CodeLiteral>SELECT</CodeLiteral> in the primary query's <CodeLiteral>FROM</CodeLiteral> clause. This results in duplicate computations if the primary query refers to that <CodeLiteral>WITH</CodeLiteral> query more than once; but if each such use requires only a few rows of the <CodeLiteral>WITH</CodeLiteral> query's total output, <CodeLiteral>NOT MATERIALIZED</CodeLiteral> can provide a net savings by allowing the queries to be optimized jointly. <CodeLiteral>NOT MATERIALIZED</CodeLiteral> is ignored if it is attached to a <CodeLiteral>WITH</CodeLiteral> query that is recursive or is not side-effect-free (i.e., is not a plain <CodeLiteral>SELECT</CodeLiteral> containing no volatile functions).\n By default, a side-effect-free <CodeLiteral>WITH</CodeLiteral> query is folded into the primary query if it is used exactly once in the primary query's <CodeLiteral>FROM</CodeLiteral> clause. This allows joint optimization of the two query levels in situations where that should be semantically invisible. However, such folding can be prevented by marking the <CodeLiteral>WITH</CodeLiteral> query as <CodeLiteral>MATERIALIZED</CodeLiteral>. That might be useful, for example, if the <CodeLiteral>WITH</CodeLiteral> query is being used as an optimization fence to prevent the planner from choosing a bad plan. PostgreSQL versions before v12 never did such folding, so queries written for older versions might rely on <CodeLiteral>WITH</CodeLiteral> to act as an optimization fence.\n See Section 7.8 for additional information. ",
        "detail": "[DESCRIPTION]: The <CodeLiteral>WITH</CodeLiteral> clause allows you to specify one or more subqueries that can be referenced by name in the primary query. The subqueries effectively act as temporary tables or views for the duration of the primary query. Each subquery can be a SELECT, TABLE, VALUES, INSERT, UPDATE or DELETE statement. When writing a data-modifying statement (INSERT, UPDATE or DELETE) in <CodeLiteral>WITH</CodeLiteral>, it is usual to include a <CodeLiteral>RETURNING</CodeLiteral> clause. It is the output of <CodeLiteral>RETURNING</CodeLiteral>, not the underlying table that the statement modifies, that forms the temporary table that is read by the primary query. If <CodeLiteral>RETURNING</CodeLiteral> is omitted, the statement is still executed, but it produces no output so it cannot be referenced as a table by the primary query.\n A name (without schema qualification) must be specified for each <CodeLiteral>WITH</CodeLiteral> query. Optionally, a list of column names can be specified; if this is omitted, the column names are inferred from the subquery.\n If <CodeLiteral>RECURSIVE</CodeLiteral> is specified, it allows a SELECT subquery to reference itself by name. Such a subquery must have the form\n <code>non_recursive_term UNION [ ALL | DISTINCT ] recursive_term\n</code>\n where the recursive self-reference must appear on the right-hand side of the <CodeLiteral>UNION</CodeLiteral>. Only one recursive self-reference is permitted per query. Recursive data-modifying statements are not supported, but you can use the results of a recursive SELECT query in a data-modifying statement. See Section 7.8 for an example.\n Another effect of <CodeLiteral>RECURSIVE</CodeLiteral> is that <CodeLiteral>WITH</CodeLiteral> queries need not be ordered: a query can reference another one that is later in the list. (However, circular references, or mutual recursion, are not implemented.) Without <CodeLiteral>RECURSIVE</CodeLiteral>, <CodeLiteral>WITH</CodeLiteral> queries can only reference sibling <CodeLiteral>WITH</CodeLiteral> queries that are earlier in the <CodeLiteral>WITH</CodeLiteral> list.\n When there are multiple queries in the <CodeLiteral>WITH</CodeLiteral> clause, <CodeLiteral>RECURSIVE</CodeLiteral> should be written only once, immediately after <CodeLiteral>WITH</CodeLiteral>. It applies to all queries in the <CodeLiteral>WITH</CodeLiteral> clause, though it has no effect on queries that do not use recursion or forward references.\n The primary query and the <CodeLiteral>WITH</CodeLiteral> queries are all (notionally) executed at the same time. This implies that the effects of a data-modifying statement in <CodeLiteral>WITH</CodeLiteral> cannot be seen from other parts of the query, other than by reading its <CodeLiteral>RETURNING</CodeLiteral> output. If two such data-modifying statements attempt to modify the same row, the results are unspecified.\n A key property of <CodeLiteral>WITH</CodeLiteral> queries is that they are normally evaluated only once per execution of the primary query, even if the primary query refers to them more than once. In particular, data-modifying statements are guaranteed to be executed once and only once, regardless of whether the primary query reads all or any of their output.\n However, a <CodeLiteral>WITH</CodeLiteral> query can be marked <CodeLiteral>NOT MATERIALIZED</CodeLiteral> to remove this guarantee. In that case, the <CodeLiteral>WITH</CodeLiteral> query can be folded into the primary query much as though it were a simple sub-<CodeLiteral>SELECT</CodeLiteral> in the primary query's <CodeLiteral>FROM</CodeLiteral> clause. This results in duplicate computations if the primary query refers to that <CodeLiteral>WITH</CodeLiteral> query more than once; but if each such use requires only a few rows of the <CodeLiteral>WITH</CodeLiteral> query's total output, <CodeLiteral>NOT MATERIALIZED</CodeLiteral> can provide a net savings by allowing the queries to be optimized jointly. <CodeLiteral>NOT MATERIALIZED</CodeLiteral> is ignored if it is attached to a <CodeLiteral>WITH</CodeLiteral> query that is recursive or is not side-effect-free (i.e., is not a plain <CodeLiteral>SELECT</CodeLiteral> containing no volatile functions).\n By default, a side-effect-free <CodeLiteral>WITH</CodeLiteral> query is folded into the primary query if it is used exactly once in the primary query's <CodeLiteral>FROM</CodeLiteral> clause. This allows joint optimization of the two query levels in situations where that should be semantically invisible. However, such folding can be prevented by marking the <CodeLiteral>WITH</CodeLiteral> query as <CodeLiteral>MATERIALIZED</CodeLiteral>. That might be useful, for example, if the <CodeLiteral>WITH</CodeLiteral> query is being used as an optimization fence to prevent the planner from choosing a bad plan. PostgreSQL versions before v12 never did such folding, so queries written for older versions might rely on <CodeLiteral>WITH</CodeLiteral> to act as an optimization fence.\n See Section 7.8 for additional information. <sep>[DEMO]: WITH with_query_name AS MATERIALIZED (SELECT id, name FROM employees WHERE department_id = 3) SELECT * FROM with_query_name;",
        "example": [
            "WITH with_query_name AS MATERIALIZED (SELECT id, name FROM employees WHERE department_id = 3) SELECT * FROM with_query_name;"
        ],
        "link": []
    },
    {
        "type": "keyword",
        "keyword": "WITH with_query_name AS ( select ) ",
        "tree": " (with_clause WITH (cte_list (common_table_expr AS ( ))))",
        "description": "The <CodeLiteral>WITH</CodeLiteral> clause allows you to specify one or more subqueries that can be referenced by name in the primary query. The subqueries effectively act as temporary tables or views for the duration of the primary query. Each subquery can be a SELECT, TABLE, VALUES, INSERT, UPDATE or DELETE statement. When writing a data-modifying statement (INSERT, UPDATE or DELETE) in <CodeLiteral>WITH</CodeLiteral>, it is usual to include a <CodeLiteral>RETURNING</CodeLiteral> clause. It is the output of <CodeLiteral>RETURNING</CodeLiteral>, not the underlying table that the statement modifies, that forms the temporary table that is read by the primary query. If <CodeLiteral>RETURNING</CodeLiteral> is omitted, the statement is still executed, but it produces no output so it cannot be referenced as a table by the primary query.\n A name (without schema qualification) must be specified for each <CodeLiteral>WITH</CodeLiteral> query. Optionally, a list of column names can be specified; if this is omitted, the column names are inferred from the subquery.\n If <CodeLiteral>RECURSIVE</CodeLiteral> is specified, it allows a SELECT subquery to reference itself by name. Such a subquery must have the form\n <code>non_recursive_term UNION [ ALL | DISTINCT ] recursive_term\n</code>\n where the recursive self-reference must appear on the right-hand side of the <CodeLiteral>UNION</CodeLiteral>. Only one recursive self-reference is permitted per query. Recursive data-modifying statements are not supported, but you can use the results of a recursive SELECT query in a data-modifying statement. See Section 7.8 for an example.\n Another effect of <CodeLiteral>RECURSIVE</CodeLiteral> is that <CodeLiteral>WITH</CodeLiteral> queries need not be ordered: a query can reference another one that is later in the list. (However, circular references, or mutual recursion, are not implemented.) Without <CodeLiteral>RECURSIVE</CodeLiteral>, <CodeLiteral>WITH</CodeLiteral> queries can only reference sibling <CodeLiteral>WITH</CodeLiteral> queries that are earlier in the <CodeLiteral>WITH</CodeLiteral> list.\n When there are multiple queries in the <CodeLiteral>WITH</CodeLiteral> clause, <CodeLiteral>RECURSIVE</CodeLiteral> should be written only once, immediately after <CodeLiteral>WITH</CodeLiteral>. It applies to all queries in the <CodeLiteral>WITH</CodeLiteral> clause, though it has no effect on queries that do not use recursion or forward references.\n The primary query and the <CodeLiteral>WITH</CodeLiteral> queries are all (notionally) executed at the same time. This implies that the effects of a data-modifying statement in <CodeLiteral>WITH</CodeLiteral> cannot be seen from other parts of the query, other than by reading its <CodeLiteral>RETURNING</CodeLiteral> output. If two such data-modifying statements attempt to modify the same row, the results are unspecified.\n A key property of <CodeLiteral>WITH</CodeLiteral> queries is that they are normally evaluated only once per execution of the primary query, even if the primary query refers to them more than once. In particular, data-modifying statements are guaranteed to be executed once and only once, regardless of whether the primary query reads all or any of their output.\n However, a <CodeLiteral>WITH</CodeLiteral> query can be marked <CodeLiteral>NOT MATERIALIZED</CodeLiteral> to remove this guarantee. In that case, the <CodeLiteral>WITH</CodeLiteral> query can be folded into the primary query much as though it were a simple sub-<CodeLiteral>SELECT</CodeLiteral> in the primary query's <CodeLiteral>FROM</CodeLiteral> clause. This results in duplicate computations if the primary query refers to that <CodeLiteral>WITH</CodeLiteral> query more than once; but if each such use requires only a few rows of the <CodeLiteral>WITH</CodeLiteral> query's total output, <CodeLiteral>NOT MATERIALIZED</CodeLiteral> can provide a net savings by allowing the queries to be optimized jointly. <CodeLiteral>NOT MATERIALIZED</CodeLiteral> is ignored if it is attached to a <CodeLiteral>WITH</CodeLiteral> query that is recursive or is not side-effect-free (i.e., is not a plain <CodeLiteral>SELECT</CodeLiteral> containing no volatile functions).\n By default, a side-effect-free <CodeLiteral>WITH</CodeLiteral> query is folded into the primary query if it is used exactly once in the primary query's <CodeLiteral>FROM</CodeLiteral> clause. This allows joint optimization of the two query levels in situations where that should be semantically invisible. However, such folding can be prevented by marking the <CodeLiteral>WITH</CodeLiteral> query as <CodeLiteral>MATERIALIZED</CodeLiteral>. That might be useful, for example, if the <CodeLiteral>WITH</CodeLiteral> query is being used as an optimization fence to prevent the planner from choosing a bad plan. PostgreSQL versions before v12 never did such folding, so queries written for older versions might rely on <CodeLiteral>WITH</CodeLiteral> to act as an optimization fence.\n See Section 7.8 for additional information. ",
        "detail": "[DESCRIPTION]: The <CodeLiteral>WITH</CodeLiteral> clause allows you to specify one or more subqueries that can be referenced by name in the primary query. The subqueries effectively act as temporary tables or views for the duration of the primary query. Each subquery can be a SELECT, TABLE, VALUES, INSERT, UPDATE or DELETE statement. When writing a data-modifying statement (INSERT, UPDATE or DELETE) in <CodeLiteral>WITH</CodeLiteral>, it is usual to include a <CodeLiteral>RETURNING</CodeLiteral> clause. It is the output of <CodeLiteral>RETURNING</CodeLiteral>, not the underlying table that the statement modifies, that forms the temporary table that is read by the primary query. If <CodeLiteral>RETURNING</CodeLiteral> is omitted, the statement is still executed, but it produces no output so it cannot be referenced as a table by the primary query.\n A name (without schema qualification) must be specified for each <CodeLiteral>WITH</CodeLiteral> query. Optionally, a list of column names can be specified; if this is omitted, the column names are inferred from the subquery.\n If <CodeLiteral>RECURSIVE</CodeLiteral> is specified, it allows a SELECT subquery to reference itself by name. Such a subquery must have the form\n <code>non_recursive_term UNION [ ALL | DISTINCT ] recursive_term\n</code>\n where the recursive self-reference must appear on the right-hand side of the <CodeLiteral>UNION</CodeLiteral>. Only one recursive self-reference is permitted per query. Recursive data-modifying statements are not supported, but you can use the results of a recursive SELECT query in a data-modifying statement. See Section 7.8 for an example.\n Another effect of <CodeLiteral>RECURSIVE</CodeLiteral> is that <CodeLiteral>WITH</CodeLiteral> queries need not be ordered: a query can reference another one that is later in the list. (However, circular references, or mutual recursion, are not implemented.) Without <CodeLiteral>RECURSIVE</CodeLiteral>, <CodeLiteral>WITH</CodeLiteral> queries can only reference sibling <CodeLiteral>WITH</CodeLiteral> queries that are earlier in the <CodeLiteral>WITH</CodeLiteral> list.\n When there are multiple queries in the <CodeLiteral>WITH</CodeLiteral> clause, <CodeLiteral>RECURSIVE</CodeLiteral> should be written only once, immediately after <CodeLiteral>WITH</CodeLiteral>. It applies to all queries in the <CodeLiteral>WITH</CodeLiteral> clause, though it has no effect on queries that do not use recursion or forward references.\n The primary query and the <CodeLiteral>WITH</CodeLiteral> queries are all (notionally) executed at the same time. This implies that the effects of a data-modifying statement in <CodeLiteral>WITH</CodeLiteral> cannot be seen from other parts of the query, other than by reading its <CodeLiteral>RETURNING</CodeLiteral> output. If two such data-modifying statements attempt to modify the same row, the results are unspecified.\n A key property of <CodeLiteral>WITH</CodeLiteral> queries is that they are normally evaluated only once per execution of the primary query, even if the primary query refers to them more than once. In particular, data-modifying statements are guaranteed to be executed once and only once, regardless of whether the primary query reads all or any of their output.\n However, a <CodeLiteral>WITH</CodeLiteral> query can be marked <CodeLiteral>NOT MATERIALIZED</CodeLiteral> to remove this guarantee. In that case, the <CodeLiteral>WITH</CodeLiteral> query can be folded into the primary query much as though it were a simple sub-<CodeLiteral>SELECT</CodeLiteral> in the primary query's <CodeLiteral>FROM</CodeLiteral> clause. This results in duplicate computations if the primary query refers to that <CodeLiteral>WITH</CodeLiteral> query more than once; but if each such use requires only a few rows of the <CodeLiteral>WITH</CodeLiteral> query's total output, <CodeLiteral>NOT MATERIALIZED</CodeLiteral> can provide a net savings by allowing the queries to be optimized jointly. <CodeLiteral>NOT MATERIALIZED</CodeLiteral> is ignored if it is attached to a <CodeLiteral>WITH</CodeLiteral> query that is recursive or is not side-effect-free (i.e., is not a plain <CodeLiteral>SELECT</CodeLiteral> containing no volatile functions).\n By default, a side-effect-free <CodeLiteral>WITH</CodeLiteral> query is folded into the primary query if it is used exactly once in the primary query's <CodeLiteral>FROM</CodeLiteral> clause. This allows joint optimization of the two query levels in situations where that should be semantically invisible. However, such folding can be prevented by marking the <CodeLiteral>WITH</CodeLiteral> query as <CodeLiteral>MATERIALIZED</CodeLiteral>. That might be useful, for example, if the <CodeLiteral>WITH</CodeLiteral> query is being used as an optimization fence to prevent the planner from choosing a bad plan. PostgreSQL versions before v12 never did such folding, so queries written for older versions might rely on <CodeLiteral>WITH</CodeLiteral> to act as an optimization fence.\n See Section 7.8 for additional information. <sep>[DEMO]: WITH employee_totals AS (\n  SELECT department_id, COUNT(*) as total_employees\n  FROM employees\n  GROUP BY department_id\n)\nSELECT department.name, employee_totals.total_employees\nFROM department\nJOIN employee_totals ON department.id = employee_totals.department_id;",
        "example": [
            "WITH employee_totals AS (\n  SELECT department_id, COUNT(*) as total_employees\n  FROM employees\n  GROUP BY department_id\n)\nSELECT department.name, employee_totals.total_employees\nFROM department\nJOIN employee_totals ON department.id = employee_totals.department_id;"
        ],
        "link": []
    },
    {
        "type": "keyword",
        "keyword": "FROM ONLY table_name alias",
        "tree": " (from_clause FROM (from_list (table_ref (relation_expr ONLY))))",
        "description": "The name (optionally schema-qualified) of an existing table or view. If <CodeLiteral>ONLY</CodeLiteral> is specified before the table name, only that table is scanned. If <CodeLiteral>ONLY</CodeLiteral> is not specified, the table and all its descendant tables (if any) are scanned. Optionally, <CodeLiteral>*</CodeLiteral> can be specified after the table name to explicitly indicate that descendant tables are included. A substitute name for the <CodeLiteral>FROM</CodeLiteral> item containing the alias. An alias is used for brevity or to eliminate ambiguity for self-joins (where the same table is scanned multiple times). When an alias is provided, it completely hides the actual name of the table or function; for example given <CodeLiteral>FROM foo AS f</CodeLiteral>, the remainder of the SELECT must refer to this <CodeLiteral>FROM</CodeLiteral> item as <CodeLiteral>f</CodeLiteral> not <CodeLiteral>foo</CodeLiteral>. If an alias is written, a column alias list can also be written to provide substitute names for one or more columns of the table.",
        "detail": "[DESCRIPTION]: The name (optionally schema-qualified) of an existing table or view. If <CodeLiteral>ONLY</CodeLiteral> is specified before the table name, only that table is scanned. If <CodeLiteral>ONLY</CodeLiteral> is not specified, the table and all its descendant tables (if any) are scanned. Optionally, <CodeLiteral>*</CodeLiteral> can be specified after the table name to explicitly indicate that descendant tables are included. A substitute name for the <CodeLiteral>FROM</CodeLiteral> item containing the alias. An alias is used for brevity or to eliminate ambiguity for self-joins (where the same table is scanned multiple times). When an alias is provided, it completely hides the actual name of the table or function; for example given <CodeLiteral>FROM foo AS f</CodeLiteral>, the remainder of the SELECT must refer to this <CodeLiteral>FROM</CodeLiteral> item as <CodeLiteral>f</CodeLiteral> not <CodeLiteral>foo</CodeLiteral>. If an alias is written, a column alias list can also be written to provide substitute names for one or more columns of the table.<sep>[DEMO]: SELECT * FROM ONLY employees AS e",
        "example": [
            "SELECT * FROM ONLY employees AS e"
        ],
        "link": []
    },
    {
        "type": "keyword",
        "keyword": "FROM table_name AS alias",
        "tree": " (from_clause FROM (from_list (table_ref (opt_alias_clause (table_alias_clause AS)))))",
        "description": "The name (optionally schema-qualified) of an existing table or view. If <CodeLiteral>ONLY</CodeLiteral> is specified before the table name, only that table is scanned. If <CodeLiteral>ONLY</CodeLiteral> is not specified, the table and all its descendant tables (if any) are scanned. Optionally, <CodeLiteral>*</CodeLiteral> can be specified after the table name to explicitly indicate that descendant tables are included. A substitute name for the <CodeLiteral>FROM</CodeLiteral> item containing the alias. An alias is used for brevity or to eliminate ambiguity for self-joins (where the same table is scanned multiple times). When an alias is provided, it completely hides the actual name of the table or function; for example given <CodeLiteral>FROM foo AS f</CodeLiteral>, the remainder of the SELECT must refer to this <CodeLiteral>FROM</CodeLiteral> item as <CodeLiteral>f</CodeLiteral> not <CodeLiteral>foo</CodeLiteral>. If an alias is written, a column alias list can also be written to provide substitute names for one or more columns of the table.",
        "detail": "[DESCRIPTION]: The name (optionally schema-qualified) of an existing table or view. If <CodeLiteral>ONLY</CodeLiteral> is specified before the table name, only that table is scanned. If <CodeLiteral>ONLY</CodeLiteral> is not specified, the table and all its descendant tables (if any) are scanned. Optionally, <CodeLiteral>*</CodeLiteral> can be specified after the table name to explicitly indicate that descendant tables are included. A substitute name for the <CodeLiteral>FROM</CodeLiteral> item containing the alias. An alias is used for brevity or to eliminate ambiguity for self-joins (where the same table is scanned multiple times). When an alias is provided, it completely hides the actual name of the table or function; for example given <CodeLiteral>FROM foo AS f</CodeLiteral>, the remainder of the SELECT must refer to this <CodeLiteral>FROM</CodeLiteral> item as <CodeLiteral>f</CodeLiteral> not <CodeLiteral>foo</CodeLiteral>. If an alias is written, a column alias list can also be written to provide substitute names for one or more columns of the table.<sep>[DEMO]: SELECT * FROM employees AS e;",
        "example": [
            "SELECT * FROM employees AS e;"
        ],
        "link": []
    },
    {
        "type": "keyword",
        "keyword": "TABLESAMPLE BERNOULLI ( argument )  REPEATABLE ( seed ) ",
        "tree": " (tablesample_clause TABLESAMPLE (func_name (type_function_name (identifier BERNOULLI))) ( )  (opt_repeatable_clause REPEATABLE ( )))",
        "description": "A <CodeLiteral>TABLESAMPLE</CodeLiteral> clause after a table_name indicates that the specified sampling_method should be used to retrieve a subset of the rows in that table. This sampling precedes the application of any other filters such as <CodeLiteral>WHERE</CodeLiteral> clauses. The standard PostgreSQL distribution includes two sampling methods, <CodeLiteral>BERNOULLI</CodeLiteral> and <CodeLiteral>SYSTEM</CodeLiteral>, and other sampling methods can be installed in the database via extensions.\n  The <CodeLiteral>BERNOULLI</CodeLiteral> and <CodeLiteral>SYSTEM</CodeLiteral> sampling methods each accept a single argument which is the fraction of the table to sample, expressed as a percentage between 0 and 100. This argument can be any real-valued expression. (Other sampling methods might accept more or different arguments.) These two methods each return a randomly-chosen sample of the table that will contain approximately the specified percentage of the table's rows. The <CodeLiteral>BERNOULLI</CodeLiteral> method scans the whole table and selects or ignores individual rows independently with the specified probability. The <CodeLiteral>SYSTEM</CodeLiteral> method does block-level sampling with each block having the specified chance of being selected; all rows in each selected block are returned. The <CodeLiteral>SYSTEM</CodeLiteral> method is significantly faster than the <CodeLiteral>BERNOULLI</CodeLiteral> method when small sampling percentages are specified, but it may return a less-random sample of the table as a result of clustering effects.\n  The optional <CodeLiteral>REPEATABLE</CodeLiteral> clause specifies a seed number or expression to use for generating random numbers within the sampling method. The seed value can be any non-null floating-point value. Two queries that specify the same seed and argument values will select the same sample of the table, if the table has not been changed meanwhile. But different seed values will usually produce different samples. If <CodeLiteral>REPEATABLE</CodeLiteral> is not given then a new random sample is selected for each query, based upon a system-generated seed. Note that some add-on sampling methods do not accept <CodeLiteral>REPEATABLE</CodeLiteral>, and will always produce new samples on each use.",
        "detail": "[DESCRIPTION]: A <CodeLiteral>TABLESAMPLE</CodeLiteral> clause after a table_name indicates that the specified sampling_method should be used to retrieve a subset of the rows in that table. This sampling precedes the application of any other filters such as <CodeLiteral>WHERE</CodeLiteral> clauses. The standard PostgreSQL distribution includes two sampling methods, <CodeLiteral>BERNOULLI</CodeLiteral> and <CodeLiteral>SYSTEM</CodeLiteral>, and other sampling methods can be installed in the database via extensions.\n  The <CodeLiteral>BERNOULLI</CodeLiteral> and <CodeLiteral>SYSTEM</CodeLiteral> sampling methods each accept a single argument which is the fraction of the table to sample, expressed as a percentage between 0 and 100. This argument can be any real-valued expression. (Other sampling methods might accept more or different arguments.) These two methods each return a randomly-chosen sample of the table that will contain approximately the specified percentage of the table's rows. The <CodeLiteral>BERNOULLI</CodeLiteral> method scans the whole table and selects or ignores individual rows independently with the specified probability. The <CodeLiteral>SYSTEM</CodeLiteral> method does block-level sampling with each block having the specified chance of being selected; all rows in each selected block are returned. The <CodeLiteral>SYSTEM</CodeLiteral> method is significantly faster than the <CodeLiteral>BERNOULLI</CodeLiteral> method when small sampling percentages are specified, but it may return a less-random sample of the table as a result of clustering effects.\n  The optional <CodeLiteral>REPEATABLE</CodeLiteral> clause specifies a seed number or expression to use for generating random numbers within the sampling method. The seed value can be any non-null floating-point value. Two queries that specify the same seed and argument values will select the same sample of the table, if the table has not been changed meanwhile. But different seed values will usually produce different samples. If <CodeLiteral>REPEATABLE</CodeLiteral> is not given then a new random sample is selected for each query, based upon a system-generated seed. Note that some add-on sampling methods do not accept <CodeLiteral>REPEATABLE</CodeLiteral>, and will always produce new samples on each use.<sep>[DEMO]: SELECT * FROM employees TABLESAMPLE BERNOULLI (10) REPEATABLE (42);",
        "example": [
            "SELECT * FROM employees TABLESAMPLE BERNOULLI (10) REPEATABLE (42);"
        ],
        "link": []
    },
    {
        "type": "keyword",
        "keyword": "TABLESAMPLE SYSTEM ( argument )  REPEATABLE ( seed ) ",
        "tree": " (tablesample_clause TABLESAMPLE (func_name (type_function_name (unreserved_keyword SYSTEM))) ( )  (opt_repeatable_clause REPEATABLE ( )))",
        "description": "A <CodeLiteral>TABLESAMPLE</CodeLiteral> clause after a table_name indicates that the specified sampling_method should be used to retrieve a subset of the rows in that table. This sampling precedes the application of any other filters such as <CodeLiteral>WHERE</CodeLiteral> clauses. The standard PostgreSQL distribution includes two sampling methods, <CodeLiteral>BERNOULLI</CodeLiteral> and <CodeLiteral>SYSTEM</CodeLiteral>, and other sampling methods can be installed in the database via extensions.\n  The <CodeLiteral>BERNOULLI</CodeLiteral> and <CodeLiteral>SYSTEM</CodeLiteral> sampling methods each accept a single argument which is the fraction of the table to sample, expressed as a percentage between 0 and 100. This argument can be any real-valued expression. (Other sampling methods might accept more or different arguments.) These two methods each return a randomly-chosen sample of the table that will contain approximately the specified percentage of the table's rows. The <CodeLiteral>BERNOULLI</CodeLiteral> method scans the whole table and selects or ignores individual rows independently with the specified probability. The <CodeLiteral>SYSTEM</CodeLiteral> method does block-level sampling with each block having the specified chance of being selected; all rows in each selected block are returned. The <CodeLiteral>SYSTEM</CodeLiteral> method is significantly faster than the <CodeLiteral>BERNOULLI</CodeLiteral> method when small sampling percentages are specified, but it may return a less-random sample of the table as a result of clustering effects.\n  The optional <CodeLiteral>REPEATABLE</CodeLiteral> clause specifies a seed number or expression to use for generating random numbers within the sampling method. The seed value can be any non-null floating-point value. Two queries that specify the same seed and argument values will select the same sample of the table, if the table has not been changed meanwhile. But different seed values will usually produce different samples. If <CodeLiteral>REPEATABLE</CodeLiteral> is not given then a new random sample is selected for each query, based upon a system-generated seed. Note that some add-on sampling methods do not accept <CodeLiteral>REPEATABLE</CodeLiteral>, and will always produce new samples on each use.",
        "detail": "[DESCRIPTION]: A <CodeLiteral>TABLESAMPLE</CodeLiteral> clause after a table_name indicates that the specified sampling_method should be used to retrieve a subset of the rows in that table. This sampling precedes the application of any other filters such as <CodeLiteral>WHERE</CodeLiteral> clauses. The standard PostgreSQL distribution includes two sampling methods, <CodeLiteral>BERNOULLI</CodeLiteral> and <CodeLiteral>SYSTEM</CodeLiteral>, and other sampling methods can be installed in the database via extensions.\n  The <CodeLiteral>BERNOULLI</CodeLiteral> and <CodeLiteral>SYSTEM</CodeLiteral> sampling methods each accept a single argument which is the fraction of the table to sample, expressed as a percentage between 0 and 100. This argument can be any real-valued expression. (Other sampling methods might accept more or different arguments.) These two methods each return a randomly-chosen sample of the table that will contain approximately the specified percentage of the table's rows. The <CodeLiteral>BERNOULLI</CodeLiteral> method scans the whole table and selects or ignores individual rows independently with the specified probability. The <CodeLiteral>SYSTEM</CodeLiteral> method does block-level sampling with each block having the specified chance of being selected; all rows in each selected block are returned. The <CodeLiteral>SYSTEM</CodeLiteral> method is significantly faster than the <CodeLiteral>BERNOULLI</CodeLiteral> method when small sampling percentages are specified, but it may return a less-random sample of the table as a result of clustering effects.\n  The optional <CodeLiteral>REPEATABLE</CodeLiteral> clause specifies a seed number or expression to use for generating random numbers within the sampling method. The seed value can be any non-null floating-point value. Two queries that specify the same seed and argument values will select the same sample of the table, if the table has not been changed meanwhile. But different seed values will usually produce different samples. If <CodeLiteral>REPEATABLE</CodeLiteral> is not given then a new random sample is selected for each query, based upon a system-generated seed. Note that some add-on sampling methods do not accept <CodeLiteral>REPEATABLE</CodeLiteral>, and will always produce new samples on each use.<sep>[DEMO]: SELECT * FROM employees TABLESAMPLE SYSTEM (10) REPEATABLE (42);",
        "example": [
            "SELECT * FROM employees TABLESAMPLE SYSTEM (10) REPEATABLE (42);"
        ],
        "link": []
    },
    {
        "type": "keyword",
        "keyword": "TABLESAMPLE BERNOULLI ( argument ) ",
        "tree": " (tablesample_clause TABLESAMPLE (func_name (type_function_name (identifier BERNOULLI))) ( ))",
        "description": "A <CodeLiteral>TABLESAMPLE</CodeLiteral> clause after a table_name indicates that the specified sampling_method should be used to retrieve a subset of the rows in that table. This sampling precedes the application of any other filters such as <CodeLiteral>WHERE</CodeLiteral> clauses. The standard PostgreSQL distribution includes two sampling methods, <CodeLiteral>BERNOULLI</CodeLiteral> and <CodeLiteral>SYSTEM</CodeLiteral>, and other sampling methods can be installed in the database via extensions.\n  The <CodeLiteral>BERNOULLI</CodeLiteral> and <CodeLiteral>SYSTEM</CodeLiteral> sampling methods each accept a single argument which is the fraction of the table to sample, expressed as a percentage between 0 and 100. This argument can be any real-valued expression. (Other sampling methods might accept more or different arguments.) These two methods each return a randomly-chosen sample of the table that will contain approximately the specified percentage of the table's rows. The <CodeLiteral>BERNOULLI</CodeLiteral> method scans the whole table and selects or ignores individual rows independently with the specified probability. The <CodeLiteral>SYSTEM</CodeLiteral> method does block-level sampling with each block having the specified chance of being selected; all rows in each selected block are returned. The <CodeLiteral>SYSTEM</CodeLiteral> method is significantly faster than the <CodeLiteral>BERNOULLI</CodeLiteral> method when small sampling percentages are specified, but it may return a less-random sample of the table as a result of clustering effects.\n  The optional <CodeLiteral>REPEATABLE</CodeLiteral> clause specifies a seed number or expression to use for generating random numbers within the sampling method. The seed value can be any non-null floating-point value. Two queries that specify the same seed and argument values will select the same sample of the table, if the table has not been changed meanwhile. But different seed values will usually produce different samples. If <CodeLiteral>REPEATABLE</CodeLiteral> is not given then a new random sample is selected for each query, based upon a system-generated seed. Note that some add-on sampling methods do not accept <CodeLiteral>REPEATABLE</CodeLiteral>, and will always produce new samples on each use.",
        "detail": "[DESCRIPTION]: A <CodeLiteral>TABLESAMPLE</CodeLiteral> clause after a table_name indicates that the specified sampling_method should be used to retrieve a subset of the rows in that table. This sampling precedes the application of any other filters such as <CodeLiteral>WHERE</CodeLiteral> clauses. The standard PostgreSQL distribution includes two sampling methods, <CodeLiteral>BERNOULLI</CodeLiteral> and <CodeLiteral>SYSTEM</CodeLiteral>, and other sampling methods can be installed in the database via extensions.\n  The <CodeLiteral>BERNOULLI</CodeLiteral> and <CodeLiteral>SYSTEM</CodeLiteral> sampling methods each accept a single argument which is the fraction of the table to sample, expressed as a percentage between 0 and 100. This argument can be any real-valued expression. (Other sampling methods might accept more or different arguments.) These two methods each return a randomly-chosen sample of the table that will contain approximately the specified percentage of the table's rows. The <CodeLiteral>BERNOULLI</CodeLiteral> method scans the whole table and selects or ignores individual rows independently with the specified probability. The <CodeLiteral>SYSTEM</CodeLiteral> method does block-level sampling with each block having the specified chance of being selected; all rows in each selected block are returned. The <CodeLiteral>SYSTEM</CodeLiteral> method is significantly faster than the <CodeLiteral>BERNOULLI</CodeLiteral> method when small sampling percentages are specified, but it may return a less-random sample of the table as a result of clustering effects.\n  The optional <CodeLiteral>REPEATABLE</CodeLiteral> clause specifies a seed number or expression to use for generating random numbers within the sampling method. The seed value can be any non-null floating-point value. Two queries that specify the same seed and argument values will select the same sample of the table, if the table has not been changed meanwhile. But different seed values will usually produce different samples. If <CodeLiteral>REPEATABLE</CodeLiteral> is not given then a new random sample is selected for each query, based upon a system-generated seed. Note that some add-on sampling methods do not accept <CodeLiteral>REPEATABLE</CodeLiteral>, and will always produce new samples on each use.<sep>[DEMO]: SELECT * FROM employees TABLESAMPLE BERNOULLI (10);",
        "example": [
            "SELECT * FROM employees TABLESAMPLE BERNOULLI (10);"
        ],
        "link": []
    },
    {
        "type": "keyword",
        "keyword": "TABLESAMPLE SYSTEM ( argument ) ",
        "tree": " (tablesample_clause TABLESAMPLE (func_name (type_function_name (unreserved_keyword SYSTEM))) ( ))",
        "description": "A <CodeLiteral>TABLESAMPLE</CodeLiteral> clause after a table_name indicates that the specified sampling_method should be used to retrieve a subset of the rows in that table. This sampling precedes the application of any other filters such as <CodeLiteral>WHERE</CodeLiteral> clauses. The standard PostgreSQL distribution includes two sampling methods, <CodeLiteral>BERNOULLI</CodeLiteral> and <CodeLiteral>SYSTEM</CodeLiteral>, and other sampling methods can be installed in the database via extensions.\n  The <CodeLiteral>BERNOULLI</CodeLiteral> and <CodeLiteral>SYSTEM</CodeLiteral> sampling methods each accept a single argument which is the fraction of the table to sample, expressed as a percentage between 0 and 100. This argument can be any real-valued expression. (Other sampling methods might accept more or different arguments.) These two methods each return a randomly-chosen sample of the table that will contain approximately the specified percentage of the table's rows. The <CodeLiteral>BERNOULLI</CodeLiteral> method scans the whole table and selects or ignores individual rows independently with the specified probability. The <CodeLiteral>SYSTEM</CodeLiteral> method does block-level sampling with each block having the specified chance of being selected; all rows in each selected block are returned. The <CodeLiteral>SYSTEM</CodeLiteral> method is significantly faster than the <CodeLiteral>BERNOULLI</CodeLiteral> method when small sampling percentages are specified, but it may return a less-random sample of the table as a result of clustering effects.\n  The optional <CodeLiteral>REPEATABLE</CodeLiteral> clause specifies a seed number or expression to use for generating random numbers within the sampling method. The seed value can be any non-null floating-point value. Two queries that specify the same seed and argument values will select the same sample of the table, if the table has not been changed meanwhile. But different seed values will usually produce different samples. If <CodeLiteral>REPEATABLE</CodeLiteral> is not given then a new random sample is selected for each query, based upon a system-generated seed. Note that some add-on sampling methods do not accept <CodeLiteral>REPEATABLE</CodeLiteral>, and will always produce new samples on each use.",
        "detail": "[DESCRIPTION]: A <CodeLiteral>TABLESAMPLE</CodeLiteral> clause after a table_name indicates that the specified sampling_method should be used to retrieve a subset of the rows in that table. This sampling precedes the application of any other filters such as <CodeLiteral>WHERE</CodeLiteral> clauses. The standard PostgreSQL distribution includes two sampling methods, <CodeLiteral>BERNOULLI</CodeLiteral> and <CodeLiteral>SYSTEM</CodeLiteral>, and other sampling methods can be installed in the database via extensions.\n  The <CodeLiteral>BERNOULLI</CodeLiteral> and <CodeLiteral>SYSTEM</CodeLiteral> sampling methods each accept a single argument which is the fraction of the table to sample, expressed as a percentage between 0 and 100. This argument can be any real-valued expression. (Other sampling methods might accept more or different arguments.) These two methods each return a randomly-chosen sample of the table that will contain approximately the specified percentage of the table's rows. The <CodeLiteral>BERNOULLI</CodeLiteral> method scans the whole table and selects or ignores individual rows independently with the specified probability. The <CodeLiteral>SYSTEM</CodeLiteral> method does block-level sampling with each block having the specified chance of being selected; all rows in each selected block are returned. The <CodeLiteral>SYSTEM</CodeLiteral> method is significantly faster than the <CodeLiteral>BERNOULLI</CodeLiteral> method when small sampling percentages are specified, but it may return a less-random sample of the table as a result of clustering effects.\n  The optional <CodeLiteral>REPEATABLE</CodeLiteral> clause specifies a seed number or expression to use for generating random numbers within the sampling method. The seed value can be any non-null floating-point value. Two queries that specify the same seed and argument values will select the same sample of the table, if the table has not been changed meanwhile. But different seed values will usually produce different samples. If <CodeLiteral>REPEATABLE</CodeLiteral> is not given then a new random sample is selected for each query, based upon a system-generated seed. Note that some add-on sampling methods do not accept <CodeLiteral>REPEATABLE</CodeLiteral>, and will always produce new samples on each use.<sep>[DEMO]: SELECT * FROM employees TABLESAMPLE SYSTEM (10);",
        "example": [
            "SELECT * FROM employees TABLESAMPLE SYSTEM (10);"
        ],
        "link": []
    },
    {
        "type": "keyword",
        "keyword": "LATERAL ( select )  alias",
        "tree": " (table_ref LATERAL (select_with_parens ( )))",
        "description": "A sub-SELECT can appear in the <CodeLiteral>FROM</CodeLiteral> clause. This acts as though its output were created as a temporary table for the duration of this single SELECT command. Note that the sub-SELECT must be surrounded by parentheses, and an alias must be provided for it. A VALUES command can also be used here.",
        "detail": "[DESCRIPTION]: A sub-SELECT can appear in the <CodeLiteral>FROM</CodeLiteral> clause. This acts as though its output were created as a temporary table for the duration of this single SELECT command. Note that the sub-SELECT must be surrounded by parentheses, and an alias must be provided for it. A VALUES command can also be used here.<sep>[DEMO]: SELECT a.id, b.val FROM table1 a, LATERAL (SELECT value AS val FROM table2 WHERE table2.id = a.id) b",
        "example": [
            "SELECT a.id, b.val FROM table1 a, LATERAL (SELECT value AS val FROM table2 WHERE table2.id = a.id) b"
        ],
        "link": []
    },
    {
        "type": "keyword",
        "keyword": "with_query_name AS alias",
        "tree": "(common_table_expr AS)",
        "description": "A <CodeLiteral>WITH</CodeLiteral> query is referenced by writing its name, just as though the query's name were a table name. (In fact, the <CodeLiteral>WITH</CodeLiteral> query hides any real table of the same name for the purposes of the primary query. If necessary, you can refer to a real table of the same name by schema-qualifying the table's name.) An alias can be provided in the same way as for a table.",
        "detail": "[DESCRIPTION]: A <CodeLiteral>WITH</CodeLiteral> query is referenced by writing its name, just as though the query's name were a table name. (In fact, the <CodeLiteral>WITH</CodeLiteral> query hides any real table of the same name for the purposes of the primary query. If necessary, you can refer to a real table of the same name by schema-qualifying the table's name.) An alias can be provided in the same way as for a table.<sep>[DEMO]: WITH summary AS (SELECT department, COUNT(*) AS total_employees FROM employees GROUP BY department) SELECT * FROM summary;",
        "example": [
            "WITH summary AS (SELECT department, COUNT(*) AS total_employees FROM employees GROUP BY department) SELECT * FROM summary;"
        ],
        "link": []
    },
    {
        "type": "keyword",
        "keyword": "LATERAL function_name ( argument ) ",
        "tree": " (table_ref LATERAL (func_table (func_expr_windowless (func_application ( )))))",
        "description": "Function calls can appear in the <CodeLiteral>FROM</CodeLiteral> clause. (This is especially useful for functions that return result sets, but any function can be used.) This acts as though the function's output were created as a temporary table for the duration of this single SELECT command. When the optional WITH ORDINALITY clause is added to the function call, a new column is appended after all the function's output columns with numbering for each row.\n  An alias can be provided in the same way as for a table. If an alias is written, a column alias list can also be written to provide substitute names for one or more attributes of the function's composite return type, including the column added by <CodeLiteral>ORDINALITY</CodeLiteral> if present.\n  Multiple function calls can be combined into a single <CodeLiteral>FROM</CodeLiteral>-clause item by surrounding them with <CodeLiteral>ROWS FROM( ... )</CodeLiteral>. The output of such an item is the concatenation of the first row from each function, then the second row from each function, etc. If some of the functions produce fewer rows than others, null values are substituted for the missing data, so that the total number of rows returned is always the same as for the function that produced the most rows.\n  If the function has been defined as returning the record data type, then an alias or the key word <CodeLiteral>AS</CodeLiteral> must be present, followed by a column definition list in the form <CodeLiteral>( column_name data_type [, ... ])</CodeLiteral>. The column definition list must match the actual number and types of columns returned by the function.\n  When using the <CodeLiteral>ROWS FROM( ... )</CodeLiteral> syntax, if one of the functions requires a column definition list, it's preferred to put the column definition list after the function call inside <CodeLiteral>ROWS FROM( ... )</CodeLiteral>. A column definition list can be placed after the <CodeLiteral>ROWS FROM( ... )</CodeLiteral> construct only if there's just a single function and no <CodeLiteral>WITH ORDINALITY</CodeLiteral> clause.\n  To use <CodeLiteral>ORDINALITY</CodeLiteral> together with a column definition list, you must use the <CodeLiteral>ROWS FROM( ... )</CodeLiteral> syntax and put the column definition list inside <CodeLiteral>ROWS FROM( ... )</CodeLiteral>.",
        "detail": "[DESCRIPTION]: Function calls can appear in the <CodeLiteral>FROM</CodeLiteral> clause. (This is especially useful for functions that return result sets, but any function can be used.) This acts as though the function's output were created as a temporary table for the duration of this single SELECT command. When the optional WITH ORDINALITY clause is added to the function call, a new column is appended after all the function's output columns with numbering for each row.\n  An alias can be provided in the same way as for a table. If an alias is written, a column alias list can also be written to provide substitute names for one or more attributes of the function's composite return type, including the column added by <CodeLiteral>ORDINALITY</CodeLiteral> if present.\n  Multiple function calls can be combined into a single <CodeLiteral>FROM</CodeLiteral>-clause item by surrounding them with <CodeLiteral>ROWS FROM( ... )</CodeLiteral>. The output of such an item is the concatenation of the first row from each function, then the second row from each function, etc. If some of the functions produce fewer rows than others, null values are substituted for the missing data, so that the total number of rows returned is always the same as for the function that produced the most rows.\n  If the function has been defined as returning the record data type, then an alias or the key word <CodeLiteral>AS</CodeLiteral> must be present, followed by a column definition list in the form <CodeLiteral>( column_name data_type [, ... ])</CodeLiteral>. The column definition list must match the actual number and types of columns returned by the function.\n  When using the <CodeLiteral>ROWS FROM( ... )</CodeLiteral> syntax, if one of the functions requires a column definition list, it's preferred to put the column definition list after the function call inside <CodeLiteral>ROWS FROM( ... )</CodeLiteral>. A column definition list can be placed after the <CodeLiteral>ROWS FROM( ... )</CodeLiteral> construct only if there's just a single function and no <CodeLiteral>WITH ORDINALITY</CodeLiteral> clause.\n  To use <CodeLiteral>ORDINALITY</CodeLiteral> together with a column definition list, you must use the <CodeLiteral>ROWS FROM( ... )</CodeLiteral> syntax and put the column definition list inside <CodeLiteral>ROWS FROM( ... )</CodeLiteral>.<sep>[DEMO]: ",
        "example": [
            ""
        ],
        "link": []
    },
    {
        "type": "keyword",
        "keyword": "WITH ORDINALITY",
        "tree": " (opt_ordinality WITH ORDINALITY)",
        "description": "Function calls can appear in the <CodeLiteral>FROM</CodeLiteral> clause. (This is especially useful for functions that return result sets, but any function can be used.) This acts as though the function's output were created as a temporary table for the duration of this single SELECT command. When the optional WITH ORDINALITY clause is added to the function call, a new column is appended after all the function's output columns with numbering for each row.\n  An alias can be provided in the same way as for a table. If an alias is written, a column alias list can also be written to provide substitute names for one or more attributes of the function's composite return type, including the column added by <CodeLiteral>ORDINALITY</CodeLiteral> if present.\n  Multiple function calls can be combined into a single <CodeLiteral>FROM</CodeLiteral>-clause item by surrounding them with <CodeLiteral>ROWS FROM( ... )</CodeLiteral>. The output of such an item is the concatenation of the first row from each function, then the second row from each function, etc. If some of the functions produce fewer rows than others, null values are substituted for the missing data, so that the total number of rows returned is always the same as for the function that produced the most rows.\n  If the function has been defined as returning the record data type, then an alias or the key word <CodeLiteral>AS</CodeLiteral> must be present, followed by a column definition list in the form <CodeLiteral>( column_name data_type [, ... ])</CodeLiteral>. The column definition list must match the actual number and types of columns returned by the function.\n  When using the <CodeLiteral>ROWS FROM( ... )</CodeLiteral> syntax, if one of the functions requires a column definition list, it's preferred to put the column definition list after the function call inside <CodeLiteral>ROWS FROM( ... )</CodeLiteral>. A column definition list can be placed after the <CodeLiteral>ROWS FROM( ... )</CodeLiteral> construct only if there's just a single function and no <CodeLiteral>WITH ORDINALITY</CodeLiteral> clause.\n  To use <CodeLiteral>ORDINALITY</CodeLiteral> together with a column definition list, you must use the <CodeLiteral>ROWS FROM( ... )</CodeLiteral> syntax and put the column definition list inside <CodeLiteral>ROWS FROM( ... )</CodeLiteral>.",
        "detail": "[DESCRIPTION]: Function calls can appear in the <CodeLiteral>FROM</CodeLiteral> clause. (This is especially useful for functions that return result sets, but any function can be used.) This acts as though the function's output were created as a temporary table for the duration of this single SELECT command. When the optional WITH ORDINALITY clause is added to the function call, a new column is appended after all the function's output columns with numbering for each row.\n  An alias can be provided in the same way as for a table. If an alias is written, a column alias list can also be written to provide substitute names for one or more attributes of the function's composite return type, including the column added by <CodeLiteral>ORDINALITY</CodeLiteral> if present.\n  Multiple function calls can be combined into a single <CodeLiteral>FROM</CodeLiteral>-clause item by surrounding them with <CodeLiteral>ROWS FROM( ... )</CodeLiteral>. The output of such an item is the concatenation of the first row from each function, then the second row from each function, etc. If some of the functions produce fewer rows than others, null values are substituted for the missing data, so that the total number of rows returned is always the same as for the function that produced the most rows.\n  If the function has been defined as returning the record data type, then an alias or the key word <CodeLiteral>AS</CodeLiteral> must be present, followed by a column definition list in the form <CodeLiteral>( column_name data_type [, ... ])</CodeLiteral>. The column definition list must match the actual number and types of columns returned by the function.\n  When using the <CodeLiteral>ROWS FROM( ... )</CodeLiteral> syntax, if one of the functions requires a column definition list, it's preferred to put the column definition list after the function call inside <CodeLiteral>ROWS FROM( ... )</CodeLiteral>. A column definition list can be placed after the <CodeLiteral>ROWS FROM( ... )</CodeLiteral> construct only if there's just a single function and no <CodeLiteral>WITH ORDINALITY</CodeLiteral> clause.\n  To use <CodeLiteral>ORDINALITY</CodeLiteral> together with a column definition list, you must use the <CodeLiteral>ROWS FROM( ... )</CodeLiteral> syntax and put the column definition list inside <CodeLiteral>ROWS FROM( ... )</CodeLiteral>.<sep>[DEMO]: SELECT * FROM generate_series(1, 5) WITH ORDINALITY AS t(number, ord)",
        "example": [
            "SELECT * FROM generate_series(1, 5) WITH ORDINALITY AS t(number, ord)"
        ],
        "link": []
    },
    {
        "type": "keyword",
        "keyword": "AS alias",
        "tree": " (alias_clause AS)",
        "description": "Function calls can appear in the <CodeLiteral>FROM</CodeLiteral> clause. (This is especially useful for functions that return result sets, but any function can be used.) This acts as though the function's output were created as a temporary table for the duration of this single SELECT command. When the optional WITH ORDINALITY clause is added to the function call, a new column is appended after all the function's output columns with numbering for each row.\n  An alias can be provided in the same way as for a table. If an alias is written, a column alias list can also be written to provide substitute names for one or more attributes of the function's composite return type, including the column added by <CodeLiteral>ORDINALITY</CodeLiteral> if present.\n  Multiple function calls can be combined into a single <CodeLiteral>FROM</CodeLiteral>-clause item by surrounding them with <CodeLiteral>ROWS FROM( ... )</CodeLiteral>. The output of such an item is the concatenation of the first row from each function, then the second row from each function, etc. If some of the functions produce fewer rows than others, null values are substituted for the missing data, so that the total number of rows returned is always the same as for the function that produced the most rows.\n  If the function has been defined as returning the record data type, then an alias or the key word <CodeLiteral>AS</CodeLiteral> must be present, followed by a column definition list in the form <CodeLiteral>( column_name data_type [, ... ])</CodeLiteral>. The column definition list must match the actual number and types of columns returned by the function.\n  When using the <CodeLiteral>ROWS FROM( ... )</CodeLiteral> syntax, if one of the functions requires a column definition list, it's preferred to put the column definition list after the function call inside <CodeLiteral>ROWS FROM( ... )</CodeLiteral>. A column definition list can be placed after the <CodeLiteral>ROWS FROM( ... )</CodeLiteral> construct only if there's just a single function and no <CodeLiteral>WITH ORDINALITY</CodeLiteral> clause.\n  To use <CodeLiteral>ORDINALITY</CodeLiteral> together with a column definition list, you must use the <CodeLiteral>ROWS FROM( ... )</CodeLiteral> syntax and put the column definition list inside <CodeLiteral>ROWS FROM( ... )</CodeLiteral>.",
        "detail": "[DESCRIPTION]: Function calls can appear in the <CodeLiteral>FROM</CodeLiteral> clause. (This is especially useful for functions that return result sets, but any function can be used.) This acts as though the function's output were created as a temporary table for the duration of this single SELECT command. When the optional WITH ORDINALITY clause is added to the function call, a new column is appended after all the function's output columns with numbering for each row.\n  An alias can be provided in the same way as for a table. If an alias is written, a column alias list can also be written to provide substitute names for one or more attributes of the function's composite return type, including the column added by <CodeLiteral>ORDINALITY</CodeLiteral> if present.\n  Multiple function calls can be combined into a single <CodeLiteral>FROM</CodeLiteral>-clause item by surrounding them with <CodeLiteral>ROWS FROM( ... )</CodeLiteral>. The output of such an item is the concatenation of the first row from each function, then the second row from each function, etc. If some of the functions produce fewer rows than others, null values are substituted for the missing data, so that the total number of rows returned is always the same as for the function that produced the most rows.\n  If the function has been defined as returning the record data type, then an alias or the key word <CodeLiteral>AS</CodeLiteral> must be present, followed by a column definition list in the form <CodeLiteral>( column_name data_type [, ... ])</CodeLiteral>. The column definition list must match the actual number and types of columns returned by the function.\n  When using the <CodeLiteral>ROWS FROM( ... )</CodeLiteral> syntax, if one of the functions requires a column definition list, it's preferred to put the column definition list after the function call inside <CodeLiteral>ROWS FROM( ... )</CodeLiteral>. A column definition list can be placed after the <CodeLiteral>ROWS FROM( ... )</CodeLiteral> construct only if there's just a single function and no <CodeLiteral>WITH ORDINALITY</CodeLiteral> clause.\n  To use <CodeLiteral>ORDINALITY</CodeLiteral> together with a column definition list, you must use the <CodeLiteral>ROWS FROM( ... )</CodeLiteral> syntax and put the column definition list inside <CodeLiteral>ROWS FROM( ... )</CodeLiteral>.<sep>[DEMO]: SELECT * FROM generate_series(1, 3) AS series(id)",
        "example": [
            "SELECT * FROM generate_series(1, 3) AS series(id)"
        ],
        "link": []
    },
    {
        "type": "keyword",
        "keyword": "alias ( column_alias ) ",
        "tree": " (alias_clause ( ))",
        "description": "Function calls can appear in the <CodeLiteral>FROM</CodeLiteral> clause. (This is especially useful for functions that return result sets, but any function can be used.) This acts as though the function's output were created as a temporary table for the duration of this single SELECT command. When the optional WITH ORDINALITY clause is added to the function call, a new column is appended after all the function's output columns with numbering for each row.\n  An alias can be provided in the same way as for a table. If an alias is written, a column alias list can also be written to provide substitute names for one or more attributes of the function's composite return type, including the column added by <CodeLiteral>ORDINALITY</CodeLiteral> if present.\n  Multiple function calls can be combined into a single <CodeLiteral>FROM</CodeLiteral>-clause item by surrounding them with <CodeLiteral>ROWS FROM( ... )</CodeLiteral>. The output of such an item is the concatenation of the first row from each function, then the second row from each function, etc. If some of the functions produce fewer rows than others, null values are substituted for the missing data, so that the total number of rows returned is always the same as for the function that produced the most rows.\n  If the function has been defined as returning the record data type, then an alias or the key word <CodeLiteral>AS</CodeLiteral> must be present, followed by a column definition list in the form <CodeLiteral>( column_name data_type [, ... ])</CodeLiteral>. The column definition list must match the actual number and types of columns returned by the function.\n  When using the <CodeLiteral>ROWS FROM( ... )</CodeLiteral> syntax, if one of the functions requires a column definition list, it's preferred to put the column definition list after the function call inside <CodeLiteral>ROWS FROM( ... )</CodeLiteral>. A column definition list can be placed after the <CodeLiteral>ROWS FROM( ... )</CodeLiteral> construct only if there's just a single function and no <CodeLiteral>WITH ORDINALITY</CodeLiteral> clause.\n  To use <CodeLiteral>ORDINALITY</CodeLiteral> together with a column definition list, you must use the <CodeLiteral>ROWS FROM( ... )</CodeLiteral> syntax and put the column definition list inside <CodeLiteral>ROWS FROM( ... )</CodeLiteral>.",
        "detail": "[DESCRIPTION]: Function calls can appear in the <CodeLiteral>FROM</CodeLiteral> clause. (This is especially useful for functions that return result sets, but any function can be used.) This acts as though the function's output were created as a temporary table for the duration of this single SELECT command. When the optional WITH ORDINALITY clause is added to the function call, a new column is appended after all the function's output columns with numbering for each row.\n  An alias can be provided in the same way as for a table. If an alias is written, a column alias list can also be written to provide substitute names for one or more attributes of the function's composite return type, including the column added by <CodeLiteral>ORDINALITY</CodeLiteral> if present.\n  Multiple function calls can be combined into a single <CodeLiteral>FROM</CodeLiteral>-clause item by surrounding them with <CodeLiteral>ROWS FROM( ... )</CodeLiteral>. The output of such an item is the concatenation of the first row from each function, then the second row from each function, etc. If some of the functions produce fewer rows than others, null values are substituted for the missing data, so that the total number of rows returned is always the same as for the function that produced the most rows.\n  If the function has been defined as returning the record data type, then an alias or the key word <CodeLiteral>AS</CodeLiteral> must be present, followed by a column definition list in the form <CodeLiteral>( column_name data_type [, ... ])</CodeLiteral>. The column definition list must match the actual number and types of columns returned by the function.\n  When using the <CodeLiteral>ROWS FROM( ... )</CodeLiteral> syntax, if one of the functions requires a column definition list, it's preferred to put the column definition list after the function call inside <CodeLiteral>ROWS FROM( ... )</CodeLiteral>. A column definition list can be placed after the <CodeLiteral>ROWS FROM( ... )</CodeLiteral> construct only if there's just a single function and no <CodeLiteral>WITH ORDINALITY</CodeLiteral> clause.\n  To use <CodeLiteral>ORDINALITY</CodeLiteral> together with a column definition list, you must use the <CodeLiteral>ROWS FROM( ... )</CodeLiteral> syntax and put the column definition list inside <CodeLiteral>ROWS FROM( ... )</CodeLiteral>.<sep>[DEMO]: SELECT * FROM generate_series(1, 5) AS t (number) WHERE t.number <= 3;",
        "example": [
            "SELECT * FROM generate_series(1, 5) AS t (number) WHERE t.number <= 3;"
        ],
        "link": []
    },
    {
        "type": "keyword",
        "keyword": "LATERAL function_name ( argument )  alias ( column_definition ) ",
        "tree": " (table_ref LATERAL (func_table (func_expr_windowless (func_application ( )))) (func_alias_clause (alias_clause AS ( ))))",
        "description": "Function calls can appear in the <CodeLiteral>FROM</CodeLiteral> clause. (This is especially useful for functions that return result sets, but any function can be used.) This acts as though the function's output were created as a temporary table for the duration of this single SELECT command. When the optional WITH ORDINALITY clause is added to the function call, a new column is appended after all the function's output columns with numbering for each row.\n  An alias can be provided in the same way as for a table. If an alias is written, a column alias list can also be written to provide substitute names for one or more attributes of the function's composite return type, including the column added by <CodeLiteral>ORDINALITY</CodeLiteral> if present.\n  Multiple function calls can be combined into a single <CodeLiteral>FROM</CodeLiteral>-clause item by surrounding them with <CodeLiteral>ROWS FROM( ... )</CodeLiteral>. The output of such an item is the concatenation of the first row from each function, then the second row from each function, etc. If some of the functions produce fewer rows than others, null values are substituted for the missing data, so that the total number of rows returned is always the same as for the function that produced the most rows.\n  If the function has been defined as returning the record data type, then an alias or the key word <CodeLiteral>AS</CodeLiteral> must be present, followed by a column definition list in the form <CodeLiteral>( column_name data_type [, ... ])</CodeLiteral>. The column definition list must match the actual number and types of columns returned by the function.\n  When using the <CodeLiteral>ROWS FROM( ... )</CodeLiteral> syntax, if one of the functions requires a column definition list, it's preferred to put the column definition list after the function call inside <CodeLiteral>ROWS FROM( ... )</CodeLiteral>. A column definition list can be placed after the <CodeLiteral>ROWS FROM( ... )</CodeLiteral> construct only if there's just a single function and no <CodeLiteral>WITH ORDINALITY</CodeLiteral> clause.\n  To use <CodeLiteral>ORDINALITY</CodeLiteral> together with a column definition list, you must use the <CodeLiteral>ROWS FROM( ... )</CodeLiteral> syntax and put the column definition list inside <CodeLiteral>ROWS FROM( ... )</CodeLiteral>.",
        "detail": "[DESCRIPTION]: Function calls can appear in the <CodeLiteral>FROM</CodeLiteral> clause. (This is especially useful for functions that return result sets, but any function can be used.) This acts as though the function's output were created as a temporary table for the duration of this single SELECT command. When the optional WITH ORDINALITY clause is added to the function call, a new column is appended after all the function's output columns with numbering for each row.\n  An alias can be provided in the same way as for a table. If an alias is written, a column alias list can also be written to provide substitute names for one or more attributes of the function's composite return type, including the column added by <CodeLiteral>ORDINALITY</CodeLiteral> if present.\n  Multiple function calls can be combined into a single <CodeLiteral>FROM</CodeLiteral>-clause item by surrounding them with <CodeLiteral>ROWS FROM( ... )</CodeLiteral>. The output of such an item is the concatenation of the first row from each function, then the second row from each function, etc. If some of the functions produce fewer rows than others, null values are substituted for the missing data, so that the total number of rows returned is always the same as for the function that produced the most rows.\n  If the function has been defined as returning the record data type, then an alias or the key word <CodeLiteral>AS</CodeLiteral> must be present, followed by a column definition list in the form <CodeLiteral>( column_name data_type [, ... ])</CodeLiteral>. The column definition list must match the actual number and types of columns returned by the function.\n  When using the <CodeLiteral>ROWS FROM( ... )</CodeLiteral> syntax, if one of the functions requires a column definition list, it's preferred to put the column definition list after the function call inside <CodeLiteral>ROWS FROM( ... )</CodeLiteral>. A column definition list can be placed after the <CodeLiteral>ROWS FROM( ... )</CodeLiteral> construct only if there's just a single function and no <CodeLiteral>WITH ORDINALITY</CodeLiteral> clause.\n  To use <CodeLiteral>ORDINALITY</CodeLiteral> together with a column definition list, you must use the <CodeLiteral>ROWS FROM( ... )</CodeLiteral> syntax and put the column definition list inside <CodeLiteral>ROWS FROM( ... )</CodeLiteral>.<sep>[DEMO]: SELECT * FROM LATERAL generate_series(1,5) AS t (num) WITH ORDINALITY;",
        "example": [
            "SELECT * FROM LATERAL generate_series(1,5) AS t (num) WITH ORDINALITY;"
        ],
        "link": []
    },
    {
        "type": "keyword",
        "keyword": "function_name ( argument )  AS alias ( column_definition ) ",
        "tree": " (table_ref (func_table (func_expr_windowless (func_application ( )))) (func_alias_clause (alias_clause AS ( ))))",
        "description": "Function calls can appear in the <CodeLiteral>FROM</CodeLiteral> clause. (This is especially useful for functions that return result sets, but any function can be used.) This acts as though the function's output were created as a temporary table for the duration of this single SELECT command. When the optional WITH ORDINALITY clause is added to the function call, a new column is appended after all the function's output columns with numbering for each row.\n  An alias can be provided in the same way as for a table. If an alias is written, a column alias list can also be written to provide substitute names for one or more attributes of the function's composite return type, including the column added by <CodeLiteral>ORDINALITY</CodeLiteral> if present.\n  Multiple function calls can be combined into a single <CodeLiteral>FROM</CodeLiteral>-clause item by surrounding them with <CodeLiteral>ROWS FROM( ... )</CodeLiteral>. The output of such an item is the concatenation of the first row from each function, then the second row from each function, etc. If some of the functions produce fewer rows than others, null values are substituted for the missing data, so that the total number of rows returned is always the same as for the function that produced the most rows.\n  If the function has been defined as returning the record data type, then an alias or the key word <CodeLiteral>AS</CodeLiteral> must be present, followed by a column definition list in the form <CodeLiteral>( column_name data_type [, ... ])</CodeLiteral>. The column definition list must match the actual number and types of columns returned by the function.\n  When using the <CodeLiteral>ROWS FROM( ... )</CodeLiteral> syntax, if one of the functions requires a column definition list, it's preferred to put the column definition list after the function call inside <CodeLiteral>ROWS FROM( ... )</CodeLiteral>. A column definition list can be placed after the <CodeLiteral>ROWS FROM( ... )</CodeLiteral> construct only if there's just a single function and no <CodeLiteral>WITH ORDINALITY</CodeLiteral> clause.\n  To use <CodeLiteral>ORDINALITY</CodeLiteral> together with a column definition list, you must use the <CodeLiteral>ROWS FROM( ... )</CodeLiteral> syntax and put the column definition list inside <CodeLiteral>ROWS FROM( ... )</CodeLiteral>.",
        "detail": "[DESCRIPTION]: Function calls can appear in the <CodeLiteral>FROM</CodeLiteral> clause. (This is especially useful for functions that return result sets, but any function can be used.) This acts as though the function's output were created as a temporary table for the duration of this single SELECT command. When the optional WITH ORDINALITY clause is added to the function call, a new column is appended after all the function's output columns with numbering for each row.\n  An alias can be provided in the same way as for a table. If an alias is written, a column alias list can also be written to provide substitute names for one or more attributes of the function's composite return type, including the column added by <CodeLiteral>ORDINALITY</CodeLiteral> if present.\n  Multiple function calls can be combined into a single <CodeLiteral>FROM</CodeLiteral>-clause item by surrounding them with <CodeLiteral>ROWS FROM( ... )</CodeLiteral>. The output of such an item is the concatenation of the first row from each function, then the second row from each function, etc. If some of the functions produce fewer rows than others, null values are substituted for the missing data, so that the total number of rows returned is always the same as for the function that produced the most rows.\n  If the function has been defined as returning the record data type, then an alias or the key word <CodeLiteral>AS</CodeLiteral> must be present, followed by a column definition list in the form <CodeLiteral>( column_name data_type [, ... ])</CodeLiteral>. The column definition list must match the actual number and types of columns returned by the function.\n  When using the <CodeLiteral>ROWS FROM( ... )</CodeLiteral> syntax, if one of the functions requires a column definition list, it's preferred to put the column definition list after the function call inside <CodeLiteral>ROWS FROM( ... )</CodeLiteral>. A column definition list can be placed after the <CodeLiteral>ROWS FROM( ... )</CodeLiteral> construct only if there's just a single function and no <CodeLiteral>WITH ORDINALITY</CodeLiteral> clause.\n  To use <CodeLiteral>ORDINALITY</CodeLiteral> together with a column definition list, you must use the <CodeLiteral>ROWS FROM( ... )</CodeLiteral> syntax and put the column definition list inside <CodeLiteral>ROWS FROM( ... )</CodeLiteral>.<sep>[DEMO]: SELECT * FROM generate_series(1, 5) AS series (number);",
        "example": [
            "SELECT * FROM generate_series(1, 5) AS series (number);"
        ],
        "link": []
    },
    {
        "type": "keyword",
        "keyword": "function_name ( argument )  alias ( column_definition ) ",
        "tree": " (table_ref (func_table (func_expr_windowless (func_application ( )))) (func_alias_clause (alias_clause ( ))))",
        "description": "Function calls can appear in the <CodeLiteral>FROM</CodeLiteral> clause. (This is especially useful for functions that return result sets, but any function can be used.) This acts as though the function's output were created as a temporary table for the duration of this single SELECT command. When the optional WITH ORDINALITY clause is added to the function call, a new column is appended after all the function's output columns with numbering for each row.\n  An alias can be provided in the same way as for a table. If an alias is written, a column alias list can also be written to provide substitute names for one or more attributes of the function's composite return type, including the column added by <CodeLiteral>ORDINALITY</CodeLiteral> if present.\n  Multiple function calls can be combined into a single <CodeLiteral>FROM</CodeLiteral>-clause item by surrounding them with <CodeLiteral>ROWS FROM( ... )</CodeLiteral>. The output of such an item is the concatenation of the first row from each function, then the second row from each function, etc. If some of the functions produce fewer rows than others, null values are substituted for the missing data, so that the total number of rows returned is always the same as for the function that produced the most rows.\n  If the function has been defined as returning the record data type, then an alias or the key word <CodeLiteral>AS</CodeLiteral> must be present, followed by a column definition list in the form <CodeLiteral>( column_name data_type [, ... ])</CodeLiteral>. The column definition list must match the actual number and types of columns returned by the function.\n  When using the <CodeLiteral>ROWS FROM( ... )</CodeLiteral> syntax, if one of the functions requires a column definition list, it's preferred to put the column definition list after the function call inside <CodeLiteral>ROWS FROM( ... )</CodeLiteral>. A column definition list can be placed after the <CodeLiteral>ROWS FROM( ... )</CodeLiteral> construct only if there's just a single function and no <CodeLiteral>WITH ORDINALITY</CodeLiteral> clause.\n  To use <CodeLiteral>ORDINALITY</CodeLiteral> together with a column definition list, you must use the <CodeLiteral>ROWS FROM( ... )</CodeLiteral> syntax and put the column definition list inside <CodeLiteral>ROWS FROM( ... )</CodeLiteral>.",
        "detail": "[DESCRIPTION]: Function calls can appear in the <CodeLiteral>FROM</CodeLiteral> clause. (This is especially useful for functions that return result sets, but any function can be used.) This acts as though the function's output were created as a temporary table for the duration of this single SELECT command. When the optional WITH ORDINALITY clause is added to the function call, a new column is appended after all the function's output columns with numbering for each row.\n  An alias can be provided in the same way as for a table. If an alias is written, a column alias list can also be written to provide substitute names for one or more attributes of the function's composite return type, including the column added by <CodeLiteral>ORDINALITY</CodeLiteral> if present.\n  Multiple function calls can be combined into a single <CodeLiteral>FROM</CodeLiteral>-clause item by surrounding them with <CodeLiteral>ROWS FROM( ... )</CodeLiteral>. The output of such an item is the concatenation of the first row from each function, then the second row from each function, etc. If some of the functions produce fewer rows than others, null values are substituted for the missing data, so that the total number of rows returned is always the same as for the function that produced the most rows.\n  If the function has been defined as returning the record data type, then an alias or the key word <CodeLiteral>AS</CodeLiteral> must be present, followed by a column definition list in the form <CodeLiteral>( column_name data_type [, ... ])</CodeLiteral>. The column definition list must match the actual number and types of columns returned by the function.\n  When using the <CodeLiteral>ROWS FROM( ... )</CodeLiteral> syntax, if one of the functions requires a column definition list, it's preferred to put the column definition list after the function call inside <CodeLiteral>ROWS FROM( ... )</CodeLiteral>. A column definition list can be placed after the <CodeLiteral>ROWS FROM( ... )</CodeLiteral> construct only if there's just a single function and no <CodeLiteral>WITH ORDINALITY</CodeLiteral> clause.\n  To use <CodeLiteral>ORDINALITY</CodeLiteral> together with a column definition list, you must use the <CodeLiteral>ROWS FROM( ... )</CodeLiteral> syntax and put the column definition list inside <CodeLiteral>ROWS FROM( ... )</CodeLiteral>.<sep>[DEMO]: SELECT * FROM generate_series(1,5) AS t(num);",
        "example": [
            "SELECT * FROM generate_series(1,5) AS t(num);"
        ],
        "link": []
    },
    {
        "type": "keyword",
        "keyword": "LATERAL function_name ( argument )  AS ( column_definition ) ",
        "tree": " (table_ref LATERAL (func_table (func_expr_windowless (func_application ( )))) (func_alias_clause (alias_clause AS ( ))))",
        "description": "Function calls can appear in the <CodeLiteral>FROM</CodeLiteral> clause. (This is especially useful for functions that return result sets, but any function can be used.) This acts as though the function's output were created as a temporary table for the duration of this single SELECT command. When the optional WITH ORDINALITY clause is added to the function call, a new column is appended after all the function's output columns with numbering for each row.\n  An alias can be provided in the same way as for a table. If an alias is written, a column alias list can also be written to provide substitute names for one or more attributes of the function's composite return type, including the column added by <CodeLiteral>ORDINALITY</CodeLiteral> if present.\n  Multiple function calls can be combined into a single <CodeLiteral>FROM</CodeLiteral>-clause item by surrounding them with <CodeLiteral>ROWS FROM( ... )</CodeLiteral>. The output of such an item is the concatenation of the first row from each function, then the second row from each function, etc. If some of the functions produce fewer rows than others, null values are substituted for the missing data, so that the total number of rows returned is always the same as for the function that produced the most rows.\n  If the function has been defined as returning the record data type, then an alias or the key word <CodeLiteral>AS</CodeLiteral> must be present, followed by a column definition list in the form <CodeLiteral>( column_name data_type [, ... ])</CodeLiteral>. The column definition list must match the actual number and types of columns returned by the function.\n  When using the <CodeLiteral>ROWS FROM( ... )</CodeLiteral> syntax, if one of the functions requires a column definition list, it's preferred to put the column definition list after the function call inside <CodeLiteral>ROWS FROM( ... )</CodeLiteral>. A column definition list can be placed after the <CodeLiteral>ROWS FROM( ... )</CodeLiteral> construct only if there's just a single function and no <CodeLiteral>WITH ORDINALITY</CodeLiteral> clause.\n  To use <CodeLiteral>ORDINALITY</CodeLiteral> together with a column definition list, you must use the <CodeLiteral>ROWS FROM( ... )</CodeLiteral> syntax and put the column definition list inside <CodeLiteral>ROWS FROM( ... )</CodeLiteral>.",
        "detail": "[DESCRIPTION]: Function calls can appear in the <CodeLiteral>FROM</CodeLiteral> clause. (This is especially useful for functions that return result sets, but any function can be used.) This acts as though the function's output were created as a temporary table for the duration of this single SELECT command. When the optional WITH ORDINALITY clause is added to the function call, a new column is appended after all the function's output columns with numbering for each row.\n  An alias can be provided in the same way as for a table. If an alias is written, a column alias list can also be written to provide substitute names for one or more attributes of the function's composite return type, including the column added by <CodeLiteral>ORDINALITY</CodeLiteral> if present.\n  Multiple function calls can be combined into a single <CodeLiteral>FROM</CodeLiteral>-clause item by surrounding them with <CodeLiteral>ROWS FROM( ... )</CodeLiteral>. The output of such an item is the concatenation of the first row from each function, then the second row from each function, etc. If some of the functions produce fewer rows than others, null values are substituted for the missing data, so that the total number of rows returned is always the same as for the function that produced the most rows.\n  If the function has been defined as returning the record data type, then an alias or the key word <CodeLiteral>AS</CodeLiteral> must be present, followed by a column definition list in the form <CodeLiteral>( column_name data_type [, ... ])</CodeLiteral>. The column definition list must match the actual number and types of columns returned by the function.\n  When using the <CodeLiteral>ROWS FROM( ... )</CodeLiteral> syntax, if one of the functions requires a column definition list, it's preferred to put the column definition list after the function call inside <CodeLiteral>ROWS FROM( ... )</CodeLiteral>. A column definition list can be placed after the <CodeLiteral>ROWS FROM( ... )</CodeLiteral> construct only if there's just a single function and no <CodeLiteral>WITH ORDINALITY</CodeLiteral> clause.\n  To use <CodeLiteral>ORDINALITY</CodeLiteral> together with a column definition list, you must use the <CodeLiteral>ROWS FROM( ... )</CodeLiteral> syntax and put the column definition list inside <CodeLiteral>ROWS FROM( ... )</CodeLiteral>.<sep>[DEMO]: ",
        "example": [
            ""
        ],
        "link": []
    },
    {
        "type": "keyword",
        "keyword": "ON join_condition",
        "tree": "(table_ref (join_qual ON))",
        "description": "join_condition is an expression resulting in a value of type boolean (similar to a <CodeLiteral>WHERE</CodeLiteral> clause) that specifies which rows in a join are considered to match.",
        "detail": "[DESCRIPTION]: join_condition is an expression resulting in a value of type boolean (similar to a <CodeLiteral>WHERE</CodeLiteral> clause) that specifies which rows in a join are considered to match.<sep>[DEMO]: SELECT * FROM employees e JOIN departments d ON e.department_id = d.id",
        "example": [
            "SELECT * FROM employees e JOIN departments d ON e.department_id = d.id"
        ],
        "link": []
    },
    {
        "type": "keyword",
        "keyword": "USING ( join_column ) ",
        "tree": " (join_qual USING ( ))",
        "description": "A clause of the form <CodeLiteral>USING ( a, b, ... )</CodeLiteral> is shorthand for <CodeLiteral>ON left_table.a = right_table.a AND left_table.b = right_table.b ...</CodeLiteral>. Also, <CodeLiteral>USING</CodeLiteral> implies that only one of each pair of equivalent columns will be included in the join output, not both.",
        "detail": "[DESCRIPTION]: A clause of the form <CodeLiteral>USING ( a, b, ... )</CodeLiteral> is shorthand for <CodeLiteral>ON left_table.a = right_table.a AND left_table.b = right_table.b ...</CodeLiteral>. Also, <CodeLiteral>USING</CodeLiteral> implies that only one of each pair of equivalent columns will be included in the join output, not both.<sep>[DEMO]: SELECT * FROM employees INNER JOIN departments USING (department_id);",
        "example": [
            "SELECT * FROM employees INNER JOIN departments USING (department_id);"
        ],
        "link": []
    },
    {
        "type": "keyword",
        "keyword": "from_item NATURAL INNER JOIN from_item",
        "tree": " (table_ref NATURAL (join_type INNER) JOIN)",
        "description": "<CodeLiteral>NATURAL</CodeLiteral> is shorthand for a <CodeLiteral>USING</CodeLiteral> list that mentions all columns in the two tables that have matching names. If there are no common column names, <CodeLiteral>NATURAL</CodeLiteral> is equivalent to <CodeLiteral>ON TRUE</CodeLiteral>.One of\n  \n   \n   \n   <CodeLiteral>[ INNER ] JOIN</CodeLiteral>\n   \n   \n   <CodeLiteral>LEFT [ OUTER ] JOIN</CodeLiteral>\n   \n   \n   <CodeLiteral>RIGHT [ OUTER ] JOIN</CodeLiteral>\n   \n   \n   <CodeLiteral>FULL [ OUTER ] JOIN</CodeLiteral>\n   \n   \n  \n  For the <CodeLiteral>INNER</CodeLiteral> and <CodeLiteral>OUTER</CodeLiteral> join types, a join condition must be specified, namely exactly one of <CodeLiteral>ON join_condition</CodeLiteral>, <CodeLiteral>USING (join_column [, ...])</CodeLiteral>, or <CodeLiteral>NATURAL</CodeLiteral>. See below for the meaning.\n  A <CodeLiteral>JOIN</CodeLiteral> clause combines two <CodeLiteral>FROM</CodeLiteral> items, which for convenience we will refer to as \u201ctables\u201d, though in reality they can be any type of <CodeLiteral>FROM</CodeLiteral> item. Use parentheses if necessary to determine the order of nesting. In the absence of parentheses, <CodeLiteral>JOIN</CodeLiteral>s nest left-to-right. In any case <CodeLiteral>JOIN</CodeLiteral> binds more tightly than the commas separating <CodeLiteral>FROM</CodeLiteral>-list items. All the <CodeLiteral>JOIN</CodeLiteral> options are just a notational convenience, since they do nothing you couldn't do with plain <CodeLiteral>FROM</CodeLiteral> and <CodeLiteral>WHERE</CodeLiteral>.\n  <CodeLiteral>LEFT OUTER JOIN</CodeLiteral> returns all rows in the qualified Cartesian product (i.e., all combined rows that pass its join condition), plus one copy of each row in the left-hand table for which there was no right-hand row that passed the join condition. This left-hand row is extended to the full width of the joined table by inserting null values for the right-hand columns. Note that only the <CodeLiteral>JOIN</CodeLiteral> clause's own condition is considered while deciding which rows have matches. Outer conditions are applied afterwards.\n  Conversely, <CodeLiteral>RIGHT OUTER JOIN</CodeLiteral> returns all the joined rows, plus one row for each unmatched right-hand row (extended with nulls on the left). This is just a notational convenience, since you could convert it to a <CodeLiteral>LEFT OUTER JOIN</CodeLiteral> by switching the left and right tables.\n  <CodeLiteral>FULL OUTER JOIN</CodeLiteral> returns all the joined rows, plus one row for each unmatched left-hand row (extended with nulls on the right), plus one row for each unmatched right-hand row (extended with nulls on the left).",
        "detail": "[DESCRIPTION]: <CodeLiteral>NATURAL</CodeLiteral> is shorthand for a <CodeLiteral>USING</CodeLiteral> list that mentions all columns in the two tables that have matching names. If there are no common column names, <CodeLiteral>NATURAL</CodeLiteral> is equivalent to <CodeLiteral>ON TRUE</CodeLiteral>.One of\n  \n   \n   \n   <CodeLiteral>[ INNER ] JOIN</CodeLiteral>\n   \n   \n   <CodeLiteral>LEFT [ OUTER ] JOIN</CodeLiteral>\n   \n   \n   <CodeLiteral>RIGHT [ OUTER ] JOIN</CodeLiteral>\n   \n   \n   <CodeLiteral>FULL [ OUTER ] JOIN</CodeLiteral>\n   \n   \n  \n  For the <CodeLiteral>INNER</CodeLiteral> and <CodeLiteral>OUTER</CodeLiteral> join types, a join condition must be specified, namely exactly one of <CodeLiteral>ON join_condition</CodeLiteral>, <CodeLiteral>USING (join_column [, ...])</CodeLiteral>, or <CodeLiteral>NATURAL</CodeLiteral>. See below for the meaning.\n  A <CodeLiteral>JOIN</CodeLiteral> clause combines two <CodeLiteral>FROM</CodeLiteral> items, which for convenience we will refer to as \u201ctables\u201d, though in reality they can be any type of <CodeLiteral>FROM</CodeLiteral> item. Use parentheses if necessary to determine the order of nesting. In the absence of parentheses, <CodeLiteral>JOIN</CodeLiteral>s nest left-to-right. In any case <CodeLiteral>JOIN</CodeLiteral> binds more tightly than the commas separating <CodeLiteral>FROM</CodeLiteral>-list items. All the <CodeLiteral>JOIN</CodeLiteral> options are just a notational convenience, since they do nothing you couldn't do with plain <CodeLiteral>FROM</CodeLiteral> and <CodeLiteral>WHERE</CodeLiteral>.\n  <CodeLiteral>LEFT OUTER JOIN</CodeLiteral> returns all rows in the qualified Cartesian product (i.e., all combined rows that pass its join condition), plus one copy of each row in the left-hand table for which there was no right-hand row that passed the join condition. This left-hand row is extended to the full width of the joined table by inserting null values for the right-hand columns. Note that only the <CodeLiteral>JOIN</CodeLiteral> clause's own condition is considered while deciding which rows have matches. Outer conditions are applied afterwards.\n  Conversely, <CodeLiteral>RIGHT OUTER JOIN</CodeLiteral> returns all the joined rows, plus one row for each unmatched right-hand row (extended with nulls on the left). This is just a notational convenience, since you could convert it to a <CodeLiteral>LEFT OUTER JOIN</CodeLiteral> by switching the left and right tables.\n  <CodeLiteral>FULL OUTER JOIN</CodeLiteral> returns all the joined rows, plus one row for each unmatched left-hand row (extended with nulls on the right), plus one row for each unmatched right-hand row (extended with nulls on the left).<sep>[DEMO]: SELECT * FROM employees NATURAL INNER JOIN departments;",
        "example": [
            "SELECT * FROM employees NATURAL INNER JOIN departments;"
        ],
        "link": []
    },
    {
        "type": "keyword",
        "keyword": "from_item NATURAL JOIN from_item",
        "tree": " (table_ref NATURAL JOIN)",
        "description": "<CodeLiteral>NATURAL</CodeLiteral> is shorthand for a <CodeLiteral>USING</CodeLiteral> list that mentions all columns in the two tables that have matching names. If there are no common column names, <CodeLiteral>NATURAL</CodeLiteral> is equivalent to <CodeLiteral>ON TRUE</CodeLiteral>.One of\n  \n   \n   \n   <CodeLiteral>[ INNER ] JOIN</CodeLiteral>\n   \n   \n   <CodeLiteral>LEFT [ OUTER ] JOIN</CodeLiteral>\n   \n   \n   <CodeLiteral>RIGHT [ OUTER ] JOIN</CodeLiteral>\n   \n   \n   <CodeLiteral>FULL [ OUTER ] JOIN</CodeLiteral>\n   \n   \n  \n  For the <CodeLiteral>INNER</CodeLiteral> and <CodeLiteral>OUTER</CodeLiteral> join types, a join condition must be specified, namely exactly one of <CodeLiteral>ON join_condition</CodeLiteral>, <CodeLiteral>USING (join_column [, ...])</CodeLiteral>, or <CodeLiteral>NATURAL</CodeLiteral>. See below for the meaning.\n  A <CodeLiteral>JOIN</CodeLiteral> clause combines two <CodeLiteral>FROM</CodeLiteral> items, which for convenience we will refer to as \u201ctables\u201d, though in reality they can be any type of <CodeLiteral>FROM</CodeLiteral> item. Use parentheses if necessary to determine the order of nesting. In the absence of parentheses, <CodeLiteral>JOIN</CodeLiteral>s nest left-to-right. In any case <CodeLiteral>JOIN</CodeLiteral> binds more tightly than the commas separating <CodeLiteral>FROM</CodeLiteral>-list items. All the <CodeLiteral>JOIN</CodeLiteral> options are just a notational convenience, since they do nothing you couldn't do with plain <CodeLiteral>FROM</CodeLiteral> and <CodeLiteral>WHERE</CodeLiteral>.\n  <CodeLiteral>LEFT OUTER JOIN</CodeLiteral> returns all rows in the qualified Cartesian product (i.e., all combined rows that pass its join condition), plus one copy of each row in the left-hand table for which there was no right-hand row that passed the join condition. This left-hand row is extended to the full width of the joined table by inserting null values for the right-hand columns. Note that only the <CodeLiteral>JOIN</CodeLiteral> clause's own condition is considered while deciding which rows have matches. Outer conditions are applied afterwards.\n  Conversely, <CodeLiteral>RIGHT OUTER JOIN</CodeLiteral> returns all the joined rows, plus one row for each unmatched right-hand row (extended with nulls on the left). This is just a notational convenience, since you could convert it to a <CodeLiteral>LEFT OUTER JOIN</CodeLiteral> by switching the left and right tables.\n  <CodeLiteral>FULL OUTER JOIN</CodeLiteral> returns all the joined rows, plus one row for each unmatched left-hand row (extended with nulls on the right), plus one row for each unmatched right-hand row (extended with nulls on the left).",
        "detail": "[DESCRIPTION]: <CodeLiteral>NATURAL</CodeLiteral> is shorthand for a <CodeLiteral>USING</CodeLiteral> list that mentions all columns in the two tables that have matching names. If there are no common column names, <CodeLiteral>NATURAL</CodeLiteral> is equivalent to <CodeLiteral>ON TRUE</CodeLiteral>.One of\n  \n   \n   \n   <CodeLiteral>[ INNER ] JOIN</CodeLiteral>\n   \n   \n   <CodeLiteral>LEFT [ OUTER ] JOIN</CodeLiteral>\n   \n   \n   <CodeLiteral>RIGHT [ OUTER ] JOIN</CodeLiteral>\n   \n   \n   <CodeLiteral>FULL [ OUTER ] JOIN</CodeLiteral>\n   \n   \n  \n  For the <CodeLiteral>INNER</CodeLiteral> and <CodeLiteral>OUTER</CodeLiteral> join types, a join condition must be specified, namely exactly one of <CodeLiteral>ON join_condition</CodeLiteral>, <CodeLiteral>USING (join_column [, ...])</CodeLiteral>, or <CodeLiteral>NATURAL</CodeLiteral>. See below for the meaning.\n  A <CodeLiteral>JOIN</CodeLiteral> clause combines two <CodeLiteral>FROM</CodeLiteral> items, which for convenience we will refer to as \u201ctables\u201d, though in reality they can be any type of <CodeLiteral>FROM</CodeLiteral> item. Use parentheses if necessary to determine the order of nesting. In the absence of parentheses, <CodeLiteral>JOIN</CodeLiteral>s nest left-to-right. In any case <CodeLiteral>JOIN</CodeLiteral> binds more tightly than the commas separating <CodeLiteral>FROM</CodeLiteral>-list items. All the <CodeLiteral>JOIN</CodeLiteral> options are just a notational convenience, since they do nothing you couldn't do with plain <CodeLiteral>FROM</CodeLiteral> and <CodeLiteral>WHERE</CodeLiteral>.\n  <CodeLiteral>LEFT OUTER JOIN</CodeLiteral> returns all rows in the qualified Cartesian product (i.e., all combined rows that pass its join condition), plus one copy of each row in the left-hand table for which there was no right-hand row that passed the join condition. This left-hand row is extended to the full width of the joined table by inserting null values for the right-hand columns. Note that only the <CodeLiteral>JOIN</CodeLiteral> clause's own condition is considered while deciding which rows have matches. Outer conditions are applied afterwards.\n  Conversely, <CodeLiteral>RIGHT OUTER JOIN</CodeLiteral> returns all the joined rows, plus one row for each unmatched right-hand row (extended with nulls on the left). This is just a notational convenience, since you could convert it to a <CodeLiteral>LEFT OUTER JOIN</CodeLiteral> by switching the left and right tables.\n  <CodeLiteral>FULL OUTER JOIN</CodeLiteral> returns all the joined rows, plus one row for each unmatched left-hand row (extended with nulls on the right), plus one row for each unmatched right-hand row (extended with nulls on the left).<sep>[DEMO]: SELECT * FROM employees NATURAL JOIN departments;",
        "example": [
            "SELECT * FROM employees NATURAL JOIN departments;"
        ],
        "link": []
    },
    {
        "type": "keyword",
        "keyword": "from_item NATURAL LEFT OUTER JOIN from_item",
        "tree": " (table_ref NATURAL (join_type LEFT OUTER) JOIN)",
        "description": "<CodeLiteral>NATURAL</CodeLiteral> is shorthand for a <CodeLiteral>USING</CodeLiteral> list that mentions all columns in the two tables that have matching names. If there are no common column names, <CodeLiteral>NATURAL</CodeLiteral> is equivalent to <CodeLiteral>ON TRUE</CodeLiteral>.One of\n  \n   \n   \n   <CodeLiteral>[ INNER ] JOIN</CodeLiteral>\n   \n   \n   <CodeLiteral>LEFT [ OUTER ] JOIN</CodeLiteral>\n   \n   \n   <CodeLiteral>RIGHT [ OUTER ] JOIN</CodeLiteral>\n   \n   \n   <CodeLiteral>FULL [ OUTER ] JOIN</CodeLiteral>\n   \n   \n  \n  For the <CodeLiteral>INNER</CodeLiteral> and <CodeLiteral>OUTER</CodeLiteral> join types, a join condition must be specified, namely exactly one of <CodeLiteral>ON join_condition</CodeLiteral>, <CodeLiteral>USING (join_column [, ...])</CodeLiteral>, or <CodeLiteral>NATURAL</CodeLiteral>. See below for the meaning.\n  A <CodeLiteral>JOIN</CodeLiteral> clause combines two <CodeLiteral>FROM</CodeLiteral> items, which for convenience we will refer to as \u201ctables\u201d, though in reality they can be any type of <CodeLiteral>FROM</CodeLiteral> item. Use parentheses if necessary to determine the order of nesting. In the absence of parentheses, <CodeLiteral>JOIN</CodeLiteral>s nest left-to-right. In any case <CodeLiteral>JOIN</CodeLiteral> binds more tightly than the commas separating <CodeLiteral>FROM</CodeLiteral>-list items. All the <CodeLiteral>JOIN</CodeLiteral> options are just a notational convenience, since they do nothing you couldn't do with plain <CodeLiteral>FROM</CodeLiteral> and <CodeLiteral>WHERE</CodeLiteral>.\n  <CodeLiteral>LEFT OUTER JOIN</CodeLiteral> returns all rows in the qualified Cartesian product (i.e., all combined rows that pass its join condition), plus one copy of each row in the left-hand table for which there was no right-hand row that passed the join condition. This left-hand row is extended to the full width of the joined table by inserting null values for the right-hand columns. Note that only the <CodeLiteral>JOIN</CodeLiteral> clause's own condition is considered while deciding which rows have matches. Outer conditions are applied afterwards.\n  Conversely, <CodeLiteral>RIGHT OUTER JOIN</CodeLiteral> returns all the joined rows, plus one row for each unmatched right-hand row (extended with nulls on the left). This is just a notational convenience, since you could convert it to a <CodeLiteral>LEFT OUTER JOIN</CodeLiteral> by switching the left and right tables.\n  <CodeLiteral>FULL OUTER JOIN</CodeLiteral> returns all the joined rows, plus one row for each unmatched left-hand row (extended with nulls on the right), plus one row for each unmatched right-hand row (extended with nulls on the left).",
        "detail": "[DESCRIPTION]: <CodeLiteral>NATURAL</CodeLiteral> is shorthand for a <CodeLiteral>USING</CodeLiteral> list that mentions all columns in the two tables that have matching names. If there are no common column names, <CodeLiteral>NATURAL</CodeLiteral> is equivalent to <CodeLiteral>ON TRUE</CodeLiteral>.One of\n  \n   \n   \n   <CodeLiteral>[ INNER ] JOIN</CodeLiteral>\n   \n   \n   <CodeLiteral>LEFT [ OUTER ] JOIN</CodeLiteral>\n   \n   \n   <CodeLiteral>RIGHT [ OUTER ] JOIN</CodeLiteral>\n   \n   \n   <CodeLiteral>FULL [ OUTER ] JOIN</CodeLiteral>\n   \n   \n  \n  For the <CodeLiteral>INNER</CodeLiteral> and <CodeLiteral>OUTER</CodeLiteral> join types, a join condition must be specified, namely exactly one of <CodeLiteral>ON join_condition</CodeLiteral>, <CodeLiteral>USING (join_column [, ...])</CodeLiteral>, or <CodeLiteral>NATURAL</CodeLiteral>. See below for the meaning.\n  A <CodeLiteral>JOIN</CodeLiteral> clause combines two <CodeLiteral>FROM</CodeLiteral> items, which for convenience we will refer to as \u201ctables\u201d, though in reality they can be any type of <CodeLiteral>FROM</CodeLiteral> item. Use parentheses if necessary to determine the order of nesting. In the absence of parentheses, <CodeLiteral>JOIN</CodeLiteral>s nest left-to-right. In any case <CodeLiteral>JOIN</CodeLiteral> binds more tightly than the commas separating <CodeLiteral>FROM</CodeLiteral>-list items. All the <CodeLiteral>JOIN</CodeLiteral> options are just a notational convenience, since they do nothing you couldn't do with plain <CodeLiteral>FROM</CodeLiteral> and <CodeLiteral>WHERE</CodeLiteral>.\n  <CodeLiteral>LEFT OUTER JOIN</CodeLiteral> returns all rows in the qualified Cartesian product (i.e., all combined rows that pass its join condition), plus one copy of each row in the left-hand table for which there was no right-hand row that passed the join condition. This left-hand row is extended to the full width of the joined table by inserting null values for the right-hand columns. Note that only the <CodeLiteral>JOIN</CodeLiteral> clause's own condition is considered while deciding which rows have matches. Outer conditions are applied afterwards.\n  Conversely, <CodeLiteral>RIGHT OUTER JOIN</CodeLiteral> returns all the joined rows, plus one row for each unmatched right-hand row (extended with nulls on the left). This is just a notational convenience, since you could convert it to a <CodeLiteral>LEFT OUTER JOIN</CodeLiteral> by switching the left and right tables.\n  <CodeLiteral>FULL OUTER JOIN</CodeLiteral> returns all the joined rows, plus one row for each unmatched left-hand row (extended with nulls on the right), plus one row for each unmatched right-hand row (extended with nulls on the left).<sep>[DEMO]: SELECT * FROM employees NATURAL LEFT OUTER JOIN departments;",
        "example": [
            "SELECT * FROM employees NATURAL LEFT OUTER JOIN departments;"
        ],
        "link": []
    },
    {
        "type": "keyword",
        "keyword": "from_item NATURAL LEFT JOIN from_item",
        "tree": " (table_ref NATURAL (join_type LEFT) JOIN)",
        "description": "<CodeLiteral>NATURAL</CodeLiteral> is shorthand for a <CodeLiteral>USING</CodeLiteral> list that mentions all columns in the two tables that have matching names. If there are no common column names, <CodeLiteral>NATURAL</CodeLiteral> is equivalent to <CodeLiteral>ON TRUE</CodeLiteral>.One of\n  \n   \n   \n   <CodeLiteral>[ INNER ] JOIN</CodeLiteral>\n   \n   \n   <CodeLiteral>LEFT [ OUTER ] JOIN</CodeLiteral>\n   \n   \n   <CodeLiteral>RIGHT [ OUTER ] JOIN</CodeLiteral>\n   \n   \n   <CodeLiteral>FULL [ OUTER ] JOIN</CodeLiteral>\n   \n   \n  \n  For the <CodeLiteral>INNER</CodeLiteral> and <CodeLiteral>OUTER</CodeLiteral> join types, a join condition must be specified, namely exactly one of <CodeLiteral>ON join_condition</CodeLiteral>, <CodeLiteral>USING (join_column [, ...])</CodeLiteral>, or <CodeLiteral>NATURAL</CodeLiteral>. See below for the meaning.\n  A <CodeLiteral>JOIN</CodeLiteral> clause combines two <CodeLiteral>FROM</CodeLiteral> items, which for convenience we will refer to as \u201ctables\u201d, though in reality they can be any type of <CodeLiteral>FROM</CodeLiteral> item. Use parentheses if necessary to determine the order of nesting. In the absence of parentheses, <CodeLiteral>JOIN</CodeLiteral>s nest left-to-right. In any case <CodeLiteral>JOIN</CodeLiteral> binds more tightly than the commas separating <CodeLiteral>FROM</CodeLiteral>-list items. All the <CodeLiteral>JOIN</CodeLiteral> options are just a notational convenience, since they do nothing you couldn't do with plain <CodeLiteral>FROM</CodeLiteral> and <CodeLiteral>WHERE</CodeLiteral>.\n  <CodeLiteral>LEFT OUTER JOIN</CodeLiteral> returns all rows in the qualified Cartesian product (i.e., all combined rows that pass its join condition), plus one copy of each row in the left-hand table for which there was no right-hand row that passed the join condition. This left-hand row is extended to the full width of the joined table by inserting null values for the right-hand columns. Note that only the <CodeLiteral>JOIN</CodeLiteral> clause's own condition is considered while deciding which rows have matches. Outer conditions are applied afterwards.\n  Conversely, <CodeLiteral>RIGHT OUTER JOIN</CodeLiteral> returns all the joined rows, plus one row for each unmatched right-hand row (extended with nulls on the left). This is just a notational convenience, since you could convert it to a <CodeLiteral>LEFT OUTER JOIN</CodeLiteral> by switching the left and right tables.\n  <CodeLiteral>FULL OUTER JOIN</CodeLiteral> returns all the joined rows, plus one row for each unmatched left-hand row (extended with nulls on the right), plus one row for each unmatched right-hand row (extended with nulls on the left).",
        "detail": "[DESCRIPTION]: <CodeLiteral>NATURAL</CodeLiteral> is shorthand for a <CodeLiteral>USING</CodeLiteral> list that mentions all columns in the two tables that have matching names. If there are no common column names, <CodeLiteral>NATURAL</CodeLiteral> is equivalent to <CodeLiteral>ON TRUE</CodeLiteral>.One of\n  \n   \n   \n   <CodeLiteral>[ INNER ] JOIN</CodeLiteral>\n   \n   \n   <CodeLiteral>LEFT [ OUTER ] JOIN</CodeLiteral>\n   \n   \n   <CodeLiteral>RIGHT [ OUTER ] JOIN</CodeLiteral>\n   \n   \n   <CodeLiteral>FULL [ OUTER ] JOIN</CodeLiteral>\n   \n   \n  \n  For the <CodeLiteral>INNER</CodeLiteral> and <CodeLiteral>OUTER</CodeLiteral> join types, a join condition must be specified, namely exactly one of <CodeLiteral>ON join_condition</CodeLiteral>, <CodeLiteral>USING (join_column [, ...])</CodeLiteral>, or <CodeLiteral>NATURAL</CodeLiteral>. See below for the meaning.\n  A <CodeLiteral>JOIN</CodeLiteral> clause combines two <CodeLiteral>FROM</CodeLiteral> items, which for convenience we will refer to as \u201ctables\u201d, though in reality they can be any type of <CodeLiteral>FROM</CodeLiteral> item. Use parentheses if necessary to determine the order of nesting. In the absence of parentheses, <CodeLiteral>JOIN</CodeLiteral>s nest left-to-right. In any case <CodeLiteral>JOIN</CodeLiteral> binds more tightly than the commas separating <CodeLiteral>FROM</CodeLiteral>-list items. All the <CodeLiteral>JOIN</CodeLiteral> options are just a notational convenience, since they do nothing you couldn't do with plain <CodeLiteral>FROM</CodeLiteral> and <CodeLiteral>WHERE</CodeLiteral>.\n  <CodeLiteral>LEFT OUTER JOIN</CodeLiteral> returns all rows in the qualified Cartesian product (i.e., all combined rows that pass its join condition), plus one copy of each row in the left-hand table for which there was no right-hand row that passed the join condition. This left-hand row is extended to the full width of the joined table by inserting null values for the right-hand columns. Note that only the <CodeLiteral>JOIN</CodeLiteral> clause's own condition is considered while deciding which rows have matches. Outer conditions are applied afterwards.\n  Conversely, <CodeLiteral>RIGHT OUTER JOIN</CodeLiteral> returns all the joined rows, plus one row for each unmatched right-hand row (extended with nulls on the left). This is just a notational convenience, since you could convert it to a <CodeLiteral>LEFT OUTER JOIN</CodeLiteral> by switching the left and right tables.\n  <CodeLiteral>FULL OUTER JOIN</CodeLiteral> returns all the joined rows, plus one row for each unmatched left-hand row (extended with nulls on the right), plus one row for each unmatched right-hand row (extended with nulls on the left).<sep>[DEMO]: SELECT * FROM employees NATURAL LEFT JOIN departments;",
        "example": [
            "SELECT * FROM employees NATURAL LEFT JOIN departments;"
        ],
        "link": []
    },
    {
        "type": "keyword",
        "keyword": "from_item NATURAL RIGHT OUTER JOIN from_item",
        "tree": " (table_ref NATURAL (join_type RIGHT OUTER) JOIN)",
        "description": "<CodeLiteral>NATURAL</CodeLiteral> is shorthand for a <CodeLiteral>USING</CodeLiteral> list that mentions all columns in the two tables that have matching names. If there are no common column names, <CodeLiteral>NATURAL</CodeLiteral> is equivalent to <CodeLiteral>ON TRUE</CodeLiteral>.One of\n  \n   \n   \n   <CodeLiteral>[ INNER ] JOIN</CodeLiteral>\n   \n   \n   <CodeLiteral>LEFT [ OUTER ] JOIN</CodeLiteral>\n   \n   \n   <CodeLiteral>RIGHT [ OUTER ] JOIN</CodeLiteral>\n   \n   \n   <CodeLiteral>FULL [ OUTER ] JOIN</CodeLiteral>\n   \n   \n  \n  For the <CodeLiteral>INNER</CodeLiteral> and <CodeLiteral>OUTER</CodeLiteral> join types, a join condition must be specified, namely exactly one of <CodeLiteral>ON join_condition</CodeLiteral>, <CodeLiteral>USING (join_column [, ...])</CodeLiteral>, or <CodeLiteral>NATURAL</CodeLiteral>. See below for the meaning.\n  A <CodeLiteral>JOIN</CodeLiteral> clause combines two <CodeLiteral>FROM</CodeLiteral> items, which for convenience we will refer to as \u201ctables\u201d, though in reality they can be any type of <CodeLiteral>FROM</CodeLiteral> item. Use parentheses if necessary to determine the order of nesting. In the absence of parentheses, <CodeLiteral>JOIN</CodeLiteral>s nest left-to-right. In any case <CodeLiteral>JOIN</CodeLiteral> binds more tightly than the commas separating <CodeLiteral>FROM</CodeLiteral>-list items. All the <CodeLiteral>JOIN</CodeLiteral> options are just a notational convenience, since they do nothing you couldn't do with plain <CodeLiteral>FROM</CodeLiteral> and <CodeLiteral>WHERE</CodeLiteral>.\n  <CodeLiteral>LEFT OUTER JOIN</CodeLiteral> returns all rows in the qualified Cartesian product (i.e., all combined rows that pass its join condition), plus one copy of each row in the left-hand table for which there was no right-hand row that passed the join condition. This left-hand row is extended to the full width of the joined table by inserting null values for the right-hand columns. Note that only the <CodeLiteral>JOIN</CodeLiteral> clause's own condition is considered while deciding which rows have matches. Outer conditions are applied afterwards.\n  Conversely, <CodeLiteral>RIGHT OUTER JOIN</CodeLiteral> returns all the joined rows, plus one row for each unmatched right-hand row (extended with nulls on the left). This is just a notational convenience, since you could convert it to a <CodeLiteral>LEFT OUTER JOIN</CodeLiteral> by switching the left and right tables.\n  <CodeLiteral>FULL OUTER JOIN</CodeLiteral> returns all the joined rows, plus one row for each unmatched left-hand row (extended with nulls on the right), plus one row for each unmatched right-hand row (extended with nulls on the left).",
        "detail": "[DESCRIPTION]: <CodeLiteral>NATURAL</CodeLiteral> is shorthand for a <CodeLiteral>USING</CodeLiteral> list that mentions all columns in the two tables that have matching names. If there are no common column names, <CodeLiteral>NATURAL</CodeLiteral> is equivalent to <CodeLiteral>ON TRUE</CodeLiteral>.One of\n  \n   \n   \n   <CodeLiteral>[ INNER ] JOIN</CodeLiteral>\n   \n   \n   <CodeLiteral>LEFT [ OUTER ] JOIN</CodeLiteral>\n   \n   \n   <CodeLiteral>RIGHT [ OUTER ] JOIN</CodeLiteral>\n   \n   \n   <CodeLiteral>FULL [ OUTER ] JOIN</CodeLiteral>\n   \n   \n  \n  For the <CodeLiteral>INNER</CodeLiteral> and <CodeLiteral>OUTER</CodeLiteral> join types, a join condition must be specified, namely exactly one of <CodeLiteral>ON join_condition</CodeLiteral>, <CodeLiteral>USING (join_column [, ...])</CodeLiteral>, or <CodeLiteral>NATURAL</CodeLiteral>. See below for the meaning.\n  A <CodeLiteral>JOIN</CodeLiteral> clause combines two <CodeLiteral>FROM</CodeLiteral> items, which for convenience we will refer to as \u201ctables\u201d, though in reality they can be any type of <CodeLiteral>FROM</CodeLiteral> item. Use parentheses if necessary to determine the order of nesting. In the absence of parentheses, <CodeLiteral>JOIN</CodeLiteral>s nest left-to-right. In any case <CodeLiteral>JOIN</CodeLiteral> binds more tightly than the commas separating <CodeLiteral>FROM</CodeLiteral>-list items. All the <CodeLiteral>JOIN</CodeLiteral> options are just a notational convenience, since they do nothing you couldn't do with plain <CodeLiteral>FROM</CodeLiteral> and <CodeLiteral>WHERE</CodeLiteral>.\n  <CodeLiteral>LEFT OUTER JOIN</CodeLiteral> returns all rows in the qualified Cartesian product (i.e., all combined rows that pass its join condition), plus one copy of each row in the left-hand table for which there was no right-hand row that passed the join condition. This left-hand row is extended to the full width of the joined table by inserting null values for the right-hand columns. Note that only the <CodeLiteral>JOIN</CodeLiteral> clause's own condition is considered while deciding which rows have matches. Outer conditions are applied afterwards.\n  Conversely, <CodeLiteral>RIGHT OUTER JOIN</CodeLiteral> returns all the joined rows, plus one row for each unmatched right-hand row (extended with nulls on the left). This is just a notational convenience, since you could convert it to a <CodeLiteral>LEFT OUTER JOIN</CodeLiteral> by switching the left and right tables.\n  <CodeLiteral>FULL OUTER JOIN</CodeLiteral> returns all the joined rows, plus one row for each unmatched left-hand row (extended with nulls on the right), plus one row for each unmatched right-hand row (extended with nulls on the left).<sep>[DEMO]: SELECT * FROM employees NATURAL RIGHT OUTER JOIN departments;",
        "example": [
            "SELECT * FROM employees NATURAL RIGHT OUTER JOIN departments;"
        ],
        "link": []
    },
    {
        "type": "keyword",
        "keyword": "from_item NATURAL RIGHT JOIN from_item",
        "tree": " (table_ref NATURAL (join_type RIGHT) JOIN)",
        "description": "<CodeLiteral>NATURAL</CodeLiteral> is shorthand for a <CodeLiteral>USING</CodeLiteral> list that mentions all columns in the two tables that have matching names. If there are no common column names, <CodeLiteral>NATURAL</CodeLiteral> is equivalent to <CodeLiteral>ON TRUE</CodeLiteral>.One of\n  \n   \n   \n   <CodeLiteral>[ INNER ] JOIN</CodeLiteral>\n   \n   \n   <CodeLiteral>LEFT [ OUTER ] JOIN</CodeLiteral>\n   \n   \n   <CodeLiteral>RIGHT [ OUTER ] JOIN</CodeLiteral>\n   \n   \n   <CodeLiteral>FULL [ OUTER ] JOIN</CodeLiteral>\n   \n   \n  \n  For the <CodeLiteral>INNER</CodeLiteral> and <CodeLiteral>OUTER</CodeLiteral> join types, a join condition must be specified, namely exactly one of <CodeLiteral>ON join_condition</CodeLiteral>, <CodeLiteral>USING (join_column [, ...])</CodeLiteral>, or <CodeLiteral>NATURAL</CodeLiteral>. See below for the meaning.\n  A <CodeLiteral>JOIN</CodeLiteral> clause combines two <CodeLiteral>FROM</CodeLiteral> items, which for convenience we will refer to as \u201ctables\u201d, though in reality they can be any type of <CodeLiteral>FROM</CodeLiteral> item. Use parentheses if necessary to determine the order of nesting. In the absence of parentheses, <CodeLiteral>JOIN</CodeLiteral>s nest left-to-right. In any case <CodeLiteral>JOIN</CodeLiteral> binds more tightly than the commas separating <CodeLiteral>FROM</CodeLiteral>-list items. All the <CodeLiteral>JOIN</CodeLiteral> options are just a notational convenience, since they do nothing you couldn't do with plain <CodeLiteral>FROM</CodeLiteral> and <CodeLiteral>WHERE</CodeLiteral>.\n  <CodeLiteral>LEFT OUTER JOIN</CodeLiteral> returns all rows in the qualified Cartesian product (i.e., all combined rows that pass its join condition), plus one copy of each row in the left-hand table for which there was no right-hand row that passed the join condition. This left-hand row is extended to the full width of the joined table by inserting null values for the right-hand columns. Note that only the <CodeLiteral>JOIN</CodeLiteral> clause's own condition is considered while deciding which rows have matches. Outer conditions are applied afterwards.\n  Conversely, <CodeLiteral>RIGHT OUTER JOIN</CodeLiteral> returns all the joined rows, plus one row for each unmatched right-hand row (extended with nulls on the left). This is just a notational convenience, since you could convert it to a <CodeLiteral>LEFT OUTER JOIN</CodeLiteral> by switching the left and right tables.\n  <CodeLiteral>FULL OUTER JOIN</CodeLiteral> returns all the joined rows, plus one row for each unmatched left-hand row (extended with nulls on the right), plus one row for each unmatched right-hand row (extended with nulls on the left).",
        "detail": "[DESCRIPTION]: <CodeLiteral>NATURAL</CodeLiteral> is shorthand for a <CodeLiteral>USING</CodeLiteral> list that mentions all columns in the two tables that have matching names. If there are no common column names, <CodeLiteral>NATURAL</CodeLiteral> is equivalent to <CodeLiteral>ON TRUE</CodeLiteral>.One of\n  \n   \n   \n   <CodeLiteral>[ INNER ] JOIN</CodeLiteral>\n   \n   \n   <CodeLiteral>LEFT [ OUTER ] JOIN</CodeLiteral>\n   \n   \n   <CodeLiteral>RIGHT [ OUTER ] JOIN</CodeLiteral>\n   \n   \n   <CodeLiteral>FULL [ OUTER ] JOIN</CodeLiteral>\n   \n   \n  \n  For the <CodeLiteral>INNER</CodeLiteral> and <CodeLiteral>OUTER</CodeLiteral> join types, a join condition must be specified, namely exactly one of <CodeLiteral>ON join_condition</CodeLiteral>, <CodeLiteral>USING (join_column [, ...])</CodeLiteral>, or <CodeLiteral>NATURAL</CodeLiteral>. See below for the meaning.\n  A <CodeLiteral>JOIN</CodeLiteral> clause combines two <CodeLiteral>FROM</CodeLiteral> items, which for convenience we will refer to as \u201ctables\u201d, though in reality they can be any type of <CodeLiteral>FROM</CodeLiteral> item. Use parentheses if necessary to determine the order of nesting. In the absence of parentheses, <CodeLiteral>JOIN</CodeLiteral>s nest left-to-right. In any case <CodeLiteral>JOIN</CodeLiteral> binds more tightly than the commas separating <CodeLiteral>FROM</CodeLiteral>-list items. All the <CodeLiteral>JOIN</CodeLiteral> options are just a notational convenience, since they do nothing you couldn't do with plain <CodeLiteral>FROM</CodeLiteral> and <CodeLiteral>WHERE</CodeLiteral>.\n  <CodeLiteral>LEFT OUTER JOIN</CodeLiteral> returns all rows in the qualified Cartesian product (i.e., all combined rows that pass its join condition), plus one copy of each row in the left-hand table for which there was no right-hand row that passed the join condition. This left-hand row is extended to the full width of the joined table by inserting null values for the right-hand columns. Note that only the <CodeLiteral>JOIN</CodeLiteral> clause's own condition is considered while deciding which rows have matches. Outer conditions are applied afterwards.\n  Conversely, <CodeLiteral>RIGHT OUTER JOIN</CodeLiteral> returns all the joined rows, plus one row for each unmatched right-hand row (extended with nulls on the left). This is just a notational convenience, since you could convert it to a <CodeLiteral>LEFT OUTER JOIN</CodeLiteral> by switching the left and right tables.\n  <CodeLiteral>FULL OUTER JOIN</CodeLiteral> returns all the joined rows, plus one row for each unmatched left-hand row (extended with nulls on the right), plus one row for each unmatched right-hand row (extended with nulls on the left).<sep>[DEMO]: SELECT * FROM users NATURAL RIGHT JOIN orders;",
        "example": [
            "SELECT * FROM users NATURAL RIGHT JOIN orders;"
        ],
        "link": []
    },
    {
        "type": "keyword",
        "keyword": "from_item NATURAL FULL OUTER JOIN from_item",
        "tree": " (table_ref NATURAL (join_type FULL OUTER) JOIN)",
        "description": "<CodeLiteral>NATURAL</CodeLiteral> is shorthand for a <CodeLiteral>USING</CodeLiteral> list that mentions all columns in the two tables that have matching names. If there are no common column names, <CodeLiteral>NATURAL</CodeLiteral> is equivalent to <CodeLiteral>ON TRUE</CodeLiteral>.One of\n  \n   \n   \n   <CodeLiteral>[ INNER ] JOIN</CodeLiteral>\n   \n   \n   <CodeLiteral>LEFT [ OUTER ] JOIN</CodeLiteral>\n   \n   \n   <CodeLiteral>RIGHT [ OUTER ] JOIN</CodeLiteral>\n   \n   \n   <CodeLiteral>FULL [ OUTER ] JOIN</CodeLiteral>\n   \n   \n  \n  For the <CodeLiteral>INNER</CodeLiteral> and <CodeLiteral>OUTER</CodeLiteral> join types, a join condition must be specified, namely exactly one of <CodeLiteral>ON join_condition</CodeLiteral>, <CodeLiteral>USING (join_column [, ...])</CodeLiteral>, or <CodeLiteral>NATURAL</CodeLiteral>. See below for the meaning.\n  A <CodeLiteral>JOIN</CodeLiteral> clause combines two <CodeLiteral>FROM</CodeLiteral> items, which for convenience we will refer to as \u201ctables\u201d, though in reality they can be any type of <CodeLiteral>FROM</CodeLiteral> item. Use parentheses if necessary to determine the order of nesting. In the absence of parentheses, <CodeLiteral>JOIN</CodeLiteral>s nest left-to-right. In any case <CodeLiteral>JOIN</CodeLiteral> binds more tightly than the commas separating <CodeLiteral>FROM</CodeLiteral>-list items. All the <CodeLiteral>JOIN</CodeLiteral> options are just a notational convenience, since they do nothing you couldn't do with plain <CodeLiteral>FROM</CodeLiteral> and <CodeLiteral>WHERE</CodeLiteral>.\n  <CodeLiteral>LEFT OUTER JOIN</CodeLiteral> returns all rows in the qualified Cartesian product (i.e., all combined rows that pass its join condition), plus one copy of each row in the left-hand table for which there was no right-hand row that passed the join condition. This left-hand row is extended to the full width of the joined table by inserting null values for the right-hand columns. Note that only the <CodeLiteral>JOIN</CodeLiteral> clause's own condition is considered while deciding which rows have matches. Outer conditions are applied afterwards.\n  Conversely, <CodeLiteral>RIGHT OUTER JOIN</CodeLiteral> returns all the joined rows, plus one row for each unmatched right-hand row (extended with nulls on the left). This is just a notational convenience, since you could convert it to a <CodeLiteral>LEFT OUTER JOIN</CodeLiteral> by switching the left and right tables.\n  <CodeLiteral>FULL OUTER JOIN</CodeLiteral> returns all the joined rows, plus one row for each unmatched left-hand row (extended with nulls on the right), plus one row for each unmatched right-hand row (extended with nulls on the left).",
        "detail": "[DESCRIPTION]: <CodeLiteral>NATURAL</CodeLiteral> is shorthand for a <CodeLiteral>USING</CodeLiteral> list that mentions all columns in the two tables that have matching names. If there are no common column names, <CodeLiteral>NATURAL</CodeLiteral> is equivalent to <CodeLiteral>ON TRUE</CodeLiteral>.One of\n  \n   \n   \n   <CodeLiteral>[ INNER ] JOIN</CodeLiteral>\n   \n   \n   <CodeLiteral>LEFT [ OUTER ] JOIN</CodeLiteral>\n   \n   \n   <CodeLiteral>RIGHT [ OUTER ] JOIN</CodeLiteral>\n   \n   \n   <CodeLiteral>FULL [ OUTER ] JOIN</CodeLiteral>\n   \n   \n  \n  For the <CodeLiteral>INNER</CodeLiteral> and <CodeLiteral>OUTER</CodeLiteral> join types, a join condition must be specified, namely exactly one of <CodeLiteral>ON join_condition</CodeLiteral>, <CodeLiteral>USING (join_column [, ...])</CodeLiteral>, or <CodeLiteral>NATURAL</CodeLiteral>. See below for the meaning.\n  A <CodeLiteral>JOIN</CodeLiteral> clause combines two <CodeLiteral>FROM</CodeLiteral> items, which for convenience we will refer to as \u201ctables\u201d, though in reality they can be any type of <CodeLiteral>FROM</CodeLiteral> item. Use parentheses if necessary to determine the order of nesting. In the absence of parentheses, <CodeLiteral>JOIN</CodeLiteral>s nest left-to-right. In any case <CodeLiteral>JOIN</CodeLiteral> binds more tightly than the commas separating <CodeLiteral>FROM</CodeLiteral>-list items. All the <CodeLiteral>JOIN</CodeLiteral> options are just a notational convenience, since they do nothing you couldn't do with plain <CodeLiteral>FROM</CodeLiteral> and <CodeLiteral>WHERE</CodeLiteral>.\n  <CodeLiteral>LEFT OUTER JOIN</CodeLiteral> returns all rows in the qualified Cartesian product (i.e., all combined rows that pass its join condition), plus one copy of each row in the left-hand table for which there was no right-hand row that passed the join condition. This left-hand row is extended to the full width of the joined table by inserting null values for the right-hand columns. Note that only the <CodeLiteral>JOIN</CodeLiteral> clause's own condition is considered while deciding which rows have matches. Outer conditions are applied afterwards.\n  Conversely, <CodeLiteral>RIGHT OUTER JOIN</CodeLiteral> returns all the joined rows, plus one row for each unmatched right-hand row (extended with nulls on the left). This is just a notational convenience, since you could convert it to a <CodeLiteral>LEFT OUTER JOIN</CodeLiteral> by switching the left and right tables.\n  <CodeLiteral>FULL OUTER JOIN</CodeLiteral> returns all the joined rows, plus one row for each unmatched left-hand row (extended with nulls on the right), plus one row for each unmatched right-hand row (extended with nulls on the left).<sep>[DEMO]: SELECT * FROM employee NATURAL FULL OUTER JOIN department;",
        "example": [
            "SELECT * FROM employee NATURAL FULL OUTER JOIN department;"
        ],
        "link": []
    },
    {
        "type": "keyword",
        "keyword": "from_item NATURAL FULL JOIN from_item",
        "tree": " (table_ref NATURAL (join_type FULL) JOIN)",
        "description": "<CodeLiteral>NATURAL</CodeLiteral> is shorthand for a <CodeLiteral>USING</CodeLiteral> list that mentions all columns in the two tables that have matching names. If there are no common column names, <CodeLiteral>NATURAL</CodeLiteral> is equivalent to <CodeLiteral>ON TRUE</CodeLiteral>.One of\n  \n   \n   \n   <CodeLiteral>[ INNER ] JOIN</CodeLiteral>\n   \n   \n   <CodeLiteral>LEFT [ OUTER ] JOIN</CodeLiteral>\n   \n   \n   <CodeLiteral>RIGHT [ OUTER ] JOIN</CodeLiteral>\n   \n   \n   <CodeLiteral>FULL [ OUTER ] JOIN</CodeLiteral>\n   \n   \n  \n  For the <CodeLiteral>INNER</CodeLiteral> and <CodeLiteral>OUTER</CodeLiteral> join types, a join condition must be specified, namely exactly one of <CodeLiteral>ON join_condition</CodeLiteral>, <CodeLiteral>USING (join_column [, ...])</CodeLiteral>, or <CodeLiteral>NATURAL</CodeLiteral>. See below for the meaning.\n  A <CodeLiteral>JOIN</CodeLiteral> clause combines two <CodeLiteral>FROM</CodeLiteral> items, which for convenience we will refer to as \u201ctables\u201d, though in reality they can be any type of <CodeLiteral>FROM</CodeLiteral> item. Use parentheses if necessary to determine the order of nesting. In the absence of parentheses, <CodeLiteral>JOIN</CodeLiteral>s nest left-to-right. In any case <CodeLiteral>JOIN</CodeLiteral> binds more tightly than the commas separating <CodeLiteral>FROM</CodeLiteral>-list items. All the <CodeLiteral>JOIN</CodeLiteral> options are just a notational convenience, since they do nothing you couldn't do with plain <CodeLiteral>FROM</CodeLiteral> and <CodeLiteral>WHERE</CodeLiteral>.\n  <CodeLiteral>LEFT OUTER JOIN</CodeLiteral> returns all rows in the qualified Cartesian product (i.e., all combined rows that pass its join condition), plus one copy of each row in the left-hand table for which there was no right-hand row that passed the join condition. This left-hand row is extended to the full width of the joined table by inserting null values for the right-hand columns. Note that only the <CodeLiteral>JOIN</CodeLiteral> clause's own condition is considered while deciding which rows have matches. Outer conditions are applied afterwards.\n  Conversely, <CodeLiteral>RIGHT OUTER JOIN</CodeLiteral> returns all the joined rows, plus one row for each unmatched right-hand row (extended with nulls on the left). This is just a notational convenience, since you could convert it to a <CodeLiteral>LEFT OUTER JOIN</CodeLiteral> by switching the left and right tables.\n  <CodeLiteral>FULL OUTER JOIN</CodeLiteral> returns all the joined rows, plus one row for each unmatched left-hand row (extended with nulls on the right), plus one row for each unmatched right-hand row (extended with nulls on the left).",
        "detail": "[DESCRIPTION]: <CodeLiteral>NATURAL</CodeLiteral> is shorthand for a <CodeLiteral>USING</CodeLiteral> list that mentions all columns in the two tables that have matching names. If there are no common column names, <CodeLiteral>NATURAL</CodeLiteral> is equivalent to <CodeLiteral>ON TRUE</CodeLiteral>.One of\n  \n   \n   \n   <CodeLiteral>[ INNER ] JOIN</CodeLiteral>\n   \n   \n   <CodeLiteral>LEFT [ OUTER ] JOIN</CodeLiteral>\n   \n   \n   <CodeLiteral>RIGHT [ OUTER ] JOIN</CodeLiteral>\n   \n   \n   <CodeLiteral>FULL [ OUTER ] JOIN</CodeLiteral>\n   \n   \n  \n  For the <CodeLiteral>INNER</CodeLiteral> and <CodeLiteral>OUTER</CodeLiteral> join types, a join condition must be specified, namely exactly one of <CodeLiteral>ON join_condition</CodeLiteral>, <CodeLiteral>USING (join_column [, ...])</CodeLiteral>, or <CodeLiteral>NATURAL</CodeLiteral>. See below for the meaning.\n  A <CodeLiteral>JOIN</CodeLiteral> clause combines two <CodeLiteral>FROM</CodeLiteral> items, which for convenience we will refer to as \u201ctables\u201d, though in reality they can be any type of <CodeLiteral>FROM</CodeLiteral> item. Use parentheses if necessary to determine the order of nesting. In the absence of parentheses, <CodeLiteral>JOIN</CodeLiteral>s nest left-to-right. In any case <CodeLiteral>JOIN</CodeLiteral> binds more tightly than the commas separating <CodeLiteral>FROM</CodeLiteral>-list items. All the <CodeLiteral>JOIN</CodeLiteral> options are just a notational convenience, since they do nothing you couldn't do with plain <CodeLiteral>FROM</CodeLiteral> and <CodeLiteral>WHERE</CodeLiteral>.\n  <CodeLiteral>LEFT OUTER JOIN</CodeLiteral> returns all rows in the qualified Cartesian product (i.e., all combined rows that pass its join condition), plus one copy of each row in the left-hand table for which there was no right-hand row that passed the join condition. This left-hand row is extended to the full width of the joined table by inserting null values for the right-hand columns. Note that only the <CodeLiteral>JOIN</CodeLiteral> clause's own condition is considered while deciding which rows have matches. Outer conditions are applied afterwards.\n  Conversely, <CodeLiteral>RIGHT OUTER JOIN</CodeLiteral> returns all the joined rows, plus one row for each unmatched right-hand row (extended with nulls on the left). This is just a notational convenience, since you could convert it to a <CodeLiteral>LEFT OUTER JOIN</CodeLiteral> by switching the left and right tables.\n  <CodeLiteral>FULL OUTER JOIN</CodeLiteral> returns all the joined rows, plus one row for each unmatched left-hand row (extended with nulls on the right), plus one row for each unmatched right-hand row (extended with nulls on the left).<sep>[DEMO]: SELECT * FROM employees e NATURAL FULL JOIN departments d;",
        "example": [
            "SELECT * FROM employees e NATURAL FULL JOIN departments d;"
        ],
        "link": []
    },
    {
        "type": "keyword",
        "keyword": "from_item CROSS JOIN from_item",
        "tree": " (table_ref CROSS JOIN)",
        "description": "<CodeLiteral>CROSS JOIN</CodeLiteral> is equivalent to <CodeLiteral>INNER JOIN ON (TRUE)</CodeLiteral>, that is, no rows are removed by qualification. They produce a simple Cartesian product, the same result as you get from listing the two tables at the top level of <CodeLiteral>FROM</CodeLiteral>, but restricted by the join condition (if any).",
        "detail": "[DESCRIPTION]: <CodeLiteral>CROSS JOIN</CodeLiteral> is equivalent to <CodeLiteral>INNER JOIN ON (TRUE)</CodeLiteral>, that is, no rows are removed by qualification. They produce a simple Cartesian product, the same result as you get from listing the two tables at the top level of <CodeLiteral>FROM</CodeLiteral>, but restricted by the join condition (if any).<sep>[DEMO]: SELECT * FROM table1 CROSS JOIN table2;",
        "example": [
            "SELECT * FROM table1 CROSS JOIN table2;"
        ],
        "link": []
    },
    {
        "type": "keyword",
        "keyword": "LATERAL ( select )  alias",
        "tree": " (table_ref LATERAL (select_with_parens ( )))",
        "description": "The <CodeLiteral>LATERAL</CodeLiteral> key word can precede a sub-SELECT <CodeLiteral>FROM</CodeLiteral> item. This allows the sub-SELECT to refer to columns of <CodeLiteral>FROM</CodeLiteral> items that appear before it in the <CodeLiteral>FROM</CodeLiteral> list. (Without <CodeLiteral>LATERAL</CodeLiteral>, each sub-SELECT is evaluated independently and so cannot cross-reference any other <CodeLiteral>FROM</CodeLiteral> item.)\n  <CodeLiteral>LATERAL</CodeLiteral> can also precede a function-call <CodeLiteral>FROM</CodeLiteral> item, but in this case it is a noise word, because the function expression can refer to earlier <CodeLiteral>FROM</CodeLiteral> items in any case.\n  A <CodeLiteral>LATERAL</CodeLiteral> item can appear at top level in the <CodeLiteral>FROM</CodeLiteral> list, or within a <CodeLiteral>JOIN</CodeLiteral> tree. In the latter case it can also refer to any items that are on the left-hand side of a <CodeLiteral>JOIN</CodeLiteral> that it is on the right-hand side of.\n  When a <CodeLiteral>FROM</CodeLiteral> item contains <CodeLiteral>LATERAL</CodeLiteral> cross-references, evaluation proceeds as follows: for each row of the <CodeLiteral>FROM</CodeLiteral> item providing the cross-referenced column(s), or set of rows of multiple <CodeLiteral>FROM</CodeLiteral> items providing the columns, the <CodeLiteral>LATERAL</CodeLiteral> item is evaluated using that row or row set's values of the columns. The resulting row(s) are joined as usual with the rows they were computed from. This is repeated for each row or set of rows from the column source table(s).\n  The column source table(s) must be <CodeLiteral>INNER</CodeLiteral> or <CodeLiteral>LEFT</CodeLiteral> joined to the <CodeLiteral>LATERAL</CodeLiteral> item, else there would not be a well-defined set of rows from which to compute each set of rows for the <CodeLiteral>LATERAL</CodeLiteral> item. Thus, although a construct such as <CodeLiteral>X RIGHT JOIN LATERAL Y</CodeLiteral> is syntactically valid, it is not actually allowed for Y to reference X.",
        "detail": "[DESCRIPTION]: The <CodeLiteral>LATERAL</CodeLiteral> key word can precede a sub-SELECT <CodeLiteral>FROM</CodeLiteral> item. This allows the sub-SELECT to refer to columns of <CodeLiteral>FROM</CodeLiteral> items that appear before it in the <CodeLiteral>FROM</CodeLiteral> list. (Without <CodeLiteral>LATERAL</CodeLiteral>, each sub-SELECT is evaluated independently and so cannot cross-reference any other <CodeLiteral>FROM</CodeLiteral> item.)\n  <CodeLiteral>LATERAL</CodeLiteral> can also precede a function-call <CodeLiteral>FROM</CodeLiteral> item, but in this case it is a noise word, because the function expression can refer to earlier <CodeLiteral>FROM</CodeLiteral> items in any case.\n  A <CodeLiteral>LATERAL</CodeLiteral> item can appear at top level in the <CodeLiteral>FROM</CodeLiteral> list, or within a <CodeLiteral>JOIN</CodeLiteral> tree. In the latter case it can also refer to any items that are on the left-hand side of a <CodeLiteral>JOIN</CodeLiteral> that it is on the right-hand side of.\n  When a <CodeLiteral>FROM</CodeLiteral> item contains <CodeLiteral>LATERAL</CodeLiteral> cross-references, evaluation proceeds as follows: for each row of the <CodeLiteral>FROM</CodeLiteral> item providing the cross-referenced column(s), or set of rows of multiple <CodeLiteral>FROM</CodeLiteral> items providing the columns, the <CodeLiteral>LATERAL</CodeLiteral> item is evaluated using that row or row set's values of the columns. The resulting row(s) are joined as usual with the rows they were computed from. This is repeated for each row or set of rows from the column source table(s).\n  The column source table(s) must be <CodeLiteral>INNER</CodeLiteral> or <CodeLiteral>LEFT</CodeLiteral> joined to the <CodeLiteral>LATERAL</CodeLiteral> item, else there would not be a well-defined set of rows from which to compute each set of rows for the <CodeLiteral>LATERAL</CodeLiteral> item. Thus, although a construct such as <CodeLiteral>X RIGHT JOIN LATERAL Y</CodeLiteral> is syntactically valid, it is not actually allowed for Y to reference X.<sep>[DEMO]: SELECT a.*, b.val FROM a, LATERAL (SELECT x.val FROM x WHERE x.key = a.key) AS b",
        "example": [
            "SELECT a.*, b.val FROM a, LATERAL (SELECT x.val FROM x WHERE x.key = a.key) AS b"
        ],
        "link": []
    },
    {
        "type": "keyword",
        "keyword": " ( select )  AS alias",
        "tree": " (table_ref (select_with_parens ( )) (opt_alias_clause (table_alias_clause AS)))",
        "description": "The <CodeLiteral>LATERAL</CodeLiteral> key word can precede a sub-SELECT <CodeLiteral>FROM</CodeLiteral> item. This allows the sub-SELECT to refer to columns of <CodeLiteral>FROM</CodeLiteral> items that appear before it in the <CodeLiteral>FROM</CodeLiteral> list. (Without <CodeLiteral>LATERAL</CodeLiteral>, each sub-SELECT is evaluated independently and so cannot cross-reference any other <CodeLiteral>FROM</CodeLiteral> item.)\n  <CodeLiteral>LATERAL</CodeLiteral> can also precede a function-call <CodeLiteral>FROM</CodeLiteral> item, but in this case it is a noise word, because the function expression can refer to earlier <CodeLiteral>FROM</CodeLiteral> items in any case.\n  A <CodeLiteral>LATERAL</CodeLiteral> item can appear at top level in the <CodeLiteral>FROM</CodeLiteral> list, or within a <CodeLiteral>JOIN</CodeLiteral> tree. In the latter case it can also refer to any items that are on the left-hand side of a <CodeLiteral>JOIN</CodeLiteral> that it is on the right-hand side of.\n  When a <CodeLiteral>FROM</CodeLiteral> item contains <CodeLiteral>LATERAL</CodeLiteral> cross-references, evaluation proceeds as follows: for each row of the <CodeLiteral>FROM</CodeLiteral> item providing the cross-referenced column(s), or set of rows of multiple <CodeLiteral>FROM</CodeLiteral> items providing the columns, the <CodeLiteral>LATERAL</CodeLiteral> item is evaluated using that row or row set's values of the columns. The resulting row(s) are joined as usual with the rows they were computed from. This is repeated for each row or set of rows from the column source table(s).\n  The column source table(s) must be <CodeLiteral>INNER</CodeLiteral> or <CodeLiteral>LEFT</CodeLiteral> joined to the <CodeLiteral>LATERAL</CodeLiteral> item, else there would not be a well-defined set of rows from which to compute each set of rows for the <CodeLiteral>LATERAL</CodeLiteral> item. Thus, although a construct such as <CodeLiteral>X RIGHT JOIN LATERAL Y</CodeLiteral> is syntactically valid, it is not actually allowed for Y to reference X.",
        "detail": "[DESCRIPTION]: The <CodeLiteral>LATERAL</CodeLiteral> key word can precede a sub-SELECT <CodeLiteral>FROM</CodeLiteral> item. This allows the sub-SELECT to refer to columns of <CodeLiteral>FROM</CodeLiteral> items that appear before it in the <CodeLiteral>FROM</CodeLiteral> list. (Without <CodeLiteral>LATERAL</CodeLiteral>, each sub-SELECT is evaluated independently and so cannot cross-reference any other <CodeLiteral>FROM</CodeLiteral> item.)\n  <CodeLiteral>LATERAL</CodeLiteral> can also precede a function-call <CodeLiteral>FROM</CodeLiteral> item, but in this case it is a noise word, because the function expression can refer to earlier <CodeLiteral>FROM</CodeLiteral> items in any case.\n  A <CodeLiteral>LATERAL</CodeLiteral> item can appear at top level in the <CodeLiteral>FROM</CodeLiteral> list, or within a <CodeLiteral>JOIN</CodeLiteral> tree. In the latter case it can also refer to any items that are on the left-hand side of a <CodeLiteral>JOIN</CodeLiteral> that it is on the right-hand side of.\n  When a <CodeLiteral>FROM</CodeLiteral> item contains <CodeLiteral>LATERAL</CodeLiteral> cross-references, evaluation proceeds as follows: for each row of the <CodeLiteral>FROM</CodeLiteral> item providing the cross-referenced column(s), or set of rows of multiple <CodeLiteral>FROM</CodeLiteral> items providing the columns, the <CodeLiteral>LATERAL</CodeLiteral> item is evaluated using that row or row set's values of the columns. The resulting row(s) are joined as usual with the rows they were computed from. This is repeated for each row or set of rows from the column source table(s).\n  The column source table(s) must be <CodeLiteral>INNER</CodeLiteral> or <CodeLiteral>LEFT</CodeLiteral> joined to the <CodeLiteral>LATERAL</CodeLiteral> item, else there would not be a well-defined set of rows from which to compute each set of rows for the <CodeLiteral>LATERAL</CodeLiteral> item. Thus, although a construct such as <CodeLiteral>X RIGHT JOIN LATERAL Y</CodeLiteral> is syntactically valid, it is not actually allowed for Y to reference X.<sep>[DEMO]: SELECT a.id, b.val FROM a, LATERAL (SELECT x.val FROM x WHERE x.a_id = a.id) AS b",
        "example": [
            "SELECT a.id, b.val FROM a, LATERAL (SELECT x.val FROM x WHERE x.a_id = a.id) AS b"
        ],
        "link": []
    },
    {
        "type": "keyword",
        "keyword": "LATERAL function_name ( argument ) ",
        "tree": " (table_ref LATERAL (func_alias_clause (alias_clause ( ))))",
        "description": "The <CodeLiteral>LATERAL</CodeLiteral> key word can precede a sub-SELECT <CodeLiteral>FROM</CodeLiteral> item. This allows the sub-SELECT to refer to columns of <CodeLiteral>FROM</CodeLiteral> items that appear before it in the <CodeLiteral>FROM</CodeLiteral> list. (Without <CodeLiteral>LATERAL</CodeLiteral>, each sub-SELECT is evaluated independently and so cannot cross-reference any other <CodeLiteral>FROM</CodeLiteral> item.)\n  <CodeLiteral>LATERAL</CodeLiteral> can also precede a function-call <CodeLiteral>FROM</CodeLiteral> item, but in this case it is a noise word, because the function expression can refer to earlier <CodeLiteral>FROM</CodeLiteral> items in any case.\n  A <CodeLiteral>LATERAL</CodeLiteral> item can appear at top level in the <CodeLiteral>FROM</CodeLiteral> list, or within a <CodeLiteral>JOIN</CodeLiteral> tree. In the latter case it can also refer to any items that are on the left-hand side of a <CodeLiteral>JOIN</CodeLiteral> that it is on the right-hand side of.\n  When a <CodeLiteral>FROM</CodeLiteral> item contains <CodeLiteral>LATERAL</CodeLiteral> cross-references, evaluation proceeds as follows: for each row of the <CodeLiteral>FROM</CodeLiteral> item providing the cross-referenced column(s), or set of rows of multiple <CodeLiteral>FROM</CodeLiteral> items providing the columns, the <CodeLiteral>LATERAL</CodeLiteral> item is evaluated using that row or row set's values of the columns. The resulting row(s) are joined as usual with the rows they were computed from. This is repeated for each row or set of rows from the column source table(s).\n  The column source table(s) must be <CodeLiteral>INNER</CodeLiteral> or <CodeLiteral>LEFT</CodeLiteral> joined to the <CodeLiteral>LATERAL</CodeLiteral> item, else there would not be a well-defined set of rows from which to compute each set of rows for the <CodeLiteral>LATERAL</CodeLiteral> item. Thus, although a construct such as <CodeLiteral>X RIGHT JOIN LATERAL Y</CodeLiteral> is syntactically valid, it is not actually allowed for Y to reference X.",
        "detail": "[DESCRIPTION]: The <CodeLiteral>LATERAL</CodeLiteral> key word can precede a sub-SELECT <CodeLiteral>FROM</CodeLiteral> item. This allows the sub-SELECT to refer to columns of <CodeLiteral>FROM</CodeLiteral> items that appear before it in the <CodeLiteral>FROM</CodeLiteral> list. (Without <CodeLiteral>LATERAL</CodeLiteral>, each sub-SELECT is evaluated independently and so cannot cross-reference any other <CodeLiteral>FROM</CodeLiteral> item.)\n  <CodeLiteral>LATERAL</CodeLiteral> can also precede a function-call <CodeLiteral>FROM</CodeLiteral> item, but in this case it is a noise word, because the function expression can refer to earlier <CodeLiteral>FROM</CodeLiteral> items in any case.\n  A <CodeLiteral>LATERAL</CodeLiteral> item can appear at top level in the <CodeLiteral>FROM</CodeLiteral> list, or within a <CodeLiteral>JOIN</CodeLiteral> tree. In the latter case it can also refer to any items that are on the left-hand side of a <CodeLiteral>JOIN</CodeLiteral> that it is on the right-hand side of.\n  When a <CodeLiteral>FROM</CodeLiteral> item contains <CodeLiteral>LATERAL</CodeLiteral> cross-references, evaluation proceeds as follows: for each row of the <CodeLiteral>FROM</CodeLiteral> item providing the cross-referenced column(s), or set of rows of multiple <CodeLiteral>FROM</CodeLiteral> items providing the columns, the <CodeLiteral>LATERAL</CodeLiteral> item is evaluated using that row or row set's values of the columns. The resulting row(s) are joined as usual with the rows they were computed from. This is repeated for each row or set of rows from the column source table(s).\n  The column source table(s) must be <CodeLiteral>INNER</CodeLiteral> or <CodeLiteral>LEFT</CodeLiteral> joined to the <CodeLiteral>LATERAL</CodeLiteral> item, else there would not be a well-defined set of rows from which to compute each set of rows for the <CodeLiteral>LATERAL</CodeLiteral> item. Thus, although a construct such as <CodeLiteral>X RIGHT JOIN LATERAL Y</CodeLiteral> is syntactically valid, it is not actually allowed for Y to reference X.<sep>[DEMO]: SELECT a.*, L.func_result FROM a, LATERAL function_name(a.column) AS L(func_result)",
        "example": [
            "SELECT a.*, L.func_result FROM a, LATERAL function_name(a.column) AS L(func_result)"
        ],
        "link": []
    },
    {
        "type": "keyword",
        "keyword": "function_name ( argument )  WITH ORDINALITY",
        "tree": " (func_table (func_expr_windowless (func_application ( ))) (opt_ordinality WITH ORDINALITY))",
        "description": "The <CodeLiteral>LATERAL</CodeLiteral> key word can precede a sub-SELECT <CodeLiteral>FROM</CodeLiteral> item. This allows the sub-SELECT to refer to columns of <CodeLiteral>FROM</CodeLiteral> items that appear before it in the <CodeLiteral>FROM</CodeLiteral> list. (Without <CodeLiteral>LATERAL</CodeLiteral>, each sub-SELECT is evaluated independently and so cannot cross-reference any other <CodeLiteral>FROM</CodeLiteral> item.)\n  <CodeLiteral>LATERAL</CodeLiteral> can also precede a function-call <CodeLiteral>FROM</CodeLiteral> item, but in this case it is a noise word, because the function expression can refer to earlier <CodeLiteral>FROM</CodeLiteral> items in any case.\n  A <CodeLiteral>LATERAL</CodeLiteral> item can appear at top level in the <CodeLiteral>FROM</CodeLiteral> list, or within a <CodeLiteral>JOIN</CodeLiteral> tree. In the latter case it can also refer to any items that are on the left-hand side of a <CodeLiteral>JOIN</CodeLiteral> that it is on the right-hand side of.\n  When a <CodeLiteral>FROM</CodeLiteral> item contains <CodeLiteral>LATERAL</CodeLiteral> cross-references, evaluation proceeds as follows: for each row of the <CodeLiteral>FROM</CodeLiteral> item providing the cross-referenced column(s), or set of rows of multiple <CodeLiteral>FROM</CodeLiteral> items providing the columns, the <CodeLiteral>LATERAL</CodeLiteral> item is evaluated using that row or row set's values of the columns. The resulting row(s) are joined as usual with the rows they were computed from. This is repeated for each row or set of rows from the column source table(s).\n  The column source table(s) must be <CodeLiteral>INNER</CodeLiteral> or <CodeLiteral>LEFT</CodeLiteral> joined to the <CodeLiteral>LATERAL</CodeLiteral> item, else there would not be a well-defined set of rows from which to compute each set of rows for the <CodeLiteral>LATERAL</CodeLiteral> item. Thus, although a construct such as <CodeLiteral>X RIGHT JOIN LATERAL Y</CodeLiteral> is syntactically valid, it is not actually allowed for Y to reference X.",
        "detail": "[DESCRIPTION]: The <CodeLiteral>LATERAL</CodeLiteral> key word can precede a sub-SELECT <CodeLiteral>FROM</CodeLiteral> item. This allows the sub-SELECT to refer to columns of <CodeLiteral>FROM</CodeLiteral> items that appear before it in the <CodeLiteral>FROM</CodeLiteral> list. (Without <CodeLiteral>LATERAL</CodeLiteral>, each sub-SELECT is evaluated independently and so cannot cross-reference any other <CodeLiteral>FROM</CodeLiteral> item.)\n  <CodeLiteral>LATERAL</CodeLiteral> can also precede a function-call <CodeLiteral>FROM</CodeLiteral> item, but in this case it is a noise word, because the function expression can refer to earlier <CodeLiteral>FROM</CodeLiteral> items in any case.\n  A <CodeLiteral>LATERAL</CodeLiteral> item can appear at top level in the <CodeLiteral>FROM</CodeLiteral> list, or within a <CodeLiteral>JOIN</CodeLiteral> tree. In the latter case it can also refer to any items that are on the left-hand side of a <CodeLiteral>JOIN</CodeLiteral> that it is on the right-hand side of.\n  When a <CodeLiteral>FROM</CodeLiteral> item contains <CodeLiteral>LATERAL</CodeLiteral> cross-references, evaluation proceeds as follows: for each row of the <CodeLiteral>FROM</CodeLiteral> item providing the cross-referenced column(s), or set of rows of multiple <CodeLiteral>FROM</CodeLiteral> items providing the columns, the <CodeLiteral>LATERAL</CodeLiteral> item is evaluated using that row or row set's values of the columns. The resulting row(s) are joined as usual with the rows they were computed from. This is repeated for each row or set of rows from the column source table(s).\n  The column source table(s) must be <CodeLiteral>INNER</CodeLiteral> or <CodeLiteral>LEFT</CodeLiteral> joined to the <CodeLiteral>LATERAL</CodeLiteral> item, else there would not be a well-defined set of rows from which to compute each set of rows for the <CodeLiteral>LATERAL</CodeLiteral> item. Thus, although a construct such as <CodeLiteral>X RIGHT JOIN LATERAL Y</CodeLiteral> is syntactically valid, it is not actually allowed for Y to reference X.<sep>[DEMO]: SELECT * FROM some_table, LATERAL generate_series(1, some_table.num) WITH ORDINALITY",
        "example": [
            "SELECT * FROM some_table, LATERAL generate_series(1, some_table.num) WITH ORDINALITY"
        ],
        "link": []
    },
    {
        "type": "keyword",
        "keyword": "function_name ( argument )  AS alias",
        "tree": " (table_ref (func_table (func_expr_windowless (func_application ( )))) (func_alias_clause (alias_clause AS)))",
        "description": "The <CodeLiteral>LATERAL</CodeLiteral> key word can precede a sub-SELECT <CodeLiteral>FROM</CodeLiteral> item. This allows the sub-SELECT to refer to columns of <CodeLiteral>FROM</CodeLiteral> items that appear before it in the <CodeLiteral>FROM</CodeLiteral> list. (Without <CodeLiteral>LATERAL</CodeLiteral>, each sub-SELECT is evaluated independently and so cannot cross-reference any other <CodeLiteral>FROM</CodeLiteral> item.)\n  <CodeLiteral>LATERAL</CodeLiteral> can also precede a function-call <CodeLiteral>FROM</CodeLiteral> item, but in this case it is a noise word, because the function expression can refer to earlier <CodeLiteral>FROM</CodeLiteral> items in any case.\n  A <CodeLiteral>LATERAL</CodeLiteral> item can appear at top level in the <CodeLiteral>FROM</CodeLiteral> list, or within a <CodeLiteral>JOIN</CodeLiteral> tree. In the latter case it can also refer to any items that are on the left-hand side of a <CodeLiteral>JOIN</CodeLiteral> that it is on the right-hand side of.\n  When a <CodeLiteral>FROM</CodeLiteral> item contains <CodeLiteral>LATERAL</CodeLiteral> cross-references, evaluation proceeds as follows: for each row of the <CodeLiteral>FROM</CodeLiteral> item providing the cross-referenced column(s), or set of rows of multiple <CodeLiteral>FROM</CodeLiteral> items providing the columns, the <CodeLiteral>LATERAL</CodeLiteral> item is evaluated using that row or row set's values of the columns. The resulting row(s) are joined as usual with the rows they were computed from. This is repeated for each row or set of rows from the column source table(s).\n  The column source table(s) must be <CodeLiteral>INNER</CodeLiteral> or <CodeLiteral>LEFT</CodeLiteral> joined to the <CodeLiteral>LATERAL</CodeLiteral> item, else there would not be a well-defined set of rows from which to compute each set of rows for the <CodeLiteral>LATERAL</CodeLiteral> item. Thus, although a construct such as <CodeLiteral>X RIGHT JOIN LATERAL Y</CodeLiteral> is syntactically valid, it is not actually allowed for Y to reference X.",
        "detail": "[DESCRIPTION]: The <CodeLiteral>LATERAL</CodeLiteral> key word can precede a sub-SELECT <CodeLiteral>FROM</CodeLiteral> item. This allows the sub-SELECT to refer to columns of <CodeLiteral>FROM</CodeLiteral> items that appear before it in the <CodeLiteral>FROM</CodeLiteral> list. (Without <CodeLiteral>LATERAL</CodeLiteral>, each sub-SELECT is evaluated independently and so cannot cross-reference any other <CodeLiteral>FROM</CodeLiteral> item.)\n  <CodeLiteral>LATERAL</CodeLiteral> can also precede a function-call <CodeLiteral>FROM</CodeLiteral> item, but in this case it is a noise word, because the function expression can refer to earlier <CodeLiteral>FROM</CodeLiteral> items in any case.\n  A <CodeLiteral>LATERAL</CodeLiteral> item can appear at top level in the <CodeLiteral>FROM</CodeLiteral> list, or within a <CodeLiteral>JOIN</CodeLiteral> tree. In the latter case it can also refer to any items that are on the left-hand side of a <CodeLiteral>JOIN</CodeLiteral> that it is on the right-hand side of.\n  When a <CodeLiteral>FROM</CodeLiteral> item contains <CodeLiteral>LATERAL</CodeLiteral> cross-references, evaluation proceeds as follows: for each row of the <CodeLiteral>FROM</CodeLiteral> item providing the cross-referenced column(s), or set of rows of multiple <CodeLiteral>FROM</CodeLiteral> items providing the columns, the <CodeLiteral>LATERAL</CodeLiteral> item is evaluated using that row or row set's values of the columns. The resulting row(s) are joined as usual with the rows they were computed from. This is repeated for each row or set of rows from the column source table(s).\n  The column source table(s) must be <CodeLiteral>INNER</CodeLiteral> or <CodeLiteral>LEFT</CodeLiteral> joined to the <CodeLiteral>LATERAL</CodeLiteral> item, else there would not be a well-defined set of rows from which to compute each set of rows for the <CodeLiteral>LATERAL</CodeLiteral> item. Thus, although a construct such as <CodeLiteral>X RIGHT JOIN LATERAL Y</CodeLiteral> is syntactically valid, it is not actually allowed for Y to reference X.<sep>[DEMO]: SELECT employees.name, lateral_data.emails FROM employees, LATERAL generate_series(1, 3) AS lateral_data(emails) WHERE employees.id = lateral_data.emails;",
        "example": [
            "SELECT employees.name, lateral_data.emails FROM employees, LATERAL generate_series(1, 3) AS lateral_data(emails) WHERE employees.id = lateral_data.emails;"
        ],
        "link": []
    },
    {
        "type": "keyword",
        "keyword": "LATERAL function_name ( argument )  alias ( column_definition ) ",
        "tree": " (table_ref LATERAL (func_table (func_expr_windowless (func_application ( )))) (func_alias_clause (alias_clause ( ))))",
        "description": "The <CodeLiteral>LATERAL</CodeLiteral> key word can precede a sub-SELECT <CodeLiteral>FROM</CodeLiteral> item. This allows the sub-SELECT to refer to columns of <CodeLiteral>FROM</CodeLiteral> items that appear before it in the <CodeLiteral>FROM</CodeLiteral> list. (Without <CodeLiteral>LATERAL</CodeLiteral>, each sub-SELECT is evaluated independently and so cannot cross-reference any other <CodeLiteral>FROM</CodeLiteral> item.)\n  <CodeLiteral>LATERAL</CodeLiteral> can also precede a function-call <CodeLiteral>FROM</CodeLiteral> item, but in this case it is a noise word, because the function expression can refer to earlier <CodeLiteral>FROM</CodeLiteral> items in any case.\n  A <CodeLiteral>LATERAL</CodeLiteral> item can appear at top level in the <CodeLiteral>FROM</CodeLiteral> list, or within a <CodeLiteral>JOIN</CodeLiteral> tree. In the latter case it can also refer to any items that are on the left-hand side of a <CodeLiteral>JOIN</CodeLiteral> that it is on the right-hand side of.\n  When a <CodeLiteral>FROM</CodeLiteral> item contains <CodeLiteral>LATERAL</CodeLiteral> cross-references, evaluation proceeds as follows: for each row of the <CodeLiteral>FROM</CodeLiteral> item providing the cross-referenced column(s), or set of rows of multiple <CodeLiteral>FROM</CodeLiteral> items providing the columns, the <CodeLiteral>LATERAL</CodeLiteral> item is evaluated using that row or row set's values of the columns. The resulting row(s) are joined as usual with the rows they were computed from. This is repeated for each row or set of rows from the column source table(s).\n  The column source table(s) must be <CodeLiteral>INNER</CodeLiteral> or <CodeLiteral>LEFT</CodeLiteral> joined to the <CodeLiteral>LATERAL</CodeLiteral> item, else there would not be a well-defined set of rows from which to compute each set of rows for the <CodeLiteral>LATERAL</CodeLiteral> item. Thus, although a construct such as <CodeLiteral>X RIGHT JOIN LATERAL Y</CodeLiteral> is syntactically valid, it is not actually allowed for Y to reference X.",
        "detail": "[DESCRIPTION]: The <CodeLiteral>LATERAL</CodeLiteral> key word can precede a sub-SELECT <CodeLiteral>FROM</CodeLiteral> item. This allows the sub-SELECT to refer to columns of <CodeLiteral>FROM</CodeLiteral> items that appear before it in the <CodeLiteral>FROM</CodeLiteral> list. (Without <CodeLiteral>LATERAL</CodeLiteral>, each sub-SELECT is evaluated independently and so cannot cross-reference any other <CodeLiteral>FROM</CodeLiteral> item.)\n  <CodeLiteral>LATERAL</CodeLiteral> can also precede a function-call <CodeLiteral>FROM</CodeLiteral> item, but in this case it is a noise word, because the function expression can refer to earlier <CodeLiteral>FROM</CodeLiteral> items in any case.\n  A <CodeLiteral>LATERAL</CodeLiteral> item can appear at top level in the <CodeLiteral>FROM</CodeLiteral> list, or within a <CodeLiteral>JOIN</CodeLiteral> tree. In the latter case it can also refer to any items that are on the left-hand side of a <CodeLiteral>JOIN</CodeLiteral> that it is on the right-hand side of.\n  When a <CodeLiteral>FROM</CodeLiteral> item contains <CodeLiteral>LATERAL</CodeLiteral> cross-references, evaluation proceeds as follows: for each row of the <CodeLiteral>FROM</CodeLiteral> item providing the cross-referenced column(s), or set of rows of multiple <CodeLiteral>FROM</CodeLiteral> items providing the columns, the <CodeLiteral>LATERAL</CodeLiteral> item is evaluated using that row or row set's values of the columns. The resulting row(s) are joined as usual with the rows they were computed from. This is repeated for each row or set of rows from the column source table(s).\n  The column source table(s) must be <CodeLiteral>INNER</CodeLiteral> or <CodeLiteral>LEFT</CodeLiteral> joined to the <CodeLiteral>LATERAL</CodeLiteral> item, else there would not be a well-defined set of rows from which to compute each set of rows for the <CodeLiteral>LATERAL</CodeLiteral> item. Thus, although a construct such as <CodeLiteral>X RIGHT JOIN LATERAL Y</CodeLiteral> is syntactically valid, it is not actually allowed for Y to reference X.<sep>[DEMO]: SELECT a.id, f.val FROM accounts a, LATERAL generate_series(1, a.id) AS f(val)",
        "example": [
            "SELECT a.id, f.val FROM accounts a, LATERAL generate_series(1, a.id) AS f(val)"
        ],
        "link": []
    },
    {
        "type": "keyword",
        "keyword": "function_name ( argument )  AS alias ( column_definition ) ",
        "tree": " (table_ref (func_table (func_expr_windowless (func_application ( )))) (func_alias_clause (alias_clause AS ( ))))",
        "description": "The <CodeLiteral>LATERAL</CodeLiteral> key word can precede a sub-SELECT <CodeLiteral>FROM</CodeLiteral> item. This allows the sub-SELECT to refer to columns of <CodeLiteral>FROM</CodeLiteral> items that appear before it in the <CodeLiteral>FROM</CodeLiteral> list. (Without <CodeLiteral>LATERAL</CodeLiteral>, each sub-SELECT is evaluated independently and so cannot cross-reference any other <CodeLiteral>FROM</CodeLiteral> item.)\n  <CodeLiteral>LATERAL</CodeLiteral> can also precede a function-call <CodeLiteral>FROM</CodeLiteral> item, but in this case it is a noise word, because the function expression can refer to earlier <CodeLiteral>FROM</CodeLiteral> items in any case.\n  A <CodeLiteral>LATERAL</CodeLiteral> item can appear at top level in the <CodeLiteral>FROM</CodeLiteral> list, or within a <CodeLiteral>JOIN</CodeLiteral> tree. In the latter case it can also refer to any items that are on the left-hand side of a <CodeLiteral>JOIN</CodeLiteral> that it is on the right-hand side of.\n  When a <CodeLiteral>FROM</CodeLiteral> item contains <CodeLiteral>LATERAL</CodeLiteral> cross-references, evaluation proceeds as follows: for each row of the <CodeLiteral>FROM</CodeLiteral> item providing the cross-referenced column(s), or set of rows of multiple <CodeLiteral>FROM</CodeLiteral> items providing the columns, the <CodeLiteral>LATERAL</CodeLiteral> item is evaluated using that row or row set's values of the columns. The resulting row(s) are joined as usual with the rows they were computed from. This is repeated for each row or set of rows from the column source table(s).\n  The column source table(s) must be <CodeLiteral>INNER</CodeLiteral> or <CodeLiteral>LEFT</CodeLiteral> joined to the <CodeLiteral>LATERAL</CodeLiteral> item, else there would not be a well-defined set of rows from which to compute each set of rows for the <CodeLiteral>LATERAL</CodeLiteral> item. Thus, although a construct such as <CodeLiteral>X RIGHT JOIN LATERAL Y</CodeLiteral> is syntactically valid, it is not actually allowed for Y to reference X.",
        "detail": "[DESCRIPTION]: The <CodeLiteral>LATERAL</CodeLiteral> key word can precede a sub-SELECT <CodeLiteral>FROM</CodeLiteral> item. This allows the sub-SELECT to refer to columns of <CodeLiteral>FROM</CodeLiteral> items that appear before it in the <CodeLiteral>FROM</CodeLiteral> list. (Without <CodeLiteral>LATERAL</CodeLiteral>, each sub-SELECT is evaluated independently and so cannot cross-reference any other <CodeLiteral>FROM</CodeLiteral> item.)\n  <CodeLiteral>LATERAL</CodeLiteral> can also precede a function-call <CodeLiteral>FROM</CodeLiteral> item, but in this case it is a noise word, because the function expression can refer to earlier <CodeLiteral>FROM</CodeLiteral> items in any case.\n  A <CodeLiteral>LATERAL</CodeLiteral> item can appear at top level in the <CodeLiteral>FROM</CodeLiteral> list, or within a <CodeLiteral>JOIN</CodeLiteral> tree. In the latter case it can also refer to any items that are on the left-hand side of a <CodeLiteral>JOIN</CodeLiteral> that it is on the right-hand side of.\n  When a <CodeLiteral>FROM</CodeLiteral> item contains <CodeLiteral>LATERAL</CodeLiteral> cross-references, evaluation proceeds as follows: for each row of the <CodeLiteral>FROM</CodeLiteral> item providing the cross-referenced column(s), or set of rows of multiple <CodeLiteral>FROM</CodeLiteral> items providing the columns, the <CodeLiteral>LATERAL</CodeLiteral> item is evaluated using that row or row set's values of the columns. The resulting row(s) are joined as usual with the rows they were computed from. This is repeated for each row or set of rows from the column source table(s).\n  The column source table(s) must be <CodeLiteral>INNER</CodeLiteral> or <CodeLiteral>LEFT</CodeLiteral> joined to the <CodeLiteral>LATERAL</CodeLiteral> item, else there would not be a well-defined set of rows from which to compute each set of rows for the <CodeLiteral>LATERAL</CodeLiteral> item. Thus, although a construct such as <CodeLiteral>X RIGHT JOIN LATERAL Y</CodeLiteral> is syntactically valid, it is not actually allowed for Y to reference X.<sep>[DEMO]: ",
        "example": [
            ""
        ],
        "link": []
    },
    {
        "type": "keyword",
        "keyword": "function_name ( argument )  alias ( column_definition ) ",
        "tree": " (table_ref (func_table (func_expr_windowless (func_application ( )))) (func_alias_clause (alias_clause ( ))))",
        "description": "The <CodeLiteral>LATERAL</CodeLiteral> key word can precede a sub-SELECT <CodeLiteral>FROM</CodeLiteral> item. This allows the sub-SELECT to refer to columns of <CodeLiteral>FROM</CodeLiteral> items that appear before it in the <CodeLiteral>FROM</CodeLiteral> list. (Without <CodeLiteral>LATERAL</CodeLiteral>, each sub-SELECT is evaluated independently and so cannot cross-reference any other <CodeLiteral>FROM</CodeLiteral> item.)\n  <CodeLiteral>LATERAL</CodeLiteral> can also precede a function-call <CodeLiteral>FROM</CodeLiteral> item, but in this case it is a noise word, because the function expression can refer to earlier <CodeLiteral>FROM</CodeLiteral> items in any case.\n  A <CodeLiteral>LATERAL</CodeLiteral> item can appear at top level in the <CodeLiteral>FROM</CodeLiteral> list, or within a <CodeLiteral>JOIN</CodeLiteral> tree. In the latter case it can also refer to any items that are on the left-hand side of a <CodeLiteral>JOIN</CodeLiteral> that it is on the right-hand side of.\n  When a <CodeLiteral>FROM</CodeLiteral> item contains <CodeLiteral>LATERAL</CodeLiteral> cross-references, evaluation proceeds as follows: for each row of the <CodeLiteral>FROM</CodeLiteral> item providing the cross-referenced column(s), or set of rows of multiple <CodeLiteral>FROM</CodeLiteral> items providing the columns, the <CodeLiteral>LATERAL</CodeLiteral> item is evaluated using that row or row set's values of the columns. The resulting row(s) are joined as usual with the rows they were computed from. This is repeated for each row or set of rows from the column source table(s).\n  The column source table(s) must be <CodeLiteral>INNER</CodeLiteral> or <CodeLiteral>LEFT</CodeLiteral> joined to the <CodeLiteral>LATERAL</CodeLiteral> item, else there would not be a well-defined set of rows from which to compute each set of rows for the <CodeLiteral>LATERAL</CodeLiteral> item. Thus, although a construct such as <CodeLiteral>X RIGHT JOIN LATERAL Y</CodeLiteral> is syntactically valid, it is not actually allowed for Y to reference X.",
        "detail": "[DESCRIPTION]: The <CodeLiteral>LATERAL</CodeLiteral> key word can precede a sub-SELECT <CodeLiteral>FROM</CodeLiteral> item. This allows the sub-SELECT to refer to columns of <CodeLiteral>FROM</CodeLiteral> items that appear before it in the <CodeLiteral>FROM</CodeLiteral> list. (Without <CodeLiteral>LATERAL</CodeLiteral>, each sub-SELECT is evaluated independently and so cannot cross-reference any other <CodeLiteral>FROM</CodeLiteral> item.)\n  <CodeLiteral>LATERAL</CodeLiteral> can also precede a function-call <CodeLiteral>FROM</CodeLiteral> item, but in this case it is a noise word, because the function expression can refer to earlier <CodeLiteral>FROM</CodeLiteral> items in any case.\n  A <CodeLiteral>LATERAL</CodeLiteral> item can appear at top level in the <CodeLiteral>FROM</CodeLiteral> list, or within a <CodeLiteral>JOIN</CodeLiteral> tree. In the latter case it can also refer to any items that are on the left-hand side of a <CodeLiteral>JOIN</CodeLiteral> that it is on the right-hand side of.\n  When a <CodeLiteral>FROM</CodeLiteral> item contains <CodeLiteral>LATERAL</CodeLiteral> cross-references, evaluation proceeds as follows: for each row of the <CodeLiteral>FROM</CodeLiteral> item providing the cross-referenced column(s), or set of rows of multiple <CodeLiteral>FROM</CodeLiteral> items providing the columns, the <CodeLiteral>LATERAL</CodeLiteral> item is evaluated using that row or row set's values of the columns. The resulting row(s) are joined as usual with the rows they were computed from. This is repeated for each row or set of rows from the column source table(s).\n  The column source table(s) must be <CodeLiteral>INNER</CodeLiteral> or <CodeLiteral>LEFT</CodeLiteral> joined to the <CodeLiteral>LATERAL</CodeLiteral> item, else there would not be a well-defined set of rows from which to compute each set of rows for the <CodeLiteral>LATERAL</CodeLiteral> item. Thus, although a construct such as <CodeLiteral>X RIGHT JOIN LATERAL Y</CodeLiteral> is syntactically valid, it is not actually allowed for Y to reference X.<sep>[DEMO]: SELECT employees.name, departments_info.* FROM employees, LATERAL generate_series(1, employees.years_of_service) AS departments_info(department_count) WHERE employees.id = 1;",
        "example": [
            "SELECT employees.name, departments_info.* FROM employees, LATERAL generate_series(1, employees.years_of_service) AS departments_info(department_count) WHERE employees.id = 1;"
        ],
        "link": []
    },
    {
        "type": "keyword",
        "keyword": "LATERAL ROWS FROM ( function_name ( argument )  ) ",
        "tree": " (table_ref LATERAL (func_table ROWS FROM (rowsfrom_list (rowsfrom_item (func_expr_windowless (func_application ( )))))))",
        "description": "The <CodeLiteral>LATERAL</CodeLiteral> key word can precede a sub-SELECT <CodeLiteral>FROM</CodeLiteral> item. This allows the sub-SELECT to refer to columns of <CodeLiteral>FROM</CodeLiteral> items that appear before it in the <CodeLiteral>FROM</CodeLiteral> list. (Without <CodeLiteral>LATERAL</CodeLiteral>, each sub-SELECT is evaluated independently and so cannot cross-reference any other <CodeLiteral>FROM</CodeLiteral> item.)\n  <CodeLiteral>LATERAL</CodeLiteral> can also precede a function-call <CodeLiteral>FROM</CodeLiteral> item, but in this case it is a noise word, because the function expression can refer to earlier <CodeLiteral>FROM</CodeLiteral> items in any case.\n  A <CodeLiteral>LATERAL</CodeLiteral> item can appear at top level in the <CodeLiteral>FROM</CodeLiteral> list, or within a <CodeLiteral>JOIN</CodeLiteral> tree. In the latter case it can also refer to any items that are on the left-hand side of a <CodeLiteral>JOIN</CodeLiteral> that it is on the right-hand side of.\n  When a <CodeLiteral>FROM</CodeLiteral> item contains <CodeLiteral>LATERAL</CodeLiteral> cross-references, evaluation proceeds as follows: for each row of the <CodeLiteral>FROM</CodeLiteral> item providing the cross-referenced column(s), or set of rows of multiple <CodeLiteral>FROM</CodeLiteral> items providing the columns, the <CodeLiteral>LATERAL</CodeLiteral> item is evaluated using that row or row set's values of the columns. The resulting row(s) are joined as usual with the rows they were computed from. This is repeated for each row or set of rows from the column source table(s).\n  The column source table(s) must be <CodeLiteral>INNER</CodeLiteral> or <CodeLiteral>LEFT</CodeLiteral> joined to the <CodeLiteral>LATERAL</CodeLiteral> item, else there would not be a well-defined set of rows from which to compute each set of rows for the <CodeLiteral>LATERAL</CodeLiteral> item. Thus, although a construct such as <CodeLiteral>X RIGHT JOIN LATERAL Y</CodeLiteral> is syntactically valid, it is not actually allowed for Y to reference X.",
        "detail": "[DESCRIPTION]: The <CodeLiteral>LATERAL</CodeLiteral> key word can precede a sub-SELECT <CodeLiteral>FROM</CodeLiteral> item. This allows the sub-SELECT to refer to columns of <CodeLiteral>FROM</CodeLiteral> items that appear before it in the <CodeLiteral>FROM</CodeLiteral> list. (Without <CodeLiteral>LATERAL</CodeLiteral>, each sub-SELECT is evaluated independently and so cannot cross-reference any other <CodeLiteral>FROM</CodeLiteral> item.)\n  <CodeLiteral>LATERAL</CodeLiteral> can also precede a function-call <CodeLiteral>FROM</CodeLiteral> item, but in this case it is a noise word, because the function expression can refer to earlier <CodeLiteral>FROM</CodeLiteral> items in any case.\n  A <CodeLiteral>LATERAL</CodeLiteral> item can appear at top level in the <CodeLiteral>FROM</CodeLiteral> list, or within a <CodeLiteral>JOIN</CodeLiteral> tree. In the latter case it can also refer to any items that are on the left-hand side of a <CodeLiteral>JOIN</CodeLiteral> that it is on the right-hand side of.\n  When a <CodeLiteral>FROM</CodeLiteral> item contains <CodeLiteral>LATERAL</CodeLiteral> cross-references, evaluation proceeds as follows: for each row of the <CodeLiteral>FROM</CodeLiteral> item providing the cross-referenced column(s), or set of rows of multiple <CodeLiteral>FROM</CodeLiteral> items providing the columns, the <CodeLiteral>LATERAL</CodeLiteral> item is evaluated using that row or row set's values of the columns. The resulting row(s) are joined as usual with the rows they were computed from. This is repeated for each row or set of rows from the column source table(s).\n  The column source table(s) must be <CodeLiteral>INNER</CodeLiteral> or <CodeLiteral>LEFT</CodeLiteral> joined to the <CodeLiteral>LATERAL</CodeLiteral> item, else there would not be a well-defined set of rows from which to compute each set of rows for the <CodeLiteral>LATERAL</CodeLiteral> item. Thus, although a construct such as <CodeLiteral>X RIGHT JOIN LATERAL Y</CodeLiteral> is syntactically valid, it is not actually allowed for Y to reference X.<sep>[DEMO]: SELECT a.id, b.val FROM a JOIN LATERAL ROWS FROM (generate_series(1, a.id)) AS b(val) ON true;",
        "example": [
            "SELECT a.id, b.val FROM a JOIN LATERAL ROWS FROM (generate_series(1, a.id)) AS b(val) ON true;"
        ],
        "link": []
    },
    {
        "type": "keyword",
        "keyword": "ROWS FROM ( function_name ( argument )  )  AS alias",
        "tree": " (table_ref (func_table ROWS FROM (rowsfrom_list (rowsfrom_item (func_expr_windowless (func_application ( )))))) (func_alias_clause (alias_clause AS)))",
        "description": "The <CodeLiteral>LATERAL</CodeLiteral> key word can precede a sub-SELECT <CodeLiteral>FROM</CodeLiteral> item. This allows the sub-SELECT to refer to columns of <CodeLiteral>FROM</CodeLiteral> items that appear before it in the <CodeLiteral>FROM</CodeLiteral> list. (Without <CodeLiteral>LATERAL</CodeLiteral>, each sub-SELECT is evaluated independently and so cannot cross-reference any other <CodeLiteral>FROM</CodeLiteral> item.)\n  <CodeLiteral>LATERAL</CodeLiteral> can also precede a function-call <CodeLiteral>FROM</CodeLiteral> item, but in this case it is a noise word, because the function expression can refer to earlier <CodeLiteral>FROM</CodeLiteral> items in any case.\n  A <CodeLiteral>LATERAL</CodeLiteral> item can appear at top level in the <CodeLiteral>FROM</CodeLiteral> list, or within a <CodeLiteral>JOIN</CodeLiteral> tree. In the latter case it can also refer to any items that are on the left-hand side of a <CodeLiteral>JOIN</CodeLiteral> that it is on the right-hand side of.\n  When a <CodeLiteral>FROM</CodeLiteral> item contains <CodeLiteral>LATERAL</CodeLiteral> cross-references, evaluation proceeds as follows: for each row of the <CodeLiteral>FROM</CodeLiteral> item providing the cross-referenced column(s), or set of rows of multiple <CodeLiteral>FROM</CodeLiteral> items providing the columns, the <CodeLiteral>LATERAL</CodeLiteral> item is evaluated using that row or row set's values of the columns. The resulting row(s) are joined as usual with the rows they were computed from. This is repeated for each row or set of rows from the column source table(s).\n  The column source table(s) must be <CodeLiteral>INNER</CodeLiteral> or <CodeLiteral>LEFT</CodeLiteral> joined to the <CodeLiteral>LATERAL</CodeLiteral> item, else there would not be a well-defined set of rows from which to compute each set of rows for the <CodeLiteral>LATERAL</CodeLiteral> item. Thus, although a construct such as <CodeLiteral>X RIGHT JOIN LATERAL Y</CodeLiteral> is syntactically valid, it is not actually allowed for Y to reference X.",
        "detail": "[DESCRIPTION]: The <CodeLiteral>LATERAL</CodeLiteral> key word can precede a sub-SELECT <CodeLiteral>FROM</CodeLiteral> item. This allows the sub-SELECT to refer to columns of <CodeLiteral>FROM</CodeLiteral> items that appear before it in the <CodeLiteral>FROM</CodeLiteral> list. (Without <CodeLiteral>LATERAL</CodeLiteral>, each sub-SELECT is evaluated independently and so cannot cross-reference any other <CodeLiteral>FROM</CodeLiteral> item.)\n  <CodeLiteral>LATERAL</CodeLiteral> can also precede a function-call <CodeLiteral>FROM</CodeLiteral> item, but in this case it is a noise word, because the function expression can refer to earlier <CodeLiteral>FROM</CodeLiteral> items in any case.\n  A <CodeLiteral>LATERAL</CodeLiteral> item can appear at top level in the <CodeLiteral>FROM</CodeLiteral> list, or within a <CodeLiteral>JOIN</CodeLiteral> tree. In the latter case it can also refer to any items that are on the left-hand side of a <CodeLiteral>JOIN</CodeLiteral> that it is on the right-hand side of.\n  When a <CodeLiteral>FROM</CodeLiteral> item contains <CodeLiteral>LATERAL</CodeLiteral> cross-references, evaluation proceeds as follows: for each row of the <CodeLiteral>FROM</CodeLiteral> item providing the cross-referenced column(s), or set of rows of multiple <CodeLiteral>FROM</CodeLiteral> items providing the columns, the <CodeLiteral>LATERAL</CodeLiteral> item is evaluated using that row or row set's values of the columns. The resulting row(s) are joined as usual with the rows they were computed from. This is repeated for each row or set of rows from the column source table(s).\n  The column source table(s) must be <CodeLiteral>INNER</CodeLiteral> or <CodeLiteral>LEFT</CodeLiteral> joined to the <CodeLiteral>LATERAL</CodeLiteral> item, else there would not be a well-defined set of rows from which to compute each set of rows for the <CodeLiteral>LATERAL</CodeLiteral> item. Thus, although a construct such as <CodeLiteral>X RIGHT JOIN LATERAL Y</CodeLiteral> is syntactically valid, it is not actually allowed for Y to reference X.<sep>[DEMO]: SELECT * FROM employees e, LATERAL ROWS FROM (generate_series(1, e.years_of_experience)) AS years_exp(seq)",
        "example": [
            "SELECT * FROM employees e, LATERAL ROWS FROM (generate_series(1, e.years_of_experience)) AS years_exp(seq)"
        ],
        "link": []
    },
    {
        "type": "keyword",
        "keyword": "ROWS FROM ( function_name ( argument )  )  alias  ( column_alias ) ",
        "tree": " (table_ref (func_table ROWS FROM (rowsfrom_list (rowsfrom_item (func_expr_windowless (func_application ( )))))) (func_alias_clause (alias_clause ( ))))",
        "description": "The <CodeLiteral>LATERAL</CodeLiteral> key word can precede a sub-SELECT <CodeLiteral>FROM</CodeLiteral> item. This allows the sub-SELECT to refer to columns of <CodeLiteral>FROM</CodeLiteral> items that appear before it in the <CodeLiteral>FROM</CodeLiteral> list. (Without <CodeLiteral>LATERAL</CodeLiteral>, each sub-SELECT is evaluated independently and so cannot cross-reference any other <CodeLiteral>FROM</CodeLiteral> item.)\n  <CodeLiteral>LATERAL</CodeLiteral> can also precede a function-call <CodeLiteral>FROM</CodeLiteral> item, but in this case it is a noise word, because the function expression can refer to earlier <CodeLiteral>FROM</CodeLiteral> items in any case.\n  A <CodeLiteral>LATERAL</CodeLiteral> item can appear at top level in the <CodeLiteral>FROM</CodeLiteral> list, or within a <CodeLiteral>JOIN</CodeLiteral> tree. In the latter case it can also refer to any items that are on the left-hand side of a <CodeLiteral>JOIN</CodeLiteral> that it is on the right-hand side of.\n  When a <CodeLiteral>FROM</CodeLiteral> item contains <CodeLiteral>LATERAL</CodeLiteral> cross-references, evaluation proceeds as follows: for each row of the <CodeLiteral>FROM</CodeLiteral> item providing the cross-referenced column(s), or set of rows of multiple <CodeLiteral>FROM</CodeLiteral> items providing the columns, the <CodeLiteral>LATERAL</CodeLiteral> item is evaluated using that row or row set's values of the columns. The resulting row(s) are joined as usual with the rows they were computed from. This is repeated for each row or set of rows from the column source table(s).\n  The column source table(s) must be <CodeLiteral>INNER</CodeLiteral> or <CodeLiteral>LEFT</CodeLiteral> joined to the <CodeLiteral>LATERAL</CodeLiteral> item, else there would not be a well-defined set of rows from which to compute each set of rows for the <CodeLiteral>LATERAL</CodeLiteral> item. Thus, although a construct such as <CodeLiteral>X RIGHT JOIN LATERAL Y</CodeLiteral> is syntactically valid, it is not actually allowed for Y to reference X.",
        "detail": "[DESCRIPTION]: The <CodeLiteral>LATERAL</CodeLiteral> key word can precede a sub-SELECT <CodeLiteral>FROM</CodeLiteral> item. This allows the sub-SELECT to refer to columns of <CodeLiteral>FROM</CodeLiteral> items that appear before it in the <CodeLiteral>FROM</CodeLiteral> list. (Without <CodeLiteral>LATERAL</CodeLiteral>, each sub-SELECT is evaluated independently and so cannot cross-reference any other <CodeLiteral>FROM</CodeLiteral> item.)\n  <CodeLiteral>LATERAL</CodeLiteral> can also precede a function-call <CodeLiteral>FROM</CodeLiteral> item, but in this case it is a noise word, because the function expression can refer to earlier <CodeLiteral>FROM</CodeLiteral> items in any case.\n  A <CodeLiteral>LATERAL</CodeLiteral> item can appear at top level in the <CodeLiteral>FROM</CodeLiteral> list, or within a <CodeLiteral>JOIN</CodeLiteral> tree. In the latter case it can also refer to any items that are on the left-hand side of a <CodeLiteral>JOIN</CodeLiteral> that it is on the right-hand side of.\n  When a <CodeLiteral>FROM</CodeLiteral> item contains <CodeLiteral>LATERAL</CodeLiteral> cross-references, evaluation proceeds as follows: for each row of the <CodeLiteral>FROM</CodeLiteral> item providing the cross-referenced column(s), or set of rows of multiple <CodeLiteral>FROM</CodeLiteral> items providing the columns, the <CodeLiteral>LATERAL</CodeLiteral> item is evaluated using that row or row set's values of the columns. The resulting row(s) are joined as usual with the rows they were computed from. This is repeated for each row or set of rows from the column source table(s).\n  The column source table(s) must be <CodeLiteral>INNER</CodeLiteral> or <CodeLiteral>LEFT</CodeLiteral> joined to the <CodeLiteral>LATERAL</CodeLiteral> item, else there would not be a well-defined set of rows from which to compute each set of rows for the <CodeLiteral>LATERAL</CodeLiteral> item. Thus, although a construct such as <CodeLiteral>X RIGHT JOIN LATERAL Y</CodeLiteral> is syntactically valid, it is not actually allowed for Y to reference X.<sep>[DEMO]: SELECT * FROM my_table, LATERAL ROWS FROM (my_function(my_table.column)) AS alias (column_alias);",
        "example": [
            "SELECT * FROM my_table, LATERAL ROWS FROM (my_function(my_table.column)) AS alias (column_alias);"
        ],
        "link": []
    },
    {
        "type": "keyword",
        "keyword": "ROWS FROM ( function_name ( argument )  )  alias",
        "tree": " (func_table ROWS FROM (rowsfrom_list (rowsfrom_item (func_expr_windowless (func_application ( ))))))",
        "description": "The <CodeLiteral>LATERAL</CodeLiteral> key word can precede a sub-SELECT <CodeLiteral>FROM</CodeLiteral> item. This allows the sub-SELECT to refer to columns of <CodeLiteral>FROM</CodeLiteral> items that appear before it in the <CodeLiteral>FROM</CodeLiteral> list. (Without <CodeLiteral>LATERAL</CodeLiteral>, each sub-SELECT is evaluated independently and so cannot cross-reference any other <CodeLiteral>FROM</CodeLiteral> item.)\n  <CodeLiteral>LATERAL</CodeLiteral> can also precede a function-call <CodeLiteral>FROM</CodeLiteral> item, but in this case it is a noise word, because the function expression can refer to earlier <CodeLiteral>FROM</CodeLiteral> items in any case.\n  A <CodeLiteral>LATERAL</CodeLiteral> item can appear at top level in the <CodeLiteral>FROM</CodeLiteral> list, or within a <CodeLiteral>JOIN</CodeLiteral> tree. In the latter case it can also refer to any items that are on the left-hand side of a <CodeLiteral>JOIN</CodeLiteral> that it is on the right-hand side of.\n  When a <CodeLiteral>FROM</CodeLiteral> item contains <CodeLiteral>LATERAL</CodeLiteral> cross-references, evaluation proceeds as follows: for each row of the <CodeLiteral>FROM</CodeLiteral> item providing the cross-referenced column(s), or set of rows of multiple <CodeLiteral>FROM</CodeLiteral> items providing the columns, the <CodeLiteral>LATERAL</CodeLiteral> item is evaluated using that row or row set's values of the columns. The resulting row(s) are joined as usual with the rows they were computed from. This is repeated for each row or set of rows from the column source table(s).\n  The column source table(s) must be <CodeLiteral>INNER</CodeLiteral> or <CodeLiteral>LEFT</CodeLiteral> joined to the <CodeLiteral>LATERAL</CodeLiteral> item, else there would not be a well-defined set of rows from which to compute each set of rows for the <CodeLiteral>LATERAL</CodeLiteral> item. Thus, although a construct such as <CodeLiteral>X RIGHT JOIN LATERAL Y</CodeLiteral> is syntactically valid, it is not actually allowed for Y to reference X.",
        "detail": "[DESCRIPTION]: The <CodeLiteral>LATERAL</CodeLiteral> key word can precede a sub-SELECT <CodeLiteral>FROM</CodeLiteral> item. This allows the sub-SELECT to refer to columns of <CodeLiteral>FROM</CodeLiteral> items that appear before it in the <CodeLiteral>FROM</CodeLiteral> list. (Without <CodeLiteral>LATERAL</CodeLiteral>, each sub-SELECT is evaluated independently and so cannot cross-reference any other <CodeLiteral>FROM</CodeLiteral> item.)\n  <CodeLiteral>LATERAL</CodeLiteral> can also precede a function-call <CodeLiteral>FROM</CodeLiteral> item, but in this case it is a noise word, because the function expression can refer to earlier <CodeLiteral>FROM</CodeLiteral> items in any case.\n  A <CodeLiteral>LATERAL</CodeLiteral> item can appear at top level in the <CodeLiteral>FROM</CodeLiteral> list, or within a <CodeLiteral>JOIN</CodeLiteral> tree. In the latter case it can also refer to any items that are on the left-hand side of a <CodeLiteral>JOIN</CodeLiteral> that it is on the right-hand side of.\n  When a <CodeLiteral>FROM</CodeLiteral> item contains <CodeLiteral>LATERAL</CodeLiteral> cross-references, evaluation proceeds as follows: for each row of the <CodeLiteral>FROM</CodeLiteral> item providing the cross-referenced column(s), or set of rows of multiple <CodeLiteral>FROM</CodeLiteral> items providing the columns, the <CodeLiteral>LATERAL</CodeLiteral> item is evaluated using that row or row set's values of the columns. The resulting row(s) are joined as usual with the rows they were computed from. This is repeated for each row or set of rows from the column source table(s).\n  The column source table(s) must be <CodeLiteral>INNER</CodeLiteral> or <CodeLiteral>LEFT</CodeLiteral> joined to the <CodeLiteral>LATERAL</CodeLiteral> item, else there would not be a well-defined set of rows from which to compute each set of rows for the <CodeLiteral>LATERAL</CodeLiteral> item. Thus, although a construct such as <CodeLiteral>X RIGHT JOIN LATERAL Y</CodeLiteral> is syntactically valid, it is not actually allowed for Y to reference X.<sep>[DEMO]: SELECT * FROM my_table, LATERAL ROWS FROM (generate_series(1, my_table.max_value)) AS series(value)",
        "example": [
            "SELECT * FROM my_table, LATERAL ROWS FROM (generate_series(1, my_table.max_value)) AS series(value)"
        ],
        "link": []
    },
    {
        "type": "keyword",
        "keyword": "ROWS FROM ( function_name ( argument )  ) ",
        "tree": " (func_table ROWS FROM (rowsfrom_list (rowsfrom_item (func_expr_windowless (func_application ( ))))))",
        "description": "The <CodeLiteral>LATERAL</CodeLiteral> key word can precede a sub-SELECT <CodeLiteral>FROM</CodeLiteral> item. This allows the sub-SELECT to refer to columns of <CodeLiteral>FROM</CodeLiteral> items that appear before it in the <CodeLiteral>FROM</CodeLiteral> list. (Without <CodeLiteral>LATERAL</CodeLiteral>, each sub-SELECT is evaluated independently and so cannot cross-reference any other <CodeLiteral>FROM</CodeLiteral> item.)\n  <CodeLiteral>LATERAL</CodeLiteral> can also precede a function-call <CodeLiteral>FROM</CodeLiteral> item, but in this case it is a noise word, because the function expression can refer to earlier <CodeLiteral>FROM</CodeLiteral> items in any case.\n  A <CodeLiteral>LATERAL</CodeLiteral> item can appear at top level in the <CodeLiteral>FROM</CodeLiteral> list, or within a <CodeLiteral>JOIN</CodeLiteral> tree. In the latter case it can also refer to any items that are on the left-hand side of a <CodeLiteral>JOIN</CodeLiteral> that it is on the right-hand side of.\n  When a <CodeLiteral>FROM</CodeLiteral> item contains <CodeLiteral>LATERAL</CodeLiteral> cross-references, evaluation proceeds as follows: for each row of the <CodeLiteral>FROM</CodeLiteral> item providing the cross-referenced column(s), or set of rows of multiple <CodeLiteral>FROM</CodeLiteral> items providing the columns, the <CodeLiteral>LATERAL</CodeLiteral> item is evaluated using that row or row set's values of the columns. The resulting row(s) are joined as usual with the rows they were computed from. This is repeated for each row or set of rows from the column source table(s).\n  The column source table(s) must be <CodeLiteral>INNER</CodeLiteral> or <CodeLiteral>LEFT</CodeLiteral> joined to the <CodeLiteral>LATERAL</CodeLiteral> item, else there would not be a well-defined set of rows from which to compute each set of rows for the <CodeLiteral>LATERAL</CodeLiteral> item. Thus, although a construct such as <CodeLiteral>X RIGHT JOIN LATERAL Y</CodeLiteral> is syntactically valid, it is not actually allowed for Y to reference X.",
        "detail": "[DESCRIPTION]: The <CodeLiteral>LATERAL</CodeLiteral> key word can precede a sub-SELECT <CodeLiteral>FROM</CodeLiteral> item. This allows the sub-SELECT to refer to columns of <CodeLiteral>FROM</CodeLiteral> items that appear before it in the <CodeLiteral>FROM</CodeLiteral> list. (Without <CodeLiteral>LATERAL</CodeLiteral>, each sub-SELECT is evaluated independently and so cannot cross-reference any other <CodeLiteral>FROM</CodeLiteral> item.)\n  <CodeLiteral>LATERAL</CodeLiteral> can also precede a function-call <CodeLiteral>FROM</CodeLiteral> item, but in this case it is a noise word, because the function expression can refer to earlier <CodeLiteral>FROM</CodeLiteral> items in any case.\n  A <CodeLiteral>LATERAL</CodeLiteral> item can appear at top level in the <CodeLiteral>FROM</CodeLiteral> list, or within a <CodeLiteral>JOIN</CodeLiteral> tree. In the latter case it can also refer to any items that are on the left-hand side of a <CodeLiteral>JOIN</CodeLiteral> that it is on the right-hand side of.\n  When a <CodeLiteral>FROM</CodeLiteral> item contains <CodeLiteral>LATERAL</CodeLiteral> cross-references, evaluation proceeds as follows: for each row of the <CodeLiteral>FROM</CodeLiteral> item providing the cross-referenced column(s), or set of rows of multiple <CodeLiteral>FROM</CodeLiteral> items providing the columns, the <CodeLiteral>LATERAL</CodeLiteral> item is evaluated using that row or row set's values of the columns. The resulting row(s) are joined as usual with the rows they were computed from. This is repeated for each row or set of rows from the column source table(s).\n  The column source table(s) must be <CodeLiteral>INNER</CodeLiteral> or <CodeLiteral>LEFT</CodeLiteral> joined to the <CodeLiteral>LATERAL</CodeLiteral> item, else there would not be a well-defined set of rows from which to compute each set of rows for the <CodeLiteral>LATERAL</CodeLiteral> item. Thus, although a construct such as <CodeLiteral>X RIGHT JOIN LATERAL Y</CodeLiteral> is syntactically valid, it is not actually allowed for Y to reference X.<sep>[DEMO]: SELECT * FROM table1, LATERAL ROWS FROM (generate_series(1, table1.num)) AS series(value) WHERE table1.id = 1;",
        "example": [
            "SELECT * FROM table1, LATERAL ROWS FROM (generate_series(1, table1.num)) AS series(value) WHERE table1.id = 1;"
        ],
        "link": []
    },
    {
        "type": "keyword",
        "keyword": "from_item INNER JOIN from_item ON join_condition",
        "tree": " (table_ref (join_type INNER) JOIN (join_qual ON))",
        "description": "The <CodeLiteral>LATERAL</CodeLiteral> key word can precede a sub-SELECT <CodeLiteral>FROM</CodeLiteral> item. This allows the sub-SELECT to refer to columns of <CodeLiteral>FROM</CodeLiteral> items that appear before it in the <CodeLiteral>FROM</CodeLiteral> list. (Without <CodeLiteral>LATERAL</CodeLiteral>, each sub-SELECT is evaluated independently and so cannot cross-reference any other <CodeLiteral>FROM</CodeLiteral> item.)\n  <CodeLiteral>LATERAL</CodeLiteral> can also precede a function-call <CodeLiteral>FROM</CodeLiteral> item, but in this case it is a noise word, because the function expression can refer to earlier <CodeLiteral>FROM</CodeLiteral> items in any case.\n  A <CodeLiteral>LATERAL</CodeLiteral> item can appear at top level in the <CodeLiteral>FROM</CodeLiteral> list, or within a <CodeLiteral>JOIN</CodeLiteral> tree. In the latter case it can also refer to any items that are on the left-hand side of a <CodeLiteral>JOIN</CodeLiteral> that it is on the right-hand side of.\n  When a <CodeLiteral>FROM</CodeLiteral> item contains <CodeLiteral>LATERAL</CodeLiteral> cross-references, evaluation proceeds as follows: for each row of the <CodeLiteral>FROM</CodeLiteral> item providing the cross-referenced column(s), or set of rows of multiple <CodeLiteral>FROM</CodeLiteral> items providing the columns, the <CodeLiteral>LATERAL</CodeLiteral> item is evaluated using that row or row set's values of the columns. The resulting row(s) are joined as usual with the rows they were computed from. This is repeated for each row or set of rows from the column source table(s).\n  The column source table(s) must be <CodeLiteral>INNER</CodeLiteral> or <CodeLiteral>LEFT</CodeLiteral> joined to the <CodeLiteral>LATERAL</CodeLiteral> item, else there would not be a well-defined set of rows from which to compute each set of rows for the <CodeLiteral>LATERAL</CodeLiteral> item. Thus, although a construct such as <CodeLiteral>X RIGHT JOIN LATERAL Y</CodeLiteral> is syntactically valid, it is not actually allowed for Y to reference X. Join type can be one of <CodeLiteral>[ INNER ] JOIN</CodeLiteral>\n   <CodeLiteral>LEFT [ OUTER ] JOIN</CodeLiteral>\n  <CodeLiteral>RIGHT [ OUTER ] JOIN</CodeLiteral>\n   <CodeLiteral>FULL [ OUTER ] JOIN</CodeLiteral>\n  For the <CodeLiteral>INNER</CodeLiteral> and <CodeLiteral>OUTER</CodeLiteral> join types, a join condition must be specified, namely exactly one of <CodeLiteral>ON join_condition</CodeLiteral>, <CodeLiteral>USING (join_column [, ...])</CodeLiteral>, or <CodeLiteral>NATURAL</CodeLiteral>. See below for the meaning.\n  A <CodeLiteral>JOIN</CodeLiteral> clause combines two <CodeLiteral>FROM</CodeLiteral> items, which for convenience we will refer to as \u201ctables\u201d, though in reality they can be any type of <CodeLiteral>FROM</CodeLiteral> item. Use parentheses if necessary to determine the order of nesting. In the absence of parentheses, <CodeLiteral>JOIN</CodeLiteral>s nest left-to-right. In any case <CodeLiteral>JOIN</CodeLiteral> binds more tightly than the commas separating <CodeLiteral>FROM</CodeLiteral>-list items. All the <CodeLiteral>JOIN</CodeLiteral> options are just a notational convenience, since they do nothing you couldn't do with plain <CodeLiteral>FROM</CodeLiteral> and <CodeLiteral>WHERE</CodeLiteral>.\n  <CodeLiteral>LEFT OUTER JOIN</CodeLiteral> returns all rows in the qualified Cartesian product (i.e., all combined rows that pass its join condition), plus one copy of each row in the left-hand table for which there was no right-hand row that passed the join condition. This left-hand row is extended to the full width of the joined table by inserting null values for the right-hand columns. Note that only the <CodeLiteral>JOIN</CodeLiteral> clause's own condition is considered while deciding which rows have matches. Outer conditions are applied afterwards.\n  Conversely, <CodeLiteral>RIGHT OUTER JOIN</CodeLiteral> returns all the joined rows, plus one row for each unmatched right-hand row (extended with nulls on the left). This is just a notational convenience, since you could convert it to a <CodeLiteral>LEFT OUTER JOIN</CodeLiteral> by switching the left and right tables.\n  <CodeLiteral>FULL OUTER JOIN</CodeLiteral> returns all the joined rows, plus one row for each unmatched left-hand row (extended with nulls on the right), plus one row for each unmatched right-hand row (extended with nulls on the left).",
        "detail": "[DESCRIPTION]: The <CodeLiteral>LATERAL</CodeLiteral> key word can precede a sub-SELECT <CodeLiteral>FROM</CodeLiteral> item. This allows the sub-SELECT to refer to columns of <CodeLiteral>FROM</CodeLiteral> items that appear before it in the <CodeLiteral>FROM</CodeLiteral> list. (Without <CodeLiteral>LATERAL</CodeLiteral>, each sub-SELECT is evaluated independently and so cannot cross-reference any other <CodeLiteral>FROM</CodeLiteral> item.)\n  <CodeLiteral>LATERAL</CodeLiteral> can also precede a function-call <CodeLiteral>FROM</CodeLiteral> item, but in this case it is a noise word, because the function expression can refer to earlier <CodeLiteral>FROM</CodeLiteral> items in any case.\n  A <CodeLiteral>LATERAL</CodeLiteral> item can appear at top level in the <CodeLiteral>FROM</CodeLiteral> list, or within a <CodeLiteral>JOIN</CodeLiteral> tree. In the latter case it can also refer to any items that are on the left-hand side of a <CodeLiteral>JOIN</CodeLiteral> that it is on the right-hand side of.\n  When a <CodeLiteral>FROM</CodeLiteral> item contains <CodeLiteral>LATERAL</CodeLiteral> cross-references, evaluation proceeds as follows: for each row of the <CodeLiteral>FROM</CodeLiteral> item providing the cross-referenced column(s), or set of rows of multiple <CodeLiteral>FROM</CodeLiteral> items providing the columns, the <CodeLiteral>LATERAL</CodeLiteral> item is evaluated using that row or row set's values of the columns. The resulting row(s) are joined as usual with the rows they were computed from. This is repeated for each row or set of rows from the column source table(s).\n  The column source table(s) must be <CodeLiteral>INNER</CodeLiteral> or <CodeLiteral>LEFT</CodeLiteral> joined to the <CodeLiteral>LATERAL</CodeLiteral> item, else there would not be a well-defined set of rows from which to compute each set of rows for the <CodeLiteral>LATERAL</CodeLiteral> item. Thus, although a construct such as <CodeLiteral>X RIGHT JOIN LATERAL Y</CodeLiteral> is syntactically valid, it is not actually allowed for Y to reference X. Join type can be one of <CodeLiteral>[ INNER ] JOIN</CodeLiteral>\n   <CodeLiteral>LEFT [ OUTER ] JOIN</CodeLiteral>\n  <CodeLiteral>RIGHT [ OUTER ] JOIN</CodeLiteral>\n   <CodeLiteral>FULL [ OUTER ] JOIN</CodeLiteral>\n  For the <CodeLiteral>INNER</CodeLiteral> and <CodeLiteral>OUTER</CodeLiteral> join types, a join condition must be specified, namely exactly one of <CodeLiteral>ON join_condition</CodeLiteral>, <CodeLiteral>USING (join_column [, ...])</CodeLiteral>, or <CodeLiteral>NATURAL</CodeLiteral>. See below for the meaning.\n  A <CodeLiteral>JOIN</CodeLiteral> clause combines two <CodeLiteral>FROM</CodeLiteral> items, which for convenience we will refer to as \u201ctables\u201d, though in reality they can be any type of <CodeLiteral>FROM</CodeLiteral> item. Use parentheses if necessary to determine the order of nesting. In the absence of parentheses, <CodeLiteral>JOIN</CodeLiteral>s nest left-to-right. In any case <CodeLiteral>JOIN</CodeLiteral> binds more tightly than the commas separating <CodeLiteral>FROM</CodeLiteral>-list items. All the <CodeLiteral>JOIN</CodeLiteral> options are just a notational convenience, since they do nothing you couldn't do with plain <CodeLiteral>FROM</CodeLiteral> and <CodeLiteral>WHERE</CodeLiteral>.\n  <CodeLiteral>LEFT OUTER JOIN</CodeLiteral> returns all rows in the qualified Cartesian product (i.e., all combined rows that pass its join condition), plus one copy of each row in the left-hand table for which there was no right-hand row that passed the join condition. This left-hand row is extended to the full width of the joined table by inserting null values for the right-hand columns. Note that only the <CodeLiteral>JOIN</CodeLiteral> clause's own condition is considered while deciding which rows have matches. Outer conditions are applied afterwards.\n  Conversely, <CodeLiteral>RIGHT OUTER JOIN</CodeLiteral> returns all the joined rows, plus one row for each unmatched right-hand row (extended with nulls on the left). This is just a notational convenience, since you could convert it to a <CodeLiteral>LEFT OUTER JOIN</CodeLiteral> by switching the left and right tables.\n  <CodeLiteral>FULL OUTER JOIN</CodeLiteral> returns all the joined rows, plus one row for each unmatched left-hand row (extended with nulls on the right), plus one row for each unmatched right-hand row (extended with nulls on the left).<sep>[DEMO]: SELECT a.id, b.name FROM employees a INNER JOIN departments b ON a.department_id = b.id",
        "example": [
            "SELECT a.id, b.name FROM employees a INNER JOIN departments b ON a.department_id = b.id"
        ],
        "link": []
    },
    {
        "type": "keyword",
        "keyword": "from_item JOIN from_item ON join_condition",
        "tree": " (table_ref JOIN (join_qual ON))",
        "description": "The <CodeLiteral>LATERAL</CodeLiteral> key word can precede a sub-SELECT <CodeLiteral>FROM</CodeLiteral> item. This allows the sub-SELECT to refer to columns of <CodeLiteral>FROM</CodeLiteral> items that appear before it in the <CodeLiteral>FROM</CodeLiteral> list. (Without <CodeLiteral>LATERAL</CodeLiteral>, each sub-SELECT is evaluated independently and so cannot cross-reference any other <CodeLiteral>FROM</CodeLiteral> item.)\n  <CodeLiteral>LATERAL</CodeLiteral> can also precede a function-call <CodeLiteral>FROM</CodeLiteral> item, but in this case it is a noise word, because the function expression can refer to earlier <CodeLiteral>FROM</CodeLiteral> items in any case.\n  A <CodeLiteral>LATERAL</CodeLiteral> item can appear at top level in the <CodeLiteral>FROM</CodeLiteral> list, or within a <CodeLiteral>JOIN</CodeLiteral> tree. In the latter case it can also refer to any items that are on the left-hand side of a <CodeLiteral>JOIN</CodeLiteral> that it is on the right-hand side of.\n  When a <CodeLiteral>FROM</CodeLiteral> item contains <CodeLiteral>LATERAL</CodeLiteral> cross-references, evaluation proceeds as follows: for each row of the <CodeLiteral>FROM</CodeLiteral> item providing the cross-referenced column(s), or set of rows of multiple <CodeLiteral>FROM</CodeLiteral> items providing the columns, the <CodeLiteral>LATERAL</CodeLiteral> item is evaluated using that row or row set's values of the columns. The resulting row(s) are joined as usual with the rows they were computed from. This is repeated for each row or set of rows from the column source table(s).\n  The column source table(s) must be <CodeLiteral>INNER</CodeLiteral> or <CodeLiteral>LEFT</CodeLiteral> joined to the <CodeLiteral>LATERAL</CodeLiteral> item, else there would not be a well-defined set of rows from which to compute each set of rows for the <CodeLiteral>LATERAL</CodeLiteral> item. Thus, although a construct such as <CodeLiteral>X RIGHT JOIN LATERAL Y</CodeLiteral> is syntactically valid, it is not actually allowed for Y to reference X. Join type can be one of <CodeLiteral>[ INNER ] JOIN</CodeLiteral>\n   <CodeLiteral>LEFT [ OUTER ] JOIN</CodeLiteral>\n  <CodeLiteral>RIGHT [ OUTER ] JOIN</CodeLiteral>\n   <CodeLiteral>FULL [ OUTER ] JOIN</CodeLiteral>\n  For the <CodeLiteral>INNER</CodeLiteral> and <CodeLiteral>OUTER</CodeLiteral> join types, a join condition must be specified, namely exactly one of <CodeLiteral>ON join_condition</CodeLiteral>, <CodeLiteral>USING (join_column [, ...])</CodeLiteral>, or <CodeLiteral>NATURAL</CodeLiteral>. See below for the meaning.\n  A <CodeLiteral>JOIN</CodeLiteral> clause combines two <CodeLiteral>FROM</CodeLiteral> items, which for convenience we will refer to as \u201ctables\u201d, though in reality they can be any type of <CodeLiteral>FROM</CodeLiteral> item. Use parentheses if necessary to determine the order of nesting. In the absence of parentheses, <CodeLiteral>JOIN</CodeLiteral>s nest left-to-right. In any case <CodeLiteral>JOIN</CodeLiteral> binds more tightly than the commas separating <CodeLiteral>FROM</CodeLiteral>-list items. All the <CodeLiteral>JOIN</CodeLiteral> options are just a notational convenience, since they do nothing you couldn't do with plain <CodeLiteral>FROM</CodeLiteral> and <CodeLiteral>WHERE</CodeLiteral>.\n  <CodeLiteral>LEFT OUTER JOIN</CodeLiteral> returns all rows in the qualified Cartesian product (i.e., all combined rows that pass its join condition), plus one copy of each row in the left-hand table for which there was no right-hand row that passed the join condition. This left-hand row is extended to the full width of the joined table by inserting null values for the right-hand columns. Note that only the <CodeLiteral>JOIN</CodeLiteral> clause's own condition is considered while deciding which rows have matches. Outer conditions are applied afterwards.\n  Conversely, <CodeLiteral>RIGHT OUTER JOIN</CodeLiteral> returns all the joined rows, plus one row for each unmatched right-hand row (extended with nulls on the left). This is just a notational convenience, since you could convert it to a <CodeLiteral>LEFT OUTER JOIN</CodeLiteral> by switching the left and right tables.\n  <CodeLiteral>FULL OUTER JOIN</CodeLiteral> returns all the joined rows, plus one row for each unmatched left-hand row (extended with nulls on the right), plus one row for each unmatched right-hand row (extended with nulls on the left).",
        "detail": "[DESCRIPTION]: The <CodeLiteral>LATERAL</CodeLiteral> key word can precede a sub-SELECT <CodeLiteral>FROM</CodeLiteral> item. This allows the sub-SELECT to refer to columns of <CodeLiteral>FROM</CodeLiteral> items that appear before it in the <CodeLiteral>FROM</CodeLiteral> list. (Without <CodeLiteral>LATERAL</CodeLiteral>, each sub-SELECT is evaluated independently and so cannot cross-reference any other <CodeLiteral>FROM</CodeLiteral> item.)\n  <CodeLiteral>LATERAL</CodeLiteral> can also precede a function-call <CodeLiteral>FROM</CodeLiteral> item, but in this case it is a noise word, because the function expression can refer to earlier <CodeLiteral>FROM</CodeLiteral> items in any case.\n  A <CodeLiteral>LATERAL</CodeLiteral> item can appear at top level in the <CodeLiteral>FROM</CodeLiteral> list, or within a <CodeLiteral>JOIN</CodeLiteral> tree. In the latter case it can also refer to any items that are on the left-hand side of a <CodeLiteral>JOIN</CodeLiteral> that it is on the right-hand side of.\n  When a <CodeLiteral>FROM</CodeLiteral> item contains <CodeLiteral>LATERAL</CodeLiteral> cross-references, evaluation proceeds as follows: for each row of the <CodeLiteral>FROM</CodeLiteral> item providing the cross-referenced column(s), or set of rows of multiple <CodeLiteral>FROM</CodeLiteral> items providing the columns, the <CodeLiteral>LATERAL</CodeLiteral> item is evaluated using that row or row set's values of the columns. The resulting row(s) are joined as usual with the rows they were computed from. This is repeated for each row or set of rows from the column source table(s).\n  The column source table(s) must be <CodeLiteral>INNER</CodeLiteral> or <CodeLiteral>LEFT</CodeLiteral> joined to the <CodeLiteral>LATERAL</CodeLiteral> item, else there would not be a well-defined set of rows from which to compute each set of rows for the <CodeLiteral>LATERAL</CodeLiteral> item. Thus, although a construct such as <CodeLiteral>X RIGHT JOIN LATERAL Y</CodeLiteral> is syntactically valid, it is not actually allowed for Y to reference X. Join type can be one of <CodeLiteral>[ INNER ] JOIN</CodeLiteral>\n   <CodeLiteral>LEFT [ OUTER ] JOIN</CodeLiteral>\n  <CodeLiteral>RIGHT [ OUTER ] JOIN</CodeLiteral>\n   <CodeLiteral>FULL [ OUTER ] JOIN</CodeLiteral>\n  For the <CodeLiteral>INNER</CodeLiteral> and <CodeLiteral>OUTER</CodeLiteral> join types, a join condition must be specified, namely exactly one of <CodeLiteral>ON join_condition</CodeLiteral>, <CodeLiteral>USING (join_column [, ...])</CodeLiteral>, or <CodeLiteral>NATURAL</CodeLiteral>. See below for the meaning.\n  A <CodeLiteral>JOIN</CodeLiteral> clause combines two <CodeLiteral>FROM</CodeLiteral> items, which for convenience we will refer to as \u201ctables\u201d, though in reality they can be any type of <CodeLiteral>FROM</CodeLiteral> item. Use parentheses if necessary to determine the order of nesting. In the absence of parentheses, <CodeLiteral>JOIN</CodeLiteral>s nest left-to-right. In any case <CodeLiteral>JOIN</CodeLiteral> binds more tightly than the commas separating <CodeLiteral>FROM</CodeLiteral>-list items. All the <CodeLiteral>JOIN</CodeLiteral> options are just a notational convenience, since they do nothing you couldn't do with plain <CodeLiteral>FROM</CodeLiteral> and <CodeLiteral>WHERE</CodeLiteral>.\n  <CodeLiteral>LEFT OUTER JOIN</CodeLiteral> returns all rows in the qualified Cartesian product (i.e., all combined rows that pass its join condition), plus one copy of each row in the left-hand table for which there was no right-hand row that passed the join condition. This left-hand row is extended to the full width of the joined table by inserting null values for the right-hand columns. Note that only the <CodeLiteral>JOIN</CodeLiteral> clause's own condition is considered while deciding which rows have matches. Outer conditions are applied afterwards.\n  Conversely, <CodeLiteral>RIGHT OUTER JOIN</CodeLiteral> returns all the joined rows, plus one row for each unmatched right-hand row (extended with nulls on the left). This is just a notational convenience, since you could convert it to a <CodeLiteral>LEFT OUTER JOIN</CodeLiteral> by switching the left and right tables.\n  <CodeLiteral>FULL OUTER JOIN</CodeLiteral> returns all the joined rows, plus one row for each unmatched left-hand row (extended with nulls on the right), plus one row for each unmatched right-hand row (extended with nulls on the left).<sep>[DEMO]: SELECT * FROM employees e INNER JOIN departments d ON e.department_id = d.id;",
        "example": [
            "SELECT * FROM employees e INNER JOIN departments d ON e.department_id = d.id;"
        ],
        "link": []
    },
    {
        "type": "keyword",
        "keyword": "from_item LEFT OUTER JOIN from_item ON join_condition",
        "tree": " (table_ref (join_type LEFT OUTER) JOIN (join_qual ON))",
        "description": "The <CodeLiteral>LATERAL</CodeLiteral> key word can precede a sub-SELECT <CodeLiteral>FROM</CodeLiteral> item. This allows the sub-SELECT to refer to columns of <CodeLiteral>FROM</CodeLiteral> items that appear before it in the <CodeLiteral>FROM</CodeLiteral> list. (Without <CodeLiteral>LATERAL</CodeLiteral>, each sub-SELECT is evaluated independently and so cannot cross-reference any other <CodeLiteral>FROM</CodeLiteral> item.)\n  <CodeLiteral>LATERAL</CodeLiteral> can also precede a function-call <CodeLiteral>FROM</CodeLiteral> item, but in this case it is a noise word, because the function expression can refer to earlier <CodeLiteral>FROM</CodeLiteral> items in any case.\n  A <CodeLiteral>LATERAL</CodeLiteral> item can appear at top level in the <CodeLiteral>FROM</CodeLiteral> list, or within a <CodeLiteral>JOIN</CodeLiteral> tree. In the latter case it can also refer to any items that are on the left-hand side of a <CodeLiteral>JOIN</CodeLiteral> that it is on the right-hand side of.\n  When a <CodeLiteral>FROM</CodeLiteral> item contains <CodeLiteral>LATERAL</CodeLiteral> cross-references, evaluation proceeds as follows: for each row of the <CodeLiteral>FROM</CodeLiteral> item providing the cross-referenced column(s), or set of rows of multiple <CodeLiteral>FROM</CodeLiteral> items providing the columns, the <CodeLiteral>LATERAL</CodeLiteral> item is evaluated using that row or row set's values of the columns. The resulting row(s) are joined as usual with the rows they were computed from. This is repeated for each row or set of rows from the column source table(s).\n  The column source table(s) must be <CodeLiteral>INNER</CodeLiteral> or <CodeLiteral>LEFT</CodeLiteral> joined to the <CodeLiteral>LATERAL</CodeLiteral> item, else there would not be a well-defined set of rows from which to compute each set of rows for the <CodeLiteral>LATERAL</CodeLiteral> item. Thus, although a construct such as <CodeLiteral>X RIGHT JOIN LATERAL Y</CodeLiteral> is syntactically valid, it is not actually allowed for Y to reference X. Join type can be one of <CodeLiteral>[ INNER ] JOIN</CodeLiteral>\n   <CodeLiteral>LEFT [ OUTER ] JOIN</CodeLiteral>\n  <CodeLiteral>RIGHT [ OUTER ] JOIN</CodeLiteral>\n   <CodeLiteral>FULL [ OUTER ] JOIN</CodeLiteral>\n  For the <CodeLiteral>INNER</CodeLiteral> and <CodeLiteral>OUTER</CodeLiteral> join types, a join condition must be specified, namely exactly one of <CodeLiteral>ON join_condition</CodeLiteral>, <CodeLiteral>USING (join_column [, ...])</CodeLiteral>, or <CodeLiteral>NATURAL</CodeLiteral>. See below for the meaning.\n  A <CodeLiteral>JOIN</CodeLiteral> clause combines two <CodeLiteral>FROM</CodeLiteral> items, which for convenience we will refer to as \u201ctables\u201d, though in reality they can be any type of <CodeLiteral>FROM</CodeLiteral> item. Use parentheses if necessary to determine the order of nesting. In the absence of parentheses, <CodeLiteral>JOIN</CodeLiteral>s nest left-to-right. In any case <CodeLiteral>JOIN</CodeLiteral> binds more tightly than the commas separating <CodeLiteral>FROM</CodeLiteral>-list items. All the <CodeLiteral>JOIN</CodeLiteral> options are just a notational convenience, since they do nothing you couldn't do with plain <CodeLiteral>FROM</CodeLiteral> and <CodeLiteral>WHERE</CodeLiteral>.\n  <CodeLiteral>LEFT OUTER JOIN</CodeLiteral> returns all rows in the qualified Cartesian product (i.e., all combined rows that pass its join condition), plus one copy of each row in the left-hand table for which there was no right-hand row that passed the join condition. This left-hand row is extended to the full width of the joined table by inserting null values for the right-hand columns. Note that only the <CodeLiteral>JOIN</CodeLiteral> clause's own condition is considered while deciding which rows have matches. Outer conditions are applied afterwards.\n  Conversely, <CodeLiteral>RIGHT OUTER JOIN</CodeLiteral> returns all the joined rows, plus one row for each unmatched right-hand row (extended with nulls on the left). This is just a notational convenience, since you could convert it to a <CodeLiteral>LEFT OUTER JOIN</CodeLiteral> by switching the left and right tables.\n  <CodeLiteral>FULL OUTER JOIN</CodeLiteral> returns all the joined rows, plus one row for each unmatched left-hand row (extended with nulls on the right), plus one row for each unmatched right-hand row (extended with nulls on the left).",
        "detail": "[DESCRIPTION]: The <CodeLiteral>LATERAL</CodeLiteral> key word can precede a sub-SELECT <CodeLiteral>FROM</CodeLiteral> item. This allows the sub-SELECT to refer to columns of <CodeLiteral>FROM</CodeLiteral> items that appear before it in the <CodeLiteral>FROM</CodeLiteral> list. (Without <CodeLiteral>LATERAL</CodeLiteral>, each sub-SELECT is evaluated independently and so cannot cross-reference any other <CodeLiteral>FROM</CodeLiteral> item.)\n  <CodeLiteral>LATERAL</CodeLiteral> can also precede a function-call <CodeLiteral>FROM</CodeLiteral> item, but in this case it is a noise word, because the function expression can refer to earlier <CodeLiteral>FROM</CodeLiteral> items in any case.\n  A <CodeLiteral>LATERAL</CodeLiteral> item can appear at top level in the <CodeLiteral>FROM</CodeLiteral> list, or within a <CodeLiteral>JOIN</CodeLiteral> tree. In the latter case it can also refer to any items that are on the left-hand side of a <CodeLiteral>JOIN</CodeLiteral> that it is on the right-hand side of.\n  When a <CodeLiteral>FROM</CodeLiteral> item contains <CodeLiteral>LATERAL</CodeLiteral> cross-references, evaluation proceeds as follows: for each row of the <CodeLiteral>FROM</CodeLiteral> item providing the cross-referenced column(s), or set of rows of multiple <CodeLiteral>FROM</CodeLiteral> items providing the columns, the <CodeLiteral>LATERAL</CodeLiteral> item is evaluated using that row or row set's values of the columns. The resulting row(s) are joined as usual with the rows they were computed from. This is repeated for each row or set of rows from the column source table(s).\n  The column source table(s) must be <CodeLiteral>INNER</CodeLiteral> or <CodeLiteral>LEFT</CodeLiteral> joined to the <CodeLiteral>LATERAL</CodeLiteral> item, else there would not be a well-defined set of rows from which to compute each set of rows for the <CodeLiteral>LATERAL</CodeLiteral> item. Thus, although a construct such as <CodeLiteral>X RIGHT JOIN LATERAL Y</CodeLiteral> is syntactically valid, it is not actually allowed for Y to reference X. Join type can be one of <CodeLiteral>[ INNER ] JOIN</CodeLiteral>\n   <CodeLiteral>LEFT [ OUTER ] JOIN</CodeLiteral>\n  <CodeLiteral>RIGHT [ OUTER ] JOIN</CodeLiteral>\n   <CodeLiteral>FULL [ OUTER ] JOIN</CodeLiteral>\n  For the <CodeLiteral>INNER</CodeLiteral> and <CodeLiteral>OUTER</CodeLiteral> join types, a join condition must be specified, namely exactly one of <CodeLiteral>ON join_condition</CodeLiteral>, <CodeLiteral>USING (join_column [, ...])</CodeLiteral>, or <CodeLiteral>NATURAL</CodeLiteral>. See below for the meaning.\n  A <CodeLiteral>JOIN</CodeLiteral> clause combines two <CodeLiteral>FROM</CodeLiteral> items, which for convenience we will refer to as \u201ctables\u201d, though in reality they can be any type of <CodeLiteral>FROM</CodeLiteral> item. Use parentheses if necessary to determine the order of nesting. In the absence of parentheses, <CodeLiteral>JOIN</CodeLiteral>s nest left-to-right. In any case <CodeLiteral>JOIN</CodeLiteral> binds more tightly than the commas separating <CodeLiteral>FROM</CodeLiteral>-list items. All the <CodeLiteral>JOIN</CodeLiteral> options are just a notational convenience, since they do nothing you couldn't do with plain <CodeLiteral>FROM</CodeLiteral> and <CodeLiteral>WHERE</CodeLiteral>.\n  <CodeLiteral>LEFT OUTER JOIN</CodeLiteral> returns all rows in the qualified Cartesian product (i.e., all combined rows that pass its join condition), plus one copy of each row in the left-hand table for which there was no right-hand row that passed the join condition. This left-hand row is extended to the full width of the joined table by inserting null values for the right-hand columns. Note that only the <CodeLiteral>JOIN</CodeLiteral> clause's own condition is considered while deciding which rows have matches. Outer conditions are applied afterwards.\n  Conversely, <CodeLiteral>RIGHT OUTER JOIN</CodeLiteral> returns all the joined rows, plus one row for each unmatched right-hand row (extended with nulls on the left). This is just a notational convenience, since you could convert it to a <CodeLiteral>LEFT OUTER JOIN</CodeLiteral> by switching the left and right tables.\n  <CodeLiteral>FULL OUTER JOIN</CodeLiteral> returns all the joined rows, plus one row for each unmatched left-hand row (extended with nulls on the right), plus one row for each unmatched right-hand row (extended with nulls on the left).<sep>[DEMO]: SELECT a.id, b.name FROM users a LEFT OUTER JOIN orders b ON a.id = b.user_id",
        "example": [
            "SELECT a.id, b.name FROM users a LEFT OUTER JOIN orders b ON a.id = b.user_id"
        ],
        "link": []
    },
    {
        "type": "keyword",
        "keyword": "from_item LEFT JOIN from_item ON join_condition",
        "tree": " (table_ref (join_type LEFT) JOIN (join_qual ON))",
        "description": "The <CodeLiteral>LATERAL</CodeLiteral> key word can precede a sub-SELECT <CodeLiteral>FROM</CodeLiteral> item. This allows the sub-SELECT to refer to columns of <CodeLiteral>FROM</CodeLiteral> items that appear before it in the <CodeLiteral>FROM</CodeLiteral> list. (Without <CodeLiteral>LATERAL</CodeLiteral>, each sub-SELECT is evaluated independently and so cannot cross-reference any other <CodeLiteral>FROM</CodeLiteral> item.)\n  <CodeLiteral>LATERAL</CodeLiteral> can also precede a function-call <CodeLiteral>FROM</CodeLiteral> item, but in this case it is a noise word, because the function expression can refer to earlier <CodeLiteral>FROM</CodeLiteral> items in any case.\n  A <CodeLiteral>LATERAL</CodeLiteral> item can appear at top level in the <CodeLiteral>FROM</CodeLiteral> list, or within a <CodeLiteral>JOIN</CodeLiteral> tree. In the latter case it can also refer to any items that are on the left-hand side of a <CodeLiteral>JOIN</CodeLiteral> that it is on the right-hand side of.\n  When a <CodeLiteral>FROM</CodeLiteral> item contains <CodeLiteral>LATERAL</CodeLiteral> cross-references, evaluation proceeds as follows: for each row of the <CodeLiteral>FROM</CodeLiteral> item providing the cross-referenced column(s), or set of rows of multiple <CodeLiteral>FROM</CodeLiteral> items providing the columns, the <CodeLiteral>LATERAL</CodeLiteral> item is evaluated using that row or row set's values of the columns. The resulting row(s) are joined as usual with the rows they were computed from. This is repeated for each row or set of rows from the column source table(s).\n  The column source table(s) must be <CodeLiteral>INNER</CodeLiteral> or <CodeLiteral>LEFT</CodeLiteral> joined to the <CodeLiteral>LATERAL</CodeLiteral> item, else there would not be a well-defined set of rows from which to compute each set of rows for the <CodeLiteral>LATERAL</CodeLiteral> item. Thus, although a construct such as <CodeLiteral>X RIGHT JOIN LATERAL Y</CodeLiteral> is syntactically valid, it is not actually allowed for Y to reference X. Join type can be one of <CodeLiteral>[ INNER ] JOIN</CodeLiteral>\n   <CodeLiteral>LEFT [ OUTER ] JOIN</CodeLiteral>\n  <CodeLiteral>RIGHT [ OUTER ] JOIN</CodeLiteral>\n   <CodeLiteral>FULL [ OUTER ] JOIN</CodeLiteral>\n  For the <CodeLiteral>INNER</CodeLiteral> and <CodeLiteral>OUTER</CodeLiteral> join types, a join condition must be specified, namely exactly one of <CodeLiteral>ON join_condition</CodeLiteral>, <CodeLiteral>USING (join_column [, ...])</CodeLiteral>, or <CodeLiteral>NATURAL</CodeLiteral>. See below for the meaning.\n  A <CodeLiteral>JOIN</CodeLiteral> clause combines two <CodeLiteral>FROM</CodeLiteral> items, which for convenience we will refer to as \u201ctables\u201d, though in reality they can be any type of <CodeLiteral>FROM</CodeLiteral> item. Use parentheses if necessary to determine the order of nesting. In the absence of parentheses, <CodeLiteral>JOIN</CodeLiteral>s nest left-to-right. In any case <CodeLiteral>JOIN</CodeLiteral> binds more tightly than the commas separating <CodeLiteral>FROM</CodeLiteral>-list items. All the <CodeLiteral>JOIN</CodeLiteral> options are just a notational convenience, since they do nothing you couldn't do with plain <CodeLiteral>FROM</CodeLiteral> and <CodeLiteral>WHERE</CodeLiteral>.\n  <CodeLiteral>LEFT OUTER JOIN</CodeLiteral> returns all rows in the qualified Cartesian product (i.e., all combined rows that pass its join condition), plus one copy of each row in the left-hand table for which there was no right-hand row that passed the join condition. This left-hand row is extended to the full width of the joined table by inserting null values for the right-hand columns. Note that only the <CodeLiteral>JOIN</CodeLiteral> clause's own condition is considered while deciding which rows have matches. Outer conditions are applied afterwards.\n  Conversely, <CodeLiteral>RIGHT OUTER JOIN</CodeLiteral> returns all the joined rows, plus one row for each unmatched right-hand row (extended with nulls on the left). This is just a notational convenience, since you could convert it to a <CodeLiteral>LEFT OUTER JOIN</CodeLiteral> by switching the left and right tables.\n  <CodeLiteral>FULL OUTER JOIN</CodeLiteral> returns all the joined rows, plus one row for each unmatched left-hand row (extended with nulls on the right), plus one row for each unmatched right-hand row (extended with nulls on the left).",
        "detail": "[DESCRIPTION]: The <CodeLiteral>LATERAL</CodeLiteral> key word can precede a sub-SELECT <CodeLiteral>FROM</CodeLiteral> item. This allows the sub-SELECT to refer to columns of <CodeLiteral>FROM</CodeLiteral> items that appear before it in the <CodeLiteral>FROM</CodeLiteral> list. (Without <CodeLiteral>LATERAL</CodeLiteral>, each sub-SELECT is evaluated independently and so cannot cross-reference any other <CodeLiteral>FROM</CodeLiteral> item.)\n  <CodeLiteral>LATERAL</CodeLiteral> can also precede a function-call <CodeLiteral>FROM</CodeLiteral> item, but in this case it is a noise word, because the function expression can refer to earlier <CodeLiteral>FROM</CodeLiteral> items in any case.\n  A <CodeLiteral>LATERAL</CodeLiteral> item can appear at top level in the <CodeLiteral>FROM</CodeLiteral> list, or within a <CodeLiteral>JOIN</CodeLiteral> tree. In the latter case it can also refer to any items that are on the left-hand side of a <CodeLiteral>JOIN</CodeLiteral> that it is on the right-hand side of.\n  When a <CodeLiteral>FROM</CodeLiteral> item contains <CodeLiteral>LATERAL</CodeLiteral> cross-references, evaluation proceeds as follows: for each row of the <CodeLiteral>FROM</CodeLiteral> item providing the cross-referenced column(s), or set of rows of multiple <CodeLiteral>FROM</CodeLiteral> items providing the columns, the <CodeLiteral>LATERAL</CodeLiteral> item is evaluated using that row or row set's values of the columns. The resulting row(s) are joined as usual with the rows they were computed from. This is repeated for each row or set of rows from the column source table(s).\n  The column source table(s) must be <CodeLiteral>INNER</CodeLiteral> or <CodeLiteral>LEFT</CodeLiteral> joined to the <CodeLiteral>LATERAL</CodeLiteral> item, else there would not be a well-defined set of rows from which to compute each set of rows for the <CodeLiteral>LATERAL</CodeLiteral> item. Thus, although a construct such as <CodeLiteral>X RIGHT JOIN LATERAL Y</CodeLiteral> is syntactically valid, it is not actually allowed for Y to reference X. Join type can be one of <CodeLiteral>[ INNER ] JOIN</CodeLiteral>\n   <CodeLiteral>LEFT [ OUTER ] JOIN</CodeLiteral>\n  <CodeLiteral>RIGHT [ OUTER ] JOIN</CodeLiteral>\n   <CodeLiteral>FULL [ OUTER ] JOIN</CodeLiteral>\n  For the <CodeLiteral>INNER</CodeLiteral> and <CodeLiteral>OUTER</CodeLiteral> join types, a join condition must be specified, namely exactly one of <CodeLiteral>ON join_condition</CodeLiteral>, <CodeLiteral>USING (join_column [, ...])</CodeLiteral>, or <CodeLiteral>NATURAL</CodeLiteral>. See below for the meaning.\n  A <CodeLiteral>JOIN</CodeLiteral> clause combines two <CodeLiteral>FROM</CodeLiteral> items, which for convenience we will refer to as \u201ctables\u201d, though in reality they can be any type of <CodeLiteral>FROM</CodeLiteral> item. Use parentheses if necessary to determine the order of nesting. In the absence of parentheses, <CodeLiteral>JOIN</CodeLiteral>s nest left-to-right. In any case <CodeLiteral>JOIN</CodeLiteral> binds more tightly than the commas separating <CodeLiteral>FROM</CodeLiteral>-list items. All the <CodeLiteral>JOIN</CodeLiteral> options are just a notational convenience, since they do nothing you couldn't do with plain <CodeLiteral>FROM</CodeLiteral> and <CodeLiteral>WHERE</CodeLiteral>.\n  <CodeLiteral>LEFT OUTER JOIN</CodeLiteral> returns all rows in the qualified Cartesian product (i.e., all combined rows that pass its join condition), plus one copy of each row in the left-hand table for which there was no right-hand row that passed the join condition. This left-hand row is extended to the full width of the joined table by inserting null values for the right-hand columns. Note that only the <CodeLiteral>JOIN</CodeLiteral> clause's own condition is considered while deciding which rows have matches. Outer conditions are applied afterwards.\n  Conversely, <CodeLiteral>RIGHT OUTER JOIN</CodeLiteral> returns all the joined rows, plus one row for each unmatched right-hand row (extended with nulls on the left). This is just a notational convenience, since you could convert it to a <CodeLiteral>LEFT OUTER JOIN</CodeLiteral> by switching the left and right tables.\n  <CodeLiteral>FULL OUTER JOIN</CodeLiteral> returns all the joined rows, plus one row for each unmatched left-hand row (extended with nulls on the right), plus one row for each unmatched right-hand row (extended with nulls on the left).<sep>[DEMO]: SELECT e.employee_name, d.department_name\nFROM employees e\nLEFT JOIN departments d ON e.department_id = d.id;",
        "example": [
            "SELECT e.employee_name, d.department_name\nFROM employees e\nLEFT JOIN departments d ON e.department_id = d.id;"
        ],
        "link": []
    },
    {
        "type": "keyword",
        "keyword": "from_item RIGHT OUTER JOIN from_item ON join_condition",
        "tree": " (table_ref (join_type RIGHT OUTER) JOIN (join_qual ON))",
        "description": "The <CodeLiteral>LATERAL</CodeLiteral> key word can precede a sub-SELECT <CodeLiteral>FROM</CodeLiteral> item. This allows the sub-SELECT to refer to columns of <CodeLiteral>FROM</CodeLiteral> items that appear before it in the <CodeLiteral>FROM</CodeLiteral> list. (Without <CodeLiteral>LATERAL</CodeLiteral>, each sub-SELECT is evaluated independently and so cannot cross-reference any other <CodeLiteral>FROM</CodeLiteral> item.)\n  <CodeLiteral>LATERAL</CodeLiteral> can also precede a function-call <CodeLiteral>FROM</CodeLiteral> item, but in this case it is a noise word, because the function expression can refer to earlier <CodeLiteral>FROM</CodeLiteral> items in any case.\n  A <CodeLiteral>LATERAL</CodeLiteral> item can appear at top level in the <CodeLiteral>FROM</CodeLiteral> list, or within a <CodeLiteral>JOIN</CodeLiteral> tree. In the latter case it can also refer to any items that are on the left-hand side of a <CodeLiteral>JOIN</CodeLiteral> that it is on the right-hand side of.\n  When a <CodeLiteral>FROM</CodeLiteral> item contains <CodeLiteral>LATERAL</CodeLiteral> cross-references, evaluation proceeds as follows: for each row of the <CodeLiteral>FROM</CodeLiteral> item providing the cross-referenced column(s), or set of rows of multiple <CodeLiteral>FROM</CodeLiteral> items providing the columns, the <CodeLiteral>LATERAL</CodeLiteral> item is evaluated using that row or row set's values of the columns. The resulting row(s) are joined as usual with the rows they were computed from. This is repeated for each row or set of rows from the column source table(s).\n  The column source table(s) must be <CodeLiteral>INNER</CodeLiteral> or <CodeLiteral>LEFT</CodeLiteral> joined to the <CodeLiteral>LATERAL</CodeLiteral> item, else there would not be a well-defined set of rows from which to compute each set of rows for the <CodeLiteral>LATERAL</CodeLiteral> item. Thus, although a construct such as <CodeLiteral>X RIGHT JOIN LATERAL Y</CodeLiteral> is syntactically valid, it is not actually allowed for Y to reference X. Join type can be one of <CodeLiteral>[ INNER ] JOIN</CodeLiteral>\n   <CodeLiteral>LEFT [ OUTER ] JOIN</CodeLiteral>\n  <CodeLiteral>RIGHT [ OUTER ] JOIN</CodeLiteral>\n   <CodeLiteral>FULL [ OUTER ] JOIN</CodeLiteral>\n  For the <CodeLiteral>INNER</CodeLiteral> and <CodeLiteral>OUTER</CodeLiteral> join types, a join condition must be specified, namely exactly one of <CodeLiteral>ON join_condition</CodeLiteral>, <CodeLiteral>USING (join_column [, ...])</CodeLiteral>, or <CodeLiteral>NATURAL</CodeLiteral>. See below for the meaning.\n  A <CodeLiteral>JOIN</CodeLiteral> clause combines two <CodeLiteral>FROM</CodeLiteral> items, which for convenience we will refer to as \u201ctables\u201d, though in reality they can be any type of <CodeLiteral>FROM</CodeLiteral> item. Use parentheses if necessary to determine the order of nesting. In the absence of parentheses, <CodeLiteral>JOIN</CodeLiteral>s nest left-to-right. In any case <CodeLiteral>JOIN</CodeLiteral> binds more tightly than the commas separating <CodeLiteral>FROM</CodeLiteral>-list items. All the <CodeLiteral>JOIN</CodeLiteral> options are just a notational convenience, since they do nothing you couldn't do with plain <CodeLiteral>FROM</CodeLiteral> and <CodeLiteral>WHERE</CodeLiteral>.\n  <CodeLiteral>LEFT OUTER JOIN</CodeLiteral> returns all rows in the qualified Cartesian product (i.e., all combined rows that pass its join condition), plus one copy of each row in the left-hand table for which there was no right-hand row that passed the join condition. This left-hand row is extended to the full width of the joined table by inserting null values for the right-hand columns. Note that only the <CodeLiteral>JOIN</CodeLiteral> clause's own condition is considered while deciding which rows have matches. Outer conditions are applied afterwards.\n  Conversely, <CodeLiteral>RIGHT OUTER JOIN</CodeLiteral> returns all the joined rows, plus one row for each unmatched right-hand row (extended with nulls on the left). This is just a notational convenience, since you could convert it to a <CodeLiteral>LEFT OUTER JOIN</CodeLiteral> by switching the left and right tables.\n  <CodeLiteral>FULL OUTER JOIN</CodeLiteral> returns all the joined rows, plus one row for each unmatched left-hand row (extended with nulls on the right), plus one row for each unmatched right-hand row (extended with nulls on the left).",
        "detail": "[DESCRIPTION]: The <CodeLiteral>LATERAL</CodeLiteral> key word can precede a sub-SELECT <CodeLiteral>FROM</CodeLiteral> item. This allows the sub-SELECT to refer to columns of <CodeLiteral>FROM</CodeLiteral> items that appear before it in the <CodeLiteral>FROM</CodeLiteral> list. (Without <CodeLiteral>LATERAL</CodeLiteral>, each sub-SELECT is evaluated independently and so cannot cross-reference any other <CodeLiteral>FROM</CodeLiteral> item.)\n  <CodeLiteral>LATERAL</CodeLiteral> can also precede a function-call <CodeLiteral>FROM</CodeLiteral> item, but in this case it is a noise word, because the function expression can refer to earlier <CodeLiteral>FROM</CodeLiteral> items in any case.\n  A <CodeLiteral>LATERAL</CodeLiteral> item can appear at top level in the <CodeLiteral>FROM</CodeLiteral> list, or within a <CodeLiteral>JOIN</CodeLiteral> tree. In the latter case it can also refer to any items that are on the left-hand side of a <CodeLiteral>JOIN</CodeLiteral> that it is on the right-hand side of.\n  When a <CodeLiteral>FROM</CodeLiteral> item contains <CodeLiteral>LATERAL</CodeLiteral> cross-references, evaluation proceeds as follows: for each row of the <CodeLiteral>FROM</CodeLiteral> item providing the cross-referenced column(s), or set of rows of multiple <CodeLiteral>FROM</CodeLiteral> items providing the columns, the <CodeLiteral>LATERAL</CodeLiteral> item is evaluated using that row or row set's values of the columns. The resulting row(s) are joined as usual with the rows they were computed from. This is repeated for each row or set of rows from the column source table(s).\n  The column source table(s) must be <CodeLiteral>INNER</CodeLiteral> or <CodeLiteral>LEFT</CodeLiteral> joined to the <CodeLiteral>LATERAL</CodeLiteral> item, else there would not be a well-defined set of rows from which to compute each set of rows for the <CodeLiteral>LATERAL</CodeLiteral> item. Thus, although a construct such as <CodeLiteral>X RIGHT JOIN LATERAL Y</CodeLiteral> is syntactically valid, it is not actually allowed for Y to reference X. Join type can be one of <CodeLiteral>[ INNER ] JOIN</CodeLiteral>\n   <CodeLiteral>LEFT [ OUTER ] JOIN</CodeLiteral>\n  <CodeLiteral>RIGHT [ OUTER ] JOIN</CodeLiteral>\n   <CodeLiteral>FULL [ OUTER ] JOIN</CodeLiteral>\n  For the <CodeLiteral>INNER</CodeLiteral> and <CodeLiteral>OUTER</CodeLiteral> join types, a join condition must be specified, namely exactly one of <CodeLiteral>ON join_condition</CodeLiteral>, <CodeLiteral>USING (join_column [, ...])</CodeLiteral>, or <CodeLiteral>NATURAL</CodeLiteral>. See below for the meaning.\n  A <CodeLiteral>JOIN</CodeLiteral> clause combines two <CodeLiteral>FROM</CodeLiteral> items, which for convenience we will refer to as \u201ctables\u201d, though in reality they can be any type of <CodeLiteral>FROM</CodeLiteral> item. Use parentheses if necessary to determine the order of nesting. In the absence of parentheses, <CodeLiteral>JOIN</CodeLiteral>s nest left-to-right. In any case <CodeLiteral>JOIN</CodeLiteral> binds more tightly than the commas separating <CodeLiteral>FROM</CodeLiteral>-list items. All the <CodeLiteral>JOIN</CodeLiteral> options are just a notational convenience, since they do nothing you couldn't do with plain <CodeLiteral>FROM</CodeLiteral> and <CodeLiteral>WHERE</CodeLiteral>.\n  <CodeLiteral>LEFT OUTER JOIN</CodeLiteral> returns all rows in the qualified Cartesian product (i.e., all combined rows that pass its join condition), plus one copy of each row in the left-hand table for which there was no right-hand row that passed the join condition. This left-hand row is extended to the full width of the joined table by inserting null values for the right-hand columns. Note that only the <CodeLiteral>JOIN</CodeLiteral> clause's own condition is considered while deciding which rows have matches. Outer conditions are applied afterwards.\n  Conversely, <CodeLiteral>RIGHT OUTER JOIN</CodeLiteral> returns all the joined rows, plus one row for each unmatched right-hand row (extended with nulls on the left). This is just a notational convenience, since you could convert it to a <CodeLiteral>LEFT OUTER JOIN</CodeLiteral> by switching the left and right tables.\n  <CodeLiteral>FULL OUTER JOIN</CodeLiteral> returns all the joined rows, plus one row for each unmatched left-hand row (extended with nulls on the right), plus one row for each unmatched right-hand row (extended with nulls on the left).<sep>[DEMO]: SELECT * FROM employees RIGHT OUTER JOIN departments ON employees.department_id = departments.id;",
        "example": [
            "SELECT * FROM employees RIGHT OUTER JOIN departments ON employees.department_id = departments.id;"
        ],
        "link": []
    },
    {
        "type": "keyword",
        "keyword": "from_item RIGHT JOIN from_item ON join_condition",
        "tree": " (table_ref (join_type RIGHT) JOIN (join_qual ON))",
        "description": "The <CodeLiteral>LATERAL</CodeLiteral> key word can precede a sub-SELECT <CodeLiteral>FROM</CodeLiteral> item. This allows the sub-SELECT to refer to columns of <CodeLiteral>FROM</CodeLiteral> items that appear before it in the <CodeLiteral>FROM</CodeLiteral> list. (Without <CodeLiteral>LATERAL</CodeLiteral>, each sub-SELECT is evaluated independently and so cannot cross-reference any other <CodeLiteral>FROM</CodeLiteral> item.)\n  <CodeLiteral>LATERAL</CodeLiteral> can also precede a function-call <CodeLiteral>FROM</CodeLiteral> item, but in this case it is a noise word, because the function expression can refer to earlier <CodeLiteral>FROM</CodeLiteral> items in any case.\n  A <CodeLiteral>LATERAL</CodeLiteral> item can appear at top level in the <CodeLiteral>FROM</CodeLiteral> list, or within a <CodeLiteral>JOIN</CodeLiteral> tree. In the latter case it can also refer to any items that are on the left-hand side of a <CodeLiteral>JOIN</CodeLiteral> that it is on the right-hand side of.\n  When a <CodeLiteral>FROM</CodeLiteral> item contains <CodeLiteral>LATERAL</CodeLiteral> cross-references, evaluation proceeds as follows: for each row of the <CodeLiteral>FROM</CodeLiteral> item providing the cross-referenced column(s), or set of rows of multiple <CodeLiteral>FROM</CodeLiteral> items providing the columns, the <CodeLiteral>LATERAL</CodeLiteral> item is evaluated using that row or row set's values of the columns. The resulting row(s) are joined as usual with the rows they were computed from. This is repeated for each row or set of rows from the column source table(s).\n  The column source table(s) must be <CodeLiteral>INNER</CodeLiteral> or <CodeLiteral>LEFT</CodeLiteral> joined to the <CodeLiteral>LATERAL</CodeLiteral> item, else there would not be a well-defined set of rows from which to compute each set of rows for the <CodeLiteral>LATERAL</CodeLiteral> item. Thus, although a construct such as <CodeLiteral>X RIGHT JOIN LATERAL Y</CodeLiteral> is syntactically valid, it is not actually allowed for Y to reference X. Join type can be one of <CodeLiteral>[ INNER ] JOIN</CodeLiteral>\n   <CodeLiteral>LEFT [ OUTER ] JOIN</CodeLiteral>\n  <CodeLiteral>RIGHT [ OUTER ] JOIN</CodeLiteral>\n   <CodeLiteral>FULL [ OUTER ] JOIN</CodeLiteral>\n  For the <CodeLiteral>INNER</CodeLiteral> and <CodeLiteral>OUTER</CodeLiteral> join types, a join condition must be specified, namely exactly one of <CodeLiteral>ON join_condition</CodeLiteral>, <CodeLiteral>USING (join_column [, ...])</CodeLiteral>, or <CodeLiteral>NATURAL</CodeLiteral>. See below for the meaning.\n  A <CodeLiteral>JOIN</CodeLiteral> clause combines two <CodeLiteral>FROM</CodeLiteral> items, which for convenience we will refer to as \u201ctables\u201d, though in reality they can be any type of <CodeLiteral>FROM</CodeLiteral> item. Use parentheses if necessary to determine the order of nesting. In the absence of parentheses, <CodeLiteral>JOIN</CodeLiteral>s nest left-to-right. In any case <CodeLiteral>JOIN</CodeLiteral> binds more tightly than the commas separating <CodeLiteral>FROM</CodeLiteral>-list items. All the <CodeLiteral>JOIN</CodeLiteral> options are just a notational convenience, since they do nothing you couldn't do with plain <CodeLiteral>FROM</CodeLiteral> and <CodeLiteral>WHERE</CodeLiteral>.\n  <CodeLiteral>LEFT OUTER JOIN</CodeLiteral> returns all rows in the qualified Cartesian product (i.e., all combined rows that pass its join condition), plus one copy of each row in the left-hand table for which there was no right-hand row that passed the join condition. This left-hand row is extended to the full width of the joined table by inserting null values for the right-hand columns. Note that only the <CodeLiteral>JOIN</CodeLiteral> clause's own condition is considered while deciding which rows have matches. Outer conditions are applied afterwards.\n  Conversely, <CodeLiteral>RIGHT OUTER JOIN</CodeLiteral> returns all the joined rows, plus one row for each unmatched right-hand row (extended with nulls on the left). This is just a notational convenience, since you could convert it to a <CodeLiteral>LEFT OUTER JOIN</CodeLiteral> by switching the left and right tables.\n  <CodeLiteral>FULL OUTER JOIN</CodeLiteral> returns all the joined rows, plus one row for each unmatched left-hand row (extended with nulls on the right), plus one row for each unmatched right-hand row (extended with nulls on the left).",
        "detail": "[DESCRIPTION]: The <CodeLiteral>LATERAL</CodeLiteral> key word can precede a sub-SELECT <CodeLiteral>FROM</CodeLiteral> item. This allows the sub-SELECT to refer to columns of <CodeLiteral>FROM</CodeLiteral> items that appear before it in the <CodeLiteral>FROM</CodeLiteral> list. (Without <CodeLiteral>LATERAL</CodeLiteral>, each sub-SELECT is evaluated independently and so cannot cross-reference any other <CodeLiteral>FROM</CodeLiteral> item.)\n  <CodeLiteral>LATERAL</CodeLiteral> can also precede a function-call <CodeLiteral>FROM</CodeLiteral> item, but in this case it is a noise word, because the function expression can refer to earlier <CodeLiteral>FROM</CodeLiteral> items in any case.\n  A <CodeLiteral>LATERAL</CodeLiteral> item can appear at top level in the <CodeLiteral>FROM</CodeLiteral> list, or within a <CodeLiteral>JOIN</CodeLiteral> tree. In the latter case it can also refer to any items that are on the left-hand side of a <CodeLiteral>JOIN</CodeLiteral> that it is on the right-hand side of.\n  When a <CodeLiteral>FROM</CodeLiteral> item contains <CodeLiteral>LATERAL</CodeLiteral> cross-references, evaluation proceeds as follows: for each row of the <CodeLiteral>FROM</CodeLiteral> item providing the cross-referenced column(s), or set of rows of multiple <CodeLiteral>FROM</CodeLiteral> items providing the columns, the <CodeLiteral>LATERAL</CodeLiteral> item is evaluated using that row or row set's values of the columns. The resulting row(s) are joined as usual with the rows they were computed from. This is repeated for each row or set of rows from the column source table(s).\n  The column source table(s) must be <CodeLiteral>INNER</CodeLiteral> or <CodeLiteral>LEFT</CodeLiteral> joined to the <CodeLiteral>LATERAL</CodeLiteral> item, else there would not be a well-defined set of rows from which to compute each set of rows for the <CodeLiteral>LATERAL</CodeLiteral> item. Thus, although a construct such as <CodeLiteral>X RIGHT JOIN LATERAL Y</CodeLiteral> is syntactically valid, it is not actually allowed for Y to reference X. Join type can be one of <CodeLiteral>[ INNER ] JOIN</CodeLiteral>\n   <CodeLiteral>LEFT [ OUTER ] JOIN</CodeLiteral>\n  <CodeLiteral>RIGHT [ OUTER ] JOIN</CodeLiteral>\n   <CodeLiteral>FULL [ OUTER ] JOIN</CodeLiteral>\n  For the <CodeLiteral>INNER</CodeLiteral> and <CodeLiteral>OUTER</CodeLiteral> join types, a join condition must be specified, namely exactly one of <CodeLiteral>ON join_condition</CodeLiteral>, <CodeLiteral>USING (join_column [, ...])</CodeLiteral>, or <CodeLiteral>NATURAL</CodeLiteral>. See below for the meaning.\n  A <CodeLiteral>JOIN</CodeLiteral> clause combines two <CodeLiteral>FROM</CodeLiteral> items, which for convenience we will refer to as \u201ctables\u201d, though in reality they can be any type of <CodeLiteral>FROM</CodeLiteral> item. Use parentheses if necessary to determine the order of nesting. In the absence of parentheses, <CodeLiteral>JOIN</CodeLiteral>s nest left-to-right. In any case <CodeLiteral>JOIN</CodeLiteral> binds more tightly than the commas separating <CodeLiteral>FROM</CodeLiteral>-list items. All the <CodeLiteral>JOIN</CodeLiteral> options are just a notational convenience, since they do nothing you couldn't do with plain <CodeLiteral>FROM</CodeLiteral> and <CodeLiteral>WHERE</CodeLiteral>.\n  <CodeLiteral>LEFT OUTER JOIN</CodeLiteral> returns all rows in the qualified Cartesian product (i.e., all combined rows that pass its join condition), plus one copy of each row in the left-hand table for which there was no right-hand row that passed the join condition. This left-hand row is extended to the full width of the joined table by inserting null values for the right-hand columns. Note that only the <CodeLiteral>JOIN</CodeLiteral> clause's own condition is considered while deciding which rows have matches. Outer conditions are applied afterwards.\n  Conversely, <CodeLiteral>RIGHT OUTER JOIN</CodeLiteral> returns all the joined rows, plus one row for each unmatched right-hand row (extended with nulls on the left). This is just a notational convenience, since you could convert it to a <CodeLiteral>LEFT OUTER JOIN</CodeLiteral> by switching the left and right tables.\n  <CodeLiteral>FULL OUTER JOIN</CodeLiteral> returns all the joined rows, plus one row for each unmatched left-hand row (extended with nulls on the right), plus one row for each unmatched right-hand row (extended with nulls on the left).<sep>[DEMO]: SELECT a.id, b.name FROM employees a RIGHT JOIN departments b ON a.department_id = b.id",
        "example": [
            "SELECT a.id, b.name FROM employees a RIGHT JOIN departments b ON a.department_id = b.id"
        ],
        "link": []
    },
    {
        "type": "keyword",
        "keyword": "from_item FULL OUTER JOIN from_item ON join_condition",
        "tree": " (table_ref (join_type FULL OUTER) JOIN (join_qual ON))",
        "description": "The <CodeLiteral>LATERAL</CodeLiteral> key word can precede a sub-SELECT <CodeLiteral>FROM</CodeLiteral> item. This allows the sub-SELECT to refer to columns of <CodeLiteral>FROM</CodeLiteral> items that appear before it in the <CodeLiteral>FROM</CodeLiteral> list. (Without <CodeLiteral>LATERAL</CodeLiteral>, each sub-SELECT is evaluated independently and so cannot cross-reference any other <CodeLiteral>FROM</CodeLiteral> item.)\n  <CodeLiteral>LATERAL</CodeLiteral> can also precede a function-call <CodeLiteral>FROM</CodeLiteral> item, but in this case it is a noise word, because the function expression can refer to earlier <CodeLiteral>FROM</CodeLiteral> items in any case.\n  A <CodeLiteral>LATERAL</CodeLiteral> item can appear at top level in the <CodeLiteral>FROM</CodeLiteral> list, or within a <CodeLiteral>JOIN</CodeLiteral> tree. In the latter case it can also refer to any items that are on the left-hand side of a <CodeLiteral>JOIN</CodeLiteral> that it is on the right-hand side of.\n  When a <CodeLiteral>FROM</CodeLiteral> item contains <CodeLiteral>LATERAL</CodeLiteral> cross-references, evaluation proceeds as follows: for each row of the <CodeLiteral>FROM</CodeLiteral> item providing the cross-referenced column(s), or set of rows of multiple <CodeLiteral>FROM</CodeLiteral> items providing the columns, the <CodeLiteral>LATERAL</CodeLiteral> item is evaluated using that row or row set's values of the columns. The resulting row(s) are joined as usual with the rows they were computed from. This is repeated for each row or set of rows from the column source table(s).\n  The column source table(s) must be <CodeLiteral>INNER</CodeLiteral> or <CodeLiteral>LEFT</CodeLiteral> joined to the <CodeLiteral>LATERAL</CodeLiteral> item, else there would not be a well-defined set of rows from which to compute each set of rows for the <CodeLiteral>LATERAL</CodeLiteral> item. Thus, although a construct such as <CodeLiteral>X RIGHT JOIN LATERAL Y</CodeLiteral> is syntactically valid, it is not actually allowed for Y to reference X. Join type can be one of <CodeLiteral>[ INNER ] JOIN</CodeLiteral>\n   <CodeLiteral>LEFT [ OUTER ] JOIN</CodeLiteral>\n  <CodeLiteral>RIGHT [ OUTER ] JOIN</CodeLiteral>\n   <CodeLiteral>FULL [ OUTER ] JOIN</CodeLiteral>\n  For the <CodeLiteral>INNER</CodeLiteral> and <CodeLiteral>OUTER</CodeLiteral> join types, a join condition must be specified, namely exactly one of <CodeLiteral>ON join_condition</CodeLiteral>, <CodeLiteral>USING (join_column [, ...])</CodeLiteral>, or <CodeLiteral>NATURAL</CodeLiteral>. See below for the meaning.\n  A <CodeLiteral>JOIN</CodeLiteral> clause combines two <CodeLiteral>FROM</CodeLiteral> items, which for convenience we will refer to as \u201ctables\u201d, though in reality they can be any type of <CodeLiteral>FROM</CodeLiteral> item. Use parentheses if necessary to determine the order of nesting. In the absence of parentheses, <CodeLiteral>JOIN</CodeLiteral>s nest left-to-right. In any case <CodeLiteral>JOIN</CodeLiteral> binds more tightly than the commas separating <CodeLiteral>FROM</CodeLiteral>-list items. All the <CodeLiteral>JOIN</CodeLiteral> options are just a notational convenience, since they do nothing you couldn't do with plain <CodeLiteral>FROM</CodeLiteral> and <CodeLiteral>WHERE</CodeLiteral>.\n  <CodeLiteral>LEFT OUTER JOIN</CodeLiteral> returns all rows in the qualified Cartesian product (i.e., all combined rows that pass its join condition), plus one copy of each row in the left-hand table for which there was no right-hand row that passed the join condition. This left-hand row is extended to the full width of the joined table by inserting null values for the right-hand columns. Note that only the <CodeLiteral>JOIN</CodeLiteral> clause's own condition is considered while deciding which rows have matches. Outer conditions are applied afterwards.\n  Conversely, <CodeLiteral>RIGHT OUTER JOIN</CodeLiteral> returns all the joined rows, plus one row for each unmatched right-hand row (extended with nulls on the left). This is just a notational convenience, since you could convert it to a <CodeLiteral>LEFT OUTER JOIN</CodeLiteral> by switching the left and right tables.\n  <CodeLiteral>FULL OUTER JOIN</CodeLiteral> returns all the joined rows, plus one row for each unmatched left-hand row (extended with nulls on the right), plus one row for each unmatched right-hand row (extended with nulls on the left).",
        "detail": "[DESCRIPTION]: The <CodeLiteral>LATERAL</CodeLiteral> key word can precede a sub-SELECT <CodeLiteral>FROM</CodeLiteral> item. This allows the sub-SELECT to refer to columns of <CodeLiteral>FROM</CodeLiteral> items that appear before it in the <CodeLiteral>FROM</CodeLiteral> list. (Without <CodeLiteral>LATERAL</CodeLiteral>, each sub-SELECT is evaluated independently and so cannot cross-reference any other <CodeLiteral>FROM</CodeLiteral> item.)\n  <CodeLiteral>LATERAL</CodeLiteral> can also precede a function-call <CodeLiteral>FROM</CodeLiteral> item, but in this case it is a noise word, because the function expression can refer to earlier <CodeLiteral>FROM</CodeLiteral> items in any case.\n  A <CodeLiteral>LATERAL</CodeLiteral> item can appear at top level in the <CodeLiteral>FROM</CodeLiteral> list, or within a <CodeLiteral>JOIN</CodeLiteral> tree. In the latter case it can also refer to any items that are on the left-hand side of a <CodeLiteral>JOIN</CodeLiteral> that it is on the right-hand side of.\n  When a <CodeLiteral>FROM</CodeLiteral> item contains <CodeLiteral>LATERAL</CodeLiteral> cross-references, evaluation proceeds as follows: for each row of the <CodeLiteral>FROM</CodeLiteral> item providing the cross-referenced column(s), or set of rows of multiple <CodeLiteral>FROM</CodeLiteral> items providing the columns, the <CodeLiteral>LATERAL</CodeLiteral> item is evaluated using that row or row set's values of the columns. The resulting row(s) are joined as usual with the rows they were computed from. This is repeated for each row or set of rows from the column source table(s).\n  The column source table(s) must be <CodeLiteral>INNER</CodeLiteral> or <CodeLiteral>LEFT</CodeLiteral> joined to the <CodeLiteral>LATERAL</CodeLiteral> item, else there would not be a well-defined set of rows from which to compute each set of rows for the <CodeLiteral>LATERAL</CodeLiteral> item. Thus, although a construct such as <CodeLiteral>X RIGHT JOIN LATERAL Y</CodeLiteral> is syntactically valid, it is not actually allowed for Y to reference X. Join type can be one of <CodeLiteral>[ INNER ] JOIN</CodeLiteral>\n   <CodeLiteral>LEFT [ OUTER ] JOIN</CodeLiteral>\n  <CodeLiteral>RIGHT [ OUTER ] JOIN</CodeLiteral>\n   <CodeLiteral>FULL [ OUTER ] JOIN</CodeLiteral>\n  For the <CodeLiteral>INNER</CodeLiteral> and <CodeLiteral>OUTER</CodeLiteral> join types, a join condition must be specified, namely exactly one of <CodeLiteral>ON join_condition</CodeLiteral>, <CodeLiteral>USING (join_column [, ...])</CodeLiteral>, or <CodeLiteral>NATURAL</CodeLiteral>. See below for the meaning.\n  A <CodeLiteral>JOIN</CodeLiteral> clause combines two <CodeLiteral>FROM</CodeLiteral> items, which for convenience we will refer to as \u201ctables\u201d, though in reality they can be any type of <CodeLiteral>FROM</CodeLiteral> item. Use parentheses if necessary to determine the order of nesting. In the absence of parentheses, <CodeLiteral>JOIN</CodeLiteral>s nest left-to-right. In any case <CodeLiteral>JOIN</CodeLiteral> binds more tightly than the commas separating <CodeLiteral>FROM</CodeLiteral>-list items. All the <CodeLiteral>JOIN</CodeLiteral> options are just a notational convenience, since they do nothing you couldn't do with plain <CodeLiteral>FROM</CodeLiteral> and <CodeLiteral>WHERE</CodeLiteral>.\n  <CodeLiteral>LEFT OUTER JOIN</CodeLiteral> returns all rows in the qualified Cartesian product (i.e., all combined rows that pass its join condition), plus one copy of each row in the left-hand table for which there was no right-hand row that passed the join condition. This left-hand row is extended to the full width of the joined table by inserting null values for the right-hand columns. Note that only the <CodeLiteral>JOIN</CodeLiteral> clause's own condition is considered while deciding which rows have matches. Outer conditions are applied afterwards.\n  Conversely, <CodeLiteral>RIGHT OUTER JOIN</CodeLiteral> returns all the joined rows, plus one row for each unmatched right-hand row (extended with nulls on the left). This is just a notational convenience, since you could convert it to a <CodeLiteral>LEFT OUTER JOIN</CodeLiteral> by switching the left and right tables.\n  <CodeLiteral>FULL OUTER JOIN</CodeLiteral> returns all the joined rows, plus one row for each unmatched left-hand row (extended with nulls on the right), plus one row for each unmatched right-hand row (extended with nulls on the left).<sep>[DEMO]: SELECT * FROM employee FULL OUTER JOIN department ON employee.department_id = department.id;",
        "example": [
            "SELECT * FROM employee FULL OUTER JOIN department ON employee.department_id = department.id;"
        ],
        "link": []
    },
    {
        "type": "keyword",
        "keyword": "from_item FULL JOIN from_item ON join_condition",
        "tree": " (table_ref (join_type FULL) JOIN (join_qual ON))",
        "description": "The <CodeLiteral>LATERAL</CodeLiteral> key word can precede a sub-SELECT <CodeLiteral>FROM</CodeLiteral> item. This allows the sub-SELECT to refer to columns of <CodeLiteral>FROM</CodeLiteral> items that appear before it in the <CodeLiteral>FROM</CodeLiteral> list. (Without <CodeLiteral>LATERAL</CodeLiteral>, each sub-SELECT is evaluated independently and so cannot cross-reference any other <CodeLiteral>FROM</CodeLiteral> item.)\n  <CodeLiteral>LATERAL</CodeLiteral> can also precede a function-call <CodeLiteral>FROM</CodeLiteral> item, but in this case it is a noise word, because the function expression can refer to earlier <CodeLiteral>FROM</CodeLiteral> items in any case.\n  A <CodeLiteral>LATERAL</CodeLiteral> item can appear at top level in the <CodeLiteral>FROM</CodeLiteral> list, or within a <CodeLiteral>JOIN</CodeLiteral> tree. In the latter case it can also refer to any items that are on the left-hand side of a <CodeLiteral>JOIN</CodeLiteral> that it is on the right-hand side of.\n  When a <CodeLiteral>FROM</CodeLiteral> item contains <CodeLiteral>LATERAL</CodeLiteral> cross-references, evaluation proceeds as follows: for each row of the <CodeLiteral>FROM</CodeLiteral> item providing the cross-referenced column(s), or set of rows of multiple <CodeLiteral>FROM</CodeLiteral> items providing the columns, the <CodeLiteral>LATERAL</CodeLiteral> item is evaluated using that row or row set's values of the columns. The resulting row(s) are joined as usual with the rows they were computed from. This is repeated for each row or set of rows from the column source table(s).\n  The column source table(s) must be <CodeLiteral>INNER</CodeLiteral> or <CodeLiteral>LEFT</CodeLiteral> joined to the <CodeLiteral>LATERAL</CodeLiteral> item, else there would not be a well-defined set of rows from which to compute each set of rows for the <CodeLiteral>LATERAL</CodeLiteral> item. Thus, although a construct such as <CodeLiteral>X RIGHT JOIN LATERAL Y</CodeLiteral> is syntactically valid, it is not actually allowed for Y to reference X. Join type can be one of <CodeLiteral>[ INNER ] JOIN</CodeLiteral>\n   <CodeLiteral>LEFT [ OUTER ] JOIN</CodeLiteral>\n  <CodeLiteral>RIGHT [ OUTER ] JOIN</CodeLiteral>\n   <CodeLiteral>FULL [ OUTER ] JOIN</CodeLiteral>\n  For the <CodeLiteral>INNER</CodeLiteral> and <CodeLiteral>OUTER</CodeLiteral> join types, a join condition must be specified, namely exactly one of <CodeLiteral>ON join_condition</CodeLiteral>, <CodeLiteral>USING (join_column [, ...])</CodeLiteral>, or <CodeLiteral>NATURAL</CodeLiteral>. See below for the meaning.\n  A <CodeLiteral>JOIN</CodeLiteral> clause combines two <CodeLiteral>FROM</CodeLiteral> items, which for convenience we will refer to as \u201ctables\u201d, though in reality they can be any type of <CodeLiteral>FROM</CodeLiteral> item. Use parentheses if necessary to determine the order of nesting. In the absence of parentheses, <CodeLiteral>JOIN</CodeLiteral>s nest left-to-right. In any case <CodeLiteral>JOIN</CodeLiteral> binds more tightly than the commas separating <CodeLiteral>FROM</CodeLiteral>-list items. All the <CodeLiteral>JOIN</CodeLiteral> options are just a notational convenience, since they do nothing you couldn't do with plain <CodeLiteral>FROM</CodeLiteral> and <CodeLiteral>WHERE</CodeLiteral>.\n  <CodeLiteral>LEFT OUTER JOIN</CodeLiteral> returns all rows in the qualified Cartesian product (i.e., all combined rows that pass its join condition), plus one copy of each row in the left-hand table for which there was no right-hand row that passed the join condition. This left-hand row is extended to the full width of the joined table by inserting null values for the right-hand columns. Note that only the <CodeLiteral>JOIN</CodeLiteral> clause's own condition is considered while deciding which rows have matches. Outer conditions are applied afterwards.\n  Conversely, <CodeLiteral>RIGHT OUTER JOIN</CodeLiteral> returns all the joined rows, plus one row for each unmatched right-hand row (extended with nulls on the left). This is just a notational convenience, since you could convert it to a <CodeLiteral>LEFT OUTER JOIN</CodeLiteral> by switching the left and right tables.\n  <CodeLiteral>FULL OUTER JOIN</CodeLiteral> returns all the joined rows, plus one row for each unmatched left-hand row (extended with nulls on the right), plus one row for each unmatched right-hand row (extended with nulls on the left).",
        "detail": "[DESCRIPTION]: The <CodeLiteral>LATERAL</CodeLiteral> key word can precede a sub-SELECT <CodeLiteral>FROM</CodeLiteral> item. This allows the sub-SELECT to refer to columns of <CodeLiteral>FROM</CodeLiteral> items that appear before it in the <CodeLiteral>FROM</CodeLiteral> list. (Without <CodeLiteral>LATERAL</CodeLiteral>, each sub-SELECT is evaluated independently and so cannot cross-reference any other <CodeLiteral>FROM</CodeLiteral> item.)\n  <CodeLiteral>LATERAL</CodeLiteral> can also precede a function-call <CodeLiteral>FROM</CodeLiteral> item, but in this case it is a noise word, because the function expression can refer to earlier <CodeLiteral>FROM</CodeLiteral> items in any case.\n  A <CodeLiteral>LATERAL</CodeLiteral> item can appear at top level in the <CodeLiteral>FROM</CodeLiteral> list, or within a <CodeLiteral>JOIN</CodeLiteral> tree. In the latter case it can also refer to any items that are on the left-hand side of a <CodeLiteral>JOIN</CodeLiteral> that it is on the right-hand side of.\n  When a <CodeLiteral>FROM</CodeLiteral> item contains <CodeLiteral>LATERAL</CodeLiteral> cross-references, evaluation proceeds as follows: for each row of the <CodeLiteral>FROM</CodeLiteral> item providing the cross-referenced column(s), or set of rows of multiple <CodeLiteral>FROM</CodeLiteral> items providing the columns, the <CodeLiteral>LATERAL</CodeLiteral> item is evaluated using that row or row set's values of the columns. The resulting row(s) are joined as usual with the rows they were computed from. This is repeated for each row or set of rows from the column source table(s).\n  The column source table(s) must be <CodeLiteral>INNER</CodeLiteral> or <CodeLiteral>LEFT</CodeLiteral> joined to the <CodeLiteral>LATERAL</CodeLiteral> item, else there would not be a well-defined set of rows from which to compute each set of rows for the <CodeLiteral>LATERAL</CodeLiteral> item. Thus, although a construct such as <CodeLiteral>X RIGHT JOIN LATERAL Y</CodeLiteral> is syntactically valid, it is not actually allowed for Y to reference X. Join type can be one of <CodeLiteral>[ INNER ] JOIN</CodeLiteral>\n   <CodeLiteral>LEFT [ OUTER ] JOIN</CodeLiteral>\n  <CodeLiteral>RIGHT [ OUTER ] JOIN</CodeLiteral>\n   <CodeLiteral>FULL [ OUTER ] JOIN</CodeLiteral>\n  For the <CodeLiteral>INNER</CodeLiteral> and <CodeLiteral>OUTER</CodeLiteral> join types, a join condition must be specified, namely exactly one of <CodeLiteral>ON join_condition</CodeLiteral>, <CodeLiteral>USING (join_column [, ...])</CodeLiteral>, or <CodeLiteral>NATURAL</CodeLiteral>. See below for the meaning.\n  A <CodeLiteral>JOIN</CodeLiteral> clause combines two <CodeLiteral>FROM</CodeLiteral> items, which for convenience we will refer to as \u201ctables\u201d, though in reality they can be any type of <CodeLiteral>FROM</CodeLiteral> item. Use parentheses if necessary to determine the order of nesting. In the absence of parentheses, <CodeLiteral>JOIN</CodeLiteral>s nest left-to-right. In any case <CodeLiteral>JOIN</CodeLiteral> binds more tightly than the commas separating <CodeLiteral>FROM</CodeLiteral>-list items. All the <CodeLiteral>JOIN</CodeLiteral> options are just a notational convenience, since they do nothing you couldn't do with plain <CodeLiteral>FROM</CodeLiteral> and <CodeLiteral>WHERE</CodeLiteral>.\n  <CodeLiteral>LEFT OUTER JOIN</CodeLiteral> returns all rows in the qualified Cartesian product (i.e., all combined rows that pass its join condition), plus one copy of each row in the left-hand table for which there was no right-hand row that passed the join condition. This left-hand row is extended to the full width of the joined table by inserting null values for the right-hand columns. Note that only the <CodeLiteral>JOIN</CodeLiteral> clause's own condition is considered while deciding which rows have matches. Outer conditions are applied afterwards.\n  Conversely, <CodeLiteral>RIGHT OUTER JOIN</CodeLiteral> returns all the joined rows, plus one row for each unmatched right-hand row (extended with nulls on the left). This is just a notational convenience, since you could convert it to a <CodeLiteral>LEFT OUTER JOIN</CodeLiteral> by switching the left and right tables.\n  <CodeLiteral>FULL OUTER JOIN</CodeLiteral> returns all the joined rows, plus one row for each unmatched left-hand row (extended with nulls on the right), plus one row for each unmatched right-hand row (extended with nulls on the left).<sep>[DEMO]: SELECT * FROM employees FULL JOIN departments ON employees.department_id = departments.id",
        "example": [
            "SELECT * FROM employees FULL JOIN departments ON employees.department_id = departments.id"
        ],
        "link": []
    },
    {
        "type": "keyword",
        "keyword": "from_item INNER JOIN from_item USING ( join_column ) ",
        "tree": " (table_ref (join_type INNER) JOIN (join_qual USING ( )))",
        "description": "The <CodeLiteral>LATERAL</CodeLiteral> key word can precede a sub-SELECT <CodeLiteral>FROM</CodeLiteral> item. This allows the sub-SELECT to refer to columns of <CodeLiteral>FROM</CodeLiteral> items that appear before it in the <CodeLiteral>FROM</CodeLiteral> list. (Without <CodeLiteral>LATERAL</CodeLiteral>, each sub-SELECT is evaluated independently and so cannot cross-reference any other <CodeLiteral>FROM</CodeLiteral> item.)\n  <CodeLiteral>LATERAL</CodeLiteral> can also precede a function-call <CodeLiteral>FROM</CodeLiteral> item, but in this case it is a noise word, because the function expression can refer to earlier <CodeLiteral>FROM</CodeLiteral> items in any case.\n  A <CodeLiteral>LATERAL</CodeLiteral> item can appear at top level in the <CodeLiteral>FROM</CodeLiteral> list, or within a <CodeLiteral>JOIN</CodeLiteral> tree. In the latter case it can also refer to any items that are on the left-hand side of a <CodeLiteral>JOIN</CodeLiteral> that it is on the right-hand side of.\n  When a <CodeLiteral>FROM</CodeLiteral> item contains <CodeLiteral>LATERAL</CodeLiteral> cross-references, evaluation proceeds as follows: for each row of the <CodeLiteral>FROM</CodeLiteral> item providing the cross-referenced column(s), or set of rows of multiple <CodeLiteral>FROM</CodeLiteral> items providing the columns, the <CodeLiteral>LATERAL</CodeLiteral> item is evaluated using that row or row set's values of the columns. The resulting row(s) are joined as usual with the rows they were computed from. This is repeated for each row or set of rows from the column source table(s).\n  The column source table(s) must be <CodeLiteral>INNER</CodeLiteral> or <CodeLiteral>LEFT</CodeLiteral> joined to the <CodeLiteral>LATERAL</CodeLiteral> item, else there would not be a well-defined set of rows from which to compute each set of rows for the <CodeLiteral>LATERAL</CodeLiteral> item. Thus, although a construct such as <CodeLiteral>X RIGHT JOIN LATERAL Y</CodeLiteral> is syntactically valid, it is not actually allowed for Y to reference X. Join type can be one of <CodeLiteral>[ INNER ] JOIN</CodeLiteral>\n   <CodeLiteral>LEFT [ OUTER ] JOIN</CodeLiteral>\n  <CodeLiteral>RIGHT [ OUTER ] JOIN</CodeLiteral>\n   <CodeLiteral>FULL [ OUTER ] JOIN</CodeLiteral>\n  For the <CodeLiteral>INNER</CodeLiteral> and <CodeLiteral>OUTER</CodeLiteral> join types, a join condition must be specified, namely exactly one of <CodeLiteral>ON join_condition</CodeLiteral>, <CodeLiteral>USING (join_column [, ...])</CodeLiteral>, or <CodeLiteral>NATURAL</CodeLiteral>. See below for the meaning.\n  A <CodeLiteral>JOIN</CodeLiteral> clause combines two <CodeLiteral>FROM</CodeLiteral> items, which for convenience we will refer to as \u201ctables\u201d, though in reality they can be any type of <CodeLiteral>FROM</CodeLiteral> item. Use parentheses if necessary to determine the order of nesting. In the absence of parentheses, <CodeLiteral>JOIN</CodeLiteral>s nest left-to-right. In any case <CodeLiteral>JOIN</CodeLiteral> binds more tightly than the commas separating <CodeLiteral>FROM</CodeLiteral>-list items. All the <CodeLiteral>JOIN</CodeLiteral> options are just a notational convenience, since they do nothing you couldn't do with plain <CodeLiteral>FROM</CodeLiteral> and <CodeLiteral>WHERE</CodeLiteral>.\n  <CodeLiteral>LEFT OUTER JOIN</CodeLiteral> returns all rows in the qualified Cartesian product (i.e., all combined rows that pass its join condition), plus one copy of each row in the left-hand table for which there was no right-hand row that passed the join condition. This left-hand row is extended to the full width of the joined table by inserting null values for the right-hand columns. Note that only the <CodeLiteral>JOIN</CodeLiteral> clause's own condition is considered while deciding which rows have matches. Outer conditions are applied afterwards.\n  Conversely, <CodeLiteral>RIGHT OUTER JOIN</CodeLiteral> returns all the joined rows, plus one row for each unmatched right-hand row (extended with nulls on the left). This is just a notational convenience, since you could convert it to a <CodeLiteral>LEFT OUTER JOIN</CodeLiteral> by switching the left and right tables.\n  <CodeLiteral>FULL OUTER JOIN</CodeLiteral> returns all the joined rows, plus one row for each unmatched left-hand row (extended with nulls on the right), plus one row for each unmatched right-hand row (extended with nulls on the left).",
        "detail": "[DESCRIPTION]: The <CodeLiteral>LATERAL</CodeLiteral> key word can precede a sub-SELECT <CodeLiteral>FROM</CodeLiteral> item. This allows the sub-SELECT to refer to columns of <CodeLiteral>FROM</CodeLiteral> items that appear before it in the <CodeLiteral>FROM</CodeLiteral> list. (Without <CodeLiteral>LATERAL</CodeLiteral>, each sub-SELECT is evaluated independently and so cannot cross-reference any other <CodeLiteral>FROM</CodeLiteral> item.)\n  <CodeLiteral>LATERAL</CodeLiteral> can also precede a function-call <CodeLiteral>FROM</CodeLiteral> item, but in this case it is a noise word, because the function expression can refer to earlier <CodeLiteral>FROM</CodeLiteral> items in any case.\n  A <CodeLiteral>LATERAL</CodeLiteral> item can appear at top level in the <CodeLiteral>FROM</CodeLiteral> list, or within a <CodeLiteral>JOIN</CodeLiteral> tree. In the latter case it can also refer to any items that are on the left-hand side of a <CodeLiteral>JOIN</CodeLiteral> that it is on the right-hand side of.\n  When a <CodeLiteral>FROM</CodeLiteral> item contains <CodeLiteral>LATERAL</CodeLiteral> cross-references, evaluation proceeds as follows: for each row of the <CodeLiteral>FROM</CodeLiteral> item providing the cross-referenced column(s), or set of rows of multiple <CodeLiteral>FROM</CodeLiteral> items providing the columns, the <CodeLiteral>LATERAL</CodeLiteral> item is evaluated using that row or row set's values of the columns. The resulting row(s) are joined as usual with the rows they were computed from. This is repeated for each row or set of rows from the column source table(s).\n  The column source table(s) must be <CodeLiteral>INNER</CodeLiteral> or <CodeLiteral>LEFT</CodeLiteral> joined to the <CodeLiteral>LATERAL</CodeLiteral> item, else there would not be a well-defined set of rows from which to compute each set of rows for the <CodeLiteral>LATERAL</CodeLiteral> item. Thus, although a construct such as <CodeLiteral>X RIGHT JOIN LATERAL Y</CodeLiteral> is syntactically valid, it is not actually allowed for Y to reference X. Join type can be one of <CodeLiteral>[ INNER ] JOIN</CodeLiteral>\n   <CodeLiteral>LEFT [ OUTER ] JOIN</CodeLiteral>\n  <CodeLiteral>RIGHT [ OUTER ] JOIN</CodeLiteral>\n   <CodeLiteral>FULL [ OUTER ] JOIN</CodeLiteral>\n  For the <CodeLiteral>INNER</CodeLiteral> and <CodeLiteral>OUTER</CodeLiteral> join types, a join condition must be specified, namely exactly one of <CodeLiteral>ON join_condition</CodeLiteral>, <CodeLiteral>USING (join_column [, ...])</CodeLiteral>, or <CodeLiteral>NATURAL</CodeLiteral>. See below for the meaning.\n  A <CodeLiteral>JOIN</CodeLiteral> clause combines two <CodeLiteral>FROM</CodeLiteral> items, which for convenience we will refer to as \u201ctables\u201d, though in reality they can be any type of <CodeLiteral>FROM</CodeLiteral> item. Use parentheses if necessary to determine the order of nesting. In the absence of parentheses, <CodeLiteral>JOIN</CodeLiteral>s nest left-to-right. In any case <CodeLiteral>JOIN</CodeLiteral> binds more tightly than the commas separating <CodeLiteral>FROM</CodeLiteral>-list items. All the <CodeLiteral>JOIN</CodeLiteral> options are just a notational convenience, since they do nothing you couldn't do with plain <CodeLiteral>FROM</CodeLiteral> and <CodeLiteral>WHERE</CodeLiteral>.\n  <CodeLiteral>LEFT OUTER JOIN</CodeLiteral> returns all rows in the qualified Cartesian product (i.e., all combined rows that pass its join condition), plus one copy of each row in the left-hand table for which there was no right-hand row that passed the join condition. This left-hand row is extended to the full width of the joined table by inserting null values for the right-hand columns. Note that only the <CodeLiteral>JOIN</CodeLiteral> clause's own condition is considered while deciding which rows have matches. Outer conditions are applied afterwards.\n  Conversely, <CodeLiteral>RIGHT OUTER JOIN</CodeLiteral> returns all the joined rows, plus one row for each unmatched right-hand row (extended with nulls on the left). This is just a notational convenience, since you could convert it to a <CodeLiteral>LEFT OUTER JOIN</CodeLiteral> by switching the left and right tables.\n  <CodeLiteral>FULL OUTER JOIN</CodeLiteral> returns all the joined rows, plus one row for each unmatched left-hand row (extended with nulls on the right), plus one row for each unmatched right-hand row (extended with nulls on the left).<sep>[DEMO]: SELECT t1.name, t2.salary FROM employees t1 INNER JOIN payroll t2 USING (employee_id)",
        "example": [
            "SELECT t1.name, t2.salary FROM employees t1 INNER JOIN payroll t2 USING (employee_id)"
        ],
        "link": []
    },
    {
        "type": "keyword",
        "keyword": "from_item JOIN from_item USING ( join_column ) ",
        "tree": " (table_ref JOIN (join_qual USING ( )))",
        "description": "The <CodeLiteral>LATERAL</CodeLiteral> key word can precede a sub-SELECT <CodeLiteral>FROM</CodeLiteral> item. This allows the sub-SELECT to refer to columns of <CodeLiteral>FROM</CodeLiteral> items that appear before it in the <CodeLiteral>FROM</CodeLiteral> list. (Without <CodeLiteral>LATERAL</CodeLiteral>, each sub-SELECT is evaluated independently and so cannot cross-reference any other <CodeLiteral>FROM</CodeLiteral> item.)\n  <CodeLiteral>LATERAL</CodeLiteral> can also precede a function-call <CodeLiteral>FROM</CodeLiteral> item, but in this case it is a noise word, because the function expression can refer to earlier <CodeLiteral>FROM</CodeLiteral> items in any case.\n  A <CodeLiteral>LATERAL</CodeLiteral> item can appear at top level in the <CodeLiteral>FROM</CodeLiteral> list, or within a <CodeLiteral>JOIN</CodeLiteral> tree. In the latter case it can also refer to any items that are on the left-hand side of a <CodeLiteral>JOIN</CodeLiteral> that it is on the right-hand side of.\n  When a <CodeLiteral>FROM</CodeLiteral> item contains <CodeLiteral>LATERAL</CodeLiteral> cross-references, evaluation proceeds as follows: for each row of the <CodeLiteral>FROM</CodeLiteral> item providing the cross-referenced column(s), or set of rows of multiple <CodeLiteral>FROM</CodeLiteral> items providing the columns, the <CodeLiteral>LATERAL</CodeLiteral> item is evaluated using that row or row set's values of the columns. The resulting row(s) are joined as usual with the rows they were computed from. This is repeated for each row or set of rows from the column source table(s).\n  The column source table(s) must be <CodeLiteral>INNER</CodeLiteral> or <CodeLiteral>LEFT</CodeLiteral> joined to the <CodeLiteral>LATERAL</CodeLiteral> item, else there would not be a well-defined set of rows from which to compute each set of rows for the <CodeLiteral>LATERAL</CodeLiteral> item. Thus, although a construct such as <CodeLiteral>X RIGHT JOIN LATERAL Y</CodeLiteral> is syntactically valid, it is not actually allowed for Y to reference X. Join type can be one of <CodeLiteral>[ INNER ] JOIN</CodeLiteral>\n   <CodeLiteral>LEFT [ OUTER ] JOIN</CodeLiteral>\n  <CodeLiteral>RIGHT [ OUTER ] JOIN</CodeLiteral>\n   <CodeLiteral>FULL [ OUTER ] JOIN</CodeLiteral>\n  For the <CodeLiteral>INNER</CodeLiteral> and <CodeLiteral>OUTER</CodeLiteral> join types, a join condition must be specified, namely exactly one of <CodeLiteral>ON join_condition</CodeLiteral>, <CodeLiteral>USING (join_column [, ...])</CodeLiteral>, or <CodeLiteral>NATURAL</CodeLiteral>. See below for the meaning.\n  A <CodeLiteral>JOIN</CodeLiteral> clause combines two <CodeLiteral>FROM</CodeLiteral> items, which for convenience we will refer to as \u201ctables\u201d, though in reality they can be any type of <CodeLiteral>FROM</CodeLiteral> item. Use parentheses if necessary to determine the order of nesting. In the absence of parentheses, <CodeLiteral>JOIN</CodeLiteral>s nest left-to-right. In any case <CodeLiteral>JOIN</CodeLiteral> binds more tightly than the commas separating <CodeLiteral>FROM</CodeLiteral>-list items. All the <CodeLiteral>JOIN</CodeLiteral> options are just a notational convenience, since they do nothing you couldn't do with plain <CodeLiteral>FROM</CodeLiteral> and <CodeLiteral>WHERE</CodeLiteral>.\n  <CodeLiteral>LEFT OUTER JOIN</CodeLiteral> returns all rows in the qualified Cartesian product (i.e., all combined rows that pass its join condition), plus one copy of each row in the left-hand table for which there was no right-hand row that passed the join condition. This left-hand row is extended to the full width of the joined table by inserting null values for the right-hand columns. Note that only the <CodeLiteral>JOIN</CodeLiteral> clause's own condition is considered while deciding which rows have matches. Outer conditions are applied afterwards.\n  Conversely, <CodeLiteral>RIGHT OUTER JOIN</CodeLiteral> returns all the joined rows, plus one row for each unmatched right-hand row (extended with nulls on the left). This is just a notational convenience, since you could convert it to a <CodeLiteral>LEFT OUTER JOIN</CodeLiteral> by switching the left and right tables.\n  <CodeLiteral>FULL OUTER JOIN</CodeLiteral> returns all the joined rows, plus one row for each unmatched left-hand row (extended with nulls on the right), plus one row for each unmatched right-hand row (extended with nulls on the left).",
        "detail": "[DESCRIPTION]: The <CodeLiteral>LATERAL</CodeLiteral> key word can precede a sub-SELECT <CodeLiteral>FROM</CodeLiteral> item. This allows the sub-SELECT to refer to columns of <CodeLiteral>FROM</CodeLiteral> items that appear before it in the <CodeLiteral>FROM</CodeLiteral> list. (Without <CodeLiteral>LATERAL</CodeLiteral>, each sub-SELECT is evaluated independently and so cannot cross-reference any other <CodeLiteral>FROM</CodeLiteral> item.)\n  <CodeLiteral>LATERAL</CodeLiteral> can also precede a function-call <CodeLiteral>FROM</CodeLiteral> item, but in this case it is a noise word, because the function expression can refer to earlier <CodeLiteral>FROM</CodeLiteral> items in any case.\n  A <CodeLiteral>LATERAL</CodeLiteral> item can appear at top level in the <CodeLiteral>FROM</CodeLiteral> list, or within a <CodeLiteral>JOIN</CodeLiteral> tree. In the latter case it can also refer to any items that are on the left-hand side of a <CodeLiteral>JOIN</CodeLiteral> that it is on the right-hand side of.\n  When a <CodeLiteral>FROM</CodeLiteral> item contains <CodeLiteral>LATERAL</CodeLiteral> cross-references, evaluation proceeds as follows: for each row of the <CodeLiteral>FROM</CodeLiteral> item providing the cross-referenced column(s), or set of rows of multiple <CodeLiteral>FROM</CodeLiteral> items providing the columns, the <CodeLiteral>LATERAL</CodeLiteral> item is evaluated using that row or row set's values of the columns. The resulting row(s) are joined as usual with the rows they were computed from. This is repeated for each row or set of rows from the column source table(s).\n  The column source table(s) must be <CodeLiteral>INNER</CodeLiteral> or <CodeLiteral>LEFT</CodeLiteral> joined to the <CodeLiteral>LATERAL</CodeLiteral> item, else there would not be a well-defined set of rows from which to compute each set of rows for the <CodeLiteral>LATERAL</CodeLiteral> item. Thus, although a construct such as <CodeLiteral>X RIGHT JOIN LATERAL Y</CodeLiteral> is syntactically valid, it is not actually allowed for Y to reference X. Join type can be one of <CodeLiteral>[ INNER ] JOIN</CodeLiteral>\n   <CodeLiteral>LEFT [ OUTER ] JOIN</CodeLiteral>\n  <CodeLiteral>RIGHT [ OUTER ] JOIN</CodeLiteral>\n   <CodeLiteral>FULL [ OUTER ] JOIN</CodeLiteral>\n  For the <CodeLiteral>INNER</CodeLiteral> and <CodeLiteral>OUTER</CodeLiteral> join types, a join condition must be specified, namely exactly one of <CodeLiteral>ON join_condition</CodeLiteral>, <CodeLiteral>USING (join_column [, ...])</CodeLiteral>, or <CodeLiteral>NATURAL</CodeLiteral>. See below for the meaning.\n  A <CodeLiteral>JOIN</CodeLiteral> clause combines two <CodeLiteral>FROM</CodeLiteral> items, which for convenience we will refer to as \u201ctables\u201d, though in reality they can be any type of <CodeLiteral>FROM</CodeLiteral> item. Use parentheses if necessary to determine the order of nesting. In the absence of parentheses, <CodeLiteral>JOIN</CodeLiteral>s nest left-to-right. In any case <CodeLiteral>JOIN</CodeLiteral> binds more tightly than the commas separating <CodeLiteral>FROM</CodeLiteral>-list items. All the <CodeLiteral>JOIN</CodeLiteral> options are just a notational convenience, since they do nothing you couldn't do with plain <CodeLiteral>FROM</CodeLiteral> and <CodeLiteral>WHERE</CodeLiteral>.\n  <CodeLiteral>LEFT OUTER JOIN</CodeLiteral> returns all rows in the qualified Cartesian product (i.e., all combined rows that pass its join condition), plus one copy of each row in the left-hand table for which there was no right-hand row that passed the join condition. This left-hand row is extended to the full width of the joined table by inserting null values for the right-hand columns. Note that only the <CodeLiteral>JOIN</CodeLiteral> clause's own condition is considered while deciding which rows have matches. Outer conditions are applied afterwards.\n  Conversely, <CodeLiteral>RIGHT OUTER JOIN</CodeLiteral> returns all the joined rows, plus one row for each unmatched right-hand row (extended with nulls on the left). This is just a notational convenience, since you could convert it to a <CodeLiteral>LEFT OUTER JOIN</CodeLiteral> by switching the left and right tables.\n  <CodeLiteral>FULL OUTER JOIN</CodeLiteral> returns all the joined rows, plus one row for each unmatched left-hand row (extended with nulls on the right), plus one row for each unmatched right-hand row (extended with nulls on the left).<sep>[DEMO]: SELECT * FROM employees e JOIN departments d USING (department_id);",
        "example": [
            "SELECT * FROM employees e JOIN departments d USING (department_id);"
        ],
        "link": []
    },
    {
        "type": "keyword",
        "keyword": "from_item LEFT OUTER JOIN from_item USING ( join_column ) ",
        "tree": " (table_ref (join_type LEFT OUTER) JOIN (join_qual USING ( )))",
        "description": "The <CodeLiteral>LATERAL</CodeLiteral> key word can precede a sub-SELECT <CodeLiteral>FROM</CodeLiteral> item. This allows the sub-SELECT to refer to columns of <CodeLiteral>FROM</CodeLiteral> items that appear before it in the <CodeLiteral>FROM</CodeLiteral> list. (Without <CodeLiteral>LATERAL</CodeLiteral>, each sub-SELECT is evaluated independently and so cannot cross-reference any other <CodeLiteral>FROM</CodeLiteral> item.)\n  <CodeLiteral>LATERAL</CodeLiteral> can also precede a function-call <CodeLiteral>FROM</CodeLiteral> item, but in this case it is a noise word, because the function expression can refer to earlier <CodeLiteral>FROM</CodeLiteral> items in any case.\n  A <CodeLiteral>LATERAL</CodeLiteral> item can appear at top level in the <CodeLiteral>FROM</CodeLiteral> list, or within a <CodeLiteral>JOIN</CodeLiteral> tree. In the latter case it can also refer to any items that are on the left-hand side of a <CodeLiteral>JOIN</CodeLiteral> that it is on the right-hand side of.\n  When a <CodeLiteral>FROM</CodeLiteral> item contains <CodeLiteral>LATERAL</CodeLiteral> cross-references, evaluation proceeds as follows: for each row of the <CodeLiteral>FROM</CodeLiteral> item providing the cross-referenced column(s), or set of rows of multiple <CodeLiteral>FROM</CodeLiteral> items providing the columns, the <CodeLiteral>LATERAL</CodeLiteral> item is evaluated using that row or row set's values of the columns. The resulting row(s) are joined as usual with the rows they were computed from. This is repeated for each row or set of rows from the column source table(s).\n  The column source table(s) must be <CodeLiteral>INNER</CodeLiteral> or <CodeLiteral>LEFT</CodeLiteral> joined to the <CodeLiteral>LATERAL</CodeLiteral> item, else there would not be a well-defined set of rows from which to compute each set of rows for the <CodeLiteral>LATERAL</CodeLiteral> item. Thus, although a construct such as <CodeLiteral>X RIGHT JOIN LATERAL Y</CodeLiteral> is syntactically valid, it is not actually allowed for Y to reference X. Join type can be one of <CodeLiteral>[ INNER ] JOIN</CodeLiteral>\n   <CodeLiteral>LEFT [ OUTER ] JOIN</CodeLiteral>\n  <CodeLiteral>RIGHT [ OUTER ] JOIN</CodeLiteral>\n   <CodeLiteral>FULL [ OUTER ] JOIN</CodeLiteral>\n  For the <CodeLiteral>INNER</CodeLiteral> and <CodeLiteral>OUTER</CodeLiteral> join types, a join condition must be specified, namely exactly one of <CodeLiteral>ON join_condition</CodeLiteral>, <CodeLiteral>USING (join_column [, ...])</CodeLiteral>, or <CodeLiteral>NATURAL</CodeLiteral>. See below for the meaning.\n  A <CodeLiteral>JOIN</CodeLiteral> clause combines two <CodeLiteral>FROM</CodeLiteral> items, which for convenience we will refer to as \u201ctables\u201d, though in reality they can be any type of <CodeLiteral>FROM</CodeLiteral> item. Use parentheses if necessary to determine the order of nesting. In the absence of parentheses, <CodeLiteral>JOIN</CodeLiteral>s nest left-to-right. In any case <CodeLiteral>JOIN</CodeLiteral> binds more tightly than the commas separating <CodeLiteral>FROM</CodeLiteral>-list items. All the <CodeLiteral>JOIN</CodeLiteral> options are just a notational convenience, since they do nothing you couldn't do with plain <CodeLiteral>FROM</CodeLiteral> and <CodeLiteral>WHERE</CodeLiteral>.\n  <CodeLiteral>LEFT OUTER JOIN</CodeLiteral> returns all rows in the qualified Cartesian product (i.e., all combined rows that pass its join condition), plus one copy of each row in the left-hand table for which there was no right-hand row that passed the join condition. This left-hand row is extended to the full width of the joined table by inserting null values for the right-hand columns. Note that only the <CodeLiteral>JOIN</CodeLiteral> clause's own condition is considered while deciding which rows have matches. Outer conditions are applied afterwards.\n  Conversely, <CodeLiteral>RIGHT OUTER JOIN</CodeLiteral> returns all the joined rows, plus one row for each unmatched right-hand row (extended with nulls on the left). This is just a notational convenience, since you could convert it to a <CodeLiteral>LEFT OUTER JOIN</CodeLiteral> by switching the left and right tables.\n  <CodeLiteral>FULL OUTER JOIN</CodeLiteral> returns all the joined rows, plus one row for each unmatched left-hand row (extended with nulls on the right), plus one row for each unmatched right-hand row (extended with nulls on the left).",
        "detail": "[DESCRIPTION]: The <CodeLiteral>LATERAL</CodeLiteral> key word can precede a sub-SELECT <CodeLiteral>FROM</CodeLiteral> item. This allows the sub-SELECT to refer to columns of <CodeLiteral>FROM</CodeLiteral> items that appear before it in the <CodeLiteral>FROM</CodeLiteral> list. (Without <CodeLiteral>LATERAL</CodeLiteral>, each sub-SELECT is evaluated independently and so cannot cross-reference any other <CodeLiteral>FROM</CodeLiteral> item.)\n  <CodeLiteral>LATERAL</CodeLiteral> can also precede a function-call <CodeLiteral>FROM</CodeLiteral> item, but in this case it is a noise word, because the function expression can refer to earlier <CodeLiteral>FROM</CodeLiteral> items in any case.\n  A <CodeLiteral>LATERAL</CodeLiteral> item can appear at top level in the <CodeLiteral>FROM</CodeLiteral> list, or within a <CodeLiteral>JOIN</CodeLiteral> tree. In the latter case it can also refer to any items that are on the left-hand side of a <CodeLiteral>JOIN</CodeLiteral> that it is on the right-hand side of.\n  When a <CodeLiteral>FROM</CodeLiteral> item contains <CodeLiteral>LATERAL</CodeLiteral> cross-references, evaluation proceeds as follows: for each row of the <CodeLiteral>FROM</CodeLiteral> item providing the cross-referenced column(s), or set of rows of multiple <CodeLiteral>FROM</CodeLiteral> items providing the columns, the <CodeLiteral>LATERAL</CodeLiteral> item is evaluated using that row or row set's values of the columns. The resulting row(s) are joined as usual with the rows they were computed from. This is repeated for each row or set of rows from the column source table(s).\n  The column source table(s) must be <CodeLiteral>INNER</CodeLiteral> or <CodeLiteral>LEFT</CodeLiteral> joined to the <CodeLiteral>LATERAL</CodeLiteral> item, else there would not be a well-defined set of rows from which to compute each set of rows for the <CodeLiteral>LATERAL</CodeLiteral> item. Thus, although a construct such as <CodeLiteral>X RIGHT JOIN LATERAL Y</CodeLiteral> is syntactically valid, it is not actually allowed for Y to reference X. Join type can be one of <CodeLiteral>[ INNER ] JOIN</CodeLiteral>\n   <CodeLiteral>LEFT [ OUTER ] JOIN</CodeLiteral>\n  <CodeLiteral>RIGHT [ OUTER ] JOIN</CodeLiteral>\n   <CodeLiteral>FULL [ OUTER ] JOIN</CodeLiteral>\n  For the <CodeLiteral>INNER</CodeLiteral> and <CodeLiteral>OUTER</CodeLiteral> join types, a join condition must be specified, namely exactly one of <CodeLiteral>ON join_condition</CodeLiteral>, <CodeLiteral>USING (join_column [, ...])</CodeLiteral>, or <CodeLiteral>NATURAL</CodeLiteral>. See below for the meaning.\n  A <CodeLiteral>JOIN</CodeLiteral> clause combines two <CodeLiteral>FROM</CodeLiteral> items, which for convenience we will refer to as \u201ctables\u201d, though in reality they can be any type of <CodeLiteral>FROM</CodeLiteral> item. Use parentheses if necessary to determine the order of nesting. In the absence of parentheses, <CodeLiteral>JOIN</CodeLiteral>s nest left-to-right. In any case <CodeLiteral>JOIN</CodeLiteral> binds more tightly than the commas separating <CodeLiteral>FROM</CodeLiteral>-list items. All the <CodeLiteral>JOIN</CodeLiteral> options are just a notational convenience, since they do nothing you couldn't do with plain <CodeLiteral>FROM</CodeLiteral> and <CodeLiteral>WHERE</CodeLiteral>.\n  <CodeLiteral>LEFT OUTER JOIN</CodeLiteral> returns all rows in the qualified Cartesian product (i.e., all combined rows that pass its join condition), plus one copy of each row in the left-hand table for which there was no right-hand row that passed the join condition. This left-hand row is extended to the full width of the joined table by inserting null values for the right-hand columns. Note that only the <CodeLiteral>JOIN</CodeLiteral> clause's own condition is considered while deciding which rows have matches. Outer conditions are applied afterwards.\n  Conversely, <CodeLiteral>RIGHT OUTER JOIN</CodeLiteral> returns all the joined rows, plus one row for each unmatched right-hand row (extended with nulls on the left). This is just a notational convenience, since you could convert it to a <CodeLiteral>LEFT OUTER JOIN</CodeLiteral> by switching the left and right tables.\n  <CodeLiteral>FULL OUTER JOIN</CodeLiteral> returns all the joined rows, plus one row for each unmatched left-hand row (extended with nulls on the right), plus one row for each unmatched right-hand row (extended with nulls on the left).<sep>[DEMO]: SELECT * FROM employees LEFT OUTER JOIN departments USING (department_id);",
        "example": [
            "SELECT * FROM employees LEFT OUTER JOIN departments USING (department_id);"
        ],
        "link": []
    },
    {
        "type": "keyword",
        "keyword": "from_item LEFT JOIN from_item USING ( join_column ) ",
        "tree": " (table_ref (join_type LEFT) JOIN (join_qual USING ( )))",
        "description": "The <CodeLiteral>LATERAL</CodeLiteral> key word can precede a sub-SELECT <CodeLiteral>FROM</CodeLiteral> item. This allows the sub-SELECT to refer to columns of <CodeLiteral>FROM</CodeLiteral> items that appear before it in the <CodeLiteral>FROM</CodeLiteral> list. (Without <CodeLiteral>LATERAL</CodeLiteral>, each sub-SELECT is evaluated independently and so cannot cross-reference any other <CodeLiteral>FROM</CodeLiteral> item.)\n  <CodeLiteral>LATERAL</CodeLiteral> can also precede a function-call <CodeLiteral>FROM</CodeLiteral> item, but in this case it is a noise word, because the function expression can refer to earlier <CodeLiteral>FROM</CodeLiteral> items in any case.\n  A <CodeLiteral>LATERAL</CodeLiteral> item can appear at top level in the <CodeLiteral>FROM</CodeLiteral> list, or within a <CodeLiteral>JOIN</CodeLiteral> tree. In the latter case it can also refer to any items that are on the left-hand side of a <CodeLiteral>JOIN</CodeLiteral> that it is on the right-hand side of.\n  When a <CodeLiteral>FROM</CodeLiteral> item contains <CodeLiteral>LATERAL</CodeLiteral> cross-references, evaluation proceeds as follows: for each row of the <CodeLiteral>FROM</CodeLiteral> item providing the cross-referenced column(s), or set of rows of multiple <CodeLiteral>FROM</CodeLiteral> items providing the columns, the <CodeLiteral>LATERAL</CodeLiteral> item is evaluated using that row or row set's values of the columns. The resulting row(s) are joined as usual with the rows they were computed from. This is repeated for each row or set of rows from the column source table(s).\n  The column source table(s) must be <CodeLiteral>INNER</CodeLiteral> or <CodeLiteral>LEFT</CodeLiteral> joined to the <CodeLiteral>LATERAL</CodeLiteral> item, else there would not be a well-defined set of rows from which to compute each set of rows for the <CodeLiteral>LATERAL</CodeLiteral> item. Thus, although a construct such as <CodeLiteral>X RIGHT JOIN LATERAL Y</CodeLiteral> is syntactically valid, it is not actually allowed for Y to reference X. Join type can be one of <CodeLiteral>[ INNER ] JOIN</CodeLiteral>\n   <CodeLiteral>LEFT [ OUTER ] JOIN</CodeLiteral>\n  <CodeLiteral>RIGHT [ OUTER ] JOIN</CodeLiteral>\n   <CodeLiteral>FULL [ OUTER ] JOIN</CodeLiteral>\n  For the <CodeLiteral>INNER</CodeLiteral> and <CodeLiteral>OUTER</CodeLiteral> join types, a join condition must be specified, namely exactly one of <CodeLiteral>ON join_condition</CodeLiteral>, <CodeLiteral>USING (join_column [, ...])</CodeLiteral>, or <CodeLiteral>NATURAL</CodeLiteral>. See below for the meaning.\n  A <CodeLiteral>JOIN</CodeLiteral> clause combines two <CodeLiteral>FROM</CodeLiteral> items, which for convenience we will refer to as \u201ctables\u201d, though in reality they can be any type of <CodeLiteral>FROM</CodeLiteral> item. Use parentheses if necessary to determine the order of nesting. In the absence of parentheses, <CodeLiteral>JOIN</CodeLiteral>s nest left-to-right. In any case <CodeLiteral>JOIN</CodeLiteral> binds more tightly than the commas separating <CodeLiteral>FROM</CodeLiteral>-list items. All the <CodeLiteral>JOIN</CodeLiteral> options are just a notational convenience, since they do nothing you couldn't do with plain <CodeLiteral>FROM</CodeLiteral> and <CodeLiteral>WHERE</CodeLiteral>.\n  <CodeLiteral>LEFT OUTER JOIN</CodeLiteral> returns all rows in the qualified Cartesian product (i.e., all combined rows that pass its join condition), plus one copy of each row in the left-hand table for which there was no right-hand row that passed the join condition. This left-hand row is extended to the full width of the joined table by inserting null values for the right-hand columns. Note that only the <CodeLiteral>JOIN</CodeLiteral> clause's own condition is considered while deciding which rows have matches. Outer conditions are applied afterwards.\n  Conversely, <CodeLiteral>RIGHT OUTER JOIN</CodeLiteral> returns all the joined rows, plus one row for each unmatched right-hand row (extended with nulls on the left). This is just a notational convenience, since you could convert it to a <CodeLiteral>LEFT OUTER JOIN</CodeLiteral> by switching the left and right tables.\n  <CodeLiteral>FULL OUTER JOIN</CodeLiteral> returns all the joined rows, plus one row for each unmatched left-hand row (extended with nulls on the right), plus one row for each unmatched right-hand row (extended with nulls on the left).",
        "detail": "[DESCRIPTION]: The <CodeLiteral>LATERAL</CodeLiteral> key word can precede a sub-SELECT <CodeLiteral>FROM</CodeLiteral> item. This allows the sub-SELECT to refer to columns of <CodeLiteral>FROM</CodeLiteral> items that appear before it in the <CodeLiteral>FROM</CodeLiteral> list. (Without <CodeLiteral>LATERAL</CodeLiteral>, each sub-SELECT is evaluated independently and so cannot cross-reference any other <CodeLiteral>FROM</CodeLiteral> item.)\n  <CodeLiteral>LATERAL</CodeLiteral> can also precede a function-call <CodeLiteral>FROM</CodeLiteral> item, but in this case it is a noise word, because the function expression can refer to earlier <CodeLiteral>FROM</CodeLiteral> items in any case.\n  A <CodeLiteral>LATERAL</CodeLiteral> item can appear at top level in the <CodeLiteral>FROM</CodeLiteral> list, or within a <CodeLiteral>JOIN</CodeLiteral> tree. In the latter case it can also refer to any items that are on the left-hand side of a <CodeLiteral>JOIN</CodeLiteral> that it is on the right-hand side of.\n  When a <CodeLiteral>FROM</CodeLiteral> item contains <CodeLiteral>LATERAL</CodeLiteral> cross-references, evaluation proceeds as follows: for each row of the <CodeLiteral>FROM</CodeLiteral> item providing the cross-referenced column(s), or set of rows of multiple <CodeLiteral>FROM</CodeLiteral> items providing the columns, the <CodeLiteral>LATERAL</CodeLiteral> item is evaluated using that row or row set's values of the columns. The resulting row(s) are joined as usual with the rows they were computed from. This is repeated for each row or set of rows from the column source table(s).\n  The column source table(s) must be <CodeLiteral>INNER</CodeLiteral> or <CodeLiteral>LEFT</CodeLiteral> joined to the <CodeLiteral>LATERAL</CodeLiteral> item, else there would not be a well-defined set of rows from which to compute each set of rows for the <CodeLiteral>LATERAL</CodeLiteral> item. Thus, although a construct such as <CodeLiteral>X RIGHT JOIN LATERAL Y</CodeLiteral> is syntactically valid, it is not actually allowed for Y to reference X. Join type can be one of <CodeLiteral>[ INNER ] JOIN</CodeLiteral>\n   <CodeLiteral>LEFT [ OUTER ] JOIN</CodeLiteral>\n  <CodeLiteral>RIGHT [ OUTER ] JOIN</CodeLiteral>\n   <CodeLiteral>FULL [ OUTER ] JOIN</CodeLiteral>\n  For the <CodeLiteral>INNER</CodeLiteral> and <CodeLiteral>OUTER</CodeLiteral> join types, a join condition must be specified, namely exactly one of <CodeLiteral>ON join_condition</CodeLiteral>, <CodeLiteral>USING (join_column [, ...])</CodeLiteral>, or <CodeLiteral>NATURAL</CodeLiteral>. See below for the meaning.\n  A <CodeLiteral>JOIN</CodeLiteral> clause combines two <CodeLiteral>FROM</CodeLiteral> items, which for convenience we will refer to as \u201ctables\u201d, though in reality they can be any type of <CodeLiteral>FROM</CodeLiteral> item. Use parentheses if necessary to determine the order of nesting. In the absence of parentheses, <CodeLiteral>JOIN</CodeLiteral>s nest left-to-right. In any case <CodeLiteral>JOIN</CodeLiteral> binds more tightly than the commas separating <CodeLiteral>FROM</CodeLiteral>-list items. All the <CodeLiteral>JOIN</CodeLiteral> options are just a notational convenience, since they do nothing you couldn't do with plain <CodeLiteral>FROM</CodeLiteral> and <CodeLiteral>WHERE</CodeLiteral>.\n  <CodeLiteral>LEFT OUTER JOIN</CodeLiteral> returns all rows in the qualified Cartesian product (i.e., all combined rows that pass its join condition), plus one copy of each row in the left-hand table for which there was no right-hand row that passed the join condition. This left-hand row is extended to the full width of the joined table by inserting null values for the right-hand columns. Note that only the <CodeLiteral>JOIN</CodeLiteral> clause's own condition is considered while deciding which rows have matches. Outer conditions are applied afterwards.\n  Conversely, <CodeLiteral>RIGHT OUTER JOIN</CodeLiteral> returns all the joined rows, plus one row for each unmatched right-hand row (extended with nulls on the left). This is just a notational convenience, since you could convert it to a <CodeLiteral>LEFT OUTER JOIN</CodeLiteral> by switching the left and right tables.\n  <CodeLiteral>FULL OUTER JOIN</CodeLiteral> returns all the joined rows, plus one row for each unmatched left-hand row (extended with nulls on the right), plus one row for each unmatched right-hand row (extended with nulls on the left).<sep>[DEMO]: SELECT * FROM employees e LEFT JOIN departments d USING (department_id);",
        "example": [
            "SELECT * FROM employees e LEFT JOIN departments d USING (department_id);"
        ],
        "link": []
    },
    {
        "type": "keyword",
        "keyword": "from_item RIGHT OUTER JOIN from_item USING ( join_column ) ",
        "tree": " (table_ref (join_type RIGHT OUTER) JOIN (join_qual USING ( )))",
        "description": "The <CodeLiteral>LATERAL</CodeLiteral> key word can precede a sub-SELECT <CodeLiteral>FROM</CodeLiteral> item. This allows the sub-SELECT to refer to columns of <CodeLiteral>FROM</CodeLiteral> items that appear before it in the <CodeLiteral>FROM</CodeLiteral> list. (Without <CodeLiteral>LATERAL</CodeLiteral>, each sub-SELECT is evaluated independently and so cannot cross-reference any other <CodeLiteral>FROM</CodeLiteral> item.)\n  <CodeLiteral>LATERAL</CodeLiteral> can also precede a function-call <CodeLiteral>FROM</CodeLiteral> item, but in this case it is a noise word, because the function expression can refer to earlier <CodeLiteral>FROM</CodeLiteral> items in any case.\n  A <CodeLiteral>LATERAL</CodeLiteral> item can appear at top level in the <CodeLiteral>FROM</CodeLiteral> list, or within a <CodeLiteral>JOIN</CodeLiteral> tree. In the latter case it can also refer to any items that are on the left-hand side of a <CodeLiteral>JOIN</CodeLiteral> that it is on the right-hand side of.\n  When a <CodeLiteral>FROM</CodeLiteral> item contains <CodeLiteral>LATERAL</CodeLiteral> cross-references, evaluation proceeds as follows: for each row of the <CodeLiteral>FROM</CodeLiteral> item providing the cross-referenced column(s), or set of rows of multiple <CodeLiteral>FROM</CodeLiteral> items providing the columns, the <CodeLiteral>LATERAL</CodeLiteral> item is evaluated using that row or row set's values of the columns. The resulting row(s) are joined as usual with the rows they were computed from. This is repeated for each row or set of rows from the column source table(s).\n  The column source table(s) must be <CodeLiteral>INNER</CodeLiteral> or <CodeLiteral>LEFT</CodeLiteral> joined to the <CodeLiteral>LATERAL</CodeLiteral> item, else there would not be a well-defined set of rows from which to compute each set of rows for the <CodeLiteral>LATERAL</CodeLiteral> item. Thus, although a construct such as <CodeLiteral>X RIGHT JOIN LATERAL Y</CodeLiteral> is syntactically valid, it is not actually allowed for Y to reference X. Join type can be one of <CodeLiteral>[ INNER ] JOIN</CodeLiteral>\n   <CodeLiteral>LEFT [ OUTER ] JOIN</CodeLiteral>\n  <CodeLiteral>RIGHT [ OUTER ] JOIN</CodeLiteral>\n   <CodeLiteral>FULL [ OUTER ] JOIN</CodeLiteral>\n  For the <CodeLiteral>INNER</CodeLiteral> and <CodeLiteral>OUTER</CodeLiteral> join types, a join condition must be specified, namely exactly one of <CodeLiteral>ON join_condition</CodeLiteral>, <CodeLiteral>USING (join_column [, ...])</CodeLiteral>, or <CodeLiteral>NATURAL</CodeLiteral>. See below for the meaning.\n  A <CodeLiteral>JOIN</CodeLiteral> clause combines two <CodeLiteral>FROM</CodeLiteral> items, which for convenience we will refer to as \u201ctables\u201d, though in reality they can be any type of <CodeLiteral>FROM</CodeLiteral> item. Use parentheses if necessary to determine the order of nesting. In the absence of parentheses, <CodeLiteral>JOIN</CodeLiteral>s nest left-to-right. In any case <CodeLiteral>JOIN</CodeLiteral> binds more tightly than the commas separating <CodeLiteral>FROM</CodeLiteral>-list items. All the <CodeLiteral>JOIN</CodeLiteral> options are just a notational convenience, since they do nothing you couldn't do with plain <CodeLiteral>FROM</CodeLiteral> and <CodeLiteral>WHERE</CodeLiteral>.\n  <CodeLiteral>LEFT OUTER JOIN</CodeLiteral> returns all rows in the qualified Cartesian product (i.e., all combined rows that pass its join condition), plus one copy of each row in the left-hand table for which there was no right-hand row that passed the join condition. This left-hand row is extended to the full width of the joined table by inserting null values for the right-hand columns. Note that only the <CodeLiteral>JOIN</CodeLiteral> clause's own condition is considered while deciding which rows have matches. Outer conditions are applied afterwards.\n  Conversely, <CodeLiteral>RIGHT OUTER JOIN</CodeLiteral> returns all the joined rows, plus one row for each unmatched right-hand row (extended with nulls on the left). This is just a notational convenience, since you could convert it to a <CodeLiteral>LEFT OUTER JOIN</CodeLiteral> by switching the left and right tables.\n  <CodeLiteral>FULL OUTER JOIN</CodeLiteral> returns all the joined rows, plus one row for each unmatched left-hand row (extended with nulls on the right), plus one row for each unmatched right-hand row (extended with nulls on the left).",
        "detail": "[DESCRIPTION]: The <CodeLiteral>LATERAL</CodeLiteral> key word can precede a sub-SELECT <CodeLiteral>FROM</CodeLiteral> item. This allows the sub-SELECT to refer to columns of <CodeLiteral>FROM</CodeLiteral> items that appear before it in the <CodeLiteral>FROM</CodeLiteral> list. (Without <CodeLiteral>LATERAL</CodeLiteral>, each sub-SELECT is evaluated independently and so cannot cross-reference any other <CodeLiteral>FROM</CodeLiteral> item.)\n  <CodeLiteral>LATERAL</CodeLiteral> can also precede a function-call <CodeLiteral>FROM</CodeLiteral> item, but in this case it is a noise word, because the function expression can refer to earlier <CodeLiteral>FROM</CodeLiteral> items in any case.\n  A <CodeLiteral>LATERAL</CodeLiteral> item can appear at top level in the <CodeLiteral>FROM</CodeLiteral> list, or within a <CodeLiteral>JOIN</CodeLiteral> tree. In the latter case it can also refer to any items that are on the left-hand side of a <CodeLiteral>JOIN</CodeLiteral> that it is on the right-hand side of.\n  When a <CodeLiteral>FROM</CodeLiteral> item contains <CodeLiteral>LATERAL</CodeLiteral> cross-references, evaluation proceeds as follows: for each row of the <CodeLiteral>FROM</CodeLiteral> item providing the cross-referenced column(s), or set of rows of multiple <CodeLiteral>FROM</CodeLiteral> items providing the columns, the <CodeLiteral>LATERAL</CodeLiteral> item is evaluated using that row or row set's values of the columns. The resulting row(s) are joined as usual with the rows they were computed from. This is repeated for each row or set of rows from the column source table(s).\n  The column source table(s) must be <CodeLiteral>INNER</CodeLiteral> or <CodeLiteral>LEFT</CodeLiteral> joined to the <CodeLiteral>LATERAL</CodeLiteral> item, else there would not be a well-defined set of rows from which to compute each set of rows for the <CodeLiteral>LATERAL</CodeLiteral> item. Thus, although a construct such as <CodeLiteral>X RIGHT JOIN LATERAL Y</CodeLiteral> is syntactically valid, it is not actually allowed for Y to reference X. Join type can be one of <CodeLiteral>[ INNER ] JOIN</CodeLiteral>\n   <CodeLiteral>LEFT [ OUTER ] JOIN</CodeLiteral>\n  <CodeLiteral>RIGHT [ OUTER ] JOIN</CodeLiteral>\n   <CodeLiteral>FULL [ OUTER ] JOIN</CodeLiteral>\n  For the <CodeLiteral>INNER</CodeLiteral> and <CodeLiteral>OUTER</CodeLiteral> join types, a join condition must be specified, namely exactly one of <CodeLiteral>ON join_condition</CodeLiteral>, <CodeLiteral>USING (join_column [, ...])</CodeLiteral>, or <CodeLiteral>NATURAL</CodeLiteral>. See below for the meaning.\n  A <CodeLiteral>JOIN</CodeLiteral> clause combines two <CodeLiteral>FROM</CodeLiteral> items, which for convenience we will refer to as \u201ctables\u201d, though in reality they can be any type of <CodeLiteral>FROM</CodeLiteral> item. Use parentheses if necessary to determine the order of nesting. In the absence of parentheses, <CodeLiteral>JOIN</CodeLiteral>s nest left-to-right. In any case <CodeLiteral>JOIN</CodeLiteral> binds more tightly than the commas separating <CodeLiteral>FROM</CodeLiteral>-list items. All the <CodeLiteral>JOIN</CodeLiteral> options are just a notational convenience, since they do nothing you couldn't do with plain <CodeLiteral>FROM</CodeLiteral> and <CodeLiteral>WHERE</CodeLiteral>.\n  <CodeLiteral>LEFT OUTER JOIN</CodeLiteral> returns all rows in the qualified Cartesian product (i.e., all combined rows that pass its join condition), plus one copy of each row in the left-hand table for which there was no right-hand row that passed the join condition. This left-hand row is extended to the full width of the joined table by inserting null values for the right-hand columns. Note that only the <CodeLiteral>JOIN</CodeLiteral> clause's own condition is considered while deciding which rows have matches. Outer conditions are applied afterwards.\n  Conversely, <CodeLiteral>RIGHT OUTER JOIN</CodeLiteral> returns all the joined rows, plus one row for each unmatched right-hand row (extended with nulls on the left). This is just a notational convenience, since you could convert it to a <CodeLiteral>LEFT OUTER JOIN</CodeLiteral> by switching the left and right tables.\n  <CodeLiteral>FULL OUTER JOIN</CodeLiteral> returns all the joined rows, plus one row for each unmatched left-hand row (extended with nulls on the right), plus one row for each unmatched right-hand row (extended with nulls on the left).<sep>[DEMO]: SELECT * FROM employees RIGHT OUTER JOIN departments USING (department_id);",
        "example": [
            "SELECT * FROM employees RIGHT OUTER JOIN departments USING (department_id);"
        ],
        "link": []
    },
    {
        "type": "keyword",
        "keyword": "from_item RIGHT JOIN from_item USING ( join_column ) ",
        "tree": " (table_ref (join_type RIGHT) JOIN (join_qual USING ( )))",
        "description": "The <CodeLiteral>LATERAL</CodeLiteral> key word can precede a sub-SELECT <CodeLiteral>FROM</CodeLiteral> item. This allows the sub-SELECT to refer to columns of <CodeLiteral>FROM</CodeLiteral> items that appear before it in the <CodeLiteral>FROM</CodeLiteral> list. (Without <CodeLiteral>LATERAL</CodeLiteral>, each sub-SELECT is evaluated independently and so cannot cross-reference any other <CodeLiteral>FROM</CodeLiteral> item.)\n  <CodeLiteral>LATERAL</CodeLiteral> can also precede a function-call <CodeLiteral>FROM</CodeLiteral> item, but in this case it is a noise word, because the function expression can refer to earlier <CodeLiteral>FROM</CodeLiteral> items in any case.\n  A <CodeLiteral>LATERAL</CodeLiteral> item can appear at top level in the <CodeLiteral>FROM</CodeLiteral> list, or within a <CodeLiteral>JOIN</CodeLiteral> tree. In the latter case it can also refer to any items that are on the left-hand side of a <CodeLiteral>JOIN</CodeLiteral> that it is on the right-hand side of.\n  When a <CodeLiteral>FROM</CodeLiteral> item contains <CodeLiteral>LATERAL</CodeLiteral> cross-references, evaluation proceeds as follows: for each row of the <CodeLiteral>FROM</CodeLiteral> item providing the cross-referenced column(s), or set of rows of multiple <CodeLiteral>FROM</CodeLiteral> items providing the columns, the <CodeLiteral>LATERAL</CodeLiteral> item is evaluated using that row or row set's values of the columns. The resulting row(s) are joined as usual with the rows they were computed from. This is repeated for each row or set of rows from the column source table(s).\n  The column source table(s) must be <CodeLiteral>INNER</CodeLiteral> or <CodeLiteral>LEFT</CodeLiteral> joined to the <CodeLiteral>LATERAL</CodeLiteral> item, else there would not be a well-defined set of rows from which to compute each set of rows for the <CodeLiteral>LATERAL</CodeLiteral> item. Thus, although a construct such as <CodeLiteral>X RIGHT JOIN LATERAL Y</CodeLiteral> is syntactically valid, it is not actually allowed for Y to reference X. Join type can be one of <CodeLiteral>[ INNER ] JOIN</CodeLiteral>\n   <CodeLiteral>LEFT [ OUTER ] JOIN</CodeLiteral>\n  <CodeLiteral>RIGHT [ OUTER ] JOIN</CodeLiteral>\n   <CodeLiteral>FULL [ OUTER ] JOIN</CodeLiteral>\n  For the <CodeLiteral>INNER</CodeLiteral> and <CodeLiteral>OUTER</CodeLiteral> join types, a join condition must be specified, namely exactly one of <CodeLiteral>ON join_condition</CodeLiteral>, <CodeLiteral>USING (join_column [, ...])</CodeLiteral>, or <CodeLiteral>NATURAL</CodeLiteral>. See below for the meaning.\n  A <CodeLiteral>JOIN</CodeLiteral> clause combines two <CodeLiteral>FROM</CodeLiteral> items, which for convenience we will refer to as \u201ctables\u201d, though in reality they can be any type of <CodeLiteral>FROM</CodeLiteral> item. Use parentheses if necessary to determine the order of nesting. In the absence of parentheses, <CodeLiteral>JOIN</CodeLiteral>s nest left-to-right. In any case <CodeLiteral>JOIN</CodeLiteral> binds more tightly than the commas separating <CodeLiteral>FROM</CodeLiteral>-list items. All the <CodeLiteral>JOIN</CodeLiteral> options are just a notational convenience, since they do nothing you couldn't do with plain <CodeLiteral>FROM</CodeLiteral> and <CodeLiteral>WHERE</CodeLiteral>.\n  <CodeLiteral>LEFT OUTER JOIN</CodeLiteral> returns all rows in the qualified Cartesian product (i.e., all combined rows that pass its join condition), plus one copy of each row in the left-hand table for which there was no right-hand row that passed the join condition. This left-hand row is extended to the full width of the joined table by inserting null values for the right-hand columns. Note that only the <CodeLiteral>JOIN</CodeLiteral> clause's own condition is considered while deciding which rows have matches. Outer conditions are applied afterwards.\n  Conversely, <CodeLiteral>RIGHT OUTER JOIN</CodeLiteral> returns all the joined rows, plus one row for each unmatched right-hand row (extended with nulls on the left). This is just a notational convenience, since you could convert it to a <CodeLiteral>LEFT OUTER JOIN</CodeLiteral> by switching the left and right tables.\n  <CodeLiteral>FULL OUTER JOIN</CodeLiteral> returns all the joined rows, plus one row for each unmatched left-hand row (extended with nulls on the right), plus one row for each unmatched right-hand row (extended with nulls on the left).",
        "detail": "[DESCRIPTION]: The <CodeLiteral>LATERAL</CodeLiteral> key word can precede a sub-SELECT <CodeLiteral>FROM</CodeLiteral> item. This allows the sub-SELECT to refer to columns of <CodeLiteral>FROM</CodeLiteral> items that appear before it in the <CodeLiteral>FROM</CodeLiteral> list. (Without <CodeLiteral>LATERAL</CodeLiteral>, each sub-SELECT is evaluated independently and so cannot cross-reference any other <CodeLiteral>FROM</CodeLiteral> item.)\n  <CodeLiteral>LATERAL</CodeLiteral> can also precede a function-call <CodeLiteral>FROM</CodeLiteral> item, but in this case it is a noise word, because the function expression can refer to earlier <CodeLiteral>FROM</CodeLiteral> items in any case.\n  A <CodeLiteral>LATERAL</CodeLiteral> item can appear at top level in the <CodeLiteral>FROM</CodeLiteral> list, or within a <CodeLiteral>JOIN</CodeLiteral> tree. In the latter case it can also refer to any items that are on the left-hand side of a <CodeLiteral>JOIN</CodeLiteral> that it is on the right-hand side of.\n  When a <CodeLiteral>FROM</CodeLiteral> item contains <CodeLiteral>LATERAL</CodeLiteral> cross-references, evaluation proceeds as follows: for each row of the <CodeLiteral>FROM</CodeLiteral> item providing the cross-referenced column(s), or set of rows of multiple <CodeLiteral>FROM</CodeLiteral> items providing the columns, the <CodeLiteral>LATERAL</CodeLiteral> item is evaluated using that row or row set's values of the columns. The resulting row(s) are joined as usual with the rows they were computed from. This is repeated for each row or set of rows from the column source table(s).\n  The column source table(s) must be <CodeLiteral>INNER</CodeLiteral> or <CodeLiteral>LEFT</CodeLiteral> joined to the <CodeLiteral>LATERAL</CodeLiteral> item, else there would not be a well-defined set of rows from which to compute each set of rows for the <CodeLiteral>LATERAL</CodeLiteral> item. Thus, although a construct such as <CodeLiteral>X RIGHT JOIN LATERAL Y</CodeLiteral> is syntactically valid, it is not actually allowed for Y to reference X. Join type can be one of <CodeLiteral>[ INNER ] JOIN</CodeLiteral>\n   <CodeLiteral>LEFT [ OUTER ] JOIN</CodeLiteral>\n  <CodeLiteral>RIGHT [ OUTER ] JOIN</CodeLiteral>\n   <CodeLiteral>FULL [ OUTER ] JOIN</CodeLiteral>\n  For the <CodeLiteral>INNER</CodeLiteral> and <CodeLiteral>OUTER</CodeLiteral> join types, a join condition must be specified, namely exactly one of <CodeLiteral>ON join_condition</CodeLiteral>, <CodeLiteral>USING (join_column [, ...])</CodeLiteral>, or <CodeLiteral>NATURAL</CodeLiteral>. See below for the meaning.\n  A <CodeLiteral>JOIN</CodeLiteral> clause combines two <CodeLiteral>FROM</CodeLiteral> items, which for convenience we will refer to as \u201ctables\u201d, though in reality they can be any type of <CodeLiteral>FROM</CodeLiteral> item. Use parentheses if necessary to determine the order of nesting. In the absence of parentheses, <CodeLiteral>JOIN</CodeLiteral>s nest left-to-right. In any case <CodeLiteral>JOIN</CodeLiteral> binds more tightly than the commas separating <CodeLiteral>FROM</CodeLiteral>-list items. All the <CodeLiteral>JOIN</CodeLiteral> options are just a notational convenience, since they do nothing you couldn't do with plain <CodeLiteral>FROM</CodeLiteral> and <CodeLiteral>WHERE</CodeLiteral>.\n  <CodeLiteral>LEFT OUTER JOIN</CodeLiteral> returns all rows in the qualified Cartesian product (i.e., all combined rows that pass its join condition), plus one copy of each row in the left-hand table for which there was no right-hand row that passed the join condition. This left-hand row is extended to the full width of the joined table by inserting null values for the right-hand columns. Note that only the <CodeLiteral>JOIN</CodeLiteral> clause's own condition is considered while deciding which rows have matches. Outer conditions are applied afterwards.\n  Conversely, <CodeLiteral>RIGHT OUTER JOIN</CodeLiteral> returns all the joined rows, plus one row for each unmatched right-hand row (extended with nulls on the left). This is just a notational convenience, since you could convert it to a <CodeLiteral>LEFT OUTER JOIN</CodeLiteral> by switching the left and right tables.\n  <CodeLiteral>FULL OUTER JOIN</CodeLiteral> returns all the joined rows, plus one row for each unmatched left-hand row (extended with nulls on the right), plus one row for each unmatched right-hand row (extended with nulls on the left).<sep>[DEMO]: SELECT employees.name, departments.department_name FROM employees RIGHT JOIN departments USING (department_id)",
        "example": [
            "SELECT employees.name, departments.department_name FROM employees RIGHT JOIN departments USING (department_id)"
        ],
        "link": []
    },
    {
        "type": "keyword",
        "keyword": "from_item FULL OUTER JOIN from_item USING ( join_column ) ",
        "tree": " (table_ref (join_type FULL OUTER) JOIN (join_qual USING ( )))",
        "description": "The <CodeLiteral>LATERAL</CodeLiteral> key word can precede a sub-SELECT <CodeLiteral>FROM</CodeLiteral> item. This allows the sub-SELECT to refer to columns of <CodeLiteral>FROM</CodeLiteral> items that appear before it in the <CodeLiteral>FROM</CodeLiteral> list. (Without <CodeLiteral>LATERAL</CodeLiteral>, each sub-SELECT is evaluated independently and so cannot cross-reference any other <CodeLiteral>FROM</CodeLiteral> item.)\n  <CodeLiteral>LATERAL</CodeLiteral> can also precede a function-call <CodeLiteral>FROM</CodeLiteral> item, but in this case it is a noise word, because the function expression can refer to earlier <CodeLiteral>FROM</CodeLiteral> items in any case.\n  A <CodeLiteral>LATERAL</CodeLiteral> item can appear at top level in the <CodeLiteral>FROM</CodeLiteral> list, or within a <CodeLiteral>JOIN</CodeLiteral> tree. In the latter case it can also refer to any items that are on the left-hand side of a <CodeLiteral>JOIN</CodeLiteral> that it is on the right-hand side of.\n  When a <CodeLiteral>FROM</CodeLiteral> item contains <CodeLiteral>LATERAL</CodeLiteral> cross-references, evaluation proceeds as follows: for each row of the <CodeLiteral>FROM</CodeLiteral> item providing the cross-referenced column(s), or set of rows of multiple <CodeLiteral>FROM</CodeLiteral> items providing the columns, the <CodeLiteral>LATERAL</CodeLiteral> item is evaluated using that row or row set's values of the columns. The resulting row(s) are joined as usual with the rows they were computed from. This is repeated for each row or set of rows from the column source table(s).\n  The column source table(s) must be <CodeLiteral>INNER</CodeLiteral> or <CodeLiteral>LEFT</CodeLiteral> joined to the <CodeLiteral>LATERAL</CodeLiteral> item, else there would not be a well-defined set of rows from which to compute each set of rows for the <CodeLiteral>LATERAL</CodeLiteral> item. Thus, although a construct such as <CodeLiteral>X RIGHT JOIN LATERAL Y</CodeLiteral> is syntactically valid, it is not actually allowed for Y to reference X. Join type can be one of <CodeLiteral>[ INNER ] JOIN</CodeLiteral>\n   <CodeLiteral>LEFT [ OUTER ] JOIN</CodeLiteral>\n  <CodeLiteral>RIGHT [ OUTER ] JOIN</CodeLiteral>\n   <CodeLiteral>FULL [ OUTER ] JOIN</CodeLiteral>\n  For the <CodeLiteral>INNER</CodeLiteral> and <CodeLiteral>OUTER</CodeLiteral> join types, a join condition must be specified, namely exactly one of <CodeLiteral>ON join_condition</CodeLiteral>, <CodeLiteral>USING (join_column [, ...])</CodeLiteral>, or <CodeLiteral>NATURAL</CodeLiteral>. See below for the meaning.\n  A <CodeLiteral>JOIN</CodeLiteral> clause combines two <CodeLiteral>FROM</CodeLiteral> items, which for convenience we will refer to as \u201ctables\u201d, though in reality they can be any type of <CodeLiteral>FROM</CodeLiteral> item. Use parentheses if necessary to determine the order of nesting. In the absence of parentheses, <CodeLiteral>JOIN</CodeLiteral>s nest left-to-right. In any case <CodeLiteral>JOIN</CodeLiteral> binds more tightly than the commas separating <CodeLiteral>FROM</CodeLiteral>-list items. All the <CodeLiteral>JOIN</CodeLiteral> options are just a notational convenience, since they do nothing you couldn't do with plain <CodeLiteral>FROM</CodeLiteral> and <CodeLiteral>WHERE</CodeLiteral>.\n  <CodeLiteral>LEFT OUTER JOIN</CodeLiteral> returns all rows in the qualified Cartesian product (i.e., all combined rows that pass its join condition), plus one copy of each row in the left-hand table for which there was no right-hand row that passed the join condition. This left-hand row is extended to the full width of the joined table by inserting null values for the right-hand columns. Note that only the <CodeLiteral>JOIN</CodeLiteral> clause's own condition is considered while deciding which rows have matches. Outer conditions are applied afterwards.\n  Conversely, <CodeLiteral>RIGHT OUTER JOIN</CodeLiteral> returns all the joined rows, plus one row for each unmatched right-hand row (extended with nulls on the left). This is just a notational convenience, since you could convert it to a <CodeLiteral>LEFT OUTER JOIN</CodeLiteral> by switching the left and right tables.\n  <CodeLiteral>FULL OUTER JOIN</CodeLiteral> returns all the joined rows, plus one row for each unmatched left-hand row (extended with nulls on the right), plus one row for each unmatched right-hand row (extended with nulls on the left).",
        "detail": "[DESCRIPTION]: The <CodeLiteral>LATERAL</CodeLiteral> key word can precede a sub-SELECT <CodeLiteral>FROM</CodeLiteral> item. This allows the sub-SELECT to refer to columns of <CodeLiteral>FROM</CodeLiteral> items that appear before it in the <CodeLiteral>FROM</CodeLiteral> list. (Without <CodeLiteral>LATERAL</CodeLiteral>, each sub-SELECT is evaluated independently and so cannot cross-reference any other <CodeLiteral>FROM</CodeLiteral> item.)\n  <CodeLiteral>LATERAL</CodeLiteral> can also precede a function-call <CodeLiteral>FROM</CodeLiteral> item, but in this case it is a noise word, because the function expression can refer to earlier <CodeLiteral>FROM</CodeLiteral> items in any case.\n  A <CodeLiteral>LATERAL</CodeLiteral> item can appear at top level in the <CodeLiteral>FROM</CodeLiteral> list, or within a <CodeLiteral>JOIN</CodeLiteral> tree. In the latter case it can also refer to any items that are on the left-hand side of a <CodeLiteral>JOIN</CodeLiteral> that it is on the right-hand side of.\n  When a <CodeLiteral>FROM</CodeLiteral> item contains <CodeLiteral>LATERAL</CodeLiteral> cross-references, evaluation proceeds as follows: for each row of the <CodeLiteral>FROM</CodeLiteral> item providing the cross-referenced column(s), or set of rows of multiple <CodeLiteral>FROM</CodeLiteral> items providing the columns, the <CodeLiteral>LATERAL</CodeLiteral> item is evaluated using that row or row set's values of the columns. The resulting row(s) are joined as usual with the rows they were computed from. This is repeated for each row or set of rows from the column source table(s).\n  The column source table(s) must be <CodeLiteral>INNER</CodeLiteral> or <CodeLiteral>LEFT</CodeLiteral> joined to the <CodeLiteral>LATERAL</CodeLiteral> item, else there would not be a well-defined set of rows from which to compute each set of rows for the <CodeLiteral>LATERAL</CodeLiteral> item. Thus, although a construct such as <CodeLiteral>X RIGHT JOIN LATERAL Y</CodeLiteral> is syntactically valid, it is not actually allowed for Y to reference X. Join type can be one of <CodeLiteral>[ INNER ] JOIN</CodeLiteral>\n   <CodeLiteral>LEFT [ OUTER ] JOIN</CodeLiteral>\n  <CodeLiteral>RIGHT [ OUTER ] JOIN</CodeLiteral>\n   <CodeLiteral>FULL [ OUTER ] JOIN</CodeLiteral>\n  For the <CodeLiteral>INNER</CodeLiteral> and <CodeLiteral>OUTER</CodeLiteral> join types, a join condition must be specified, namely exactly one of <CodeLiteral>ON join_condition</CodeLiteral>, <CodeLiteral>USING (join_column [, ...])</CodeLiteral>, or <CodeLiteral>NATURAL</CodeLiteral>. See below for the meaning.\n  A <CodeLiteral>JOIN</CodeLiteral> clause combines two <CodeLiteral>FROM</CodeLiteral> items, which for convenience we will refer to as \u201ctables\u201d, though in reality they can be any type of <CodeLiteral>FROM</CodeLiteral> item. Use parentheses if necessary to determine the order of nesting. In the absence of parentheses, <CodeLiteral>JOIN</CodeLiteral>s nest left-to-right. In any case <CodeLiteral>JOIN</CodeLiteral> binds more tightly than the commas separating <CodeLiteral>FROM</CodeLiteral>-list items. All the <CodeLiteral>JOIN</CodeLiteral> options are just a notational convenience, since they do nothing you couldn't do with plain <CodeLiteral>FROM</CodeLiteral> and <CodeLiteral>WHERE</CodeLiteral>.\n  <CodeLiteral>LEFT OUTER JOIN</CodeLiteral> returns all rows in the qualified Cartesian product (i.e., all combined rows that pass its join condition), plus one copy of each row in the left-hand table for which there was no right-hand row that passed the join condition. This left-hand row is extended to the full width of the joined table by inserting null values for the right-hand columns. Note that only the <CodeLiteral>JOIN</CodeLiteral> clause's own condition is considered while deciding which rows have matches. Outer conditions are applied afterwards.\n  Conversely, <CodeLiteral>RIGHT OUTER JOIN</CodeLiteral> returns all the joined rows, plus one row for each unmatched right-hand row (extended with nulls on the left). This is just a notational convenience, since you could convert it to a <CodeLiteral>LEFT OUTER JOIN</CodeLiteral> by switching the left and right tables.\n  <CodeLiteral>FULL OUTER JOIN</CodeLiteral> returns all the joined rows, plus one row for each unmatched left-hand row (extended with nulls on the right), plus one row for each unmatched right-hand row (extended with nulls on the left).<sep>[DEMO]: SELECT * FROM employees FULL OUTER JOIN departments USING (department_id)",
        "example": [
            "SELECT * FROM employees FULL OUTER JOIN departments USING (department_id)"
        ],
        "link": []
    },
    {
        "type": "keyword",
        "keyword": "from_item FULL JOIN from_item USING ( join_column ) ",
        "tree": " (table_ref (join_type FULL) JOIN (join_qual USING ( )))",
        "description": "The <CodeLiteral>LATERAL</CodeLiteral> key word can precede a sub-SELECT <CodeLiteral>FROM</CodeLiteral> item. This allows the sub-SELECT to refer to columns of <CodeLiteral>FROM</CodeLiteral> items that appear before it in the <CodeLiteral>FROM</CodeLiteral> list. (Without <CodeLiteral>LATERAL</CodeLiteral>, each sub-SELECT is evaluated independently and so cannot cross-reference any other <CodeLiteral>FROM</CodeLiteral> item.)\n  <CodeLiteral>LATERAL</CodeLiteral> can also precede a function-call <CodeLiteral>FROM</CodeLiteral> item, but in this case it is a noise word, because the function expression can refer to earlier <CodeLiteral>FROM</CodeLiteral> items in any case.\n  A <CodeLiteral>LATERAL</CodeLiteral> item can appear at top level in the <CodeLiteral>FROM</CodeLiteral> list, or within a <CodeLiteral>JOIN</CodeLiteral> tree. In the latter case it can also refer to any items that are on the left-hand side of a <CodeLiteral>JOIN</CodeLiteral> that it is on the right-hand side of.\n  When a <CodeLiteral>FROM</CodeLiteral> item contains <CodeLiteral>LATERAL</CodeLiteral> cross-references, evaluation proceeds as follows: for each row of the <CodeLiteral>FROM</CodeLiteral> item providing the cross-referenced column(s), or set of rows of multiple <CodeLiteral>FROM</CodeLiteral> items providing the columns, the <CodeLiteral>LATERAL</CodeLiteral> item is evaluated using that row or row set's values of the columns. The resulting row(s) are joined as usual with the rows they were computed from. This is repeated for each row or set of rows from the column source table(s).\n  The column source table(s) must be <CodeLiteral>INNER</CodeLiteral> or <CodeLiteral>LEFT</CodeLiteral> joined to the <CodeLiteral>LATERAL</CodeLiteral> item, else there would not be a well-defined set of rows from which to compute each set of rows for the <CodeLiteral>LATERAL</CodeLiteral> item. Thus, although a construct such as <CodeLiteral>X RIGHT JOIN LATERAL Y</CodeLiteral> is syntactically valid, it is not actually allowed for Y to reference X. Join type can be one of <CodeLiteral>[ INNER ] JOIN</CodeLiteral>\n   <CodeLiteral>LEFT [ OUTER ] JOIN</CodeLiteral>\n  <CodeLiteral>RIGHT [ OUTER ] JOIN</CodeLiteral>\n   <CodeLiteral>FULL [ OUTER ] JOIN</CodeLiteral>\n  For the <CodeLiteral>INNER</CodeLiteral> and <CodeLiteral>OUTER</CodeLiteral> join types, a join condition must be specified, namely exactly one of <CodeLiteral>ON join_condition</CodeLiteral>, <CodeLiteral>USING (join_column [, ...])</CodeLiteral>, or <CodeLiteral>NATURAL</CodeLiteral>. See below for the meaning.\n  A <CodeLiteral>JOIN</CodeLiteral> clause combines two <CodeLiteral>FROM</CodeLiteral> items, which for convenience we will refer to as \u201ctables\u201d, though in reality they can be any type of <CodeLiteral>FROM</CodeLiteral> item. Use parentheses if necessary to determine the order of nesting. In the absence of parentheses, <CodeLiteral>JOIN</CodeLiteral>s nest left-to-right. In any case <CodeLiteral>JOIN</CodeLiteral> binds more tightly than the commas separating <CodeLiteral>FROM</CodeLiteral>-list items. All the <CodeLiteral>JOIN</CodeLiteral> options are just a notational convenience, since they do nothing you couldn't do with plain <CodeLiteral>FROM</CodeLiteral> and <CodeLiteral>WHERE</CodeLiteral>.\n  <CodeLiteral>LEFT OUTER JOIN</CodeLiteral> returns all rows in the qualified Cartesian product (i.e., all combined rows that pass its join condition), plus one copy of each row in the left-hand table for which there was no right-hand row that passed the join condition. This left-hand row is extended to the full width of the joined table by inserting null values for the right-hand columns. Note that only the <CodeLiteral>JOIN</CodeLiteral> clause's own condition is considered while deciding which rows have matches. Outer conditions are applied afterwards.\n  Conversely, <CodeLiteral>RIGHT OUTER JOIN</CodeLiteral> returns all the joined rows, plus one row for each unmatched right-hand row (extended with nulls on the left). This is just a notational convenience, since you could convert it to a <CodeLiteral>LEFT OUTER JOIN</CodeLiteral> by switching the left and right tables.\n  <CodeLiteral>FULL OUTER JOIN</CodeLiteral> returns all the joined rows, plus one row for each unmatched left-hand row (extended with nulls on the right), plus one row for each unmatched right-hand row (extended with nulls on the left).",
        "detail": "[DESCRIPTION]: The <CodeLiteral>LATERAL</CodeLiteral> key word can precede a sub-SELECT <CodeLiteral>FROM</CodeLiteral> item. This allows the sub-SELECT to refer to columns of <CodeLiteral>FROM</CodeLiteral> items that appear before it in the <CodeLiteral>FROM</CodeLiteral> list. (Without <CodeLiteral>LATERAL</CodeLiteral>, each sub-SELECT is evaluated independently and so cannot cross-reference any other <CodeLiteral>FROM</CodeLiteral> item.)\n  <CodeLiteral>LATERAL</CodeLiteral> can also precede a function-call <CodeLiteral>FROM</CodeLiteral> item, but in this case it is a noise word, because the function expression can refer to earlier <CodeLiteral>FROM</CodeLiteral> items in any case.\n  A <CodeLiteral>LATERAL</CodeLiteral> item can appear at top level in the <CodeLiteral>FROM</CodeLiteral> list, or within a <CodeLiteral>JOIN</CodeLiteral> tree. In the latter case it can also refer to any items that are on the left-hand side of a <CodeLiteral>JOIN</CodeLiteral> that it is on the right-hand side of.\n  When a <CodeLiteral>FROM</CodeLiteral> item contains <CodeLiteral>LATERAL</CodeLiteral> cross-references, evaluation proceeds as follows: for each row of the <CodeLiteral>FROM</CodeLiteral> item providing the cross-referenced column(s), or set of rows of multiple <CodeLiteral>FROM</CodeLiteral> items providing the columns, the <CodeLiteral>LATERAL</CodeLiteral> item is evaluated using that row or row set's values of the columns. The resulting row(s) are joined as usual with the rows they were computed from. This is repeated for each row or set of rows from the column source table(s).\n  The column source table(s) must be <CodeLiteral>INNER</CodeLiteral> or <CodeLiteral>LEFT</CodeLiteral> joined to the <CodeLiteral>LATERAL</CodeLiteral> item, else there would not be a well-defined set of rows from which to compute each set of rows for the <CodeLiteral>LATERAL</CodeLiteral> item. Thus, although a construct such as <CodeLiteral>X RIGHT JOIN LATERAL Y</CodeLiteral> is syntactically valid, it is not actually allowed for Y to reference X. Join type can be one of <CodeLiteral>[ INNER ] JOIN</CodeLiteral>\n   <CodeLiteral>LEFT [ OUTER ] JOIN</CodeLiteral>\n  <CodeLiteral>RIGHT [ OUTER ] JOIN</CodeLiteral>\n   <CodeLiteral>FULL [ OUTER ] JOIN</CodeLiteral>\n  For the <CodeLiteral>INNER</CodeLiteral> and <CodeLiteral>OUTER</CodeLiteral> join types, a join condition must be specified, namely exactly one of <CodeLiteral>ON join_condition</CodeLiteral>, <CodeLiteral>USING (join_column [, ...])</CodeLiteral>, or <CodeLiteral>NATURAL</CodeLiteral>. See below for the meaning.\n  A <CodeLiteral>JOIN</CodeLiteral> clause combines two <CodeLiteral>FROM</CodeLiteral> items, which for convenience we will refer to as \u201ctables\u201d, though in reality they can be any type of <CodeLiteral>FROM</CodeLiteral> item. Use parentheses if necessary to determine the order of nesting. In the absence of parentheses, <CodeLiteral>JOIN</CodeLiteral>s nest left-to-right. In any case <CodeLiteral>JOIN</CodeLiteral> binds more tightly than the commas separating <CodeLiteral>FROM</CodeLiteral>-list items. All the <CodeLiteral>JOIN</CodeLiteral> options are just a notational convenience, since they do nothing you couldn't do with plain <CodeLiteral>FROM</CodeLiteral> and <CodeLiteral>WHERE</CodeLiteral>.\n  <CodeLiteral>LEFT OUTER JOIN</CodeLiteral> returns all rows in the qualified Cartesian product (i.e., all combined rows that pass its join condition), plus one copy of each row in the left-hand table for which there was no right-hand row that passed the join condition. This left-hand row is extended to the full width of the joined table by inserting null values for the right-hand columns. Note that only the <CodeLiteral>JOIN</CodeLiteral> clause's own condition is considered while deciding which rows have matches. Outer conditions are applied afterwards.\n  Conversely, <CodeLiteral>RIGHT OUTER JOIN</CodeLiteral> returns all the joined rows, plus one row for each unmatched right-hand row (extended with nulls on the left). This is just a notational convenience, since you could convert it to a <CodeLiteral>LEFT OUTER JOIN</CodeLiteral> by switching the left and right tables.\n  <CodeLiteral>FULL OUTER JOIN</CodeLiteral> returns all the joined rows, plus one row for each unmatched left-hand row (extended with nulls on the right), plus one row for each unmatched right-hand row (extended with nulls on the left).<sep>[DEMO]: SELECT * FROM employees FULL JOIN departments USING (department_id);",
        "example": [
            "SELECT * FROM employees FULL JOIN departments USING (department_id);"
        ],
        "link": []
    },
    {
        "type": "keyword",
        "keyword": "GROUP BY ROLLUP ( expression ) ",
        "tree": " (group_clause GROUP BY (group_by_list (group_by_item (rollup_clause ROLLUP))))",
        "description": "The optional <CodeLiteral>GROUP BY</CodeLiteral> clause has the general form\n <code>GROUP BY grouping_element [, ...]\n</code>\n <CodeLiteral>GROUP BY</CodeLiteral> will condense into a single row all selected rows that share the same values for the grouped expressions. An expression used inside a grouping_element can be an input column name, or the name or ordinal number of an output column (SELECT list item), or an arbitrary expression formed from input-column values. In case of ambiguity, a <CodeLiteral>GROUP BY</CodeLiteral> name will be interpreted as an input-column name rather than an output column name.\n If any of <CodeLiteral>GROUPING SETS</CodeLiteral>, <CodeLiteral>ROLLUP</CodeLiteral> or <CodeLiteral>CUBE</CodeLiteral> are present as grouping elements, then the <CodeLiteral>GROUP BY</CodeLiteral> clause as a whole defines some number of independent grouping sets. The effect of this is equivalent to constructing a <CodeLiteral>UNION ALL</CodeLiteral> between subqueries with the individual grouping sets as their <CodeLiteral>GROUP BY</CodeLiteral> clauses. For further details on the handling of grouping sets see Section 7.2.4.\n Aggregate functions, if any are used, are computed across all rows making up each group, producing a separate value for each group. (If there are aggregate functions but no <CodeLiteral>GROUP BY</CodeLiteral> clause, the query is treated as having a single group comprising all the selected rows.) The set of rows fed to each aggregate function can be further filtered by attaching a <CodeLiteral>FILTER</CodeLiteral> clause to the aggregate function call; see Section 4.2.7 for more information. When a <CodeLiteral>FILTER</CodeLiteral> clause is present, only those rows matching it are included in the input to that aggregate function.\n When <CodeLiteral>GROUP BY</CodeLiteral> is present, or any aggregate functions are present, it is not valid for the SELECT list expressions to refer to ungrouped columns except within aggregate functions or when the ungrouped column is functionally dependent on the grouped columns, since there would otherwise be more than one possible value to return for an ungrouped column. A functional dependency exists if the grouped columns (or a subset thereof) are the primary key of the table containing the ungrouped column.\n Keep in mind that all aggregate functions are evaluated before evaluating any \u201cscalar\u201d expressions in the <CodeLiteral>HAVING</CodeLiteral> clause or <CodeLiteral>SELECT</CodeLiteral> list. This means that, for example, a <CodeLiteral>CASE</CodeLiteral> expression cannot be used to skip evaluation of an aggregate function; see Section 4.2.14.\n Currently, <CodeLiteral>FOR NO KEY UPDATE</CodeLiteral>, <CodeLiteral>FOR UPDATE</CodeLiteral>, <CodeLiteral>FOR SHARE</CodeLiteral> and <CodeLiteral>FOR KEY SHARE</CodeLiteral> cannot be specified with <CodeLiteral>GROUP BY</CodeLiteral>. ",
        "detail": "[DESCRIPTION]: The optional <CodeLiteral>GROUP BY</CodeLiteral> clause has the general form\n <code>GROUP BY grouping_element [, ...]\n</code>\n <CodeLiteral>GROUP BY</CodeLiteral> will condense into a single row all selected rows that share the same values for the grouped expressions. An expression used inside a grouping_element can be an input column name, or the name or ordinal number of an output column (SELECT list item), or an arbitrary expression formed from input-column values. In case of ambiguity, a <CodeLiteral>GROUP BY</CodeLiteral> name will be interpreted as an input-column name rather than an output column name.\n If any of <CodeLiteral>GROUPING SETS</CodeLiteral>, <CodeLiteral>ROLLUP</CodeLiteral> or <CodeLiteral>CUBE</CodeLiteral> are present as grouping elements, then the <CodeLiteral>GROUP BY</CodeLiteral> clause as a whole defines some number of independent grouping sets. The effect of this is equivalent to constructing a <CodeLiteral>UNION ALL</CodeLiteral> between subqueries with the individual grouping sets as their <CodeLiteral>GROUP BY</CodeLiteral> clauses. For further details on the handling of grouping sets see Section 7.2.4.\n Aggregate functions, if any are used, are computed across all rows making up each group, producing a separate value for each group. (If there are aggregate functions but no <CodeLiteral>GROUP BY</CodeLiteral> clause, the query is treated as having a single group comprising all the selected rows.) The set of rows fed to each aggregate function can be further filtered by attaching a <CodeLiteral>FILTER</CodeLiteral> clause to the aggregate function call; see Section 4.2.7 for more information. When a <CodeLiteral>FILTER</CodeLiteral> clause is present, only those rows matching it are included in the input to that aggregate function.\n When <CodeLiteral>GROUP BY</CodeLiteral> is present, or any aggregate functions are present, it is not valid for the SELECT list expressions to refer to ungrouped columns except within aggregate functions or when the ungrouped column is functionally dependent on the grouped columns, since there would otherwise be more than one possible value to return for an ungrouped column. A functional dependency exists if the grouped columns (or a subset thereof) are the primary key of the table containing the ungrouped column.\n Keep in mind that all aggregate functions are evaluated before evaluating any \u201cscalar\u201d expressions in the <CodeLiteral>HAVING</CodeLiteral> clause or <CodeLiteral>SELECT</CodeLiteral> list. This means that, for example, a <CodeLiteral>CASE</CodeLiteral> expression cannot be used to skip evaluation of an aggregate function; see Section 4.2.14.\n Currently, <CodeLiteral>FOR NO KEY UPDATE</CodeLiteral>, <CodeLiteral>FOR UPDATE</CodeLiteral>, <CodeLiteral>FOR SHARE</CodeLiteral> and <CodeLiteral>FOR KEY SHARE</CodeLiteral> cannot be specified with <CodeLiteral>GROUP BY</CodeLiteral>. <sep>[DEMO]: SELECT department, ROLLUP(total_sales) FROM sales GROUP BY ROLLUP(department)",
        "example": [
            "SELECT department, ROLLUP(total_sales) FROM sales GROUP BY ROLLUP(department)"
        ],
        "link": []
    },
    {
        "type": "keyword",
        "keyword": "GROUP BY CUBE ( expression ) ",
        "tree": " (group_clause GROUP BY (group_by_list (group_by_item (cube_clause CUBE))))",
        "description": "The optional <CodeLiteral>GROUP BY</CodeLiteral> clause has the general form\n <code>GROUP BY grouping_element [, ...]\n</code>\n <CodeLiteral>GROUP BY</CodeLiteral> will condense into a single row all selected rows that share the same values for the grouped expressions. An expression used inside a grouping_element can be an input column name, or the name or ordinal number of an output column (SELECT list item), or an arbitrary expression formed from input-column values. In case of ambiguity, a <CodeLiteral>GROUP BY</CodeLiteral> name will be interpreted as an input-column name rather than an output column name.\n If any of <CodeLiteral>GROUPING SETS</CodeLiteral>, <CodeLiteral>ROLLUP</CodeLiteral> or <CodeLiteral>CUBE</CodeLiteral> are present as grouping elements, then the <CodeLiteral>GROUP BY</CodeLiteral> clause as a whole defines some number of independent grouping sets. The effect of this is equivalent to constructing a <CodeLiteral>UNION ALL</CodeLiteral> between subqueries with the individual grouping sets as their <CodeLiteral>GROUP BY</CodeLiteral> clauses. For further details on the handling of grouping sets see Section 7.2.4.\n Aggregate functions, if any are used, are computed across all rows making up each group, producing a separate value for each group. (If there are aggregate functions but no <CodeLiteral>GROUP BY</CodeLiteral> clause, the query is treated as having a single group comprising all the selected rows.) The set of rows fed to each aggregate function can be further filtered by attaching a <CodeLiteral>FILTER</CodeLiteral> clause to the aggregate function call; see Section 4.2.7 for more information. When a <CodeLiteral>FILTER</CodeLiteral> clause is present, only those rows matching it are included in the input to that aggregate function.\n When <CodeLiteral>GROUP BY</CodeLiteral> is present, or any aggregate functions are present, it is not valid for the SELECT list expressions to refer to ungrouped columns except within aggregate functions or when the ungrouped column is functionally dependent on the grouped columns, since there would otherwise be more than one possible value to return for an ungrouped column. A functional dependency exists if the grouped columns (or a subset thereof) are the primary key of the table containing the ungrouped column.\n Keep in mind that all aggregate functions are evaluated before evaluating any \u201cscalar\u201d expressions in the <CodeLiteral>HAVING</CodeLiteral> clause or <CodeLiteral>SELECT</CodeLiteral> list. This means that, for example, a <CodeLiteral>CASE</CodeLiteral> expression cannot be used to skip evaluation of an aggregate function; see Section 4.2.14.\n Currently, <CodeLiteral>FOR NO KEY UPDATE</CodeLiteral>, <CodeLiteral>FOR UPDATE</CodeLiteral>, <CodeLiteral>FOR SHARE</CodeLiteral> and <CodeLiteral>FOR KEY SHARE</CodeLiteral> cannot be specified with <CodeLiteral>GROUP BY</CodeLiteral>. ",
        "detail": "[DESCRIPTION]: The optional <CodeLiteral>GROUP BY</CodeLiteral> clause has the general form\n <code>GROUP BY grouping_element [, ...]\n</code>\n <CodeLiteral>GROUP BY</CodeLiteral> will condense into a single row all selected rows that share the same values for the grouped expressions. An expression used inside a grouping_element can be an input column name, or the name or ordinal number of an output column (SELECT list item), or an arbitrary expression formed from input-column values. In case of ambiguity, a <CodeLiteral>GROUP BY</CodeLiteral> name will be interpreted as an input-column name rather than an output column name.\n If any of <CodeLiteral>GROUPING SETS</CodeLiteral>, <CodeLiteral>ROLLUP</CodeLiteral> or <CodeLiteral>CUBE</CodeLiteral> are present as grouping elements, then the <CodeLiteral>GROUP BY</CodeLiteral> clause as a whole defines some number of independent grouping sets. The effect of this is equivalent to constructing a <CodeLiteral>UNION ALL</CodeLiteral> between subqueries with the individual grouping sets as their <CodeLiteral>GROUP BY</CodeLiteral> clauses. For further details on the handling of grouping sets see Section 7.2.4.\n Aggregate functions, if any are used, are computed across all rows making up each group, producing a separate value for each group. (If there are aggregate functions but no <CodeLiteral>GROUP BY</CodeLiteral> clause, the query is treated as having a single group comprising all the selected rows.) The set of rows fed to each aggregate function can be further filtered by attaching a <CodeLiteral>FILTER</CodeLiteral> clause to the aggregate function call; see Section 4.2.7 for more information. When a <CodeLiteral>FILTER</CodeLiteral> clause is present, only those rows matching it are included in the input to that aggregate function.\n When <CodeLiteral>GROUP BY</CodeLiteral> is present, or any aggregate functions are present, it is not valid for the SELECT list expressions to refer to ungrouped columns except within aggregate functions or when the ungrouped column is functionally dependent on the grouped columns, since there would otherwise be more than one possible value to return for an ungrouped column. A functional dependency exists if the grouped columns (or a subset thereof) are the primary key of the table containing the ungrouped column.\n Keep in mind that all aggregate functions are evaluated before evaluating any \u201cscalar\u201d expressions in the <CodeLiteral>HAVING</CodeLiteral> clause or <CodeLiteral>SELECT</CodeLiteral> list. This means that, for example, a <CodeLiteral>CASE</CodeLiteral> expression cannot be used to skip evaluation of an aggregate function; see Section 4.2.14.\n Currently, <CodeLiteral>FOR NO KEY UPDATE</CodeLiteral>, <CodeLiteral>FOR UPDATE</CodeLiteral>, <CodeLiteral>FOR SHARE</CodeLiteral> and <CodeLiteral>FOR KEY SHARE</CodeLiteral> cannot be specified with <CodeLiteral>GROUP BY</CodeLiteral>. <sep>[DEMO]: SELECT department, SUM(salary) AS total_salary FROM employees GROUP BY CUBE (department)",
        "example": [
            "SELECT department, SUM(salary) AS total_salary FROM employees GROUP BY CUBE (department)"
        ],
        "link": []
    },
    {
        "type": "keyword",
        "keyword": "GROUP BY GROUPING SETS grouping_element ",
        "tree": " (group_clause GROUP BY (group_by_list (group_by_item (grouping_sets_clause GROUPING SETS))))",
        "description": "The optional <CodeLiteral>GROUP BY</CodeLiteral> clause has the general form\n <code>GROUP BY grouping_element [, ...]\n</code>\n <CodeLiteral>GROUP BY</CodeLiteral> will condense into a single row all selected rows that share the same values for the grouped expressions. An expression used inside a grouping_element can be an input column name, or the name or ordinal number of an output column (SELECT list item), or an arbitrary expression formed from input-column values. In case of ambiguity, a <CodeLiteral>GROUP BY</CodeLiteral> name will be interpreted as an input-column name rather than an output column name.\n If any of <CodeLiteral>GROUPING SETS</CodeLiteral>, <CodeLiteral>ROLLUP</CodeLiteral> or <CodeLiteral>CUBE</CodeLiteral> are present as grouping elements, then the <CodeLiteral>GROUP BY</CodeLiteral> clause as a whole defines some number of independent grouping sets. The effect of this is equivalent to constructing a <CodeLiteral>UNION ALL</CodeLiteral> between subqueries with the individual grouping sets as their <CodeLiteral>GROUP BY</CodeLiteral> clauses. For further details on the handling of grouping sets see Section 7.2.4.\n Aggregate functions, if any are used, are computed across all rows making up each group, producing a separate value for each group. (If there are aggregate functions but no <CodeLiteral>GROUP BY</CodeLiteral> clause, the query is treated as having a single group comprising all the selected rows.) The set of rows fed to each aggregate function can be further filtered by attaching a <CodeLiteral>FILTER</CodeLiteral> clause to the aggregate function call; see Section 4.2.7 for more information. When a <CodeLiteral>FILTER</CodeLiteral> clause is present, only those rows matching it are included in the input to that aggregate function.\n When <CodeLiteral>GROUP BY</CodeLiteral> is present, or any aggregate functions are present, it is not valid for the SELECT list expressions to refer to ungrouped columns except within aggregate functions or when the ungrouped column is functionally dependent on the grouped columns, since there would otherwise be more than one possible value to return for an ungrouped column. A functional dependency exists if the grouped columns (or a subset thereof) are the primary key of the table containing the ungrouped column.\n Keep in mind that all aggregate functions are evaluated before evaluating any \u201cscalar\u201d expressions in the <CodeLiteral>HAVING</CodeLiteral> clause or <CodeLiteral>SELECT</CodeLiteral> list. This means that, for example, a <CodeLiteral>CASE</CodeLiteral> expression cannot be used to skip evaluation of an aggregate function; see Section 4.2.14.\n Currently, <CodeLiteral>FOR NO KEY UPDATE</CodeLiteral>, <CodeLiteral>FOR UPDATE</CodeLiteral>, <CodeLiteral>FOR SHARE</CodeLiteral> and <CodeLiteral>FOR KEY SHARE</CodeLiteral> cannot be specified with <CodeLiteral>GROUP BY</CodeLiteral>. ",
        "detail": "[DESCRIPTION]: The optional <CodeLiteral>GROUP BY</CodeLiteral> clause has the general form\n <code>GROUP BY grouping_element [, ...]\n</code>\n <CodeLiteral>GROUP BY</CodeLiteral> will condense into a single row all selected rows that share the same values for the grouped expressions. An expression used inside a grouping_element can be an input column name, or the name or ordinal number of an output column (SELECT list item), or an arbitrary expression formed from input-column values. In case of ambiguity, a <CodeLiteral>GROUP BY</CodeLiteral> name will be interpreted as an input-column name rather than an output column name.\n If any of <CodeLiteral>GROUPING SETS</CodeLiteral>, <CodeLiteral>ROLLUP</CodeLiteral> or <CodeLiteral>CUBE</CodeLiteral> are present as grouping elements, then the <CodeLiteral>GROUP BY</CodeLiteral> clause as a whole defines some number of independent grouping sets. The effect of this is equivalent to constructing a <CodeLiteral>UNION ALL</CodeLiteral> between subqueries with the individual grouping sets as their <CodeLiteral>GROUP BY</CodeLiteral> clauses. For further details on the handling of grouping sets see Section 7.2.4.\n Aggregate functions, if any are used, are computed across all rows making up each group, producing a separate value for each group. (If there are aggregate functions but no <CodeLiteral>GROUP BY</CodeLiteral> clause, the query is treated as having a single group comprising all the selected rows.) The set of rows fed to each aggregate function can be further filtered by attaching a <CodeLiteral>FILTER</CodeLiteral> clause to the aggregate function call; see Section 4.2.7 for more information. When a <CodeLiteral>FILTER</CodeLiteral> clause is present, only those rows matching it are included in the input to that aggregate function.\n When <CodeLiteral>GROUP BY</CodeLiteral> is present, or any aggregate functions are present, it is not valid for the SELECT list expressions to refer to ungrouped columns except within aggregate functions or when the ungrouped column is functionally dependent on the grouped columns, since there would otherwise be more than one possible value to return for an ungrouped column. A functional dependency exists if the grouped columns (or a subset thereof) are the primary key of the table containing the ungrouped column.\n Keep in mind that all aggregate functions are evaluated before evaluating any \u201cscalar\u201d expressions in the <CodeLiteral>HAVING</CodeLiteral> clause or <CodeLiteral>SELECT</CodeLiteral> list. This means that, for example, a <CodeLiteral>CASE</CodeLiteral> expression cannot be used to skip evaluation of an aggregate function; see Section 4.2.14.\n Currently, <CodeLiteral>FOR NO KEY UPDATE</CodeLiteral>, <CodeLiteral>FOR UPDATE</CodeLiteral>, <CodeLiteral>FOR SHARE</CodeLiteral> and <CodeLiteral>FOR KEY SHARE</CodeLiteral> cannot be specified with <CodeLiteral>GROUP BY</CodeLiteral>. <sep>[DEMO]: SELECT department, SUM(salary) AS total_salary FROM employees GROUP BY GROUPING SETS ((department), ());",
        "example": [
            "SELECT department, SUM(salary) AS total_salary FROM employees GROUP BY GROUPING SETS ((department), ());"
        ],
        "link": []
    },
    {
        "type": "keyword",
        "keyword": "GROUP BY expression",
        "tree": " (group_clause GROUP BY)",
        "description": "The optional <CodeLiteral>GROUP BY</CodeLiteral> clause has the general form\n <code>GROUP BY grouping_element [, ...]\n</code>\n <CodeLiteral>GROUP BY</CodeLiteral> will condense into a single row all selected rows that share the same values for the grouped expressions. An expression used inside a grouping_element can be an input column name, or the name or ordinal number of an output column (SELECT list item), or an arbitrary expression formed from input-column values. In case of ambiguity, a <CodeLiteral>GROUP BY</CodeLiteral> name will be interpreted as an input-column name rather than an output column name.\n If any of <CodeLiteral>GROUPING SETS</CodeLiteral>, <CodeLiteral>ROLLUP</CodeLiteral> or <CodeLiteral>CUBE</CodeLiteral> are present as grouping elements, then the <CodeLiteral>GROUP BY</CodeLiteral> clause as a whole defines some number of independent grouping sets. The effect of this is equivalent to constructing a <CodeLiteral>UNION ALL</CodeLiteral> between subqueries with the individual grouping sets as their <CodeLiteral>GROUP BY</CodeLiteral> clauses. For further details on the handling of grouping sets see Section 7.2.4.\n Aggregate functions, if any are used, are computed across all rows making up each group, producing a separate value for each group. (If there are aggregate functions but no <CodeLiteral>GROUP BY</CodeLiteral> clause, the query is treated as having a single group comprising all the selected rows.) The set of rows fed to each aggregate function can be further filtered by attaching a <CodeLiteral>FILTER</CodeLiteral> clause to the aggregate function call; see Section 4.2.7 for more information. When a <CodeLiteral>FILTER</CodeLiteral> clause is present, only those rows matching it are included in the input to that aggregate function.\n When <CodeLiteral>GROUP BY</CodeLiteral> is present, or any aggregate functions are present, it is not valid for the SELECT list expressions to refer to ungrouped columns except within aggregate functions or when the ungrouped column is functionally dependent on the grouped columns, since there would otherwise be more than one possible value to return for an ungrouped column. A functional dependency exists if the grouped columns (or a subset thereof) are the primary key of the table containing the ungrouped column.\n Keep in mind that all aggregate functions are evaluated before evaluating any \u201cscalar\u201d expressions in the <CodeLiteral>HAVING</CodeLiteral> clause or <CodeLiteral>SELECT</CodeLiteral> list. This means that, for example, a <CodeLiteral>CASE</CodeLiteral> expression cannot be used to skip evaluation of an aggregate function; see Section 4.2.14.\n Currently, <CodeLiteral>FOR NO KEY UPDATE</CodeLiteral>, <CodeLiteral>FOR UPDATE</CodeLiteral>, <CodeLiteral>FOR SHARE</CodeLiteral> and <CodeLiteral>FOR KEY SHARE</CodeLiteral> cannot be specified with <CodeLiteral>GROUP BY</CodeLiteral>. ",
        "detail": "[DESCRIPTION]: The optional <CodeLiteral>GROUP BY</CodeLiteral> clause has the general form\n <code>GROUP BY grouping_element [, ...]\n</code>\n <CodeLiteral>GROUP BY</CodeLiteral> will condense into a single row all selected rows that share the same values for the grouped expressions. An expression used inside a grouping_element can be an input column name, or the name or ordinal number of an output column (SELECT list item), or an arbitrary expression formed from input-column values. In case of ambiguity, a <CodeLiteral>GROUP BY</CodeLiteral> name will be interpreted as an input-column name rather than an output column name.\n If any of <CodeLiteral>GROUPING SETS</CodeLiteral>, <CodeLiteral>ROLLUP</CodeLiteral> or <CodeLiteral>CUBE</CodeLiteral> are present as grouping elements, then the <CodeLiteral>GROUP BY</CodeLiteral> clause as a whole defines some number of independent grouping sets. The effect of this is equivalent to constructing a <CodeLiteral>UNION ALL</CodeLiteral> between subqueries with the individual grouping sets as their <CodeLiteral>GROUP BY</CodeLiteral> clauses. For further details on the handling of grouping sets see Section 7.2.4.\n Aggregate functions, if any are used, are computed across all rows making up each group, producing a separate value for each group. (If there are aggregate functions but no <CodeLiteral>GROUP BY</CodeLiteral> clause, the query is treated as having a single group comprising all the selected rows.) The set of rows fed to each aggregate function can be further filtered by attaching a <CodeLiteral>FILTER</CodeLiteral> clause to the aggregate function call; see Section 4.2.7 for more information. When a <CodeLiteral>FILTER</CodeLiteral> clause is present, only those rows matching it are included in the input to that aggregate function.\n When <CodeLiteral>GROUP BY</CodeLiteral> is present, or any aggregate functions are present, it is not valid for the SELECT list expressions to refer to ungrouped columns except within aggregate functions or when the ungrouped column is functionally dependent on the grouped columns, since there would otherwise be more than one possible value to return for an ungrouped column. A functional dependency exists if the grouped columns (or a subset thereof) are the primary key of the table containing the ungrouped column.\n Keep in mind that all aggregate functions are evaluated before evaluating any \u201cscalar\u201d expressions in the <CodeLiteral>HAVING</CodeLiteral> clause or <CodeLiteral>SELECT</CodeLiteral> list. This means that, for example, a <CodeLiteral>CASE</CodeLiteral> expression cannot be used to skip evaluation of an aggregate function; see Section 4.2.14.\n Currently, <CodeLiteral>FOR NO KEY UPDATE</CodeLiteral>, <CodeLiteral>FOR UPDATE</CodeLiteral>, <CodeLiteral>FOR SHARE</CodeLiteral> and <CodeLiteral>FOR KEY SHARE</CodeLiteral> cannot be specified with <CodeLiteral>GROUP BY</CodeLiteral>. <sep>[DEMO]: SELECT department, COUNT(*) as num_employees FROM employees GROUP BY department;",
        "example": [
            "SELECT department, COUNT(*) as num_employees FROM employees GROUP BY department;"
        ],
        "link": []
    },
    {
        "type": "keyword",
        "keyword": "HAVING condition",
        "tree": " (having_clause HAVING)",
        "description": "The optional <CodeLiteral>HAVING</CodeLiteral> clause has the general form\n <code>HAVING condition\n</code>\n where condition is the same as specified for the <CodeLiteral>WHERE</CodeLiteral> clause.\n <CodeLiteral>HAVING</CodeLiteral> eliminates group rows that do not satisfy the condition. <CodeLiteral>HAVING</CodeLiteral> is different from <CodeLiteral>WHERE</CodeLiteral>: <CodeLiteral>WHERE</CodeLiteral> filters individual rows before the application of <CodeLiteral>GROUP BY</CodeLiteral>, while <CodeLiteral>HAVING</CodeLiteral> filters group rows created by <CodeLiteral>GROUP BY</CodeLiteral>. Each column referenced in condition must unambiguously reference a grouping column, unless the reference appears within an aggregate function or the ungrouped column is functionally dependent on the grouping columns.\n The presence of <CodeLiteral>HAVING</CodeLiteral> turns a query into a grouped query even if there is no <CodeLiteral>GROUP BY</CodeLiteral> clause. This is the same as what happens when the query contains aggregate functions but no <CodeLiteral>GROUP BY</CodeLiteral> clause. All the selected rows are considered to form a single group, and the SELECT list and <CodeLiteral>HAVING</CodeLiteral> clause can only reference table columns from within aggregate functions. Such a query will emit a single row if the <CodeLiteral>HAVING</CodeLiteral> condition is true, zero rows if it is not true.\n Currently, <CodeLiteral>FOR NO KEY UPDATE</CodeLiteral>, <CodeLiteral>FOR UPDATE</CodeLiteral>, <CodeLiteral>FOR SHARE</CodeLiteral> and <CodeLiteral>FOR KEY SHARE</CodeLiteral> cannot be specified with <CodeLiteral>HAVING</CodeLiteral>. ",
        "detail": "[DESCRIPTION]: The optional <CodeLiteral>HAVING</CodeLiteral> clause has the general form\n <code>HAVING condition\n</code>\n where condition is the same as specified for the <CodeLiteral>WHERE</CodeLiteral> clause.\n <CodeLiteral>HAVING</CodeLiteral> eliminates group rows that do not satisfy the condition. <CodeLiteral>HAVING</CodeLiteral> is different from <CodeLiteral>WHERE</CodeLiteral>: <CodeLiteral>WHERE</CodeLiteral> filters individual rows before the application of <CodeLiteral>GROUP BY</CodeLiteral>, while <CodeLiteral>HAVING</CodeLiteral> filters group rows created by <CodeLiteral>GROUP BY</CodeLiteral>. Each column referenced in condition must unambiguously reference a grouping column, unless the reference appears within an aggregate function or the ungrouped column is functionally dependent on the grouping columns.\n The presence of <CodeLiteral>HAVING</CodeLiteral> turns a query into a grouped query even if there is no <CodeLiteral>GROUP BY</CodeLiteral> clause. This is the same as what happens when the query contains aggregate functions but no <CodeLiteral>GROUP BY</CodeLiteral> clause. All the selected rows are considered to form a single group, and the SELECT list and <CodeLiteral>HAVING</CodeLiteral> clause can only reference table columns from within aggregate functions. Such a query will emit a single row if the <CodeLiteral>HAVING</CodeLiteral> condition is true, zero rows if it is not true.\n Currently, <CodeLiteral>FOR NO KEY UPDATE</CodeLiteral>, <CodeLiteral>FOR UPDATE</CodeLiteral>, <CodeLiteral>FOR SHARE</CodeLiteral> and <CodeLiteral>FOR KEY SHARE</CodeLiteral> cannot be specified with <CodeLiteral>HAVING</CodeLiteral>. <sep>[DEMO]: SELECT COUNT(*) FROM employees HAVING COUNT(*) > 5;",
        "example": [
            "SELECT COUNT(*) FROM employees HAVING COUNT(*) > 5;"
        ],
        "link": []
    },
    {
        "type": "keyword",
        "keyword": "UNBOUNDED PRECEDING",
        "tree": " (frame_bound UNBOUNDED PRECEDING)",
        "description": "The optional <CodeLiteral>WINDOW</CodeLiteral> clause has the general form\n <code>WINDOW window_name AS ( window_definition ) [, ...]\n</code>\n where window_name is a name that can be referenced from <CodeLiteral>OVER</CodeLiteral> clauses or subsequent window definitions, and window_definition is\n <code>[ existing_window_name ]\n[ PARTITION BY expression [, ...] ]\n[ ORDER BY expression [ ASC | DESC | USING operator ] [ NULLS { FIRST | LAST } ] [, ...] ]\n[ frame_clause ]\n</code>\n If an existing_window_name is specified it must refer to an earlier entry in the <CodeLiteral>WINDOW</CodeLiteral> list; the new window copies its partitioning clause from that entry, as well as its ordering clause if any. In this case the new window cannot specify its own <CodeLiteral>PARTITION BY</CodeLiteral> clause, and it can specify <CodeLiteral>ORDER BY</CodeLiteral> only if the copied window does not have one. The new window always uses its own frame clause; the copied window must not specify a frame clause.\n The elements of the <CodeLiteral>PARTITION BY</CodeLiteral> list are interpreted in much the same fashion as elements of a <CodeLiteral>GROUP BY</CodeLiteral> Clause, except that they are always simple expressions and never the name or number of an output column. Another difference is that these expressions can contain aggregate function calls, which are not allowed in a regular <CodeLiteral>GROUP BY</CodeLiteral> clause. They are allowed here because windowing occurs after grouping and aggregation.\n Similarly, the elements of the <CodeLiteral>ORDER BY</CodeLiteral> list are interpreted in much the same fashion as elements of an <CodeLiteral>ORDER BY</CodeLiteral> Clause, except that the expressions are always taken as simple expressions and never the name or number of an output column.\n The optional frame_clause defines the window frame for window functions that depend on the frame (not all do). The window frame is a set of related rows for each row of the query (called the current row). The frame_clause can be one of\n <code>{ RANGE | ROWS | GROUPS } frame_start [ frame_exclusion ]\n{ RANGE | ROWS | GROUPS } BETWEEN frame_start AND frame_end [ frame_exclusion ]\n</code>\n where frame_start and frame_end can be one of\n <code>UNBOUNDED PRECEDING\noffset PRECEDING\nCURRENT ROW\noffset FOLLOWING\nUNBOUNDED FOLLOWING\n</code>\n and frame_exclusion can be one of\n <code>EXCLUDE CURRENT ROW\nEXCLUDE GROUP\nEXCLUDE TIES\nEXCLUDE NO OTHERS\n</code>\n If frame_end is omitted it defaults to <CodeLiteral>CURRENT ROW</CodeLiteral>. Restrictions are that frame_start cannot be <CodeLiteral>UNBOUNDED FOLLOWING</CodeLiteral>, frame_end cannot be <CodeLiteral>UNBOUNDED PRECEDING</CodeLiteral>, and the frame_end choice cannot appear earlier in the above list of frame_start and frame_end options than the frame_start choice does \u2014 for example <CodeLiteral>RANGE BETWEEN CURRENT ROW AND offset PRECEDING</CodeLiteral> is not allowed.\n The default framing option is <CodeLiteral>RANGE UNBOUNDED PRECEDING</CodeLiteral>, which is the same as <CodeLiteral>RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW</CodeLiteral>; it sets the frame to be all rows from the partition start up through the current row's last peer (a row that the window's <CodeLiteral>ORDER BY</CodeLiteral> clause considers equivalent to the current row; all rows are peers if there is no <CodeLiteral>ORDER BY</CodeLiteral>). In general, <CodeLiteral>UNBOUNDED PRECEDING</CodeLiteral> means that the frame starts with the first row of the partition, and similarly <CodeLiteral>UNBOUNDED FOLLOWING</CodeLiteral> means that the frame ends with the last row of the partition, regardless of <CodeLiteral>RANGE</CodeLiteral>, <CodeLiteral>ROWS</CodeLiteral> or <CodeLiteral>GROUPS</CodeLiteral> mode. In <CodeLiteral>ROWS</CodeLiteral> mode, <CodeLiteral>CURRENT ROW</CodeLiteral> means that the frame starts or ends with the current row; but in <CodeLiteral>RANGE</CodeLiteral> or <CodeLiteral>GROUPS</CodeLiteral> mode it means that the frame starts or ends with the current row's first or last peer in the <CodeLiteral>ORDER BY</CodeLiteral> ordering. The offset <CodeLiteral>PRECEDING</CodeLiteral> and offset <CodeLiteral>FOLLOWING</CodeLiteral> options vary in meaning depending on the frame mode. In <CodeLiteral>ROWS</CodeLiteral> mode, the offset is an integer indicating that the frame starts or ends that many rows before or after the current row. In <CodeLiteral>GROUPS</CodeLiteral> mode, the offset is an integer indicating that the frame starts or ends that many peer groups before or after the current row's peer group, where a peer group is a group of rows that are equivalent according to the window's <CodeLiteral>ORDER BY</CodeLiteral> clause. In <CodeLiteral>RANGE</CodeLiteral> mode, use of an offset option requires that there be exactly one <CodeLiteral>ORDER BY</CodeLiteral> column in the window definition. Then the frame contains those rows whose ordering column value is no more than offset less than (for <CodeLiteral>PRECEDING</CodeLiteral>) or more than (for <CodeLiteral>FOLLOWING</CodeLiteral>) the current row's ordering column value. In these cases the data type of the offset expression depends on the data type of the ordering column. For numeric ordering columns it is typically of the same type as the ordering column, but for datetime ordering columns it is an interval. In all these cases, the value of the offset must be non-null and non-negative. Also, while the offset does not have to be a simple constant, it cannot contain variables, aggregate functions, or window functions.\n The frame_exclusion option allows rows around the current row to be excluded from the frame, even if they would be included according to the frame start and frame end options. <CodeLiteral>EXCLUDE CURRENT ROW</CodeLiteral> excludes the current row from the frame. <CodeLiteral>EXCLUDE GROUP</CodeLiteral> excludes the current row and its ordering peers from the frame. <CodeLiteral>EXCLUDE TIES</CodeLiteral> excludes any peers of the current row from the frame, but not the current row itself. <CodeLiteral>EXCLUDE NO OTHERS</CodeLiteral> simply specifies explicitly the default behavior of not excluding the current row or its peers.\n Beware that the <CodeLiteral>ROWS</CodeLiteral> mode can produce unpredictable results if the <CodeLiteral>ORDER BY</CodeLiteral> ordering does not order the rows uniquely. The <CodeLiteral>RANGE</CodeLiteral> and <CodeLiteral>GROUPS</CodeLiteral> modes are designed to ensure that rows that are peers in the <CodeLiteral>ORDER BY</CodeLiteral> ordering are treated alike: all rows of a given peer group will be in the frame or excluded from it.\n The purpose of a <CodeLiteral>WINDOW</CodeLiteral> clause is to specify the behavior of window functions appearing in the query's SELECT List or <CodeLiteral>ORDER BY</CodeLiteral> Clause. These functions can reference the <CodeLiteral>WINDOW</CodeLiteral> clause entries by name in their <CodeLiteral>OVER</CodeLiteral> clauses. A <CodeLiteral>WINDOW</CodeLiteral> clause entry does not have to be referenced anywhere, however; if it is not used in the query it is simply ignored. It is possible to use window functions without any <CodeLiteral>WINDOW</CodeLiteral> clause at all, since a window function call can specify its window definition directly in its <CodeLiteral>OVER</CodeLiteral> clause. However, the <CodeLiteral>WINDOW</CodeLiteral> clause saves typing when the same window definition is needed for more than one window function.\n Currently, <CodeLiteral>FOR NO KEY UPDATE</CodeLiteral>, <CodeLiteral>FOR UPDATE</CodeLiteral>, <CodeLiteral>FOR SHARE</CodeLiteral> and <CodeLiteral>FOR KEY SHARE</CodeLiteral> cannot be specified with <CodeLiteral>WINDOW</CodeLiteral>.\n Window functions are described in detail in Section 3.5, Section 4.2.8, and Section 7.2.5. ",
        "detail": "[DESCRIPTION]: The optional <CodeLiteral>WINDOW</CodeLiteral> clause has the general form\n <code>WINDOW window_name AS ( window_definition ) [, ...]\n</code>\n where window_name is a name that can be referenced from <CodeLiteral>OVER</CodeLiteral> clauses or subsequent window definitions, and window_definition is\n <code>[ existing_window_name ]\n[ PARTITION BY expression [, ...] ]\n[ ORDER BY expression [ ASC | DESC | USING operator ] [ NULLS { FIRST | LAST } ] [, ...] ]\n[ frame_clause ]\n</code>\n If an existing_window_name is specified it must refer to an earlier entry in the <CodeLiteral>WINDOW</CodeLiteral> list; the new window copies its partitioning clause from that entry, as well as its ordering clause if any. In this case the new window cannot specify its own <CodeLiteral>PARTITION BY</CodeLiteral> clause, and it can specify <CodeLiteral>ORDER BY</CodeLiteral> only if the copied window does not have one. The new window always uses its own frame clause; the copied window must not specify a frame clause.\n The elements of the <CodeLiteral>PARTITION BY</CodeLiteral> list are interpreted in much the same fashion as elements of a <CodeLiteral>GROUP BY</CodeLiteral> Clause, except that they are always simple expressions and never the name or number of an output column. Another difference is that these expressions can contain aggregate function calls, which are not allowed in a regular <CodeLiteral>GROUP BY</CodeLiteral> clause. They are allowed here because windowing occurs after grouping and aggregation.\n Similarly, the elements of the <CodeLiteral>ORDER BY</CodeLiteral> list are interpreted in much the same fashion as elements of an <CodeLiteral>ORDER BY</CodeLiteral> Clause, except that the expressions are always taken as simple expressions and never the name or number of an output column.\n The optional frame_clause defines the window frame for window functions that depend on the frame (not all do). The window frame is a set of related rows for each row of the query (called the current row). The frame_clause can be one of\n <code>{ RANGE | ROWS | GROUPS } frame_start [ frame_exclusion ]\n{ RANGE | ROWS | GROUPS } BETWEEN frame_start AND frame_end [ frame_exclusion ]\n</code>\n where frame_start and frame_end can be one of\n <code>UNBOUNDED PRECEDING\noffset PRECEDING\nCURRENT ROW\noffset FOLLOWING\nUNBOUNDED FOLLOWING\n</code>\n and frame_exclusion can be one of\n <code>EXCLUDE CURRENT ROW\nEXCLUDE GROUP\nEXCLUDE TIES\nEXCLUDE NO OTHERS\n</code>\n If frame_end is omitted it defaults to <CodeLiteral>CURRENT ROW</CodeLiteral>. Restrictions are that frame_start cannot be <CodeLiteral>UNBOUNDED FOLLOWING</CodeLiteral>, frame_end cannot be <CodeLiteral>UNBOUNDED PRECEDING</CodeLiteral>, and the frame_end choice cannot appear earlier in the above list of frame_start and frame_end options than the frame_start choice does \u2014 for example <CodeLiteral>RANGE BETWEEN CURRENT ROW AND offset PRECEDING</CodeLiteral> is not allowed.\n The default framing option is <CodeLiteral>RANGE UNBOUNDED PRECEDING</CodeLiteral>, which is the same as <CodeLiteral>RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW</CodeLiteral>; it sets the frame to be all rows from the partition start up through the current row's last peer (a row that the window's <CodeLiteral>ORDER BY</CodeLiteral> clause considers equivalent to the current row; all rows are peers if there is no <CodeLiteral>ORDER BY</CodeLiteral>). In general, <CodeLiteral>UNBOUNDED PRECEDING</CodeLiteral> means that the frame starts with the first row of the partition, and similarly <CodeLiteral>UNBOUNDED FOLLOWING</CodeLiteral> means that the frame ends with the last row of the partition, regardless of <CodeLiteral>RANGE</CodeLiteral>, <CodeLiteral>ROWS</CodeLiteral> or <CodeLiteral>GROUPS</CodeLiteral> mode. In <CodeLiteral>ROWS</CodeLiteral> mode, <CodeLiteral>CURRENT ROW</CodeLiteral> means that the frame starts or ends with the current row; but in <CodeLiteral>RANGE</CodeLiteral> or <CodeLiteral>GROUPS</CodeLiteral> mode it means that the frame starts or ends with the current row's first or last peer in the <CodeLiteral>ORDER BY</CodeLiteral> ordering. The offset <CodeLiteral>PRECEDING</CodeLiteral> and offset <CodeLiteral>FOLLOWING</CodeLiteral> options vary in meaning depending on the frame mode. In <CodeLiteral>ROWS</CodeLiteral> mode, the offset is an integer indicating that the frame starts or ends that many rows before or after the current row. In <CodeLiteral>GROUPS</CodeLiteral> mode, the offset is an integer indicating that the frame starts or ends that many peer groups before or after the current row's peer group, where a peer group is a group of rows that are equivalent according to the window's <CodeLiteral>ORDER BY</CodeLiteral> clause. In <CodeLiteral>RANGE</CodeLiteral> mode, use of an offset option requires that there be exactly one <CodeLiteral>ORDER BY</CodeLiteral> column in the window definition. Then the frame contains those rows whose ordering column value is no more than offset less than (for <CodeLiteral>PRECEDING</CodeLiteral>) or more than (for <CodeLiteral>FOLLOWING</CodeLiteral>) the current row's ordering column value. In these cases the data type of the offset expression depends on the data type of the ordering column. For numeric ordering columns it is typically of the same type as the ordering column, but for datetime ordering columns it is an interval. In all these cases, the value of the offset must be non-null and non-negative. Also, while the offset does not have to be a simple constant, it cannot contain variables, aggregate functions, or window functions.\n The frame_exclusion option allows rows around the current row to be excluded from the frame, even if they would be included according to the frame start and frame end options. <CodeLiteral>EXCLUDE CURRENT ROW</CodeLiteral> excludes the current row from the frame. <CodeLiteral>EXCLUDE GROUP</CodeLiteral> excludes the current row and its ordering peers from the frame. <CodeLiteral>EXCLUDE TIES</CodeLiteral> excludes any peers of the current row from the frame, but not the current row itself. <CodeLiteral>EXCLUDE NO OTHERS</CodeLiteral> simply specifies explicitly the default behavior of not excluding the current row or its peers.\n Beware that the <CodeLiteral>ROWS</CodeLiteral> mode can produce unpredictable results if the <CodeLiteral>ORDER BY</CodeLiteral> ordering does not order the rows uniquely. The <CodeLiteral>RANGE</CodeLiteral> and <CodeLiteral>GROUPS</CodeLiteral> modes are designed to ensure that rows that are peers in the <CodeLiteral>ORDER BY</CodeLiteral> ordering are treated alike: all rows of a given peer group will be in the frame or excluded from it.\n The purpose of a <CodeLiteral>WINDOW</CodeLiteral> clause is to specify the behavior of window functions appearing in the query's SELECT List or <CodeLiteral>ORDER BY</CodeLiteral> Clause. These functions can reference the <CodeLiteral>WINDOW</CodeLiteral> clause entries by name in their <CodeLiteral>OVER</CodeLiteral> clauses. A <CodeLiteral>WINDOW</CodeLiteral> clause entry does not have to be referenced anywhere, however; if it is not used in the query it is simply ignored. It is possible to use window functions without any <CodeLiteral>WINDOW</CodeLiteral> clause at all, since a window function call can specify its window definition directly in its <CodeLiteral>OVER</CodeLiteral> clause. However, the <CodeLiteral>WINDOW</CodeLiteral> clause saves typing when the same window definition is needed for more than one window function.\n Currently, <CodeLiteral>FOR NO KEY UPDATE</CodeLiteral>, <CodeLiteral>FOR UPDATE</CodeLiteral>, <CodeLiteral>FOR SHARE</CodeLiteral> and <CodeLiteral>FOR KEY SHARE</CodeLiteral> cannot be specified with <CodeLiteral>WINDOW</CodeLiteral>.\n Window functions are described in detail in Section 3.5, Section 4.2.8, and Section 7.2.5. <sep>[DEMO]: SELECT employee_id, salary, AVG(salary) OVER (PARTITION BY department_id ORDER BY salary ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS running_avg_salary FROM employees;",
        "example": [
            "SELECT employee_id, salary, AVG(salary) OVER (PARTITION BY department_id ORDER BY salary ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS running_avg_salary FROM employees;"
        ],
        "link": []
    },
    {
        "type": "keyword",
        "keyword": "offset PRECEDING",
        "tree": " (frame_bound PRECEDING)",
        "description": "The optional <CodeLiteral>WINDOW</CodeLiteral> clause has the general form\n <code>WINDOW window_name AS ( window_definition ) [, ...]\n</code>\n where window_name is a name that can be referenced from <CodeLiteral>OVER</CodeLiteral> clauses or subsequent window definitions, and window_definition is\n <code>[ existing_window_name ]\n[ PARTITION BY expression [, ...] ]\n[ ORDER BY expression [ ASC | DESC | USING operator ] [ NULLS { FIRST | LAST } ] [, ...] ]\n[ frame_clause ]\n</code>\n If an existing_window_name is specified it must refer to an earlier entry in the <CodeLiteral>WINDOW</CodeLiteral> list; the new window copies its partitioning clause from that entry, as well as its ordering clause if any. In this case the new window cannot specify its own <CodeLiteral>PARTITION BY</CodeLiteral> clause, and it can specify <CodeLiteral>ORDER BY</CodeLiteral> only if the copied window does not have one. The new window always uses its own frame clause; the copied window must not specify a frame clause.\n The elements of the <CodeLiteral>PARTITION BY</CodeLiteral> list are interpreted in much the same fashion as elements of a <CodeLiteral>GROUP BY</CodeLiteral> Clause, except that they are always simple expressions and never the name or number of an output column. Another difference is that these expressions can contain aggregate function calls, which are not allowed in a regular <CodeLiteral>GROUP BY</CodeLiteral> clause. They are allowed here because windowing occurs after grouping and aggregation.\n Similarly, the elements of the <CodeLiteral>ORDER BY</CodeLiteral> list are interpreted in much the same fashion as elements of an <CodeLiteral>ORDER BY</CodeLiteral> Clause, except that the expressions are always taken as simple expressions and never the name or number of an output column.\n The optional frame_clause defines the window frame for window functions that depend on the frame (not all do). The window frame is a set of related rows for each row of the query (called the current row). The frame_clause can be one of\n <code>{ RANGE | ROWS | GROUPS } frame_start [ frame_exclusion ]\n{ RANGE | ROWS | GROUPS } BETWEEN frame_start AND frame_end [ frame_exclusion ]\n</code>\n where frame_start and frame_end can be one of\n <code>UNBOUNDED PRECEDING\noffset PRECEDING\nCURRENT ROW\noffset FOLLOWING\nUNBOUNDED FOLLOWING\n</code>\n and frame_exclusion can be one of\n <code>EXCLUDE CURRENT ROW\nEXCLUDE GROUP\nEXCLUDE TIES\nEXCLUDE NO OTHERS\n</code>\n If frame_end is omitted it defaults to <CodeLiteral>CURRENT ROW</CodeLiteral>. Restrictions are that frame_start cannot be <CodeLiteral>UNBOUNDED FOLLOWING</CodeLiteral>, frame_end cannot be <CodeLiteral>UNBOUNDED PRECEDING</CodeLiteral>, and the frame_end choice cannot appear earlier in the above list of frame_start and frame_end options than the frame_start choice does \u2014 for example <CodeLiteral>RANGE BETWEEN CURRENT ROW AND offset PRECEDING</CodeLiteral> is not allowed.\n The default framing option is <CodeLiteral>RANGE UNBOUNDED PRECEDING</CodeLiteral>, which is the same as <CodeLiteral>RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW</CodeLiteral>; it sets the frame to be all rows from the partition start up through the current row's last peer (a row that the window's <CodeLiteral>ORDER BY</CodeLiteral> clause considers equivalent to the current row; all rows are peers if there is no <CodeLiteral>ORDER BY</CodeLiteral>). In general, <CodeLiteral>UNBOUNDED PRECEDING</CodeLiteral> means that the frame starts with the first row of the partition, and similarly <CodeLiteral>UNBOUNDED FOLLOWING</CodeLiteral> means that the frame ends with the last row of the partition, regardless of <CodeLiteral>RANGE</CodeLiteral>, <CodeLiteral>ROWS</CodeLiteral> or <CodeLiteral>GROUPS</CodeLiteral> mode. In <CodeLiteral>ROWS</CodeLiteral> mode, <CodeLiteral>CURRENT ROW</CodeLiteral> means that the frame starts or ends with the current row; but in <CodeLiteral>RANGE</CodeLiteral> or <CodeLiteral>GROUPS</CodeLiteral> mode it means that the frame starts or ends with the current row's first or last peer in the <CodeLiteral>ORDER BY</CodeLiteral> ordering. The offset <CodeLiteral>PRECEDING</CodeLiteral> and offset <CodeLiteral>FOLLOWING</CodeLiteral> options vary in meaning depending on the frame mode. In <CodeLiteral>ROWS</CodeLiteral> mode, the offset is an integer indicating that the frame starts or ends that many rows before or after the current row. In <CodeLiteral>GROUPS</CodeLiteral> mode, the offset is an integer indicating that the frame starts or ends that many peer groups before or after the current row's peer group, where a peer group is a group of rows that are equivalent according to the window's <CodeLiteral>ORDER BY</CodeLiteral> clause. In <CodeLiteral>RANGE</CodeLiteral> mode, use of an offset option requires that there be exactly one <CodeLiteral>ORDER BY</CodeLiteral> column in the window definition. Then the frame contains those rows whose ordering column value is no more than offset less than (for <CodeLiteral>PRECEDING</CodeLiteral>) or more than (for <CodeLiteral>FOLLOWING</CodeLiteral>) the current row's ordering column value. In these cases the data type of the offset expression depends on the data type of the ordering column. For numeric ordering columns it is typically of the same type as the ordering column, but for datetime ordering columns it is an interval. In all these cases, the value of the offset must be non-null and non-negative. Also, while the offset does not have to be a simple constant, it cannot contain variables, aggregate functions, or window functions.\n The frame_exclusion option allows rows around the current row to be excluded from the frame, even if they would be included according to the frame start and frame end options. <CodeLiteral>EXCLUDE CURRENT ROW</CodeLiteral> excludes the current row from the frame. <CodeLiteral>EXCLUDE GROUP</CodeLiteral> excludes the current row and its ordering peers from the frame. <CodeLiteral>EXCLUDE TIES</CodeLiteral> excludes any peers of the current row from the frame, but not the current row itself. <CodeLiteral>EXCLUDE NO OTHERS</CodeLiteral> simply specifies explicitly the default behavior of not excluding the current row or its peers.\n Beware that the <CodeLiteral>ROWS</CodeLiteral> mode can produce unpredictable results if the <CodeLiteral>ORDER BY</CodeLiteral> ordering does not order the rows uniquely. The <CodeLiteral>RANGE</CodeLiteral> and <CodeLiteral>GROUPS</CodeLiteral> modes are designed to ensure that rows that are peers in the <CodeLiteral>ORDER BY</CodeLiteral> ordering are treated alike: all rows of a given peer group will be in the frame or excluded from it.\n The purpose of a <CodeLiteral>WINDOW</CodeLiteral> clause is to specify the behavior of window functions appearing in the query's SELECT List or <CodeLiteral>ORDER BY</CodeLiteral> Clause. These functions can reference the <CodeLiteral>WINDOW</CodeLiteral> clause entries by name in their <CodeLiteral>OVER</CodeLiteral> clauses. A <CodeLiteral>WINDOW</CodeLiteral> clause entry does not have to be referenced anywhere, however; if it is not used in the query it is simply ignored. It is possible to use window functions without any <CodeLiteral>WINDOW</CodeLiteral> clause at all, since a window function call can specify its window definition directly in its <CodeLiteral>OVER</CodeLiteral> clause. However, the <CodeLiteral>WINDOW</CodeLiteral> clause saves typing when the same window definition is needed for more than one window function.\n Currently, <CodeLiteral>FOR NO KEY UPDATE</CodeLiteral>, <CodeLiteral>FOR UPDATE</CodeLiteral>, <CodeLiteral>FOR SHARE</CodeLiteral> and <CodeLiteral>FOR KEY SHARE</CodeLiteral> cannot be specified with <CodeLiteral>WINDOW</CodeLiteral>.\n Window functions are described in detail in Section 3.5, Section 4.2.8, and Section 7.2.5. ",
        "detail": "[DESCRIPTION]: The optional <CodeLiteral>WINDOW</CodeLiteral> clause has the general form\n <code>WINDOW window_name AS ( window_definition ) [, ...]\n</code>\n where window_name is a name that can be referenced from <CodeLiteral>OVER</CodeLiteral> clauses or subsequent window definitions, and window_definition is\n <code>[ existing_window_name ]\n[ PARTITION BY expression [, ...] ]\n[ ORDER BY expression [ ASC | DESC | USING operator ] [ NULLS { FIRST | LAST } ] [, ...] ]\n[ frame_clause ]\n</code>\n If an existing_window_name is specified it must refer to an earlier entry in the <CodeLiteral>WINDOW</CodeLiteral> list; the new window copies its partitioning clause from that entry, as well as its ordering clause if any. In this case the new window cannot specify its own <CodeLiteral>PARTITION BY</CodeLiteral> clause, and it can specify <CodeLiteral>ORDER BY</CodeLiteral> only if the copied window does not have one. The new window always uses its own frame clause; the copied window must not specify a frame clause.\n The elements of the <CodeLiteral>PARTITION BY</CodeLiteral> list are interpreted in much the same fashion as elements of a <CodeLiteral>GROUP BY</CodeLiteral> Clause, except that they are always simple expressions and never the name or number of an output column. Another difference is that these expressions can contain aggregate function calls, which are not allowed in a regular <CodeLiteral>GROUP BY</CodeLiteral> clause. They are allowed here because windowing occurs after grouping and aggregation.\n Similarly, the elements of the <CodeLiteral>ORDER BY</CodeLiteral> list are interpreted in much the same fashion as elements of an <CodeLiteral>ORDER BY</CodeLiteral> Clause, except that the expressions are always taken as simple expressions and never the name or number of an output column.\n The optional frame_clause defines the window frame for window functions that depend on the frame (not all do). The window frame is a set of related rows for each row of the query (called the current row). The frame_clause can be one of\n <code>{ RANGE | ROWS | GROUPS } frame_start [ frame_exclusion ]\n{ RANGE | ROWS | GROUPS } BETWEEN frame_start AND frame_end [ frame_exclusion ]\n</code>\n where frame_start and frame_end can be one of\n <code>UNBOUNDED PRECEDING\noffset PRECEDING\nCURRENT ROW\noffset FOLLOWING\nUNBOUNDED FOLLOWING\n</code>\n and frame_exclusion can be one of\n <code>EXCLUDE CURRENT ROW\nEXCLUDE GROUP\nEXCLUDE TIES\nEXCLUDE NO OTHERS\n</code>\n If frame_end is omitted it defaults to <CodeLiteral>CURRENT ROW</CodeLiteral>. Restrictions are that frame_start cannot be <CodeLiteral>UNBOUNDED FOLLOWING</CodeLiteral>, frame_end cannot be <CodeLiteral>UNBOUNDED PRECEDING</CodeLiteral>, and the frame_end choice cannot appear earlier in the above list of frame_start and frame_end options than the frame_start choice does \u2014 for example <CodeLiteral>RANGE BETWEEN CURRENT ROW AND offset PRECEDING</CodeLiteral> is not allowed.\n The default framing option is <CodeLiteral>RANGE UNBOUNDED PRECEDING</CodeLiteral>, which is the same as <CodeLiteral>RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW</CodeLiteral>; it sets the frame to be all rows from the partition start up through the current row's last peer (a row that the window's <CodeLiteral>ORDER BY</CodeLiteral> clause considers equivalent to the current row; all rows are peers if there is no <CodeLiteral>ORDER BY</CodeLiteral>). In general, <CodeLiteral>UNBOUNDED PRECEDING</CodeLiteral> means that the frame starts with the first row of the partition, and similarly <CodeLiteral>UNBOUNDED FOLLOWING</CodeLiteral> means that the frame ends with the last row of the partition, regardless of <CodeLiteral>RANGE</CodeLiteral>, <CodeLiteral>ROWS</CodeLiteral> or <CodeLiteral>GROUPS</CodeLiteral> mode. In <CodeLiteral>ROWS</CodeLiteral> mode, <CodeLiteral>CURRENT ROW</CodeLiteral> means that the frame starts or ends with the current row; but in <CodeLiteral>RANGE</CodeLiteral> or <CodeLiteral>GROUPS</CodeLiteral> mode it means that the frame starts or ends with the current row's first or last peer in the <CodeLiteral>ORDER BY</CodeLiteral> ordering. The offset <CodeLiteral>PRECEDING</CodeLiteral> and offset <CodeLiteral>FOLLOWING</CodeLiteral> options vary in meaning depending on the frame mode. In <CodeLiteral>ROWS</CodeLiteral> mode, the offset is an integer indicating that the frame starts or ends that many rows before or after the current row. In <CodeLiteral>GROUPS</CodeLiteral> mode, the offset is an integer indicating that the frame starts or ends that many peer groups before or after the current row's peer group, where a peer group is a group of rows that are equivalent according to the window's <CodeLiteral>ORDER BY</CodeLiteral> clause. In <CodeLiteral>RANGE</CodeLiteral> mode, use of an offset option requires that there be exactly one <CodeLiteral>ORDER BY</CodeLiteral> column in the window definition. Then the frame contains those rows whose ordering column value is no more than offset less than (for <CodeLiteral>PRECEDING</CodeLiteral>) or more than (for <CodeLiteral>FOLLOWING</CodeLiteral>) the current row's ordering column value. In these cases the data type of the offset expression depends on the data type of the ordering column. For numeric ordering columns it is typically of the same type as the ordering column, but for datetime ordering columns it is an interval. In all these cases, the value of the offset must be non-null and non-negative. Also, while the offset does not have to be a simple constant, it cannot contain variables, aggregate functions, or window functions.\n The frame_exclusion option allows rows around the current row to be excluded from the frame, even if they would be included according to the frame start and frame end options. <CodeLiteral>EXCLUDE CURRENT ROW</CodeLiteral> excludes the current row from the frame. <CodeLiteral>EXCLUDE GROUP</CodeLiteral> excludes the current row and its ordering peers from the frame. <CodeLiteral>EXCLUDE TIES</CodeLiteral> excludes any peers of the current row from the frame, but not the current row itself. <CodeLiteral>EXCLUDE NO OTHERS</CodeLiteral> simply specifies explicitly the default behavior of not excluding the current row or its peers.\n Beware that the <CodeLiteral>ROWS</CodeLiteral> mode can produce unpredictable results if the <CodeLiteral>ORDER BY</CodeLiteral> ordering does not order the rows uniquely. The <CodeLiteral>RANGE</CodeLiteral> and <CodeLiteral>GROUPS</CodeLiteral> modes are designed to ensure that rows that are peers in the <CodeLiteral>ORDER BY</CodeLiteral> ordering are treated alike: all rows of a given peer group will be in the frame or excluded from it.\n The purpose of a <CodeLiteral>WINDOW</CodeLiteral> clause is to specify the behavior of window functions appearing in the query's SELECT List or <CodeLiteral>ORDER BY</CodeLiteral> Clause. These functions can reference the <CodeLiteral>WINDOW</CodeLiteral> clause entries by name in their <CodeLiteral>OVER</CodeLiteral> clauses. A <CodeLiteral>WINDOW</CodeLiteral> clause entry does not have to be referenced anywhere, however; if it is not used in the query it is simply ignored. It is possible to use window functions without any <CodeLiteral>WINDOW</CodeLiteral> clause at all, since a window function call can specify its window definition directly in its <CodeLiteral>OVER</CodeLiteral> clause. However, the <CodeLiteral>WINDOW</CodeLiteral> clause saves typing when the same window definition is needed for more than one window function.\n Currently, <CodeLiteral>FOR NO KEY UPDATE</CodeLiteral>, <CodeLiteral>FOR UPDATE</CodeLiteral>, <CodeLiteral>FOR SHARE</CodeLiteral> and <CodeLiteral>FOR KEY SHARE</CodeLiteral> cannot be specified with <CodeLiteral>WINDOW</CodeLiteral>.\n Window functions are described in detail in Section 3.5, Section 4.2.8, and Section 7.2.5. <sep>[DEMO]: SELECT employee_id, salary, AVG(salary) OVER (ORDER BY department_id ROWS 3 PRECEDING) AS avg_prev_3_salaries FROM employees;",
        "example": [
            "SELECT employee_id, salary, AVG(salary) OVER (ORDER BY department_id ROWS 3 PRECEDING) AS avg_prev_3_salaries FROM employees;"
        ],
        "link": []
    },
    {
        "type": "keyword",
        "keyword": "CURRENT ROW",
        "tree": " (frame_bound CURRENT ROW)",
        "description": "The optional <CodeLiteral>WINDOW</CodeLiteral> clause has the general form\n <code>WINDOW window_name AS ( window_definition ) [, ...]\n</code>\n where window_name is a name that can be referenced from <CodeLiteral>OVER</CodeLiteral> clauses or subsequent window definitions, and window_definition is\n <code>[ existing_window_name ]\n[ PARTITION BY expression [, ...] ]\n[ ORDER BY expression [ ASC | DESC | USING operator ] [ NULLS { FIRST | LAST } ] [, ...] ]\n[ frame_clause ]\n</code>\n If an existing_window_name is specified it must refer to an earlier entry in the <CodeLiteral>WINDOW</CodeLiteral> list; the new window copies its partitioning clause from that entry, as well as its ordering clause if any. In this case the new window cannot specify its own <CodeLiteral>PARTITION BY</CodeLiteral> clause, and it can specify <CodeLiteral>ORDER BY</CodeLiteral> only if the copied window does not have one. The new window always uses its own frame clause; the copied window must not specify a frame clause.\n The elements of the <CodeLiteral>PARTITION BY</CodeLiteral> list are interpreted in much the same fashion as elements of a <CodeLiteral>GROUP BY</CodeLiteral> Clause, except that they are always simple expressions and never the name or number of an output column. Another difference is that these expressions can contain aggregate function calls, which are not allowed in a regular <CodeLiteral>GROUP BY</CodeLiteral> clause. They are allowed here because windowing occurs after grouping and aggregation.\n Similarly, the elements of the <CodeLiteral>ORDER BY</CodeLiteral> list are interpreted in much the same fashion as elements of an <CodeLiteral>ORDER BY</CodeLiteral> Clause, except that the expressions are always taken as simple expressions and never the name or number of an output column.\n The optional frame_clause defines the window frame for window functions that depend on the frame (not all do). The window frame is a set of related rows for each row of the query (called the current row). The frame_clause can be one of\n <code>{ RANGE | ROWS | GROUPS } frame_start [ frame_exclusion ]\n{ RANGE | ROWS | GROUPS } BETWEEN frame_start AND frame_end [ frame_exclusion ]\n</code>\n where frame_start and frame_end can be one of\n <code>UNBOUNDED PRECEDING\noffset PRECEDING\nCURRENT ROW\noffset FOLLOWING\nUNBOUNDED FOLLOWING\n</code>\n and frame_exclusion can be one of\n <code>EXCLUDE CURRENT ROW\nEXCLUDE GROUP\nEXCLUDE TIES\nEXCLUDE NO OTHERS\n</code>\n If frame_end is omitted it defaults to <CodeLiteral>CURRENT ROW</CodeLiteral>. Restrictions are that frame_start cannot be <CodeLiteral>UNBOUNDED FOLLOWING</CodeLiteral>, frame_end cannot be <CodeLiteral>UNBOUNDED PRECEDING</CodeLiteral>, and the frame_end choice cannot appear earlier in the above list of frame_start and frame_end options than the frame_start choice does \u2014 for example <CodeLiteral>RANGE BETWEEN CURRENT ROW AND offset PRECEDING</CodeLiteral> is not allowed.\n The default framing option is <CodeLiteral>RANGE UNBOUNDED PRECEDING</CodeLiteral>, which is the same as <CodeLiteral>RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW</CodeLiteral>; it sets the frame to be all rows from the partition start up through the current row's last peer (a row that the window's <CodeLiteral>ORDER BY</CodeLiteral> clause considers equivalent to the current row; all rows are peers if there is no <CodeLiteral>ORDER BY</CodeLiteral>). In general, <CodeLiteral>UNBOUNDED PRECEDING</CodeLiteral> means that the frame starts with the first row of the partition, and similarly <CodeLiteral>UNBOUNDED FOLLOWING</CodeLiteral> means that the frame ends with the last row of the partition, regardless of <CodeLiteral>RANGE</CodeLiteral>, <CodeLiteral>ROWS</CodeLiteral> or <CodeLiteral>GROUPS</CodeLiteral> mode. In <CodeLiteral>ROWS</CodeLiteral> mode, <CodeLiteral>CURRENT ROW</CodeLiteral> means that the frame starts or ends with the current row; but in <CodeLiteral>RANGE</CodeLiteral> or <CodeLiteral>GROUPS</CodeLiteral> mode it means that the frame starts or ends with the current row's first or last peer in the <CodeLiteral>ORDER BY</CodeLiteral> ordering. The offset <CodeLiteral>PRECEDING</CodeLiteral> and offset <CodeLiteral>FOLLOWING</CodeLiteral> options vary in meaning depending on the frame mode. In <CodeLiteral>ROWS</CodeLiteral> mode, the offset is an integer indicating that the frame starts or ends that many rows before or after the current row. In <CodeLiteral>GROUPS</CodeLiteral> mode, the offset is an integer indicating that the frame starts or ends that many peer groups before or after the current row's peer group, where a peer group is a group of rows that are equivalent according to the window's <CodeLiteral>ORDER BY</CodeLiteral> clause. In <CodeLiteral>RANGE</CodeLiteral> mode, use of an offset option requires that there be exactly one <CodeLiteral>ORDER BY</CodeLiteral> column in the window definition. Then the frame contains those rows whose ordering column value is no more than offset less than (for <CodeLiteral>PRECEDING</CodeLiteral>) or more than (for <CodeLiteral>FOLLOWING</CodeLiteral>) the current row's ordering column value. In these cases the data type of the offset expression depends on the data type of the ordering column. For numeric ordering columns it is typically of the same type as the ordering column, but for datetime ordering columns it is an interval. In all these cases, the value of the offset must be non-null and non-negative. Also, while the offset does not have to be a simple constant, it cannot contain variables, aggregate functions, or window functions.\n The frame_exclusion option allows rows around the current row to be excluded from the frame, even if they would be included according to the frame start and frame end options. <CodeLiteral>EXCLUDE CURRENT ROW</CodeLiteral> excludes the current row from the frame. <CodeLiteral>EXCLUDE GROUP</CodeLiteral> excludes the current row and its ordering peers from the frame. <CodeLiteral>EXCLUDE TIES</CodeLiteral> excludes any peers of the current row from the frame, but not the current row itself. <CodeLiteral>EXCLUDE NO OTHERS</CodeLiteral> simply specifies explicitly the default behavior of not excluding the current row or its peers.\n Beware that the <CodeLiteral>ROWS</CodeLiteral> mode can produce unpredictable results if the <CodeLiteral>ORDER BY</CodeLiteral> ordering does not order the rows uniquely. The <CodeLiteral>RANGE</CodeLiteral> and <CodeLiteral>GROUPS</CodeLiteral> modes are designed to ensure that rows that are peers in the <CodeLiteral>ORDER BY</CodeLiteral> ordering are treated alike: all rows of a given peer group will be in the frame or excluded from it.\n The purpose of a <CodeLiteral>WINDOW</CodeLiteral> clause is to specify the behavior of window functions appearing in the query's SELECT List or <CodeLiteral>ORDER BY</CodeLiteral> Clause. These functions can reference the <CodeLiteral>WINDOW</CodeLiteral> clause entries by name in their <CodeLiteral>OVER</CodeLiteral> clauses. A <CodeLiteral>WINDOW</CodeLiteral> clause entry does not have to be referenced anywhere, however; if it is not used in the query it is simply ignored. It is possible to use window functions without any <CodeLiteral>WINDOW</CodeLiteral> clause at all, since a window function call can specify its window definition directly in its <CodeLiteral>OVER</CodeLiteral> clause. However, the <CodeLiteral>WINDOW</CodeLiteral> clause saves typing when the same window definition is needed for more than one window function.\n Currently, <CodeLiteral>FOR NO KEY UPDATE</CodeLiteral>, <CodeLiteral>FOR UPDATE</CodeLiteral>, <CodeLiteral>FOR SHARE</CodeLiteral> and <CodeLiteral>FOR KEY SHARE</CodeLiteral> cannot be specified with <CodeLiteral>WINDOW</CodeLiteral>.\n Window functions are described in detail in Section 3.5, Section 4.2.8, and Section 7.2.5. ",
        "detail": "[DESCRIPTION]: The optional <CodeLiteral>WINDOW</CodeLiteral> clause has the general form\n <code>WINDOW window_name AS ( window_definition ) [, ...]\n</code>\n where window_name is a name that can be referenced from <CodeLiteral>OVER</CodeLiteral> clauses or subsequent window definitions, and window_definition is\n <code>[ existing_window_name ]\n[ PARTITION BY expression [, ...] ]\n[ ORDER BY expression [ ASC | DESC | USING operator ] [ NULLS { FIRST | LAST } ] [, ...] ]\n[ frame_clause ]\n</code>\n If an existing_window_name is specified it must refer to an earlier entry in the <CodeLiteral>WINDOW</CodeLiteral> list; the new window copies its partitioning clause from that entry, as well as its ordering clause if any. In this case the new window cannot specify its own <CodeLiteral>PARTITION BY</CodeLiteral> clause, and it can specify <CodeLiteral>ORDER BY</CodeLiteral> only if the copied window does not have one. The new window always uses its own frame clause; the copied window must not specify a frame clause.\n The elements of the <CodeLiteral>PARTITION BY</CodeLiteral> list are interpreted in much the same fashion as elements of a <CodeLiteral>GROUP BY</CodeLiteral> Clause, except that they are always simple expressions and never the name or number of an output column. Another difference is that these expressions can contain aggregate function calls, which are not allowed in a regular <CodeLiteral>GROUP BY</CodeLiteral> clause. They are allowed here because windowing occurs after grouping and aggregation.\n Similarly, the elements of the <CodeLiteral>ORDER BY</CodeLiteral> list are interpreted in much the same fashion as elements of an <CodeLiteral>ORDER BY</CodeLiteral> Clause, except that the expressions are always taken as simple expressions and never the name or number of an output column.\n The optional frame_clause defines the window frame for window functions that depend on the frame (not all do). The window frame is a set of related rows for each row of the query (called the current row). The frame_clause can be one of\n <code>{ RANGE | ROWS | GROUPS } frame_start [ frame_exclusion ]\n{ RANGE | ROWS | GROUPS } BETWEEN frame_start AND frame_end [ frame_exclusion ]\n</code>\n where frame_start and frame_end can be one of\n <code>UNBOUNDED PRECEDING\noffset PRECEDING\nCURRENT ROW\noffset FOLLOWING\nUNBOUNDED FOLLOWING\n</code>\n and frame_exclusion can be one of\n <code>EXCLUDE CURRENT ROW\nEXCLUDE GROUP\nEXCLUDE TIES\nEXCLUDE NO OTHERS\n</code>\n If frame_end is omitted it defaults to <CodeLiteral>CURRENT ROW</CodeLiteral>. Restrictions are that frame_start cannot be <CodeLiteral>UNBOUNDED FOLLOWING</CodeLiteral>, frame_end cannot be <CodeLiteral>UNBOUNDED PRECEDING</CodeLiteral>, and the frame_end choice cannot appear earlier in the above list of frame_start and frame_end options than the frame_start choice does \u2014 for example <CodeLiteral>RANGE BETWEEN CURRENT ROW AND offset PRECEDING</CodeLiteral> is not allowed.\n The default framing option is <CodeLiteral>RANGE UNBOUNDED PRECEDING</CodeLiteral>, which is the same as <CodeLiteral>RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW</CodeLiteral>; it sets the frame to be all rows from the partition start up through the current row's last peer (a row that the window's <CodeLiteral>ORDER BY</CodeLiteral> clause considers equivalent to the current row; all rows are peers if there is no <CodeLiteral>ORDER BY</CodeLiteral>). In general, <CodeLiteral>UNBOUNDED PRECEDING</CodeLiteral> means that the frame starts with the first row of the partition, and similarly <CodeLiteral>UNBOUNDED FOLLOWING</CodeLiteral> means that the frame ends with the last row of the partition, regardless of <CodeLiteral>RANGE</CodeLiteral>, <CodeLiteral>ROWS</CodeLiteral> or <CodeLiteral>GROUPS</CodeLiteral> mode. In <CodeLiteral>ROWS</CodeLiteral> mode, <CodeLiteral>CURRENT ROW</CodeLiteral> means that the frame starts or ends with the current row; but in <CodeLiteral>RANGE</CodeLiteral> or <CodeLiteral>GROUPS</CodeLiteral> mode it means that the frame starts or ends with the current row's first or last peer in the <CodeLiteral>ORDER BY</CodeLiteral> ordering. The offset <CodeLiteral>PRECEDING</CodeLiteral> and offset <CodeLiteral>FOLLOWING</CodeLiteral> options vary in meaning depending on the frame mode. In <CodeLiteral>ROWS</CodeLiteral> mode, the offset is an integer indicating that the frame starts or ends that many rows before or after the current row. In <CodeLiteral>GROUPS</CodeLiteral> mode, the offset is an integer indicating that the frame starts or ends that many peer groups before or after the current row's peer group, where a peer group is a group of rows that are equivalent according to the window's <CodeLiteral>ORDER BY</CodeLiteral> clause. In <CodeLiteral>RANGE</CodeLiteral> mode, use of an offset option requires that there be exactly one <CodeLiteral>ORDER BY</CodeLiteral> column in the window definition. Then the frame contains those rows whose ordering column value is no more than offset less than (for <CodeLiteral>PRECEDING</CodeLiteral>) or more than (for <CodeLiteral>FOLLOWING</CodeLiteral>) the current row's ordering column value. In these cases the data type of the offset expression depends on the data type of the ordering column. For numeric ordering columns it is typically of the same type as the ordering column, but for datetime ordering columns it is an interval. In all these cases, the value of the offset must be non-null and non-negative. Also, while the offset does not have to be a simple constant, it cannot contain variables, aggregate functions, or window functions.\n The frame_exclusion option allows rows around the current row to be excluded from the frame, even if they would be included according to the frame start and frame end options. <CodeLiteral>EXCLUDE CURRENT ROW</CodeLiteral> excludes the current row from the frame. <CodeLiteral>EXCLUDE GROUP</CodeLiteral> excludes the current row and its ordering peers from the frame. <CodeLiteral>EXCLUDE TIES</CodeLiteral> excludes any peers of the current row from the frame, but not the current row itself. <CodeLiteral>EXCLUDE NO OTHERS</CodeLiteral> simply specifies explicitly the default behavior of not excluding the current row or its peers.\n Beware that the <CodeLiteral>ROWS</CodeLiteral> mode can produce unpredictable results if the <CodeLiteral>ORDER BY</CodeLiteral> ordering does not order the rows uniquely. The <CodeLiteral>RANGE</CodeLiteral> and <CodeLiteral>GROUPS</CodeLiteral> modes are designed to ensure that rows that are peers in the <CodeLiteral>ORDER BY</CodeLiteral> ordering are treated alike: all rows of a given peer group will be in the frame or excluded from it.\n The purpose of a <CodeLiteral>WINDOW</CodeLiteral> clause is to specify the behavior of window functions appearing in the query's SELECT List or <CodeLiteral>ORDER BY</CodeLiteral> Clause. These functions can reference the <CodeLiteral>WINDOW</CodeLiteral> clause entries by name in their <CodeLiteral>OVER</CodeLiteral> clauses. A <CodeLiteral>WINDOW</CodeLiteral> clause entry does not have to be referenced anywhere, however; if it is not used in the query it is simply ignored. It is possible to use window functions without any <CodeLiteral>WINDOW</CodeLiteral> clause at all, since a window function call can specify its window definition directly in its <CodeLiteral>OVER</CodeLiteral> clause. However, the <CodeLiteral>WINDOW</CodeLiteral> clause saves typing when the same window definition is needed for more than one window function.\n Currently, <CodeLiteral>FOR NO KEY UPDATE</CodeLiteral>, <CodeLiteral>FOR UPDATE</CodeLiteral>, <CodeLiteral>FOR SHARE</CodeLiteral> and <CodeLiteral>FOR KEY SHARE</CodeLiteral> cannot be specified with <CodeLiteral>WINDOW</CodeLiteral>.\n Window functions are described in detail in Section 3.5, Section 4.2.8, and Section 7.2.5. <sep>[DEMO]: SELECT department, employee_id, salary, AVG(salary) OVER (w) FROM employees WINDOW w AS (PARTITION BY department ORDER BY salary RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)",
        "example": [
            "SELECT department, employee_id, salary, AVG(salary) OVER (w) FROM employees WINDOW w AS (PARTITION BY department ORDER BY salary RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)"
        ],
        "link": []
    },
    {
        "type": "keyword",
        "keyword": "offset FOLLOWING",
        "tree": " (frame_bound FOLLOWING)",
        "description": "The optional <CodeLiteral>WINDOW</CodeLiteral> clause has the general form\n <code>WINDOW window_name AS ( window_definition ) [, ...]\n</code>\n where window_name is a name that can be referenced from <CodeLiteral>OVER</CodeLiteral> clauses or subsequent window definitions, and window_definition is\n <code>[ existing_window_name ]\n[ PARTITION BY expression [, ...] ]\n[ ORDER BY expression [ ASC | DESC | USING operator ] [ NULLS { FIRST | LAST } ] [, ...] ]\n[ frame_clause ]\n</code>\n If an existing_window_name is specified it must refer to an earlier entry in the <CodeLiteral>WINDOW</CodeLiteral> list; the new window copies its partitioning clause from that entry, as well as its ordering clause if any. In this case the new window cannot specify its own <CodeLiteral>PARTITION BY</CodeLiteral> clause, and it can specify <CodeLiteral>ORDER BY</CodeLiteral> only if the copied window does not have one. The new window always uses its own frame clause; the copied window must not specify a frame clause.\n The elements of the <CodeLiteral>PARTITION BY</CodeLiteral> list are interpreted in much the same fashion as elements of a <CodeLiteral>GROUP BY</CodeLiteral> Clause, except that they are always simple expressions and never the name or number of an output column. Another difference is that these expressions can contain aggregate function calls, which are not allowed in a regular <CodeLiteral>GROUP BY</CodeLiteral> clause. They are allowed here because windowing occurs after grouping and aggregation.\n Similarly, the elements of the <CodeLiteral>ORDER BY</CodeLiteral> list are interpreted in much the same fashion as elements of an <CodeLiteral>ORDER BY</CodeLiteral> Clause, except that the expressions are always taken as simple expressions and never the name or number of an output column.\n The optional frame_clause defines the window frame for window functions that depend on the frame (not all do). The window frame is a set of related rows for each row of the query (called the current row). The frame_clause can be one of\n <code>{ RANGE | ROWS | GROUPS } frame_start [ frame_exclusion ]\n{ RANGE | ROWS | GROUPS } BETWEEN frame_start AND frame_end [ frame_exclusion ]\n</code>\n where frame_start and frame_end can be one of\n <code>UNBOUNDED PRECEDING\noffset PRECEDING\nCURRENT ROW\noffset FOLLOWING\nUNBOUNDED FOLLOWING\n</code>\n and frame_exclusion can be one of\n <code>EXCLUDE CURRENT ROW\nEXCLUDE GROUP\nEXCLUDE TIES\nEXCLUDE NO OTHERS\n</code>\n If frame_end is omitted it defaults to <CodeLiteral>CURRENT ROW</CodeLiteral>. Restrictions are that frame_start cannot be <CodeLiteral>UNBOUNDED FOLLOWING</CodeLiteral>, frame_end cannot be <CodeLiteral>UNBOUNDED PRECEDING</CodeLiteral>, and the frame_end choice cannot appear earlier in the above list of frame_start and frame_end options than the frame_start choice does \u2014 for example <CodeLiteral>RANGE BETWEEN CURRENT ROW AND offset PRECEDING</CodeLiteral> is not allowed.\n The default framing option is <CodeLiteral>RANGE UNBOUNDED PRECEDING</CodeLiteral>, which is the same as <CodeLiteral>RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW</CodeLiteral>; it sets the frame to be all rows from the partition start up through the current row's last peer (a row that the window's <CodeLiteral>ORDER BY</CodeLiteral> clause considers equivalent to the current row; all rows are peers if there is no <CodeLiteral>ORDER BY</CodeLiteral>). In general, <CodeLiteral>UNBOUNDED PRECEDING</CodeLiteral> means that the frame starts with the first row of the partition, and similarly <CodeLiteral>UNBOUNDED FOLLOWING</CodeLiteral> means that the frame ends with the last row of the partition, regardless of <CodeLiteral>RANGE</CodeLiteral>, <CodeLiteral>ROWS</CodeLiteral> or <CodeLiteral>GROUPS</CodeLiteral> mode. In <CodeLiteral>ROWS</CodeLiteral> mode, <CodeLiteral>CURRENT ROW</CodeLiteral> means that the frame starts or ends with the current row; but in <CodeLiteral>RANGE</CodeLiteral> or <CodeLiteral>GROUPS</CodeLiteral> mode it means that the frame starts or ends with the current row's first or last peer in the <CodeLiteral>ORDER BY</CodeLiteral> ordering. The offset <CodeLiteral>PRECEDING</CodeLiteral> and offset <CodeLiteral>FOLLOWING</CodeLiteral> options vary in meaning depending on the frame mode. In <CodeLiteral>ROWS</CodeLiteral> mode, the offset is an integer indicating that the frame starts or ends that many rows before or after the current row. In <CodeLiteral>GROUPS</CodeLiteral> mode, the offset is an integer indicating that the frame starts or ends that many peer groups before or after the current row's peer group, where a peer group is a group of rows that are equivalent according to the window's <CodeLiteral>ORDER BY</CodeLiteral> clause. In <CodeLiteral>RANGE</CodeLiteral> mode, use of an offset option requires that there be exactly one <CodeLiteral>ORDER BY</CodeLiteral> column in the window definition. Then the frame contains those rows whose ordering column value is no more than offset less than (for <CodeLiteral>PRECEDING</CodeLiteral>) or more than (for <CodeLiteral>FOLLOWING</CodeLiteral>) the current row's ordering column value. In these cases the data type of the offset expression depends on the data type of the ordering column. For numeric ordering columns it is typically of the same type as the ordering column, but for datetime ordering columns it is an interval. In all these cases, the value of the offset must be non-null and non-negative. Also, while the offset does not have to be a simple constant, it cannot contain variables, aggregate functions, or window functions.\n The frame_exclusion option allows rows around the current row to be excluded from the frame, even if they would be included according to the frame start and frame end options. <CodeLiteral>EXCLUDE CURRENT ROW</CodeLiteral> excludes the current row from the frame. <CodeLiteral>EXCLUDE GROUP</CodeLiteral> excludes the current row and its ordering peers from the frame. <CodeLiteral>EXCLUDE TIES</CodeLiteral> excludes any peers of the current row from the frame, but not the current row itself. <CodeLiteral>EXCLUDE NO OTHERS</CodeLiteral> simply specifies explicitly the default behavior of not excluding the current row or its peers.\n Beware that the <CodeLiteral>ROWS</CodeLiteral> mode can produce unpredictable results if the <CodeLiteral>ORDER BY</CodeLiteral> ordering does not order the rows uniquely. The <CodeLiteral>RANGE</CodeLiteral> and <CodeLiteral>GROUPS</CodeLiteral> modes are designed to ensure that rows that are peers in the <CodeLiteral>ORDER BY</CodeLiteral> ordering are treated alike: all rows of a given peer group will be in the frame or excluded from it.\n The purpose of a <CodeLiteral>WINDOW</CodeLiteral> clause is to specify the behavior of window functions appearing in the query's SELECT List or <CodeLiteral>ORDER BY</CodeLiteral> Clause. These functions can reference the <CodeLiteral>WINDOW</CodeLiteral> clause entries by name in their <CodeLiteral>OVER</CodeLiteral> clauses. A <CodeLiteral>WINDOW</CodeLiteral> clause entry does not have to be referenced anywhere, however; if it is not used in the query it is simply ignored. It is possible to use window functions without any <CodeLiteral>WINDOW</CodeLiteral> clause at all, since a window function call can specify its window definition directly in its <CodeLiteral>OVER</CodeLiteral> clause. However, the <CodeLiteral>WINDOW</CodeLiteral> clause saves typing when the same window definition is needed for more than one window function.\n Currently, <CodeLiteral>FOR NO KEY UPDATE</CodeLiteral>, <CodeLiteral>FOR UPDATE</CodeLiteral>, <CodeLiteral>FOR SHARE</CodeLiteral> and <CodeLiteral>FOR KEY SHARE</CodeLiteral> cannot be specified with <CodeLiteral>WINDOW</CodeLiteral>.\n Window functions are described in detail in Section 3.5, Section 4.2.8, and Section 7.2.5. ",
        "detail": "[DESCRIPTION]: The optional <CodeLiteral>WINDOW</CodeLiteral> clause has the general form\n <code>WINDOW window_name AS ( window_definition ) [, ...]\n</code>\n where window_name is a name that can be referenced from <CodeLiteral>OVER</CodeLiteral> clauses or subsequent window definitions, and window_definition is\n <code>[ existing_window_name ]\n[ PARTITION BY expression [, ...] ]\n[ ORDER BY expression [ ASC | DESC | USING operator ] [ NULLS { FIRST | LAST } ] [, ...] ]\n[ frame_clause ]\n</code>\n If an existing_window_name is specified it must refer to an earlier entry in the <CodeLiteral>WINDOW</CodeLiteral> list; the new window copies its partitioning clause from that entry, as well as its ordering clause if any. In this case the new window cannot specify its own <CodeLiteral>PARTITION BY</CodeLiteral> clause, and it can specify <CodeLiteral>ORDER BY</CodeLiteral> only if the copied window does not have one. The new window always uses its own frame clause; the copied window must not specify a frame clause.\n The elements of the <CodeLiteral>PARTITION BY</CodeLiteral> list are interpreted in much the same fashion as elements of a <CodeLiteral>GROUP BY</CodeLiteral> Clause, except that they are always simple expressions and never the name or number of an output column. Another difference is that these expressions can contain aggregate function calls, which are not allowed in a regular <CodeLiteral>GROUP BY</CodeLiteral> clause. They are allowed here because windowing occurs after grouping and aggregation.\n Similarly, the elements of the <CodeLiteral>ORDER BY</CodeLiteral> list are interpreted in much the same fashion as elements of an <CodeLiteral>ORDER BY</CodeLiteral> Clause, except that the expressions are always taken as simple expressions and never the name or number of an output column.\n The optional frame_clause defines the window frame for window functions that depend on the frame (not all do). The window frame is a set of related rows for each row of the query (called the current row). The frame_clause can be one of\n <code>{ RANGE | ROWS | GROUPS } frame_start [ frame_exclusion ]\n{ RANGE | ROWS | GROUPS } BETWEEN frame_start AND frame_end [ frame_exclusion ]\n</code>\n where frame_start and frame_end can be one of\n <code>UNBOUNDED PRECEDING\noffset PRECEDING\nCURRENT ROW\noffset FOLLOWING\nUNBOUNDED FOLLOWING\n</code>\n and frame_exclusion can be one of\n <code>EXCLUDE CURRENT ROW\nEXCLUDE GROUP\nEXCLUDE TIES\nEXCLUDE NO OTHERS\n</code>\n If frame_end is omitted it defaults to <CodeLiteral>CURRENT ROW</CodeLiteral>. Restrictions are that frame_start cannot be <CodeLiteral>UNBOUNDED FOLLOWING</CodeLiteral>, frame_end cannot be <CodeLiteral>UNBOUNDED PRECEDING</CodeLiteral>, and the frame_end choice cannot appear earlier in the above list of frame_start and frame_end options than the frame_start choice does \u2014 for example <CodeLiteral>RANGE BETWEEN CURRENT ROW AND offset PRECEDING</CodeLiteral> is not allowed.\n The default framing option is <CodeLiteral>RANGE UNBOUNDED PRECEDING</CodeLiteral>, which is the same as <CodeLiteral>RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW</CodeLiteral>; it sets the frame to be all rows from the partition start up through the current row's last peer (a row that the window's <CodeLiteral>ORDER BY</CodeLiteral> clause considers equivalent to the current row; all rows are peers if there is no <CodeLiteral>ORDER BY</CodeLiteral>). In general, <CodeLiteral>UNBOUNDED PRECEDING</CodeLiteral> means that the frame starts with the first row of the partition, and similarly <CodeLiteral>UNBOUNDED FOLLOWING</CodeLiteral> means that the frame ends with the last row of the partition, regardless of <CodeLiteral>RANGE</CodeLiteral>, <CodeLiteral>ROWS</CodeLiteral> or <CodeLiteral>GROUPS</CodeLiteral> mode. In <CodeLiteral>ROWS</CodeLiteral> mode, <CodeLiteral>CURRENT ROW</CodeLiteral> means that the frame starts or ends with the current row; but in <CodeLiteral>RANGE</CodeLiteral> or <CodeLiteral>GROUPS</CodeLiteral> mode it means that the frame starts or ends with the current row's first or last peer in the <CodeLiteral>ORDER BY</CodeLiteral> ordering. The offset <CodeLiteral>PRECEDING</CodeLiteral> and offset <CodeLiteral>FOLLOWING</CodeLiteral> options vary in meaning depending on the frame mode. In <CodeLiteral>ROWS</CodeLiteral> mode, the offset is an integer indicating that the frame starts or ends that many rows before or after the current row. In <CodeLiteral>GROUPS</CodeLiteral> mode, the offset is an integer indicating that the frame starts or ends that many peer groups before or after the current row's peer group, where a peer group is a group of rows that are equivalent according to the window's <CodeLiteral>ORDER BY</CodeLiteral> clause. In <CodeLiteral>RANGE</CodeLiteral> mode, use of an offset option requires that there be exactly one <CodeLiteral>ORDER BY</CodeLiteral> column in the window definition. Then the frame contains those rows whose ordering column value is no more than offset less than (for <CodeLiteral>PRECEDING</CodeLiteral>) or more than (for <CodeLiteral>FOLLOWING</CodeLiteral>) the current row's ordering column value. In these cases the data type of the offset expression depends on the data type of the ordering column. For numeric ordering columns it is typically of the same type as the ordering column, but for datetime ordering columns it is an interval. In all these cases, the value of the offset must be non-null and non-negative. Also, while the offset does not have to be a simple constant, it cannot contain variables, aggregate functions, or window functions.\n The frame_exclusion option allows rows around the current row to be excluded from the frame, even if they would be included according to the frame start and frame end options. <CodeLiteral>EXCLUDE CURRENT ROW</CodeLiteral> excludes the current row from the frame. <CodeLiteral>EXCLUDE GROUP</CodeLiteral> excludes the current row and its ordering peers from the frame. <CodeLiteral>EXCLUDE TIES</CodeLiteral> excludes any peers of the current row from the frame, but not the current row itself. <CodeLiteral>EXCLUDE NO OTHERS</CodeLiteral> simply specifies explicitly the default behavior of not excluding the current row or its peers.\n Beware that the <CodeLiteral>ROWS</CodeLiteral> mode can produce unpredictable results if the <CodeLiteral>ORDER BY</CodeLiteral> ordering does not order the rows uniquely. The <CodeLiteral>RANGE</CodeLiteral> and <CodeLiteral>GROUPS</CodeLiteral> modes are designed to ensure that rows that are peers in the <CodeLiteral>ORDER BY</CodeLiteral> ordering are treated alike: all rows of a given peer group will be in the frame or excluded from it.\n The purpose of a <CodeLiteral>WINDOW</CodeLiteral> clause is to specify the behavior of window functions appearing in the query's SELECT List or <CodeLiteral>ORDER BY</CodeLiteral> Clause. These functions can reference the <CodeLiteral>WINDOW</CodeLiteral> clause entries by name in their <CodeLiteral>OVER</CodeLiteral> clauses. A <CodeLiteral>WINDOW</CodeLiteral> clause entry does not have to be referenced anywhere, however; if it is not used in the query it is simply ignored. It is possible to use window functions without any <CodeLiteral>WINDOW</CodeLiteral> clause at all, since a window function call can specify its window definition directly in its <CodeLiteral>OVER</CodeLiteral> clause. However, the <CodeLiteral>WINDOW</CodeLiteral> clause saves typing when the same window definition is needed for more than one window function.\n Currently, <CodeLiteral>FOR NO KEY UPDATE</CodeLiteral>, <CodeLiteral>FOR UPDATE</CodeLiteral>, <CodeLiteral>FOR SHARE</CodeLiteral> and <CodeLiteral>FOR KEY SHARE</CodeLiteral> cannot be specified with <CodeLiteral>WINDOW</CodeLiteral>.\n Window functions are described in detail in Section 3.5, Section 4.2.8, and Section 7.2.5. <sep>[DEMO]: SELECT employee_id, salary, AVG(salary) OVER (ORDER BY department_id ROWS BETWEEN CURRENT ROW AND 2 FOLLOWING) AS avg_salary_next_two FROM employees",
        "example": [
            "SELECT employee_id, salary, AVG(salary) OVER (ORDER BY department_id ROWS BETWEEN CURRENT ROW AND 2 FOLLOWING) AS avg_salary_next_two FROM employees"
        ],
        "link": []
    },
    {
        "type": "keyword",
        "keyword": "UNBOUNDED FOLLOWING",
        "tree": " (frame_bound UNBOUNDED FOLLOWING)",
        "description": "The optional <CodeLiteral>WINDOW</CodeLiteral> clause has the general form\n <code>WINDOW window_name AS ( window_definition ) [, ...]\n</code>\n where window_name is a name that can be referenced from <CodeLiteral>OVER</CodeLiteral> clauses or subsequent window definitions, and window_definition is\n <code>[ existing_window_name ]\n[ PARTITION BY expression [, ...] ]\n[ ORDER BY expression [ ASC | DESC | USING operator ] [ NULLS { FIRST | LAST } ] [, ...] ]\n[ frame_clause ]\n</code>\n If an existing_window_name is specified it must refer to an earlier entry in the <CodeLiteral>WINDOW</CodeLiteral> list; the new window copies its partitioning clause from that entry, as well as its ordering clause if any. In this case the new window cannot specify its own <CodeLiteral>PARTITION BY</CodeLiteral> clause, and it can specify <CodeLiteral>ORDER BY</CodeLiteral> only if the copied window does not have one. The new window always uses its own frame clause; the copied window must not specify a frame clause.\n The elements of the <CodeLiteral>PARTITION BY</CodeLiteral> list are interpreted in much the same fashion as elements of a <CodeLiteral>GROUP BY</CodeLiteral> Clause, except that they are always simple expressions and never the name or number of an output column. Another difference is that these expressions can contain aggregate function calls, which are not allowed in a regular <CodeLiteral>GROUP BY</CodeLiteral> clause. They are allowed here because windowing occurs after grouping and aggregation.\n Similarly, the elements of the <CodeLiteral>ORDER BY</CodeLiteral> list are interpreted in much the same fashion as elements of an <CodeLiteral>ORDER BY</CodeLiteral> Clause, except that the expressions are always taken as simple expressions and never the name or number of an output column.\n The optional frame_clause defines the window frame for window functions that depend on the frame (not all do). The window frame is a set of related rows for each row of the query (called the current row). The frame_clause can be one of\n <code>{ RANGE | ROWS | GROUPS } frame_start [ frame_exclusion ]\n{ RANGE | ROWS | GROUPS } BETWEEN frame_start AND frame_end [ frame_exclusion ]\n</code>\n where frame_start and frame_end can be one of\n <code>UNBOUNDED PRECEDING\noffset PRECEDING\nCURRENT ROW\noffset FOLLOWING\nUNBOUNDED FOLLOWING\n</code>\n and frame_exclusion can be one of\n <code>EXCLUDE CURRENT ROW\nEXCLUDE GROUP\nEXCLUDE TIES\nEXCLUDE NO OTHERS\n</code>\n If frame_end is omitted it defaults to <CodeLiteral>CURRENT ROW</CodeLiteral>. Restrictions are that frame_start cannot be <CodeLiteral>UNBOUNDED FOLLOWING</CodeLiteral>, frame_end cannot be <CodeLiteral>UNBOUNDED PRECEDING</CodeLiteral>, and the frame_end choice cannot appear earlier in the above list of frame_start and frame_end options than the frame_start choice does \u2014 for example <CodeLiteral>RANGE BETWEEN CURRENT ROW AND offset PRECEDING</CodeLiteral> is not allowed.\n The default framing option is <CodeLiteral>RANGE UNBOUNDED PRECEDING</CodeLiteral>, which is the same as <CodeLiteral>RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW</CodeLiteral>; it sets the frame to be all rows from the partition start up through the current row's last peer (a row that the window's <CodeLiteral>ORDER BY</CodeLiteral> clause considers equivalent to the current row; all rows are peers if there is no <CodeLiteral>ORDER BY</CodeLiteral>). In general, <CodeLiteral>UNBOUNDED PRECEDING</CodeLiteral> means that the frame starts with the first row of the partition, and similarly <CodeLiteral>UNBOUNDED FOLLOWING</CodeLiteral> means that the frame ends with the last row of the partition, regardless of <CodeLiteral>RANGE</CodeLiteral>, <CodeLiteral>ROWS</CodeLiteral> or <CodeLiteral>GROUPS</CodeLiteral> mode. In <CodeLiteral>ROWS</CodeLiteral> mode, <CodeLiteral>CURRENT ROW</CodeLiteral> means that the frame starts or ends with the current row; but in <CodeLiteral>RANGE</CodeLiteral> or <CodeLiteral>GROUPS</CodeLiteral> mode it means that the frame starts or ends with the current row's first or last peer in the <CodeLiteral>ORDER BY</CodeLiteral> ordering. The offset <CodeLiteral>PRECEDING</CodeLiteral> and offset <CodeLiteral>FOLLOWING</CodeLiteral> options vary in meaning depending on the frame mode. In <CodeLiteral>ROWS</CodeLiteral> mode, the offset is an integer indicating that the frame starts or ends that many rows before or after the current row. In <CodeLiteral>GROUPS</CodeLiteral> mode, the offset is an integer indicating that the frame starts or ends that many peer groups before or after the current row's peer group, where a peer group is a group of rows that are equivalent according to the window's <CodeLiteral>ORDER BY</CodeLiteral> clause. In <CodeLiteral>RANGE</CodeLiteral> mode, use of an offset option requires that there be exactly one <CodeLiteral>ORDER BY</CodeLiteral> column in the window definition. Then the frame contains those rows whose ordering column value is no more than offset less than (for <CodeLiteral>PRECEDING</CodeLiteral>) or more than (for <CodeLiteral>FOLLOWING</CodeLiteral>) the current row's ordering column value. In these cases the data type of the offset expression depends on the data type of the ordering column. For numeric ordering columns it is typically of the same type as the ordering column, but for datetime ordering columns it is an interval. In all these cases, the value of the offset must be non-null and non-negative. Also, while the offset does not have to be a simple constant, it cannot contain variables, aggregate functions, or window functions.\n The frame_exclusion option allows rows around the current row to be excluded from the frame, even if they would be included according to the frame start and frame end options. <CodeLiteral>EXCLUDE CURRENT ROW</CodeLiteral> excludes the current row from the frame. <CodeLiteral>EXCLUDE GROUP</CodeLiteral> excludes the current row and its ordering peers from the frame. <CodeLiteral>EXCLUDE TIES</CodeLiteral> excludes any peers of the current row from the frame, but not the current row itself. <CodeLiteral>EXCLUDE NO OTHERS</CodeLiteral> simply specifies explicitly the default behavior of not excluding the current row or its peers.\n Beware that the <CodeLiteral>ROWS</CodeLiteral> mode can produce unpredictable results if the <CodeLiteral>ORDER BY</CodeLiteral> ordering does not order the rows uniquely. The <CodeLiteral>RANGE</CodeLiteral> and <CodeLiteral>GROUPS</CodeLiteral> modes are designed to ensure that rows that are peers in the <CodeLiteral>ORDER BY</CodeLiteral> ordering are treated alike: all rows of a given peer group will be in the frame or excluded from it.\n The purpose of a <CodeLiteral>WINDOW</CodeLiteral> clause is to specify the behavior of window functions appearing in the query's SELECT List or <CodeLiteral>ORDER BY</CodeLiteral> Clause. These functions can reference the <CodeLiteral>WINDOW</CodeLiteral> clause entries by name in their <CodeLiteral>OVER</CodeLiteral> clauses. A <CodeLiteral>WINDOW</CodeLiteral> clause entry does not have to be referenced anywhere, however; if it is not used in the query it is simply ignored. It is possible to use window functions without any <CodeLiteral>WINDOW</CodeLiteral> clause at all, since a window function call can specify its window definition directly in its <CodeLiteral>OVER</CodeLiteral> clause. However, the <CodeLiteral>WINDOW</CodeLiteral> clause saves typing when the same window definition is needed for more than one window function.\n Currently, <CodeLiteral>FOR NO KEY UPDATE</CodeLiteral>, <CodeLiteral>FOR UPDATE</CodeLiteral>, <CodeLiteral>FOR SHARE</CodeLiteral> and <CodeLiteral>FOR KEY SHARE</CodeLiteral> cannot be specified with <CodeLiteral>WINDOW</CodeLiteral>.\n Window functions are described in detail in Section 3.5, Section 4.2.8, and Section 7.2.5. ",
        "detail": "[DESCRIPTION]: The optional <CodeLiteral>WINDOW</CodeLiteral> clause has the general form\n <code>WINDOW window_name AS ( window_definition ) [, ...]\n</code>\n where window_name is a name that can be referenced from <CodeLiteral>OVER</CodeLiteral> clauses or subsequent window definitions, and window_definition is\n <code>[ existing_window_name ]\n[ PARTITION BY expression [, ...] ]\n[ ORDER BY expression [ ASC | DESC | USING operator ] [ NULLS { FIRST | LAST } ] [, ...] ]\n[ frame_clause ]\n</code>\n If an existing_window_name is specified it must refer to an earlier entry in the <CodeLiteral>WINDOW</CodeLiteral> list; the new window copies its partitioning clause from that entry, as well as its ordering clause if any. In this case the new window cannot specify its own <CodeLiteral>PARTITION BY</CodeLiteral> clause, and it can specify <CodeLiteral>ORDER BY</CodeLiteral> only if the copied window does not have one. The new window always uses its own frame clause; the copied window must not specify a frame clause.\n The elements of the <CodeLiteral>PARTITION BY</CodeLiteral> list are interpreted in much the same fashion as elements of a <CodeLiteral>GROUP BY</CodeLiteral> Clause, except that they are always simple expressions and never the name or number of an output column. Another difference is that these expressions can contain aggregate function calls, which are not allowed in a regular <CodeLiteral>GROUP BY</CodeLiteral> clause. They are allowed here because windowing occurs after grouping and aggregation.\n Similarly, the elements of the <CodeLiteral>ORDER BY</CodeLiteral> list are interpreted in much the same fashion as elements of an <CodeLiteral>ORDER BY</CodeLiteral> Clause, except that the expressions are always taken as simple expressions and never the name or number of an output column.\n The optional frame_clause defines the window frame for window functions that depend on the frame (not all do). The window frame is a set of related rows for each row of the query (called the current row). The frame_clause can be one of\n <code>{ RANGE | ROWS | GROUPS } frame_start [ frame_exclusion ]\n{ RANGE | ROWS | GROUPS } BETWEEN frame_start AND frame_end [ frame_exclusion ]\n</code>\n where frame_start and frame_end can be one of\n <code>UNBOUNDED PRECEDING\noffset PRECEDING\nCURRENT ROW\noffset FOLLOWING\nUNBOUNDED FOLLOWING\n</code>\n and frame_exclusion can be one of\n <code>EXCLUDE CURRENT ROW\nEXCLUDE GROUP\nEXCLUDE TIES\nEXCLUDE NO OTHERS\n</code>\n If frame_end is omitted it defaults to <CodeLiteral>CURRENT ROW</CodeLiteral>. Restrictions are that frame_start cannot be <CodeLiteral>UNBOUNDED FOLLOWING</CodeLiteral>, frame_end cannot be <CodeLiteral>UNBOUNDED PRECEDING</CodeLiteral>, and the frame_end choice cannot appear earlier in the above list of frame_start and frame_end options than the frame_start choice does \u2014 for example <CodeLiteral>RANGE BETWEEN CURRENT ROW AND offset PRECEDING</CodeLiteral> is not allowed.\n The default framing option is <CodeLiteral>RANGE UNBOUNDED PRECEDING</CodeLiteral>, which is the same as <CodeLiteral>RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW</CodeLiteral>; it sets the frame to be all rows from the partition start up through the current row's last peer (a row that the window's <CodeLiteral>ORDER BY</CodeLiteral> clause considers equivalent to the current row; all rows are peers if there is no <CodeLiteral>ORDER BY</CodeLiteral>). In general, <CodeLiteral>UNBOUNDED PRECEDING</CodeLiteral> means that the frame starts with the first row of the partition, and similarly <CodeLiteral>UNBOUNDED FOLLOWING</CodeLiteral> means that the frame ends with the last row of the partition, regardless of <CodeLiteral>RANGE</CodeLiteral>, <CodeLiteral>ROWS</CodeLiteral> or <CodeLiteral>GROUPS</CodeLiteral> mode. In <CodeLiteral>ROWS</CodeLiteral> mode, <CodeLiteral>CURRENT ROW</CodeLiteral> means that the frame starts or ends with the current row; but in <CodeLiteral>RANGE</CodeLiteral> or <CodeLiteral>GROUPS</CodeLiteral> mode it means that the frame starts or ends with the current row's first or last peer in the <CodeLiteral>ORDER BY</CodeLiteral> ordering. The offset <CodeLiteral>PRECEDING</CodeLiteral> and offset <CodeLiteral>FOLLOWING</CodeLiteral> options vary in meaning depending on the frame mode. In <CodeLiteral>ROWS</CodeLiteral> mode, the offset is an integer indicating that the frame starts or ends that many rows before or after the current row. In <CodeLiteral>GROUPS</CodeLiteral> mode, the offset is an integer indicating that the frame starts or ends that many peer groups before or after the current row's peer group, where a peer group is a group of rows that are equivalent according to the window's <CodeLiteral>ORDER BY</CodeLiteral> clause. In <CodeLiteral>RANGE</CodeLiteral> mode, use of an offset option requires that there be exactly one <CodeLiteral>ORDER BY</CodeLiteral> column in the window definition. Then the frame contains those rows whose ordering column value is no more than offset less than (for <CodeLiteral>PRECEDING</CodeLiteral>) or more than (for <CodeLiteral>FOLLOWING</CodeLiteral>) the current row's ordering column value. In these cases the data type of the offset expression depends on the data type of the ordering column. For numeric ordering columns it is typically of the same type as the ordering column, but for datetime ordering columns it is an interval. In all these cases, the value of the offset must be non-null and non-negative. Also, while the offset does not have to be a simple constant, it cannot contain variables, aggregate functions, or window functions.\n The frame_exclusion option allows rows around the current row to be excluded from the frame, even if they would be included according to the frame start and frame end options. <CodeLiteral>EXCLUDE CURRENT ROW</CodeLiteral> excludes the current row from the frame. <CodeLiteral>EXCLUDE GROUP</CodeLiteral> excludes the current row and its ordering peers from the frame. <CodeLiteral>EXCLUDE TIES</CodeLiteral> excludes any peers of the current row from the frame, but not the current row itself. <CodeLiteral>EXCLUDE NO OTHERS</CodeLiteral> simply specifies explicitly the default behavior of not excluding the current row or its peers.\n Beware that the <CodeLiteral>ROWS</CodeLiteral> mode can produce unpredictable results if the <CodeLiteral>ORDER BY</CodeLiteral> ordering does not order the rows uniquely. The <CodeLiteral>RANGE</CodeLiteral> and <CodeLiteral>GROUPS</CodeLiteral> modes are designed to ensure that rows that are peers in the <CodeLiteral>ORDER BY</CodeLiteral> ordering are treated alike: all rows of a given peer group will be in the frame or excluded from it.\n The purpose of a <CodeLiteral>WINDOW</CodeLiteral> clause is to specify the behavior of window functions appearing in the query's SELECT List or <CodeLiteral>ORDER BY</CodeLiteral> Clause. These functions can reference the <CodeLiteral>WINDOW</CodeLiteral> clause entries by name in their <CodeLiteral>OVER</CodeLiteral> clauses. A <CodeLiteral>WINDOW</CodeLiteral> clause entry does not have to be referenced anywhere, however; if it is not used in the query it is simply ignored. It is possible to use window functions without any <CodeLiteral>WINDOW</CodeLiteral> clause at all, since a window function call can specify its window definition directly in its <CodeLiteral>OVER</CodeLiteral> clause. However, the <CodeLiteral>WINDOW</CodeLiteral> clause saves typing when the same window definition is needed for more than one window function.\n Currently, <CodeLiteral>FOR NO KEY UPDATE</CodeLiteral>, <CodeLiteral>FOR UPDATE</CodeLiteral>, <CodeLiteral>FOR SHARE</CodeLiteral> and <CodeLiteral>FOR KEY SHARE</CodeLiteral> cannot be specified with <CodeLiteral>WINDOW</CodeLiteral>.\n Window functions are described in detail in Section 3.5, Section 4.2.8, and Section 7.2.5. <sep>[DEMO]: SELECT employee_name, department, salary, AVG(salary) OVER (PARTITION BY department ORDER BY salary ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING) AS avg_salary_from_current_to_last FROM employees;",
        "example": [
            "SELECT employee_name, department, salary, AVG(salary) OVER (PARTITION BY department ORDER BY salary ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING) AS avg_salary_from_current_to_last FROM employees;"
        ],
        "link": []
    },
    {
        "type": "keyword",
        "keyword": "EXCLUDE CURRENT ROW",
        "tree": " (opt_window_exclusion_clause EXCLUDE CURRENT ROW)",
        "description": "The optional <CodeLiteral>WINDOW</CodeLiteral> clause has the general form\n <code>WINDOW window_name AS ( window_definition ) [, ...]\n</code>\n where window_name is a name that can be referenced from <CodeLiteral>OVER</CodeLiteral> clauses or subsequent window definitions, and window_definition is\n <code>[ existing_window_name ]\n[ PARTITION BY expression [, ...] ]\n[ ORDER BY expression [ ASC | DESC | USING operator ] [ NULLS { FIRST | LAST } ] [, ...] ]\n[ frame_clause ]\n</code>\n If an existing_window_name is specified it must refer to an earlier entry in the <CodeLiteral>WINDOW</CodeLiteral> list; the new window copies its partitioning clause from that entry, as well as its ordering clause if any. In this case the new window cannot specify its own <CodeLiteral>PARTITION BY</CodeLiteral> clause, and it can specify <CodeLiteral>ORDER BY</CodeLiteral> only if the copied window does not have one. The new window always uses its own frame clause; the copied window must not specify a frame clause.\n The elements of the <CodeLiteral>PARTITION BY</CodeLiteral> list are interpreted in much the same fashion as elements of a <CodeLiteral>GROUP BY</CodeLiteral> Clause, except that they are always simple expressions and never the name or number of an output column. Another difference is that these expressions can contain aggregate function calls, which are not allowed in a regular <CodeLiteral>GROUP BY</CodeLiteral> clause. They are allowed here because windowing occurs after grouping and aggregation.\n Similarly, the elements of the <CodeLiteral>ORDER BY</CodeLiteral> list are interpreted in much the same fashion as elements of an <CodeLiteral>ORDER BY</CodeLiteral> Clause, except that the expressions are always taken as simple expressions and never the name or number of an output column.\n The optional frame_clause defines the window frame for window functions that depend on the frame (not all do). The window frame is a set of related rows for each row of the query (called the current row). The frame_clause can be one of\n <code>{ RANGE | ROWS | GROUPS } frame_start [ frame_exclusion ]\n{ RANGE | ROWS | GROUPS } BETWEEN frame_start AND frame_end [ frame_exclusion ]\n</code>\n where frame_start and frame_end can be one of\n <code>UNBOUNDED PRECEDING\noffset PRECEDING\nCURRENT ROW\noffset FOLLOWING\nUNBOUNDED FOLLOWING\n</code>\n and frame_exclusion can be one of\n <code>EXCLUDE CURRENT ROW\nEXCLUDE GROUP\nEXCLUDE TIES\nEXCLUDE NO OTHERS\n</code>\n If frame_end is omitted it defaults to <CodeLiteral>CURRENT ROW</CodeLiteral>. Restrictions are that frame_start cannot be <CodeLiteral>UNBOUNDED FOLLOWING</CodeLiteral>, frame_end cannot be <CodeLiteral>UNBOUNDED PRECEDING</CodeLiteral>, and the frame_end choice cannot appear earlier in the above list of frame_start and frame_end options than the frame_start choice does \u2014 for example <CodeLiteral>RANGE BETWEEN CURRENT ROW AND offset PRECEDING</CodeLiteral> is not allowed.\n The default framing option is <CodeLiteral>RANGE UNBOUNDED PRECEDING</CodeLiteral>, which is the same as <CodeLiteral>RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW</CodeLiteral>; it sets the frame to be all rows from the partition start up through the current row's last peer (a row that the window's <CodeLiteral>ORDER BY</CodeLiteral> clause considers equivalent to the current row; all rows are peers if there is no <CodeLiteral>ORDER BY</CodeLiteral>). In general, <CodeLiteral>UNBOUNDED PRECEDING</CodeLiteral> means that the frame starts with the first row of the partition, and similarly <CodeLiteral>UNBOUNDED FOLLOWING</CodeLiteral> means that the frame ends with the last row of the partition, regardless of <CodeLiteral>RANGE</CodeLiteral>, <CodeLiteral>ROWS</CodeLiteral> or <CodeLiteral>GROUPS</CodeLiteral> mode. In <CodeLiteral>ROWS</CodeLiteral> mode, <CodeLiteral>CURRENT ROW</CodeLiteral> means that the frame starts or ends with the current row; but in <CodeLiteral>RANGE</CodeLiteral> or <CodeLiteral>GROUPS</CodeLiteral> mode it means that the frame starts or ends with the current row's first or last peer in the <CodeLiteral>ORDER BY</CodeLiteral> ordering. The offset <CodeLiteral>PRECEDING</CodeLiteral> and offset <CodeLiteral>FOLLOWING</CodeLiteral> options vary in meaning depending on the frame mode. In <CodeLiteral>ROWS</CodeLiteral> mode, the offset is an integer indicating that the frame starts or ends that many rows before or after the current row. In <CodeLiteral>GROUPS</CodeLiteral> mode, the offset is an integer indicating that the frame starts or ends that many peer groups before or after the current row's peer group, where a peer group is a group of rows that are equivalent according to the window's <CodeLiteral>ORDER BY</CodeLiteral> clause. In <CodeLiteral>RANGE</CodeLiteral> mode, use of an offset option requires that there be exactly one <CodeLiteral>ORDER BY</CodeLiteral> column in the window definition. Then the frame contains those rows whose ordering column value is no more than offset less than (for <CodeLiteral>PRECEDING</CodeLiteral>) or more than (for <CodeLiteral>FOLLOWING</CodeLiteral>) the current row's ordering column value. In these cases the data type of the offset expression depends on the data type of the ordering column. For numeric ordering columns it is typically of the same type as the ordering column, but for datetime ordering columns it is an interval. In all these cases, the value of the offset must be non-null and non-negative. Also, while the offset does not have to be a simple constant, it cannot contain variables, aggregate functions, or window functions.\n The frame_exclusion option allows rows around the current row to be excluded from the frame, even if they would be included according to the frame start and frame end options. <CodeLiteral>EXCLUDE CURRENT ROW</CodeLiteral> excludes the current row from the frame. <CodeLiteral>EXCLUDE GROUP</CodeLiteral> excludes the current row and its ordering peers from the frame. <CodeLiteral>EXCLUDE TIES</CodeLiteral> excludes any peers of the current row from the frame, but not the current row itself. <CodeLiteral>EXCLUDE NO OTHERS</CodeLiteral> simply specifies explicitly the default behavior of not excluding the current row or its peers.\n Beware that the <CodeLiteral>ROWS</CodeLiteral> mode can produce unpredictable results if the <CodeLiteral>ORDER BY</CodeLiteral> ordering does not order the rows uniquely. The <CodeLiteral>RANGE</CodeLiteral> and <CodeLiteral>GROUPS</CodeLiteral> modes are designed to ensure that rows that are peers in the <CodeLiteral>ORDER BY</CodeLiteral> ordering are treated alike: all rows of a given peer group will be in the frame or excluded from it.\n The purpose of a <CodeLiteral>WINDOW</CodeLiteral> clause is to specify the behavior of window functions appearing in the query's SELECT List or <CodeLiteral>ORDER BY</CodeLiteral> Clause. These functions can reference the <CodeLiteral>WINDOW</CodeLiteral> clause entries by name in their <CodeLiteral>OVER</CodeLiteral> clauses. A <CodeLiteral>WINDOW</CodeLiteral> clause entry does not have to be referenced anywhere, however; if it is not used in the query it is simply ignored. It is possible to use window functions without any <CodeLiteral>WINDOW</CodeLiteral> clause at all, since a window function call can specify its window definition directly in its <CodeLiteral>OVER</CodeLiteral> clause. However, the <CodeLiteral>WINDOW</CodeLiteral> clause saves typing when the same window definition is needed for more than one window function.\n Currently, <CodeLiteral>FOR NO KEY UPDATE</CodeLiteral>, <CodeLiteral>FOR UPDATE</CodeLiteral>, <CodeLiteral>FOR SHARE</CodeLiteral> and <CodeLiteral>FOR KEY SHARE</CodeLiteral> cannot be specified with <CodeLiteral>WINDOW</CodeLiteral>.\n Window functions are described in detail in Section 3.5, Section 4.2.8, and Section 7.2.5. ",
        "detail": "[DESCRIPTION]: The optional <CodeLiteral>WINDOW</CodeLiteral> clause has the general form\n <code>WINDOW window_name AS ( window_definition ) [, ...]\n</code>\n where window_name is a name that can be referenced from <CodeLiteral>OVER</CodeLiteral> clauses or subsequent window definitions, and window_definition is\n <code>[ existing_window_name ]\n[ PARTITION BY expression [, ...] ]\n[ ORDER BY expression [ ASC | DESC | USING operator ] [ NULLS { FIRST | LAST } ] [, ...] ]\n[ frame_clause ]\n</code>\n If an existing_window_name is specified it must refer to an earlier entry in the <CodeLiteral>WINDOW</CodeLiteral> list; the new window copies its partitioning clause from that entry, as well as its ordering clause if any. In this case the new window cannot specify its own <CodeLiteral>PARTITION BY</CodeLiteral> clause, and it can specify <CodeLiteral>ORDER BY</CodeLiteral> only if the copied window does not have one. The new window always uses its own frame clause; the copied window must not specify a frame clause.\n The elements of the <CodeLiteral>PARTITION BY</CodeLiteral> list are interpreted in much the same fashion as elements of a <CodeLiteral>GROUP BY</CodeLiteral> Clause, except that they are always simple expressions and never the name or number of an output column. Another difference is that these expressions can contain aggregate function calls, which are not allowed in a regular <CodeLiteral>GROUP BY</CodeLiteral> clause. They are allowed here because windowing occurs after grouping and aggregation.\n Similarly, the elements of the <CodeLiteral>ORDER BY</CodeLiteral> list are interpreted in much the same fashion as elements of an <CodeLiteral>ORDER BY</CodeLiteral> Clause, except that the expressions are always taken as simple expressions and never the name or number of an output column.\n The optional frame_clause defines the window frame for window functions that depend on the frame (not all do). The window frame is a set of related rows for each row of the query (called the current row). The frame_clause can be one of\n <code>{ RANGE | ROWS | GROUPS } frame_start [ frame_exclusion ]\n{ RANGE | ROWS | GROUPS } BETWEEN frame_start AND frame_end [ frame_exclusion ]\n</code>\n where frame_start and frame_end can be one of\n <code>UNBOUNDED PRECEDING\noffset PRECEDING\nCURRENT ROW\noffset FOLLOWING\nUNBOUNDED FOLLOWING\n</code>\n and frame_exclusion can be one of\n <code>EXCLUDE CURRENT ROW\nEXCLUDE GROUP\nEXCLUDE TIES\nEXCLUDE NO OTHERS\n</code>\n If frame_end is omitted it defaults to <CodeLiteral>CURRENT ROW</CodeLiteral>. Restrictions are that frame_start cannot be <CodeLiteral>UNBOUNDED FOLLOWING</CodeLiteral>, frame_end cannot be <CodeLiteral>UNBOUNDED PRECEDING</CodeLiteral>, and the frame_end choice cannot appear earlier in the above list of frame_start and frame_end options than the frame_start choice does \u2014 for example <CodeLiteral>RANGE BETWEEN CURRENT ROW AND offset PRECEDING</CodeLiteral> is not allowed.\n The default framing option is <CodeLiteral>RANGE UNBOUNDED PRECEDING</CodeLiteral>, which is the same as <CodeLiteral>RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW</CodeLiteral>; it sets the frame to be all rows from the partition start up through the current row's last peer (a row that the window's <CodeLiteral>ORDER BY</CodeLiteral> clause considers equivalent to the current row; all rows are peers if there is no <CodeLiteral>ORDER BY</CodeLiteral>). In general, <CodeLiteral>UNBOUNDED PRECEDING</CodeLiteral> means that the frame starts with the first row of the partition, and similarly <CodeLiteral>UNBOUNDED FOLLOWING</CodeLiteral> means that the frame ends with the last row of the partition, regardless of <CodeLiteral>RANGE</CodeLiteral>, <CodeLiteral>ROWS</CodeLiteral> or <CodeLiteral>GROUPS</CodeLiteral> mode. In <CodeLiteral>ROWS</CodeLiteral> mode, <CodeLiteral>CURRENT ROW</CodeLiteral> means that the frame starts or ends with the current row; but in <CodeLiteral>RANGE</CodeLiteral> or <CodeLiteral>GROUPS</CodeLiteral> mode it means that the frame starts or ends with the current row's first or last peer in the <CodeLiteral>ORDER BY</CodeLiteral> ordering. The offset <CodeLiteral>PRECEDING</CodeLiteral> and offset <CodeLiteral>FOLLOWING</CodeLiteral> options vary in meaning depending on the frame mode. In <CodeLiteral>ROWS</CodeLiteral> mode, the offset is an integer indicating that the frame starts or ends that many rows before or after the current row. In <CodeLiteral>GROUPS</CodeLiteral> mode, the offset is an integer indicating that the frame starts or ends that many peer groups before or after the current row's peer group, where a peer group is a group of rows that are equivalent according to the window's <CodeLiteral>ORDER BY</CodeLiteral> clause. In <CodeLiteral>RANGE</CodeLiteral> mode, use of an offset option requires that there be exactly one <CodeLiteral>ORDER BY</CodeLiteral> column in the window definition. Then the frame contains those rows whose ordering column value is no more than offset less than (for <CodeLiteral>PRECEDING</CodeLiteral>) or more than (for <CodeLiteral>FOLLOWING</CodeLiteral>) the current row's ordering column value. In these cases the data type of the offset expression depends on the data type of the ordering column. For numeric ordering columns it is typically of the same type as the ordering column, but for datetime ordering columns it is an interval. In all these cases, the value of the offset must be non-null and non-negative. Also, while the offset does not have to be a simple constant, it cannot contain variables, aggregate functions, or window functions.\n The frame_exclusion option allows rows around the current row to be excluded from the frame, even if they would be included according to the frame start and frame end options. <CodeLiteral>EXCLUDE CURRENT ROW</CodeLiteral> excludes the current row from the frame. <CodeLiteral>EXCLUDE GROUP</CodeLiteral> excludes the current row and its ordering peers from the frame. <CodeLiteral>EXCLUDE TIES</CodeLiteral> excludes any peers of the current row from the frame, but not the current row itself. <CodeLiteral>EXCLUDE NO OTHERS</CodeLiteral> simply specifies explicitly the default behavior of not excluding the current row or its peers.\n Beware that the <CodeLiteral>ROWS</CodeLiteral> mode can produce unpredictable results if the <CodeLiteral>ORDER BY</CodeLiteral> ordering does not order the rows uniquely. The <CodeLiteral>RANGE</CodeLiteral> and <CodeLiteral>GROUPS</CodeLiteral> modes are designed to ensure that rows that are peers in the <CodeLiteral>ORDER BY</CodeLiteral> ordering are treated alike: all rows of a given peer group will be in the frame or excluded from it.\n The purpose of a <CodeLiteral>WINDOW</CodeLiteral> clause is to specify the behavior of window functions appearing in the query's SELECT List or <CodeLiteral>ORDER BY</CodeLiteral> Clause. These functions can reference the <CodeLiteral>WINDOW</CodeLiteral> clause entries by name in their <CodeLiteral>OVER</CodeLiteral> clauses. A <CodeLiteral>WINDOW</CodeLiteral> clause entry does not have to be referenced anywhere, however; if it is not used in the query it is simply ignored. It is possible to use window functions without any <CodeLiteral>WINDOW</CodeLiteral> clause at all, since a window function call can specify its window definition directly in its <CodeLiteral>OVER</CodeLiteral> clause. However, the <CodeLiteral>WINDOW</CodeLiteral> clause saves typing when the same window definition is needed for more than one window function.\n Currently, <CodeLiteral>FOR NO KEY UPDATE</CodeLiteral>, <CodeLiteral>FOR UPDATE</CodeLiteral>, <CodeLiteral>FOR SHARE</CodeLiteral> and <CodeLiteral>FOR KEY SHARE</CodeLiteral> cannot be specified with <CodeLiteral>WINDOW</CodeLiteral>.\n Window functions are described in detail in Section 3.5, Section 4.2.8, and Section 7.2.5. <sep>[DEMO]: SELECT employee_id, salary, AVG(salary) OVER (PARTITION BY department_id ORDER BY salary ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW EXCLUDE CURRENT ROW) AS avg_previous_salaries FROM employees;",
        "example": [
            "SELECT employee_id, salary, AVG(salary) OVER (PARTITION BY department_id ORDER BY salary ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW EXCLUDE CURRENT ROW) AS avg_previous_salaries FROM employees;"
        ],
        "link": []
    },
    {
        "type": "keyword",
        "keyword": "EXCLUDE GROUP",
        "tree": " (opt_window_exclusion_clause EXCLUDE GROUP)",
        "description": "The optional <CodeLiteral>WINDOW</CodeLiteral> clause has the general form\n <code>WINDOW window_name AS ( window_definition ) [, ...]\n</code>\n where window_name is a name that can be referenced from <CodeLiteral>OVER</CodeLiteral> clauses or subsequent window definitions, and window_definition is\n <code>[ existing_window_name ]\n[ PARTITION BY expression [, ...] ]\n[ ORDER BY expression [ ASC | DESC | USING operator ] [ NULLS { FIRST | LAST } ] [, ...] ]\n[ frame_clause ]\n</code>\n If an existing_window_name is specified it must refer to an earlier entry in the <CodeLiteral>WINDOW</CodeLiteral> list; the new window copies its partitioning clause from that entry, as well as its ordering clause if any. In this case the new window cannot specify its own <CodeLiteral>PARTITION BY</CodeLiteral> clause, and it can specify <CodeLiteral>ORDER BY</CodeLiteral> only if the copied window does not have one. The new window always uses its own frame clause; the copied window must not specify a frame clause.\n The elements of the <CodeLiteral>PARTITION BY</CodeLiteral> list are interpreted in much the same fashion as elements of a <CodeLiteral>GROUP BY</CodeLiteral> Clause, except that they are always simple expressions and never the name or number of an output column. Another difference is that these expressions can contain aggregate function calls, which are not allowed in a regular <CodeLiteral>GROUP BY</CodeLiteral> clause. They are allowed here because windowing occurs after grouping and aggregation.\n Similarly, the elements of the <CodeLiteral>ORDER BY</CodeLiteral> list are interpreted in much the same fashion as elements of an <CodeLiteral>ORDER BY</CodeLiteral> Clause, except that the expressions are always taken as simple expressions and never the name or number of an output column.\n The optional frame_clause defines the window frame for window functions that depend on the frame (not all do). The window frame is a set of related rows for each row of the query (called the current row). The frame_clause can be one of\n <code>{ RANGE | ROWS | GROUPS } frame_start [ frame_exclusion ]\n{ RANGE | ROWS | GROUPS } BETWEEN frame_start AND frame_end [ frame_exclusion ]\n</code>\n where frame_start and frame_end can be one of\n <code>UNBOUNDED PRECEDING\noffset PRECEDING\nCURRENT ROW\noffset FOLLOWING\nUNBOUNDED FOLLOWING\n</code>\n and frame_exclusion can be one of\n <code>EXCLUDE CURRENT ROW\nEXCLUDE GROUP\nEXCLUDE TIES\nEXCLUDE NO OTHERS\n</code>\n If frame_end is omitted it defaults to <CodeLiteral>CURRENT ROW</CodeLiteral>. Restrictions are that frame_start cannot be <CodeLiteral>UNBOUNDED FOLLOWING</CodeLiteral>, frame_end cannot be <CodeLiteral>UNBOUNDED PRECEDING</CodeLiteral>, and the frame_end choice cannot appear earlier in the above list of frame_start and frame_end options than the frame_start choice does \u2014 for example <CodeLiteral>RANGE BETWEEN CURRENT ROW AND offset PRECEDING</CodeLiteral> is not allowed.\n The default framing option is <CodeLiteral>RANGE UNBOUNDED PRECEDING</CodeLiteral>, which is the same as <CodeLiteral>RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW</CodeLiteral>; it sets the frame to be all rows from the partition start up through the current row's last peer (a row that the window's <CodeLiteral>ORDER BY</CodeLiteral> clause considers equivalent to the current row; all rows are peers if there is no <CodeLiteral>ORDER BY</CodeLiteral>). In general, <CodeLiteral>UNBOUNDED PRECEDING</CodeLiteral> means that the frame starts with the first row of the partition, and similarly <CodeLiteral>UNBOUNDED FOLLOWING</CodeLiteral> means that the frame ends with the last row of the partition, regardless of <CodeLiteral>RANGE</CodeLiteral>, <CodeLiteral>ROWS</CodeLiteral> or <CodeLiteral>GROUPS</CodeLiteral> mode. In <CodeLiteral>ROWS</CodeLiteral> mode, <CodeLiteral>CURRENT ROW</CodeLiteral> means that the frame starts or ends with the current row; but in <CodeLiteral>RANGE</CodeLiteral> or <CodeLiteral>GROUPS</CodeLiteral> mode it means that the frame starts or ends with the current row's first or last peer in the <CodeLiteral>ORDER BY</CodeLiteral> ordering. The offset <CodeLiteral>PRECEDING</CodeLiteral> and offset <CodeLiteral>FOLLOWING</CodeLiteral> options vary in meaning depending on the frame mode. In <CodeLiteral>ROWS</CodeLiteral> mode, the offset is an integer indicating that the frame starts or ends that many rows before or after the current row. In <CodeLiteral>GROUPS</CodeLiteral> mode, the offset is an integer indicating that the frame starts or ends that many peer groups before or after the current row's peer group, where a peer group is a group of rows that are equivalent according to the window's <CodeLiteral>ORDER BY</CodeLiteral> clause. In <CodeLiteral>RANGE</CodeLiteral> mode, use of an offset option requires that there be exactly one <CodeLiteral>ORDER BY</CodeLiteral> column in the window definition. Then the frame contains those rows whose ordering column value is no more than offset less than (for <CodeLiteral>PRECEDING</CodeLiteral>) or more than (for <CodeLiteral>FOLLOWING</CodeLiteral>) the current row's ordering column value. In these cases the data type of the offset expression depends on the data type of the ordering column. For numeric ordering columns it is typically of the same type as the ordering column, but for datetime ordering columns it is an interval. In all these cases, the value of the offset must be non-null and non-negative. Also, while the offset does not have to be a simple constant, it cannot contain variables, aggregate functions, or window functions.\n The frame_exclusion option allows rows around the current row to be excluded from the frame, even if they would be included according to the frame start and frame end options. <CodeLiteral>EXCLUDE CURRENT ROW</CodeLiteral> excludes the current row from the frame. <CodeLiteral>EXCLUDE GROUP</CodeLiteral> excludes the current row and its ordering peers from the frame. <CodeLiteral>EXCLUDE TIES</CodeLiteral> excludes any peers of the current row from the frame, but not the current row itself. <CodeLiteral>EXCLUDE NO OTHERS</CodeLiteral> simply specifies explicitly the default behavior of not excluding the current row or its peers.\n Beware that the <CodeLiteral>ROWS</CodeLiteral> mode can produce unpredictable results if the <CodeLiteral>ORDER BY</CodeLiteral> ordering does not order the rows uniquely. The <CodeLiteral>RANGE</CodeLiteral> and <CodeLiteral>GROUPS</CodeLiteral> modes are designed to ensure that rows that are peers in the <CodeLiteral>ORDER BY</CodeLiteral> ordering are treated alike: all rows of a given peer group will be in the frame or excluded from it.\n The purpose of a <CodeLiteral>WINDOW</CodeLiteral> clause is to specify the behavior of window functions appearing in the query's SELECT List or <CodeLiteral>ORDER BY</CodeLiteral> Clause. These functions can reference the <CodeLiteral>WINDOW</CodeLiteral> clause entries by name in their <CodeLiteral>OVER</CodeLiteral> clauses. A <CodeLiteral>WINDOW</CodeLiteral> clause entry does not have to be referenced anywhere, however; if it is not used in the query it is simply ignored. It is possible to use window functions without any <CodeLiteral>WINDOW</CodeLiteral> clause at all, since a window function call can specify its window definition directly in its <CodeLiteral>OVER</CodeLiteral> clause. However, the <CodeLiteral>WINDOW</CodeLiteral> clause saves typing when the same window definition is needed for more than one window function.\n Currently, <CodeLiteral>FOR NO KEY UPDATE</CodeLiteral>, <CodeLiteral>FOR UPDATE</CodeLiteral>, <CodeLiteral>FOR SHARE</CodeLiteral> and <CodeLiteral>FOR KEY SHARE</CodeLiteral> cannot be specified with <CodeLiteral>WINDOW</CodeLiteral>.\n Window functions are described in detail in Section 3.5, Section 4.2.8, and Section 7.2.5. ",
        "detail": "[DESCRIPTION]: The optional <CodeLiteral>WINDOW</CodeLiteral> clause has the general form\n <code>WINDOW window_name AS ( window_definition ) [, ...]\n</code>\n where window_name is a name that can be referenced from <CodeLiteral>OVER</CodeLiteral> clauses or subsequent window definitions, and window_definition is\n <code>[ existing_window_name ]\n[ PARTITION BY expression [, ...] ]\n[ ORDER BY expression [ ASC | DESC | USING operator ] [ NULLS { FIRST | LAST } ] [, ...] ]\n[ frame_clause ]\n</code>\n If an existing_window_name is specified it must refer to an earlier entry in the <CodeLiteral>WINDOW</CodeLiteral> list; the new window copies its partitioning clause from that entry, as well as its ordering clause if any. In this case the new window cannot specify its own <CodeLiteral>PARTITION BY</CodeLiteral> clause, and it can specify <CodeLiteral>ORDER BY</CodeLiteral> only if the copied window does not have one. The new window always uses its own frame clause; the copied window must not specify a frame clause.\n The elements of the <CodeLiteral>PARTITION BY</CodeLiteral> list are interpreted in much the same fashion as elements of a <CodeLiteral>GROUP BY</CodeLiteral> Clause, except that they are always simple expressions and never the name or number of an output column. Another difference is that these expressions can contain aggregate function calls, which are not allowed in a regular <CodeLiteral>GROUP BY</CodeLiteral> clause. They are allowed here because windowing occurs after grouping and aggregation.\n Similarly, the elements of the <CodeLiteral>ORDER BY</CodeLiteral> list are interpreted in much the same fashion as elements of an <CodeLiteral>ORDER BY</CodeLiteral> Clause, except that the expressions are always taken as simple expressions and never the name or number of an output column.\n The optional frame_clause defines the window frame for window functions that depend on the frame (not all do). The window frame is a set of related rows for each row of the query (called the current row). The frame_clause can be one of\n <code>{ RANGE | ROWS | GROUPS } frame_start [ frame_exclusion ]\n{ RANGE | ROWS | GROUPS } BETWEEN frame_start AND frame_end [ frame_exclusion ]\n</code>\n where frame_start and frame_end can be one of\n <code>UNBOUNDED PRECEDING\noffset PRECEDING\nCURRENT ROW\noffset FOLLOWING\nUNBOUNDED FOLLOWING\n</code>\n and frame_exclusion can be one of\n <code>EXCLUDE CURRENT ROW\nEXCLUDE GROUP\nEXCLUDE TIES\nEXCLUDE NO OTHERS\n</code>\n If frame_end is omitted it defaults to <CodeLiteral>CURRENT ROW</CodeLiteral>. Restrictions are that frame_start cannot be <CodeLiteral>UNBOUNDED FOLLOWING</CodeLiteral>, frame_end cannot be <CodeLiteral>UNBOUNDED PRECEDING</CodeLiteral>, and the frame_end choice cannot appear earlier in the above list of frame_start and frame_end options than the frame_start choice does \u2014 for example <CodeLiteral>RANGE BETWEEN CURRENT ROW AND offset PRECEDING</CodeLiteral> is not allowed.\n The default framing option is <CodeLiteral>RANGE UNBOUNDED PRECEDING</CodeLiteral>, which is the same as <CodeLiteral>RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW</CodeLiteral>; it sets the frame to be all rows from the partition start up through the current row's last peer (a row that the window's <CodeLiteral>ORDER BY</CodeLiteral> clause considers equivalent to the current row; all rows are peers if there is no <CodeLiteral>ORDER BY</CodeLiteral>). In general, <CodeLiteral>UNBOUNDED PRECEDING</CodeLiteral> means that the frame starts with the first row of the partition, and similarly <CodeLiteral>UNBOUNDED FOLLOWING</CodeLiteral> means that the frame ends with the last row of the partition, regardless of <CodeLiteral>RANGE</CodeLiteral>, <CodeLiteral>ROWS</CodeLiteral> or <CodeLiteral>GROUPS</CodeLiteral> mode. In <CodeLiteral>ROWS</CodeLiteral> mode, <CodeLiteral>CURRENT ROW</CodeLiteral> means that the frame starts or ends with the current row; but in <CodeLiteral>RANGE</CodeLiteral> or <CodeLiteral>GROUPS</CodeLiteral> mode it means that the frame starts or ends with the current row's first or last peer in the <CodeLiteral>ORDER BY</CodeLiteral> ordering. The offset <CodeLiteral>PRECEDING</CodeLiteral> and offset <CodeLiteral>FOLLOWING</CodeLiteral> options vary in meaning depending on the frame mode. In <CodeLiteral>ROWS</CodeLiteral> mode, the offset is an integer indicating that the frame starts or ends that many rows before or after the current row. In <CodeLiteral>GROUPS</CodeLiteral> mode, the offset is an integer indicating that the frame starts or ends that many peer groups before or after the current row's peer group, where a peer group is a group of rows that are equivalent according to the window's <CodeLiteral>ORDER BY</CodeLiteral> clause. In <CodeLiteral>RANGE</CodeLiteral> mode, use of an offset option requires that there be exactly one <CodeLiteral>ORDER BY</CodeLiteral> column in the window definition. Then the frame contains those rows whose ordering column value is no more than offset less than (for <CodeLiteral>PRECEDING</CodeLiteral>) or more than (for <CodeLiteral>FOLLOWING</CodeLiteral>) the current row's ordering column value. In these cases the data type of the offset expression depends on the data type of the ordering column. For numeric ordering columns it is typically of the same type as the ordering column, but for datetime ordering columns it is an interval. In all these cases, the value of the offset must be non-null and non-negative. Also, while the offset does not have to be a simple constant, it cannot contain variables, aggregate functions, or window functions.\n The frame_exclusion option allows rows around the current row to be excluded from the frame, even if they would be included according to the frame start and frame end options. <CodeLiteral>EXCLUDE CURRENT ROW</CodeLiteral> excludes the current row from the frame. <CodeLiteral>EXCLUDE GROUP</CodeLiteral> excludes the current row and its ordering peers from the frame. <CodeLiteral>EXCLUDE TIES</CodeLiteral> excludes any peers of the current row from the frame, but not the current row itself. <CodeLiteral>EXCLUDE NO OTHERS</CodeLiteral> simply specifies explicitly the default behavior of not excluding the current row or its peers.\n Beware that the <CodeLiteral>ROWS</CodeLiteral> mode can produce unpredictable results if the <CodeLiteral>ORDER BY</CodeLiteral> ordering does not order the rows uniquely. The <CodeLiteral>RANGE</CodeLiteral> and <CodeLiteral>GROUPS</CodeLiteral> modes are designed to ensure that rows that are peers in the <CodeLiteral>ORDER BY</CodeLiteral> ordering are treated alike: all rows of a given peer group will be in the frame or excluded from it.\n The purpose of a <CodeLiteral>WINDOW</CodeLiteral> clause is to specify the behavior of window functions appearing in the query's SELECT List or <CodeLiteral>ORDER BY</CodeLiteral> Clause. These functions can reference the <CodeLiteral>WINDOW</CodeLiteral> clause entries by name in their <CodeLiteral>OVER</CodeLiteral> clauses. A <CodeLiteral>WINDOW</CodeLiteral> clause entry does not have to be referenced anywhere, however; if it is not used in the query it is simply ignored. It is possible to use window functions without any <CodeLiteral>WINDOW</CodeLiteral> clause at all, since a window function call can specify its window definition directly in its <CodeLiteral>OVER</CodeLiteral> clause. However, the <CodeLiteral>WINDOW</CodeLiteral> clause saves typing when the same window definition is needed for more than one window function.\n Currently, <CodeLiteral>FOR NO KEY UPDATE</CodeLiteral>, <CodeLiteral>FOR UPDATE</CodeLiteral>, <CodeLiteral>FOR SHARE</CodeLiteral> and <CodeLiteral>FOR KEY SHARE</CodeLiteral> cannot be specified with <CodeLiteral>WINDOW</CodeLiteral>.\n Window functions are described in detail in Section 3.5, Section 4.2.8, and Section 7.2.5. <sep>[DEMO]: SELECT employee_id, department, SUM(salary) OVER w AS department_total_salary FROM employees WINDOW w AS (PARTITION BY department ORDER BY salary RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW EXCLUDE GROUP)",
        "example": [
            "SELECT employee_id, department, SUM(salary) OVER w AS department_total_salary FROM employees WINDOW w AS (PARTITION BY department ORDER BY salary RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW EXCLUDE GROUP)"
        ],
        "link": []
    },
    {
        "type": "keyword",
        "keyword": "EXCLUDE TIES",
        "tree": " (opt_window_exclusion_clause EXCLUDE TIES)",
        "description": "The optional <CodeLiteral>WINDOW</CodeLiteral> clause has the general form\n <code>WINDOW window_name AS ( window_definition ) [, ...]\n</code>\n where window_name is a name that can be referenced from <CodeLiteral>OVER</CodeLiteral> clauses or subsequent window definitions, and window_definition is\n <code>[ existing_window_name ]\n[ PARTITION BY expression [, ...] ]\n[ ORDER BY expression [ ASC | DESC | USING operator ] [ NULLS { FIRST | LAST } ] [, ...] ]\n[ frame_clause ]\n</code>\n If an existing_window_name is specified it must refer to an earlier entry in the <CodeLiteral>WINDOW</CodeLiteral> list; the new window copies its partitioning clause from that entry, as well as its ordering clause if any. In this case the new window cannot specify its own <CodeLiteral>PARTITION BY</CodeLiteral> clause, and it can specify <CodeLiteral>ORDER BY</CodeLiteral> only if the copied window does not have one. The new window always uses its own frame clause; the copied window must not specify a frame clause.\n The elements of the <CodeLiteral>PARTITION BY</CodeLiteral> list are interpreted in much the same fashion as elements of a <CodeLiteral>GROUP BY</CodeLiteral> Clause, except that they are always simple expressions and never the name or number of an output column. Another difference is that these expressions can contain aggregate function calls, which are not allowed in a regular <CodeLiteral>GROUP BY</CodeLiteral> clause. They are allowed here because windowing occurs after grouping and aggregation.\n Similarly, the elements of the <CodeLiteral>ORDER BY</CodeLiteral> list are interpreted in much the same fashion as elements of an <CodeLiteral>ORDER BY</CodeLiteral> Clause, except that the expressions are always taken as simple expressions and never the name or number of an output column.\n The optional frame_clause defines the window frame for window functions that depend on the frame (not all do). The window frame is a set of related rows for each row of the query (called the current row). The frame_clause can be one of\n <code>{ RANGE | ROWS | GROUPS } frame_start [ frame_exclusion ]\n{ RANGE | ROWS | GROUPS } BETWEEN frame_start AND frame_end [ frame_exclusion ]\n</code>\n where frame_start and frame_end can be one of\n <code>UNBOUNDED PRECEDING\noffset PRECEDING\nCURRENT ROW\noffset FOLLOWING\nUNBOUNDED FOLLOWING\n</code>\n and frame_exclusion can be one of\n <code>EXCLUDE CURRENT ROW\nEXCLUDE GROUP\nEXCLUDE TIES\nEXCLUDE NO OTHERS\n</code>\n If frame_end is omitted it defaults to <CodeLiteral>CURRENT ROW</CodeLiteral>. Restrictions are that frame_start cannot be <CodeLiteral>UNBOUNDED FOLLOWING</CodeLiteral>, frame_end cannot be <CodeLiteral>UNBOUNDED PRECEDING</CodeLiteral>, and the frame_end choice cannot appear earlier in the above list of frame_start and frame_end options than the frame_start choice does \u2014 for example <CodeLiteral>RANGE BETWEEN CURRENT ROW AND offset PRECEDING</CodeLiteral> is not allowed.\n The default framing option is <CodeLiteral>RANGE UNBOUNDED PRECEDING</CodeLiteral>, which is the same as <CodeLiteral>RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW</CodeLiteral>; it sets the frame to be all rows from the partition start up through the current row's last peer (a row that the window's <CodeLiteral>ORDER BY</CodeLiteral> clause considers equivalent to the current row; all rows are peers if there is no <CodeLiteral>ORDER BY</CodeLiteral>). In general, <CodeLiteral>UNBOUNDED PRECEDING</CodeLiteral> means that the frame starts with the first row of the partition, and similarly <CodeLiteral>UNBOUNDED FOLLOWING</CodeLiteral> means that the frame ends with the last row of the partition, regardless of <CodeLiteral>RANGE</CodeLiteral>, <CodeLiteral>ROWS</CodeLiteral> or <CodeLiteral>GROUPS</CodeLiteral> mode. In <CodeLiteral>ROWS</CodeLiteral> mode, <CodeLiteral>CURRENT ROW</CodeLiteral> means that the frame starts or ends with the current row; but in <CodeLiteral>RANGE</CodeLiteral> or <CodeLiteral>GROUPS</CodeLiteral> mode it means that the frame starts or ends with the current row's first or last peer in the <CodeLiteral>ORDER BY</CodeLiteral> ordering. The offset <CodeLiteral>PRECEDING</CodeLiteral> and offset <CodeLiteral>FOLLOWING</CodeLiteral> options vary in meaning depending on the frame mode. In <CodeLiteral>ROWS</CodeLiteral> mode, the offset is an integer indicating that the frame starts or ends that many rows before or after the current row. In <CodeLiteral>GROUPS</CodeLiteral> mode, the offset is an integer indicating that the frame starts or ends that many peer groups before or after the current row's peer group, where a peer group is a group of rows that are equivalent according to the window's <CodeLiteral>ORDER BY</CodeLiteral> clause. In <CodeLiteral>RANGE</CodeLiteral> mode, use of an offset option requires that there be exactly one <CodeLiteral>ORDER BY</CodeLiteral> column in the window definition. Then the frame contains those rows whose ordering column value is no more than offset less than (for <CodeLiteral>PRECEDING</CodeLiteral>) or more than (for <CodeLiteral>FOLLOWING</CodeLiteral>) the current row's ordering column value. In these cases the data type of the offset expression depends on the data type of the ordering column. For numeric ordering columns it is typically of the same type as the ordering column, but for datetime ordering columns it is an interval. In all these cases, the value of the offset must be non-null and non-negative. Also, while the offset does not have to be a simple constant, it cannot contain variables, aggregate functions, or window functions.\n The frame_exclusion option allows rows around the current row to be excluded from the frame, even if they would be included according to the frame start and frame end options. <CodeLiteral>EXCLUDE CURRENT ROW</CodeLiteral> excludes the current row from the frame. <CodeLiteral>EXCLUDE GROUP</CodeLiteral> excludes the current row and its ordering peers from the frame. <CodeLiteral>EXCLUDE TIES</CodeLiteral> excludes any peers of the current row from the frame, but not the current row itself. <CodeLiteral>EXCLUDE NO OTHERS</CodeLiteral> simply specifies explicitly the default behavior of not excluding the current row or its peers.\n Beware that the <CodeLiteral>ROWS</CodeLiteral> mode can produce unpredictable results if the <CodeLiteral>ORDER BY</CodeLiteral> ordering does not order the rows uniquely. The <CodeLiteral>RANGE</CodeLiteral> and <CodeLiteral>GROUPS</CodeLiteral> modes are designed to ensure that rows that are peers in the <CodeLiteral>ORDER BY</CodeLiteral> ordering are treated alike: all rows of a given peer group will be in the frame or excluded from it.\n The purpose of a <CodeLiteral>WINDOW</CodeLiteral> clause is to specify the behavior of window functions appearing in the query's SELECT List or <CodeLiteral>ORDER BY</CodeLiteral> Clause. These functions can reference the <CodeLiteral>WINDOW</CodeLiteral> clause entries by name in their <CodeLiteral>OVER</CodeLiteral> clauses. A <CodeLiteral>WINDOW</CodeLiteral> clause entry does not have to be referenced anywhere, however; if it is not used in the query it is simply ignored. It is possible to use window functions without any <CodeLiteral>WINDOW</CodeLiteral> clause at all, since a window function call can specify its window definition directly in its <CodeLiteral>OVER</CodeLiteral> clause. However, the <CodeLiteral>WINDOW</CodeLiteral> clause saves typing when the same window definition is needed for more than one window function.\n Currently, <CodeLiteral>FOR NO KEY UPDATE</CodeLiteral>, <CodeLiteral>FOR UPDATE</CodeLiteral>, <CodeLiteral>FOR SHARE</CodeLiteral> and <CodeLiteral>FOR KEY SHARE</CodeLiteral> cannot be specified with <CodeLiteral>WINDOW</CodeLiteral>.\n Window functions are described in detail in Section 3.5, Section 4.2.8, and Section 7.2.5. ",
        "detail": "[DESCRIPTION]: The optional <CodeLiteral>WINDOW</CodeLiteral> clause has the general form\n <code>WINDOW window_name AS ( window_definition ) [, ...]\n</code>\n where window_name is a name that can be referenced from <CodeLiteral>OVER</CodeLiteral> clauses or subsequent window definitions, and window_definition is\n <code>[ existing_window_name ]\n[ PARTITION BY expression [, ...] ]\n[ ORDER BY expression [ ASC | DESC | USING operator ] [ NULLS { FIRST | LAST } ] [, ...] ]\n[ frame_clause ]\n</code>\n If an existing_window_name is specified it must refer to an earlier entry in the <CodeLiteral>WINDOW</CodeLiteral> list; the new window copies its partitioning clause from that entry, as well as its ordering clause if any. In this case the new window cannot specify its own <CodeLiteral>PARTITION BY</CodeLiteral> clause, and it can specify <CodeLiteral>ORDER BY</CodeLiteral> only if the copied window does not have one. The new window always uses its own frame clause; the copied window must not specify a frame clause.\n The elements of the <CodeLiteral>PARTITION BY</CodeLiteral> list are interpreted in much the same fashion as elements of a <CodeLiteral>GROUP BY</CodeLiteral> Clause, except that they are always simple expressions and never the name or number of an output column. Another difference is that these expressions can contain aggregate function calls, which are not allowed in a regular <CodeLiteral>GROUP BY</CodeLiteral> clause. They are allowed here because windowing occurs after grouping and aggregation.\n Similarly, the elements of the <CodeLiteral>ORDER BY</CodeLiteral> list are interpreted in much the same fashion as elements of an <CodeLiteral>ORDER BY</CodeLiteral> Clause, except that the expressions are always taken as simple expressions and never the name or number of an output column.\n The optional frame_clause defines the window frame for window functions that depend on the frame (not all do). The window frame is a set of related rows for each row of the query (called the current row). The frame_clause can be one of\n <code>{ RANGE | ROWS | GROUPS } frame_start [ frame_exclusion ]\n{ RANGE | ROWS | GROUPS } BETWEEN frame_start AND frame_end [ frame_exclusion ]\n</code>\n where frame_start and frame_end can be one of\n <code>UNBOUNDED PRECEDING\noffset PRECEDING\nCURRENT ROW\noffset FOLLOWING\nUNBOUNDED FOLLOWING\n</code>\n and frame_exclusion can be one of\n <code>EXCLUDE CURRENT ROW\nEXCLUDE GROUP\nEXCLUDE TIES\nEXCLUDE NO OTHERS\n</code>\n If frame_end is omitted it defaults to <CodeLiteral>CURRENT ROW</CodeLiteral>. Restrictions are that frame_start cannot be <CodeLiteral>UNBOUNDED FOLLOWING</CodeLiteral>, frame_end cannot be <CodeLiteral>UNBOUNDED PRECEDING</CodeLiteral>, and the frame_end choice cannot appear earlier in the above list of frame_start and frame_end options than the frame_start choice does \u2014 for example <CodeLiteral>RANGE BETWEEN CURRENT ROW AND offset PRECEDING</CodeLiteral> is not allowed.\n The default framing option is <CodeLiteral>RANGE UNBOUNDED PRECEDING</CodeLiteral>, which is the same as <CodeLiteral>RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW</CodeLiteral>; it sets the frame to be all rows from the partition start up through the current row's last peer (a row that the window's <CodeLiteral>ORDER BY</CodeLiteral> clause considers equivalent to the current row; all rows are peers if there is no <CodeLiteral>ORDER BY</CodeLiteral>). In general, <CodeLiteral>UNBOUNDED PRECEDING</CodeLiteral> means that the frame starts with the first row of the partition, and similarly <CodeLiteral>UNBOUNDED FOLLOWING</CodeLiteral> means that the frame ends with the last row of the partition, regardless of <CodeLiteral>RANGE</CodeLiteral>, <CodeLiteral>ROWS</CodeLiteral> or <CodeLiteral>GROUPS</CodeLiteral> mode. In <CodeLiteral>ROWS</CodeLiteral> mode, <CodeLiteral>CURRENT ROW</CodeLiteral> means that the frame starts or ends with the current row; but in <CodeLiteral>RANGE</CodeLiteral> or <CodeLiteral>GROUPS</CodeLiteral> mode it means that the frame starts or ends with the current row's first or last peer in the <CodeLiteral>ORDER BY</CodeLiteral> ordering. The offset <CodeLiteral>PRECEDING</CodeLiteral> and offset <CodeLiteral>FOLLOWING</CodeLiteral> options vary in meaning depending on the frame mode. In <CodeLiteral>ROWS</CodeLiteral> mode, the offset is an integer indicating that the frame starts or ends that many rows before or after the current row. In <CodeLiteral>GROUPS</CodeLiteral> mode, the offset is an integer indicating that the frame starts or ends that many peer groups before or after the current row's peer group, where a peer group is a group of rows that are equivalent according to the window's <CodeLiteral>ORDER BY</CodeLiteral> clause. In <CodeLiteral>RANGE</CodeLiteral> mode, use of an offset option requires that there be exactly one <CodeLiteral>ORDER BY</CodeLiteral> column in the window definition. Then the frame contains those rows whose ordering column value is no more than offset less than (for <CodeLiteral>PRECEDING</CodeLiteral>) or more than (for <CodeLiteral>FOLLOWING</CodeLiteral>) the current row's ordering column value. In these cases the data type of the offset expression depends on the data type of the ordering column. For numeric ordering columns it is typically of the same type as the ordering column, but for datetime ordering columns it is an interval. In all these cases, the value of the offset must be non-null and non-negative. Also, while the offset does not have to be a simple constant, it cannot contain variables, aggregate functions, or window functions.\n The frame_exclusion option allows rows around the current row to be excluded from the frame, even if they would be included according to the frame start and frame end options. <CodeLiteral>EXCLUDE CURRENT ROW</CodeLiteral> excludes the current row from the frame. <CodeLiteral>EXCLUDE GROUP</CodeLiteral> excludes the current row and its ordering peers from the frame. <CodeLiteral>EXCLUDE TIES</CodeLiteral> excludes any peers of the current row from the frame, but not the current row itself. <CodeLiteral>EXCLUDE NO OTHERS</CodeLiteral> simply specifies explicitly the default behavior of not excluding the current row or its peers.\n Beware that the <CodeLiteral>ROWS</CodeLiteral> mode can produce unpredictable results if the <CodeLiteral>ORDER BY</CodeLiteral> ordering does not order the rows uniquely. The <CodeLiteral>RANGE</CodeLiteral> and <CodeLiteral>GROUPS</CodeLiteral> modes are designed to ensure that rows that are peers in the <CodeLiteral>ORDER BY</CodeLiteral> ordering are treated alike: all rows of a given peer group will be in the frame or excluded from it.\n The purpose of a <CodeLiteral>WINDOW</CodeLiteral> clause is to specify the behavior of window functions appearing in the query's SELECT List or <CodeLiteral>ORDER BY</CodeLiteral> Clause. These functions can reference the <CodeLiteral>WINDOW</CodeLiteral> clause entries by name in their <CodeLiteral>OVER</CodeLiteral> clauses. A <CodeLiteral>WINDOW</CodeLiteral> clause entry does not have to be referenced anywhere, however; if it is not used in the query it is simply ignored. It is possible to use window functions without any <CodeLiteral>WINDOW</CodeLiteral> clause at all, since a window function call can specify its window definition directly in its <CodeLiteral>OVER</CodeLiteral> clause. However, the <CodeLiteral>WINDOW</CodeLiteral> clause saves typing when the same window definition is needed for more than one window function.\n Currently, <CodeLiteral>FOR NO KEY UPDATE</CodeLiteral>, <CodeLiteral>FOR UPDATE</CodeLiteral>, <CodeLiteral>FOR SHARE</CodeLiteral> and <CodeLiteral>FOR KEY SHARE</CodeLiteral> cannot be specified with <CodeLiteral>WINDOW</CodeLiteral>.\n Window functions are described in detail in Section 3.5, Section 4.2.8, and Section 7.2.5. <sep>[DEMO]: ",
        "example": [
            ""
        ],
        "link": []
    },
    {
        "type": "keyword",
        "keyword": "EXCLUDE NO OTHERS",
        "tree": " (opt_window_exclusion_clause EXCLUDE NO OTHERS)",
        "description": "The optional <CodeLiteral>WINDOW</CodeLiteral> clause has the general form\n <code>WINDOW window_name AS ( window_definition ) [, ...]\n</code>\n where window_name is a name that can be referenced from <CodeLiteral>OVER</CodeLiteral> clauses or subsequent window definitions, and window_definition is\n <code>[ existing_window_name ]\n[ PARTITION BY expression [, ...] ]\n[ ORDER BY expression [ ASC | DESC | USING operator ] [ NULLS { FIRST | LAST } ] [, ...] ]\n[ frame_clause ]\n</code>\n If an existing_window_name is specified it must refer to an earlier entry in the <CodeLiteral>WINDOW</CodeLiteral> list; the new window copies its partitioning clause from that entry, as well as its ordering clause if any. In this case the new window cannot specify its own <CodeLiteral>PARTITION BY</CodeLiteral> clause, and it can specify <CodeLiteral>ORDER BY</CodeLiteral> only if the copied window does not have one. The new window always uses its own frame clause; the copied window must not specify a frame clause.\n The elements of the <CodeLiteral>PARTITION BY</CodeLiteral> list are interpreted in much the same fashion as elements of a <CodeLiteral>GROUP BY</CodeLiteral> Clause, except that they are always simple expressions and never the name or number of an output column. Another difference is that these expressions can contain aggregate function calls, which are not allowed in a regular <CodeLiteral>GROUP BY</CodeLiteral> clause. They are allowed here because windowing occurs after grouping and aggregation.\n Similarly, the elements of the <CodeLiteral>ORDER BY</CodeLiteral> list are interpreted in much the same fashion as elements of an <CodeLiteral>ORDER BY</CodeLiteral> Clause, except that the expressions are always taken as simple expressions and never the name or number of an output column.\n The optional frame_clause defines the window frame for window functions that depend on the frame (not all do). The window frame is a set of related rows for each row of the query (called the current row). The frame_clause can be one of\n <code>{ RANGE | ROWS | GROUPS } frame_start [ frame_exclusion ]\n{ RANGE | ROWS | GROUPS } BETWEEN frame_start AND frame_end [ frame_exclusion ]\n</code>\n where frame_start and frame_end can be one of\n <code>UNBOUNDED PRECEDING\noffset PRECEDING\nCURRENT ROW\noffset FOLLOWING\nUNBOUNDED FOLLOWING\n</code>\n and frame_exclusion can be one of\n <code>EXCLUDE CURRENT ROW\nEXCLUDE GROUP\nEXCLUDE TIES\nEXCLUDE NO OTHERS\n</code>\n If frame_end is omitted it defaults to <CodeLiteral>CURRENT ROW</CodeLiteral>. Restrictions are that frame_start cannot be <CodeLiteral>UNBOUNDED FOLLOWING</CodeLiteral>, frame_end cannot be <CodeLiteral>UNBOUNDED PRECEDING</CodeLiteral>, and the frame_end choice cannot appear earlier in the above list of frame_start and frame_end options than the frame_start choice does \u2014 for example <CodeLiteral>RANGE BETWEEN CURRENT ROW AND offset PRECEDING</CodeLiteral> is not allowed.\n The default framing option is <CodeLiteral>RANGE UNBOUNDED PRECEDING</CodeLiteral>, which is the same as <CodeLiteral>RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW</CodeLiteral>; it sets the frame to be all rows from the partition start up through the current row's last peer (a row that the window's <CodeLiteral>ORDER BY</CodeLiteral> clause considers equivalent to the current row; all rows are peers if there is no <CodeLiteral>ORDER BY</CodeLiteral>). In general, <CodeLiteral>UNBOUNDED PRECEDING</CodeLiteral> means that the frame starts with the first row of the partition, and similarly <CodeLiteral>UNBOUNDED FOLLOWING</CodeLiteral> means that the frame ends with the last row of the partition, regardless of <CodeLiteral>RANGE</CodeLiteral>, <CodeLiteral>ROWS</CodeLiteral> or <CodeLiteral>GROUPS</CodeLiteral> mode. In <CodeLiteral>ROWS</CodeLiteral> mode, <CodeLiteral>CURRENT ROW</CodeLiteral> means that the frame starts or ends with the current row; but in <CodeLiteral>RANGE</CodeLiteral> or <CodeLiteral>GROUPS</CodeLiteral> mode it means that the frame starts or ends with the current row's first or last peer in the <CodeLiteral>ORDER BY</CodeLiteral> ordering. The offset <CodeLiteral>PRECEDING</CodeLiteral> and offset <CodeLiteral>FOLLOWING</CodeLiteral> options vary in meaning depending on the frame mode. In <CodeLiteral>ROWS</CodeLiteral> mode, the offset is an integer indicating that the frame starts or ends that many rows before or after the current row. In <CodeLiteral>GROUPS</CodeLiteral> mode, the offset is an integer indicating that the frame starts or ends that many peer groups before or after the current row's peer group, where a peer group is a group of rows that are equivalent according to the window's <CodeLiteral>ORDER BY</CodeLiteral> clause. In <CodeLiteral>RANGE</CodeLiteral> mode, use of an offset option requires that there be exactly one <CodeLiteral>ORDER BY</CodeLiteral> column in the window definition. Then the frame contains those rows whose ordering column value is no more than offset less than (for <CodeLiteral>PRECEDING</CodeLiteral>) or more than (for <CodeLiteral>FOLLOWING</CodeLiteral>) the current row's ordering column value. In these cases the data type of the offset expression depends on the data type of the ordering column. For numeric ordering columns it is typically of the same type as the ordering column, but for datetime ordering columns it is an interval. In all these cases, the value of the offset must be non-null and non-negative. Also, while the offset does not have to be a simple constant, it cannot contain variables, aggregate functions, or window functions.\n The frame_exclusion option allows rows around the current row to be excluded from the frame, even if they would be included according to the frame start and frame end options. <CodeLiteral>EXCLUDE CURRENT ROW</CodeLiteral> excludes the current row from the frame. <CodeLiteral>EXCLUDE GROUP</CodeLiteral> excludes the current row and its ordering peers from the frame. <CodeLiteral>EXCLUDE TIES</CodeLiteral> excludes any peers of the current row from the frame, but not the current row itself. <CodeLiteral>EXCLUDE NO OTHERS</CodeLiteral> simply specifies explicitly the default behavior of not excluding the current row or its peers.\n Beware that the <CodeLiteral>ROWS</CodeLiteral> mode can produce unpredictable results if the <CodeLiteral>ORDER BY</CodeLiteral> ordering does not order the rows uniquely. The <CodeLiteral>RANGE</CodeLiteral> and <CodeLiteral>GROUPS</CodeLiteral> modes are designed to ensure that rows that are peers in the <CodeLiteral>ORDER BY</CodeLiteral> ordering are treated alike: all rows of a given peer group will be in the frame or excluded from it.\n The purpose of a <CodeLiteral>WINDOW</CodeLiteral> clause is to specify the behavior of window functions appearing in the query's SELECT List or <CodeLiteral>ORDER BY</CodeLiteral> Clause. These functions can reference the <CodeLiteral>WINDOW</CodeLiteral> clause entries by name in their <CodeLiteral>OVER</CodeLiteral> clauses. A <CodeLiteral>WINDOW</CodeLiteral> clause entry does not have to be referenced anywhere, however; if it is not used in the query it is simply ignored. It is possible to use window functions without any <CodeLiteral>WINDOW</CodeLiteral> clause at all, since a window function call can specify its window definition directly in its <CodeLiteral>OVER</CodeLiteral> clause. However, the <CodeLiteral>WINDOW</CodeLiteral> clause saves typing when the same window definition is needed for more than one window function.\n Currently, <CodeLiteral>FOR NO KEY UPDATE</CodeLiteral>, <CodeLiteral>FOR UPDATE</CodeLiteral>, <CodeLiteral>FOR SHARE</CodeLiteral> and <CodeLiteral>FOR KEY SHARE</CodeLiteral> cannot be specified with <CodeLiteral>WINDOW</CodeLiteral>.\n Window functions are described in detail in Section 3.5, Section 4.2.8, and Section 7.2.5. ",
        "detail": "[DESCRIPTION]: The optional <CodeLiteral>WINDOW</CodeLiteral> clause has the general form\n <code>WINDOW window_name AS ( window_definition ) [, ...]\n</code>\n where window_name is a name that can be referenced from <CodeLiteral>OVER</CodeLiteral> clauses or subsequent window definitions, and window_definition is\n <code>[ existing_window_name ]\n[ PARTITION BY expression [, ...] ]\n[ ORDER BY expression [ ASC | DESC | USING operator ] [ NULLS { FIRST | LAST } ] [, ...] ]\n[ frame_clause ]\n</code>\n If an existing_window_name is specified it must refer to an earlier entry in the <CodeLiteral>WINDOW</CodeLiteral> list; the new window copies its partitioning clause from that entry, as well as its ordering clause if any. In this case the new window cannot specify its own <CodeLiteral>PARTITION BY</CodeLiteral> clause, and it can specify <CodeLiteral>ORDER BY</CodeLiteral> only if the copied window does not have one. The new window always uses its own frame clause; the copied window must not specify a frame clause.\n The elements of the <CodeLiteral>PARTITION BY</CodeLiteral> list are interpreted in much the same fashion as elements of a <CodeLiteral>GROUP BY</CodeLiteral> Clause, except that they are always simple expressions and never the name or number of an output column. Another difference is that these expressions can contain aggregate function calls, which are not allowed in a regular <CodeLiteral>GROUP BY</CodeLiteral> clause. They are allowed here because windowing occurs after grouping and aggregation.\n Similarly, the elements of the <CodeLiteral>ORDER BY</CodeLiteral> list are interpreted in much the same fashion as elements of an <CodeLiteral>ORDER BY</CodeLiteral> Clause, except that the expressions are always taken as simple expressions and never the name or number of an output column.\n The optional frame_clause defines the window frame for window functions that depend on the frame (not all do). The window frame is a set of related rows for each row of the query (called the current row). The frame_clause can be one of\n <code>{ RANGE | ROWS | GROUPS } frame_start [ frame_exclusion ]\n{ RANGE | ROWS | GROUPS } BETWEEN frame_start AND frame_end [ frame_exclusion ]\n</code>\n where frame_start and frame_end can be one of\n <code>UNBOUNDED PRECEDING\noffset PRECEDING\nCURRENT ROW\noffset FOLLOWING\nUNBOUNDED FOLLOWING\n</code>\n and frame_exclusion can be one of\n <code>EXCLUDE CURRENT ROW\nEXCLUDE GROUP\nEXCLUDE TIES\nEXCLUDE NO OTHERS\n</code>\n If frame_end is omitted it defaults to <CodeLiteral>CURRENT ROW</CodeLiteral>. Restrictions are that frame_start cannot be <CodeLiteral>UNBOUNDED FOLLOWING</CodeLiteral>, frame_end cannot be <CodeLiteral>UNBOUNDED PRECEDING</CodeLiteral>, and the frame_end choice cannot appear earlier in the above list of frame_start and frame_end options than the frame_start choice does \u2014 for example <CodeLiteral>RANGE BETWEEN CURRENT ROW AND offset PRECEDING</CodeLiteral> is not allowed.\n The default framing option is <CodeLiteral>RANGE UNBOUNDED PRECEDING</CodeLiteral>, which is the same as <CodeLiteral>RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW</CodeLiteral>; it sets the frame to be all rows from the partition start up through the current row's last peer (a row that the window's <CodeLiteral>ORDER BY</CodeLiteral> clause considers equivalent to the current row; all rows are peers if there is no <CodeLiteral>ORDER BY</CodeLiteral>). In general, <CodeLiteral>UNBOUNDED PRECEDING</CodeLiteral> means that the frame starts with the first row of the partition, and similarly <CodeLiteral>UNBOUNDED FOLLOWING</CodeLiteral> means that the frame ends with the last row of the partition, regardless of <CodeLiteral>RANGE</CodeLiteral>, <CodeLiteral>ROWS</CodeLiteral> or <CodeLiteral>GROUPS</CodeLiteral> mode. In <CodeLiteral>ROWS</CodeLiteral> mode, <CodeLiteral>CURRENT ROW</CodeLiteral> means that the frame starts or ends with the current row; but in <CodeLiteral>RANGE</CodeLiteral> or <CodeLiteral>GROUPS</CodeLiteral> mode it means that the frame starts or ends with the current row's first or last peer in the <CodeLiteral>ORDER BY</CodeLiteral> ordering. The offset <CodeLiteral>PRECEDING</CodeLiteral> and offset <CodeLiteral>FOLLOWING</CodeLiteral> options vary in meaning depending on the frame mode. In <CodeLiteral>ROWS</CodeLiteral> mode, the offset is an integer indicating that the frame starts or ends that many rows before or after the current row. In <CodeLiteral>GROUPS</CodeLiteral> mode, the offset is an integer indicating that the frame starts or ends that many peer groups before or after the current row's peer group, where a peer group is a group of rows that are equivalent according to the window's <CodeLiteral>ORDER BY</CodeLiteral> clause. In <CodeLiteral>RANGE</CodeLiteral> mode, use of an offset option requires that there be exactly one <CodeLiteral>ORDER BY</CodeLiteral> column in the window definition. Then the frame contains those rows whose ordering column value is no more than offset less than (for <CodeLiteral>PRECEDING</CodeLiteral>) or more than (for <CodeLiteral>FOLLOWING</CodeLiteral>) the current row's ordering column value. In these cases the data type of the offset expression depends on the data type of the ordering column. For numeric ordering columns it is typically of the same type as the ordering column, but for datetime ordering columns it is an interval. In all these cases, the value of the offset must be non-null and non-negative. Also, while the offset does not have to be a simple constant, it cannot contain variables, aggregate functions, or window functions.\n The frame_exclusion option allows rows around the current row to be excluded from the frame, even if they would be included according to the frame start and frame end options. <CodeLiteral>EXCLUDE CURRENT ROW</CodeLiteral> excludes the current row from the frame. <CodeLiteral>EXCLUDE GROUP</CodeLiteral> excludes the current row and its ordering peers from the frame. <CodeLiteral>EXCLUDE TIES</CodeLiteral> excludes any peers of the current row from the frame, but not the current row itself. <CodeLiteral>EXCLUDE NO OTHERS</CodeLiteral> simply specifies explicitly the default behavior of not excluding the current row or its peers.\n Beware that the <CodeLiteral>ROWS</CodeLiteral> mode can produce unpredictable results if the <CodeLiteral>ORDER BY</CodeLiteral> ordering does not order the rows uniquely. The <CodeLiteral>RANGE</CodeLiteral> and <CodeLiteral>GROUPS</CodeLiteral> modes are designed to ensure that rows that are peers in the <CodeLiteral>ORDER BY</CodeLiteral> ordering are treated alike: all rows of a given peer group will be in the frame or excluded from it.\n The purpose of a <CodeLiteral>WINDOW</CodeLiteral> clause is to specify the behavior of window functions appearing in the query's SELECT List or <CodeLiteral>ORDER BY</CodeLiteral> Clause. These functions can reference the <CodeLiteral>WINDOW</CodeLiteral> clause entries by name in their <CodeLiteral>OVER</CodeLiteral> clauses. A <CodeLiteral>WINDOW</CodeLiteral> clause entry does not have to be referenced anywhere, however; if it is not used in the query it is simply ignored. It is possible to use window functions without any <CodeLiteral>WINDOW</CodeLiteral> clause at all, since a window function call can specify its window definition directly in its <CodeLiteral>OVER</CodeLiteral> clause. However, the <CodeLiteral>WINDOW</CodeLiteral> clause saves typing when the same window definition is needed for more than one window function.\n Currently, <CodeLiteral>FOR NO KEY UPDATE</CodeLiteral>, <CodeLiteral>FOR UPDATE</CodeLiteral>, <CodeLiteral>FOR SHARE</CodeLiteral> and <CodeLiteral>FOR KEY SHARE</CodeLiteral> cannot be specified with <CodeLiteral>WINDOW</CodeLiteral>.\n Window functions are described in detail in Section 3.5, Section 4.2.8, and Section 7.2.5. <sep>[DEMO]: SELECT employee_id, salary, AVG(salary) OVER (PARTITION BY department_id ORDER BY salary RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW EXCLUDE NO OTHERS) AS running_avg_salary FROM employees;",
        "example": [
            "SELECT employee_id, salary, AVG(salary) OVER (PARTITION BY department_id ORDER BY salary RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW EXCLUDE NO OTHERS) AS running_avg_salary FROM employees;"
        ],
        "link": []
    },
    {
        "type": "keyword",
        "keyword": "WINDOW window_name AS ( existing_window_name ) ",
        "tree": " (window_clause WINDOW (window_definition_list (window_definition AS (window_specification ( )))))",
        "description": "The optional <CodeLiteral>WINDOW</CodeLiteral> clause has the general form\n <code>WINDOW window_name AS ( window_definition ) [, ...]\n</code>\n where window_name is a name that can be referenced from <CodeLiteral>OVER</CodeLiteral> clauses or subsequent window definitions, and window_definition is\n <code>[ existing_window_name ]\n[ PARTITION BY expression [, ...] ]\n[ ORDER BY expression [ ASC | DESC | USING operator ] [ NULLS { FIRST | LAST } ] [, ...] ]\n[ frame_clause ]\n</code>\n If an existing_window_name is specified it must refer to an earlier entry in the <CodeLiteral>WINDOW</CodeLiteral> list; the new window copies its partitioning clause from that entry, as well as its ordering clause if any. In this case the new window cannot specify its own <CodeLiteral>PARTITION BY</CodeLiteral> clause, and it can specify <CodeLiteral>ORDER BY</CodeLiteral> only if the copied window does not have one. The new window always uses its own frame clause; the copied window must not specify a frame clause.\n The elements of the <CodeLiteral>PARTITION BY</CodeLiteral> list are interpreted in much the same fashion as elements of a <CodeLiteral>GROUP BY</CodeLiteral> Clause, except that they are always simple expressions and never the name or number of an output column. Another difference is that these expressions can contain aggregate function calls, which are not allowed in a regular <CodeLiteral>GROUP BY</CodeLiteral> clause. They are allowed here because windowing occurs after grouping and aggregation.\n Similarly, the elements of the <CodeLiteral>ORDER BY</CodeLiteral> list are interpreted in much the same fashion as elements of an <CodeLiteral>ORDER BY</CodeLiteral> Clause, except that the expressions are always taken as simple expressions and never the name or number of an output column.\n The optional frame_clause defines the window frame for window functions that depend on the frame (not all do). The window frame is a set of related rows for each row of the query (called the current row). The frame_clause can be one of\n <code>{ RANGE | ROWS | GROUPS } frame_start [ frame_exclusion ]\n{ RANGE | ROWS | GROUPS } BETWEEN frame_start AND frame_end [ frame_exclusion ]\n</code>\n where frame_start and frame_end can be one of\n <code>UNBOUNDED PRECEDING\noffset PRECEDING\nCURRENT ROW\noffset FOLLOWING\nUNBOUNDED FOLLOWING\n</code>\n and frame_exclusion can be one of\n <code>EXCLUDE CURRENT ROW\nEXCLUDE GROUP\nEXCLUDE TIES\nEXCLUDE NO OTHERS\n</code>\n If frame_end is omitted it defaults to <CodeLiteral>CURRENT ROW</CodeLiteral>. Restrictions are that frame_start cannot be <CodeLiteral>UNBOUNDED FOLLOWING</CodeLiteral>, frame_end cannot be <CodeLiteral>UNBOUNDED PRECEDING</CodeLiteral>, and the frame_end choice cannot appear earlier in the above list of frame_start and frame_end options than the frame_start choice does \u2014 for example <CodeLiteral>RANGE BETWEEN CURRENT ROW AND offset PRECEDING</CodeLiteral> is not allowed.\n The default framing option is <CodeLiteral>RANGE UNBOUNDED PRECEDING</CodeLiteral>, which is the same as <CodeLiteral>RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW</CodeLiteral>; it sets the frame to be all rows from the partition start up through the current row's last peer (a row that the window's <CodeLiteral>ORDER BY</CodeLiteral> clause considers equivalent to the current row; all rows are peers if there is no <CodeLiteral>ORDER BY</CodeLiteral>). In general, <CodeLiteral>UNBOUNDED PRECEDING</CodeLiteral> means that the frame starts with the first row of the partition, and similarly <CodeLiteral>UNBOUNDED FOLLOWING</CodeLiteral> means that the frame ends with the last row of the partition, regardless of <CodeLiteral>RANGE</CodeLiteral>, <CodeLiteral>ROWS</CodeLiteral> or <CodeLiteral>GROUPS</CodeLiteral> mode. In <CodeLiteral>ROWS</CodeLiteral> mode, <CodeLiteral>CURRENT ROW</CodeLiteral> means that the frame starts or ends with the current row; but in <CodeLiteral>RANGE</CodeLiteral> or <CodeLiteral>GROUPS</CodeLiteral> mode it means that the frame starts or ends with the current row's first or last peer in the <CodeLiteral>ORDER BY</CodeLiteral> ordering. The offset <CodeLiteral>PRECEDING</CodeLiteral> and offset <CodeLiteral>FOLLOWING</CodeLiteral> options vary in meaning depending on the frame mode. In <CodeLiteral>ROWS</CodeLiteral> mode, the offset is an integer indicating that the frame starts or ends that many rows before or after the current row. In <CodeLiteral>GROUPS</CodeLiteral> mode, the offset is an integer indicating that the frame starts or ends that many peer groups before or after the current row's peer group, where a peer group is a group of rows that are equivalent according to the window's <CodeLiteral>ORDER BY</CodeLiteral> clause. In <CodeLiteral>RANGE</CodeLiteral> mode, use of an offset option requires that there be exactly one <CodeLiteral>ORDER BY</CodeLiteral> column in the window definition. Then the frame contains those rows whose ordering column value is no more than offset less than (for <CodeLiteral>PRECEDING</CodeLiteral>) or more than (for <CodeLiteral>FOLLOWING</CodeLiteral>) the current row's ordering column value. In these cases the data type of the offset expression depends on the data type of the ordering column. For numeric ordering columns it is typically of the same type as the ordering column, but for datetime ordering columns it is an interval. In all these cases, the value of the offset must be non-null and non-negative. Also, while the offset does not have to be a simple constant, it cannot contain variables, aggregate functions, or window functions.\n The frame_exclusion option allows rows around the current row to be excluded from the frame, even if they would be included according to the frame start and frame end options. <CodeLiteral>EXCLUDE CURRENT ROW</CodeLiteral> excludes the current row from the frame. <CodeLiteral>EXCLUDE GROUP</CodeLiteral> excludes the current row and its ordering peers from the frame. <CodeLiteral>EXCLUDE TIES</CodeLiteral> excludes any peers of the current row from the frame, but not the current row itself. <CodeLiteral>EXCLUDE NO OTHERS</CodeLiteral> simply specifies explicitly the default behavior of not excluding the current row or its peers.\n Beware that the <CodeLiteral>ROWS</CodeLiteral> mode can produce unpredictable results if the <CodeLiteral>ORDER BY</CodeLiteral> ordering does not order the rows uniquely. The <CodeLiteral>RANGE</CodeLiteral> and <CodeLiteral>GROUPS</CodeLiteral> modes are designed to ensure that rows that are peers in the <CodeLiteral>ORDER BY</CodeLiteral> ordering are treated alike: all rows of a given peer group will be in the frame or excluded from it.\n The purpose of a <CodeLiteral>WINDOW</CodeLiteral> clause is to specify the behavior of window functions appearing in the query's SELECT List or <CodeLiteral>ORDER BY</CodeLiteral> Clause. These functions can reference the <CodeLiteral>WINDOW</CodeLiteral> clause entries by name in their <CodeLiteral>OVER</CodeLiteral> clauses. A <CodeLiteral>WINDOW</CodeLiteral> clause entry does not have to be referenced anywhere, however; if it is not used in the query it is simply ignored. It is possible to use window functions without any <CodeLiteral>WINDOW</CodeLiteral> clause at all, since a window function call can specify its window definition directly in its <CodeLiteral>OVER</CodeLiteral> clause. However, the <CodeLiteral>WINDOW</CodeLiteral> clause saves typing when the same window definition is needed for more than one window function.\n Currently, <CodeLiteral>FOR NO KEY UPDATE</CodeLiteral>, <CodeLiteral>FOR UPDATE</CodeLiteral>, <CodeLiteral>FOR SHARE</CodeLiteral> and <CodeLiteral>FOR KEY SHARE</CodeLiteral> cannot be specified with <CodeLiteral>WINDOW</CodeLiteral>.\n Window functions are described in detail in Section 3.5, Section 4.2.8, and Section 7.2.5. ",
        "detail": "[DESCRIPTION]: The optional <CodeLiteral>WINDOW</CodeLiteral> clause has the general form\n <code>WINDOW window_name AS ( window_definition ) [, ...]\n</code>\n where window_name is a name that can be referenced from <CodeLiteral>OVER</CodeLiteral> clauses or subsequent window definitions, and window_definition is\n <code>[ existing_window_name ]\n[ PARTITION BY expression [, ...] ]\n[ ORDER BY expression [ ASC | DESC | USING operator ] [ NULLS { FIRST | LAST } ] [, ...] ]\n[ frame_clause ]\n</code>\n If an existing_window_name is specified it must refer to an earlier entry in the <CodeLiteral>WINDOW</CodeLiteral> list; the new window copies its partitioning clause from that entry, as well as its ordering clause if any. In this case the new window cannot specify its own <CodeLiteral>PARTITION BY</CodeLiteral> clause, and it can specify <CodeLiteral>ORDER BY</CodeLiteral> only if the copied window does not have one. The new window always uses its own frame clause; the copied window must not specify a frame clause.\n The elements of the <CodeLiteral>PARTITION BY</CodeLiteral> list are interpreted in much the same fashion as elements of a <CodeLiteral>GROUP BY</CodeLiteral> Clause, except that they are always simple expressions and never the name or number of an output column. Another difference is that these expressions can contain aggregate function calls, which are not allowed in a regular <CodeLiteral>GROUP BY</CodeLiteral> clause. They are allowed here because windowing occurs after grouping and aggregation.\n Similarly, the elements of the <CodeLiteral>ORDER BY</CodeLiteral> list are interpreted in much the same fashion as elements of an <CodeLiteral>ORDER BY</CodeLiteral> Clause, except that the expressions are always taken as simple expressions and never the name or number of an output column.\n The optional frame_clause defines the window frame for window functions that depend on the frame (not all do). The window frame is a set of related rows for each row of the query (called the current row). The frame_clause can be one of\n <code>{ RANGE | ROWS | GROUPS } frame_start [ frame_exclusion ]\n{ RANGE | ROWS | GROUPS } BETWEEN frame_start AND frame_end [ frame_exclusion ]\n</code>\n where frame_start and frame_end can be one of\n <code>UNBOUNDED PRECEDING\noffset PRECEDING\nCURRENT ROW\noffset FOLLOWING\nUNBOUNDED FOLLOWING\n</code>\n and frame_exclusion can be one of\n <code>EXCLUDE CURRENT ROW\nEXCLUDE GROUP\nEXCLUDE TIES\nEXCLUDE NO OTHERS\n</code>\n If frame_end is omitted it defaults to <CodeLiteral>CURRENT ROW</CodeLiteral>. Restrictions are that frame_start cannot be <CodeLiteral>UNBOUNDED FOLLOWING</CodeLiteral>, frame_end cannot be <CodeLiteral>UNBOUNDED PRECEDING</CodeLiteral>, and the frame_end choice cannot appear earlier in the above list of frame_start and frame_end options than the frame_start choice does \u2014 for example <CodeLiteral>RANGE BETWEEN CURRENT ROW AND offset PRECEDING</CodeLiteral> is not allowed.\n The default framing option is <CodeLiteral>RANGE UNBOUNDED PRECEDING</CodeLiteral>, which is the same as <CodeLiteral>RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW</CodeLiteral>; it sets the frame to be all rows from the partition start up through the current row's last peer (a row that the window's <CodeLiteral>ORDER BY</CodeLiteral> clause considers equivalent to the current row; all rows are peers if there is no <CodeLiteral>ORDER BY</CodeLiteral>). In general, <CodeLiteral>UNBOUNDED PRECEDING</CodeLiteral> means that the frame starts with the first row of the partition, and similarly <CodeLiteral>UNBOUNDED FOLLOWING</CodeLiteral> means that the frame ends with the last row of the partition, regardless of <CodeLiteral>RANGE</CodeLiteral>, <CodeLiteral>ROWS</CodeLiteral> or <CodeLiteral>GROUPS</CodeLiteral> mode. In <CodeLiteral>ROWS</CodeLiteral> mode, <CodeLiteral>CURRENT ROW</CodeLiteral> means that the frame starts or ends with the current row; but in <CodeLiteral>RANGE</CodeLiteral> or <CodeLiteral>GROUPS</CodeLiteral> mode it means that the frame starts or ends with the current row's first or last peer in the <CodeLiteral>ORDER BY</CodeLiteral> ordering. The offset <CodeLiteral>PRECEDING</CodeLiteral> and offset <CodeLiteral>FOLLOWING</CodeLiteral> options vary in meaning depending on the frame mode. In <CodeLiteral>ROWS</CodeLiteral> mode, the offset is an integer indicating that the frame starts or ends that many rows before or after the current row. In <CodeLiteral>GROUPS</CodeLiteral> mode, the offset is an integer indicating that the frame starts or ends that many peer groups before or after the current row's peer group, where a peer group is a group of rows that are equivalent according to the window's <CodeLiteral>ORDER BY</CodeLiteral> clause. In <CodeLiteral>RANGE</CodeLiteral> mode, use of an offset option requires that there be exactly one <CodeLiteral>ORDER BY</CodeLiteral> column in the window definition. Then the frame contains those rows whose ordering column value is no more than offset less than (for <CodeLiteral>PRECEDING</CodeLiteral>) or more than (for <CodeLiteral>FOLLOWING</CodeLiteral>) the current row's ordering column value. In these cases the data type of the offset expression depends on the data type of the ordering column. For numeric ordering columns it is typically of the same type as the ordering column, but for datetime ordering columns it is an interval. In all these cases, the value of the offset must be non-null and non-negative. Also, while the offset does not have to be a simple constant, it cannot contain variables, aggregate functions, or window functions.\n The frame_exclusion option allows rows around the current row to be excluded from the frame, even if they would be included according to the frame start and frame end options. <CodeLiteral>EXCLUDE CURRENT ROW</CodeLiteral> excludes the current row from the frame. <CodeLiteral>EXCLUDE GROUP</CodeLiteral> excludes the current row and its ordering peers from the frame. <CodeLiteral>EXCLUDE TIES</CodeLiteral> excludes any peers of the current row from the frame, but not the current row itself. <CodeLiteral>EXCLUDE NO OTHERS</CodeLiteral> simply specifies explicitly the default behavior of not excluding the current row or its peers.\n Beware that the <CodeLiteral>ROWS</CodeLiteral> mode can produce unpredictable results if the <CodeLiteral>ORDER BY</CodeLiteral> ordering does not order the rows uniquely. The <CodeLiteral>RANGE</CodeLiteral> and <CodeLiteral>GROUPS</CodeLiteral> modes are designed to ensure that rows that are peers in the <CodeLiteral>ORDER BY</CodeLiteral> ordering are treated alike: all rows of a given peer group will be in the frame or excluded from it.\n The purpose of a <CodeLiteral>WINDOW</CodeLiteral> clause is to specify the behavior of window functions appearing in the query's SELECT List or <CodeLiteral>ORDER BY</CodeLiteral> Clause. These functions can reference the <CodeLiteral>WINDOW</CodeLiteral> clause entries by name in their <CodeLiteral>OVER</CodeLiteral> clauses. A <CodeLiteral>WINDOW</CodeLiteral> clause entry does not have to be referenced anywhere, however; if it is not used in the query it is simply ignored. It is possible to use window functions without any <CodeLiteral>WINDOW</CodeLiteral> clause at all, since a window function call can specify its window definition directly in its <CodeLiteral>OVER</CodeLiteral> clause. However, the <CodeLiteral>WINDOW</CodeLiteral> clause saves typing when the same window definition is needed for more than one window function.\n Currently, <CodeLiteral>FOR NO KEY UPDATE</CodeLiteral>, <CodeLiteral>FOR UPDATE</CodeLiteral>, <CodeLiteral>FOR SHARE</CodeLiteral> and <CodeLiteral>FOR KEY SHARE</CodeLiteral> cannot be specified with <CodeLiteral>WINDOW</CodeLiteral>.\n Window functions are described in detail in Section 3.5, Section 4.2.8, and Section 7.2.5. <sep>[DEMO]: SELECT employee_id, salary, AVG(salary) OVER w FROM employees WINDOW w AS (PARTITION BY department ORDER BY salary ROWS BETWEEN 1 PRECEDING AND 1 FOLLOWING)",
        "example": [
            "SELECT employee_id, salary, AVG(salary) OVER w FROM employees WINDOW w AS (PARTITION BY department ORDER BY salary ROWS BETWEEN 1 PRECEDING AND 1 FOLLOWING)"
        ],
        "link": []
    },
    {
        "type": "keyword",
        "keyword": "WINDOW window_name AS ( PARTITION BY expression ) ",
        "tree": " (window_clause WINDOW (window_definition_list (window_definition AS (window_specification (opt_partition_clause PARTITION BY)))))",
        "description": "The optional <CodeLiteral>WINDOW</CodeLiteral> clause has the general form\n <code>WINDOW window_name AS ( window_definition ) [, ...]\n</code>\n where window_name is a name that can be referenced from <CodeLiteral>OVER</CodeLiteral> clauses or subsequent window definitions, and window_definition is\n <code>[ existing_window_name ]\n[ PARTITION BY expression [, ...] ]\n[ ORDER BY expression [ ASC | DESC | USING operator ] [ NULLS { FIRST | LAST } ] [, ...] ]\n[ frame_clause ]\n</code>\n If an existing_window_name is specified it must refer to an earlier entry in the <CodeLiteral>WINDOW</CodeLiteral> list; the new window copies its partitioning clause from that entry, as well as its ordering clause if any. In this case the new window cannot specify its own <CodeLiteral>PARTITION BY</CodeLiteral> clause, and it can specify <CodeLiteral>ORDER BY</CodeLiteral> only if the copied window does not have one. The new window always uses its own frame clause; the copied window must not specify a frame clause.\n The elements of the <CodeLiteral>PARTITION BY</CodeLiteral> list are interpreted in much the same fashion as elements of a <CodeLiteral>GROUP BY</CodeLiteral> Clause, except that they are always simple expressions and never the name or number of an output column. Another difference is that these expressions can contain aggregate function calls, which are not allowed in a regular <CodeLiteral>GROUP BY</CodeLiteral> clause. They are allowed here because windowing occurs after grouping and aggregation.\n Similarly, the elements of the <CodeLiteral>ORDER BY</CodeLiteral> list are interpreted in much the same fashion as elements of an <CodeLiteral>ORDER BY</CodeLiteral> Clause, except that the expressions are always taken as simple expressions and never the name or number of an output column.\n The optional frame_clause defines the window frame for window functions that depend on the frame (not all do). The window frame is a set of related rows for each row of the query (called the current row). The frame_clause can be one of\n <code>{ RANGE | ROWS | GROUPS } frame_start [ frame_exclusion ]\n{ RANGE | ROWS | GROUPS } BETWEEN frame_start AND frame_end [ frame_exclusion ]\n</code>\n where frame_start and frame_end can be one of\n <code>UNBOUNDED PRECEDING\noffset PRECEDING\nCURRENT ROW\noffset FOLLOWING\nUNBOUNDED FOLLOWING\n</code>\n and frame_exclusion can be one of\n <code>EXCLUDE CURRENT ROW\nEXCLUDE GROUP\nEXCLUDE TIES\nEXCLUDE NO OTHERS\n</code>\n If frame_end is omitted it defaults to <CodeLiteral>CURRENT ROW</CodeLiteral>. Restrictions are that frame_start cannot be <CodeLiteral>UNBOUNDED FOLLOWING</CodeLiteral>, frame_end cannot be <CodeLiteral>UNBOUNDED PRECEDING</CodeLiteral>, and the frame_end choice cannot appear earlier in the above list of frame_start and frame_end options than the frame_start choice does \u2014 for example <CodeLiteral>RANGE BETWEEN CURRENT ROW AND offset PRECEDING</CodeLiteral> is not allowed.\n The default framing option is <CodeLiteral>RANGE UNBOUNDED PRECEDING</CodeLiteral>, which is the same as <CodeLiteral>RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW</CodeLiteral>; it sets the frame to be all rows from the partition start up through the current row's last peer (a row that the window's <CodeLiteral>ORDER BY</CodeLiteral> clause considers equivalent to the current row; all rows are peers if there is no <CodeLiteral>ORDER BY</CodeLiteral>). In general, <CodeLiteral>UNBOUNDED PRECEDING</CodeLiteral> means that the frame starts with the first row of the partition, and similarly <CodeLiteral>UNBOUNDED FOLLOWING</CodeLiteral> means that the frame ends with the last row of the partition, regardless of <CodeLiteral>RANGE</CodeLiteral>, <CodeLiteral>ROWS</CodeLiteral> or <CodeLiteral>GROUPS</CodeLiteral> mode. In <CodeLiteral>ROWS</CodeLiteral> mode, <CodeLiteral>CURRENT ROW</CodeLiteral> means that the frame starts or ends with the current row; but in <CodeLiteral>RANGE</CodeLiteral> or <CodeLiteral>GROUPS</CodeLiteral> mode it means that the frame starts or ends with the current row's first or last peer in the <CodeLiteral>ORDER BY</CodeLiteral> ordering. The offset <CodeLiteral>PRECEDING</CodeLiteral> and offset <CodeLiteral>FOLLOWING</CodeLiteral> options vary in meaning depending on the frame mode. In <CodeLiteral>ROWS</CodeLiteral> mode, the offset is an integer indicating that the frame starts or ends that many rows before or after the current row. In <CodeLiteral>GROUPS</CodeLiteral> mode, the offset is an integer indicating that the frame starts or ends that many peer groups before or after the current row's peer group, where a peer group is a group of rows that are equivalent according to the window's <CodeLiteral>ORDER BY</CodeLiteral> clause. In <CodeLiteral>RANGE</CodeLiteral> mode, use of an offset option requires that there be exactly one <CodeLiteral>ORDER BY</CodeLiteral> column in the window definition. Then the frame contains those rows whose ordering column value is no more than offset less than (for <CodeLiteral>PRECEDING</CodeLiteral>) or more than (for <CodeLiteral>FOLLOWING</CodeLiteral>) the current row's ordering column value. In these cases the data type of the offset expression depends on the data type of the ordering column. For numeric ordering columns it is typically of the same type as the ordering column, but for datetime ordering columns it is an interval. In all these cases, the value of the offset must be non-null and non-negative. Also, while the offset does not have to be a simple constant, it cannot contain variables, aggregate functions, or window functions.\n The frame_exclusion option allows rows around the current row to be excluded from the frame, even if they would be included according to the frame start and frame end options. <CodeLiteral>EXCLUDE CURRENT ROW</CodeLiteral> excludes the current row from the frame. <CodeLiteral>EXCLUDE GROUP</CodeLiteral> excludes the current row and its ordering peers from the frame. <CodeLiteral>EXCLUDE TIES</CodeLiteral> excludes any peers of the current row from the frame, but not the current row itself. <CodeLiteral>EXCLUDE NO OTHERS</CodeLiteral> simply specifies explicitly the default behavior of not excluding the current row or its peers.\n Beware that the <CodeLiteral>ROWS</CodeLiteral> mode can produce unpredictable results if the <CodeLiteral>ORDER BY</CodeLiteral> ordering does not order the rows uniquely. The <CodeLiteral>RANGE</CodeLiteral> and <CodeLiteral>GROUPS</CodeLiteral> modes are designed to ensure that rows that are peers in the <CodeLiteral>ORDER BY</CodeLiteral> ordering are treated alike: all rows of a given peer group will be in the frame or excluded from it.\n The purpose of a <CodeLiteral>WINDOW</CodeLiteral> clause is to specify the behavior of window functions appearing in the query's SELECT List or <CodeLiteral>ORDER BY</CodeLiteral> Clause. These functions can reference the <CodeLiteral>WINDOW</CodeLiteral> clause entries by name in their <CodeLiteral>OVER</CodeLiteral> clauses. A <CodeLiteral>WINDOW</CodeLiteral> clause entry does not have to be referenced anywhere, however; if it is not used in the query it is simply ignored. It is possible to use window functions without any <CodeLiteral>WINDOW</CodeLiteral> clause at all, since a window function call can specify its window definition directly in its <CodeLiteral>OVER</CodeLiteral> clause. However, the <CodeLiteral>WINDOW</CodeLiteral> clause saves typing when the same window definition is needed for more than one window function.\n Currently, <CodeLiteral>FOR NO KEY UPDATE</CodeLiteral>, <CodeLiteral>FOR UPDATE</CodeLiteral>, <CodeLiteral>FOR SHARE</CodeLiteral> and <CodeLiteral>FOR KEY SHARE</CodeLiteral> cannot be specified with <CodeLiteral>WINDOW</CodeLiteral>.\n Window functions are described in detail in Section 3.5, Section 4.2.8, and Section 7.2.5. ",
        "detail": "[DESCRIPTION]: The optional <CodeLiteral>WINDOW</CodeLiteral> clause has the general form\n <code>WINDOW window_name AS ( window_definition ) [, ...]\n</code>\n where window_name is a name that can be referenced from <CodeLiteral>OVER</CodeLiteral> clauses or subsequent window definitions, and window_definition is\n <code>[ existing_window_name ]\n[ PARTITION BY expression [, ...] ]\n[ ORDER BY expression [ ASC | DESC | USING operator ] [ NULLS { FIRST | LAST } ] [, ...] ]\n[ frame_clause ]\n</code>\n If an existing_window_name is specified it must refer to an earlier entry in the <CodeLiteral>WINDOW</CodeLiteral> list; the new window copies its partitioning clause from that entry, as well as its ordering clause if any. In this case the new window cannot specify its own <CodeLiteral>PARTITION BY</CodeLiteral> clause, and it can specify <CodeLiteral>ORDER BY</CodeLiteral> only if the copied window does not have one. The new window always uses its own frame clause; the copied window must not specify a frame clause.\n The elements of the <CodeLiteral>PARTITION BY</CodeLiteral> list are interpreted in much the same fashion as elements of a <CodeLiteral>GROUP BY</CodeLiteral> Clause, except that they are always simple expressions and never the name or number of an output column. Another difference is that these expressions can contain aggregate function calls, which are not allowed in a regular <CodeLiteral>GROUP BY</CodeLiteral> clause. They are allowed here because windowing occurs after grouping and aggregation.\n Similarly, the elements of the <CodeLiteral>ORDER BY</CodeLiteral> list are interpreted in much the same fashion as elements of an <CodeLiteral>ORDER BY</CodeLiteral> Clause, except that the expressions are always taken as simple expressions and never the name or number of an output column.\n The optional frame_clause defines the window frame for window functions that depend on the frame (not all do). The window frame is a set of related rows for each row of the query (called the current row). The frame_clause can be one of\n <code>{ RANGE | ROWS | GROUPS } frame_start [ frame_exclusion ]\n{ RANGE | ROWS | GROUPS } BETWEEN frame_start AND frame_end [ frame_exclusion ]\n</code>\n where frame_start and frame_end can be one of\n <code>UNBOUNDED PRECEDING\noffset PRECEDING\nCURRENT ROW\noffset FOLLOWING\nUNBOUNDED FOLLOWING\n</code>\n and frame_exclusion can be one of\n <code>EXCLUDE CURRENT ROW\nEXCLUDE GROUP\nEXCLUDE TIES\nEXCLUDE NO OTHERS\n</code>\n If frame_end is omitted it defaults to <CodeLiteral>CURRENT ROW</CodeLiteral>. Restrictions are that frame_start cannot be <CodeLiteral>UNBOUNDED FOLLOWING</CodeLiteral>, frame_end cannot be <CodeLiteral>UNBOUNDED PRECEDING</CodeLiteral>, and the frame_end choice cannot appear earlier in the above list of frame_start and frame_end options than the frame_start choice does \u2014 for example <CodeLiteral>RANGE BETWEEN CURRENT ROW AND offset PRECEDING</CodeLiteral> is not allowed.\n The default framing option is <CodeLiteral>RANGE UNBOUNDED PRECEDING</CodeLiteral>, which is the same as <CodeLiteral>RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW</CodeLiteral>; it sets the frame to be all rows from the partition start up through the current row's last peer (a row that the window's <CodeLiteral>ORDER BY</CodeLiteral> clause considers equivalent to the current row; all rows are peers if there is no <CodeLiteral>ORDER BY</CodeLiteral>). In general, <CodeLiteral>UNBOUNDED PRECEDING</CodeLiteral> means that the frame starts with the first row of the partition, and similarly <CodeLiteral>UNBOUNDED FOLLOWING</CodeLiteral> means that the frame ends with the last row of the partition, regardless of <CodeLiteral>RANGE</CodeLiteral>, <CodeLiteral>ROWS</CodeLiteral> or <CodeLiteral>GROUPS</CodeLiteral> mode. In <CodeLiteral>ROWS</CodeLiteral> mode, <CodeLiteral>CURRENT ROW</CodeLiteral> means that the frame starts or ends with the current row; but in <CodeLiteral>RANGE</CodeLiteral> or <CodeLiteral>GROUPS</CodeLiteral> mode it means that the frame starts or ends with the current row's first or last peer in the <CodeLiteral>ORDER BY</CodeLiteral> ordering. The offset <CodeLiteral>PRECEDING</CodeLiteral> and offset <CodeLiteral>FOLLOWING</CodeLiteral> options vary in meaning depending on the frame mode. In <CodeLiteral>ROWS</CodeLiteral> mode, the offset is an integer indicating that the frame starts or ends that many rows before or after the current row. In <CodeLiteral>GROUPS</CodeLiteral> mode, the offset is an integer indicating that the frame starts or ends that many peer groups before or after the current row's peer group, where a peer group is a group of rows that are equivalent according to the window's <CodeLiteral>ORDER BY</CodeLiteral> clause. In <CodeLiteral>RANGE</CodeLiteral> mode, use of an offset option requires that there be exactly one <CodeLiteral>ORDER BY</CodeLiteral> column in the window definition. Then the frame contains those rows whose ordering column value is no more than offset less than (for <CodeLiteral>PRECEDING</CodeLiteral>) or more than (for <CodeLiteral>FOLLOWING</CodeLiteral>) the current row's ordering column value. In these cases the data type of the offset expression depends on the data type of the ordering column. For numeric ordering columns it is typically of the same type as the ordering column, but for datetime ordering columns it is an interval. In all these cases, the value of the offset must be non-null and non-negative. Also, while the offset does not have to be a simple constant, it cannot contain variables, aggregate functions, or window functions.\n The frame_exclusion option allows rows around the current row to be excluded from the frame, even if they would be included according to the frame start and frame end options. <CodeLiteral>EXCLUDE CURRENT ROW</CodeLiteral> excludes the current row from the frame. <CodeLiteral>EXCLUDE GROUP</CodeLiteral> excludes the current row and its ordering peers from the frame. <CodeLiteral>EXCLUDE TIES</CodeLiteral> excludes any peers of the current row from the frame, but not the current row itself. <CodeLiteral>EXCLUDE NO OTHERS</CodeLiteral> simply specifies explicitly the default behavior of not excluding the current row or its peers.\n Beware that the <CodeLiteral>ROWS</CodeLiteral> mode can produce unpredictable results if the <CodeLiteral>ORDER BY</CodeLiteral> ordering does not order the rows uniquely. The <CodeLiteral>RANGE</CodeLiteral> and <CodeLiteral>GROUPS</CodeLiteral> modes are designed to ensure that rows that are peers in the <CodeLiteral>ORDER BY</CodeLiteral> ordering are treated alike: all rows of a given peer group will be in the frame or excluded from it.\n The purpose of a <CodeLiteral>WINDOW</CodeLiteral> clause is to specify the behavior of window functions appearing in the query's SELECT List or <CodeLiteral>ORDER BY</CodeLiteral> Clause. These functions can reference the <CodeLiteral>WINDOW</CodeLiteral> clause entries by name in their <CodeLiteral>OVER</CodeLiteral> clauses. A <CodeLiteral>WINDOW</CodeLiteral> clause entry does not have to be referenced anywhere, however; if it is not used in the query it is simply ignored. It is possible to use window functions without any <CodeLiteral>WINDOW</CodeLiteral> clause at all, since a window function call can specify its window definition directly in its <CodeLiteral>OVER</CodeLiteral> clause. However, the <CodeLiteral>WINDOW</CodeLiteral> clause saves typing when the same window definition is needed for more than one window function.\n Currently, <CodeLiteral>FOR NO KEY UPDATE</CodeLiteral>, <CodeLiteral>FOR UPDATE</CodeLiteral>, <CodeLiteral>FOR SHARE</CodeLiteral> and <CodeLiteral>FOR KEY SHARE</CodeLiteral> cannot be specified with <CodeLiteral>WINDOW</CodeLiteral>.\n Window functions are described in detail in Section 3.5, Section 4.2.8, and Section 7.2.5. <sep>[DEMO]: SELECT employee_id, department, COUNT(employee_id) OVER w AS dept_employees\nFROM employees\nWINDOW w AS (PARTITION BY department);",
        "example": [
            "SELECT employee_id, department, COUNT(employee_id) OVER w AS dept_employees\nFROM employees\nWINDOW w AS (PARTITION BY department);"
        ],
        "link": []
    },
    {
        "type": "keyword",
        "keyword": "WINDOW window_name AS ( ORDER BY expression ASC ) ",
        "tree": " (window_clause WINDOW (window_definition_list (window_definition AS (window_specification (opt_sort_clause (sort_clause ORDER BY (sortby_list (sortby (opt_asc_desc ASC)))))))))",
        "description": "The optional <CodeLiteral>WINDOW</CodeLiteral> clause has the general form\n <code>WINDOW window_name AS ( window_definition ) [, ...]\n</code>\n where window_name is a name that can be referenced from <CodeLiteral>OVER</CodeLiteral> clauses or subsequent window definitions, and window_definition is\n <code>[ existing_window_name ]\n[ PARTITION BY expression [, ...] ]\n[ ORDER BY expression [ ASC | DESC | USING operator ] [ NULLS { FIRST | LAST } ] [, ...] ]\n[ frame_clause ]\n</code>\n If an existing_window_name is specified it must refer to an earlier entry in the <CodeLiteral>WINDOW</CodeLiteral> list; the new window copies its partitioning clause from that entry, as well as its ordering clause if any. In this case the new window cannot specify its own <CodeLiteral>PARTITION BY</CodeLiteral> clause, and it can specify <CodeLiteral>ORDER BY</CodeLiteral> only if the copied window does not have one. The new window always uses its own frame clause; the copied window must not specify a frame clause.\n The elements of the <CodeLiteral>PARTITION BY</CodeLiteral> list are interpreted in much the same fashion as elements of a <CodeLiteral>GROUP BY</CodeLiteral> Clause, except that they are always simple expressions and never the name or number of an output column. Another difference is that these expressions can contain aggregate function calls, which are not allowed in a regular <CodeLiteral>GROUP BY</CodeLiteral> clause. They are allowed here because windowing occurs after grouping and aggregation.\n Similarly, the elements of the <CodeLiteral>ORDER BY</CodeLiteral> list are interpreted in much the same fashion as elements of an <CodeLiteral>ORDER BY</CodeLiteral> Clause, except that the expressions are always taken as simple expressions and never the name or number of an output column.\n The optional frame_clause defines the window frame for window functions that depend on the frame (not all do). The window frame is a set of related rows for each row of the query (called the current row). The frame_clause can be one of\n <code>{ RANGE | ROWS | GROUPS } frame_start [ frame_exclusion ]\n{ RANGE | ROWS | GROUPS } BETWEEN frame_start AND frame_end [ frame_exclusion ]\n</code>\n where frame_start and frame_end can be one of\n <code>UNBOUNDED PRECEDING\noffset PRECEDING\nCURRENT ROW\noffset FOLLOWING\nUNBOUNDED FOLLOWING\n</code>\n and frame_exclusion can be one of\n <code>EXCLUDE CURRENT ROW\nEXCLUDE GROUP\nEXCLUDE TIES\nEXCLUDE NO OTHERS\n</code>\n If frame_end is omitted it defaults to <CodeLiteral>CURRENT ROW</CodeLiteral>. Restrictions are that frame_start cannot be <CodeLiteral>UNBOUNDED FOLLOWING</CodeLiteral>, frame_end cannot be <CodeLiteral>UNBOUNDED PRECEDING</CodeLiteral>, and the frame_end choice cannot appear earlier in the above list of frame_start and frame_end options than the frame_start choice does \u2014 for example <CodeLiteral>RANGE BETWEEN CURRENT ROW AND offset PRECEDING</CodeLiteral> is not allowed.\n The default framing option is <CodeLiteral>RANGE UNBOUNDED PRECEDING</CodeLiteral>, which is the same as <CodeLiteral>RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW</CodeLiteral>; it sets the frame to be all rows from the partition start up through the current row's last peer (a row that the window's <CodeLiteral>ORDER BY</CodeLiteral> clause considers equivalent to the current row; all rows are peers if there is no <CodeLiteral>ORDER BY</CodeLiteral>). In general, <CodeLiteral>UNBOUNDED PRECEDING</CodeLiteral> means that the frame starts with the first row of the partition, and similarly <CodeLiteral>UNBOUNDED FOLLOWING</CodeLiteral> means that the frame ends with the last row of the partition, regardless of <CodeLiteral>RANGE</CodeLiteral>, <CodeLiteral>ROWS</CodeLiteral> or <CodeLiteral>GROUPS</CodeLiteral> mode. In <CodeLiteral>ROWS</CodeLiteral> mode, <CodeLiteral>CURRENT ROW</CodeLiteral> means that the frame starts or ends with the current row; but in <CodeLiteral>RANGE</CodeLiteral> or <CodeLiteral>GROUPS</CodeLiteral> mode it means that the frame starts or ends with the current row's first or last peer in the <CodeLiteral>ORDER BY</CodeLiteral> ordering. The offset <CodeLiteral>PRECEDING</CodeLiteral> and offset <CodeLiteral>FOLLOWING</CodeLiteral> options vary in meaning depending on the frame mode. In <CodeLiteral>ROWS</CodeLiteral> mode, the offset is an integer indicating that the frame starts or ends that many rows before or after the current row. In <CodeLiteral>GROUPS</CodeLiteral> mode, the offset is an integer indicating that the frame starts or ends that many peer groups before or after the current row's peer group, where a peer group is a group of rows that are equivalent according to the window's <CodeLiteral>ORDER BY</CodeLiteral> clause. In <CodeLiteral>RANGE</CodeLiteral> mode, use of an offset option requires that there be exactly one <CodeLiteral>ORDER BY</CodeLiteral> column in the window definition. Then the frame contains those rows whose ordering column value is no more than offset less than (for <CodeLiteral>PRECEDING</CodeLiteral>) or more than (for <CodeLiteral>FOLLOWING</CodeLiteral>) the current row's ordering column value. In these cases the data type of the offset expression depends on the data type of the ordering column. For numeric ordering columns it is typically of the same type as the ordering column, but for datetime ordering columns it is an interval. In all these cases, the value of the offset must be non-null and non-negative. Also, while the offset does not have to be a simple constant, it cannot contain variables, aggregate functions, or window functions.\n The frame_exclusion option allows rows around the current row to be excluded from the frame, even if they would be included according to the frame start and frame end options. <CodeLiteral>EXCLUDE CURRENT ROW</CodeLiteral> excludes the current row from the frame. <CodeLiteral>EXCLUDE GROUP</CodeLiteral> excludes the current row and its ordering peers from the frame. <CodeLiteral>EXCLUDE TIES</CodeLiteral> excludes any peers of the current row from the frame, but not the current row itself. <CodeLiteral>EXCLUDE NO OTHERS</CodeLiteral> simply specifies explicitly the default behavior of not excluding the current row or its peers.\n Beware that the <CodeLiteral>ROWS</CodeLiteral> mode can produce unpredictable results if the <CodeLiteral>ORDER BY</CodeLiteral> ordering does not order the rows uniquely. The <CodeLiteral>RANGE</CodeLiteral> and <CodeLiteral>GROUPS</CodeLiteral> modes are designed to ensure that rows that are peers in the <CodeLiteral>ORDER BY</CodeLiteral> ordering are treated alike: all rows of a given peer group will be in the frame or excluded from it.\n The purpose of a <CodeLiteral>WINDOW</CodeLiteral> clause is to specify the behavior of window functions appearing in the query's SELECT List or <CodeLiteral>ORDER BY</CodeLiteral> Clause. These functions can reference the <CodeLiteral>WINDOW</CodeLiteral> clause entries by name in their <CodeLiteral>OVER</CodeLiteral> clauses. A <CodeLiteral>WINDOW</CodeLiteral> clause entry does not have to be referenced anywhere, however; if it is not used in the query it is simply ignored. It is possible to use window functions without any <CodeLiteral>WINDOW</CodeLiteral> clause at all, since a window function call can specify its window definition directly in its <CodeLiteral>OVER</CodeLiteral> clause. However, the <CodeLiteral>WINDOW</CodeLiteral> clause saves typing when the same window definition is needed for more than one window function.\n Currently, <CodeLiteral>FOR NO KEY UPDATE</CodeLiteral>, <CodeLiteral>FOR UPDATE</CodeLiteral>, <CodeLiteral>FOR SHARE</CodeLiteral> and <CodeLiteral>FOR KEY SHARE</CodeLiteral> cannot be specified with <CodeLiteral>WINDOW</CodeLiteral>.\n Window functions are described in detail in Section 3.5, Section 4.2.8, and Section 7.2.5. ",
        "detail": "[DESCRIPTION]: The optional <CodeLiteral>WINDOW</CodeLiteral> clause has the general form\n <code>WINDOW window_name AS ( window_definition ) [, ...]\n</code>\n where window_name is a name that can be referenced from <CodeLiteral>OVER</CodeLiteral> clauses or subsequent window definitions, and window_definition is\n <code>[ existing_window_name ]\n[ PARTITION BY expression [, ...] ]\n[ ORDER BY expression [ ASC | DESC | USING operator ] [ NULLS { FIRST | LAST } ] [, ...] ]\n[ frame_clause ]\n</code>\n If an existing_window_name is specified it must refer to an earlier entry in the <CodeLiteral>WINDOW</CodeLiteral> list; the new window copies its partitioning clause from that entry, as well as its ordering clause if any. In this case the new window cannot specify its own <CodeLiteral>PARTITION BY</CodeLiteral> clause, and it can specify <CodeLiteral>ORDER BY</CodeLiteral> only if the copied window does not have one. The new window always uses its own frame clause; the copied window must not specify a frame clause.\n The elements of the <CodeLiteral>PARTITION BY</CodeLiteral> list are interpreted in much the same fashion as elements of a <CodeLiteral>GROUP BY</CodeLiteral> Clause, except that they are always simple expressions and never the name or number of an output column. Another difference is that these expressions can contain aggregate function calls, which are not allowed in a regular <CodeLiteral>GROUP BY</CodeLiteral> clause. They are allowed here because windowing occurs after grouping and aggregation.\n Similarly, the elements of the <CodeLiteral>ORDER BY</CodeLiteral> list are interpreted in much the same fashion as elements of an <CodeLiteral>ORDER BY</CodeLiteral> Clause, except that the expressions are always taken as simple expressions and never the name or number of an output column.\n The optional frame_clause defines the window frame for window functions that depend on the frame (not all do). The window frame is a set of related rows for each row of the query (called the current row). The frame_clause can be one of\n <code>{ RANGE | ROWS | GROUPS } frame_start [ frame_exclusion ]\n{ RANGE | ROWS | GROUPS } BETWEEN frame_start AND frame_end [ frame_exclusion ]\n</code>\n where frame_start and frame_end can be one of\n <code>UNBOUNDED PRECEDING\noffset PRECEDING\nCURRENT ROW\noffset FOLLOWING\nUNBOUNDED FOLLOWING\n</code>\n and frame_exclusion can be one of\n <code>EXCLUDE CURRENT ROW\nEXCLUDE GROUP\nEXCLUDE TIES\nEXCLUDE NO OTHERS\n</code>\n If frame_end is omitted it defaults to <CodeLiteral>CURRENT ROW</CodeLiteral>. Restrictions are that frame_start cannot be <CodeLiteral>UNBOUNDED FOLLOWING</CodeLiteral>, frame_end cannot be <CodeLiteral>UNBOUNDED PRECEDING</CodeLiteral>, and the frame_end choice cannot appear earlier in the above list of frame_start and frame_end options than the frame_start choice does \u2014 for example <CodeLiteral>RANGE BETWEEN CURRENT ROW AND offset PRECEDING</CodeLiteral> is not allowed.\n The default framing option is <CodeLiteral>RANGE UNBOUNDED PRECEDING</CodeLiteral>, which is the same as <CodeLiteral>RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW</CodeLiteral>; it sets the frame to be all rows from the partition start up through the current row's last peer (a row that the window's <CodeLiteral>ORDER BY</CodeLiteral> clause considers equivalent to the current row; all rows are peers if there is no <CodeLiteral>ORDER BY</CodeLiteral>). In general, <CodeLiteral>UNBOUNDED PRECEDING</CodeLiteral> means that the frame starts with the first row of the partition, and similarly <CodeLiteral>UNBOUNDED FOLLOWING</CodeLiteral> means that the frame ends with the last row of the partition, regardless of <CodeLiteral>RANGE</CodeLiteral>, <CodeLiteral>ROWS</CodeLiteral> or <CodeLiteral>GROUPS</CodeLiteral> mode. In <CodeLiteral>ROWS</CodeLiteral> mode, <CodeLiteral>CURRENT ROW</CodeLiteral> means that the frame starts or ends with the current row; but in <CodeLiteral>RANGE</CodeLiteral> or <CodeLiteral>GROUPS</CodeLiteral> mode it means that the frame starts or ends with the current row's first or last peer in the <CodeLiteral>ORDER BY</CodeLiteral> ordering. The offset <CodeLiteral>PRECEDING</CodeLiteral> and offset <CodeLiteral>FOLLOWING</CodeLiteral> options vary in meaning depending on the frame mode. In <CodeLiteral>ROWS</CodeLiteral> mode, the offset is an integer indicating that the frame starts or ends that many rows before or after the current row. In <CodeLiteral>GROUPS</CodeLiteral> mode, the offset is an integer indicating that the frame starts or ends that many peer groups before or after the current row's peer group, where a peer group is a group of rows that are equivalent according to the window's <CodeLiteral>ORDER BY</CodeLiteral> clause. In <CodeLiteral>RANGE</CodeLiteral> mode, use of an offset option requires that there be exactly one <CodeLiteral>ORDER BY</CodeLiteral> column in the window definition. Then the frame contains those rows whose ordering column value is no more than offset less than (for <CodeLiteral>PRECEDING</CodeLiteral>) or more than (for <CodeLiteral>FOLLOWING</CodeLiteral>) the current row's ordering column value. In these cases the data type of the offset expression depends on the data type of the ordering column. For numeric ordering columns it is typically of the same type as the ordering column, but for datetime ordering columns it is an interval. In all these cases, the value of the offset must be non-null and non-negative. Also, while the offset does not have to be a simple constant, it cannot contain variables, aggregate functions, or window functions.\n The frame_exclusion option allows rows around the current row to be excluded from the frame, even if they would be included according to the frame start and frame end options. <CodeLiteral>EXCLUDE CURRENT ROW</CodeLiteral> excludes the current row from the frame. <CodeLiteral>EXCLUDE GROUP</CodeLiteral> excludes the current row and its ordering peers from the frame. <CodeLiteral>EXCLUDE TIES</CodeLiteral> excludes any peers of the current row from the frame, but not the current row itself. <CodeLiteral>EXCLUDE NO OTHERS</CodeLiteral> simply specifies explicitly the default behavior of not excluding the current row or its peers.\n Beware that the <CodeLiteral>ROWS</CodeLiteral> mode can produce unpredictable results if the <CodeLiteral>ORDER BY</CodeLiteral> ordering does not order the rows uniquely. The <CodeLiteral>RANGE</CodeLiteral> and <CodeLiteral>GROUPS</CodeLiteral> modes are designed to ensure that rows that are peers in the <CodeLiteral>ORDER BY</CodeLiteral> ordering are treated alike: all rows of a given peer group will be in the frame or excluded from it.\n The purpose of a <CodeLiteral>WINDOW</CodeLiteral> clause is to specify the behavior of window functions appearing in the query's SELECT List or <CodeLiteral>ORDER BY</CodeLiteral> Clause. These functions can reference the <CodeLiteral>WINDOW</CodeLiteral> clause entries by name in their <CodeLiteral>OVER</CodeLiteral> clauses. A <CodeLiteral>WINDOW</CodeLiteral> clause entry does not have to be referenced anywhere, however; if it is not used in the query it is simply ignored. It is possible to use window functions without any <CodeLiteral>WINDOW</CodeLiteral> clause at all, since a window function call can specify its window definition directly in its <CodeLiteral>OVER</CodeLiteral> clause. However, the <CodeLiteral>WINDOW</CodeLiteral> clause saves typing when the same window definition is needed for more than one window function.\n Currently, <CodeLiteral>FOR NO KEY UPDATE</CodeLiteral>, <CodeLiteral>FOR UPDATE</CodeLiteral>, <CodeLiteral>FOR SHARE</CodeLiteral> and <CodeLiteral>FOR KEY SHARE</CodeLiteral> cannot be specified with <CodeLiteral>WINDOW</CodeLiteral>.\n Window functions are described in detail in Section 3.5, Section 4.2.8, and Section 7.2.5. <sep>[DEMO]: SELECT employee_id, salary, AVG(salary) OVER my_window FROM employees WINDOW my_window AS (ORDER BY department_id ASC);",
        "example": [
            "SELECT employee_id, salary, AVG(salary) OVER my_window FROM employees WINDOW my_window AS (ORDER BY department_id ASC);"
        ],
        "link": []
    },
    {
        "type": "keyword",
        "keyword": "WINDOW window_name AS ( ORDER BY expression DESC ) ",
        "tree": " (window_clause WINDOW (window_definition_list (window_definition AS (window_specification (opt_sort_clause (sort_clause ORDER BY (sortby_list (sortby (opt_asc_desc DESC)))))))))",
        "description": "The optional <CodeLiteral>WINDOW</CodeLiteral> clause has the general form\n <code>WINDOW window_name AS ( window_definition ) [, ...]\n</code>\n where window_name is a name that can be referenced from <CodeLiteral>OVER</CodeLiteral> clauses or subsequent window definitions, and window_definition is\n <code>[ existing_window_name ]\n[ PARTITION BY expression [, ...] ]\n[ ORDER BY expression [ ASC | DESC | USING operator ] [ NULLS { FIRST | LAST } ] [, ...] ]\n[ frame_clause ]\n</code>\n If an existing_window_name is specified it must refer to an earlier entry in the <CodeLiteral>WINDOW</CodeLiteral> list; the new window copies its partitioning clause from that entry, as well as its ordering clause if any. In this case the new window cannot specify its own <CodeLiteral>PARTITION BY</CodeLiteral> clause, and it can specify <CodeLiteral>ORDER BY</CodeLiteral> only if the copied window does not have one. The new window always uses its own frame clause; the copied window must not specify a frame clause.\n The elements of the <CodeLiteral>PARTITION BY</CodeLiteral> list are interpreted in much the same fashion as elements of a <CodeLiteral>GROUP BY</CodeLiteral> Clause, except that they are always simple expressions and never the name or number of an output column. Another difference is that these expressions can contain aggregate function calls, which are not allowed in a regular <CodeLiteral>GROUP BY</CodeLiteral> clause. They are allowed here because windowing occurs after grouping and aggregation.\n Similarly, the elements of the <CodeLiteral>ORDER BY</CodeLiteral> list are interpreted in much the same fashion as elements of an <CodeLiteral>ORDER BY</CodeLiteral> Clause, except that the expressions are always taken as simple expressions and never the name or number of an output column.\n The optional frame_clause defines the window frame for window functions that depend on the frame (not all do). The window frame is a set of related rows for each row of the query (called the current row). The frame_clause can be one of\n <code>{ RANGE | ROWS | GROUPS } frame_start [ frame_exclusion ]\n{ RANGE | ROWS | GROUPS } BETWEEN frame_start AND frame_end [ frame_exclusion ]\n</code>\n where frame_start and frame_end can be one of\n <code>UNBOUNDED PRECEDING\noffset PRECEDING\nCURRENT ROW\noffset FOLLOWING\nUNBOUNDED FOLLOWING\n</code>\n and frame_exclusion can be one of\n <code>EXCLUDE CURRENT ROW\nEXCLUDE GROUP\nEXCLUDE TIES\nEXCLUDE NO OTHERS\n</code>\n If frame_end is omitted it defaults to <CodeLiteral>CURRENT ROW</CodeLiteral>. Restrictions are that frame_start cannot be <CodeLiteral>UNBOUNDED FOLLOWING</CodeLiteral>, frame_end cannot be <CodeLiteral>UNBOUNDED PRECEDING</CodeLiteral>, and the frame_end choice cannot appear earlier in the above list of frame_start and frame_end options than the frame_start choice does \u2014 for example <CodeLiteral>RANGE BETWEEN CURRENT ROW AND offset PRECEDING</CodeLiteral> is not allowed.\n The default framing option is <CodeLiteral>RANGE UNBOUNDED PRECEDING</CodeLiteral>, which is the same as <CodeLiteral>RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW</CodeLiteral>; it sets the frame to be all rows from the partition start up through the current row's last peer (a row that the window's <CodeLiteral>ORDER BY</CodeLiteral> clause considers equivalent to the current row; all rows are peers if there is no <CodeLiteral>ORDER BY</CodeLiteral>). In general, <CodeLiteral>UNBOUNDED PRECEDING</CodeLiteral> means that the frame starts with the first row of the partition, and similarly <CodeLiteral>UNBOUNDED FOLLOWING</CodeLiteral> means that the frame ends with the last row of the partition, regardless of <CodeLiteral>RANGE</CodeLiteral>, <CodeLiteral>ROWS</CodeLiteral> or <CodeLiteral>GROUPS</CodeLiteral> mode. In <CodeLiteral>ROWS</CodeLiteral> mode, <CodeLiteral>CURRENT ROW</CodeLiteral> means that the frame starts or ends with the current row; but in <CodeLiteral>RANGE</CodeLiteral> or <CodeLiteral>GROUPS</CodeLiteral> mode it means that the frame starts or ends with the current row's first or last peer in the <CodeLiteral>ORDER BY</CodeLiteral> ordering. The offset <CodeLiteral>PRECEDING</CodeLiteral> and offset <CodeLiteral>FOLLOWING</CodeLiteral> options vary in meaning depending on the frame mode. In <CodeLiteral>ROWS</CodeLiteral> mode, the offset is an integer indicating that the frame starts or ends that many rows before or after the current row. In <CodeLiteral>GROUPS</CodeLiteral> mode, the offset is an integer indicating that the frame starts or ends that many peer groups before or after the current row's peer group, where a peer group is a group of rows that are equivalent according to the window's <CodeLiteral>ORDER BY</CodeLiteral> clause. In <CodeLiteral>RANGE</CodeLiteral> mode, use of an offset option requires that there be exactly one <CodeLiteral>ORDER BY</CodeLiteral> column in the window definition. Then the frame contains those rows whose ordering column value is no more than offset less than (for <CodeLiteral>PRECEDING</CodeLiteral>) or more than (for <CodeLiteral>FOLLOWING</CodeLiteral>) the current row's ordering column value. In these cases the data type of the offset expression depends on the data type of the ordering column. For numeric ordering columns it is typically of the same type as the ordering column, but for datetime ordering columns it is an interval. In all these cases, the value of the offset must be non-null and non-negative. Also, while the offset does not have to be a simple constant, it cannot contain variables, aggregate functions, or window functions.\n The frame_exclusion option allows rows around the current row to be excluded from the frame, even if they would be included according to the frame start and frame end options. <CodeLiteral>EXCLUDE CURRENT ROW</CodeLiteral> excludes the current row from the frame. <CodeLiteral>EXCLUDE GROUP</CodeLiteral> excludes the current row and its ordering peers from the frame. <CodeLiteral>EXCLUDE TIES</CodeLiteral> excludes any peers of the current row from the frame, but not the current row itself. <CodeLiteral>EXCLUDE NO OTHERS</CodeLiteral> simply specifies explicitly the default behavior of not excluding the current row or its peers.\n Beware that the <CodeLiteral>ROWS</CodeLiteral> mode can produce unpredictable results if the <CodeLiteral>ORDER BY</CodeLiteral> ordering does not order the rows uniquely. The <CodeLiteral>RANGE</CodeLiteral> and <CodeLiteral>GROUPS</CodeLiteral> modes are designed to ensure that rows that are peers in the <CodeLiteral>ORDER BY</CodeLiteral> ordering are treated alike: all rows of a given peer group will be in the frame or excluded from it.\n The purpose of a <CodeLiteral>WINDOW</CodeLiteral> clause is to specify the behavior of window functions appearing in the query's SELECT List or <CodeLiteral>ORDER BY</CodeLiteral> Clause. These functions can reference the <CodeLiteral>WINDOW</CodeLiteral> clause entries by name in their <CodeLiteral>OVER</CodeLiteral> clauses. A <CodeLiteral>WINDOW</CodeLiteral> clause entry does not have to be referenced anywhere, however; if it is not used in the query it is simply ignored. It is possible to use window functions without any <CodeLiteral>WINDOW</CodeLiteral> clause at all, since a window function call can specify its window definition directly in its <CodeLiteral>OVER</CodeLiteral> clause. However, the <CodeLiteral>WINDOW</CodeLiteral> clause saves typing when the same window definition is needed for more than one window function.\n Currently, <CodeLiteral>FOR NO KEY UPDATE</CodeLiteral>, <CodeLiteral>FOR UPDATE</CodeLiteral>, <CodeLiteral>FOR SHARE</CodeLiteral> and <CodeLiteral>FOR KEY SHARE</CodeLiteral> cannot be specified with <CodeLiteral>WINDOW</CodeLiteral>.\n Window functions are described in detail in Section 3.5, Section 4.2.8, and Section 7.2.5. ",
        "detail": "[DESCRIPTION]: The optional <CodeLiteral>WINDOW</CodeLiteral> clause has the general form\n <code>WINDOW window_name AS ( window_definition ) [, ...]\n</code>\n where window_name is a name that can be referenced from <CodeLiteral>OVER</CodeLiteral> clauses or subsequent window definitions, and window_definition is\n <code>[ existing_window_name ]\n[ PARTITION BY expression [, ...] ]\n[ ORDER BY expression [ ASC | DESC | USING operator ] [ NULLS { FIRST | LAST } ] [, ...] ]\n[ frame_clause ]\n</code>\n If an existing_window_name is specified it must refer to an earlier entry in the <CodeLiteral>WINDOW</CodeLiteral> list; the new window copies its partitioning clause from that entry, as well as its ordering clause if any. In this case the new window cannot specify its own <CodeLiteral>PARTITION BY</CodeLiteral> clause, and it can specify <CodeLiteral>ORDER BY</CodeLiteral> only if the copied window does not have one. The new window always uses its own frame clause; the copied window must not specify a frame clause.\n The elements of the <CodeLiteral>PARTITION BY</CodeLiteral> list are interpreted in much the same fashion as elements of a <CodeLiteral>GROUP BY</CodeLiteral> Clause, except that they are always simple expressions and never the name or number of an output column. Another difference is that these expressions can contain aggregate function calls, which are not allowed in a regular <CodeLiteral>GROUP BY</CodeLiteral> clause. They are allowed here because windowing occurs after grouping and aggregation.\n Similarly, the elements of the <CodeLiteral>ORDER BY</CodeLiteral> list are interpreted in much the same fashion as elements of an <CodeLiteral>ORDER BY</CodeLiteral> Clause, except that the expressions are always taken as simple expressions and never the name or number of an output column.\n The optional frame_clause defines the window frame for window functions that depend on the frame (not all do). The window frame is a set of related rows for each row of the query (called the current row). The frame_clause can be one of\n <code>{ RANGE | ROWS | GROUPS } frame_start [ frame_exclusion ]\n{ RANGE | ROWS | GROUPS } BETWEEN frame_start AND frame_end [ frame_exclusion ]\n</code>\n where frame_start and frame_end can be one of\n <code>UNBOUNDED PRECEDING\noffset PRECEDING\nCURRENT ROW\noffset FOLLOWING\nUNBOUNDED FOLLOWING\n</code>\n and frame_exclusion can be one of\n <code>EXCLUDE CURRENT ROW\nEXCLUDE GROUP\nEXCLUDE TIES\nEXCLUDE NO OTHERS\n</code>\n If frame_end is omitted it defaults to <CodeLiteral>CURRENT ROW</CodeLiteral>. Restrictions are that frame_start cannot be <CodeLiteral>UNBOUNDED FOLLOWING</CodeLiteral>, frame_end cannot be <CodeLiteral>UNBOUNDED PRECEDING</CodeLiteral>, and the frame_end choice cannot appear earlier in the above list of frame_start and frame_end options than the frame_start choice does \u2014 for example <CodeLiteral>RANGE BETWEEN CURRENT ROW AND offset PRECEDING</CodeLiteral> is not allowed.\n The default framing option is <CodeLiteral>RANGE UNBOUNDED PRECEDING</CodeLiteral>, which is the same as <CodeLiteral>RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW</CodeLiteral>; it sets the frame to be all rows from the partition start up through the current row's last peer (a row that the window's <CodeLiteral>ORDER BY</CodeLiteral> clause considers equivalent to the current row; all rows are peers if there is no <CodeLiteral>ORDER BY</CodeLiteral>). In general, <CodeLiteral>UNBOUNDED PRECEDING</CodeLiteral> means that the frame starts with the first row of the partition, and similarly <CodeLiteral>UNBOUNDED FOLLOWING</CodeLiteral> means that the frame ends with the last row of the partition, regardless of <CodeLiteral>RANGE</CodeLiteral>, <CodeLiteral>ROWS</CodeLiteral> or <CodeLiteral>GROUPS</CodeLiteral> mode. In <CodeLiteral>ROWS</CodeLiteral> mode, <CodeLiteral>CURRENT ROW</CodeLiteral> means that the frame starts or ends with the current row; but in <CodeLiteral>RANGE</CodeLiteral> or <CodeLiteral>GROUPS</CodeLiteral> mode it means that the frame starts or ends with the current row's first or last peer in the <CodeLiteral>ORDER BY</CodeLiteral> ordering. The offset <CodeLiteral>PRECEDING</CodeLiteral> and offset <CodeLiteral>FOLLOWING</CodeLiteral> options vary in meaning depending on the frame mode. In <CodeLiteral>ROWS</CodeLiteral> mode, the offset is an integer indicating that the frame starts or ends that many rows before or after the current row. In <CodeLiteral>GROUPS</CodeLiteral> mode, the offset is an integer indicating that the frame starts or ends that many peer groups before or after the current row's peer group, where a peer group is a group of rows that are equivalent according to the window's <CodeLiteral>ORDER BY</CodeLiteral> clause. In <CodeLiteral>RANGE</CodeLiteral> mode, use of an offset option requires that there be exactly one <CodeLiteral>ORDER BY</CodeLiteral> column in the window definition. Then the frame contains those rows whose ordering column value is no more than offset less than (for <CodeLiteral>PRECEDING</CodeLiteral>) or more than (for <CodeLiteral>FOLLOWING</CodeLiteral>) the current row's ordering column value. In these cases the data type of the offset expression depends on the data type of the ordering column. For numeric ordering columns it is typically of the same type as the ordering column, but for datetime ordering columns it is an interval. In all these cases, the value of the offset must be non-null and non-negative. Also, while the offset does not have to be a simple constant, it cannot contain variables, aggregate functions, or window functions.\n The frame_exclusion option allows rows around the current row to be excluded from the frame, even if they would be included according to the frame start and frame end options. <CodeLiteral>EXCLUDE CURRENT ROW</CodeLiteral> excludes the current row from the frame. <CodeLiteral>EXCLUDE GROUP</CodeLiteral> excludes the current row and its ordering peers from the frame. <CodeLiteral>EXCLUDE TIES</CodeLiteral> excludes any peers of the current row from the frame, but not the current row itself. <CodeLiteral>EXCLUDE NO OTHERS</CodeLiteral> simply specifies explicitly the default behavior of not excluding the current row or its peers.\n Beware that the <CodeLiteral>ROWS</CodeLiteral> mode can produce unpredictable results if the <CodeLiteral>ORDER BY</CodeLiteral> ordering does not order the rows uniquely. The <CodeLiteral>RANGE</CodeLiteral> and <CodeLiteral>GROUPS</CodeLiteral> modes are designed to ensure that rows that are peers in the <CodeLiteral>ORDER BY</CodeLiteral> ordering are treated alike: all rows of a given peer group will be in the frame or excluded from it.\n The purpose of a <CodeLiteral>WINDOW</CodeLiteral> clause is to specify the behavior of window functions appearing in the query's SELECT List or <CodeLiteral>ORDER BY</CodeLiteral> Clause. These functions can reference the <CodeLiteral>WINDOW</CodeLiteral> clause entries by name in their <CodeLiteral>OVER</CodeLiteral> clauses. A <CodeLiteral>WINDOW</CodeLiteral> clause entry does not have to be referenced anywhere, however; if it is not used in the query it is simply ignored. It is possible to use window functions without any <CodeLiteral>WINDOW</CodeLiteral> clause at all, since a window function call can specify its window definition directly in its <CodeLiteral>OVER</CodeLiteral> clause. However, the <CodeLiteral>WINDOW</CodeLiteral> clause saves typing when the same window definition is needed for more than one window function.\n Currently, <CodeLiteral>FOR NO KEY UPDATE</CodeLiteral>, <CodeLiteral>FOR UPDATE</CodeLiteral>, <CodeLiteral>FOR SHARE</CodeLiteral> and <CodeLiteral>FOR KEY SHARE</CodeLiteral> cannot be specified with <CodeLiteral>WINDOW</CodeLiteral>.\n Window functions are described in detail in Section 3.5, Section 4.2.8, and Section 7.2.5. <sep>[DEMO]: SELECT emp_id, salary, AVG(salary) OVER w AS avg_salary FROM employees WINDOW w AS (ORDER BY salary DESC)",
        "example": [
            "SELECT emp_id, salary, AVG(salary) OVER w AS avg_salary FROM employees WINDOW w AS (ORDER BY salary DESC)"
        ],
        "link": []
    },
    {
        "type": "keyword",
        "keyword": "WINDOW window_name AS ( ORDER BY expression USING operator ) ",
        "tree": " (window_clause WINDOW (window_definition_list (window_definition AS (window_specification (opt_sort_clause (sort_clause ORDER BY (sortby_list (sortby USING))))))))",
        "description": "The optional <CodeLiteral>WINDOW</CodeLiteral> clause has the general form\n <code>WINDOW window_name AS ( window_definition ) [, ...]\n</code>\n where window_name is a name that can be referenced from <CodeLiteral>OVER</CodeLiteral> clauses or subsequent window definitions, and window_definition is\n <code>[ existing_window_name ]\n[ PARTITION BY expression [, ...] ]\n[ ORDER BY expression [ ASC | DESC | USING operator ] [ NULLS { FIRST | LAST } ] [, ...] ]\n[ frame_clause ]\n</code>\n If an existing_window_name is specified it must refer to an earlier entry in the <CodeLiteral>WINDOW</CodeLiteral> list; the new window copies its partitioning clause from that entry, as well as its ordering clause if any. In this case the new window cannot specify its own <CodeLiteral>PARTITION BY</CodeLiteral> clause, and it can specify <CodeLiteral>ORDER BY</CodeLiteral> only if the copied window does not have one. The new window always uses its own frame clause; the copied window must not specify a frame clause.\n The elements of the <CodeLiteral>PARTITION BY</CodeLiteral> list are interpreted in much the same fashion as elements of a <CodeLiteral>GROUP BY</CodeLiteral> Clause, except that they are always simple expressions and never the name or number of an output column. Another difference is that these expressions can contain aggregate function calls, which are not allowed in a regular <CodeLiteral>GROUP BY</CodeLiteral> clause. They are allowed here because windowing occurs after grouping and aggregation.\n Similarly, the elements of the <CodeLiteral>ORDER BY</CodeLiteral> list are interpreted in much the same fashion as elements of an <CodeLiteral>ORDER BY</CodeLiteral> Clause, except that the expressions are always taken as simple expressions and never the name or number of an output column.\n The optional frame_clause defines the window frame for window functions that depend on the frame (not all do). The window frame is a set of related rows for each row of the query (called the current row). The frame_clause can be one of\n <code>{ RANGE | ROWS | GROUPS } frame_start [ frame_exclusion ]\n{ RANGE | ROWS | GROUPS } BETWEEN frame_start AND frame_end [ frame_exclusion ]\n</code>\n where frame_start and frame_end can be one of\n <code>UNBOUNDED PRECEDING\noffset PRECEDING\nCURRENT ROW\noffset FOLLOWING\nUNBOUNDED FOLLOWING\n</code>\n and frame_exclusion can be one of\n <code>EXCLUDE CURRENT ROW\nEXCLUDE GROUP\nEXCLUDE TIES\nEXCLUDE NO OTHERS\n</code>\n If frame_end is omitted it defaults to <CodeLiteral>CURRENT ROW</CodeLiteral>. Restrictions are that frame_start cannot be <CodeLiteral>UNBOUNDED FOLLOWING</CodeLiteral>, frame_end cannot be <CodeLiteral>UNBOUNDED PRECEDING</CodeLiteral>, and the frame_end choice cannot appear earlier in the above list of frame_start and frame_end options than the frame_start choice does \u2014 for example <CodeLiteral>RANGE BETWEEN CURRENT ROW AND offset PRECEDING</CodeLiteral> is not allowed.\n The default framing option is <CodeLiteral>RANGE UNBOUNDED PRECEDING</CodeLiteral>, which is the same as <CodeLiteral>RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW</CodeLiteral>; it sets the frame to be all rows from the partition start up through the current row's last peer (a row that the window's <CodeLiteral>ORDER BY</CodeLiteral> clause considers equivalent to the current row; all rows are peers if there is no <CodeLiteral>ORDER BY</CodeLiteral>). In general, <CodeLiteral>UNBOUNDED PRECEDING</CodeLiteral> means that the frame starts with the first row of the partition, and similarly <CodeLiteral>UNBOUNDED FOLLOWING</CodeLiteral> means that the frame ends with the last row of the partition, regardless of <CodeLiteral>RANGE</CodeLiteral>, <CodeLiteral>ROWS</CodeLiteral> or <CodeLiteral>GROUPS</CodeLiteral> mode. In <CodeLiteral>ROWS</CodeLiteral> mode, <CodeLiteral>CURRENT ROW</CodeLiteral> means that the frame starts or ends with the current row; but in <CodeLiteral>RANGE</CodeLiteral> or <CodeLiteral>GROUPS</CodeLiteral> mode it means that the frame starts or ends with the current row's first or last peer in the <CodeLiteral>ORDER BY</CodeLiteral> ordering. The offset <CodeLiteral>PRECEDING</CodeLiteral> and offset <CodeLiteral>FOLLOWING</CodeLiteral> options vary in meaning depending on the frame mode. In <CodeLiteral>ROWS</CodeLiteral> mode, the offset is an integer indicating that the frame starts or ends that many rows before or after the current row. In <CodeLiteral>GROUPS</CodeLiteral> mode, the offset is an integer indicating that the frame starts or ends that many peer groups before or after the current row's peer group, where a peer group is a group of rows that are equivalent according to the window's <CodeLiteral>ORDER BY</CodeLiteral> clause. In <CodeLiteral>RANGE</CodeLiteral> mode, use of an offset option requires that there be exactly one <CodeLiteral>ORDER BY</CodeLiteral> column in the window definition. Then the frame contains those rows whose ordering column value is no more than offset less than (for <CodeLiteral>PRECEDING</CodeLiteral>) or more than (for <CodeLiteral>FOLLOWING</CodeLiteral>) the current row's ordering column value. In these cases the data type of the offset expression depends on the data type of the ordering column. For numeric ordering columns it is typically of the same type as the ordering column, but for datetime ordering columns it is an interval. In all these cases, the value of the offset must be non-null and non-negative. Also, while the offset does not have to be a simple constant, it cannot contain variables, aggregate functions, or window functions.\n The frame_exclusion option allows rows around the current row to be excluded from the frame, even if they would be included according to the frame start and frame end options. <CodeLiteral>EXCLUDE CURRENT ROW</CodeLiteral> excludes the current row from the frame. <CodeLiteral>EXCLUDE GROUP</CodeLiteral> excludes the current row and its ordering peers from the frame. <CodeLiteral>EXCLUDE TIES</CodeLiteral> excludes any peers of the current row from the frame, but not the current row itself. <CodeLiteral>EXCLUDE NO OTHERS</CodeLiteral> simply specifies explicitly the default behavior of not excluding the current row or its peers.\n Beware that the <CodeLiteral>ROWS</CodeLiteral> mode can produce unpredictable results if the <CodeLiteral>ORDER BY</CodeLiteral> ordering does not order the rows uniquely. The <CodeLiteral>RANGE</CodeLiteral> and <CodeLiteral>GROUPS</CodeLiteral> modes are designed to ensure that rows that are peers in the <CodeLiteral>ORDER BY</CodeLiteral> ordering are treated alike: all rows of a given peer group will be in the frame or excluded from it.\n The purpose of a <CodeLiteral>WINDOW</CodeLiteral> clause is to specify the behavior of window functions appearing in the query's SELECT List or <CodeLiteral>ORDER BY</CodeLiteral> Clause. These functions can reference the <CodeLiteral>WINDOW</CodeLiteral> clause entries by name in their <CodeLiteral>OVER</CodeLiteral> clauses. A <CodeLiteral>WINDOW</CodeLiteral> clause entry does not have to be referenced anywhere, however; if it is not used in the query it is simply ignored. It is possible to use window functions without any <CodeLiteral>WINDOW</CodeLiteral> clause at all, since a window function call can specify its window definition directly in its <CodeLiteral>OVER</CodeLiteral> clause. However, the <CodeLiteral>WINDOW</CodeLiteral> clause saves typing when the same window definition is needed for more than one window function.\n Currently, <CodeLiteral>FOR NO KEY UPDATE</CodeLiteral>, <CodeLiteral>FOR UPDATE</CodeLiteral>, <CodeLiteral>FOR SHARE</CodeLiteral> and <CodeLiteral>FOR KEY SHARE</CodeLiteral> cannot be specified with <CodeLiteral>WINDOW</CodeLiteral>.\n Window functions are described in detail in Section 3.5, Section 4.2.8, and Section 7.2.5. ",
        "detail": "[DESCRIPTION]: The optional <CodeLiteral>WINDOW</CodeLiteral> clause has the general form\n <code>WINDOW window_name AS ( window_definition ) [, ...]\n</code>\n where window_name is a name that can be referenced from <CodeLiteral>OVER</CodeLiteral> clauses or subsequent window definitions, and window_definition is\n <code>[ existing_window_name ]\n[ PARTITION BY expression [, ...] ]\n[ ORDER BY expression [ ASC | DESC | USING operator ] [ NULLS { FIRST | LAST } ] [, ...] ]\n[ frame_clause ]\n</code>\n If an existing_window_name is specified it must refer to an earlier entry in the <CodeLiteral>WINDOW</CodeLiteral> list; the new window copies its partitioning clause from that entry, as well as its ordering clause if any. In this case the new window cannot specify its own <CodeLiteral>PARTITION BY</CodeLiteral> clause, and it can specify <CodeLiteral>ORDER BY</CodeLiteral> only if the copied window does not have one. The new window always uses its own frame clause; the copied window must not specify a frame clause.\n The elements of the <CodeLiteral>PARTITION BY</CodeLiteral> list are interpreted in much the same fashion as elements of a <CodeLiteral>GROUP BY</CodeLiteral> Clause, except that they are always simple expressions and never the name or number of an output column. Another difference is that these expressions can contain aggregate function calls, which are not allowed in a regular <CodeLiteral>GROUP BY</CodeLiteral> clause. They are allowed here because windowing occurs after grouping and aggregation.\n Similarly, the elements of the <CodeLiteral>ORDER BY</CodeLiteral> list are interpreted in much the same fashion as elements of an <CodeLiteral>ORDER BY</CodeLiteral> Clause, except that the expressions are always taken as simple expressions and never the name or number of an output column.\n The optional frame_clause defines the window frame for window functions that depend on the frame (not all do). The window frame is a set of related rows for each row of the query (called the current row). The frame_clause can be one of\n <code>{ RANGE | ROWS | GROUPS } frame_start [ frame_exclusion ]\n{ RANGE | ROWS | GROUPS } BETWEEN frame_start AND frame_end [ frame_exclusion ]\n</code>\n where frame_start and frame_end can be one of\n <code>UNBOUNDED PRECEDING\noffset PRECEDING\nCURRENT ROW\noffset FOLLOWING\nUNBOUNDED FOLLOWING\n</code>\n and frame_exclusion can be one of\n <code>EXCLUDE CURRENT ROW\nEXCLUDE GROUP\nEXCLUDE TIES\nEXCLUDE NO OTHERS\n</code>\n If frame_end is omitted it defaults to <CodeLiteral>CURRENT ROW</CodeLiteral>. Restrictions are that frame_start cannot be <CodeLiteral>UNBOUNDED FOLLOWING</CodeLiteral>, frame_end cannot be <CodeLiteral>UNBOUNDED PRECEDING</CodeLiteral>, and the frame_end choice cannot appear earlier in the above list of frame_start and frame_end options than the frame_start choice does \u2014 for example <CodeLiteral>RANGE BETWEEN CURRENT ROW AND offset PRECEDING</CodeLiteral> is not allowed.\n The default framing option is <CodeLiteral>RANGE UNBOUNDED PRECEDING</CodeLiteral>, which is the same as <CodeLiteral>RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW</CodeLiteral>; it sets the frame to be all rows from the partition start up through the current row's last peer (a row that the window's <CodeLiteral>ORDER BY</CodeLiteral> clause considers equivalent to the current row; all rows are peers if there is no <CodeLiteral>ORDER BY</CodeLiteral>). In general, <CodeLiteral>UNBOUNDED PRECEDING</CodeLiteral> means that the frame starts with the first row of the partition, and similarly <CodeLiteral>UNBOUNDED FOLLOWING</CodeLiteral> means that the frame ends with the last row of the partition, regardless of <CodeLiteral>RANGE</CodeLiteral>, <CodeLiteral>ROWS</CodeLiteral> or <CodeLiteral>GROUPS</CodeLiteral> mode. In <CodeLiteral>ROWS</CodeLiteral> mode, <CodeLiteral>CURRENT ROW</CodeLiteral> means that the frame starts or ends with the current row; but in <CodeLiteral>RANGE</CodeLiteral> or <CodeLiteral>GROUPS</CodeLiteral> mode it means that the frame starts or ends with the current row's first or last peer in the <CodeLiteral>ORDER BY</CodeLiteral> ordering. The offset <CodeLiteral>PRECEDING</CodeLiteral> and offset <CodeLiteral>FOLLOWING</CodeLiteral> options vary in meaning depending on the frame mode. In <CodeLiteral>ROWS</CodeLiteral> mode, the offset is an integer indicating that the frame starts or ends that many rows before or after the current row. In <CodeLiteral>GROUPS</CodeLiteral> mode, the offset is an integer indicating that the frame starts or ends that many peer groups before or after the current row's peer group, where a peer group is a group of rows that are equivalent according to the window's <CodeLiteral>ORDER BY</CodeLiteral> clause. In <CodeLiteral>RANGE</CodeLiteral> mode, use of an offset option requires that there be exactly one <CodeLiteral>ORDER BY</CodeLiteral> column in the window definition. Then the frame contains those rows whose ordering column value is no more than offset less than (for <CodeLiteral>PRECEDING</CodeLiteral>) or more than (for <CodeLiteral>FOLLOWING</CodeLiteral>) the current row's ordering column value. In these cases the data type of the offset expression depends on the data type of the ordering column. For numeric ordering columns it is typically of the same type as the ordering column, but for datetime ordering columns it is an interval. In all these cases, the value of the offset must be non-null and non-negative. Also, while the offset does not have to be a simple constant, it cannot contain variables, aggregate functions, or window functions.\n The frame_exclusion option allows rows around the current row to be excluded from the frame, even if they would be included according to the frame start and frame end options. <CodeLiteral>EXCLUDE CURRENT ROW</CodeLiteral> excludes the current row from the frame. <CodeLiteral>EXCLUDE GROUP</CodeLiteral> excludes the current row and its ordering peers from the frame. <CodeLiteral>EXCLUDE TIES</CodeLiteral> excludes any peers of the current row from the frame, but not the current row itself. <CodeLiteral>EXCLUDE NO OTHERS</CodeLiteral> simply specifies explicitly the default behavior of not excluding the current row or its peers.\n Beware that the <CodeLiteral>ROWS</CodeLiteral> mode can produce unpredictable results if the <CodeLiteral>ORDER BY</CodeLiteral> ordering does not order the rows uniquely. The <CodeLiteral>RANGE</CodeLiteral> and <CodeLiteral>GROUPS</CodeLiteral> modes are designed to ensure that rows that are peers in the <CodeLiteral>ORDER BY</CodeLiteral> ordering are treated alike: all rows of a given peer group will be in the frame or excluded from it.\n The purpose of a <CodeLiteral>WINDOW</CodeLiteral> clause is to specify the behavior of window functions appearing in the query's SELECT List or <CodeLiteral>ORDER BY</CodeLiteral> Clause. These functions can reference the <CodeLiteral>WINDOW</CodeLiteral> clause entries by name in their <CodeLiteral>OVER</CodeLiteral> clauses. A <CodeLiteral>WINDOW</CodeLiteral> clause entry does not have to be referenced anywhere, however; if it is not used in the query it is simply ignored. It is possible to use window functions without any <CodeLiteral>WINDOW</CodeLiteral> clause at all, since a window function call can specify its window definition directly in its <CodeLiteral>OVER</CodeLiteral> clause. However, the <CodeLiteral>WINDOW</CodeLiteral> clause saves typing when the same window definition is needed for more than one window function.\n Currently, <CodeLiteral>FOR NO KEY UPDATE</CodeLiteral>, <CodeLiteral>FOR UPDATE</CodeLiteral>, <CodeLiteral>FOR SHARE</CodeLiteral> and <CodeLiteral>FOR KEY SHARE</CodeLiteral> cannot be specified with <CodeLiteral>WINDOW</CodeLiteral>.\n Window functions are described in detail in Section 3.5, Section 4.2.8, and Section 7.2.5. <sep>[DEMO]: SELECT employee_id, department_id, salary, AVG(salary) OVER w AS avg_salary FROM employees WINDOW w AS (ORDER BY department_id USING >) ORDER BY department_id;",
        "example": [
            "SELECT employee_id, department_id, salary, AVG(salary) OVER w AS avg_salary FROM employees WINDOW w AS (ORDER BY department_id USING >) ORDER BY department_id;"
        ],
        "link": []
    },
    {
        "type": "keyword",
        "keyword": "WINDOW window_name AS ( ORDER BY expression NULLS FIRST ) ",
        "tree": " (window_clause WINDOW (window_definition_list (window_definition AS (window_specification (opt_sort_clause (sort_clause ORDER BY (sortby_list (sortby (opt_nulls_order NULLS FIRST)))))))))",
        "description": "The optional <CodeLiteral>WINDOW</CodeLiteral> clause has the general form\n <code>WINDOW window_name AS ( window_definition ) [, ...]\n</code>\n where window_name is a name that can be referenced from <CodeLiteral>OVER</CodeLiteral> clauses or subsequent window definitions, and window_definition is\n <code>[ existing_window_name ]\n[ PARTITION BY expression [, ...] ]\n[ ORDER BY expression [ ASC | DESC | USING operator ] [ NULLS { FIRST | LAST } ] [, ...] ]\n[ frame_clause ]\n</code>\n If an existing_window_name is specified it must refer to an earlier entry in the <CodeLiteral>WINDOW</CodeLiteral> list; the new window copies its partitioning clause from that entry, as well as its ordering clause if any. In this case the new window cannot specify its own <CodeLiteral>PARTITION BY</CodeLiteral> clause, and it can specify <CodeLiteral>ORDER BY</CodeLiteral> only if the copied window does not have one. The new window always uses its own frame clause; the copied window must not specify a frame clause.\n The elements of the <CodeLiteral>PARTITION BY</CodeLiteral> list are interpreted in much the same fashion as elements of a <CodeLiteral>GROUP BY</CodeLiteral> Clause, except that they are always simple expressions and never the name or number of an output column. Another difference is that these expressions can contain aggregate function calls, which are not allowed in a regular <CodeLiteral>GROUP BY</CodeLiteral> clause. They are allowed here because windowing occurs after grouping and aggregation.\n Similarly, the elements of the <CodeLiteral>ORDER BY</CodeLiteral> list are interpreted in much the same fashion as elements of an <CodeLiteral>ORDER BY</CodeLiteral> Clause, except that the expressions are always taken as simple expressions and never the name or number of an output column.\n The optional frame_clause defines the window frame for window functions that depend on the frame (not all do). The window frame is a set of related rows for each row of the query (called the current row). The frame_clause can be one of\n <code>{ RANGE | ROWS | GROUPS } frame_start [ frame_exclusion ]\n{ RANGE | ROWS | GROUPS } BETWEEN frame_start AND frame_end [ frame_exclusion ]\n</code>\n where frame_start and frame_end can be one of\n <code>UNBOUNDED PRECEDING\noffset PRECEDING\nCURRENT ROW\noffset FOLLOWING\nUNBOUNDED FOLLOWING\n</code>\n and frame_exclusion can be one of\n <code>EXCLUDE CURRENT ROW\nEXCLUDE GROUP\nEXCLUDE TIES\nEXCLUDE NO OTHERS\n</code>\n If frame_end is omitted it defaults to <CodeLiteral>CURRENT ROW</CodeLiteral>. Restrictions are that frame_start cannot be <CodeLiteral>UNBOUNDED FOLLOWING</CodeLiteral>, frame_end cannot be <CodeLiteral>UNBOUNDED PRECEDING</CodeLiteral>, and the frame_end choice cannot appear earlier in the above list of frame_start and frame_end options than the frame_start choice does \u2014 for example <CodeLiteral>RANGE BETWEEN CURRENT ROW AND offset PRECEDING</CodeLiteral> is not allowed.\n The default framing option is <CodeLiteral>RANGE UNBOUNDED PRECEDING</CodeLiteral>, which is the same as <CodeLiteral>RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW</CodeLiteral>; it sets the frame to be all rows from the partition start up through the current row's last peer (a row that the window's <CodeLiteral>ORDER BY</CodeLiteral> clause considers equivalent to the current row; all rows are peers if there is no <CodeLiteral>ORDER BY</CodeLiteral>). In general, <CodeLiteral>UNBOUNDED PRECEDING</CodeLiteral> means that the frame starts with the first row of the partition, and similarly <CodeLiteral>UNBOUNDED FOLLOWING</CodeLiteral> means that the frame ends with the last row of the partition, regardless of <CodeLiteral>RANGE</CodeLiteral>, <CodeLiteral>ROWS</CodeLiteral> or <CodeLiteral>GROUPS</CodeLiteral> mode. In <CodeLiteral>ROWS</CodeLiteral> mode, <CodeLiteral>CURRENT ROW</CodeLiteral> means that the frame starts or ends with the current row; but in <CodeLiteral>RANGE</CodeLiteral> or <CodeLiteral>GROUPS</CodeLiteral> mode it means that the frame starts or ends with the current row's first or last peer in the <CodeLiteral>ORDER BY</CodeLiteral> ordering. The offset <CodeLiteral>PRECEDING</CodeLiteral> and offset <CodeLiteral>FOLLOWING</CodeLiteral> options vary in meaning depending on the frame mode. In <CodeLiteral>ROWS</CodeLiteral> mode, the offset is an integer indicating that the frame starts or ends that many rows before or after the current row. In <CodeLiteral>GROUPS</CodeLiteral> mode, the offset is an integer indicating that the frame starts or ends that many peer groups before or after the current row's peer group, where a peer group is a group of rows that are equivalent according to the window's <CodeLiteral>ORDER BY</CodeLiteral> clause. In <CodeLiteral>RANGE</CodeLiteral> mode, use of an offset option requires that there be exactly one <CodeLiteral>ORDER BY</CodeLiteral> column in the window definition. Then the frame contains those rows whose ordering column value is no more than offset less than (for <CodeLiteral>PRECEDING</CodeLiteral>) or more than (for <CodeLiteral>FOLLOWING</CodeLiteral>) the current row's ordering column value. In these cases the data type of the offset expression depends on the data type of the ordering column. For numeric ordering columns it is typically of the same type as the ordering column, but for datetime ordering columns it is an interval. In all these cases, the value of the offset must be non-null and non-negative. Also, while the offset does not have to be a simple constant, it cannot contain variables, aggregate functions, or window functions.\n The frame_exclusion option allows rows around the current row to be excluded from the frame, even if they would be included according to the frame start and frame end options. <CodeLiteral>EXCLUDE CURRENT ROW</CodeLiteral> excludes the current row from the frame. <CodeLiteral>EXCLUDE GROUP</CodeLiteral> excludes the current row and its ordering peers from the frame. <CodeLiteral>EXCLUDE TIES</CodeLiteral> excludes any peers of the current row from the frame, but not the current row itself. <CodeLiteral>EXCLUDE NO OTHERS</CodeLiteral> simply specifies explicitly the default behavior of not excluding the current row or its peers.\n Beware that the <CodeLiteral>ROWS</CodeLiteral> mode can produce unpredictable results if the <CodeLiteral>ORDER BY</CodeLiteral> ordering does not order the rows uniquely. The <CodeLiteral>RANGE</CodeLiteral> and <CodeLiteral>GROUPS</CodeLiteral> modes are designed to ensure that rows that are peers in the <CodeLiteral>ORDER BY</CodeLiteral> ordering are treated alike: all rows of a given peer group will be in the frame or excluded from it.\n The purpose of a <CodeLiteral>WINDOW</CodeLiteral> clause is to specify the behavior of window functions appearing in the query's SELECT List or <CodeLiteral>ORDER BY</CodeLiteral> Clause. These functions can reference the <CodeLiteral>WINDOW</CodeLiteral> clause entries by name in their <CodeLiteral>OVER</CodeLiteral> clauses. A <CodeLiteral>WINDOW</CodeLiteral> clause entry does not have to be referenced anywhere, however; if it is not used in the query it is simply ignored. It is possible to use window functions without any <CodeLiteral>WINDOW</CodeLiteral> clause at all, since a window function call can specify its window definition directly in its <CodeLiteral>OVER</CodeLiteral> clause. However, the <CodeLiteral>WINDOW</CodeLiteral> clause saves typing when the same window definition is needed for more than one window function.\n Currently, <CodeLiteral>FOR NO KEY UPDATE</CodeLiteral>, <CodeLiteral>FOR UPDATE</CodeLiteral>, <CodeLiteral>FOR SHARE</CodeLiteral> and <CodeLiteral>FOR KEY SHARE</CodeLiteral> cannot be specified with <CodeLiteral>WINDOW</CodeLiteral>.\n Window functions are described in detail in Section 3.5, Section 4.2.8, and Section 7.2.5. ",
        "detail": "[DESCRIPTION]: The optional <CodeLiteral>WINDOW</CodeLiteral> clause has the general form\n <code>WINDOW window_name AS ( window_definition ) [, ...]\n</code>\n where window_name is a name that can be referenced from <CodeLiteral>OVER</CodeLiteral> clauses or subsequent window definitions, and window_definition is\n <code>[ existing_window_name ]\n[ PARTITION BY expression [, ...] ]\n[ ORDER BY expression [ ASC | DESC | USING operator ] [ NULLS { FIRST | LAST } ] [, ...] ]\n[ frame_clause ]\n</code>\n If an existing_window_name is specified it must refer to an earlier entry in the <CodeLiteral>WINDOW</CodeLiteral> list; the new window copies its partitioning clause from that entry, as well as its ordering clause if any. In this case the new window cannot specify its own <CodeLiteral>PARTITION BY</CodeLiteral> clause, and it can specify <CodeLiteral>ORDER BY</CodeLiteral> only if the copied window does not have one. The new window always uses its own frame clause; the copied window must not specify a frame clause.\n The elements of the <CodeLiteral>PARTITION BY</CodeLiteral> list are interpreted in much the same fashion as elements of a <CodeLiteral>GROUP BY</CodeLiteral> Clause, except that they are always simple expressions and never the name or number of an output column. Another difference is that these expressions can contain aggregate function calls, which are not allowed in a regular <CodeLiteral>GROUP BY</CodeLiteral> clause. They are allowed here because windowing occurs after grouping and aggregation.\n Similarly, the elements of the <CodeLiteral>ORDER BY</CodeLiteral> list are interpreted in much the same fashion as elements of an <CodeLiteral>ORDER BY</CodeLiteral> Clause, except that the expressions are always taken as simple expressions and never the name or number of an output column.\n The optional frame_clause defines the window frame for window functions that depend on the frame (not all do). The window frame is a set of related rows for each row of the query (called the current row). The frame_clause can be one of\n <code>{ RANGE | ROWS | GROUPS } frame_start [ frame_exclusion ]\n{ RANGE | ROWS | GROUPS } BETWEEN frame_start AND frame_end [ frame_exclusion ]\n</code>\n where frame_start and frame_end can be one of\n <code>UNBOUNDED PRECEDING\noffset PRECEDING\nCURRENT ROW\noffset FOLLOWING\nUNBOUNDED FOLLOWING\n</code>\n and frame_exclusion can be one of\n <code>EXCLUDE CURRENT ROW\nEXCLUDE GROUP\nEXCLUDE TIES\nEXCLUDE NO OTHERS\n</code>\n If frame_end is omitted it defaults to <CodeLiteral>CURRENT ROW</CodeLiteral>. Restrictions are that frame_start cannot be <CodeLiteral>UNBOUNDED FOLLOWING</CodeLiteral>, frame_end cannot be <CodeLiteral>UNBOUNDED PRECEDING</CodeLiteral>, and the frame_end choice cannot appear earlier in the above list of frame_start and frame_end options than the frame_start choice does \u2014 for example <CodeLiteral>RANGE BETWEEN CURRENT ROW AND offset PRECEDING</CodeLiteral> is not allowed.\n The default framing option is <CodeLiteral>RANGE UNBOUNDED PRECEDING</CodeLiteral>, which is the same as <CodeLiteral>RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW</CodeLiteral>; it sets the frame to be all rows from the partition start up through the current row's last peer (a row that the window's <CodeLiteral>ORDER BY</CodeLiteral> clause considers equivalent to the current row; all rows are peers if there is no <CodeLiteral>ORDER BY</CodeLiteral>). In general, <CodeLiteral>UNBOUNDED PRECEDING</CodeLiteral> means that the frame starts with the first row of the partition, and similarly <CodeLiteral>UNBOUNDED FOLLOWING</CodeLiteral> means that the frame ends with the last row of the partition, regardless of <CodeLiteral>RANGE</CodeLiteral>, <CodeLiteral>ROWS</CodeLiteral> or <CodeLiteral>GROUPS</CodeLiteral> mode. In <CodeLiteral>ROWS</CodeLiteral> mode, <CodeLiteral>CURRENT ROW</CodeLiteral> means that the frame starts or ends with the current row; but in <CodeLiteral>RANGE</CodeLiteral> or <CodeLiteral>GROUPS</CodeLiteral> mode it means that the frame starts or ends with the current row's first or last peer in the <CodeLiteral>ORDER BY</CodeLiteral> ordering. The offset <CodeLiteral>PRECEDING</CodeLiteral> and offset <CodeLiteral>FOLLOWING</CodeLiteral> options vary in meaning depending on the frame mode. In <CodeLiteral>ROWS</CodeLiteral> mode, the offset is an integer indicating that the frame starts or ends that many rows before or after the current row. In <CodeLiteral>GROUPS</CodeLiteral> mode, the offset is an integer indicating that the frame starts or ends that many peer groups before or after the current row's peer group, where a peer group is a group of rows that are equivalent according to the window's <CodeLiteral>ORDER BY</CodeLiteral> clause. In <CodeLiteral>RANGE</CodeLiteral> mode, use of an offset option requires that there be exactly one <CodeLiteral>ORDER BY</CodeLiteral> column in the window definition. Then the frame contains those rows whose ordering column value is no more than offset less than (for <CodeLiteral>PRECEDING</CodeLiteral>) or more than (for <CodeLiteral>FOLLOWING</CodeLiteral>) the current row's ordering column value. In these cases the data type of the offset expression depends on the data type of the ordering column. For numeric ordering columns it is typically of the same type as the ordering column, but for datetime ordering columns it is an interval. In all these cases, the value of the offset must be non-null and non-negative. Also, while the offset does not have to be a simple constant, it cannot contain variables, aggregate functions, or window functions.\n The frame_exclusion option allows rows around the current row to be excluded from the frame, even if they would be included according to the frame start and frame end options. <CodeLiteral>EXCLUDE CURRENT ROW</CodeLiteral> excludes the current row from the frame. <CodeLiteral>EXCLUDE GROUP</CodeLiteral> excludes the current row and its ordering peers from the frame. <CodeLiteral>EXCLUDE TIES</CodeLiteral> excludes any peers of the current row from the frame, but not the current row itself. <CodeLiteral>EXCLUDE NO OTHERS</CodeLiteral> simply specifies explicitly the default behavior of not excluding the current row or its peers.\n Beware that the <CodeLiteral>ROWS</CodeLiteral> mode can produce unpredictable results if the <CodeLiteral>ORDER BY</CodeLiteral> ordering does not order the rows uniquely. The <CodeLiteral>RANGE</CodeLiteral> and <CodeLiteral>GROUPS</CodeLiteral> modes are designed to ensure that rows that are peers in the <CodeLiteral>ORDER BY</CodeLiteral> ordering are treated alike: all rows of a given peer group will be in the frame or excluded from it.\n The purpose of a <CodeLiteral>WINDOW</CodeLiteral> clause is to specify the behavior of window functions appearing in the query's SELECT List or <CodeLiteral>ORDER BY</CodeLiteral> Clause. These functions can reference the <CodeLiteral>WINDOW</CodeLiteral> clause entries by name in their <CodeLiteral>OVER</CodeLiteral> clauses. A <CodeLiteral>WINDOW</CodeLiteral> clause entry does not have to be referenced anywhere, however; if it is not used in the query it is simply ignored. It is possible to use window functions without any <CodeLiteral>WINDOW</CodeLiteral> clause at all, since a window function call can specify its window definition directly in its <CodeLiteral>OVER</CodeLiteral> clause. However, the <CodeLiteral>WINDOW</CodeLiteral> clause saves typing when the same window definition is needed for more than one window function.\n Currently, <CodeLiteral>FOR NO KEY UPDATE</CodeLiteral>, <CodeLiteral>FOR UPDATE</CodeLiteral>, <CodeLiteral>FOR SHARE</CodeLiteral> and <CodeLiteral>FOR KEY SHARE</CodeLiteral> cannot be specified with <CodeLiteral>WINDOW</CodeLiteral>.\n Window functions are described in detail in Section 3.5, Section 4.2.8, and Section 7.2.5. <sep>[DEMO]: SELECT employee_id, salary, AVG(salary) OVER w AS average_salary FROM employees WINDOW w AS (ORDER BY department_id NULLS FIRST)",
        "example": [
            "SELECT employee_id, salary, AVG(salary) OVER w AS average_salary FROM employees WINDOW w AS (ORDER BY department_id NULLS FIRST)"
        ],
        "link": []
    },
    {
        "type": "keyword",
        "keyword": "WINDOW window_name AS ( ORDER BY expression NULLS LAST ) ",
        "tree": " (window_clause WINDOW (window_definition_list (window_definition AS (window_specification (opt_sort_clause (sort_clause ORDER BY (sortby_list (sortby (opt_nulls_order NULLS LAST)))))))))",
        "description": "The optional <CodeLiteral>WINDOW</CodeLiteral> clause has the general form\n <code>WINDOW window_name AS ( window_definition ) [, ...]\n</code>\n where window_name is a name that can be referenced from <CodeLiteral>OVER</CodeLiteral> clauses or subsequent window definitions, and window_definition is\n <code>[ existing_window_name ]\n[ PARTITION BY expression [, ...] ]\n[ ORDER BY expression [ ASC | DESC | USING operator ] [ NULLS { FIRST | LAST } ] [, ...] ]\n[ frame_clause ]\n</code>\n If an existing_window_name is specified it must refer to an earlier entry in the <CodeLiteral>WINDOW</CodeLiteral> list; the new window copies its partitioning clause from that entry, as well as its ordering clause if any. In this case the new window cannot specify its own <CodeLiteral>PARTITION BY</CodeLiteral> clause, and it can specify <CodeLiteral>ORDER BY</CodeLiteral> only if the copied window does not have one. The new window always uses its own frame clause; the copied window must not specify a frame clause.\n The elements of the <CodeLiteral>PARTITION BY</CodeLiteral> list are interpreted in much the same fashion as elements of a <CodeLiteral>GROUP BY</CodeLiteral> Clause, except that they are always simple expressions and never the name or number of an output column. Another difference is that these expressions can contain aggregate function calls, which are not allowed in a regular <CodeLiteral>GROUP BY</CodeLiteral> clause. They are allowed here because windowing occurs after grouping and aggregation.\n Similarly, the elements of the <CodeLiteral>ORDER BY</CodeLiteral> list are interpreted in much the same fashion as elements of an <CodeLiteral>ORDER BY</CodeLiteral> Clause, except that the expressions are always taken as simple expressions and never the name or number of an output column.\n The optional frame_clause defines the window frame for window functions that depend on the frame (not all do). The window frame is a set of related rows for each row of the query (called the current row). The frame_clause can be one of\n <code>{ RANGE | ROWS | GROUPS } frame_start [ frame_exclusion ]\n{ RANGE | ROWS | GROUPS } BETWEEN frame_start AND frame_end [ frame_exclusion ]\n</code>\n where frame_start and frame_end can be one of\n <code>UNBOUNDED PRECEDING\noffset PRECEDING\nCURRENT ROW\noffset FOLLOWING\nUNBOUNDED FOLLOWING\n</code>\n and frame_exclusion can be one of\n <code>EXCLUDE CURRENT ROW\nEXCLUDE GROUP\nEXCLUDE TIES\nEXCLUDE NO OTHERS\n</code>\n If frame_end is omitted it defaults to <CodeLiteral>CURRENT ROW</CodeLiteral>. Restrictions are that frame_start cannot be <CodeLiteral>UNBOUNDED FOLLOWING</CodeLiteral>, frame_end cannot be <CodeLiteral>UNBOUNDED PRECEDING</CodeLiteral>, and the frame_end choice cannot appear earlier in the above list of frame_start and frame_end options than the frame_start choice does \u2014 for example <CodeLiteral>RANGE BETWEEN CURRENT ROW AND offset PRECEDING</CodeLiteral> is not allowed.\n The default framing option is <CodeLiteral>RANGE UNBOUNDED PRECEDING</CodeLiteral>, which is the same as <CodeLiteral>RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW</CodeLiteral>; it sets the frame to be all rows from the partition start up through the current row's last peer (a row that the window's <CodeLiteral>ORDER BY</CodeLiteral> clause considers equivalent to the current row; all rows are peers if there is no <CodeLiteral>ORDER BY</CodeLiteral>). In general, <CodeLiteral>UNBOUNDED PRECEDING</CodeLiteral> means that the frame starts with the first row of the partition, and similarly <CodeLiteral>UNBOUNDED FOLLOWING</CodeLiteral> means that the frame ends with the last row of the partition, regardless of <CodeLiteral>RANGE</CodeLiteral>, <CodeLiteral>ROWS</CodeLiteral> or <CodeLiteral>GROUPS</CodeLiteral> mode. In <CodeLiteral>ROWS</CodeLiteral> mode, <CodeLiteral>CURRENT ROW</CodeLiteral> means that the frame starts or ends with the current row; but in <CodeLiteral>RANGE</CodeLiteral> or <CodeLiteral>GROUPS</CodeLiteral> mode it means that the frame starts or ends with the current row's first or last peer in the <CodeLiteral>ORDER BY</CodeLiteral> ordering. The offset <CodeLiteral>PRECEDING</CodeLiteral> and offset <CodeLiteral>FOLLOWING</CodeLiteral> options vary in meaning depending on the frame mode. In <CodeLiteral>ROWS</CodeLiteral> mode, the offset is an integer indicating that the frame starts or ends that many rows before or after the current row. In <CodeLiteral>GROUPS</CodeLiteral> mode, the offset is an integer indicating that the frame starts or ends that many peer groups before or after the current row's peer group, where a peer group is a group of rows that are equivalent according to the window's <CodeLiteral>ORDER BY</CodeLiteral> clause. In <CodeLiteral>RANGE</CodeLiteral> mode, use of an offset option requires that there be exactly one <CodeLiteral>ORDER BY</CodeLiteral> column in the window definition. Then the frame contains those rows whose ordering column value is no more than offset less than (for <CodeLiteral>PRECEDING</CodeLiteral>) or more than (for <CodeLiteral>FOLLOWING</CodeLiteral>) the current row's ordering column value. In these cases the data type of the offset expression depends on the data type of the ordering column. For numeric ordering columns it is typically of the same type as the ordering column, but for datetime ordering columns it is an interval. In all these cases, the value of the offset must be non-null and non-negative. Also, while the offset does not have to be a simple constant, it cannot contain variables, aggregate functions, or window functions.\n The frame_exclusion option allows rows around the current row to be excluded from the frame, even if they would be included according to the frame start and frame end options. <CodeLiteral>EXCLUDE CURRENT ROW</CodeLiteral> excludes the current row from the frame. <CodeLiteral>EXCLUDE GROUP</CodeLiteral> excludes the current row and its ordering peers from the frame. <CodeLiteral>EXCLUDE TIES</CodeLiteral> excludes any peers of the current row from the frame, but not the current row itself. <CodeLiteral>EXCLUDE NO OTHERS</CodeLiteral> simply specifies explicitly the default behavior of not excluding the current row or its peers.\n Beware that the <CodeLiteral>ROWS</CodeLiteral> mode can produce unpredictable results if the <CodeLiteral>ORDER BY</CodeLiteral> ordering does not order the rows uniquely. The <CodeLiteral>RANGE</CodeLiteral> and <CodeLiteral>GROUPS</CodeLiteral> modes are designed to ensure that rows that are peers in the <CodeLiteral>ORDER BY</CodeLiteral> ordering are treated alike: all rows of a given peer group will be in the frame or excluded from it.\n The purpose of a <CodeLiteral>WINDOW</CodeLiteral> clause is to specify the behavior of window functions appearing in the query's SELECT List or <CodeLiteral>ORDER BY</CodeLiteral> Clause. These functions can reference the <CodeLiteral>WINDOW</CodeLiteral> clause entries by name in their <CodeLiteral>OVER</CodeLiteral> clauses. A <CodeLiteral>WINDOW</CodeLiteral> clause entry does not have to be referenced anywhere, however; if it is not used in the query it is simply ignored. It is possible to use window functions without any <CodeLiteral>WINDOW</CodeLiteral> clause at all, since a window function call can specify its window definition directly in its <CodeLiteral>OVER</CodeLiteral> clause. However, the <CodeLiteral>WINDOW</CodeLiteral> clause saves typing when the same window definition is needed for more than one window function.\n Currently, <CodeLiteral>FOR NO KEY UPDATE</CodeLiteral>, <CodeLiteral>FOR UPDATE</CodeLiteral>, <CodeLiteral>FOR SHARE</CodeLiteral> and <CodeLiteral>FOR KEY SHARE</CodeLiteral> cannot be specified with <CodeLiteral>WINDOW</CodeLiteral>.\n Window functions are described in detail in Section 3.5, Section 4.2.8, and Section 7.2.5. ",
        "detail": "[DESCRIPTION]: The optional <CodeLiteral>WINDOW</CodeLiteral> clause has the general form\n <code>WINDOW window_name AS ( window_definition ) [, ...]\n</code>\n where window_name is a name that can be referenced from <CodeLiteral>OVER</CodeLiteral> clauses or subsequent window definitions, and window_definition is\n <code>[ existing_window_name ]\n[ PARTITION BY expression [, ...] ]\n[ ORDER BY expression [ ASC | DESC | USING operator ] [ NULLS { FIRST | LAST } ] [, ...] ]\n[ frame_clause ]\n</code>\n If an existing_window_name is specified it must refer to an earlier entry in the <CodeLiteral>WINDOW</CodeLiteral> list; the new window copies its partitioning clause from that entry, as well as its ordering clause if any. In this case the new window cannot specify its own <CodeLiteral>PARTITION BY</CodeLiteral> clause, and it can specify <CodeLiteral>ORDER BY</CodeLiteral> only if the copied window does not have one. The new window always uses its own frame clause; the copied window must not specify a frame clause.\n The elements of the <CodeLiteral>PARTITION BY</CodeLiteral> list are interpreted in much the same fashion as elements of a <CodeLiteral>GROUP BY</CodeLiteral> Clause, except that they are always simple expressions and never the name or number of an output column. Another difference is that these expressions can contain aggregate function calls, which are not allowed in a regular <CodeLiteral>GROUP BY</CodeLiteral> clause. They are allowed here because windowing occurs after grouping and aggregation.\n Similarly, the elements of the <CodeLiteral>ORDER BY</CodeLiteral> list are interpreted in much the same fashion as elements of an <CodeLiteral>ORDER BY</CodeLiteral> Clause, except that the expressions are always taken as simple expressions and never the name or number of an output column.\n The optional frame_clause defines the window frame for window functions that depend on the frame (not all do). The window frame is a set of related rows for each row of the query (called the current row). The frame_clause can be one of\n <code>{ RANGE | ROWS | GROUPS } frame_start [ frame_exclusion ]\n{ RANGE | ROWS | GROUPS } BETWEEN frame_start AND frame_end [ frame_exclusion ]\n</code>\n where frame_start and frame_end can be one of\n <code>UNBOUNDED PRECEDING\noffset PRECEDING\nCURRENT ROW\noffset FOLLOWING\nUNBOUNDED FOLLOWING\n</code>\n and frame_exclusion can be one of\n <code>EXCLUDE CURRENT ROW\nEXCLUDE GROUP\nEXCLUDE TIES\nEXCLUDE NO OTHERS\n</code>\n If frame_end is omitted it defaults to <CodeLiteral>CURRENT ROW</CodeLiteral>. Restrictions are that frame_start cannot be <CodeLiteral>UNBOUNDED FOLLOWING</CodeLiteral>, frame_end cannot be <CodeLiteral>UNBOUNDED PRECEDING</CodeLiteral>, and the frame_end choice cannot appear earlier in the above list of frame_start and frame_end options than the frame_start choice does \u2014 for example <CodeLiteral>RANGE BETWEEN CURRENT ROW AND offset PRECEDING</CodeLiteral> is not allowed.\n The default framing option is <CodeLiteral>RANGE UNBOUNDED PRECEDING</CodeLiteral>, which is the same as <CodeLiteral>RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW</CodeLiteral>; it sets the frame to be all rows from the partition start up through the current row's last peer (a row that the window's <CodeLiteral>ORDER BY</CodeLiteral> clause considers equivalent to the current row; all rows are peers if there is no <CodeLiteral>ORDER BY</CodeLiteral>). In general, <CodeLiteral>UNBOUNDED PRECEDING</CodeLiteral> means that the frame starts with the first row of the partition, and similarly <CodeLiteral>UNBOUNDED FOLLOWING</CodeLiteral> means that the frame ends with the last row of the partition, regardless of <CodeLiteral>RANGE</CodeLiteral>, <CodeLiteral>ROWS</CodeLiteral> or <CodeLiteral>GROUPS</CodeLiteral> mode. In <CodeLiteral>ROWS</CodeLiteral> mode, <CodeLiteral>CURRENT ROW</CodeLiteral> means that the frame starts or ends with the current row; but in <CodeLiteral>RANGE</CodeLiteral> or <CodeLiteral>GROUPS</CodeLiteral> mode it means that the frame starts or ends with the current row's first or last peer in the <CodeLiteral>ORDER BY</CodeLiteral> ordering. The offset <CodeLiteral>PRECEDING</CodeLiteral> and offset <CodeLiteral>FOLLOWING</CodeLiteral> options vary in meaning depending on the frame mode. In <CodeLiteral>ROWS</CodeLiteral> mode, the offset is an integer indicating that the frame starts or ends that many rows before or after the current row. In <CodeLiteral>GROUPS</CodeLiteral> mode, the offset is an integer indicating that the frame starts or ends that many peer groups before or after the current row's peer group, where a peer group is a group of rows that are equivalent according to the window's <CodeLiteral>ORDER BY</CodeLiteral> clause. In <CodeLiteral>RANGE</CodeLiteral> mode, use of an offset option requires that there be exactly one <CodeLiteral>ORDER BY</CodeLiteral> column in the window definition. Then the frame contains those rows whose ordering column value is no more than offset less than (for <CodeLiteral>PRECEDING</CodeLiteral>) or more than (for <CodeLiteral>FOLLOWING</CodeLiteral>) the current row's ordering column value. In these cases the data type of the offset expression depends on the data type of the ordering column. For numeric ordering columns it is typically of the same type as the ordering column, but for datetime ordering columns it is an interval. In all these cases, the value of the offset must be non-null and non-negative. Also, while the offset does not have to be a simple constant, it cannot contain variables, aggregate functions, or window functions.\n The frame_exclusion option allows rows around the current row to be excluded from the frame, even if they would be included according to the frame start and frame end options. <CodeLiteral>EXCLUDE CURRENT ROW</CodeLiteral> excludes the current row from the frame. <CodeLiteral>EXCLUDE GROUP</CodeLiteral> excludes the current row and its ordering peers from the frame. <CodeLiteral>EXCLUDE TIES</CodeLiteral> excludes any peers of the current row from the frame, but not the current row itself. <CodeLiteral>EXCLUDE NO OTHERS</CodeLiteral> simply specifies explicitly the default behavior of not excluding the current row or its peers.\n Beware that the <CodeLiteral>ROWS</CodeLiteral> mode can produce unpredictable results if the <CodeLiteral>ORDER BY</CodeLiteral> ordering does not order the rows uniquely. The <CodeLiteral>RANGE</CodeLiteral> and <CodeLiteral>GROUPS</CodeLiteral> modes are designed to ensure that rows that are peers in the <CodeLiteral>ORDER BY</CodeLiteral> ordering are treated alike: all rows of a given peer group will be in the frame or excluded from it.\n The purpose of a <CodeLiteral>WINDOW</CodeLiteral> clause is to specify the behavior of window functions appearing in the query's SELECT List or <CodeLiteral>ORDER BY</CodeLiteral> Clause. These functions can reference the <CodeLiteral>WINDOW</CodeLiteral> clause entries by name in their <CodeLiteral>OVER</CodeLiteral> clauses. A <CodeLiteral>WINDOW</CodeLiteral> clause entry does not have to be referenced anywhere, however; if it is not used in the query it is simply ignored. It is possible to use window functions without any <CodeLiteral>WINDOW</CodeLiteral> clause at all, since a window function call can specify its window definition directly in its <CodeLiteral>OVER</CodeLiteral> clause. However, the <CodeLiteral>WINDOW</CodeLiteral> clause saves typing when the same window definition is needed for more than one window function.\n Currently, <CodeLiteral>FOR NO KEY UPDATE</CodeLiteral>, <CodeLiteral>FOR UPDATE</CodeLiteral>, <CodeLiteral>FOR SHARE</CodeLiteral> and <CodeLiteral>FOR KEY SHARE</CodeLiteral> cannot be specified with <CodeLiteral>WINDOW</CodeLiteral>.\n Window functions are described in detail in Section 3.5, Section 4.2.8, and Section 7.2.5. <sep>[DEMO]: SELECT employee_id, salary, AVG(salary) OVER w AS avg_salary FROM employees WINDOW w AS (ORDER BY department_id NULLS LAST)",
        "example": [
            "SELECT employee_id, salary, AVG(salary) OVER w AS avg_salary FROM employees WINDOW w AS (ORDER BY department_id NULLS LAST)"
        ],
        "link": []
    },
    {
        "type": "keyword",
        "keyword": "WINDOW window_name AS ( ORDER BY expression ) ",
        "tree": " (window_clause WINDOW (window_definition_list (window_definition AS (window_specification (opt_sort_clause (sort_clause ORDER BY))))))",
        "description": "The optional <CodeLiteral>WINDOW</CodeLiteral> clause has the general form\n <code>WINDOW window_name AS ( window_definition ) [, ...]\n</code>\n where window_name is a name that can be referenced from <CodeLiteral>OVER</CodeLiteral> clauses or subsequent window definitions, and window_definition is\n <code>[ existing_window_name ]\n[ PARTITION BY expression [, ...] ]\n[ ORDER BY expression [ ASC | DESC | USING operator ] [ NULLS { FIRST | LAST } ] [, ...] ]\n[ frame_clause ]\n</code>\n If an existing_window_name is specified it must refer to an earlier entry in the <CodeLiteral>WINDOW</CodeLiteral> list; the new window copies its partitioning clause from that entry, as well as its ordering clause if any. In this case the new window cannot specify its own <CodeLiteral>PARTITION BY</CodeLiteral> clause, and it can specify <CodeLiteral>ORDER BY</CodeLiteral> only if the copied window does not have one. The new window always uses its own frame clause; the copied window must not specify a frame clause.\n The elements of the <CodeLiteral>PARTITION BY</CodeLiteral> list are interpreted in much the same fashion as elements of a <CodeLiteral>GROUP BY</CodeLiteral> Clause, except that they are always simple expressions and never the name or number of an output column. Another difference is that these expressions can contain aggregate function calls, which are not allowed in a regular <CodeLiteral>GROUP BY</CodeLiteral> clause. They are allowed here because windowing occurs after grouping and aggregation.\n Similarly, the elements of the <CodeLiteral>ORDER BY</CodeLiteral> list are interpreted in much the same fashion as elements of an <CodeLiteral>ORDER BY</CodeLiteral> Clause, except that the expressions are always taken as simple expressions and never the name or number of an output column.\n The optional frame_clause defines the window frame for window functions that depend on the frame (not all do). The window frame is a set of related rows for each row of the query (called the current row). The frame_clause can be one of\n <code>{ RANGE | ROWS | GROUPS } frame_start [ frame_exclusion ]\n{ RANGE | ROWS | GROUPS } BETWEEN frame_start AND frame_end [ frame_exclusion ]\n</code>\n where frame_start and frame_end can be one of\n <code>UNBOUNDED PRECEDING\noffset PRECEDING\nCURRENT ROW\noffset FOLLOWING\nUNBOUNDED FOLLOWING\n</code>\n and frame_exclusion can be one of\n <code>EXCLUDE CURRENT ROW\nEXCLUDE GROUP\nEXCLUDE TIES\nEXCLUDE NO OTHERS\n</code>\n If frame_end is omitted it defaults to <CodeLiteral>CURRENT ROW</CodeLiteral>. Restrictions are that frame_start cannot be <CodeLiteral>UNBOUNDED FOLLOWING</CodeLiteral>, frame_end cannot be <CodeLiteral>UNBOUNDED PRECEDING</CodeLiteral>, and the frame_end choice cannot appear earlier in the above list of frame_start and frame_end options than the frame_start choice does \u2014 for example <CodeLiteral>RANGE BETWEEN CURRENT ROW AND offset PRECEDING</CodeLiteral> is not allowed.\n The default framing option is <CodeLiteral>RANGE UNBOUNDED PRECEDING</CodeLiteral>, which is the same as <CodeLiteral>RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW</CodeLiteral>; it sets the frame to be all rows from the partition start up through the current row's last peer (a row that the window's <CodeLiteral>ORDER BY</CodeLiteral> clause considers equivalent to the current row; all rows are peers if there is no <CodeLiteral>ORDER BY</CodeLiteral>). In general, <CodeLiteral>UNBOUNDED PRECEDING</CodeLiteral> means that the frame starts with the first row of the partition, and similarly <CodeLiteral>UNBOUNDED FOLLOWING</CodeLiteral> means that the frame ends with the last row of the partition, regardless of <CodeLiteral>RANGE</CodeLiteral>, <CodeLiteral>ROWS</CodeLiteral> or <CodeLiteral>GROUPS</CodeLiteral> mode. In <CodeLiteral>ROWS</CodeLiteral> mode, <CodeLiteral>CURRENT ROW</CodeLiteral> means that the frame starts or ends with the current row; but in <CodeLiteral>RANGE</CodeLiteral> or <CodeLiteral>GROUPS</CodeLiteral> mode it means that the frame starts or ends with the current row's first or last peer in the <CodeLiteral>ORDER BY</CodeLiteral> ordering. The offset <CodeLiteral>PRECEDING</CodeLiteral> and offset <CodeLiteral>FOLLOWING</CodeLiteral> options vary in meaning depending on the frame mode. In <CodeLiteral>ROWS</CodeLiteral> mode, the offset is an integer indicating that the frame starts or ends that many rows before or after the current row. In <CodeLiteral>GROUPS</CodeLiteral> mode, the offset is an integer indicating that the frame starts or ends that many peer groups before or after the current row's peer group, where a peer group is a group of rows that are equivalent according to the window's <CodeLiteral>ORDER BY</CodeLiteral> clause. In <CodeLiteral>RANGE</CodeLiteral> mode, use of an offset option requires that there be exactly one <CodeLiteral>ORDER BY</CodeLiteral> column in the window definition. Then the frame contains those rows whose ordering column value is no more than offset less than (for <CodeLiteral>PRECEDING</CodeLiteral>) or more than (for <CodeLiteral>FOLLOWING</CodeLiteral>) the current row's ordering column value. In these cases the data type of the offset expression depends on the data type of the ordering column. For numeric ordering columns it is typically of the same type as the ordering column, but for datetime ordering columns it is an interval. In all these cases, the value of the offset must be non-null and non-negative. Also, while the offset does not have to be a simple constant, it cannot contain variables, aggregate functions, or window functions.\n The frame_exclusion option allows rows around the current row to be excluded from the frame, even if they would be included according to the frame start and frame end options. <CodeLiteral>EXCLUDE CURRENT ROW</CodeLiteral> excludes the current row from the frame. <CodeLiteral>EXCLUDE GROUP</CodeLiteral> excludes the current row and its ordering peers from the frame. <CodeLiteral>EXCLUDE TIES</CodeLiteral> excludes any peers of the current row from the frame, but not the current row itself. <CodeLiteral>EXCLUDE NO OTHERS</CodeLiteral> simply specifies explicitly the default behavior of not excluding the current row or its peers.\n Beware that the <CodeLiteral>ROWS</CodeLiteral> mode can produce unpredictable results if the <CodeLiteral>ORDER BY</CodeLiteral> ordering does not order the rows uniquely. The <CodeLiteral>RANGE</CodeLiteral> and <CodeLiteral>GROUPS</CodeLiteral> modes are designed to ensure that rows that are peers in the <CodeLiteral>ORDER BY</CodeLiteral> ordering are treated alike: all rows of a given peer group will be in the frame or excluded from it.\n The purpose of a <CodeLiteral>WINDOW</CodeLiteral> clause is to specify the behavior of window functions appearing in the query's SELECT List or <CodeLiteral>ORDER BY</CodeLiteral> Clause. These functions can reference the <CodeLiteral>WINDOW</CodeLiteral> clause entries by name in their <CodeLiteral>OVER</CodeLiteral> clauses. A <CodeLiteral>WINDOW</CodeLiteral> clause entry does not have to be referenced anywhere, however; if it is not used in the query it is simply ignored. It is possible to use window functions without any <CodeLiteral>WINDOW</CodeLiteral> clause at all, since a window function call can specify its window definition directly in its <CodeLiteral>OVER</CodeLiteral> clause. However, the <CodeLiteral>WINDOW</CodeLiteral> clause saves typing when the same window definition is needed for more than one window function.\n Currently, <CodeLiteral>FOR NO KEY UPDATE</CodeLiteral>, <CodeLiteral>FOR UPDATE</CodeLiteral>, <CodeLiteral>FOR SHARE</CodeLiteral> and <CodeLiteral>FOR KEY SHARE</CodeLiteral> cannot be specified with <CodeLiteral>WINDOW</CodeLiteral>.\n Window functions are described in detail in Section 3.5, Section 4.2.8, and Section 7.2.5. ",
        "detail": "[DESCRIPTION]: The optional <CodeLiteral>WINDOW</CodeLiteral> clause has the general form\n <code>WINDOW window_name AS ( window_definition ) [, ...]\n</code>\n where window_name is a name that can be referenced from <CodeLiteral>OVER</CodeLiteral> clauses or subsequent window definitions, and window_definition is\n <code>[ existing_window_name ]\n[ PARTITION BY expression [, ...] ]\n[ ORDER BY expression [ ASC | DESC | USING operator ] [ NULLS { FIRST | LAST } ] [, ...] ]\n[ frame_clause ]\n</code>\n If an existing_window_name is specified it must refer to an earlier entry in the <CodeLiteral>WINDOW</CodeLiteral> list; the new window copies its partitioning clause from that entry, as well as its ordering clause if any. In this case the new window cannot specify its own <CodeLiteral>PARTITION BY</CodeLiteral> clause, and it can specify <CodeLiteral>ORDER BY</CodeLiteral> only if the copied window does not have one. The new window always uses its own frame clause; the copied window must not specify a frame clause.\n The elements of the <CodeLiteral>PARTITION BY</CodeLiteral> list are interpreted in much the same fashion as elements of a <CodeLiteral>GROUP BY</CodeLiteral> Clause, except that they are always simple expressions and never the name or number of an output column. Another difference is that these expressions can contain aggregate function calls, which are not allowed in a regular <CodeLiteral>GROUP BY</CodeLiteral> clause. They are allowed here because windowing occurs after grouping and aggregation.\n Similarly, the elements of the <CodeLiteral>ORDER BY</CodeLiteral> list are interpreted in much the same fashion as elements of an <CodeLiteral>ORDER BY</CodeLiteral> Clause, except that the expressions are always taken as simple expressions and never the name or number of an output column.\n The optional frame_clause defines the window frame for window functions that depend on the frame (not all do). The window frame is a set of related rows for each row of the query (called the current row). The frame_clause can be one of\n <code>{ RANGE | ROWS | GROUPS } frame_start [ frame_exclusion ]\n{ RANGE | ROWS | GROUPS } BETWEEN frame_start AND frame_end [ frame_exclusion ]\n</code>\n where frame_start and frame_end can be one of\n <code>UNBOUNDED PRECEDING\noffset PRECEDING\nCURRENT ROW\noffset FOLLOWING\nUNBOUNDED FOLLOWING\n</code>\n and frame_exclusion can be one of\n <code>EXCLUDE CURRENT ROW\nEXCLUDE GROUP\nEXCLUDE TIES\nEXCLUDE NO OTHERS\n</code>\n If frame_end is omitted it defaults to <CodeLiteral>CURRENT ROW</CodeLiteral>. Restrictions are that frame_start cannot be <CodeLiteral>UNBOUNDED FOLLOWING</CodeLiteral>, frame_end cannot be <CodeLiteral>UNBOUNDED PRECEDING</CodeLiteral>, and the frame_end choice cannot appear earlier in the above list of frame_start and frame_end options than the frame_start choice does \u2014 for example <CodeLiteral>RANGE BETWEEN CURRENT ROW AND offset PRECEDING</CodeLiteral> is not allowed.\n The default framing option is <CodeLiteral>RANGE UNBOUNDED PRECEDING</CodeLiteral>, which is the same as <CodeLiteral>RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW</CodeLiteral>; it sets the frame to be all rows from the partition start up through the current row's last peer (a row that the window's <CodeLiteral>ORDER BY</CodeLiteral> clause considers equivalent to the current row; all rows are peers if there is no <CodeLiteral>ORDER BY</CodeLiteral>). In general, <CodeLiteral>UNBOUNDED PRECEDING</CodeLiteral> means that the frame starts with the first row of the partition, and similarly <CodeLiteral>UNBOUNDED FOLLOWING</CodeLiteral> means that the frame ends with the last row of the partition, regardless of <CodeLiteral>RANGE</CodeLiteral>, <CodeLiteral>ROWS</CodeLiteral> or <CodeLiteral>GROUPS</CodeLiteral> mode. In <CodeLiteral>ROWS</CodeLiteral> mode, <CodeLiteral>CURRENT ROW</CodeLiteral> means that the frame starts or ends with the current row; but in <CodeLiteral>RANGE</CodeLiteral> or <CodeLiteral>GROUPS</CodeLiteral> mode it means that the frame starts or ends with the current row's first or last peer in the <CodeLiteral>ORDER BY</CodeLiteral> ordering. The offset <CodeLiteral>PRECEDING</CodeLiteral> and offset <CodeLiteral>FOLLOWING</CodeLiteral> options vary in meaning depending on the frame mode. In <CodeLiteral>ROWS</CodeLiteral> mode, the offset is an integer indicating that the frame starts or ends that many rows before or after the current row. In <CodeLiteral>GROUPS</CodeLiteral> mode, the offset is an integer indicating that the frame starts or ends that many peer groups before or after the current row's peer group, where a peer group is a group of rows that are equivalent according to the window's <CodeLiteral>ORDER BY</CodeLiteral> clause. In <CodeLiteral>RANGE</CodeLiteral> mode, use of an offset option requires that there be exactly one <CodeLiteral>ORDER BY</CodeLiteral> column in the window definition. Then the frame contains those rows whose ordering column value is no more than offset less than (for <CodeLiteral>PRECEDING</CodeLiteral>) or more than (for <CodeLiteral>FOLLOWING</CodeLiteral>) the current row's ordering column value. In these cases the data type of the offset expression depends on the data type of the ordering column. For numeric ordering columns it is typically of the same type as the ordering column, but for datetime ordering columns it is an interval. In all these cases, the value of the offset must be non-null and non-negative. Also, while the offset does not have to be a simple constant, it cannot contain variables, aggregate functions, or window functions.\n The frame_exclusion option allows rows around the current row to be excluded from the frame, even if they would be included according to the frame start and frame end options. <CodeLiteral>EXCLUDE CURRENT ROW</CodeLiteral> excludes the current row from the frame. <CodeLiteral>EXCLUDE GROUP</CodeLiteral> excludes the current row and its ordering peers from the frame. <CodeLiteral>EXCLUDE TIES</CodeLiteral> excludes any peers of the current row from the frame, but not the current row itself. <CodeLiteral>EXCLUDE NO OTHERS</CodeLiteral> simply specifies explicitly the default behavior of not excluding the current row or its peers.\n Beware that the <CodeLiteral>ROWS</CodeLiteral> mode can produce unpredictable results if the <CodeLiteral>ORDER BY</CodeLiteral> ordering does not order the rows uniquely. The <CodeLiteral>RANGE</CodeLiteral> and <CodeLiteral>GROUPS</CodeLiteral> modes are designed to ensure that rows that are peers in the <CodeLiteral>ORDER BY</CodeLiteral> ordering are treated alike: all rows of a given peer group will be in the frame or excluded from it.\n The purpose of a <CodeLiteral>WINDOW</CodeLiteral> clause is to specify the behavior of window functions appearing in the query's SELECT List or <CodeLiteral>ORDER BY</CodeLiteral> Clause. These functions can reference the <CodeLiteral>WINDOW</CodeLiteral> clause entries by name in their <CodeLiteral>OVER</CodeLiteral> clauses. A <CodeLiteral>WINDOW</CodeLiteral> clause entry does not have to be referenced anywhere, however; if it is not used in the query it is simply ignored. It is possible to use window functions without any <CodeLiteral>WINDOW</CodeLiteral> clause at all, since a window function call can specify its window definition directly in its <CodeLiteral>OVER</CodeLiteral> clause. However, the <CodeLiteral>WINDOW</CodeLiteral> clause saves typing when the same window definition is needed for more than one window function.\n Currently, <CodeLiteral>FOR NO KEY UPDATE</CodeLiteral>, <CodeLiteral>FOR UPDATE</CodeLiteral>, <CodeLiteral>FOR SHARE</CodeLiteral> and <CodeLiteral>FOR KEY SHARE</CodeLiteral> cannot be specified with <CodeLiteral>WINDOW</CodeLiteral>.\n Window functions are described in detail in Section 3.5, Section 4.2.8, and Section 7.2.5. <sep>[DEMO]: SELECT employee_name, salary, AVG(salary) OVER w AS average_salary FROM employees WINDOW w AS (ORDER BY department_id) ORDER BY department_id;",
        "example": [
            "SELECT employee_name, salary, AVG(salary) OVER w AS average_salary FROM employees WINDOW w AS (ORDER BY department_id) ORDER BY department_id;"
        ],
        "link": []
    },
    {
        "type": "keyword",
        "keyword": "WINDOW window_name AS ( RANGE frame_start ) ",
        "tree": " (window_clause WINDOW (window_definition_list (window_definition AS (window_specification (opt_frame_clause RANGE)))))",
        "description": "The optional <CodeLiteral>WINDOW</CodeLiteral> clause has the general form\n <code>WINDOW window_name AS ( window_definition ) [, ...]\n</code>\n where window_name is a name that can be referenced from <CodeLiteral>OVER</CodeLiteral> clauses or subsequent window definitions, and window_definition is\n <code>[ existing_window_name ]\n[ PARTITION BY expression [, ...] ]\n[ ORDER BY expression [ ASC | DESC | USING operator ] [ NULLS { FIRST | LAST } ] [, ...] ]\n[ frame_clause ]\n</code>\n If an existing_window_name is specified it must refer to an earlier entry in the <CodeLiteral>WINDOW</CodeLiteral> list; the new window copies its partitioning clause from that entry, as well as its ordering clause if any. In this case the new window cannot specify its own <CodeLiteral>PARTITION BY</CodeLiteral> clause, and it can specify <CodeLiteral>ORDER BY</CodeLiteral> only if the copied window does not have one. The new window always uses its own frame clause; the copied window must not specify a frame clause.\n The elements of the <CodeLiteral>PARTITION BY</CodeLiteral> list are interpreted in much the same fashion as elements of a <CodeLiteral>GROUP BY</CodeLiteral> Clause, except that they are always simple expressions and never the name or number of an output column. Another difference is that these expressions can contain aggregate function calls, which are not allowed in a regular <CodeLiteral>GROUP BY</CodeLiteral> clause. They are allowed here because windowing occurs after grouping and aggregation.\n Similarly, the elements of the <CodeLiteral>ORDER BY</CodeLiteral> list are interpreted in much the same fashion as elements of an <CodeLiteral>ORDER BY</CodeLiteral> Clause, except that the expressions are always taken as simple expressions and never the name or number of an output column.\n The optional frame_clause defines the window frame for window functions that depend on the frame (not all do). The window frame is a set of related rows for each row of the query (called the current row). The frame_clause can be one of\n <code>{ RANGE | ROWS | GROUPS } frame_start [ frame_exclusion ]\n{ RANGE | ROWS | GROUPS } BETWEEN frame_start AND frame_end [ frame_exclusion ]\n</code>\n where frame_start and frame_end can be one of\n <code>UNBOUNDED PRECEDING\noffset PRECEDING\nCURRENT ROW\noffset FOLLOWING\nUNBOUNDED FOLLOWING\n</code>\n and frame_exclusion can be one of\n <code>EXCLUDE CURRENT ROW\nEXCLUDE GROUP\nEXCLUDE TIES\nEXCLUDE NO OTHERS\n</code>\n If frame_end is omitted it defaults to <CodeLiteral>CURRENT ROW</CodeLiteral>. Restrictions are that frame_start cannot be <CodeLiteral>UNBOUNDED FOLLOWING</CodeLiteral>, frame_end cannot be <CodeLiteral>UNBOUNDED PRECEDING</CodeLiteral>, and the frame_end choice cannot appear earlier in the above list of frame_start and frame_end options than the frame_start choice does \u2014 for example <CodeLiteral>RANGE BETWEEN CURRENT ROW AND offset PRECEDING</CodeLiteral> is not allowed.\n The default framing option is <CodeLiteral>RANGE UNBOUNDED PRECEDING</CodeLiteral>, which is the same as <CodeLiteral>RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW</CodeLiteral>; it sets the frame to be all rows from the partition start up through the current row's last peer (a row that the window's <CodeLiteral>ORDER BY</CodeLiteral> clause considers equivalent to the current row; all rows are peers if there is no <CodeLiteral>ORDER BY</CodeLiteral>). In general, <CodeLiteral>UNBOUNDED PRECEDING</CodeLiteral> means that the frame starts with the first row of the partition, and similarly <CodeLiteral>UNBOUNDED FOLLOWING</CodeLiteral> means that the frame ends with the last row of the partition, regardless of <CodeLiteral>RANGE</CodeLiteral>, <CodeLiteral>ROWS</CodeLiteral> or <CodeLiteral>GROUPS</CodeLiteral> mode. In <CodeLiteral>ROWS</CodeLiteral> mode, <CodeLiteral>CURRENT ROW</CodeLiteral> means that the frame starts or ends with the current row; but in <CodeLiteral>RANGE</CodeLiteral> or <CodeLiteral>GROUPS</CodeLiteral> mode it means that the frame starts or ends with the current row's first or last peer in the <CodeLiteral>ORDER BY</CodeLiteral> ordering. The offset <CodeLiteral>PRECEDING</CodeLiteral> and offset <CodeLiteral>FOLLOWING</CodeLiteral> options vary in meaning depending on the frame mode. In <CodeLiteral>ROWS</CodeLiteral> mode, the offset is an integer indicating that the frame starts or ends that many rows before or after the current row. In <CodeLiteral>GROUPS</CodeLiteral> mode, the offset is an integer indicating that the frame starts or ends that many peer groups before or after the current row's peer group, where a peer group is a group of rows that are equivalent according to the window's <CodeLiteral>ORDER BY</CodeLiteral> clause. In <CodeLiteral>RANGE</CodeLiteral> mode, use of an offset option requires that there be exactly one <CodeLiteral>ORDER BY</CodeLiteral> column in the window definition. Then the frame contains those rows whose ordering column value is no more than offset less than (for <CodeLiteral>PRECEDING</CodeLiteral>) or more than (for <CodeLiteral>FOLLOWING</CodeLiteral>) the current row's ordering column value. In these cases the data type of the offset expression depends on the data type of the ordering column. For numeric ordering columns it is typically of the same type as the ordering column, but for datetime ordering columns it is an interval. In all these cases, the value of the offset must be non-null and non-negative. Also, while the offset does not have to be a simple constant, it cannot contain variables, aggregate functions, or window functions.\n The frame_exclusion option allows rows around the current row to be excluded from the frame, even if they would be included according to the frame start and frame end options. <CodeLiteral>EXCLUDE CURRENT ROW</CodeLiteral> excludes the current row from the frame. <CodeLiteral>EXCLUDE GROUP</CodeLiteral> excludes the current row and its ordering peers from the frame. <CodeLiteral>EXCLUDE TIES</CodeLiteral> excludes any peers of the current row from the frame, but not the current row itself. <CodeLiteral>EXCLUDE NO OTHERS</CodeLiteral> simply specifies explicitly the default behavior of not excluding the current row or its peers.\n Beware that the <CodeLiteral>ROWS</CodeLiteral> mode can produce unpredictable results if the <CodeLiteral>ORDER BY</CodeLiteral> ordering does not order the rows uniquely. The <CodeLiteral>RANGE</CodeLiteral> and <CodeLiteral>GROUPS</CodeLiteral> modes are designed to ensure that rows that are peers in the <CodeLiteral>ORDER BY</CodeLiteral> ordering are treated alike: all rows of a given peer group will be in the frame or excluded from it.\n The purpose of a <CodeLiteral>WINDOW</CodeLiteral> clause is to specify the behavior of window functions appearing in the query's SELECT List or <CodeLiteral>ORDER BY</CodeLiteral> Clause. These functions can reference the <CodeLiteral>WINDOW</CodeLiteral> clause entries by name in their <CodeLiteral>OVER</CodeLiteral> clauses. A <CodeLiteral>WINDOW</CodeLiteral> clause entry does not have to be referenced anywhere, however; if it is not used in the query it is simply ignored. It is possible to use window functions without any <CodeLiteral>WINDOW</CodeLiteral> clause at all, since a window function call can specify its window definition directly in its <CodeLiteral>OVER</CodeLiteral> clause. However, the <CodeLiteral>WINDOW</CodeLiteral> clause saves typing when the same window definition is needed for more than one window function.\n Currently, <CodeLiteral>FOR NO KEY UPDATE</CodeLiteral>, <CodeLiteral>FOR UPDATE</CodeLiteral>, <CodeLiteral>FOR SHARE</CodeLiteral> and <CodeLiteral>FOR KEY SHARE</CodeLiteral> cannot be specified with <CodeLiteral>WINDOW</CodeLiteral>.\n Window functions are described in detail in Section 3.5, Section 4.2.8, and Section 7.2.5. ",
        "detail": "[DESCRIPTION]: The optional <CodeLiteral>WINDOW</CodeLiteral> clause has the general form\n <code>WINDOW window_name AS ( window_definition ) [, ...]\n</code>\n where window_name is a name that can be referenced from <CodeLiteral>OVER</CodeLiteral> clauses or subsequent window definitions, and window_definition is\n <code>[ existing_window_name ]\n[ PARTITION BY expression [, ...] ]\n[ ORDER BY expression [ ASC | DESC | USING operator ] [ NULLS { FIRST | LAST } ] [, ...] ]\n[ frame_clause ]\n</code>\n If an existing_window_name is specified it must refer to an earlier entry in the <CodeLiteral>WINDOW</CodeLiteral> list; the new window copies its partitioning clause from that entry, as well as its ordering clause if any. In this case the new window cannot specify its own <CodeLiteral>PARTITION BY</CodeLiteral> clause, and it can specify <CodeLiteral>ORDER BY</CodeLiteral> only if the copied window does not have one. The new window always uses its own frame clause; the copied window must not specify a frame clause.\n The elements of the <CodeLiteral>PARTITION BY</CodeLiteral> list are interpreted in much the same fashion as elements of a <CodeLiteral>GROUP BY</CodeLiteral> Clause, except that they are always simple expressions and never the name or number of an output column. Another difference is that these expressions can contain aggregate function calls, which are not allowed in a regular <CodeLiteral>GROUP BY</CodeLiteral> clause. They are allowed here because windowing occurs after grouping and aggregation.\n Similarly, the elements of the <CodeLiteral>ORDER BY</CodeLiteral> list are interpreted in much the same fashion as elements of an <CodeLiteral>ORDER BY</CodeLiteral> Clause, except that the expressions are always taken as simple expressions and never the name or number of an output column.\n The optional frame_clause defines the window frame for window functions that depend on the frame (not all do). The window frame is a set of related rows for each row of the query (called the current row). The frame_clause can be one of\n <code>{ RANGE | ROWS | GROUPS } frame_start [ frame_exclusion ]\n{ RANGE | ROWS | GROUPS } BETWEEN frame_start AND frame_end [ frame_exclusion ]\n</code>\n where frame_start and frame_end can be one of\n <code>UNBOUNDED PRECEDING\noffset PRECEDING\nCURRENT ROW\noffset FOLLOWING\nUNBOUNDED FOLLOWING\n</code>\n and frame_exclusion can be one of\n <code>EXCLUDE CURRENT ROW\nEXCLUDE GROUP\nEXCLUDE TIES\nEXCLUDE NO OTHERS\n</code>\n If frame_end is omitted it defaults to <CodeLiteral>CURRENT ROW</CodeLiteral>. Restrictions are that frame_start cannot be <CodeLiteral>UNBOUNDED FOLLOWING</CodeLiteral>, frame_end cannot be <CodeLiteral>UNBOUNDED PRECEDING</CodeLiteral>, and the frame_end choice cannot appear earlier in the above list of frame_start and frame_end options than the frame_start choice does \u2014 for example <CodeLiteral>RANGE BETWEEN CURRENT ROW AND offset PRECEDING</CodeLiteral> is not allowed.\n The default framing option is <CodeLiteral>RANGE UNBOUNDED PRECEDING</CodeLiteral>, which is the same as <CodeLiteral>RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW</CodeLiteral>; it sets the frame to be all rows from the partition start up through the current row's last peer (a row that the window's <CodeLiteral>ORDER BY</CodeLiteral> clause considers equivalent to the current row; all rows are peers if there is no <CodeLiteral>ORDER BY</CodeLiteral>). In general, <CodeLiteral>UNBOUNDED PRECEDING</CodeLiteral> means that the frame starts with the first row of the partition, and similarly <CodeLiteral>UNBOUNDED FOLLOWING</CodeLiteral> means that the frame ends with the last row of the partition, regardless of <CodeLiteral>RANGE</CodeLiteral>, <CodeLiteral>ROWS</CodeLiteral> or <CodeLiteral>GROUPS</CodeLiteral> mode. In <CodeLiteral>ROWS</CodeLiteral> mode, <CodeLiteral>CURRENT ROW</CodeLiteral> means that the frame starts or ends with the current row; but in <CodeLiteral>RANGE</CodeLiteral> or <CodeLiteral>GROUPS</CodeLiteral> mode it means that the frame starts or ends with the current row's first or last peer in the <CodeLiteral>ORDER BY</CodeLiteral> ordering. The offset <CodeLiteral>PRECEDING</CodeLiteral> and offset <CodeLiteral>FOLLOWING</CodeLiteral> options vary in meaning depending on the frame mode. In <CodeLiteral>ROWS</CodeLiteral> mode, the offset is an integer indicating that the frame starts or ends that many rows before or after the current row. In <CodeLiteral>GROUPS</CodeLiteral> mode, the offset is an integer indicating that the frame starts or ends that many peer groups before or after the current row's peer group, where a peer group is a group of rows that are equivalent according to the window's <CodeLiteral>ORDER BY</CodeLiteral> clause. In <CodeLiteral>RANGE</CodeLiteral> mode, use of an offset option requires that there be exactly one <CodeLiteral>ORDER BY</CodeLiteral> column in the window definition. Then the frame contains those rows whose ordering column value is no more than offset less than (for <CodeLiteral>PRECEDING</CodeLiteral>) or more than (for <CodeLiteral>FOLLOWING</CodeLiteral>) the current row's ordering column value. In these cases the data type of the offset expression depends on the data type of the ordering column. For numeric ordering columns it is typically of the same type as the ordering column, but for datetime ordering columns it is an interval. In all these cases, the value of the offset must be non-null and non-negative. Also, while the offset does not have to be a simple constant, it cannot contain variables, aggregate functions, or window functions.\n The frame_exclusion option allows rows around the current row to be excluded from the frame, even if they would be included according to the frame start and frame end options. <CodeLiteral>EXCLUDE CURRENT ROW</CodeLiteral> excludes the current row from the frame. <CodeLiteral>EXCLUDE GROUP</CodeLiteral> excludes the current row and its ordering peers from the frame. <CodeLiteral>EXCLUDE TIES</CodeLiteral> excludes any peers of the current row from the frame, but not the current row itself. <CodeLiteral>EXCLUDE NO OTHERS</CodeLiteral> simply specifies explicitly the default behavior of not excluding the current row or its peers.\n Beware that the <CodeLiteral>ROWS</CodeLiteral> mode can produce unpredictable results if the <CodeLiteral>ORDER BY</CodeLiteral> ordering does not order the rows uniquely. The <CodeLiteral>RANGE</CodeLiteral> and <CodeLiteral>GROUPS</CodeLiteral> modes are designed to ensure that rows that are peers in the <CodeLiteral>ORDER BY</CodeLiteral> ordering are treated alike: all rows of a given peer group will be in the frame or excluded from it.\n The purpose of a <CodeLiteral>WINDOW</CodeLiteral> clause is to specify the behavior of window functions appearing in the query's SELECT List or <CodeLiteral>ORDER BY</CodeLiteral> Clause. These functions can reference the <CodeLiteral>WINDOW</CodeLiteral> clause entries by name in their <CodeLiteral>OVER</CodeLiteral> clauses. A <CodeLiteral>WINDOW</CodeLiteral> clause entry does not have to be referenced anywhere, however; if it is not used in the query it is simply ignored. It is possible to use window functions without any <CodeLiteral>WINDOW</CodeLiteral> clause at all, since a window function call can specify its window definition directly in its <CodeLiteral>OVER</CodeLiteral> clause. However, the <CodeLiteral>WINDOW</CodeLiteral> clause saves typing when the same window definition is needed for more than one window function.\n Currently, <CodeLiteral>FOR NO KEY UPDATE</CodeLiteral>, <CodeLiteral>FOR UPDATE</CodeLiteral>, <CodeLiteral>FOR SHARE</CodeLiteral> and <CodeLiteral>FOR KEY SHARE</CodeLiteral> cannot be specified with <CodeLiteral>WINDOW</CodeLiteral>.\n Window functions are described in detail in Section 3.5, Section 4.2.8, and Section 7.2.5. <sep>[DEMO]: ",
        "example": [
            ""
        ],
        "link": []
    },
    {
        "type": "keyword",
        "keyword": "WINDOW window_name AS ( ROWS frame_start ) ",
        "tree": " (window_clause WINDOW (window_definition_list (window_definition AS (window_specification (opt_frame_clause ROWS)))))",
        "description": "The optional <CodeLiteral>WINDOW</CodeLiteral> clause has the general form\n <code>WINDOW window_name AS ( window_definition ) [, ...]\n</code>\n where window_name is a name that can be referenced from <CodeLiteral>OVER</CodeLiteral> clauses or subsequent window definitions, and window_definition is\n <code>[ existing_window_name ]\n[ PARTITION BY expression [, ...] ]\n[ ORDER BY expression [ ASC | DESC | USING operator ] [ NULLS { FIRST | LAST } ] [, ...] ]\n[ frame_clause ]\n</code>\n If an existing_window_name is specified it must refer to an earlier entry in the <CodeLiteral>WINDOW</CodeLiteral> list; the new window copies its partitioning clause from that entry, as well as its ordering clause if any. In this case the new window cannot specify its own <CodeLiteral>PARTITION BY</CodeLiteral> clause, and it can specify <CodeLiteral>ORDER BY</CodeLiteral> only if the copied window does not have one. The new window always uses its own frame clause; the copied window must not specify a frame clause.\n The elements of the <CodeLiteral>PARTITION BY</CodeLiteral> list are interpreted in much the same fashion as elements of a <CodeLiteral>GROUP BY</CodeLiteral> Clause, except that they are always simple expressions and never the name or number of an output column. Another difference is that these expressions can contain aggregate function calls, which are not allowed in a regular <CodeLiteral>GROUP BY</CodeLiteral> clause. They are allowed here because windowing occurs after grouping and aggregation.\n Similarly, the elements of the <CodeLiteral>ORDER BY</CodeLiteral> list are interpreted in much the same fashion as elements of an <CodeLiteral>ORDER BY</CodeLiteral> Clause, except that the expressions are always taken as simple expressions and never the name or number of an output column.\n The optional frame_clause defines the window frame for window functions that depend on the frame (not all do). The window frame is a set of related rows for each row of the query (called the current row). The frame_clause can be one of\n <code>{ RANGE | ROWS | GROUPS } frame_start [ frame_exclusion ]\n{ RANGE | ROWS | GROUPS } BETWEEN frame_start AND frame_end [ frame_exclusion ]\n</code>\n where frame_start and frame_end can be one of\n <code>UNBOUNDED PRECEDING\noffset PRECEDING\nCURRENT ROW\noffset FOLLOWING\nUNBOUNDED FOLLOWING\n</code>\n and frame_exclusion can be one of\n <code>EXCLUDE CURRENT ROW\nEXCLUDE GROUP\nEXCLUDE TIES\nEXCLUDE NO OTHERS\n</code>\n If frame_end is omitted it defaults to <CodeLiteral>CURRENT ROW</CodeLiteral>. Restrictions are that frame_start cannot be <CodeLiteral>UNBOUNDED FOLLOWING</CodeLiteral>, frame_end cannot be <CodeLiteral>UNBOUNDED PRECEDING</CodeLiteral>, and the frame_end choice cannot appear earlier in the above list of frame_start and frame_end options than the frame_start choice does \u2014 for example <CodeLiteral>RANGE BETWEEN CURRENT ROW AND offset PRECEDING</CodeLiteral> is not allowed.\n The default framing option is <CodeLiteral>RANGE UNBOUNDED PRECEDING</CodeLiteral>, which is the same as <CodeLiteral>RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW</CodeLiteral>; it sets the frame to be all rows from the partition start up through the current row's last peer (a row that the window's <CodeLiteral>ORDER BY</CodeLiteral> clause considers equivalent to the current row; all rows are peers if there is no <CodeLiteral>ORDER BY</CodeLiteral>). In general, <CodeLiteral>UNBOUNDED PRECEDING</CodeLiteral> means that the frame starts with the first row of the partition, and similarly <CodeLiteral>UNBOUNDED FOLLOWING</CodeLiteral> means that the frame ends with the last row of the partition, regardless of <CodeLiteral>RANGE</CodeLiteral>, <CodeLiteral>ROWS</CodeLiteral> or <CodeLiteral>GROUPS</CodeLiteral> mode. In <CodeLiteral>ROWS</CodeLiteral> mode, <CodeLiteral>CURRENT ROW</CodeLiteral> means that the frame starts or ends with the current row; but in <CodeLiteral>RANGE</CodeLiteral> or <CodeLiteral>GROUPS</CodeLiteral> mode it means that the frame starts or ends with the current row's first or last peer in the <CodeLiteral>ORDER BY</CodeLiteral> ordering. The offset <CodeLiteral>PRECEDING</CodeLiteral> and offset <CodeLiteral>FOLLOWING</CodeLiteral> options vary in meaning depending on the frame mode. In <CodeLiteral>ROWS</CodeLiteral> mode, the offset is an integer indicating that the frame starts or ends that many rows before or after the current row. In <CodeLiteral>GROUPS</CodeLiteral> mode, the offset is an integer indicating that the frame starts or ends that many peer groups before or after the current row's peer group, where a peer group is a group of rows that are equivalent according to the window's <CodeLiteral>ORDER BY</CodeLiteral> clause. In <CodeLiteral>RANGE</CodeLiteral> mode, use of an offset option requires that there be exactly one <CodeLiteral>ORDER BY</CodeLiteral> column in the window definition. Then the frame contains those rows whose ordering column value is no more than offset less than (for <CodeLiteral>PRECEDING</CodeLiteral>) or more than (for <CodeLiteral>FOLLOWING</CodeLiteral>) the current row's ordering column value. In these cases the data type of the offset expression depends on the data type of the ordering column. For numeric ordering columns it is typically of the same type as the ordering column, but for datetime ordering columns it is an interval. In all these cases, the value of the offset must be non-null and non-negative. Also, while the offset does not have to be a simple constant, it cannot contain variables, aggregate functions, or window functions.\n The frame_exclusion option allows rows around the current row to be excluded from the frame, even if they would be included according to the frame start and frame end options. <CodeLiteral>EXCLUDE CURRENT ROW</CodeLiteral> excludes the current row from the frame. <CodeLiteral>EXCLUDE GROUP</CodeLiteral> excludes the current row and its ordering peers from the frame. <CodeLiteral>EXCLUDE TIES</CodeLiteral> excludes any peers of the current row from the frame, but not the current row itself. <CodeLiteral>EXCLUDE NO OTHERS</CodeLiteral> simply specifies explicitly the default behavior of not excluding the current row or its peers.\n Beware that the <CodeLiteral>ROWS</CodeLiteral> mode can produce unpredictable results if the <CodeLiteral>ORDER BY</CodeLiteral> ordering does not order the rows uniquely. The <CodeLiteral>RANGE</CodeLiteral> and <CodeLiteral>GROUPS</CodeLiteral> modes are designed to ensure that rows that are peers in the <CodeLiteral>ORDER BY</CodeLiteral> ordering are treated alike: all rows of a given peer group will be in the frame or excluded from it.\n The purpose of a <CodeLiteral>WINDOW</CodeLiteral> clause is to specify the behavior of window functions appearing in the query's SELECT List or <CodeLiteral>ORDER BY</CodeLiteral> Clause. These functions can reference the <CodeLiteral>WINDOW</CodeLiteral> clause entries by name in their <CodeLiteral>OVER</CodeLiteral> clauses. A <CodeLiteral>WINDOW</CodeLiteral> clause entry does not have to be referenced anywhere, however; if it is not used in the query it is simply ignored. It is possible to use window functions without any <CodeLiteral>WINDOW</CodeLiteral> clause at all, since a window function call can specify its window definition directly in its <CodeLiteral>OVER</CodeLiteral> clause. However, the <CodeLiteral>WINDOW</CodeLiteral> clause saves typing when the same window definition is needed for more than one window function.\n Currently, <CodeLiteral>FOR NO KEY UPDATE</CodeLiteral>, <CodeLiteral>FOR UPDATE</CodeLiteral>, <CodeLiteral>FOR SHARE</CodeLiteral> and <CodeLiteral>FOR KEY SHARE</CodeLiteral> cannot be specified with <CodeLiteral>WINDOW</CodeLiteral>.\n Window functions are described in detail in Section 3.5, Section 4.2.8, and Section 7.2.5. ",
        "detail": "[DESCRIPTION]: The optional <CodeLiteral>WINDOW</CodeLiteral> clause has the general form\n <code>WINDOW window_name AS ( window_definition ) [, ...]\n</code>\n where window_name is a name that can be referenced from <CodeLiteral>OVER</CodeLiteral> clauses or subsequent window definitions, and window_definition is\n <code>[ existing_window_name ]\n[ PARTITION BY expression [, ...] ]\n[ ORDER BY expression [ ASC | DESC | USING operator ] [ NULLS { FIRST | LAST } ] [, ...] ]\n[ frame_clause ]\n</code>\n If an existing_window_name is specified it must refer to an earlier entry in the <CodeLiteral>WINDOW</CodeLiteral> list; the new window copies its partitioning clause from that entry, as well as its ordering clause if any. In this case the new window cannot specify its own <CodeLiteral>PARTITION BY</CodeLiteral> clause, and it can specify <CodeLiteral>ORDER BY</CodeLiteral> only if the copied window does not have one. The new window always uses its own frame clause; the copied window must not specify a frame clause.\n The elements of the <CodeLiteral>PARTITION BY</CodeLiteral> list are interpreted in much the same fashion as elements of a <CodeLiteral>GROUP BY</CodeLiteral> Clause, except that they are always simple expressions and never the name or number of an output column. Another difference is that these expressions can contain aggregate function calls, which are not allowed in a regular <CodeLiteral>GROUP BY</CodeLiteral> clause. They are allowed here because windowing occurs after grouping and aggregation.\n Similarly, the elements of the <CodeLiteral>ORDER BY</CodeLiteral> list are interpreted in much the same fashion as elements of an <CodeLiteral>ORDER BY</CodeLiteral> Clause, except that the expressions are always taken as simple expressions and never the name or number of an output column.\n The optional frame_clause defines the window frame for window functions that depend on the frame (not all do). The window frame is a set of related rows for each row of the query (called the current row). The frame_clause can be one of\n <code>{ RANGE | ROWS | GROUPS } frame_start [ frame_exclusion ]\n{ RANGE | ROWS | GROUPS } BETWEEN frame_start AND frame_end [ frame_exclusion ]\n</code>\n where frame_start and frame_end can be one of\n <code>UNBOUNDED PRECEDING\noffset PRECEDING\nCURRENT ROW\noffset FOLLOWING\nUNBOUNDED FOLLOWING\n</code>\n and frame_exclusion can be one of\n <code>EXCLUDE CURRENT ROW\nEXCLUDE GROUP\nEXCLUDE TIES\nEXCLUDE NO OTHERS\n</code>\n If frame_end is omitted it defaults to <CodeLiteral>CURRENT ROW</CodeLiteral>. Restrictions are that frame_start cannot be <CodeLiteral>UNBOUNDED FOLLOWING</CodeLiteral>, frame_end cannot be <CodeLiteral>UNBOUNDED PRECEDING</CodeLiteral>, and the frame_end choice cannot appear earlier in the above list of frame_start and frame_end options than the frame_start choice does \u2014 for example <CodeLiteral>RANGE BETWEEN CURRENT ROW AND offset PRECEDING</CodeLiteral> is not allowed.\n The default framing option is <CodeLiteral>RANGE UNBOUNDED PRECEDING</CodeLiteral>, which is the same as <CodeLiteral>RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW</CodeLiteral>; it sets the frame to be all rows from the partition start up through the current row's last peer (a row that the window's <CodeLiteral>ORDER BY</CodeLiteral> clause considers equivalent to the current row; all rows are peers if there is no <CodeLiteral>ORDER BY</CodeLiteral>). In general, <CodeLiteral>UNBOUNDED PRECEDING</CodeLiteral> means that the frame starts with the first row of the partition, and similarly <CodeLiteral>UNBOUNDED FOLLOWING</CodeLiteral> means that the frame ends with the last row of the partition, regardless of <CodeLiteral>RANGE</CodeLiteral>, <CodeLiteral>ROWS</CodeLiteral> or <CodeLiteral>GROUPS</CodeLiteral> mode. In <CodeLiteral>ROWS</CodeLiteral> mode, <CodeLiteral>CURRENT ROW</CodeLiteral> means that the frame starts or ends with the current row; but in <CodeLiteral>RANGE</CodeLiteral> or <CodeLiteral>GROUPS</CodeLiteral> mode it means that the frame starts or ends with the current row's first or last peer in the <CodeLiteral>ORDER BY</CodeLiteral> ordering. The offset <CodeLiteral>PRECEDING</CodeLiteral> and offset <CodeLiteral>FOLLOWING</CodeLiteral> options vary in meaning depending on the frame mode. In <CodeLiteral>ROWS</CodeLiteral> mode, the offset is an integer indicating that the frame starts or ends that many rows before or after the current row. In <CodeLiteral>GROUPS</CodeLiteral> mode, the offset is an integer indicating that the frame starts or ends that many peer groups before or after the current row's peer group, where a peer group is a group of rows that are equivalent according to the window's <CodeLiteral>ORDER BY</CodeLiteral> clause. In <CodeLiteral>RANGE</CodeLiteral> mode, use of an offset option requires that there be exactly one <CodeLiteral>ORDER BY</CodeLiteral> column in the window definition. Then the frame contains those rows whose ordering column value is no more than offset less than (for <CodeLiteral>PRECEDING</CodeLiteral>) or more than (for <CodeLiteral>FOLLOWING</CodeLiteral>) the current row's ordering column value. In these cases the data type of the offset expression depends on the data type of the ordering column. For numeric ordering columns it is typically of the same type as the ordering column, but for datetime ordering columns it is an interval. In all these cases, the value of the offset must be non-null and non-negative. Also, while the offset does not have to be a simple constant, it cannot contain variables, aggregate functions, or window functions.\n The frame_exclusion option allows rows around the current row to be excluded from the frame, even if they would be included according to the frame start and frame end options. <CodeLiteral>EXCLUDE CURRENT ROW</CodeLiteral> excludes the current row from the frame. <CodeLiteral>EXCLUDE GROUP</CodeLiteral> excludes the current row and its ordering peers from the frame. <CodeLiteral>EXCLUDE TIES</CodeLiteral> excludes any peers of the current row from the frame, but not the current row itself. <CodeLiteral>EXCLUDE NO OTHERS</CodeLiteral> simply specifies explicitly the default behavior of not excluding the current row or its peers.\n Beware that the <CodeLiteral>ROWS</CodeLiteral> mode can produce unpredictable results if the <CodeLiteral>ORDER BY</CodeLiteral> ordering does not order the rows uniquely. The <CodeLiteral>RANGE</CodeLiteral> and <CodeLiteral>GROUPS</CodeLiteral> modes are designed to ensure that rows that are peers in the <CodeLiteral>ORDER BY</CodeLiteral> ordering are treated alike: all rows of a given peer group will be in the frame or excluded from it.\n The purpose of a <CodeLiteral>WINDOW</CodeLiteral> clause is to specify the behavior of window functions appearing in the query's SELECT List or <CodeLiteral>ORDER BY</CodeLiteral> Clause. These functions can reference the <CodeLiteral>WINDOW</CodeLiteral> clause entries by name in their <CodeLiteral>OVER</CodeLiteral> clauses. A <CodeLiteral>WINDOW</CodeLiteral> clause entry does not have to be referenced anywhere, however; if it is not used in the query it is simply ignored. It is possible to use window functions without any <CodeLiteral>WINDOW</CodeLiteral> clause at all, since a window function call can specify its window definition directly in its <CodeLiteral>OVER</CodeLiteral> clause. However, the <CodeLiteral>WINDOW</CodeLiteral> clause saves typing when the same window definition is needed for more than one window function.\n Currently, <CodeLiteral>FOR NO KEY UPDATE</CodeLiteral>, <CodeLiteral>FOR UPDATE</CodeLiteral>, <CodeLiteral>FOR SHARE</CodeLiteral> and <CodeLiteral>FOR KEY SHARE</CodeLiteral> cannot be specified with <CodeLiteral>WINDOW</CodeLiteral>.\n Window functions are described in detail in Section 3.5, Section 4.2.8, and Section 7.2.5. <sep>[DEMO]: ",
        "example": [
            ""
        ],
        "link": []
    },
    {
        "type": "keyword",
        "keyword": "WINDOW window_name AS ( GROUPS frame_start ) ",
        "tree": " (window_clause WINDOW (window_definition_list (window_definition AS (window_specification (opt_frame_clause GROUPS)))))",
        "description": "The optional <CodeLiteral>WINDOW</CodeLiteral> clause has the general form\n <code>WINDOW window_name AS ( window_definition ) [, ...]\n</code>\n where window_name is a name that can be referenced from <CodeLiteral>OVER</CodeLiteral> clauses or subsequent window definitions, and window_definition is\n <code>[ existing_window_name ]\n[ PARTITION BY expression [, ...] ]\n[ ORDER BY expression [ ASC | DESC | USING operator ] [ NULLS { FIRST | LAST } ] [, ...] ]\n[ frame_clause ]\n</code>\n If an existing_window_name is specified it must refer to an earlier entry in the <CodeLiteral>WINDOW</CodeLiteral> list; the new window copies its partitioning clause from that entry, as well as its ordering clause if any. In this case the new window cannot specify its own <CodeLiteral>PARTITION BY</CodeLiteral> clause, and it can specify <CodeLiteral>ORDER BY</CodeLiteral> only if the copied window does not have one. The new window always uses its own frame clause; the copied window must not specify a frame clause.\n The elements of the <CodeLiteral>PARTITION BY</CodeLiteral> list are interpreted in much the same fashion as elements of a <CodeLiteral>GROUP BY</CodeLiteral> Clause, except that they are always simple expressions and never the name or number of an output column. Another difference is that these expressions can contain aggregate function calls, which are not allowed in a regular <CodeLiteral>GROUP BY</CodeLiteral> clause. They are allowed here because windowing occurs after grouping and aggregation.\n Similarly, the elements of the <CodeLiteral>ORDER BY</CodeLiteral> list are interpreted in much the same fashion as elements of an <CodeLiteral>ORDER BY</CodeLiteral> Clause, except that the expressions are always taken as simple expressions and never the name or number of an output column.\n The optional frame_clause defines the window frame for window functions that depend on the frame (not all do). The window frame is a set of related rows for each row of the query (called the current row). The frame_clause can be one of\n <code>{ RANGE | ROWS | GROUPS } frame_start [ frame_exclusion ]\n{ RANGE | ROWS | GROUPS } BETWEEN frame_start AND frame_end [ frame_exclusion ]\n</code>\n where frame_start and frame_end can be one of\n <code>UNBOUNDED PRECEDING\noffset PRECEDING\nCURRENT ROW\noffset FOLLOWING\nUNBOUNDED FOLLOWING\n</code>\n and frame_exclusion can be one of\n <code>EXCLUDE CURRENT ROW\nEXCLUDE GROUP\nEXCLUDE TIES\nEXCLUDE NO OTHERS\n</code>\n If frame_end is omitted it defaults to <CodeLiteral>CURRENT ROW</CodeLiteral>. Restrictions are that frame_start cannot be <CodeLiteral>UNBOUNDED FOLLOWING</CodeLiteral>, frame_end cannot be <CodeLiteral>UNBOUNDED PRECEDING</CodeLiteral>, and the frame_end choice cannot appear earlier in the above list of frame_start and frame_end options than the frame_start choice does \u2014 for example <CodeLiteral>RANGE BETWEEN CURRENT ROW AND offset PRECEDING</CodeLiteral> is not allowed.\n The default framing option is <CodeLiteral>RANGE UNBOUNDED PRECEDING</CodeLiteral>, which is the same as <CodeLiteral>RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW</CodeLiteral>; it sets the frame to be all rows from the partition start up through the current row's last peer (a row that the window's <CodeLiteral>ORDER BY</CodeLiteral> clause considers equivalent to the current row; all rows are peers if there is no <CodeLiteral>ORDER BY</CodeLiteral>). In general, <CodeLiteral>UNBOUNDED PRECEDING</CodeLiteral> means that the frame starts with the first row of the partition, and similarly <CodeLiteral>UNBOUNDED FOLLOWING</CodeLiteral> means that the frame ends with the last row of the partition, regardless of <CodeLiteral>RANGE</CodeLiteral>, <CodeLiteral>ROWS</CodeLiteral> or <CodeLiteral>GROUPS</CodeLiteral> mode. In <CodeLiteral>ROWS</CodeLiteral> mode, <CodeLiteral>CURRENT ROW</CodeLiteral> means that the frame starts or ends with the current row; but in <CodeLiteral>RANGE</CodeLiteral> or <CodeLiteral>GROUPS</CodeLiteral> mode it means that the frame starts or ends with the current row's first or last peer in the <CodeLiteral>ORDER BY</CodeLiteral> ordering. The offset <CodeLiteral>PRECEDING</CodeLiteral> and offset <CodeLiteral>FOLLOWING</CodeLiteral> options vary in meaning depending on the frame mode. In <CodeLiteral>ROWS</CodeLiteral> mode, the offset is an integer indicating that the frame starts or ends that many rows before or after the current row. In <CodeLiteral>GROUPS</CodeLiteral> mode, the offset is an integer indicating that the frame starts or ends that many peer groups before or after the current row's peer group, where a peer group is a group of rows that are equivalent according to the window's <CodeLiteral>ORDER BY</CodeLiteral> clause. In <CodeLiteral>RANGE</CodeLiteral> mode, use of an offset option requires that there be exactly one <CodeLiteral>ORDER BY</CodeLiteral> column in the window definition. Then the frame contains those rows whose ordering column value is no more than offset less than (for <CodeLiteral>PRECEDING</CodeLiteral>) or more than (for <CodeLiteral>FOLLOWING</CodeLiteral>) the current row's ordering column value. In these cases the data type of the offset expression depends on the data type of the ordering column. For numeric ordering columns it is typically of the same type as the ordering column, but for datetime ordering columns it is an interval. In all these cases, the value of the offset must be non-null and non-negative. Also, while the offset does not have to be a simple constant, it cannot contain variables, aggregate functions, or window functions.\n The frame_exclusion option allows rows around the current row to be excluded from the frame, even if they would be included according to the frame start and frame end options. <CodeLiteral>EXCLUDE CURRENT ROW</CodeLiteral> excludes the current row from the frame. <CodeLiteral>EXCLUDE GROUP</CodeLiteral> excludes the current row and its ordering peers from the frame. <CodeLiteral>EXCLUDE TIES</CodeLiteral> excludes any peers of the current row from the frame, but not the current row itself. <CodeLiteral>EXCLUDE NO OTHERS</CodeLiteral> simply specifies explicitly the default behavior of not excluding the current row or its peers.\n Beware that the <CodeLiteral>ROWS</CodeLiteral> mode can produce unpredictable results if the <CodeLiteral>ORDER BY</CodeLiteral> ordering does not order the rows uniquely. The <CodeLiteral>RANGE</CodeLiteral> and <CodeLiteral>GROUPS</CodeLiteral> modes are designed to ensure that rows that are peers in the <CodeLiteral>ORDER BY</CodeLiteral> ordering are treated alike: all rows of a given peer group will be in the frame or excluded from it.\n The purpose of a <CodeLiteral>WINDOW</CodeLiteral> clause is to specify the behavior of window functions appearing in the query's SELECT List or <CodeLiteral>ORDER BY</CodeLiteral> Clause. These functions can reference the <CodeLiteral>WINDOW</CodeLiteral> clause entries by name in their <CodeLiteral>OVER</CodeLiteral> clauses. A <CodeLiteral>WINDOW</CodeLiteral> clause entry does not have to be referenced anywhere, however; if it is not used in the query it is simply ignored. It is possible to use window functions without any <CodeLiteral>WINDOW</CodeLiteral> clause at all, since a window function call can specify its window definition directly in its <CodeLiteral>OVER</CodeLiteral> clause. However, the <CodeLiteral>WINDOW</CodeLiteral> clause saves typing when the same window definition is needed for more than one window function.\n Currently, <CodeLiteral>FOR NO KEY UPDATE</CodeLiteral>, <CodeLiteral>FOR UPDATE</CodeLiteral>, <CodeLiteral>FOR SHARE</CodeLiteral> and <CodeLiteral>FOR KEY SHARE</CodeLiteral> cannot be specified with <CodeLiteral>WINDOW</CodeLiteral>.\n Window functions are described in detail in Section 3.5, Section 4.2.8, and Section 7.2.5. ",
        "detail": "[DESCRIPTION]: The optional <CodeLiteral>WINDOW</CodeLiteral> clause has the general form\n <code>WINDOW window_name AS ( window_definition ) [, ...]\n</code>\n where window_name is a name that can be referenced from <CodeLiteral>OVER</CodeLiteral> clauses or subsequent window definitions, and window_definition is\n <code>[ existing_window_name ]\n[ PARTITION BY expression [, ...] ]\n[ ORDER BY expression [ ASC | DESC | USING operator ] [ NULLS { FIRST | LAST } ] [, ...] ]\n[ frame_clause ]\n</code>\n If an existing_window_name is specified it must refer to an earlier entry in the <CodeLiteral>WINDOW</CodeLiteral> list; the new window copies its partitioning clause from that entry, as well as its ordering clause if any. In this case the new window cannot specify its own <CodeLiteral>PARTITION BY</CodeLiteral> clause, and it can specify <CodeLiteral>ORDER BY</CodeLiteral> only if the copied window does not have one. The new window always uses its own frame clause; the copied window must not specify a frame clause.\n The elements of the <CodeLiteral>PARTITION BY</CodeLiteral> list are interpreted in much the same fashion as elements of a <CodeLiteral>GROUP BY</CodeLiteral> Clause, except that they are always simple expressions and never the name or number of an output column. Another difference is that these expressions can contain aggregate function calls, which are not allowed in a regular <CodeLiteral>GROUP BY</CodeLiteral> clause. They are allowed here because windowing occurs after grouping and aggregation.\n Similarly, the elements of the <CodeLiteral>ORDER BY</CodeLiteral> list are interpreted in much the same fashion as elements of an <CodeLiteral>ORDER BY</CodeLiteral> Clause, except that the expressions are always taken as simple expressions and never the name or number of an output column.\n The optional frame_clause defines the window frame for window functions that depend on the frame (not all do). The window frame is a set of related rows for each row of the query (called the current row). The frame_clause can be one of\n <code>{ RANGE | ROWS | GROUPS } frame_start [ frame_exclusion ]\n{ RANGE | ROWS | GROUPS } BETWEEN frame_start AND frame_end [ frame_exclusion ]\n</code>\n where frame_start and frame_end can be one of\n <code>UNBOUNDED PRECEDING\noffset PRECEDING\nCURRENT ROW\noffset FOLLOWING\nUNBOUNDED FOLLOWING\n</code>\n and frame_exclusion can be one of\n <code>EXCLUDE CURRENT ROW\nEXCLUDE GROUP\nEXCLUDE TIES\nEXCLUDE NO OTHERS\n</code>\n If frame_end is omitted it defaults to <CodeLiteral>CURRENT ROW</CodeLiteral>. Restrictions are that frame_start cannot be <CodeLiteral>UNBOUNDED FOLLOWING</CodeLiteral>, frame_end cannot be <CodeLiteral>UNBOUNDED PRECEDING</CodeLiteral>, and the frame_end choice cannot appear earlier in the above list of frame_start and frame_end options than the frame_start choice does \u2014 for example <CodeLiteral>RANGE BETWEEN CURRENT ROW AND offset PRECEDING</CodeLiteral> is not allowed.\n The default framing option is <CodeLiteral>RANGE UNBOUNDED PRECEDING</CodeLiteral>, which is the same as <CodeLiteral>RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW</CodeLiteral>; it sets the frame to be all rows from the partition start up through the current row's last peer (a row that the window's <CodeLiteral>ORDER BY</CodeLiteral> clause considers equivalent to the current row; all rows are peers if there is no <CodeLiteral>ORDER BY</CodeLiteral>). In general, <CodeLiteral>UNBOUNDED PRECEDING</CodeLiteral> means that the frame starts with the first row of the partition, and similarly <CodeLiteral>UNBOUNDED FOLLOWING</CodeLiteral> means that the frame ends with the last row of the partition, regardless of <CodeLiteral>RANGE</CodeLiteral>, <CodeLiteral>ROWS</CodeLiteral> or <CodeLiteral>GROUPS</CodeLiteral> mode. In <CodeLiteral>ROWS</CodeLiteral> mode, <CodeLiteral>CURRENT ROW</CodeLiteral> means that the frame starts or ends with the current row; but in <CodeLiteral>RANGE</CodeLiteral> or <CodeLiteral>GROUPS</CodeLiteral> mode it means that the frame starts or ends with the current row's first or last peer in the <CodeLiteral>ORDER BY</CodeLiteral> ordering. The offset <CodeLiteral>PRECEDING</CodeLiteral> and offset <CodeLiteral>FOLLOWING</CodeLiteral> options vary in meaning depending on the frame mode. In <CodeLiteral>ROWS</CodeLiteral> mode, the offset is an integer indicating that the frame starts or ends that many rows before or after the current row. In <CodeLiteral>GROUPS</CodeLiteral> mode, the offset is an integer indicating that the frame starts or ends that many peer groups before or after the current row's peer group, where a peer group is a group of rows that are equivalent according to the window's <CodeLiteral>ORDER BY</CodeLiteral> clause. In <CodeLiteral>RANGE</CodeLiteral> mode, use of an offset option requires that there be exactly one <CodeLiteral>ORDER BY</CodeLiteral> column in the window definition. Then the frame contains those rows whose ordering column value is no more than offset less than (for <CodeLiteral>PRECEDING</CodeLiteral>) or more than (for <CodeLiteral>FOLLOWING</CodeLiteral>) the current row's ordering column value. In these cases the data type of the offset expression depends on the data type of the ordering column. For numeric ordering columns it is typically of the same type as the ordering column, but for datetime ordering columns it is an interval. In all these cases, the value of the offset must be non-null and non-negative. Also, while the offset does not have to be a simple constant, it cannot contain variables, aggregate functions, or window functions.\n The frame_exclusion option allows rows around the current row to be excluded from the frame, even if they would be included according to the frame start and frame end options. <CodeLiteral>EXCLUDE CURRENT ROW</CodeLiteral> excludes the current row from the frame. <CodeLiteral>EXCLUDE GROUP</CodeLiteral> excludes the current row and its ordering peers from the frame. <CodeLiteral>EXCLUDE TIES</CodeLiteral> excludes any peers of the current row from the frame, but not the current row itself. <CodeLiteral>EXCLUDE NO OTHERS</CodeLiteral> simply specifies explicitly the default behavior of not excluding the current row or its peers.\n Beware that the <CodeLiteral>ROWS</CodeLiteral> mode can produce unpredictable results if the <CodeLiteral>ORDER BY</CodeLiteral> ordering does not order the rows uniquely. The <CodeLiteral>RANGE</CodeLiteral> and <CodeLiteral>GROUPS</CodeLiteral> modes are designed to ensure that rows that are peers in the <CodeLiteral>ORDER BY</CodeLiteral> ordering are treated alike: all rows of a given peer group will be in the frame or excluded from it.\n The purpose of a <CodeLiteral>WINDOW</CodeLiteral> clause is to specify the behavior of window functions appearing in the query's SELECT List or <CodeLiteral>ORDER BY</CodeLiteral> Clause. These functions can reference the <CodeLiteral>WINDOW</CodeLiteral> clause entries by name in their <CodeLiteral>OVER</CodeLiteral> clauses. A <CodeLiteral>WINDOW</CodeLiteral> clause entry does not have to be referenced anywhere, however; if it is not used in the query it is simply ignored. It is possible to use window functions without any <CodeLiteral>WINDOW</CodeLiteral> clause at all, since a window function call can specify its window definition directly in its <CodeLiteral>OVER</CodeLiteral> clause. However, the <CodeLiteral>WINDOW</CodeLiteral> clause saves typing when the same window definition is needed for more than one window function.\n Currently, <CodeLiteral>FOR NO KEY UPDATE</CodeLiteral>, <CodeLiteral>FOR UPDATE</CodeLiteral>, <CodeLiteral>FOR SHARE</CodeLiteral> and <CodeLiteral>FOR KEY SHARE</CodeLiteral> cannot be specified with <CodeLiteral>WINDOW</CodeLiteral>.\n Window functions are described in detail in Section 3.5, Section 4.2.8, and Section 7.2.5. <sep>[DEMO]: ",
        "example": [
            ""
        ],
        "link": []
    },
    {
        "type": "keyword",
        "keyword": "WINDOW window_name AS ( RANGE BETWEEN frame_start AND frame_end ) ",
        "tree": " (window_clause WINDOW (window_definition_list (window_definition AS (window_specification (opt_frame_clause RANGE (frame_extent BETWEEN AND))))))",
        "description": "The optional <CodeLiteral>WINDOW</CodeLiteral> clause has the general form\n <code>WINDOW window_name AS ( window_definition ) [, ...]\n</code>\n where window_name is a name that can be referenced from <CodeLiteral>OVER</CodeLiteral> clauses or subsequent window definitions, and window_definition is\n <code>[ existing_window_name ]\n[ PARTITION BY expression [, ...] ]\n[ ORDER BY expression [ ASC | DESC | USING operator ] [ NULLS { FIRST | LAST } ] [, ...] ]\n[ frame_clause ]\n</code>\n If an existing_window_name is specified it must refer to an earlier entry in the <CodeLiteral>WINDOW</CodeLiteral> list; the new window copies its partitioning clause from that entry, as well as its ordering clause if any. In this case the new window cannot specify its own <CodeLiteral>PARTITION BY</CodeLiteral> clause, and it can specify <CodeLiteral>ORDER BY</CodeLiteral> only if the copied window does not have one. The new window always uses its own frame clause; the copied window must not specify a frame clause.\n The elements of the <CodeLiteral>PARTITION BY</CodeLiteral> list are interpreted in much the same fashion as elements of a <CodeLiteral>GROUP BY</CodeLiteral> Clause, except that they are always simple expressions and never the name or number of an output column. Another difference is that these expressions can contain aggregate function calls, which are not allowed in a regular <CodeLiteral>GROUP BY</CodeLiteral> clause. They are allowed here because windowing occurs after grouping and aggregation.\n Similarly, the elements of the <CodeLiteral>ORDER BY</CodeLiteral> list are interpreted in much the same fashion as elements of an <CodeLiteral>ORDER BY</CodeLiteral> Clause, except that the expressions are always taken as simple expressions and never the name or number of an output column.\n The optional frame_clause defines the window frame for window functions that depend on the frame (not all do). The window frame is a set of related rows for each row of the query (called the current row). The frame_clause can be one of\n <code>{ RANGE | ROWS | GROUPS } frame_start [ frame_exclusion ]\n{ RANGE | ROWS | GROUPS } BETWEEN frame_start AND frame_end [ frame_exclusion ]\n</code>\n where frame_start and frame_end can be one of\n <code>UNBOUNDED PRECEDING\noffset PRECEDING\nCURRENT ROW\noffset FOLLOWING\nUNBOUNDED FOLLOWING\n</code>\n and frame_exclusion can be one of\n <code>EXCLUDE CURRENT ROW\nEXCLUDE GROUP\nEXCLUDE TIES\nEXCLUDE NO OTHERS\n</code>\n If frame_end is omitted it defaults to <CodeLiteral>CURRENT ROW</CodeLiteral>. Restrictions are that frame_start cannot be <CodeLiteral>UNBOUNDED FOLLOWING</CodeLiteral>, frame_end cannot be <CodeLiteral>UNBOUNDED PRECEDING</CodeLiteral>, and the frame_end choice cannot appear earlier in the above list of frame_start and frame_end options than the frame_start choice does \u2014 for example <CodeLiteral>RANGE BETWEEN CURRENT ROW AND offset PRECEDING</CodeLiteral> is not allowed.\n The default framing option is <CodeLiteral>RANGE UNBOUNDED PRECEDING</CodeLiteral>, which is the same as <CodeLiteral>RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW</CodeLiteral>; it sets the frame to be all rows from the partition start up through the current row's last peer (a row that the window's <CodeLiteral>ORDER BY</CodeLiteral> clause considers equivalent to the current row; all rows are peers if there is no <CodeLiteral>ORDER BY</CodeLiteral>). In general, <CodeLiteral>UNBOUNDED PRECEDING</CodeLiteral> means that the frame starts with the first row of the partition, and similarly <CodeLiteral>UNBOUNDED FOLLOWING</CodeLiteral> means that the frame ends with the last row of the partition, regardless of <CodeLiteral>RANGE</CodeLiteral>, <CodeLiteral>ROWS</CodeLiteral> or <CodeLiteral>GROUPS</CodeLiteral> mode. In <CodeLiteral>ROWS</CodeLiteral> mode, <CodeLiteral>CURRENT ROW</CodeLiteral> means that the frame starts or ends with the current row; but in <CodeLiteral>RANGE</CodeLiteral> or <CodeLiteral>GROUPS</CodeLiteral> mode it means that the frame starts or ends with the current row's first or last peer in the <CodeLiteral>ORDER BY</CodeLiteral> ordering. The offset <CodeLiteral>PRECEDING</CodeLiteral> and offset <CodeLiteral>FOLLOWING</CodeLiteral> options vary in meaning depending on the frame mode. In <CodeLiteral>ROWS</CodeLiteral> mode, the offset is an integer indicating that the frame starts or ends that many rows before or after the current row. In <CodeLiteral>GROUPS</CodeLiteral> mode, the offset is an integer indicating that the frame starts or ends that many peer groups before or after the current row's peer group, where a peer group is a group of rows that are equivalent according to the window's <CodeLiteral>ORDER BY</CodeLiteral> clause. In <CodeLiteral>RANGE</CodeLiteral> mode, use of an offset option requires that there be exactly one <CodeLiteral>ORDER BY</CodeLiteral> column in the window definition. Then the frame contains those rows whose ordering column value is no more than offset less than (for <CodeLiteral>PRECEDING</CodeLiteral>) or more than (for <CodeLiteral>FOLLOWING</CodeLiteral>) the current row's ordering column value. In these cases the data type of the offset expression depends on the data type of the ordering column. For numeric ordering columns it is typically of the same type as the ordering column, but for datetime ordering columns it is an interval. In all these cases, the value of the offset must be non-null and non-negative. Also, while the offset does not have to be a simple constant, it cannot contain variables, aggregate functions, or window functions.\n The frame_exclusion option allows rows around the current row to be excluded from the frame, even if they would be included according to the frame start and frame end options. <CodeLiteral>EXCLUDE CURRENT ROW</CodeLiteral> excludes the current row from the frame. <CodeLiteral>EXCLUDE GROUP</CodeLiteral> excludes the current row and its ordering peers from the frame. <CodeLiteral>EXCLUDE TIES</CodeLiteral> excludes any peers of the current row from the frame, but not the current row itself. <CodeLiteral>EXCLUDE NO OTHERS</CodeLiteral> simply specifies explicitly the default behavior of not excluding the current row or its peers.\n Beware that the <CodeLiteral>ROWS</CodeLiteral> mode can produce unpredictable results if the <CodeLiteral>ORDER BY</CodeLiteral> ordering does not order the rows uniquely. The <CodeLiteral>RANGE</CodeLiteral> and <CodeLiteral>GROUPS</CodeLiteral> modes are designed to ensure that rows that are peers in the <CodeLiteral>ORDER BY</CodeLiteral> ordering are treated alike: all rows of a given peer group will be in the frame or excluded from it.\n The purpose of a <CodeLiteral>WINDOW</CodeLiteral> clause is to specify the behavior of window functions appearing in the query's SELECT List or <CodeLiteral>ORDER BY</CodeLiteral> Clause. These functions can reference the <CodeLiteral>WINDOW</CodeLiteral> clause entries by name in their <CodeLiteral>OVER</CodeLiteral> clauses. A <CodeLiteral>WINDOW</CodeLiteral> clause entry does not have to be referenced anywhere, however; if it is not used in the query it is simply ignored. It is possible to use window functions without any <CodeLiteral>WINDOW</CodeLiteral> clause at all, since a window function call can specify its window definition directly in its <CodeLiteral>OVER</CodeLiteral> clause. However, the <CodeLiteral>WINDOW</CodeLiteral> clause saves typing when the same window definition is needed for more than one window function.\n Currently, <CodeLiteral>FOR NO KEY UPDATE</CodeLiteral>, <CodeLiteral>FOR UPDATE</CodeLiteral>, <CodeLiteral>FOR SHARE</CodeLiteral> and <CodeLiteral>FOR KEY SHARE</CodeLiteral> cannot be specified with <CodeLiteral>WINDOW</CodeLiteral>.\n Window functions are described in detail in Section 3.5, Section 4.2.8, and Section 7.2.5. ",
        "detail": "[DESCRIPTION]: The optional <CodeLiteral>WINDOW</CodeLiteral> clause has the general form\n <code>WINDOW window_name AS ( window_definition ) [, ...]\n</code>\n where window_name is a name that can be referenced from <CodeLiteral>OVER</CodeLiteral> clauses or subsequent window definitions, and window_definition is\n <code>[ existing_window_name ]\n[ PARTITION BY expression [, ...] ]\n[ ORDER BY expression [ ASC | DESC | USING operator ] [ NULLS { FIRST | LAST } ] [, ...] ]\n[ frame_clause ]\n</code>\n If an existing_window_name is specified it must refer to an earlier entry in the <CodeLiteral>WINDOW</CodeLiteral> list; the new window copies its partitioning clause from that entry, as well as its ordering clause if any. In this case the new window cannot specify its own <CodeLiteral>PARTITION BY</CodeLiteral> clause, and it can specify <CodeLiteral>ORDER BY</CodeLiteral> only if the copied window does not have one. The new window always uses its own frame clause; the copied window must not specify a frame clause.\n The elements of the <CodeLiteral>PARTITION BY</CodeLiteral> list are interpreted in much the same fashion as elements of a <CodeLiteral>GROUP BY</CodeLiteral> Clause, except that they are always simple expressions and never the name or number of an output column. Another difference is that these expressions can contain aggregate function calls, which are not allowed in a regular <CodeLiteral>GROUP BY</CodeLiteral> clause. They are allowed here because windowing occurs after grouping and aggregation.\n Similarly, the elements of the <CodeLiteral>ORDER BY</CodeLiteral> list are interpreted in much the same fashion as elements of an <CodeLiteral>ORDER BY</CodeLiteral> Clause, except that the expressions are always taken as simple expressions and never the name or number of an output column.\n The optional frame_clause defines the window frame for window functions that depend on the frame (not all do). The window frame is a set of related rows for each row of the query (called the current row). The frame_clause can be one of\n <code>{ RANGE | ROWS | GROUPS } frame_start [ frame_exclusion ]\n{ RANGE | ROWS | GROUPS } BETWEEN frame_start AND frame_end [ frame_exclusion ]\n</code>\n where frame_start and frame_end can be one of\n <code>UNBOUNDED PRECEDING\noffset PRECEDING\nCURRENT ROW\noffset FOLLOWING\nUNBOUNDED FOLLOWING\n</code>\n and frame_exclusion can be one of\n <code>EXCLUDE CURRENT ROW\nEXCLUDE GROUP\nEXCLUDE TIES\nEXCLUDE NO OTHERS\n</code>\n If frame_end is omitted it defaults to <CodeLiteral>CURRENT ROW</CodeLiteral>. Restrictions are that frame_start cannot be <CodeLiteral>UNBOUNDED FOLLOWING</CodeLiteral>, frame_end cannot be <CodeLiteral>UNBOUNDED PRECEDING</CodeLiteral>, and the frame_end choice cannot appear earlier in the above list of frame_start and frame_end options than the frame_start choice does \u2014 for example <CodeLiteral>RANGE BETWEEN CURRENT ROW AND offset PRECEDING</CodeLiteral> is not allowed.\n The default framing option is <CodeLiteral>RANGE UNBOUNDED PRECEDING</CodeLiteral>, which is the same as <CodeLiteral>RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW</CodeLiteral>; it sets the frame to be all rows from the partition start up through the current row's last peer (a row that the window's <CodeLiteral>ORDER BY</CodeLiteral> clause considers equivalent to the current row; all rows are peers if there is no <CodeLiteral>ORDER BY</CodeLiteral>). In general, <CodeLiteral>UNBOUNDED PRECEDING</CodeLiteral> means that the frame starts with the first row of the partition, and similarly <CodeLiteral>UNBOUNDED FOLLOWING</CodeLiteral> means that the frame ends with the last row of the partition, regardless of <CodeLiteral>RANGE</CodeLiteral>, <CodeLiteral>ROWS</CodeLiteral> or <CodeLiteral>GROUPS</CodeLiteral> mode. In <CodeLiteral>ROWS</CodeLiteral> mode, <CodeLiteral>CURRENT ROW</CodeLiteral> means that the frame starts or ends with the current row; but in <CodeLiteral>RANGE</CodeLiteral> or <CodeLiteral>GROUPS</CodeLiteral> mode it means that the frame starts or ends with the current row's first or last peer in the <CodeLiteral>ORDER BY</CodeLiteral> ordering. The offset <CodeLiteral>PRECEDING</CodeLiteral> and offset <CodeLiteral>FOLLOWING</CodeLiteral> options vary in meaning depending on the frame mode. In <CodeLiteral>ROWS</CodeLiteral> mode, the offset is an integer indicating that the frame starts or ends that many rows before or after the current row. In <CodeLiteral>GROUPS</CodeLiteral> mode, the offset is an integer indicating that the frame starts or ends that many peer groups before or after the current row's peer group, where a peer group is a group of rows that are equivalent according to the window's <CodeLiteral>ORDER BY</CodeLiteral> clause. In <CodeLiteral>RANGE</CodeLiteral> mode, use of an offset option requires that there be exactly one <CodeLiteral>ORDER BY</CodeLiteral> column in the window definition. Then the frame contains those rows whose ordering column value is no more than offset less than (for <CodeLiteral>PRECEDING</CodeLiteral>) or more than (for <CodeLiteral>FOLLOWING</CodeLiteral>) the current row's ordering column value. In these cases the data type of the offset expression depends on the data type of the ordering column. For numeric ordering columns it is typically of the same type as the ordering column, but for datetime ordering columns it is an interval. In all these cases, the value of the offset must be non-null and non-negative. Also, while the offset does not have to be a simple constant, it cannot contain variables, aggregate functions, or window functions.\n The frame_exclusion option allows rows around the current row to be excluded from the frame, even if they would be included according to the frame start and frame end options. <CodeLiteral>EXCLUDE CURRENT ROW</CodeLiteral> excludes the current row from the frame. <CodeLiteral>EXCLUDE GROUP</CodeLiteral> excludes the current row and its ordering peers from the frame. <CodeLiteral>EXCLUDE TIES</CodeLiteral> excludes any peers of the current row from the frame, but not the current row itself. <CodeLiteral>EXCLUDE NO OTHERS</CodeLiteral> simply specifies explicitly the default behavior of not excluding the current row or its peers.\n Beware that the <CodeLiteral>ROWS</CodeLiteral> mode can produce unpredictable results if the <CodeLiteral>ORDER BY</CodeLiteral> ordering does not order the rows uniquely. The <CodeLiteral>RANGE</CodeLiteral> and <CodeLiteral>GROUPS</CodeLiteral> modes are designed to ensure that rows that are peers in the <CodeLiteral>ORDER BY</CodeLiteral> ordering are treated alike: all rows of a given peer group will be in the frame or excluded from it.\n The purpose of a <CodeLiteral>WINDOW</CodeLiteral> clause is to specify the behavior of window functions appearing in the query's SELECT List or <CodeLiteral>ORDER BY</CodeLiteral> Clause. These functions can reference the <CodeLiteral>WINDOW</CodeLiteral> clause entries by name in their <CodeLiteral>OVER</CodeLiteral> clauses. A <CodeLiteral>WINDOW</CodeLiteral> clause entry does not have to be referenced anywhere, however; if it is not used in the query it is simply ignored. It is possible to use window functions without any <CodeLiteral>WINDOW</CodeLiteral> clause at all, since a window function call can specify its window definition directly in its <CodeLiteral>OVER</CodeLiteral> clause. However, the <CodeLiteral>WINDOW</CodeLiteral> clause saves typing when the same window definition is needed for more than one window function.\n Currently, <CodeLiteral>FOR NO KEY UPDATE</CodeLiteral>, <CodeLiteral>FOR UPDATE</CodeLiteral>, <CodeLiteral>FOR SHARE</CodeLiteral> and <CodeLiteral>FOR KEY SHARE</CodeLiteral> cannot be specified with <CodeLiteral>WINDOW</CodeLiteral>.\n Window functions are described in detail in Section 3.5, Section 4.2.8, and Section 7.2.5. <sep>[DEMO]: ",
        "example": [
            ""
        ],
        "link": []
    },
    {
        "type": "keyword",
        "keyword": "WINDOW window_name AS ( ROWS BETWEEN frame_start AND frame_end ) ",
        "tree": " (window_clause WINDOW (window_definition_list (window_definition AS (window_specification (opt_frame_clause ROWS (frame_extent BETWEEN AND))))))",
        "description": "The optional <CodeLiteral>WINDOW</CodeLiteral> clause has the general form\n <code>WINDOW window_name AS ( window_definition ) [, ...]\n</code>\n where window_name is a name that can be referenced from <CodeLiteral>OVER</CodeLiteral> clauses or subsequent window definitions, and window_definition is\n <code>[ existing_window_name ]\n[ PARTITION BY expression [, ...] ]\n[ ORDER BY expression [ ASC | DESC | USING operator ] [ NULLS { FIRST | LAST } ] [, ...] ]\n[ frame_clause ]\n</code>\n If an existing_window_name is specified it must refer to an earlier entry in the <CodeLiteral>WINDOW</CodeLiteral> list; the new window copies its partitioning clause from that entry, as well as its ordering clause if any. In this case the new window cannot specify its own <CodeLiteral>PARTITION BY</CodeLiteral> clause, and it can specify <CodeLiteral>ORDER BY</CodeLiteral> only if the copied window does not have one. The new window always uses its own frame clause; the copied window must not specify a frame clause.\n The elements of the <CodeLiteral>PARTITION BY</CodeLiteral> list are interpreted in much the same fashion as elements of a <CodeLiteral>GROUP BY</CodeLiteral> Clause, except that they are always simple expressions and never the name or number of an output column. Another difference is that these expressions can contain aggregate function calls, which are not allowed in a regular <CodeLiteral>GROUP BY</CodeLiteral> clause. They are allowed here because windowing occurs after grouping and aggregation.\n Similarly, the elements of the <CodeLiteral>ORDER BY</CodeLiteral> list are interpreted in much the same fashion as elements of an <CodeLiteral>ORDER BY</CodeLiteral> Clause, except that the expressions are always taken as simple expressions and never the name or number of an output column.\n The optional frame_clause defines the window frame for window functions that depend on the frame (not all do). The window frame is a set of related rows for each row of the query (called the current row). The frame_clause can be one of\n <code>{ RANGE | ROWS | GROUPS } frame_start [ frame_exclusion ]\n{ RANGE | ROWS | GROUPS } BETWEEN frame_start AND frame_end [ frame_exclusion ]\n</code>\n where frame_start and frame_end can be one of\n <code>UNBOUNDED PRECEDING\noffset PRECEDING\nCURRENT ROW\noffset FOLLOWING\nUNBOUNDED FOLLOWING\n</code>\n and frame_exclusion can be one of\n <code>EXCLUDE CURRENT ROW\nEXCLUDE GROUP\nEXCLUDE TIES\nEXCLUDE NO OTHERS\n</code>\n If frame_end is omitted it defaults to <CodeLiteral>CURRENT ROW</CodeLiteral>. Restrictions are that frame_start cannot be <CodeLiteral>UNBOUNDED FOLLOWING</CodeLiteral>, frame_end cannot be <CodeLiteral>UNBOUNDED PRECEDING</CodeLiteral>, and the frame_end choice cannot appear earlier in the above list of frame_start and frame_end options than the frame_start choice does \u2014 for example <CodeLiteral>RANGE BETWEEN CURRENT ROW AND offset PRECEDING</CodeLiteral> is not allowed.\n The default framing option is <CodeLiteral>RANGE UNBOUNDED PRECEDING</CodeLiteral>, which is the same as <CodeLiteral>RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW</CodeLiteral>; it sets the frame to be all rows from the partition start up through the current row's last peer (a row that the window's <CodeLiteral>ORDER BY</CodeLiteral> clause considers equivalent to the current row; all rows are peers if there is no <CodeLiteral>ORDER BY</CodeLiteral>). In general, <CodeLiteral>UNBOUNDED PRECEDING</CodeLiteral> means that the frame starts with the first row of the partition, and similarly <CodeLiteral>UNBOUNDED FOLLOWING</CodeLiteral> means that the frame ends with the last row of the partition, regardless of <CodeLiteral>RANGE</CodeLiteral>, <CodeLiteral>ROWS</CodeLiteral> or <CodeLiteral>GROUPS</CodeLiteral> mode. In <CodeLiteral>ROWS</CodeLiteral> mode, <CodeLiteral>CURRENT ROW</CodeLiteral> means that the frame starts or ends with the current row; but in <CodeLiteral>RANGE</CodeLiteral> or <CodeLiteral>GROUPS</CodeLiteral> mode it means that the frame starts or ends with the current row's first or last peer in the <CodeLiteral>ORDER BY</CodeLiteral> ordering. The offset <CodeLiteral>PRECEDING</CodeLiteral> and offset <CodeLiteral>FOLLOWING</CodeLiteral> options vary in meaning depending on the frame mode. In <CodeLiteral>ROWS</CodeLiteral> mode, the offset is an integer indicating that the frame starts or ends that many rows before or after the current row. In <CodeLiteral>GROUPS</CodeLiteral> mode, the offset is an integer indicating that the frame starts or ends that many peer groups before or after the current row's peer group, where a peer group is a group of rows that are equivalent according to the window's <CodeLiteral>ORDER BY</CodeLiteral> clause. In <CodeLiteral>RANGE</CodeLiteral> mode, use of an offset option requires that there be exactly one <CodeLiteral>ORDER BY</CodeLiteral> column in the window definition. Then the frame contains those rows whose ordering column value is no more than offset less than (for <CodeLiteral>PRECEDING</CodeLiteral>) or more than (for <CodeLiteral>FOLLOWING</CodeLiteral>) the current row's ordering column value. In these cases the data type of the offset expression depends on the data type of the ordering column. For numeric ordering columns it is typically of the same type as the ordering column, but for datetime ordering columns it is an interval. In all these cases, the value of the offset must be non-null and non-negative. Also, while the offset does not have to be a simple constant, it cannot contain variables, aggregate functions, or window functions.\n The frame_exclusion option allows rows around the current row to be excluded from the frame, even if they would be included according to the frame start and frame end options. <CodeLiteral>EXCLUDE CURRENT ROW</CodeLiteral> excludes the current row from the frame. <CodeLiteral>EXCLUDE GROUP</CodeLiteral> excludes the current row and its ordering peers from the frame. <CodeLiteral>EXCLUDE TIES</CodeLiteral> excludes any peers of the current row from the frame, but not the current row itself. <CodeLiteral>EXCLUDE NO OTHERS</CodeLiteral> simply specifies explicitly the default behavior of not excluding the current row or its peers.\n Beware that the <CodeLiteral>ROWS</CodeLiteral> mode can produce unpredictable results if the <CodeLiteral>ORDER BY</CodeLiteral> ordering does not order the rows uniquely. The <CodeLiteral>RANGE</CodeLiteral> and <CodeLiteral>GROUPS</CodeLiteral> modes are designed to ensure that rows that are peers in the <CodeLiteral>ORDER BY</CodeLiteral> ordering are treated alike: all rows of a given peer group will be in the frame or excluded from it.\n The purpose of a <CodeLiteral>WINDOW</CodeLiteral> clause is to specify the behavior of window functions appearing in the query's SELECT List or <CodeLiteral>ORDER BY</CodeLiteral> Clause. These functions can reference the <CodeLiteral>WINDOW</CodeLiteral> clause entries by name in their <CodeLiteral>OVER</CodeLiteral> clauses. A <CodeLiteral>WINDOW</CodeLiteral> clause entry does not have to be referenced anywhere, however; if it is not used in the query it is simply ignored. It is possible to use window functions without any <CodeLiteral>WINDOW</CodeLiteral> clause at all, since a window function call can specify its window definition directly in its <CodeLiteral>OVER</CodeLiteral> clause. However, the <CodeLiteral>WINDOW</CodeLiteral> clause saves typing when the same window definition is needed for more than one window function.\n Currently, <CodeLiteral>FOR NO KEY UPDATE</CodeLiteral>, <CodeLiteral>FOR UPDATE</CodeLiteral>, <CodeLiteral>FOR SHARE</CodeLiteral> and <CodeLiteral>FOR KEY SHARE</CodeLiteral> cannot be specified with <CodeLiteral>WINDOW</CodeLiteral>.\n Window functions are described in detail in Section 3.5, Section 4.2.8, and Section 7.2.5. ",
        "detail": "[DESCRIPTION]: The optional <CodeLiteral>WINDOW</CodeLiteral> clause has the general form\n <code>WINDOW window_name AS ( window_definition ) [, ...]\n</code>\n where window_name is a name that can be referenced from <CodeLiteral>OVER</CodeLiteral> clauses or subsequent window definitions, and window_definition is\n <code>[ existing_window_name ]\n[ PARTITION BY expression [, ...] ]\n[ ORDER BY expression [ ASC | DESC | USING operator ] [ NULLS { FIRST | LAST } ] [, ...] ]\n[ frame_clause ]\n</code>\n If an existing_window_name is specified it must refer to an earlier entry in the <CodeLiteral>WINDOW</CodeLiteral> list; the new window copies its partitioning clause from that entry, as well as its ordering clause if any. In this case the new window cannot specify its own <CodeLiteral>PARTITION BY</CodeLiteral> clause, and it can specify <CodeLiteral>ORDER BY</CodeLiteral> only if the copied window does not have one. The new window always uses its own frame clause; the copied window must not specify a frame clause.\n The elements of the <CodeLiteral>PARTITION BY</CodeLiteral> list are interpreted in much the same fashion as elements of a <CodeLiteral>GROUP BY</CodeLiteral> Clause, except that they are always simple expressions and never the name or number of an output column. Another difference is that these expressions can contain aggregate function calls, which are not allowed in a regular <CodeLiteral>GROUP BY</CodeLiteral> clause. They are allowed here because windowing occurs after grouping and aggregation.\n Similarly, the elements of the <CodeLiteral>ORDER BY</CodeLiteral> list are interpreted in much the same fashion as elements of an <CodeLiteral>ORDER BY</CodeLiteral> Clause, except that the expressions are always taken as simple expressions and never the name or number of an output column.\n The optional frame_clause defines the window frame for window functions that depend on the frame (not all do). The window frame is a set of related rows for each row of the query (called the current row). The frame_clause can be one of\n <code>{ RANGE | ROWS | GROUPS } frame_start [ frame_exclusion ]\n{ RANGE | ROWS | GROUPS } BETWEEN frame_start AND frame_end [ frame_exclusion ]\n</code>\n where frame_start and frame_end can be one of\n <code>UNBOUNDED PRECEDING\noffset PRECEDING\nCURRENT ROW\noffset FOLLOWING\nUNBOUNDED FOLLOWING\n</code>\n and frame_exclusion can be one of\n <code>EXCLUDE CURRENT ROW\nEXCLUDE GROUP\nEXCLUDE TIES\nEXCLUDE NO OTHERS\n</code>\n If frame_end is omitted it defaults to <CodeLiteral>CURRENT ROW</CodeLiteral>. Restrictions are that frame_start cannot be <CodeLiteral>UNBOUNDED FOLLOWING</CodeLiteral>, frame_end cannot be <CodeLiteral>UNBOUNDED PRECEDING</CodeLiteral>, and the frame_end choice cannot appear earlier in the above list of frame_start and frame_end options than the frame_start choice does \u2014 for example <CodeLiteral>RANGE BETWEEN CURRENT ROW AND offset PRECEDING</CodeLiteral> is not allowed.\n The default framing option is <CodeLiteral>RANGE UNBOUNDED PRECEDING</CodeLiteral>, which is the same as <CodeLiteral>RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW</CodeLiteral>; it sets the frame to be all rows from the partition start up through the current row's last peer (a row that the window's <CodeLiteral>ORDER BY</CodeLiteral> clause considers equivalent to the current row; all rows are peers if there is no <CodeLiteral>ORDER BY</CodeLiteral>). In general, <CodeLiteral>UNBOUNDED PRECEDING</CodeLiteral> means that the frame starts with the first row of the partition, and similarly <CodeLiteral>UNBOUNDED FOLLOWING</CodeLiteral> means that the frame ends with the last row of the partition, regardless of <CodeLiteral>RANGE</CodeLiteral>, <CodeLiteral>ROWS</CodeLiteral> or <CodeLiteral>GROUPS</CodeLiteral> mode. In <CodeLiteral>ROWS</CodeLiteral> mode, <CodeLiteral>CURRENT ROW</CodeLiteral> means that the frame starts or ends with the current row; but in <CodeLiteral>RANGE</CodeLiteral> or <CodeLiteral>GROUPS</CodeLiteral> mode it means that the frame starts or ends with the current row's first or last peer in the <CodeLiteral>ORDER BY</CodeLiteral> ordering. The offset <CodeLiteral>PRECEDING</CodeLiteral> and offset <CodeLiteral>FOLLOWING</CodeLiteral> options vary in meaning depending on the frame mode. In <CodeLiteral>ROWS</CodeLiteral> mode, the offset is an integer indicating that the frame starts or ends that many rows before or after the current row. In <CodeLiteral>GROUPS</CodeLiteral> mode, the offset is an integer indicating that the frame starts or ends that many peer groups before or after the current row's peer group, where a peer group is a group of rows that are equivalent according to the window's <CodeLiteral>ORDER BY</CodeLiteral> clause. In <CodeLiteral>RANGE</CodeLiteral> mode, use of an offset option requires that there be exactly one <CodeLiteral>ORDER BY</CodeLiteral> column in the window definition. Then the frame contains those rows whose ordering column value is no more than offset less than (for <CodeLiteral>PRECEDING</CodeLiteral>) or more than (for <CodeLiteral>FOLLOWING</CodeLiteral>) the current row's ordering column value. In these cases the data type of the offset expression depends on the data type of the ordering column. For numeric ordering columns it is typically of the same type as the ordering column, but for datetime ordering columns it is an interval. In all these cases, the value of the offset must be non-null and non-negative. Also, while the offset does not have to be a simple constant, it cannot contain variables, aggregate functions, or window functions.\n The frame_exclusion option allows rows around the current row to be excluded from the frame, even if they would be included according to the frame start and frame end options. <CodeLiteral>EXCLUDE CURRENT ROW</CodeLiteral> excludes the current row from the frame. <CodeLiteral>EXCLUDE GROUP</CodeLiteral> excludes the current row and its ordering peers from the frame. <CodeLiteral>EXCLUDE TIES</CodeLiteral> excludes any peers of the current row from the frame, but not the current row itself. <CodeLiteral>EXCLUDE NO OTHERS</CodeLiteral> simply specifies explicitly the default behavior of not excluding the current row or its peers.\n Beware that the <CodeLiteral>ROWS</CodeLiteral> mode can produce unpredictable results if the <CodeLiteral>ORDER BY</CodeLiteral> ordering does not order the rows uniquely. The <CodeLiteral>RANGE</CodeLiteral> and <CodeLiteral>GROUPS</CodeLiteral> modes are designed to ensure that rows that are peers in the <CodeLiteral>ORDER BY</CodeLiteral> ordering are treated alike: all rows of a given peer group will be in the frame or excluded from it.\n The purpose of a <CodeLiteral>WINDOW</CodeLiteral> clause is to specify the behavior of window functions appearing in the query's SELECT List or <CodeLiteral>ORDER BY</CodeLiteral> Clause. These functions can reference the <CodeLiteral>WINDOW</CodeLiteral> clause entries by name in their <CodeLiteral>OVER</CodeLiteral> clauses. A <CodeLiteral>WINDOW</CodeLiteral> clause entry does not have to be referenced anywhere, however; if it is not used in the query it is simply ignored. It is possible to use window functions without any <CodeLiteral>WINDOW</CodeLiteral> clause at all, since a window function call can specify its window definition directly in its <CodeLiteral>OVER</CodeLiteral> clause. However, the <CodeLiteral>WINDOW</CodeLiteral> clause saves typing when the same window definition is needed for more than one window function.\n Currently, <CodeLiteral>FOR NO KEY UPDATE</CodeLiteral>, <CodeLiteral>FOR UPDATE</CodeLiteral>, <CodeLiteral>FOR SHARE</CodeLiteral> and <CodeLiteral>FOR KEY SHARE</CodeLiteral> cannot be specified with <CodeLiteral>WINDOW</CodeLiteral>.\n Window functions are described in detail in Section 3.5, Section 4.2.8, and Section 7.2.5. <sep>[DEMO]: ",
        "example": [
            ""
        ],
        "link": []
    },
    {
        "type": "keyword",
        "keyword": "WINDOW window_name AS ( GROUPS BETWEEN frame_start AND frame_end ) ",
        "tree": " (window_clause WINDOW (window_definition_list (window_definition AS (window_specification (opt_frame_clause GROUPS (frame_extent BETWEEN AND))))))",
        "description": "The optional <CodeLiteral>WINDOW</CodeLiteral> clause has the general form\n <code>WINDOW window_name AS ( window_definition ) [, ...]\n</code>\n where window_name is a name that can be referenced from <CodeLiteral>OVER</CodeLiteral> clauses or subsequent window definitions, and window_definition is\n <code>[ existing_window_name ]\n[ PARTITION BY expression [, ...] ]\n[ ORDER BY expression [ ASC | DESC | USING operator ] [ NULLS { FIRST | LAST } ] [, ...] ]\n[ frame_clause ]\n</code>\n If an existing_window_name is specified it must refer to an earlier entry in the <CodeLiteral>WINDOW</CodeLiteral> list; the new window copies its partitioning clause from that entry, as well as its ordering clause if any. In this case the new window cannot specify its own <CodeLiteral>PARTITION BY</CodeLiteral> clause, and it can specify <CodeLiteral>ORDER BY</CodeLiteral> only if the copied window does not have one. The new window always uses its own frame clause; the copied window must not specify a frame clause.\n The elements of the <CodeLiteral>PARTITION BY</CodeLiteral> list are interpreted in much the same fashion as elements of a <CodeLiteral>GROUP BY</CodeLiteral> Clause, except that they are always simple expressions and never the name or number of an output column. Another difference is that these expressions can contain aggregate function calls, which are not allowed in a regular <CodeLiteral>GROUP BY</CodeLiteral> clause. They are allowed here because windowing occurs after grouping and aggregation.\n Similarly, the elements of the <CodeLiteral>ORDER BY</CodeLiteral> list are interpreted in much the same fashion as elements of an <CodeLiteral>ORDER BY</CodeLiteral> Clause, except that the expressions are always taken as simple expressions and never the name or number of an output column.\n The optional frame_clause defines the window frame for window functions that depend on the frame (not all do). The window frame is a set of related rows for each row of the query (called the current row). The frame_clause can be one of\n <code>{ RANGE | ROWS | GROUPS } frame_start [ frame_exclusion ]\n{ RANGE | ROWS | GROUPS } BETWEEN frame_start AND frame_end [ frame_exclusion ]\n</code>\n where frame_start and frame_end can be one of\n <code>UNBOUNDED PRECEDING\noffset PRECEDING\nCURRENT ROW\noffset FOLLOWING\nUNBOUNDED FOLLOWING\n</code>\n and frame_exclusion can be one of\n <code>EXCLUDE CURRENT ROW\nEXCLUDE GROUP\nEXCLUDE TIES\nEXCLUDE NO OTHERS\n</code>\n If frame_end is omitted it defaults to <CodeLiteral>CURRENT ROW</CodeLiteral>. Restrictions are that frame_start cannot be <CodeLiteral>UNBOUNDED FOLLOWING</CodeLiteral>, frame_end cannot be <CodeLiteral>UNBOUNDED PRECEDING</CodeLiteral>, and the frame_end choice cannot appear earlier in the above list of frame_start and frame_end options than the frame_start choice does \u2014 for example <CodeLiteral>RANGE BETWEEN CURRENT ROW AND offset PRECEDING</CodeLiteral> is not allowed.\n The default framing option is <CodeLiteral>RANGE UNBOUNDED PRECEDING</CodeLiteral>, which is the same as <CodeLiteral>RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW</CodeLiteral>; it sets the frame to be all rows from the partition start up through the current row's last peer (a row that the window's <CodeLiteral>ORDER BY</CodeLiteral> clause considers equivalent to the current row; all rows are peers if there is no <CodeLiteral>ORDER BY</CodeLiteral>). In general, <CodeLiteral>UNBOUNDED PRECEDING</CodeLiteral> means that the frame starts with the first row of the partition, and similarly <CodeLiteral>UNBOUNDED FOLLOWING</CodeLiteral> means that the frame ends with the last row of the partition, regardless of <CodeLiteral>RANGE</CodeLiteral>, <CodeLiteral>ROWS</CodeLiteral> or <CodeLiteral>GROUPS</CodeLiteral> mode. In <CodeLiteral>ROWS</CodeLiteral> mode, <CodeLiteral>CURRENT ROW</CodeLiteral> means that the frame starts or ends with the current row; but in <CodeLiteral>RANGE</CodeLiteral> or <CodeLiteral>GROUPS</CodeLiteral> mode it means that the frame starts or ends with the current row's first or last peer in the <CodeLiteral>ORDER BY</CodeLiteral> ordering. The offset <CodeLiteral>PRECEDING</CodeLiteral> and offset <CodeLiteral>FOLLOWING</CodeLiteral> options vary in meaning depending on the frame mode. In <CodeLiteral>ROWS</CodeLiteral> mode, the offset is an integer indicating that the frame starts or ends that many rows before or after the current row. In <CodeLiteral>GROUPS</CodeLiteral> mode, the offset is an integer indicating that the frame starts or ends that many peer groups before or after the current row's peer group, where a peer group is a group of rows that are equivalent according to the window's <CodeLiteral>ORDER BY</CodeLiteral> clause. In <CodeLiteral>RANGE</CodeLiteral> mode, use of an offset option requires that there be exactly one <CodeLiteral>ORDER BY</CodeLiteral> column in the window definition. Then the frame contains those rows whose ordering column value is no more than offset less than (for <CodeLiteral>PRECEDING</CodeLiteral>) or more than (for <CodeLiteral>FOLLOWING</CodeLiteral>) the current row's ordering column value. In these cases the data type of the offset expression depends on the data type of the ordering column. For numeric ordering columns it is typically of the same type as the ordering column, but for datetime ordering columns it is an interval. In all these cases, the value of the offset must be non-null and non-negative. Also, while the offset does not have to be a simple constant, it cannot contain variables, aggregate functions, or window functions.\n The frame_exclusion option allows rows around the current row to be excluded from the frame, even if they would be included according to the frame start and frame end options. <CodeLiteral>EXCLUDE CURRENT ROW</CodeLiteral> excludes the current row from the frame. <CodeLiteral>EXCLUDE GROUP</CodeLiteral> excludes the current row and its ordering peers from the frame. <CodeLiteral>EXCLUDE TIES</CodeLiteral> excludes any peers of the current row from the frame, but not the current row itself. <CodeLiteral>EXCLUDE NO OTHERS</CodeLiteral> simply specifies explicitly the default behavior of not excluding the current row or its peers.\n Beware that the <CodeLiteral>ROWS</CodeLiteral> mode can produce unpredictable results if the <CodeLiteral>ORDER BY</CodeLiteral> ordering does not order the rows uniquely. The <CodeLiteral>RANGE</CodeLiteral> and <CodeLiteral>GROUPS</CodeLiteral> modes are designed to ensure that rows that are peers in the <CodeLiteral>ORDER BY</CodeLiteral> ordering are treated alike: all rows of a given peer group will be in the frame or excluded from it.\n The purpose of a <CodeLiteral>WINDOW</CodeLiteral> clause is to specify the behavior of window functions appearing in the query's SELECT List or <CodeLiteral>ORDER BY</CodeLiteral> Clause. These functions can reference the <CodeLiteral>WINDOW</CodeLiteral> clause entries by name in their <CodeLiteral>OVER</CodeLiteral> clauses. A <CodeLiteral>WINDOW</CodeLiteral> clause entry does not have to be referenced anywhere, however; if it is not used in the query it is simply ignored. It is possible to use window functions without any <CodeLiteral>WINDOW</CodeLiteral> clause at all, since a window function call can specify its window definition directly in its <CodeLiteral>OVER</CodeLiteral> clause. However, the <CodeLiteral>WINDOW</CodeLiteral> clause saves typing when the same window definition is needed for more than one window function.\n Currently, <CodeLiteral>FOR NO KEY UPDATE</CodeLiteral>, <CodeLiteral>FOR UPDATE</CodeLiteral>, <CodeLiteral>FOR SHARE</CodeLiteral> and <CodeLiteral>FOR KEY SHARE</CodeLiteral> cannot be specified with <CodeLiteral>WINDOW</CodeLiteral>.\n Window functions are described in detail in Section 3.5, Section 4.2.8, and Section 7.2.5. ",
        "detail": "[DESCRIPTION]: The optional <CodeLiteral>WINDOW</CodeLiteral> clause has the general form\n <code>WINDOW window_name AS ( window_definition ) [, ...]\n</code>\n where window_name is a name that can be referenced from <CodeLiteral>OVER</CodeLiteral> clauses or subsequent window definitions, and window_definition is\n <code>[ existing_window_name ]\n[ PARTITION BY expression [, ...] ]\n[ ORDER BY expression [ ASC | DESC | USING operator ] [ NULLS { FIRST | LAST } ] [, ...] ]\n[ frame_clause ]\n</code>\n If an existing_window_name is specified it must refer to an earlier entry in the <CodeLiteral>WINDOW</CodeLiteral> list; the new window copies its partitioning clause from that entry, as well as its ordering clause if any. In this case the new window cannot specify its own <CodeLiteral>PARTITION BY</CodeLiteral> clause, and it can specify <CodeLiteral>ORDER BY</CodeLiteral> only if the copied window does not have one. The new window always uses its own frame clause; the copied window must not specify a frame clause.\n The elements of the <CodeLiteral>PARTITION BY</CodeLiteral> list are interpreted in much the same fashion as elements of a <CodeLiteral>GROUP BY</CodeLiteral> Clause, except that they are always simple expressions and never the name or number of an output column. Another difference is that these expressions can contain aggregate function calls, which are not allowed in a regular <CodeLiteral>GROUP BY</CodeLiteral> clause. They are allowed here because windowing occurs after grouping and aggregation.\n Similarly, the elements of the <CodeLiteral>ORDER BY</CodeLiteral> list are interpreted in much the same fashion as elements of an <CodeLiteral>ORDER BY</CodeLiteral> Clause, except that the expressions are always taken as simple expressions and never the name or number of an output column.\n The optional frame_clause defines the window frame for window functions that depend on the frame (not all do). The window frame is a set of related rows for each row of the query (called the current row). The frame_clause can be one of\n <code>{ RANGE | ROWS | GROUPS } frame_start [ frame_exclusion ]\n{ RANGE | ROWS | GROUPS } BETWEEN frame_start AND frame_end [ frame_exclusion ]\n</code>\n where frame_start and frame_end can be one of\n <code>UNBOUNDED PRECEDING\noffset PRECEDING\nCURRENT ROW\noffset FOLLOWING\nUNBOUNDED FOLLOWING\n</code>\n and frame_exclusion can be one of\n <code>EXCLUDE CURRENT ROW\nEXCLUDE GROUP\nEXCLUDE TIES\nEXCLUDE NO OTHERS\n</code>\n If frame_end is omitted it defaults to <CodeLiteral>CURRENT ROW</CodeLiteral>. Restrictions are that frame_start cannot be <CodeLiteral>UNBOUNDED FOLLOWING</CodeLiteral>, frame_end cannot be <CodeLiteral>UNBOUNDED PRECEDING</CodeLiteral>, and the frame_end choice cannot appear earlier in the above list of frame_start and frame_end options than the frame_start choice does \u2014 for example <CodeLiteral>RANGE BETWEEN CURRENT ROW AND offset PRECEDING</CodeLiteral> is not allowed.\n The default framing option is <CodeLiteral>RANGE UNBOUNDED PRECEDING</CodeLiteral>, which is the same as <CodeLiteral>RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW</CodeLiteral>; it sets the frame to be all rows from the partition start up through the current row's last peer (a row that the window's <CodeLiteral>ORDER BY</CodeLiteral> clause considers equivalent to the current row; all rows are peers if there is no <CodeLiteral>ORDER BY</CodeLiteral>). In general, <CodeLiteral>UNBOUNDED PRECEDING</CodeLiteral> means that the frame starts with the first row of the partition, and similarly <CodeLiteral>UNBOUNDED FOLLOWING</CodeLiteral> means that the frame ends with the last row of the partition, regardless of <CodeLiteral>RANGE</CodeLiteral>, <CodeLiteral>ROWS</CodeLiteral> or <CodeLiteral>GROUPS</CodeLiteral> mode. In <CodeLiteral>ROWS</CodeLiteral> mode, <CodeLiteral>CURRENT ROW</CodeLiteral> means that the frame starts or ends with the current row; but in <CodeLiteral>RANGE</CodeLiteral> or <CodeLiteral>GROUPS</CodeLiteral> mode it means that the frame starts or ends with the current row's first or last peer in the <CodeLiteral>ORDER BY</CodeLiteral> ordering. The offset <CodeLiteral>PRECEDING</CodeLiteral> and offset <CodeLiteral>FOLLOWING</CodeLiteral> options vary in meaning depending on the frame mode. In <CodeLiteral>ROWS</CodeLiteral> mode, the offset is an integer indicating that the frame starts or ends that many rows before or after the current row. In <CodeLiteral>GROUPS</CodeLiteral> mode, the offset is an integer indicating that the frame starts or ends that many peer groups before or after the current row's peer group, where a peer group is a group of rows that are equivalent according to the window's <CodeLiteral>ORDER BY</CodeLiteral> clause. In <CodeLiteral>RANGE</CodeLiteral> mode, use of an offset option requires that there be exactly one <CodeLiteral>ORDER BY</CodeLiteral> column in the window definition. Then the frame contains those rows whose ordering column value is no more than offset less than (for <CodeLiteral>PRECEDING</CodeLiteral>) or more than (for <CodeLiteral>FOLLOWING</CodeLiteral>) the current row's ordering column value. In these cases the data type of the offset expression depends on the data type of the ordering column. For numeric ordering columns it is typically of the same type as the ordering column, but for datetime ordering columns it is an interval. In all these cases, the value of the offset must be non-null and non-negative. Also, while the offset does not have to be a simple constant, it cannot contain variables, aggregate functions, or window functions.\n The frame_exclusion option allows rows around the current row to be excluded from the frame, even if they would be included according to the frame start and frame end options. <CodeLiteral>EXCLUDE CURRENT ROW</CodeLiteral> excludes the current row from the frame. <CodeLiteral>EXCLUDE GROUP</CodeLiteral> excludes the current row and its ordering peers from the frame. <CodeLiteral>EXCLUDE TIES</CodeLiteral> excludes any peers of the current row from the frame, but not the current row itself. <CodeLiteral>EXCLUDE NO OTHERS</CodeLiteral> simply specifies explicitly the default behavior of not excluding the current row or its peers.\n Beware that the <CodeLiteral>ROWS</CodeLiteral> mode can produce unpredictable results if the <CodeLiteral>ORDER BY</CodeLiteral> ordering does not order the rows uniquely. The <CodeLiteral>RANGE</CodeLiteral> and <CodeLiteral>GROUPS</CodeLiteral> modes are designed to ensure that rows that are peers in the <CodeLiteral>ORDER BY</CodeLiteral> ordering are treated alike: all rows of a given peer group will be in the frame or excluded from it.\n The purpose of a <CodeLiteral>WINDOW</CodeLiteral> clause is to specify the behavior of window functions appearing in the query's SELECT List or <CodeLiteral>ORDER BY</CodeLiteral> Clause. These functions can reference the <CodeLiteral>WINDOW</CodeLiteral> clause entries by name in their <CodeLiteral>OVER</CodeLiteral> clauses. A <CodeLiteral>WINDOW</CodeLiteral> clause entry does not have to be referenced anywhere, however; if it is not used in the query it is simply ignored. It is possible to use window functions without any <CodeLiteral>WINDOW</CodeLiteral> clause at all, since a window function call can specify its window definition directly in its <CodeLiteral>OVER</CodeLiteral> clause. However, the <CodeLiteral>WINDOW</CodeLiteral> clause saves typing when the same window definition is needed for more than one window function.\n Currently, <CodeLiteral>FOR NO KEY UPDATE</CodeLiteral>, <CodeLiteral>FOR UPDATE</CodeLiteral>, <CodeLiteral>FOR SHARE</CodeLiteral> and <CodeLiteral>FOR KEY SHARE</CodeLiteral> cannot be specified with <CodeLiteral>WINDOW</CodeLiteral>.\n Window functions are described in detail in Section 3.5, Section 4.2.8, and Section 7.2.5. <sep>[DEMO]: ",
        "example": [
            ""
        ],
        "link": []
    },
    {
        "type": "keyword",
        "keyword": "expression AS output_name",
        "tree": "(target_el AS)",
        "description": "The SELECT list (between the key words <CodeLiteral>SELECT</CodeLiteral> and <CodeLiteral>FROM</CodeLiteral>) specifies expressions that form the output rows of the SELECT statement. The expressions can (and usually do) refer to columns computed in the <CodeLiteral>FROM</CodeLiteral> clause.\n Just as in a table, every output column of a SELECT has a name. In a simple SELECT this name is just used to label the column for display, but when the SELECT is a sub-query of a larger query, the name is seen by the larger query as the column name of the virtual table produced by the sub-query. To specify the name to use for an output column, write <CodeLiteral>AS</CodeLiteral> output_name after the column's expression. (You can omit <CodeLiteral>AS</CodeLiteral>, but only if the desired output name does not match any PostgreSQL keyword (see Appendix C). For protection against possible future keyword additions, it is recommended that you always either write <CodeLiteral>AS</CodeLiteral> or double-quote the output name.) If you do not specify a column name, a name is chosen automatically by PostgreSQL. If the column's expression is a simple column reference then the chosen name is the same as that column's name. In more complex cases a function or type name may be used, or the system may fall back on a generated name such as <CodeLiteral>?column?</CodeLiteral>.\n An output column's name can be used to refer to the column's value in <CodeLiteral>ORDER BY</CodeLiteral> and <CodeLiteral>GROUP BY</CodeLiteral> clauses, but not in the <CodeLiteral>WHERE</CodeLiteral> or <CodeLiteral>HAVING</CodeLiteral> clauses; there you must write out the expression instead.\n Instead of an expression, <CodeLiteral>*</CodeLiteral> can be written in the output list as a shorthand for all the columns of the selected rows. Also, you can write <CodeLiteral>table_name.*</CodeLiteral> as a shorthand for the columns coming from just that table. In these cases it is not possible to specify new names with <CodeLiteral>AS</CodeLiteral>; the output column names will be the same as the table columns' names.\n According to the SQL standard, the expressions in the output list should be computed before applying <CodeLiteral>DISTINCT</CodeLiteral>, <CodeLiteral>ORDER BY</CodeLiteral>, or <CodeLiteral>LIMIT</CodeLiteral>. This is obviously necessary when using <CodeLiteral>DISTINCT</CodeLiteral>, since otherwise it's not clear what values are being made distinct. However, in many cases it is convenient if output expressions are computed after <CodeLiteral>ORDER BY</CodeLiteral> and <CodeLiteral>LIMIT</CodeLiteral>; particularly if the output list contains any volatile or expensive functions. With that behavior, the order of function evaluations is more intuitive and there will not be evaluations corresponding to rows that never appear in the output. PostgreSQL will effectively evaluate output expressions after sorting and limiting, so long as those expressions are not referenced in <CodeLiteral>DISTINCT</CodeLiteral>, <CodeLiteral>ORDER BY</CodeLiteral> or <CodeLiteral>GROUP BY</CodeLiteral>. (As a counterexample, <CodeLiteral>SELECT f(x) FROM tab ORDER BY 1</CodeLiteral> clearly must evaluate f(x) before sorting.) Output expressions that contain set-returning functions are effectively evaluated after sorting and before limiting, so that <CodeLiteral>LIMIT</CodeLiteral> will act to cut off the output from a set-returning function.\n \n  <ClauseName>Note</ClauseName>\n  PostgreSQL versions before 9.6 did not provide any guarantees about the timing of evaluation of output expressions versus sorting and limiting; it depended on the form of the chosen query plan. ",
        "detail": "[DESCRIPTION]: The SELECT list (between the key words <CodeLiteral>SELECT</CodeLiteral> and <CodeLiteral>FROM</CodeLiteral>) specifies expressions that form the output rows of the SELECT statement. The expressions can (and usually do) refer to columns computed in the <CodeLiteral>FROM</CodeLiteral> clause.\n Just as in a table, every output column of a SELECT has a name. In a simple SELECT this name is just used to label the column for display, but when the SELECT is a sub-query of a larger query, the name is seen by the larger query as the column name of the virtual table produced by the sub-query. To specify the name to use for an output column, write <CodeLiteral>AS</CodeLiteral> output_name after the column's expression. (You can omit <CodeLiteral>AS</CodeLiteral>, but only if the desired output name does not match any PostgreSQL keyword (see Appendix C). For protection against possible future keyword additions, it is recommended that you always either write <CodeLiteral>AS</CodeLiteral> or double-quote the output name.) If you do not specify a column name, a name is chosen automatically by PostgreSQL. If the column's expression is a simple column reference then the chosen name is the same as that column's name. In more complex cases a function or type name may be used, or the system may fall back on a generated name such as <CodeLiteral>?column?</CodeLiteral>.\n An output column's name can be used to refer to the column's value in <CodeLiteral>ORDER BY</CodeLiteral> and <CodeLiteral>GROUP BY</CodeLiteral> clauses, but not in the <CodeLiteral>WHERE</CodeLiteral> or <CodeLiteral>HAVING</CodeLiteral> clauses; there you must write out the expression instead.\n Instead of an expression, <CodeLiteral>*</CodeLiteral> can be written in the output list as a shorthand for all the columns of the selected rows. Also, you can write <CodeLiteral>table_name.*</CodeLiteral> as a shorthand for the columns coming from just that table. In these cases it is not possible to specify new names with <CodeLiteral>AS</CodeLiteral>; the output column names will be the same as the table columns' names.\n According to the SQL standard, the expressions in the output list should be computed before applying <CodeLiteral>DISTINCT</CodeLiteral>, <CodeLiteral>ORDER BY</CodeLiteral>, or <CodeLiteral>LIMIT</CodeLiteral>. This is obviously necessary when using <CodeLiteral>DISTINCT</CodeLiteral>, since otherwise it's not clear what values are being made distinct. However, in many cases it is convenient if output expressions are computed after <CodeLiteral>ORDER BY</CodeLiteral> and <CodeLiteral>LIMIT</CodeLiteral>; particularly if the output list contains any volatile or expensive functions. With that behavior, the order of function evaluations is more intuitive and there will not be evaluations corresponding to rows that never appear in the output. PostgreSQL will effectively evaluate output expressions after sorting and limiting, so long as those expressions are not referenced in <CodeLiteral>DISTINCT</CodeLiteral>, <CodeLiteral>ORDER BY</CodeLiteral> or <CodeLiteral>GROUP BY</CodeLiteral>. (As a counterexample, <CodeLiteral>SELECT f(x) FROM tab ORDER BY 1</CodeLiteral> clearly must evaluate f(x) before sorting.) Output expressions that contain set-returning functions are effectively evaluated after sorting and before limiting, so that <CodeLiteral>LIMIT</CodeLiteral> will act to cut off the output from a set-returning function.\n \n  <ClauseName>Note</ClauseName>\n  PostgreSQL versions before 9.6 did not provide any guarantees about the timing of evaluation of output expressions versus sorting and limiting; it depended on the form of the chosen query plan. <sep>[DEMO]: SELECT first_name || ' ' || last_name AS full_name FROM employees;",
        "example": [
            "SELECT first_name || ' ' || last_name AS full_name FROM employees;"
        ],
        "link": []
    },
    {
        "type": "keyword",
        "keyword": "DISTINCT ON ( expression ) ",
        "tree": " (distinct_clause DISTINCT ON ( ))",
        "description": "If <CodeLiteral>SELECT DISTINCT</CodeLiteral> is specified, all duplicate rows are removed from the result set (one row is kept from each group of duplicates). <CodeLiteral>SELECT ALL</CodeLiteral> specifies the opposite: all rows are kept; that is the default.\n <CodeLiteral>SELECT DISTINCT ON ( expression [, ...] )</CodeLiteral> keeps only the first row of each set of rows where the given expressions evaluate to equal. The <CodeLiteral>DISTINCT ON</CodeLiteral> expressions are interpreted using the same rules as for <CodeLiteral>ORDER BY</CodeLiteral> (see above). Note that the \u201cfirst row\u201d of each set is unpredictable unless <CodeLiteral>ORDER BY</CodeLiteral> is used to ensure that the desired row appears first. For example:\n <code>SELECT DISTINCT ON (location) location, time, report\n FROM weather_reports\n ORDER BY location, time DESC;\n</code>\n retrieves the most recent weather report for each location. But if we had not used <CodeLiteral>ORDER BY</CodeLiteral> to force descending order of time values for each location, we'd have gotten a report from an unpredictable time for each location.\n The <CodeLiteral>DISTINCT ON</CodeLiteral> expression(s) must match the leftmost <CodeLiteral>ORDER BY</CodeLiteral> expression(s). The <CodeLiteral>ORDER BY</CodeLiteral> clause will normally contain additional expression(s) that determine the desired precedence of rows within each <CodeLiteral>DISTINCT ON</CodeLiteral> group.\n Currently, <CodeLiteral>FOR NO KEY UPDATE</CodeLiteral>, <CodeLiteral>FOR UPDATE</CodeLiteral>, <CodeLiteral>FOR SHARE</CodeLiteral> and <CodeLiteral>FOR KEY SHARE</CodeLiteral> cannot be specified with <CodeLiteral>DISTINCT</CodeLiteral>. ",
        "detail": "[DESCRIPTION]: If <CodeLiteral>SELECT DISTINCT</CodeLiteral> is specified, all duplicate rows are removed from the result set (one row is kept from each group of duplicates). <CodeLiteral>SELECT ALL</CodeLiteral> specifies the opposite: all rows are kept; that is the default.\n <CodeLiteral>SELECT DISTINCT ON ( expression [, ...] )</CodeLiteral> keeps only the first row of each set of rows where the given expressions evaluate to equal. The <CodeLiteral>DISTINCT ON</CodeLiteral> expressions are interpreted using the same rules as for <CodeLiteral>ORDER BY</CodeLiteral> (see above). Note that the \u201cfirst row\u201d of each set is unpredictable unless <CodeLiteral>ORDER BY</CodeLiteral> is used to ensure that the desired row appears first. For example:\n <code>SELECT DISTINCT ON (location) location, time, report\n FROM weather_reports\n ORDER BY location, time DESC;\n</code>\n retrieves the most recent weather report for each location. But if we had not used <CodeLiteral>ORDER BY</CodeLiteral> to force descending order of time values for each location, we'd have gotten a report from an unpredictable time for each location.\n The <CodeLiteral>DISTINCT ON</CodeLiteral> expression(s) must match the leftmost <CodeLiteral>ORDER BY</CodeLiteral> expression(s). The <CodeLiteral>ORDER BY</CodeLiteral> clause will normally contain additional expression(s) that determine the desired precedence of rows within each <CodeLiteral>DISTINCT ON</CodeLiteral> group.\n Currently, <CodeLiteral>FOR NO KEY UPDATE</CodeLiteral>, <CodeLiteral>FOR UPDATE</CodeLiteral>, <CodeLiteral>FOR SHARE</CodeLiteral> and <CodeLiteral>FOR KEY SHARE</CodeLiteral> cannot be specified with <CodeLiteral>DISTINCT</CodeLiteral>. <sep>[DEMO]: SELECT DISTINCT ON (department) department, max(salary) AS max_salary FROM employees ORDER BY department, salary DESC;",
        "example": [
            "SELECT DISTINCT ON (department) department, max(salary) AS max_salary FROM employees ORDER BY department, salary DESC;"
        ],
        "link": []
    },
    {
        "type": "keyword",
        "keyword": "DISTINCT",
        "tree": " (distinct_clause DISTINCT)",
        "description": "If <CodeLiteral>SELECT DISTINCT</CodeLiteral> is specified, all duplicate rows are removed from the result set (one row is kept from each group of duplicates). <CodeLiteral>SELECT ALL</CodeLiteral> specifies the opposite: all rows are kept; that is the default.\n <CodeLiteral>SELECT DISTINCT ON ( expression [, ...] )</CodeLiteral> keeps only the first row of each set of rows where the given expressions evaluate to equal. The <CodeLiteral>DISTINCT ON</CodeLiteral> expressions are interpreted using the same rules as for <CodeLiteral>ORDER BY</CodeLiteral> (see above). Note that the \u201cfirst row\u201d of each set is unpredictable unless <CodeLiteral>ORDER BY</CodeLiteral> is used to ensure that the desired row appears first. For example:\n <code>SELECT DISTINCT ON (location) location, time, report\n FROM weather_reports\n ORDER BY location, time DESC;\n</code>\n retrieves the most recent weather report for each location. But if we had not used <CodeLiteral>ORDER BY</CodeLiteral> to force descending order of time values for each location, we'd have gotten a report from an unpredictable time for each location.\n The <CodeLiteral>DISTINCT ON</CodeLiteral> expression(s) must match the leftmost <CodeLiteral>ORDER BY</CodeLiteral> expression(s). The <CodeLiteral>ORDER BY</CodeLiteral> clause will normally contain additional expression(s) that determine the desired precedence of rows within each <CodeLiteral>DISTINCT ON</CodeLiteral> group.\n Currently, <CodeLiteral>FOR NO KEY UPDATE</CodeLiteral>, <CodeLiteral>FOR UPDATE</CodeLiteral>, <CodeLiteral>FOR SHARE</CodeLiteral> and <CodeLiteral>FOR KEY SHARE</CodeLiteral> cannot be specified with <CodeLiteral>DISTINCT</CodeLiteral>. ",
        "detail": "[DESCRIPTION]: If <CodeLiteral>SELECT DISTINCT</CodeLiteral> is specified, all duplicate rows are removed from the result set (one row is kept from each group of duplicates). <CodeLiteral>SELECT ALL</CodeLiteral> specifies the opposite: all rows are kept; that is the default.\n <CodeLiteral>SELECT DISTINCT ON ( expression [, ...] )</CodeLiteral> keeps only the first row of each set of rows where the given expressions evaluate to equal. The <CodeLiteral>DISTINCT ON</CodeLiteral> expressions are interpreted using the same rules as for <CodeLiteral>ORDER BY</CodeLiteral> (see above). Note that the \u201cfirst row\u201d of each set is unpredictable unless <CodeLiteral>ORDER BY</CodeLiteral> is used to ensure that the desired row appears first. For example:\n <code>SELECT DISTINCT ON (location) location, time, report\n FROM weather_reports\n ORDER BY location, time DESC;\n</code>\n retrieves the most recent weather report for each location. But if we had not used <CodeLiteral>ORDER BY</CodeLiteral> to force descending order of time values for each location, we'd have gotten a report from an unpredictable time for each location.\n The <CodeLiteral>DISTINCT ON</CodeLiteral> expression(s) must match the leftmost <CodeLiteral>ORDER BY</CodeLiteral> expression(s). The <CodeLiteral>ORDER BY</CodeLiteral> clause will normally contain additional expression(s) that determine the desired precedence of rows within each <CodeLiteral>DISTINCT ON</CodeLiteral> group.\n Currently, <CodeLiteral>FOR NO KEY UPDATE</CodeLiteral>, <CodeLiteral>FOR UPDATE</CodeLiteral>, <CodeLiteral>FOR SHARE</CodeLiteral> and <CodeLiteral>FOR KEY SHARE</CodeLiteral> cannot be specified with <CodeLiteral>DISTINCT</CodeLiteral>. <sep>[DEMO]: SELECT DISTINCT name FROM employees;",
        "example": [
            "SELECT DISTINCT name FROM employees;"
        ],
        "link": []
    },
    {
        "type": "keyword",
        "keyword": "UNION ALL select",
        "tree": " (select_clause UNION (all_or_distinct ALL))",
        "description": "The <CodeLiteral>UNION</CodeLiteral> clause has this general form:\n <code>select_statement UNION [ ALL | DISTINCT ] select_statement\n</code>\n select_statement is any SELECT statement without an <CodeLiteral>ORDER BY</CodeLiteral>, <CodeLiteral>LIMIT</CodeLiteral>, <CodeLiteral>FOR NO KEY UPDATE</CodeLiteral>, <CodeLiteral>FOR UPDATE</CodeLiteral>, <CodeLiteral>FOR SHARE</CodeLiteral>, or <CodeLiteral>FOR KEY SHARE</CodeLiteral> clause. (<CodeLiteral>ORDER BY</CodeLiteral> and <CodeLiteral>LIMIT</CodeLiteral> can be attached to a subexpression if it is enclosed in parentheses. Without parentheses, these clauses will be taken to apply to the result of the <CodeLiteral>UNION</CodeLiteral>, not to its right-hand input expression.)\n The <CodeLiteral>UNION</CodeLiteral> operator computes the set union of the rows returned by the involved SELECT statements. A row is in the set union of two result sets if it appears in at least one of the result sets. The two SELECT statements that represent the direct operands of the <CodeLiteral>UNION</CodeLiteral> must produce the same number of columns, and corresponding columns must be of compatible data types.\n The result of <CodeLiteral>UNION</CodeLiteral> does not contain any duplicate rows unless the <CodeLiteral>ALL</CodeLiteral> option is specified. <CodeLiteral>ALL</CodeLiteral> prevents elimination of duplicates. (Therefore, <CodeLiteral>UNION ALL</CodeLiteral> is usually significantly quicker than <CodeLiteral>UNION</CodeLiteral>; use <CodeLiteral>ALL</CodeLiteral> when you can.) <CodeLiteral>DISTINCT</CodeLiteral> can be written to explicitly specify the default behavior of eliminating duplicate rows.\n Multiple <CodeLiteral>UNION</CodeLiteral> operators in the same SELECT statement are evaluated left to right, unless otherwise indicated by parentheses.\n Currently, <CodeLiteral>FOR NO KEY UPDATE</CodeLiteral>, <CodeLiteral>FOR UPDATE</CodeLiteral>, <CodeLiteral>FOR SHARE</CodeLiteral> and <CodeLiteral>FOR KEY SHARE</CodeLiteral> cannot be specified either for a <CodeLiteral>UNION</CodeLiteral> result or for any input of a <CodeLiteral>UNION</CodeLiteral>. ",
        "detail": "[DESCRIPTION]: The <CodeLiteral>UNION</CodeLiteral> clause has this general form:\n <code>select_statement UNION [ ALL | DISTINCT ] select_statement\n</code>\n select_statement is any SELECT statement without an <CodeLiteral>ORDER BY</CodeLiteral>, <CodeLiteral>LIMIT</CodeLiteral>, <CodeLiteral>FOR NO KEY UPDATE</CodeLiteral>, <CodeLiteral>FOR UPDATE</CodeLiteral>, <CodeLiteral>FOR SHARE</CodeLiteral>, or <CodeLiteral>FOR KEY SHARE</CodeLiteral> clause. (<CodeLiteral>ORDER BY</CodeLiteral> and <CodeLiteral>LIMIT</CodeLiteral> can be attached to a subexpression if it is enclosed in parentheses. Without parentheses, these clauses will be taken to apply to the result of the <CodeLiteral>UNION</CodeLiteral>, not to its right-hand input expression.)\n The <CodeLiteral>UNION</CodeLiteral> operator computes the set union of the rows returned by the involved SELECT statements. A row is in the set union of two result sets if it appears in at least one of the result sets. The two SELECT statements that represent the direct operands of the <CodeLiteral>UNION</CodeLiteral> must produce the same number of columns, and corresponding columns must be of compatible data types.\n The result of <CodeLiteral>UNION</CodeLiteral> does not contain any duplicate rows unless the <CodeLiteral>ALL</CodeLiteral> option is specified. <CodeLiteral>ALL</CodeLiteral> prevents elimination of duplicates. (Therefore, <CodeLiteral>UNION ALL</CodeLiteral> is usually significantly quicker than <CodeLiteral>UNION</CodeLiteral>; use <CodeLiteral>ALL</CodeLiteral> when you can.) <CodeLiteral>DISTINCT</CodeLiteral> can be written to explicitly specify the default behavior of eliminating duplicate rows.\n Multiple <CodeLiteral>UNION</CodeLiteral> operators in the same SELECT statement are evaluated left to right, unless otherwise indicated by parentheses.\n Currently, <CodeLiteral>FOR NO KEY UPDATE</CodeLiteral>, <CodeLiteral>FOR UPDATE</CodeLiteral>, <CodeLiteral>FOR SHARE</CodeLiteral> and <CodeLiteral>FOR KEY SHARE</CodeLiteral> cannot be specified either for a <CodeLiteral>UNION</CodeLiteral> result or for any input of a <CodeLiteral>UNION</CodeLiteral>. <sep>[DEMO]: SELECT 'Apples' AS Fruit UNION ALL SELECT 'Oranges';",
        "example": [
            "SELECT 'Apples' AS Fruit UNION ALL SELECT 'Oranges';"
        ],
        "link": []
    },
    {
        "type": "keyword",
        "keyword": "UNION DISTINCT select",
        "tree": " (select_clause UNION (all_or_distinct DISTINCT))",
        "description": "The <CodeLiteral>UNION</CodeLiteral> clause has this general form:\n <code>select_statement UNION [ ALL | DISTINCT ] select_statement\n</code>\n select_statement is any SELECT statement without an <CodeLiteral>ORDER BY</CodeLiteral>, <CodeLiteral>LIMIT</CodeLiteral>, <CodeLiteral>FOR NO KEY UPDATE</CodeLiteral>, <CodeLiteral>FOR UPDATE</CodeLiteral>, <CodeLiteral>FOR SHARE</CodeLiteral>, or <CodeLiteral>FOR KEY SHARE</CodeLiteral> clause. (<CodeLiteral>ORDER BY</CodeLiteral> and <CodeLiteral>LIMIT</CodeLiteral> can be attached to a subexpression if it is enclosed in parentheses. Without parentheses, these clauses will be taken to apply to the result of the <CodeLiteral>UNION</CodeLiteral>, not to its right-hand input expression.)\n The <CodeLiteral>UNION</CodeLiteral> operator computes the set union of the rows returned by the involved SELECT statements. A row is in the set union of two result sets if it appears in at least one of the result sets. The two SELECT statements that represent the direct operands of the <CodeLiteral>UNION</CodeLiteral> must produce the same number of columns, and corresponding columns must be of compatible data types.\n The result of <CodeLiteral>UNION</CodeLiteral> does not contain any duplicate rows unless the <CodeLiteral>ALL</CodeLiteral> option is specified. <CodeLiteral>ALL</CodeLiteral> prevents elimination of duplicates. (Therefore, <CodeLiteral>UNION ALL</CodeLiteral> is usually significantly quicker than <CodeLiteral>UNION</CodeLiteral>; use <CodeLiteral>ALL</CodeLiteral> when you can.) <CodeLiteral>DISTINCT</CodeLiteral> can be written to explicitly specify the default behavior of eliminating duplicate rows.\n Multiple <CodeLiteral>UNION</CodeLiteral> operators in the same SELECT statement are evaluated left to right, unless otherwise indicated by parentheses.\n Currently, <CodeLiteral>FOR NO KEY UPDATE</CodeLiteral>, <CodeLiteral>FOR UPDATE</CodeLiteral>, <CodeLiteral>FOR SHARE</CodeLiteral> and <CodeLiteral>FOR KEY SHARE</CodeLiteral> cannot be specified either for a <CodeLiteral>UNION</CodeLiteral> result or for any input of a <CodeLiteral>UNION</CodeLiteral>. ",
        "detail": "[DESCRIPTION]: The <CodeLiteral>UNION</CodeLiteral> clause has this general form:\n <code>select_statement UNION [ ALL | DISTINCT ] select_statement\n</code>\n select_statement is any SELECT statement without an <CodeLiteral>ORDER BY</CodeLiteral>, <CodeLiteral>LIMIT</CodeLiteral>, <CodeLiteral>FOR NO KEY UPDATE</CodeLiteral>, <CodeLiteral>FOR UPDATE</CodeLiteral>, <CodeLiteral>FOR SHARE</CodeLiteral>, or <CodeLiteral>FOR KEY SHARE</CodeLiteral> clause. (<CodeLiteral>ORDER BY</CodeLiteral> and <CodeLiteral>LIMIT</CodeLiteral> can be attached to a subexpression if it is enclosed in parentheses. Without parentheses, these clauses will be taken to apply to the result of the <CodeLiteral>UNION</CodeLiteral>, not to its right-hand input expression.)\n The <CodeLiteral>UNION</CodeLiteral> operator computes the set union of the rows returned by the involved SELECT statements. A row is in the set union of two result sets if it appears in at least one of the result sets. The two SELECT statements that represent the direct operands of the <CodeLiteral>UNION</CodeLiteral> must produce the same number of columns, and corresponding columns must be of compatible data types.\n The result of <CodeLiteral>UNION</CodeLiteral> does not contain any duplicate rows unless the <CodeLiteral>ALL</CodeLiteral> option is specified. <CodeLiteral>ALL</CodeLiteral> prevents elimination of duplicates. (Therefore, <CodeLiteral>UNION ALL</CodeLiteral> is usually significantly quicker than <CodeLiteral>UNION</CodeLiteral>; use <CodeLiteral>ALL</CodeLiteral> when you can.) <CodeLiteral>DISTINCT</CodeLiteral> can be written to explicitly specify the default behavior of eliminating duplicate rows.\n Multiple <CodeLiteral>UNION</CodeLiteral> operators in the same SELECT statement are evaluated left to right, unless otherwise indicated by parentheses.\n Currently, <CodeLiteral>FOR NO KEY UPDATE</CodeLiteral>, <CodeLiteral>FOR UPDATE</CodeLiteral>, <CodeLiteral>FOR SHARE</CodeLiteral> and <CodeLiteral>FOR KEY SHARE</CodeLiteral> cannot be specified either for a <CodeLiteral>UNION</CodeLiteral> result or for any input of a <CodeLiteral>UNION</CodeLiteral>. <sep>[DEMO]: SELECT 1 AS number UNION DISTINCT SELECT 1 AS number;",
        "example": [
            "SELECT 1 AS number UNION DISTINCT SELECT 1 AS number;"
        ],
        "link": []
    },
    {
        "type": "keyword",
        "keyword": "UNION select",
        "tree": " (select_clause UNION)",
        "description": "The <CodeLiteral>UNION</CodeLiteral> clause has this general form:\n <code>select_statement UNION [ ALL | DISTINCT ] select_statement\n</code>\n select_statement is any SELECT statement without an <CodeLiteral>ORDER BY</CodeLiteral>, <CodeLiteral>LIMIT</CodeLiteral>, <CodeLiteral>FOR NO KEY UPDATE</CodeLiteral>, <CodeLiteral>FOR UPDATE</CodeLiteral>, <CodeLiteral>FOR SHARE</CodeLiteral>, or <CodeLiteral>FOR KEY SHARE</CodeLiteral> clause. (<CodeLiteral>ORDER BY</CodeLiteral> and <CodeLiteral>LIMIT</CodeLiteral> can be attached to a subexpression if it is enclosed in parentheses. Without parentheses, these clauses will be taken to apply to the result of the <CodeLiteral>UNION</CodeLiteral>, not to its right-hand input expression.)\n The <CodeLiteral>UNION</CodeLiteral> operator computes the set union of the rows returned by the involved SELECT statements. A row is in the set union of two result sets if it appears in at least one of the result sets. The two SELECT statements that represent the direct operands of the <CodeLiteral>UNION</CodeLiteral> must produce the same number of columns, and corresponding columns must be of compatible data types.\n The result of <CodeLiteral>UNION</CodeLiteral> does not contain any duplicate rows unless the <CodeLiteral>ALL</CodeLiteral> option is specified. <CodeLiteral>ALL</CodeLiteral> prevents elimination of duplicates. (Therefore, <CodeLiteral>UNION ALL</CodeLiteral> is usually significantly quicker than <CodeLiteral>UNION</CodeLiteral>; use <CodeLiteral>ALL</CodeLiteral> when you can.) <CodeLiteral>DISTINCT</CodeLiteral> can be written to explicitly specify the default behavior of eliminating duplicate rows.\n Multiple <CodeLiteral>UNION</CodeLiteral> operators in the same SELECT statement are evaluated left to right, unless otherwise indicated by parentheses.\n Currently, <CodeLiteral>FOR NO KEY UPDATE</CodeLiteral>, <CodeLiteral>FOR UPDATE</CodeLiteral>, <CodeLiteral>FOR SHARE</CodeLiteral> and <CodeLiteral>FOR KEY SHARE</CodeLiteral> cannot be specified either for a <CodeLiteral>UNION</CodeLiteral> result or for any input of a <CodeLiteral>UNION</CodeLiteral>. ",
        "detail": "[DESCRIPTION]: The <CodeLiteral>UNION</CodeLiteral> clause has this general form:\n <code>select_statement UNION [ ALL | DISTINCT ] select_statement\n</code>\n select_statement is any SELECT statement without an <CodeLiteral>ORDER BY</CodeLiteral>, <CodeLiteral>LIMIT</CodeLiteral>, <CodeLiteral>FOR NO KEY UPDATE</CodeLiteral>, <CodeLiteral>FOR UPDATE</CodeLiteral>, <CodeLiteral>FOR SHARE</CodeLiteral>, or <CodeLiteral>FOR KEY SHARE</CodeLiteral> clause. (<CodeLiteral>ORDER BY</CodeLiteral> and <CodeLiteral>LIMIT</CodeLiteral> can be attached to a subexpression if it is enclosed in parentheses. Without parentheses, these clauses will be taken to apply to the result of the <CodeLiteral>UNION</CodeLiteral>, not to its right-hand input expression.)\n The <CodeLiteral>UNION</CodeLiteral> operator computes the set union of the rows returned by the involved SELECT statements. A row is in the set union of two result sets if it appears in at least one of the result sets. The two SELECT statements that represent the direct operands of the <CodeLiteral>UNION</CodeLiteral> must produce the same number of columns, and corresponding columns must be of compatible data types.\n The result of <CodeLiteral>UNION</CodeLiteral> does not contain any duplicate rows unless the <CodeLiteral>ALL</CodeLiteral> option is specified. <CodeLiteral>ALL</CodeLiteral> prevents elimination of duplicates. (Therefore, <CodeLiteral>UNION ALL</CodeLiteral> is usually significantly quicker than <CodeLiteral>UNION</CodeLiteral>; use <CodeLiteral>ALL</CodeLiteral> when you can.) <CodeLiteral>DISTINCT</CodeLiteral> can be written to explicitly specify the default behavior of eliminating duplicate rows.\n Multiple <CodeLiteral>UNION</CodeLiteral> operators in the same SELECT statement are evaluated left to right, unless otherwise indicated by parentheses.\n Currently, <CodeLiteral>FOR NO KEY UPDATE</CodeLiteral>, <CodeLiteral>FOR UPDATE</CodeLiteral>, <CodeLiteral>FOR SHARE</CodeLiteral> and <CodeLiteral>FOR KEY SHARE</CodeLiteral> cannot be specified either for a <CodeLiteral>UNION</CodeLiteral> result or for any input of a <CodeLiteral>UNION</CodeLiteral>. <sep>[DEMO]: SELECT 'Apple' AS Fruit UNION SELECT 'Banana' AS Fruit;",
        "example": [
            "SELECT 'Apple' AS Fruit UNION SELECT 'Banana' AS Fruit;"
        ],
        "link": []
    },
    {
        "type": "keyword",
        "keyword": "INTERSECT ALL select",
        "tree": " (simple_select_intersect INTERSECT (all_or_distinct ALL))",
        "description": "The <CodeLiteral>INTERSECT</CodeLiteral> clause has this general form:\n <code>select_statement INTERSECT [ ALL | DISTINCT ] select_statement\n</code>\n select_statement is any SELECT statement without an <CodeLiteral>ORDER BY</CodeLiteral>, <CodeLiteral>LIMIT</CodeLiteral>, <CodeLiteral>FOR NO KEY UPDATE</CodeLiteral>, <CodeLiteral>FOR UPDATE</CodeLiteral>, <CodeLiteral>FOR SHARE</CodeLiteral>, or <CodeLiteral>FOR KEY SHARE</CodeLiteral> clause.\n The <CodeLiteral>INTERSECT</CodeLiteral> operator computes the set intersection of the rows returned by the involved SELECT statements. A row is in the intersection of two result sets if it appears in both result sets.\n The result of <CodeLiteral>INTERSECT</CodeLiteral> does not contain any duplicate rows unless the <CodeLiteral>ALL</CodeLiteral> option is specified. With <CodeLiteral>ALL</CodeLiteral>, a row that has m duplicates in the left table and n duplicates in the right table will appear min(m,n) times in the result set. <CodeLiteral>DISTINCT</CodeLiteral> can be written to explicitly specify the default behavior of eliminating duplicate rows.\n Multiple <CodeLiteral>INTERSECT</CodeLiteral> operators in the same SELECT statement are evaluated left to right, unless parentheses dictate otherwise. <CodeLiteral>INTERSECT</CodeLiteral> binds more tightly than <CodeLiteral>UNION</CodeLiteral>. That is, <CodeLiteral>A UNION B INTERSECT C</CodeLiteral> will be read as <CodeLiteral>A UNION (B INTERSECT C)</CodeLiteral>.\n Currently, <CodeLiteral>FOR NO KEY UPDATE</CodeLiteral>, <CodeLiteral>FOR UPDATE</CodeLiteral>, <CodeLiteral>FOR SHARE</CodeLiteral> and <CodeLiteral>FOR KEY SHARE</CodeLiteral> cannot be specified either for an <CodeLiteral>INTERSECT</CodeLiteral> result or for any input of an <CodeLiteral>INTERSECT</CodeLiteral>. ",
        "detail": "[DESCRIPTION]: The <CodeLiteral>INTERSECT</CodeLiteral> clause has this general form:\n <code>select_statement INTERSECT [ ALL | DISTINCT ] select_statement\n</code>\n select_statement is any SELECT statement without an <CodeLiteral>ORDER BY</CodeLiteral>, <CodeLiteral>LIMIT</CodeLiteral>, <CodeLiteral>FOR NO KEY UPDATE</CodeLiteral>, <CodeLiteral>FOR UPDATE</CodeLiteral>, <CodeLiteral>FOR SHARE</CodeLiteral>, or <CodeLiteral>FOR KEY SHARE</CodeLiteral> clause.\n The <CodeLiteral>INTERSECT</CodeLiteral> operator computes the set intersection of the rows returned by the involved SELECT statements. A row is in the intersection of two result sets if it appears in both result sets.\n The result of <CodeLiteral>INTERSECT</CodeLiteral> does not contain any duplicate rows unless the <CodeLiteral>ALL</CodeLiteral> option is specified. With <CodeLiteral>ALL</CodeLiteral>, a row that has m duplicates in the left table and n duplicates in the right table will appear min(m,n) times in the result set. <CodeLiteral>DISTINCT</CodeLiteral> can be written to explicitly specify the default behavior of eliminating duplicate rows.\n Multiple <CodeLiteral>INTERSECT</CodeLiteral> operators in the same SELECT statement are evaluated left to right, unless parentheses dictate otherwise. <CodeLiteral>INTERSECT</CodeLiteral> binds more tightly than <CodeLiteral>UNION</CodeLiteral>. That is, <CodeLiteral>A UNION B INTERSECT C</CodeLiteral> will be read as <CodeLiteral>A UNION (B INTERSECT C)</CodeLiteral>.\n Currently, <CodeLiteral>FOR NO KEY UPDATE</CodeLiteral>, <CodeLiteral>FOR UPDATE</CodeLiteral>, <CodeLiteral>FOR SHARE</CodeLiteral> and <CodeLiteral>FOR KEY SHARE</CodeLiteral> cannot be specified either for an <CodeLiteral>INTERSECT</CodeLiteral> result or for any input of an <CodeLiteral>INTERSECT</CodeLiteral>. <sep>[DEMO]: SELECT id, name FROM employees WHERE department = 'Sales' INTERSECT ALL SELECT id, name FROM employees WHERE location = 'New York';",
        "example": [
            "SELECT id, name FROM employees WHERE department = 'Sales' INTERSECT ALL SELECT id, name FROM employees WHERE location = 'New York';"
        ],
        "link": []
    },
    {
        "type": "keyword",
        "keyword": "INTERSECT DISTINCT select",
        "tree": " (simple_select_intersect INTERSECT (all_or_distinct DISTINCT))",
        "description": "The <CodeLiteral>INTERSECT</CodeLiteral> clause has this general form:\n <code>select_statement INTERSECT [ ALL | DISTINCT ] select_statement\n</code>\n select_statement is any SELECT statement without an <CodeLiteral>ORDER BY</CodeLiteral>, <CodeLiteral>LIMIT</CodeLiteral>, <CodeLiteral>FOR NO KEY UPDATE</CodeLiteral>, <CodeLiteral>FOR UPDATE</CodeLiteral>, <CodeLiteral>FOR SHARE</CodeLiteral>, or <CodeLiteral>FOR KEY SHARE</CodeLiteral> clause.\n The <CodeLiteral>INTERSECT</CodeLiteral> operator computes the set intersection of the rows returned by the involved SELECT statements. A row is in the intersection of two result sets if it appears in both result sets.\n The result of <CodeLiteral>INTERSECT</CodeLiteral> does not contain any duplicate rows unless the <CodeLiteral>ALL</CodeLiteral> option is specified. With <CodeLiteral>ALL</CodeLiteral>, a row that has m duplicates in the left table and n duplicates in the right table will appear min(m,n) times in the result set. <CodeLiteral>DISTINCT</CodeLiteral> can be written to explicitly specify the default behavior of eliminating duplicate rows.\n Multiple <CodeLiteral>INTERSECT</CodeLiteral> operators in the same SELECT statement are evaluated left to right, unless parentheses dictate otherwise. <CodeLiteral>INTERSECT</CodeLiteral> binds more tightly than <CodeLiteral>UNION</CodeLiteral>. That is, <CodeLiteral>A UNION B INTERSECT C</CodeLiteral> will be read as <CodeLiteral>A UNION (B INTERSECT C)</CodeLiteral>.\n Currently, <CodeLiteral>FOR NO KEY UPDATE</CodeLiteral>, <CodeLiteral>FOR UPDATE</CodeLiteral>, <CodeLiteral>FOR SHARE</CodeLiteral> and <CodeLiteral>FOR KEY SHARE</CodeLiteral> cannot be specified either for an <CodeLiteral>INTERSECT</CodeLiteral> result or for any input of an <CodeLiteral>INTERSECT</CodeLiteral>. ",
        "detail": "[DESCRIPTION]: The <CodeLiteral>INTERSECT</CodeLiteral> clause has this general form:\n <code>select_statement INTERSECT [ ALL | DISTINCT ] select_statement\n</code>\n select_statement is any SELECT statement without an <CodeLiteral>ORDER BY</CodeLiteral>, <CodeLiteral>LIMIT</CodeLiteral>, <CodeLiteral>FOR NO KEY UPDATE</CodeLiteral>, <CodeLiteral>FOR UPDATE</CodeLiteral>, <CodeLiteral>FOR SHARE</CodeLiteral>, or <CodeLiteral>FOR KEY SHARE</CodeLiteral> clause.\n The <CodeLiteral>INTERSECT</CodeLiteral> operator computes the set intersection of the rows returned by the involved SELECT statements. A row is in the intersection of two result sets if it appears in both result sets.\n The result of <CodeLiteral>INTERSECT</CodeLiteral> does not contain any duplicate rows unless the <CodeLiteral>ALL</CodeLiteral> option is specified. With <CodeLiteral>ALL</CodeLiteral>, a row that has m duplicates in the left table and n duplicates in the right table will appear min(m,n) times in the result set. <CodeLiteral>DISTINCT</CodeLiteral> can be written to explicitly specify the default behavior of eliminating duplicate rows.\n Multiple <CodeLiteral>INTERSECT</CodeLiteral> operators in the same SELECT statement are evaluated left to right, unless parentheses dictate otherwise. <CodeLiteral>INTERSECT</CodeLiteral> binds more tightly than <CodeLiteral>UNION</CodeLiteral>. That is, <CodeLiteral>A UNION B INTERSECT C</CodeLiteral> will be read as <CodeLiteral>A UNION (B INTERSECT C)</CodeLiteral>.\n Currently, <CodeLiteral>FOR NO KEY UPDATE</CodeLiteral>, <CodeLiteral>FOR UPDATE</CodeLiteral>, <CodeLiteral>FOR SHARE</CodeLiteral> and <CodeLiteral>FOR KEY SHARE</CodeLiteral> cannot be specified either for an <CodeLiteral>INTERSECT</CodeLiteral> result or for any input of an <CodeLiteral>INTERSECT</CodeLiteral>. <sep>[DEMO]: SELECT id, name FROM employee WHERE department = 'Sales' INTERSECT DISTINCT SELECT id, name FROM employee WHERE location = 'New York'",
        "example": [
            "SELECT id, name FROM employee WHERE department = 'Sales' INTERSECT DISTINCT SELECT id, name FROM employee WHERE location = 'New York'"
        ],
        "link": []
    },
    {
        "type": "keyword",
        "keyword": "INTERSECT select",
        "tree": " (simple_select_intersect INTERSECT)",
        "description": "The <CodeLiteral>INTERSECT</CodeLiteral> clause has this general form:\n <code>select_statement INTERSECT [ ALL | DISTINCT ] select_statement\n</code>\n select_statement is any SELECT statement without an <CodeLiteral>ORDER BY</CodeLiteral>, <CodeLiteral>LIMIT</CodeLiteral>, <CodeLiteral>FOR NO KEY UPDATE</CodeLiteral>, <CodeLiteral>FOR UPDATE</CodeLiteral>, <CodeLiteral>FOR SHARE</CodeLiteral>, or <CodeLiteral>FOR KEY SHARE</CodeLiteral> clause.\n The <CodeLiteral>INTERSECT</CodeLiteral> operator computes the set intersection of the rows returned by the involved SELECT statements. A row is in the intersection of two result sets if it appears in both result sets.\n The result of <CodeLiteral>INTERSECT</CodeLiteral> does not contain any duplicate rows unless the <CodeLiteral>ALL</CodeLiteral> option is specified. With <CodeLiteral>ALL</CodeLiteral>, a row that has m duplicates in the left table and n duplicates in the right table will appear min(m,n) times in the result set. <CodeLiteral>DISTINCT</CodeLiteral> can be written to explicitly specify the default behavior of eliminating duplicate rows.\n Multiple <CodeLiteral>INTERSECT</CodeLiteral> operators in the same SELECT statement are evaluated left to right, unless parentheses dictate otherwise. <CodeLiteral>INTERSECT</CodeLiteral> binds more tightly than <CodeLiteral>UNION</CodeLiteral>. That is, <CodeLiteral>A UNION B INTERSECT C</CodeLiteral> will be read as <CodeLiteral>A UNION (B INTERSECT C)</CodeLiteral>.\n Currently, <CodeLiteral>FOR NO KEY UPDATE</CodeLiteral>, <CodeLiteral>FOR UPDATE</CodeLiteral>, <CodeLiteral>FOR SHARE</CodeLiteral> and <CodeLiteral>FOR KEY SHARE</CodeLiteral> cannot be specified either for an <CodeLiteral>INTERSECT</CodeLiteral> result or for any input of an <CodeLiteral>INTERSECT</CodeLiteral>. ",
        "detail": "[DESCRIPTION]: The <CodeLiteral>INTERSECT</CodeLiteral> clause has this general form:\n <code>select_statement INTERSECT [ ALL | DISTINCT ] select_statement\n</code>\n select_statement is any SELECT statement without an <CodeLiteral>ORDER BY</CodeLiteral>, <CodeLiteral>LIMIT</CodeLiteral>, <CodeLiteral>FOR NO KEY UPDATE</CodeLiteral>, <CodeLiteral>FOR UPDATE</CodeLiteral>, <CodeLiteral>FOR SHARE</CodeLiteral>, or <CodeLiteral>FOR KEY SHARE</CodeLiteral> clause.\n The <CodeLiteral>INTERSECT</CodeLiteral> operator computes the set intersection of the rows returned by the involved SELECT statements. A row is in the intersection of two result sets if it appears in both result sets.\n The result of <CodeLiteral>INTERSECT</CodeLiteral> does not contain any duplicate rows unless the <CodeLiteral>ALL</CodeLiteral> option is specified. With <CodeLiteral>ALL</CodeLiteral>, a row that has m duplicates in the left table and n duplicates in the right table will appear min(m,n) times in the result set. <CodeLiteral>DISTINCT</CodeLiteral> can be written to explicitly specify the default behavior of eliminating duplicate rows.\n Multiple <CodeLiteral>INTERSECT</CodeLiteral> operators in the same SELECT statement are evaluated left to right, unless parentheses dictate otherwise. <CodeLiteral>INTERSECT</CodeLiteral> binds more tightly than <CodeLiteral>UNION</CodeLiteral>. That is, <CodeLiteral>A UNION B INTERSECT C</CodeLiteral> will be read as <CodeLiteral>A UNION (B INTERSECT C)</CodeLiteral>.\n Currently, <CodeLiteral>FOR NO KEY UPDATE</CodeLiteral>, <CodeLiteral>FOR UPDATE</CodeLiteral>, <CodeLiteral>FOR SHARE</CodeLiteral> and <CodeLiteral>FOR KEY SHARE</CodeLiteral> cannot be specified either for an <CodeLiteral>INTERSECT</CodeLiteral> result or for any input of an <CodeLiteral>INTERSECT</CodeLiteral>. <sep>[DEMO]: SELECT id, name FROM employees WHERE department = 'Sales' INTERSECT SELECT id, name FROM employees WHERE location = 'New York'",
        "example": [
            "SELECT id, name FROM employees WHERE department = 'Sales' INTERSECT SELECT id, name FROM employees WHERE location = 'New York'"
        ],
        "link": []
    },
    {
        "type": "keyword",
        "keyword": "select_statement EXCEPT ALL select_statement",
        "tree": " (select_clause EXCEPT (all_or_distinct ALL))",
        "description": "The <CodeLiteral>EXCEPT</CodeLiteral> clause has this general form:\n <code>select_statement EXCEPT [ ALL | DISTINCT ] select_statement\n</code>\n select_statement is any SELECT statement without an <CodeLiteral>ORDER BY</CodeLiteral>, <CodeLiteral>LIMIT</CodeLiteral>, <CodeLiteral>FOR NO KEY UPDATE</CodeLiteral>, <CodeLiteral>FOR UPDATE</CodeLiteral>, <CodeLiteral>FOR SHARE</CodeLiteral>, or <CodeLiteral>FOR KEY SHARE</CodeLiteral> clause.\n The <CodeLiteral>EXCEPT</CodeLiteral> operator computes the set of rows that are in the result of the left SELECT statement but not in the result of the right one.\n The result of <CodeLiteral>EXCEPT</CodeLiteral> does not contain any duplicate rows unless the <CodeLiteral>ALL</CodeLiteral> option is specified. With <CodeLiteral>ALL</CodeLiteral>, a row that has m duplicates in the left table and n duplicates in the right table will appear max(m-n,0) times in the result set. <CodeLiteral>DISTINCT</CodeLiteral> can be written to explicitly specify the default behavior of eliminating duplicate rows.\n Multiple <CodeLiteral>EXCEPT</CodeLiteral> operators in the same SELECT statement are evaluated left to right, unless parentheses dictate otherwise. <CodeLiteral>EXCEPT</CodeLiteral> binds at the same level as <CodeLiteral>UNION</CodeLiteral>.\n Currently, <CodeLiteral>FOR NO KEY UPDATE</CodeLiteral>, <CodeLiteral>FOR UPDATE</CodeLiteral>, <CodeLiteral>FOR SHARE</CodeLiteral> and <CodeLiteral>FOR KEY SHARE</CodeLiteral> cannot be specified either for an <CodeLiteral>EXCEPT</CodeLiteral> result or for any input of an <CodeLiteral>EXCEPT</CodeLiteral>. ",
        "detail": "[DESCRIPTION]: The <CodeLiteral>EXCEPT</CodeLiteral> clause has this general form:\n <code>select_statement EXCEPT [ ALL | DISTINCT ] select_statement\n</code>\n select_statement is any SELECT statement without an <CodeLiteral>ORDER BY</CodeLiteral>, <CodeLiteral>LIMIT</CodeLiteral>, <CodeLiteral>FOR NO KEY UPDATE</CodeLiteral>, <CodeLiteral>FOR UPDATE</CodeLiteral>, <CodeLiteral>FOR SHARE</CodeLiteral>, or <CodeLiteral>FOR KEY SHARE</CodeLiteral> clause.\n The <CodeLiteral>EXCEPT</CodeLiteral> operator computes the set of rows that are in the result of the left SELECT statement but not in the result of the right one.\n The result of <CodeLiteral>EXCEPT</CodeLiteral> does not contain any duplicate rows unless the <CodeLiteral>ALL</CodeLiteral> option is specified. With <CodeLiteral>ALL</CodeLiteral>, a row that has m duplicates in the left table and n duplicates in the right table will appear max(m-n,0) times in the result set. <CodeLiteral>DISTINCT</CodeLiteral> can be written to explicitly specify the default behavior of eliminating duplicate rows.\n Multiple <CodeLiteral>EXCEPT</CodeLiteral> operators in the same SELECT statement are evaluated left to right, unless parentheses dictate otherwise. <CodeLiteral>EXCEPT</CodeLiteral> binds at the same level as <CodeLiteral>UNION</CodeLiteral>.\n Currently, <CodeLiteral>FOR NO KEY UPDATE</CodeLiteral>, <CodeLiteral>FOR UPDATE</CodeLiteral>, <CodeLiteral>FOR SHARE</CodeLiteral> and <CodeLiteral>FOR KEY SHARE</CodeLiteral> cannot be specified either for an <CodeLiteral>EXCEPT</CodeLiteral> result or for any input of an <CodeLiteral>EXCEPT</CodeLiteral>. <sep>[DEMO]: SELECT id, name FROM employees EXCEPT ALL SELECT id, name FROM managers",
        "example": [
            "SELECT id, name FROM employees EXCEPT ALL SELECT id, name FROM managers"
        ],
        "link": []
    },
    {
        "type": "keyword",
        "keyword": "select_statement EXCEPT DISTINCT select_statement",
        "tree": " (select_clause EXCEPT (all_or_distinct DISTINCT))",
        "description": "The <CodeLiteral>EXCEPT</CodeLiteral> clause has this general form:\n <code>select_statement EXCEPT [ ALL | DISTINCT ] select_statement\n</code>\n select_statement is any SELECT statement without an <CodeLiteral>ORDER BY</CodeLiteral>, <CodeLiteral>LIMIT</CodeLiteral>, <CodeLiteral>FOR NO KEY UPDATE</CodeLiteral>, <CodeLiteral>FOR UPDATE</CodeLiteral>, <CodeLiteral>FOR SHARE</CodeLiteral>, or <CodeLiteral>FOR KEY SHARE</CodeLiteral> clause.\n The <CodeLiteral>EXCEPT</CodeLiteral> operator computes the set of rows that are in the result of the left SELECT statement but not in the result of the right one.\n The result of <CodeLiteral>EXCEPT</CodeLiteral> does not contain any duplicate rows unless the <CodeLiteral>ALL</CodeLiteral> option is specified. With <CodeLiteral>ALL</CodeLiteral>, a row that has m duplicates in the left table and n duplicates in the right table will appear max(m-n,0) times in the result set. <CodeLiteral>DISTINCT</CodeLiteral> can be written to explicitly specify the default behavior of eliminating duplicate rows.\n Multiple <CodeLiteral>EXCEPT</CodeLiteral> operators in the same SELECT statement are evaluated left to right, unless parentheses dictate otherwise. <CodeLiteral>EXCEPT</CodeLiteral> binds at the same level as <CodeLiteral>UNION</CodeLiteral>.\n Currently, <CodeLiteral>FOR NO KEY UPDATE</CodeLiteral>, <CodeLiteral>FOR UPDATE</CodeLiteral>, <CodeLiteral>FOR SHARE</CodeLiteral> and <CodeLiteral>FOR KEY SHARE</CodeLiteral> cannot be specified either for an <CodeLiteral>EXCEPT</CodeLiteral> result or for any input of an <CodeLiteral>EXCEPT</CodeLiteral>. ",
        "detail": "[DESCRIPTION]: The <CodeLiteral>EXCEPT</CodeLiteral> clause has this general form:\n <code>select_statement EXCEPT [ ALL | DISTINCT ] select_statement\n</code>\n select_statement is any SELECT statement without an <CodeLiteral>ORDER BY</CodeLiteral>, <CodeLiteral>LIMIT</CodeLiteral>, <CodeLiteral>FOR NO KEY UPDATE</CodeLiteral>, <CodeLiteral>FOR UPDATE</CodeLiteral>, <CodeLiteral>FOR SHARE</CodeLiteral>, or <CodeLiteral>FOR KEY SHARE</CodeLiteral> clause.\n The <CodeLiteral>EXCEPT</CodeLiteral> operator computes the set of rows that are in the result of the left SELECT statement but not in the result of the right one.\n The result of <CodeLiteral>EXCEPT</CodeLiteral> does not contain any duplicate rows unless the <CodeLiteral>ALL</CodeLiteral> option is specified. With <CodeLiteral>ALL</CodeLiteral>, a row that has m duplicates in the left table and n duplicates in the right table will appear max(m-n,0) times in the result set. <CodeLiteral>DISTINCT</CodeLiteral> can be written to explicitly specify the default behavior of eliminating duplicate rows.\n Multiple <CodeLiteral>EXCEPT</CodeLiteral> operators in the same SELECT statement are evaluated left to right, unless parentheses dictate otherwise. <CodeLiteral>EXCEPT</CodeLiteral> binds at the same level as <CodeLiteral>UNION</CodeLiteral>.\n Currently, <CodeLiteral>FOR NO KEY UPDATE</CodeLiteral>, <CodeLiteral>FOR UPDATE</CodeLiteral>, <CodeLiteral>FOR SHARE</CodeLiteral> and <CodeLiteral>FOR KEY SHARE</CodeLiteral> cannot be specified either for an <CodeLiteral>EXCEPT</CodeLiteral> result or for any input of an <CodeLiteral>EXCEPT</CodeLiteral>. <sep>[DEMO]: SELECT 1 AS value EXCEPT DISTINCT SELECT 1 AS value;",
        "example": [
            "SELECT 1 AS value EXCEPT DISTINCT SELECT 1 AS value;"
        ],
        "link": []
    },
    {
        "type": "keyword",
        "keyword": "select_statement EXCEPT select_statement",
        "tree": " (select_clause EXCEPT)",
        "description": "The <CodeLiteral>EXCEPT</CodeLiteral> clause has this general form:\n <code>select_statement EXCEPT [ ALL | DISTINCT ] select_statement\n</code>\n select_statement is any SELECT statement without an <CodeLiteral>ORDER BY</CodeLiteral>, <CodeLiteral>LIMIT</CodeLiteral>, <CodeLiteral>FOR NO KEY UPDATE</CodeLiteral>, <CodeLiteral>FOR UPDATE</CodeLiteral>, <CodeLiteral>FOR SHARE</CodeLiteral>, or <CodeLiteral>FOR KEY SHARE</CodeLiteral> clause.\n The <CodeLiteral>EXCEPT</CodeLiteral> operator computes the set of rows that are in the result of the left SELECT statement but not in the result of the right one.\n The result of <CodeLiteral>EXCEPT</CodeLiteral> does not contain any duplicate rows unless the <CodeLiteral>ALL</CodeLiteral> option is specified. With <CodeLiteral>ALL</CodeLiteral>, a row that has m duplicates in the left table and n duplicates in the right table will appear max(m-n,0) times in the result set. <CodeLiteral>DISTINCT</CodeLiteral> can be written to explicitly specify the default behavior of eliminating duplicate rows.\n Multiple <CodeLiteral>EXCEPT</CodeLiteral> operators in the same SELECT statement are evaluated left to right, unless parentheses dictate otherwise. <CodeLiteral>EXCEPT</CodeLiteral> binds at the same level as <CodeLiteral>UNION</CodeLiteral>.\n Currently, <CodeLiteral>FOR NO KEY UPDATE</CodeLiteral>, <CodeLiteral>FOR UPDATE</CodeLiteral>, <CodeLiteral>FOR SHARE</CodeLiteral> and <CodeLiteral>FOR KEY SHARE</CodeLiteral> cannot be specified either for an <CodeLiteral>EXCEPT</CodeLiteral> result or for any input of an <CodeLiteral>EXCEPT</CodeLiteral>. ",
        "detail": "[DESCRIPTION]: The <CodeLiteral>EXCEPT</CodeLiteral> clause has this general form:\n <code>select_statement EXCEPT [ ALL | DISTINCT ] select_statement\n</code>\n select_statement is any SELECT statement without an <CodeLiteral>ORDER BY</CodeLiteral>, <CodeLiteral>LIMIT</CodeLiteral>, <CodeLiteral>FOR NO KEY UPDATE</CodeLiteral>, <CodeLiteral>FOR UPDATE</CodeLiteral>, <CodeLiteral>FOR SHARE</CodeLiteral>, or <CodeLiteral>FOR KEY SHARE</CodeLiteral> clause.\n The <CodeLiteral>EXCEPT</CodeLiteral> operator computes the set of rows that are in the result of the left SELECT statement but not in the result of the right one.\n The result of <CodeLiteral>EXCEPT</CodeLiteral> does not contain any duplicate rows unless the <CodeLiteral>ALL</CodeLiteral> option is specified. With <CodeLiteral>ALL</CodeLiteral>, a row that has m duplicates in the left table and n duplicates in the right table will appear max(m-n,0) times in the result set. <CodeLiteral>DISTINCT</CodeLiteral> can be written to explicitly specify the default behavior of eliminating duplicate rows.\n Multiple <CodeLiteral>EXCEPT</CodeLiteral> operators in the same SELECT statement are evaluated left to right, unless parentheses dictate otherwise. <CodeLiteral>EXCEPT</CodeLiteral> binds at the same level as <CodeLiteral>UNION</CodeLiteral>.\n Currently, <CodeLiteral>FOR NO KEY UPDATE</CodeLiteral>, <CodeLiteral>FOR UPDATE</CodeLiteral>, <CodeLiteral>FOR SHARE</CodeLiteral> and <CodeLiteral>FOR KEY SHARE</CodeLiteral> cannot be specified either for an <CodeLiteral>EXCEPT</CodeLiteral> result or for any input of an <CodeLiteral>EXCEPT</CodeLiteral>. <sep>[DEMO]: SELECT id, name FROM employees EXCEPT SELECT id, name FROM managers",
        "example": [
            "SELECT id, name FROM employees EXCEPT SELECT id, name FROM managers"
        ],
        "link": []
    },
    {
        "type": "keyword",
        "keyword": "ORDER BY expression ASC",
        "tree": " (sort_clause ORDER BY (sortby_list (sortby (opt_asc_desc ASC))))",
        "description": "The optional <CodeLiteral>ORDER BY</CodeLiteral> clause has this general form:\n <code>ORDER BY expression [ ASC | DESC | USING operator ] [ NULLS { FIRST | LAST } ] [, ...]\n</code>\n The <CodeLiteral>ORDER BY</CodeLiteral> clause causes the result rows to be sorted according to the specified expression(s). If two rows are equal according to the leftmost expression, they are compared according to the next expression and so on. If they are equal according to all specified expressions, they are returned in an implementation-dependent order.\n Each expression can be the name or ordinal number of an output column (SELECT list item), or it can be an arbitrary expression formed from input-column values.\n The ordinal number refers to the ordinal (left-to-right) position of the output column. This feature makes it possible to define an ordering on the basis of a column that does not have a unique name. This is never absolutely necessary because it is always possible to assign a name to an output column using the <CodeLiteral>AS</CodeLiteral> clause.\n It is also possible to use arbitrary expressions in the <CodeLiteral>ORDER BY</CodeLiteral> clause, including columns that do not appear in the SELECT output list. Thus the following statement is valid:\n <code>SELECT name FROM distributors ORDER BY code;\n</code>\n A limitation of this feature is that an <CodeLiteral>ORDER BY</CodeLiteral> clause applying to the result of a <CodeLiteral>UNION</CodeLiteral>, <CodeLiteral>INTERSECT</CodeLiteral>, or <CodeLiteral>EXCEPT</CodeLiteral> clause can only specify an output column name or number, not an expression.\n If an <CodeLiteral>ORDER BY</CodeLiteral> expression is a simple name that matches both an output column name and an input column name, <CodeLiteral>ORDER BY</CodeLiteral> will interpret it as the output column name. This is the opposite of the choice that <CodeLiteral>GROUP BY</CodeLiteral> will make in the same situation. This inconsistency is made to be compatible with the SQL standard.\n Optionally one can add the key word <CodeLiteral>ASC</CodeLiteral> (ascending) or <CodeLiteral>DESC</CodeLiteral> (descending) after any expression in the <CodeLiteral>ORDER BY</CodeLiteral> clause. If not specified, <CodeLiteral>ASC</CodeLiteral> is assumed by default. Alternatively, a specific ordering operator name can be specified in the <CodeLiteral>USING</CodeLiteral> clause. An ordering operator must be a less-than or greater-than member of some B-tree operator family. <CodeLiteral>ASC</CodeLiteral> is usually equivalent to <CodeLiteral>USING <</CodeLiteral> and <CodeLiteral>DESC</CodeLiteral> is usually equivalent to <CodeLiteral>USING ></CodeLiteral>. (But the creator of a user-defined data type can define exactly what the default sort ordering is, and it might correspond to operators with other names.)\n If <CodeLiteral>NULLS LAST</CodeLiteral> is specified, null values sort after all non-null values; if <CodeLiteral>NULLS FIRST</CodeLiteral> is specified, null values sort before all non-null values. If neither is specified, the default behavior is <CodeLiteral>NULLS LAST</CodeLiteral> when <CodeLiteral>ASC</CodeLiteral> is specified or implied, and <CodeLiteral>NULLS FIRST</CodeLiteral> when <CodeLiteral>DESC</CodeLiteral> is specified (thus, the default is to act as though nulls are larger than non-nulls). When <CodeLiteral>USING</CodeLiteral> is specified, the default nulls ordering depends on whether the operator is a less-than or greater-than operator.\n Note that ordering options apply only to the expression they follow; for example <CodeLiteral>ORDER BY x, y DESC</CodeLiteral> does not mean the same thing as <CodeLiteral>ORDER BY x DESC, y DESC</CodeLiteral>.\n Character-string data is sorted according to the collation that applies to the column being sorted. That can be overridden at need by including a <CodeLiteral>COLLATE</CodeLiteral> clause in the expression, for example <CodeLiteral>ORDER BY mycolumn COLLATE \"en_US\"</CodeLiteral>. For more information see Section 4.2.10 and Section 23.2. ",
        "detail": "[DESCRIPTION]: The optional <CodeLiteral>ORDER BY</CodeLiteral> clause has this general form:\n <code>ORDER BY expression [ ASC | DESC | USING operator ] [ NULLS { FIRST | LAST } ] [, ...]\n</code>\n The <CodeLiteral>ORDER BY</CodeLiteral> clause causes the result rows to be sorted according to the specified expression(s). If two rows are equal according to the leftmost expression, they are compared according to the next expression and so on. If they are equal according to all specified expressions, they are returned in an implementation-dependent order.\n Each expression can be the name or ordinal number of an output column (SELECT list item), or it can be an arbitrary expression formed from input-column values.\n The ordinal number refers to the ordinal (left-to-right) position of the output column. This feature makes it possible to define an ordering on the basis of a column that does not have a unique name. This is never absolutely necessary because it is always possible to assign a name to an output column using the <CodeLiteral>AS</CodeLiteral> clause.\n It is also possible to use arbitrary expressions in the <CodeLiteral>ORDER BY</CodeLiteral> clause, including columns that do not appear in the SELECT output list. Thus the following statement is valid:\n <code>SELECT name FROM distributors ORDER BY code;\n</code>\n A limitation of this feature is that an <CodeLiteral>ORDER BY</CodeLiteral> clause applying to the result of a <CodeLiteral>UNION</CodeLiteral>, <CodeLiteral>INTERSECT</CodeLiteral>, or <CodeLiteral>EXCEPT</CodeLiteral> clause can only specify an output column name or number, not an expression.\n If an <CodeLiteral>ORDER BY</CodeLiteral> expression is a simple name that matches both an output column name and an input column name, <CodeLiteral>ORDER BY</CodeLiteral> will interpret it as the output column name. This is the opposite of the choice that <CodeLiteral>GROUP BY</CodeLiteral> will make in the same situation. This inconsistency is made to be compatible with the SQL standard.\n Optionally one can add the key word <CodeLiteral>ASC</CodeLiteral> (ascending) or <CodeLiteral>DESC</CodeLiteral> (descending) after any expression in the <CodeLiteral>ORDER BY</CodeLiteral> clause. If not specified, <CodeLiteral>ASC</CodeLiteral> is assumed by default. Alternatively, a specific ordering operator name can be specified in the <CodeLiteral>USING</CodeLiteral> clause. An ordering operator must be a less-than or greater-than member of some B-tree operator family. <CodeLiteral>ASC</CodeLiteral> is usually equivalent to <CodeLiteral>USING <</CodeLiteral> and <CodeLiteral>DESC</CodeLiteral> is usually equivalent to <CodeLiteral>USING ></CodeLiteral>. (But the creator of a user-defined data type can define exactly what the default sort ordering is, and it might correspond to operators with other names.)\n If <CodeLiteral>NULLS LAST</CodeLiteral> is specified, null values sort after all non-null values; if <CodeLiteral>NULLS FIRST</CodeLiteral> is specified, null values sort before all non-null values. If neither is specified, the default behavior is <CodeLiteral>NULLS LAST</CodeLiteral> when <CodeLiteral>ASC</CodeLiteral> is specified or implied, and <CodeLiteral>NULLS FIRST</CodeLiteral> when <CodeLiteral>DESC</CodeLiteral> is specified (thus, the default is to act as though nulls are larger than non-nulls). When <CodeLiteral>USING</CodeLiteral> is specified, the default nulls ordering depends on whether the operator is a less-than or greater-than operator.\n Note that ordering options apply only to the expression they follow; for example <CodeLiteral>ORDER BY x, y DESC</CodeLiteral> does not mean the same thing as <CodeLiteral>ORDER BY x DESC, y DESC</CodeLiteral>.\n Character-string data is sorted according to the collation that applies to the column being sorted. That can be overridden at need by including a <CodeLiteral>COLLATE</CodeLiteral> clause in the expression, for example <CodeLiteral>ORDER BY mycolumn COLLATE \"en_US\"</CodeLiteral>. For more information see Section 4.2.10 and Section 23.2. <sep>[DEMO]: SELECT name, age FROM people ORDER BY age ASC;",
        "example": [
            "SELECT name, age FROM people ORDER BY age ASC;"
        ],
        "link": []
    },
    {
        "type": "keyword",
        "keyword": "ORDER BY expression DESC",
        "tree": " (sort_clause ORDER BY (sortby_list (sortby (opt_asc_desc DESC))))",
        "description": "The optional <CodeLiteral>ORDER BY</CodeLiteral> clause has this general form:\n <code>ORDER BY expression [ ASC | DESC | USING operator ] [ NULLS { FIRST | LAST } ] [, ...]\n</code>\n The <CodeLiteral>ORDER BY</CodeLiteral> clause causes the result rows to be sorted according to the specified expression(s). If two rows are equal according to the leftmost expression, they are compared according to the next expression and so on. If they are equal according to all specified expressions, they are returned in an implementation-dependent order.\n Each expression can be the name or ordinal number of an output column (SELECT list item), or it can be an arbitrary expression formed from input-column values.\n The ordinal number refers to the ordinal (left-to-right) position of the output column. This feature makes it possible to define an ordering on the basis of a column that does not have a unique name. This is never absolutely necessary because it is always possible to assign a name to an output column using the <CodeLiteral>AS</CodeLiteral> clause.\n It is also possible to use arbitrary expressions in the <CodeLiteral>ORDER BY</CodeLiteral> clause, including columns that do not appear in the SELECT output list. Thus the following statement is valid:\n <code>SELECT name FROM distributors ORDER BY code;\n</code>\n A limitation of this feature is that an <CodeLiteral>ORDER BY</CodeLiteral> clause applying to the result of a <CodeLiteral>UNION</CodeLiteral>, <CodeLiteral>INTERSECT</CodeLiteral>, or <CodeLiteral>EXCEPT</CodeLiteral> clause can only specify an output column name or number, not an expression.\n If an <CodeLiteral>ORDER BY</CodeLiteral> expression is a simple name that matches both an output column name and an input column name, <CodeLiteral>ORDER BY</CodeLiteral> will interpret it as the output column name. This is the opposite of the choice that <CodeLiteral>GROUP BY</CodeLiteral> will make in the same situation. This inconsistency is made to be compatible with the SQL standard.\n Optionally one can add the key word <CodeLiteral>ASC</CodeLiteral> (ascending) or <CodeLiteral>DESC</CodeLiteral> (descending) after any expression in the <CodeLiteral>ORDER BY</CodeLiteral> clause. If not specified, <CodeLiteral>ASC</CodeLiteral> is assumed by default. Alternatively, a specific ordering operator name can be specified in the <CodeLiteral>USING</CodeLiteral> clause. An ordering operator must be a less-than or greater-than member of some B-tree operator family. <CodeLiteral>ASC</CodeLiteral> is usually equivalent to <CodeLiteral>USING <</CodeLiteral> and <CodeLiteral>DESC</CodeLiteral> is usually equivalent to <CodeLiteral>USING ></CodeLiteral>. (But the creator of a user-defined data type can define exactly what the default sort ordering is, and it might correspond to operators with other names.)\n If <CodeLiteral>NULLS LAST</CodeLiteral> is specified, null values sort after all non-null values; if <CodeLiteral>NULLS FIRST</CodeLiteral> is specified, null values sort before all non-null values. If neither is specified, the default behavior is <CodeLiteral>NULLS LAST</CodeLiteral> when <CodeLiteral>ASC</CodeLiteral> is specified or implied, and <CodeLiteral>NULLS FIRST</CodeLiteral> when <CodeLiteral>DESC</CodeLiteral> is specified (thus, the default is to act as though nulls are larger than non-nulls). When <CodeLiteral>USING</CodeLiteral> is specified, the default nulls ordering depends on whether the operator is a less-than or greater-than operator.\n Note that ordering options apply only to the expression they follow; for example <CodeLiteral>ORDER BY x, y DESC</CodeLiteral> does not mean the same thing as <CodeLiteral>ORDER BY x DESC, y DESC</CodeLiteral>.\n Character-string data is sorted according to the collation that applies to the column being sorted. That can be overridden at need by including a <CodeLiteral>COLLATE</CodeLiteral> clause in the expression, for example <CodeLiteral>ORDER BY mycolumn COLLATE \"en_US\"</CodeLiteral>. For more information see Section 4.2.10 and Section 23.2. ",
        "detail": "[DESCRIPTION]: The optional <CodeLiteral>ORDER BY</CodeLiteral> clause has this general form:\n <code>ORDER BY expression [ ASC | DESC | USING operator ] [ NULLS { FIRST | LAST } ] [, ...]\n</code>\n The <CodeLiteral>ORDER BY</CodeLiteral> clause causes the result rows to be sorted according to the specified expression(s). If two rows are equal according to the leftmost expression, they are compared according to the next expression and so on. If they are equal according to all specified expressions, they are returned in an implementation-dependent order.\n Each expression can be the name or ordinal number of an output column (SELECT list item), or it can be an arbitrary expression formed from input-column values.\n The ordinal number refers to the ordinal (left-to-right) position of the output column. This feature makes it possible to define an ordering on the basis of a column that does not have a unique name. This is never absolutely necessary because it is always possible to assign a name to an output column using the <CodeLiteral>AS</CodeLiteral> clause.\n It is also possible to use arbitrary expressions in the <CodeLiteral>ORDER BY</CodeLiteral> clause, including columns that do not appear in the SELECT output list. Thus the following statement is valid:\n <code>SELECT name FROM distributors ORDER BY code;\n</code>\n A limitation of this feature is that an <CodeLiteral>ORDER BY</CodeLiteral> clause applying to the result of a <CodeLiteral>UNION</CodeLiteral>, <CodeLiteral>INTERSECT</CodeLiteral>, or <CodeLiteral>EXCEPT</CodeLiteral> clause can only specify an output column name or number, not an expression.\n If an <CodeLiteral>ORDER BY</CodeLiteral> expression is a simple name that matches both an output column name and an input column name, <CodeLiteral>ORDER BY</CodeLiteral> will interpret it as the output column name. This is the opposite of the choice that <CodeLiteral>GROUP BY</CodeLiteral> will make in the same situation. This inconsistency is made to be compatible with the SQL standard.\n Optionally one can add the key word <CodeLiteral>ASC</CodeLiteral> (ascending) or <CodeLiteral>DESC</CodeLiteral> (descending) after any expression in the <CodeLiteral>ORDER BY</CodeLiteral> clause. If not specified, <CodeLiteral>ASC</CodeLiteral> is assumed by default. Alternatively, a specific ordering operator name can be specified in the <CodeLiteral>USING</CodeLiteral> clause. An ordering operator must be a less-than or greater-than member of some B-tree operator family. <CodeLiteral>ASC</CodeLiteral> is usually equivalent to <CodeLiteral>USING <</CodeLiteral> and <CodeLiteral>DESC</CodeLiteral> is usually equivalent to <CodeLiteral>USING ></CodeLiteral>. (But the creator of a user-defined data type can define exactly what the default sort ordering is, and it might correspond to operators with other names.)\n If <CodeLiteral>NULLS LAST</CodeLiteral> is specified, null values sort after all non-null values; if <CodeLiteral>NULLS FIRST</CodeLiteral> is specified, null values sort before all non-null values. If neither is specified, the default behavior is <CodeLiteral>NULLS LAST</CodeLiteral> when <CodeLiteral>ASC</CodeLiteral> is specified or implied, and <CodeLiteral>NULLS FIRST</CodeLiteral> when <CodeLiteral>DESC</CodeLiteral> is specified (thus, the default is to act as though nulls are larger than non-nulls). When <CodeLiteral>USING</CodeLiteral> is specified, the default nulls ordering depends on whether the operator is a less-than or greater-than operator.\n Note that ordering options apply only to the expression they follow; for example <CodeLiteral>ORDER BY x, y DESC</CodeLiteral> does not mean the same thing as <CodeLiteral>ORDER BY x DESC, y DESC</CodeLiteral>.\n Character-string data is sorted according to the collation that applies to the column being sorted. That can be overridden at need by including a <CodeLiteral>COLLATE</CodeLiteral> clause in the expression, for example <CodeLiteral>ORDER BY mycolumn COLLATE \"en_US\"</CodeLiteral>. For more information see Section 4.2.10 and Section 23.2. <sep>[DEMO]: SELECT id, name FROM employees ORDER BY name DESC;",
        "example": [
            "SELECT id, name FROM employees ORDER BY name DESC;"
        ],
        "link": []
    },
    {
        "type": "keyword",
        "keyword": "ORDER BY expression USING operator",
        "tree": " (sort_clause ORDER BY (sortby_list (sortby USING)))",
        "description": "The optional <CodeLiteral>ORDER BY</CodeLiteral> clause has this general form:\n <code>ORDER BY expression [ ASC | DESC | USING operator ] [ NULLS { FIRST | LAST } ] [, ...]\n</code>\n The <CodeLiteral>ORDER BY</CodeLiteral> clause causes the result rows to be sorted according to the specified expression(s). If two rows are equal according to the leftmost expression, they are compared according to the next expression and so on. If they are equal according to all specified expressions, they are returned in an implementation-dependent order.\n Each expression can be the name or ordinal number of an output column (SELECT list item), or it can be an arbitrary expression formed from input-column values.\n The ordinal number refers to the ordinal (left-to-right) position of the output column. This feature makes it possible to define an ordering on the basis of a column that does not have a unique name. This is never absolutely necessary because it is always possible to assign a name to an output column using the <CodeLiteral>AS</CodeLiteral> clause.\n It is also possible to use arbitrary expressions in the <CodeLiteral>ORDER BY</CodeLiteral> clause, including columns that do not appear in the SELECT output list. Thus the following statement is valid:\n <code>SELECT name FROM distributors ORDER BY code;\n</code>\n A limitation of this feature is that an <CodeLiteral>ORDER BY</CodeLiteral> clause applying to the result of a <CodeLiteral>UNION</CodeLiteral>, <CodeLiteral>INTERSECT</CodeLiteral>, or <CodeLiteral>EXCEPT</CodeLiteral> clause can only specify an output column name or number, not an expression.\n If an <CodeLiteral>ORDER BY</CodeLiteral> expression is a simple name that matches both an output column name and an input column name, <CodeLiteral>ORDER BY</CodeLiteral> will interpret it as the output column name. This is the opposite of the choice that <CodeLiteral>GROUP BY</CodeLiteral> will make in the same situation. This inconsistency is made to be compatible with the SQL standard.\n Optionally one can add the key word <CodeLiteral>ASC</CodeLiteral> (ascending) or <CodeLiteral>DESC</CodeLiteral> (descending) after any expression in the <CodeLiteral>ORDER BY</CodeLiteral> clause. If not specified, <CodeLiteral>ASC</CodeLiteral> is assumed by default. Alternatively, a specific ordering operator name can be specified in the <CodeLiteral>USING</CodeLiteral> clause. An ordering operator must be a less-than or greater-than member of some B-tree operator family. <CodeLiteral>ASC</CodeLiteral> is usually equivalent to <CodeLiteral>USING <</CodeLiteral> and <CodeLiteral>DESC</CodeLiteral> is usually equivalent to <CodeLiteral>USING ></CodeLiteral>. (But the creator of a user-defined data type can define exactly what the default sort ordering is, and it might correspond to operators with other names.)\n If <CodeLiteral>NULLS LAST</CodeLiteral> is specified, null values sort after all non-null values; if <CodeLiteral>NULLS FIRST</CodeLiteral> is specified, null values sort before all non-null values. If neither is specified, the default behavior is <CodeLiteral>NULLS LAST</CodeLiteral> when <CodeLiteral>ASC</CodeLiteral> is specified or implied, and <CodeLiteral>NULLS FIRST</CodeLiteral> when <CodeLiteral>DESC</CodeLiteral> is specified (thus, the default is to act as though nulls are larger than non-nulls). When <CodeLiteral>USING</CodeLiteral> is specified, the default nulls ordering depends on whether the operator is a less-than or greater-than operator.\n Note that ordering options apply only to the expression they follow; for example <CodeLiteral>ORDER BY x, y DESC</CodeLiteral> does not mean the same thing as <CodeLiteral>ORDER BY x DESC, y DESC</CodeLiteral>.\n Character-string data is sorted according to the collation that applies to the column being sorted. That can be overridden at need by including a <CodeLiteral>COLLATE</CodeLiteral> clause in the expression, for example <CodeLiteral>ORDER BY mycolumn COLLATE \"en_US\"</CodeLiteral>. For more information see Section 4.2.10 and Section 23.2. ",
        "detail": "[DESCRIPTION]: The optional <CodeLiteral>ORDER BY</CodeLiteral> clause has this general form:\n <code>ORDER BY expression [ ASC | DESC | USING operator ] [ NULLS { FIRST | LAST } ] [, ...]\n</code>\n The <CodeLiteral>ORDER BY</CodeLiteral> clause causes the result rows to be sorted according to the specified expression(s). If two rows are equal according to the leftmost expression, they are compared according to the next expression and so on. If they are equal according to all specified expressions, they are returned in an implementation-dependent order.\n Each expression can be the name or ordinal number of an output column (SELECT list item), or it can be an arbitrary expression formed from input-column values.\n The ordinal number refers to the ordinal (left-to-right) position of the output column. This feature makes it possible to define an ordering on the basis of a column that does not have a unique name. This is never absolutely necessary because it is always possible to assign a name to an output column using the <CodeLiteral>AS</CodeLiteral> clause.\n It is also possible to use arbitrary expressions in the <CodeLiteral>ORDER BY</CodeLiteral> clause, including columns that do not appear in the SELECT output list. Thus the following statement is valid:\n <code>SELECT name FROM distributors ORDER BY code;\n</code>\n A limitation of this feature is that an <CodeLiteral>ORDER BY</CodeLiteral> clause applying to the result of a <CodeLiteral>UNION</CodeLiteral>, <CodeLiteral>INTERSECT</CodeLiteral>, or <CodeLiteral>EXCEPT</CodeLiteral> clause can only specify an output column name or number, not an expression.\n If an <CodeLiteral>ORDER BY</CodeLiteral> expression is a simple name that matches both an output column name and an input column name, <CodeLiteral>ORDER BY</CodeLiteral> will interpret it as the output column name. This is the opposite of the choice that <CodeLiteral>GROUP BY</CodeLiteral> will make in the same situation. This inconsistency is made to be compatible with the SQL standard.\n Optionally one can add the key word <CodeLiteral>ASC</CodeLiteral> (ascending) or <CodeLiteral>DESC</CodeLiteral> (descending) after any expression in the <CodeLiteral>ORDER BY</CodeLiteral> clause. If not specified, <CodeLiteral>ASC</CodeLiteral> is assumed by default. Alternatively, a specific ordering operator name can be specified in the <CodeLiteral>USING</CodeLiteral> clause. An ordering operator must be a less-than or greater-than member of some B-tree operator family. <CodeLiteral>ASC</CodeLiteral> is usually equivalent to <CodeLiteral>USING <</CodeLiteral> and <CodeLiteral>DESC</CodeLiteral> is usually equivalent to <CodeLiteral>USING ></CodeLiteral>. (But the creator of a user-defined data type can define exactly what the default sort ordering is, and it might correspond to operators with other names.)\n If <CodeLiteral>NULLS LAST</CodeLiteral> is specified, null values sort after all non-null values; if <CodeLiteral>NULLS FIRST</CodeLiteral> is specified, null values sort before all non-null values. If neither is specified, the default behavior is <CodeLiteral>NULLS LAST</CodeLiteral> when <CodeLiteral>ASC</CodeLiteral> is specified or implied, and <CodeLiteral>NULLS FIRST</CodeLiteral> when <CodeLiteral>DESC</CodeLiteral> is specified (thus, the default is to act as though nulls are larger than non-nulls). When <CodeLiteral>USING</CodeLiteral> is specified, the default nulls ordering depends on whether the operator is a less-than or greater-than operator.\n Note that ordering options apply only to the expression they follow; for example <CodeLiteral>ORDER BY x, y DESC</CodeLiteral> does not mean the same thing as <CodeLiteral>ORDER BY x DESC, y DESC</CodeLiteral>.\n Character-string data is sorted according to the collation that applies to the column being sorted. That can be overridden at need by including a <CodeLiteral>COLLATE</CodeLiteral> clause in the expression, for example <CodeLiteral>ORDER BY mycolumn COLLATE \"en_US\"</CodeLiteral>. For more information see Section 4.2.10 and Section 23.2. <sep>[DEMO]: SELECT name FROM employees ORDER BY name USING <",
        "example": [
            "SELECT name FROM employees ORDER BY name USING <"
        ],
        "link": []
    },
    {
        "type": "keyword",
        "keyword": "ORDER BY expression NULLS FIRST",
        "tree": " (sort_clause ORDER BY (sortby_list (sortby (opt_nulls_order NULLS FIRST))))",
        "description": "The optional <CodeLiteral>ORDER BY</CodeLiteral> clause has this general form:\n <code>ORDER BY expression [ ASC | DESC | USING operator ] [ NULLS { FIRST | LAST } ] [, ...]\n</code>\n The <CodeLiteral>ORDER BY</CodeLiteral> clause causes the result rows to be sorted according to the specified expression(s). If two rows are equal according to the leftmost expression, they are compared according to the next expression and so on. If they are equal according to all specified expressions, they are returned in an implementation-dependent order.\n Each expression can be the name or ordinal number of an output column (SELECT list item), or it can be an arbitrary expression formed from input-column values.\n The ordinal number refers to the ordinal (left-to-right) position of the output column. This feature makes it possible to define an ordering on the basis of a column that does not have a unique name. This is never absolutely necessary because it is always possible to assign a name to an output column using the <CodeLiteral>AS</CodeLiteral> clause.\n It is also possible to use arbitrary expressions in the <CodeLiteral>ORDER BY</CodeLiteral> clause, including columns that do not appear in the SELECT output list. Thus the following statement is valid:\n <code>SELECT name FROM distributors ORDER BY code;\n</code>\n A limitation of this feature is that an <CodeLiteral>ORDER BY</CodeLiteral> clause applying to the result of a <CodeLiteral>UNION</CodeLiteral>, <CodeLiteral>INTERSECT</CodeLiteral>, or <CodeLiteral>EXCEPT</CodeLiteral> clause can only specify an output column name or number, not an expression.\n If an <CodeLiteral>ORDER BY</CodeLiteral> expression is a simple name that matches both an output column name and an input column name, <CodeLiteral>ORDER BY</CodeLiteral> will interpret it as the output column name. This is the opposite of the choice that <CodeLiteral>GROUP BY</CodeLiteral> will make in the same situation. This inconsistency is made to be compatible with the SQL standard.\n Optionally one can add the key word <CodeLiteral>ASC</CodeLiteral> (ascending) or <CodeLiteral>DESC</CodeLiteral> (descending) after any expression in the <CodeLiteral>ORDER BY</CodeLiteral> clause. If not specified, <CodeLiteral>ASC</CodeLiteral> is assumed by default. Alternatively, a specific ordering operator name can be specified in the <CodeLiteral>USING</CodeLiteral> clause. An ordering operator must be a less-than or greater-than member of some B-tree operator family. <CodeLiteral>ASC</CodeLiteral> is usually equivalent to <CodeLiteral>USING <</CodeLiteral> and <CodeLiteral>DESC</CodeLiteral> is usually equivalent to <CodeLiteral>USING ></CodeLiteral>. (But the creator of a user-defined data type can define exactly what the default sort ordering is, and it might correspond to operators with other names.)\n If <CodeLiteral>NULLS LAST</CodeLiteral> is specified, null values sort after all non-null values; if <CodeLiteral>NULLS FIRST</CodeLiteral> is specified, null values sort before all non-null values. If neither is specified, the default behavior is <CodeLiteral>NULLS LAST</CodeLiteral> when <CodeLiteral>ASC</CodeLiteral> is specified or implied, and <CodeLiteral>NULLS FIRST</CodeLiteral> when <CodeLiteral>DESC</CodeLiteral> is specified (thus, the default is to act as though nulls are larger than non-nulls). When <CodeLiteral>USING</CodeLiteral> is specified, the default nulls ordering depends on whether the operator is a less-than or greater-than operator.\n Note that ordering options apply only to the expression they follow; for example <CodeLiteral>ORDER BY x, y DESC</CodeLiteral> does not mean the same thing as <CodeLiteral>ORDER BY x DESC, y DESC</CodeLiteral>.\n Character-string data is sorted according to the collation that applies to the column being sorted. That can be overridden at need by including a <CodeLiteral>COLLATE</CodeLiteral> clause in the expression, for example <CodeLiteral>ORDER BY mycolumn COLLATE \"en_US\"</CodeLiteral>. For more information see Section 4.2.10 and Section 23.2. ",
        "detail": "[DESCRIPTION]: The optional <CodeLiteral>ORDER BY</CodeLiteral> clause has this general form:\n <code>ORDER BY expression [ ASC | DESC | USING operator ] [ NULLS { FIRST | LAST } ] [, ...]\n</code>\n The <CodeLiteral>ORDER BY</CodeLiteral> clause causes the result rows to be sorted according to the specified expression(s). If two rows are equal according to the leftmost expression, they are compared according to the next expression and so on. If they are equal according to all specified expressions, they are returned in an implementation-dependent order.\n Each expression can be the name or ordinal number of an output column (SELECT list item), or it can be an arbitrary expression formed from input-column values.\n The ordinal number refers to the ordinal (left-to-right) position of the output column. This feature makes it possible to define an ordering on the basis of a column that does not have a unique name. This is never absolutely necessary because it is always possible to assign a name to an output column using the <CodeLiteral>AS</CodeLiteral> clause.\n It is also possible to use arbitrary expressions in the <CodeLiteral>ORDER BY</CodeLiteral> clause, including columns that do not appear in the SELECT output list. Thus the following statement is valid:\n <code>SELECT name FROM distributors ORDER BY code;\n</code>\n A limitation of this feature is that an <CodeLiteral>ORDER BY</CodeLiteral> clause applying to the result of a <CodeLiteral>UNION</CodeLiteral>, <CodeLiteral>INTERSECT</CodeLiteral>, or <CodeLiteral>EXCEPT</CodeLiteral> clause can only specify an output column name or number, not an expression.\n If an <CodeLiteral>ORDER BY</CodeLiteral> expression is a simple name that matches both an output column name and an input column name, <CodeLiteral>ORDER BY</CodeLiteral> will interpret it as the output column name. This is the opposite of the choice that <CodeLiteral>GROUP BY</CodeLiteral> will make in the same situation. This inconsistency is made to be compatible with the SQL standard.\n Optionally one can add the key word <CodeLiteral>ASC</CodeLiteral> (ascending) or <CodeLiteral>DESC</CodeLiteral> (descending) after any expression in the <CodeLiteral>ORDER BY</CodeLiteral> clause. If not specified, <CodeLiteral>ASC</CodeLiteral> is assumed by default. Alternatively, a specific ordering operator name can be specified in the <CodeLiteral>USING</CodeLiteral> clause. An ordering operator must be a less-than or greater-than member of some B-tree operator family. <CodeLiteral>ASC</CodeLiteral> is usually equivalent to <CodeLiteral>USING <</CodeLiteral> and <CodeLiteral>DESC</CodeLiteral> is usually equivalent to <CodeLiteral>USING ></CodeLiteral>. (But the creator of a user-defined data type can define exactly what the default sort ordering is, and it might correspond to operators with other names.)\n If <CodeLiteral>NULLS LAST</CodeLiteral> is specified, null values sort after all non-null values; if <CodeLiteral>NULLS FIRST</CodeLiteral> is specified, null values sort before all non-null values. If neither is specified, the default behavior is <CodeLiteral>NULLS LAST</CodeLiteral> when <CodeLiteral>ASC</CodeLiteral> is specified or implied, and <CodeLiteral>NULLS FIRST</CodeLiteral> when <CodeLiteral>DESC</CodeLiteral> is specified (thus, the default is to act as though nulls are larger than non-nulls). When <CodeLiteral>USING</CodeLiteral> is specified, the default nulls ordering depends on whether the operator is a less-than or greater-than operator.\n Note that ordering options apply only to the expression they follow; for example <CodeLiteral>ORDER BY x, y DESC</CodeLiteral> does not mean the same thing as <CodeLiteral>ORDER BY x DESC, y DESC</CodeLiteral>.\n Character-string data is sorted according to the collation that applies to the column being sorted. That can be overridden at need by including a <CodeLiteral>COLLATE</CodeLiteral> clause in the expression, for example <CodeLiteral>ORDER BY mycolumn COLLATE \"en_US\"</CodeLiteral>. For more information see Section 4.2.10 and Section 23.2. <sep>[DEMO]: SELECT employee_id, name, age FROM employees ORDER BY age NULLS FIRST;",
        "example": [
            "SELECT employee_id, name, age FROM employees ORDER BY age NULLS FIRST;"
        ],
        "link": []
    },
    {
        "type": "keyword",
        "keyword": "ORDER BY expression NULLS LAST",
        "tree": " (sort_clause ORDER BY (sortby_list (sortby (opt_nulls_order NULLS LAST))))",
        "description": "The optional <CodeLiteral>ORDER BY</CodeLiteral> clause has this general form:\n <code>ORDER BY expression [ ASC | DESC | USING operator ] [ NULLS { FIRST | LAST } ] [, ...]\n</code>\n The <CodeLiteral>ORDER BY</CodeLiteral> clause causes the result rows to be sorted according to the specified expression(s). If two rows are equal according to the leftmost expression, they are compared according to the next expression and so on. If they are equal according to all specified expressions, they are returned in an implementation-dependent order.\n Each expression can be the name or ordinal number of an output column (SELECT list item), or it can be an arbitrary expression formed from input-column values.\n The ordinal number refers to the ordinal (left-to-right) position of the output column. This feature makes it possible to define an ordering on the basis of a column that does not have a unique name. This is never absolutely necessary because it is always possible to assign a name to an output column using the <CodeLiteral>AS</CodeLiteral> clause.\n It is also possible to use arbitrary expressions in the <CodeLiteral>ORDER BY</CodeLiteral> clause, including columns that do not appear in the SELECT output list. Thus the following statement is valid:\n <code>SELECT name FROM distributors ORDER BY code;\n</code>\n A limitation of this feature is that an <CodeLiteral>ORDER BY</CodeLiteral> clause applying to the result of a <CodeLiteral>UNION</CodeLiteral>, <CodeLiteral>INTERSECT</CodeLiteral>, or <CodeLiteral>EXCEPT</CodeLiteral> clause can only specify an output column name or number, not an expression.\n If an <CodeLiteral>ORDER BY</CodeLiteral> expression is a simple name that matches both an output column name and an input column name, <CodeLiteral>ORDER BY</CodeLiteral> will interpret it as the output column name. This is the opposite of the choice that <CodeLiteral>GROUP BY</CodeLiteral> will make in the same situation. This inconsistency is made to be compatible with the SQL standard.\n Optionally one can add the key word <CodeLiteral>ASC</CodeLiteral> (ascending) or <CodeLiteral>DESC</CodeLiteral> (descending) after any expression in the <CodeLiteral>ORDER BY</CodeLiteral> clause. If not specified, <CodeLiteral>ASC</CodeLiteral> is assumed by default. Alternatively, a specific ordering operator name can be specified in the <CodeLiteral>USING</CodeLiteral> clause. An ordering operator must be a less-than or greater-than member of some B-tree operator family. <CodeLiteral>ASC</CodeLiteral> is usually equivalent to <CodeLiteral>USING <</CodeLiteral> and <CodeLiteral>DESC</CodeLiteral> is usually equivalent to <CodeLiteral>USING ></CodeLiteral>. (But the creator of a user-defined data type can define exactly what the default sort ordering is, and it might correspond to operators with other names.)\n If <CodeLiteral>NULLS LAST</CodeLiteral> is specified, null values sort after all non-null values; if <CodeLiteral>NULLS FIRST</CodeLiteral> is specified, null values sort before all non-null values. If neither is specified, the default behavior is <CodeLiteral>NULLS LAST</CodeLiteral> when <CodeLiteral>ASC</CodeLiteral> is specified or implied, and <CodeLiteral>NULLS FIRST</CodeLiteral> when <CodeLiteral>DESC</CodeLiteral> is specified (thus, the default is to act as though nulls are larger than non-nulls). When <CodeLiteral>USING</CodeLiteral> is specified, the default nulls ordering depends on whether the operator is a less-than or greater-than operator.\n Note that ordering options apply only to the expression they follow; for example <CodeLiteral>ORDER BY x, y DESC</CodeLiteral> does not mean the same thing as <CodeLiteral>ORDER BY x DESC, y DESC</CodeLiteral>.\n Character-string data is sorted according to the collation that applies to the column being sorted. That can be overridden at need by including a <CodeLiteral>COLLATE</CodeLiteral> clause in the expression, for example <CodeLiteral>ORDER BY mycolumn COLLATE \"en_US\"</CodeLiteral>. For more information see Section 4.2.10 and Section 23.2. ",
        "detail": "[DESCRIPTION]: The optional <CodeLiteral>ORDER BY</CodeLiteral> clause has this general form:\n <code>ORDER BY expression [ ASC | DESC | USING operator ] [ NULLS { FIRST | LAST } ] [, ...]\n</code>\n The <CodeLiteral>ORDER BY</CodeLiteral> clause causes the result rows to be sorted according to the specified expression(s). If two rows are equal according to the leftmost expression, they are compared according to the next expression and so on. If they are equal according to all specified expressions, they are returned in an implementation-dependent order.\n Each expression can be the name or ordinal number of an output column (SELECT list item), or it can be an arbitrary expression formed from input-column values.\n The ordinal number refers to the ordinal (left-to-right) position of the output column. This feature makes it possible to define an ordering on the basis of a column that does not have a unique name. This is never absolutely necessary because it is always possible to assign a name to an output column using the <CodeLiteral>AS</CodeLiteral> clause.\n It is also possible to use arbitrary expressions in the <CodeLiteral>ORDER BY</CodeLiteral> clause, including columns that do not appear in the SELECT output list. Thus the following statement is valid:\n <code>SELECT name FROM distributors ORDER BY code;\n</code>\n A limitation of this feature is that an <CodeLiteral>ORDER BY</CodeLiteral> clause applying to the result of a <CodeLiteral>UNION</CodeLiteral>, <CodeLiteral>INTERSECT</CodeLiteral>, or <CodeLiteral>EXCEPT</CodeLiteral> clause can only specify an output column name or number, not an expression.\n If an <CodeLiteral>ORDER BY</CodeLiteral> expression is a simple name that matches both an output column name and an input column name, <CodeLiteral>ORDER BY</CodeLiteral> will interpret it as the output column name. This is the opposite of the choice that <CodeLiteral>GROUP BY</CodeLiteral> will make in the same situation. This inconsistency is made to be compatible with the SQL standard.\n Optionally one can add the key word <CodeLiteral>ASC</CodeLiteral> (ascending) or <CodeLiteral>DESC</CodeLiteral> (descending) after any expression in the <CodeLiteral>ORDER BY</CodeLiteral> clause. If not specified, <CodeLiteral>ASC</CodeLiteral> is assumed by default. Alternatively, a specific ordering operator name can be specified in the <CodeLiteral>USING</CodeLiteral> clause. An ordering operator must be a less-than or greater-than member of some B-tree operator family. <CodeLiteral>ASC</CodeLiteral> is usually equivalent to <CodeLiteral>USING <</CodeLiteral> and <CodeLiteral>DESC</CodeLiteral> is usually equivalent to <CodeLiteral>USING ></CodeLiteral>. (But the creator of a user-defined data type can define exactly what the default sort ordering is, and it might correspond to operators with other names.)\n If <CodeLiteral>NULLS LAST</CodeLiteral> is specified, null values sort after all non-null values; if <CodeLiteral>NULLS FIRST</CodeLiteral> is specified, null values sort before all non-null values. If neither is specified, the default behavior is <CodeLiteral>NULLS LAST</CodeLiteral> when <CodeLiteral>ASC</CodeLiteral> is specified or implied, and <CodeLiteral>NULLS FIRST</CodeLiteral> when <CodeLiteral>DESC</CodeLiteral> is specified (thus, the default is to act as though nulls are larger than non-nulls). When <CodeLiteral>USING</CodeLiteral> is specified, the default nulls ordering depends on whether the operator is a less-than or greater-than operator.\n Note that ordering options apply only to the expression they follow; for example <CodeLiteral>ORDER BY x, y DESC</CodeLiteral> does not mean the same thing as <CodeLiteral>ORDER BY x DESC, y DESC</CodeLiteral>.\n Character-string data is sorted according to the collation that applies to the column being sorted. That can be overridden at need by including a <CodeLiteral>COLLATE</CodeLiteral> clause in the expression, for example <CodeLiteral>ORDER BY mycolumn COLLATE \"en_US\"</CodeLiteral>. For more information see Section 4.2.10 and Section 23.2. <sep>[DEMO]: SELECT id, name FROM employees ORDER BY salary NULLS LAST;",
        "example": [
            "SELECT id, name FROM employees ORDER BY salary NULLS LAST;"
        ],
        "link": []
    },
    {
        "type": "keyword",
        "keyword": "ORDER BY expression",
        "tree": " (sort_clause ORDER BY)",
        "description": "The optional <CodeLiteral>ORDER BY</CodeLiteral> clause has this general form:\n <code>ORDER BY expression [ ASC | DESC | USING operator ] [ NULLS { FIRST | LAST } ] [, ...]\n</code>\n The <CodeLiteral>ORDER BY</CodeLiteral> clause causes the result rows to be sorted according to the specified expression(s). If two rows are equal according to the leftmost expression, they are compared according to the next expression and so on. If they are equal according to all specified expressions, they are returned in an implementation-dependent order.\n Each expression can be the name or ordinal number of an output column (SELECT list item), or it can be an arbitrary expression formed from input-column values.\n The ordinal number refers to the ordinal (left-to-right) position of the output column. This feature makes it possible to define an ordering on the basis of a column that does not have a unique name. This is never absolutely necessary because it is always possible to assign a name to an output column using the <CodeLiteral>AS</CodeLiteral> clause.\n It is also possible to use arbitrary expressions in the <CodeLiteral>ORDER BY</CodeLiteral> clause, including columns that do not appear in the SELECT output list. Thus the following statement is valid:\n <code>SELECT name FROM distributors ORDER BY code;\n</code>\n A limitation of this feature is that an <CodeLiteral>ORDER BY</CodeLiteral> clause applying to the result of a <CodeLiteral>UNION</CodeLiteral>, <CodeLiteral>INTERSECT</CodeLiteral>, or <CodeLiteral>EXCEPT</CodeLiteral> clause can only specify an output column name or number, not an expression.\n If an <CodeLiteral>ORDER BY</CodeLiteral> expression is a simple name that matches both an output column name and an input column name, <CodeLiteral>ORDER BY</CodeLiteral> will interpret it as the output column name. This is the opposite of the choice that <CodeLiteral>GROUP BY</CodeLiteral> will make in the same situation. This inconsistency is made to be compatible with the SQL standard.\n Optionally one can add the key word <CodeLiteral>ASC</CodeLiteral> (ascending) or <CodeLiteral>DESC</CodeLiteral> (descending) after any expression in the <CodeLiteral>ORDER BY</CodeLiteral> clause. If not specified, <CodeLiteral>ASC</CodeLiteral> is assumed by default. Alternatively, a specific ordering operator name can be specified in the <CodeLiteral>USING</CodeLiteral> clause. An ordering operator must be a less-than or greater-than member of some B-tree operator family. <CodeLiteral>ASC</CodeLiteral> is usually equivalent to <CodeLiteral>USING <</CodeLiteral> and <CodeLiteral>DESC</CodeLiteral> is usually equivalent to <CodeLiteral>USING ></CodeLiteral>. (But the creator of a user-defined data type can define exactly what the default sort ordering is, and it might correspond to operators with other names.)\n If <CodeLiteral>NULLS LAST</CodeLiteral> is specified, null values sort after all non-null values; if <CodeLiteral>NULLS FIRST</CodeLiteral> is specified, null values sort before all non-null values. If neither is specified, the default behavior is <CodeLiteral>NULLS LAST</CodeLiteral> when <CodeLiteral>ASC</CodeLiteral> is specified or implied, and <CodeLiteral>NULLS FIRST</CodeLiteral> when <CodeLiteral>DESC</CodeLiteral> is specified (thus, the default is to act as though nulls are larger than non-nulls). When <CodeLiteral>USING</CodeLiteral> is specified, the default nulls ordering depends on whether the operator is a less-than or greater-than operator.\n Note that ordering options apply only to the expression they follow; for example <CodeLiteral>ORDER BY x, y DESC</CodeLiteral> does not mean the same thing as <CodeLiteral>ORDER BY x DESC, y DESC</CodeLiteral>.\n Character-string data is sorted according to the collation that applies to the column being sorted. That can be overridden at need by including a <CodeLiteral>COLLATE</CodeLiteral> clause in the expression, for example <CodeLiteral>ORDER BY mycolumn COLLATE \"en_US\"</CodeLiteral>. For more information see Section 4.2.10 and Section 23.2. ",
        "detail": "[DESCRIPTION]: The optional <CodeLiteral>ORDER BY</CodeLiteral> clause has this general form:\n <code>ORDER BY expression [ ASC | DESC | USING operator ] [ NULLS { FIRST | LAST } ] [, ...]\n</code>\n The <CodeLiteral>ORDER BY</CodeLiteral> clause causes the result rows to be sorted according to the specified expression(s). If two rows are equal according to the leftmost expression, they are compared according to the next expression and so on. If they are equal according to all specified expressions, they are returned in an implementation-dependent order.\n Each expression can be the name or ordinal number of an output column (SELECT list item), or it can be an arbitrary expression formed from input-column values.\n The ordinal number refers to the ordinal (left-to-right) position of the output column. This feature makes it possible to define an ordering on the basis of a column that does not have a unique name. This is never absolutely necessary because it is always possible to assign a name to an output column using the <CodeLiteral>AS</CodeLiteral> clause.\n It is also possible to use arbitrary expressions in the <CodeLiteral>ORDER BY</CodeLiteral> clause, including columns that do not appear in the SELECT output list. Thus the following statement is valid:\n <code>SELECT name FROM distributors ORDER BY code;\n</code>\n A limitation of this feature is that an <CodeLiteral>ORDER BY</CodeLiteral> clause applying to the result of a <CodeLiteral>UNION</CodeLiteral>, <CodeLiteral>INTERSECT</CodeLiteral>, or <CodeLiteral>EXCEPT</CodeLiteral> clause can only specify an output column name or number, not an expression.\n If an <CodeLiteral>ORDER BY</CodeLiteral> expression is a simple name that matches both an output column name and an input column name, <CodeLiteral>ORDER BY</CodeLiteral> will interpret it as the output column name. This is the opposite of the choice that <CodeLiteral>GROUP BY</CodeLiteral> will make in the same situation. This inconsistency is made to be compatible with the SQL standard.\n Optionally one can add the key word <CodeLiteral>ASC</CodeLiteral> (ascending) or <CodeLiteral>DESC</CodeLiteral> (descending) after any expression in the <CodeLiteral>ORDER BY</CodeLiteral> clause. If not specified, <CodeLiteral>ASC</CodeLiteral> is assumed by default. Alternatively, a specific ordering operator name can be specified in the <CodeLiteral>USING</CodeLiteral> clause. An ordering operator must be a less-than or greater-than member of some B-tree operator family. <CodeLiteral>ASC</CodeLiteral> is usually equivalent to <CodeLiteral>USING <</CodeLiteral> and <CodeLiteral>DESC</CodeLiteral> is usually equivalent to <CodeLiteral>USING ></CodeLiteral>. (But the creator of a user-defined data type can define exactly what the default sort ordering is, and it might correspond to operators with other names.)\n If <CodeLiteral>NULLS LAST</CodeLiteral> is specified, null values sort after all non-null values; if <CodeLiteral>NULLS FIRST</CodeLiteral> is specified, null values sort before all non-null values. If neither is specified, the default behavior is <CodeLiteral>NULLS LAST</CodeLiteral> when <CodeLiteral>ASC</CodeLiteral> is specified or implied, and <CodeLiteral>NULLS FIRST</CodeLiteral> when <CodeLiteral>DESC</CodeLiteral> is specified (thus, the default is to act as though nulls are larger than non-nulls). When <CodeLiteral>USING</CodeLiteral> is specified, the default nulls ordering depends on whether the operator is a less-than or greater-than operator.\n Note that ordering options apply only to the expression they follow; for example <CodeLiteral>ORDER BY x, y DESC</CodeLiteral> does not mean the same thing as <CodeLiteral>ORDER BY x DESC, y DESC</CodeLiteral>.\n Character-string data is sorted according to the collation that applies to the column being sorted. That can be overridden at need by including a <CodeLiteral>COLLATE</CodeLiteral> clause in the expression, for example <CodeLiteral>ORDER BY mycolumn COLLATE \"en_US\"</CodeLiteral>. For more information see Section 4.2.10 and Section 23.2. <sep>[DEMO]: SELECT * FROM employees ORDER BY last_name ASC, hire_date DESC NULLS LAST;",
        "example": [
            "SELECT * FROM employees ORDER BY last_name ASC, hire_date DESC NULLS LAST;"
        ],
        "link": []
    },
    {
        "type": "keyword",
        "keyword": "LIMIT count",
        "tree": " (select_no_parens (opt_select_limit (select_limit (limit_clause LIMIT))))",
        "description": "The <CodeLiteral>LIMIT</CodeLiteral> clause consists of two independent sub-clauses:\n <code>LIMIT { count | ALL }\nOFFSET start\n</code>\n count specifies the maximum number of rows to return, while start specifies the number of rows to skip before starting to return rows. When both are specified, start rows are skipped before starting to count the count rows to be returned.\n If the count expression evaluates to NULL, it is treated as <CodeLiteral>LIMIT ALL</CodeLiteral>, i.e., no limit. If start evaluates to NULL, it is treated the same as <CodeLiteral>OFFSET 0</CodeLiteral>.\n SQL:2008 introduced a different syntax to achieve the same result, which PostgreSQL also supports. It is:\n <code>OFFSET start { ROW | ROWS }\nFETCH { FIRST | NEXT } [ count ] { ROW | ROWS } ONLY\n</code>\n In this syntax, the start or count value is required by the standard to be a literal constant, a parameter, or a variable name; as a PostgreSQL extension, other expressions are allowed, but will generally need to be enclosed in parentheses to avoid ambiguity. If count is omitted in a <CodeLiteral>FETCH</CodeLiteral> clause, it defaults to 1. <CodeLiteral>ROW</CodeLiteral> and <CodeLiteral>ROWS</CodeLiteral> as well as <CodeLiteral>FIRST</CodeLiteral> and <CodeLiteral>NEXT</CodeLiteral> are noise words that don't influence the effects of these clauses. According to the standard, the <CodeLiteral>OFFSET</CodeLiteral> clause must come before the <CodeLiteral>FETCH</CodeLiteral> clause if both are present; but PostgreSQL is laxer and allows either order.\n When using <CodeLiteral>LIMIT</CodeLiteral>, it is a good idea to use an <CodeLiteral>ORDER BY</CodeLiteral> clause that constrains the result rows into a unique order. Otherwise you will get an unpredictable subset of the query's rows \u2014 you might be asking for the tenth through twentieth rows, but tenth through twentieth in what ordering? You don't know what ordering unless you specify <CodeLiteral>ORDER BY</CodeLiteral>.\n The query planner takes <CodeLiteral>LIMIT</CodeLiteral> into account when generating a query plan, so you are very likely to get different plans (yielding different row orders) depending on what you use for <CodeLiteral>LIMIT</CodeLiteral> and <CodeLiteral>OFFSET</CodeLiteral>. Thus, using different <CodeLiteral>LIMIT</CodeLiteral>/<CodeLiteral>OFFSET</CodeLiteral> values to select different subsets of a query result will give inconsistent results unless you enforce a predictable result ordering with <CodeLiteral>ORDER BY</CodeLiteral>. This is not a bug; it is an inherent consequence of the fact that SQL does not promise to deliver the results of a query in any particular order unless <CodeLiteral>ORDER BY</CodeLiteral> is used to constrain the order.\n It is even possible for repeated executions of the same <CodeLiteral>LIMIT</CodeLiteral> query to return different subsets of the rows of a table, if there is not an <CodeLiteral>ORDER BY</CodeLiteral> to enforce selection of a deterministic subset. Again, this is not a bug; determinism of the results is simply not guaranteed in such a case. ",
        "detail": "[DESCRIPTION]: The <CodeLiteral>LIMIT</CodeLiteral> clause consists of two independent sub-clauses:\n <code>LIMIT { count | ALL }\nOFFSET start\n</code>\n count specifies the maximum number of rows to return, while start specifies the number of rows to skip before starting to return rows. When both are specified, start rows are skipped before starting to count the count rows to be returned.\n If the count expression evaluates to NULL, it is treated as <CodeLiteral>LIMIT ALL</CodeLiteral>, i.e., no limit. If start evaluates to NULL, it is treated the same as <CodeLiteral>OFFSET 0</CodeLiteral>.\n SQL:2008 introduced a different syntax to achieve the same result, which PostgreSQL also supports. It is:\n <code>OFFSET start { ROW | ROWS }\nFETCH { FIRST | NEXT } [ count ] { ROW | ROWS } ONLY\n</code>\n In this syntax, the start or count value is required by the standard to be a literal constant, a parameter, or a variable name; as a PostgreSQL extension, other expressions are allowed, but will generally need to be enclosed in parentheses to avoid ambiguity. If count is omitted in a <CodeLiteral>FETCH</CodeLiteral> clause, it defaults to 1. <CodeLiteral>ROW</CodeLiteral> and <CodeLiteral>ROWS</CodeLiteral> as well as <CodeLiteral>FIRST</CodeLiteral> and <CodeLiteral>NEXT</CodeLiteral> are noise words that don't influence the effects of these clauses. According to the standard, the <CodeLiteral>OFFSET</CodeLiteral> clause must come before the <CodeLiteral>FETCH</CodeLiteral> clause if both are present; but PostgreSQL is laxer and allows either order.\n When using <CodeLiteral>LIMIT</CodeLiteral>, it is a good idea to use an <CodeLiteral>ORDER BY</CodeLiteral> clause that constrains the result rows into a unique order. Otherwise you will get an unpredictable subset of the query's rows \u2014 you might be asking for the tenth through twentieth rows, but tenth through twentieth in what ordering? You don't know what ordering unless you specify <CodeLiteral>ORDER BY</CodeLiteral>.\n The query planner takes <CodeLiteral>LIMIT</CodeLiteral> into account when generating a query plan, so you are very likely to get different plans (yielding different row orders) depending on what you use for <CodeLiteral>LIMIT</CodeLiteral> and <CodeLiteral>OFFSET</CodeLiteral>. Thus, using different <CodeLiteral>LIMIT</CodeLiteral>/<CodeLiteral>OFFSET</CodeLiteral> values to select different subsets of a query result will give inconsistent results unless you enforce a predictable result ordering with <CodeLiteral>ORDER BY</CodeLiteral>. This is not a bug; it is an inherent consequence of the fact that SQL does not promise to deliver the results of a query in any particular order unless <CodeLiteral>ORDER BY</CodeLiteral> is used to constrain the order.\n It is even possible for repeated executions of the same <CodeLiteral>LIMIT</CodeLiteral> query to return different subsets of the rows of a table, if there is not an <CodeLiteral>ORDER BY</CodeLiteral> to enforce selection of a deterministic subset. Again, this is not a bug; determinism of the results is simply not guaranteed in such a case. <sep>[DEMO]: SELECT * FROM employees ORDER BY employee_id LIMIT 5 OFFSET 3",
        "example": [
            "SELECT * FROM employees ORDER BY employee_id LIMIT 5 OFFSET 3"
        ],
        "link": []
    },
    {
        "type": "keyword",
        "keyword": "LIMIT count",
        "tree": " (select_no_parens (select_limit (limit_clause LIMIT)))",
        "description": "The <CodeLiteral>LIMIT</CodeLiteral> clause consists of two independent sub-clauses:\n <code>LIMIT { count | ALL }\nOFFSET start\n</code>\n count specifies the maximum number of rows to return, while start specifies the number of rows to skip before starting to return rows. When both are specified, start rows are skipped before starting to count the count rows to be returned.\n If the count expression evaluates to NULL, it is treated as <CodeLiteral>LIMIT ALL</CodeLiteral>, i.e., no limit. If start evaluates to NULL, it is treated the same as <CodeLiteral>OFFSET 0</CodeLiteral>.\n SQL:2008 introduced a different syntax to achieve the same result, which PostgreSQL also supports. It is:\n <code>OFFSET start { ROW | ROWS }\nFETCH { FIRST | NEXT } [ count ] { ROW | ROWS } ONLY\n</code>\n In this syntax, the start or count value is required by the standard to be a literal constant, a parameter, or a variable name; as a PostgreSQL extension, other expressions are allowed, but will generally need to be enclosed in parentheses to avoid ambiguity. If count is omitted in a <CodeLiteral>FETCH</CodeLiteral> clause, it defaults to 1. <CodeLiteral>ROW</CodeLiteral> and <CodeLiteral>ROWS</CodeLiteral> as well as <CodeLiteral>FIRST</CodeLiteral> and <CodeLiteral>NEXT</CodeLiteral> are noise words that don't influence the effects of these clauses. According to the standard, the <CodeLiteral>OFFSET</CodeLiteral> clause must come before the <CodeLiteral>FETCH</CodeLiteral> clause if both are present; but PostgreSQL is laxer and allows either order.\n When using <CodeLiteral>LIMIT</CodeLiteral>, it is a good idea to use an <CodeLiteral>ORDER BY</CodeLiteral> clause that constrains the result rows into a unique order. Otherwise you will get an unpredictable subset of the query's rows \u2014 you might be asking for the tenth through twentieth rows, but tenth through twentieth in what ordering? You don't know what ordering unless you specify <CodeLiteral>ORDER BY</CodeLiteral>.\n The query planner takes <CodeLiteral>LIMIT</CodeLiteral> into account when generating a query plan, so you are very likely to get different plans (yielding different row orders) depending on what you use for <CodeLiteral>LIMIT</CodeLiteral> and <CodeLiteral>OFFSET</CodeLiteral>. Thus, using different <CodeLiteral>LIMIT</CodeLiteral>/<CodeLiteral>OFFSET</CodeLiteral> values to select different subsets of a query result will give inconsistent results unless you enforce a predictable result ordering with <CodeLiteral>ORDER BY</CodeLiteral>. This is not a bug; it is an inherent consequence of the fact that SQL does not promise to deliver the results of a query in any particular order unless <CodeLiteral>ORDER BY</CodeLiteral> is used to constrain the order.\n It is even possible for repeated executions of the same <CodeLiteral>LIMIT</CodeLiteral> query to return different subsets of the rows of a table, if there is not an <CodeLiteral>ORDER BY</CodeLiteral> to enforce selection of a deterministic subset. Again, this is not a bug; determinism of the results is simply not guaranteed in such a case. ",
        "detail": "[DESCRIPTION]: The <CodeLiteral>LIMIT</CodeLiteral> clause consists of two independent sub-clauses:\n <code>LIMIT { count | ALL }\nOFFSET start\n</code>\n count specifies the maximum number of rows to return, while start specifies the number of rows to skip before starting to return rows. When both are specified, start rows are skipped before starting to count the count rows to be returned.\n If the count expression evaluates to NULL, it is treated as <CodeLiteral>LIMIT ALL</CodeLiteral>, i.e., no limit. If start evaluates to NULL, it is treated the same as <CodeLiteral>OFFSET 0</CodeLiteral>.\n SQL:2008 introduced a different syntax to achieve the same result, which PostgreSQL also supports. It is:\n <code>OFFSET start { ROW | ROWS }\nFETCH { FIRST | NEXT } [ count ] { ROW | ROWS } ONLY\n</code>\n In this syntax, the start or count value is required by the standard to be a literal constant, a parameter, or a variable name; as a PostgreSQL extension, other expressions are allowed, but will generally need to be enclosed in parentheses to avoid ambiguity. If count is omitted in a <CodeLiteral>FETCH</CodeLiteral> clause, it defaults to 1. <CodeLiteral>ROW</CodeLiteral> and <CodeLiteral>ROWS</CodeLiteral> as well as <CodeLiteral>FIRST</CodeLiteral> and <CodeLiteral>NEXT</CodeLiteral> are noise words that don't influence the effects of these clauses. According to the standard, the <CodeLiteral>OFFSET</CodeLiteral> clause must come before the <CodeLiteral>FETCH</CodeLiteral> clause if both are present; but PostgreSQL is laxer and allows either order.\n When using <CodeLiteral>LIMIT</CodeLiteral>, it is a good idea to use an <CodeLiteral>ORDER BY</CodeLiteral> clause that constrains the result rows into a unique order. Otherwise you will get an unpredictable subset of the query's rows \u2014 you might be asking for the tenth through twentieth rows, but tenth through twentieth in what ordering? You don't know what ordering unless you specify <CodeLiteral>ORDER BY</CodeLiteral>.\n The query planner takes <CodeLiteral>LIMIT</CodeLiteral> into account when generating a query plan, so you are very likely to get different plans (yielding different row orders) depending on what you use for <CodeLiteral>LIMIT</CodeLiteral> and <CodeLiteral>OFFSET</CodeLiteral>. Thus, using different <CodeLiteral>LIMIT</CodeLiteral>/<CodeLiteral>OFFSET</CodeLiteral> values to select different subsets of a query result will give inconsistent results unless you enforce a predictable result ordering with <CodeLiteral>ORDER BY</CodeLiteral>. This is not a bug; it is an inherent consequence of the fact that SQL does not promise to deliver the results of a query in any particular order unless <CodeLiteral>ORDER BY</CodeLiteral> is used to constrain the order.\n It is even possible for repeated executions of the same <CodeLiteral>LIMIT</CodeLiteral> query to return different subsets of the rows of a table, if there is not an <CodeLiteral>ORDER BY</CodeLiteral> to enforce selection of a deterministic subset. Again, this is not a bug; determinism of the results is simply not guaranteed in such a case. <sep>[DEMO]: SELECT * FROM employees ORDER BY employee_id LIMIT 5 OFFSET 3",
        "example": [
            "SELECT * FROM employees ORDER BY employee_id LIMIT 5 OFFSET 3"
        ],
        "link": []
    },
    {
        "type": "keyword",
        "keyword": "LIMIT ALL",
        "tree": " (select_no_parens (opt_select_limit (select_limit (limit_clause LIMIT (select_limit_value ALL)))))",
        "description": "The <CodeLiteral>LIMIT</CodeLiteral> clause consists of two independent sub-clauses:\n <code>LIMIT { count | ALL }\nOFFSET start\n</code>\n count specifies the maximum number of rows to return, while start specifies the number of rows to skip before starting to return rows. When both are specified, start rows are skipped before starting to count the count rows to be returned.\n If the count expression evaluates to NULL, it is treated as <CodeLiteral>LIMIT ALL</CodeLiteral>, i.e., no limit. If start evaluates to NULL, it is treated the same as <CodeLiteral>OFFSET 0</CodeLiteral>.\n SQL:2008 introduced a different syntax to achieve the same result, which PostgreSQL also supports. It is:\n <code>OFFSET start { ROW | ROWS }\nFETCH { FIRST | NEXT } [ count ] { ROW | ROWS } ONLY\n</code>\n In this syntax, the start or count value is required by the standard to be a literal constant, a parameter, or a variable name; as a PostgreSQL extension, other expressions are allowed, but will generally need to be enclosed in parentheses to avoid ambiguity. If count is omitted in a <CodeLiteral>FETCH</CodeLiteral> clause, it defaults to 1. <CodeLiteral>ROW</CodeLiteral> and <CodeLiteral>ROWS</CodeLiteral> as well as <CodeLiteral>FIRST</CodeLiteral> and <CodeLiteral>NEXT</CodeLiteral> are noise words that don't influence the effects of these clauses. According to the standard, the <CodeLiteral>OFFSET</CodeLiteral> clause must come before the <CodeLiteral>FETCH</CodeLiteral> clause if both are present; but PostgreSQL is laxer and allows either order.\n When using <CodeLiteral>LIMIT</CodeLiteral>, it is a good idea to use an <CodeLiteral>ORDER BY</CodeLiteral> clause that constrains the result rows into a unique order. Otherwise you will get an unpredictable subset of the query's rows \u2014 you might be asking for the tenth through twentieth rows, but tenth through twentieth in what ordering? You don't know what ordering unless you specify <CodeLiteral>ORDER BY</CodeLiteral>.\n The query planner takes <CodeLiteral>LIMIT</CodeLiteral> into account when generating a query plan, so you are very likely to get different plans (yielding different row orders) depending on what you use for <CodeLiteral>LIMIT</CodeLiteral> and <CodeLiteral>OFFSET</CodeLiteral>. Thus, using different <CodeLiteral>LIMIT</CodeLiteral>/<CodeLiteral>OFFSET</CodeLiteral> values to select different subsets of a query result will give inconsistent results unless you enforce a predictable result ordering with <CodeLiteral>ORDER BY</CodeLiteral>. This is not a bug; it is an inherent consequence of the fact that SQL does not promise to deliver the results of a query in any particular order unless <CodeLiteral>ORDER BY</CodeLiteral> is used to constrain the order.\n It is even possible for repeated executions of the same <CodeLiteral>LIMIT</CodeLiteral> query to return different subsets of the rows of a table, if there is not an <CodeLiteral>ORDER BY</CodeLiteral> to enforce selection of a deterministic subset. Again, this is not a bug; determinism of the results is simply not guaranteed in such a case. ",
        "detail": "[DESCRIPTION]: The <CodeLiteral>LIMIT</CodeLiteral> clause consists of two independent sub-clauses:\n <code>LIMIT { count | ALL }\nOFFSET start\n</code>\n count specifies the maximum number of rows to return, while start specifies the number of rows to skip before starting to return rows. When both are specified, start rows are skipped before starting to count the count rows to be returned.\n If the count expression evaluates to NULL, it is treated as <CodeLiteral>LIMIT ALL</CodeLiteral>, i.e., no limit. If start evaluates to NULL, it is treated the same as <CodeLiteral>OFFSET 0</CodeLiteral>.\n SQL:2008 introduced a different syntax to achieve the same result, which PostgreSQL also supports. It is:\n <code>OFFSET start { ROW | ROWS }\nFETCH { FIRST | NEXT } [ count ] { ROW | ROWS } ONLY\n</code>\n In this syntax, the start or count value is required by the standard to be a literal constant, a parameter, or a variable name; as a PostgreSQL extension, other expressions are allowed, but will generally need to be enclosed in parentheses to avoid ambiguity. If count is omitted in a <CodeLiteral>FETCH</CodeLiteral> clause, it defaults to 1. <CodeLiteral>ROW</CodeLiteral> and <CodeLiteral>ROWS</CodeLiteral> as well as <CodeLiteral>FIRST</CodeLiteral> and <CodeLiteral>NEXT</CodeLiteral> are noise words that don't influence the effects of these clauses. According to the standard, the <CodeLiteral>OFFSET</CodeLiteral> clause must come before the <CodeLiteral>FETCH</CodeLiteral> clause if both are present; but PostgreSQL is laxer and allows either order.\n When using <CodeLiteral>LIMIT</CodeLiteral>, it is a good idea to use an <CodeLiteral>ORDER BY</CodeLiteral> clause that constrains the result rows into a unique order. Otherwise you will get an unpredictable subset of the query's rows \u2014 you might be asking for the tenth through twentieth rows, but tenth through twentieth in what ordering? You don't know what ordering unless you specify <CodeLiteral>ORDER BY</CodeLiteral>.\n The query planner takes <CodeLiteral>LIMIT</CodeLiteral> into account when generating a query plan, so you are very likely to get different plans (yielding different row orders) depending on what you use for <CodeLiteral>LIMIT</CodeLiteral> and <CodeLiteral>OFFSET</CodeLiteral>. Thus, using different <CodeLiteral>LIMIT</CodeLiteral>/<CodeLiteral>OFFSET</CodeLiteral> values to select different subsets of a query result will give inconsistent results unless you enforce a predictable result ordering with <CodeLiteral>ORDER BY</CodeLiteral>. This is not a bug; it is an inherent consequence of the fact that SQL does not promise to deliver the results of a query in any particular order unless <CodeLiteral>ORDER BY</CodeLiteral> is used to constrain the order.\n It is even possible for repeated executions of the same <CodeLiteral>LIMIT</CodeLiteral> query to return different subsets of the rows of a table, if there is not an <CodeLiteral>ORDER BY</CodeLiteral> to enforce selection of a deterministic subset. Again, this is not a bug; determinism of the results is simply not guaranteed in such a case. <sep>[DEMO]: SELECT * FROM employees ORDER BY employee_id LIMIT ALL;",
        "example": [
            "SELECT * FROM employees ORDER BY employee_id LIMIT ALL;"
        ],
        "link": []
    },
    {
        "type": "keyword",
        "keyword": "LIMIT ALL",
        "tree": " (select_no_parens (select_limit (limit_clause LIMIT (select_limit_value ALL))))",
        "description": "The <CodeLiteral>LIMIT</CodeLiteral> clause consists of two independent sub-clauses:\n <code>LIMIT { count | ALL }\nOFFSET start\n</code>\n count specifies the maximum number of rows to return, while start specifies the number of rows to skip before starting to return rows. When both are specified, start rows are skipped before starting to count the count rows to be returned.\n If the count expression evaluates to NULL, it is treated as <CodeLiteral>LIMIT ALL</CodeLiteral>, i.e., no limit. If start evaluates to NULL, it is treated the same as <CodeLiteral>OFFSET 0</CodeLiteral>.\n SQL:2008 introduced a different syntax to achieve the same result, which PostgreSQL also supports. It is:\n <code>OFFSET start { ROW | ROWS }\nFETCH { FIRST | NEXT } [ count ] { ROW | ROWS } ONLY\n</code>\n In this syntax, the start or count value is required by the standard to be a literal constant, a parameter, or a variable name; as a PostgreSQL extension, other expressions are allowed, but will generally need to be enclosed in parentheses to avoid ambiguity. If count is omitted in a <CodeLiteral>FETCH</CodeLiteral> clause, it defaults to 1. <CodeLiteral>ROW</CodeLiteral> and <CodeLiteral>ROWS</CodeLiteral> as well as <CodeLiteral>FIRST</CodeLiteral> and <CodeLiteral>NEXT</CodeLiteral> are noise words that don't influence the effects of these clauses. According to the standard, the <CodeLiteral>OFFSET</CodeLiteral> clause must come before the <CodeLiteral>FETCH</CodeLiteral> clause if both are present; but PostgreSQL is laxer and allows either order.\n When using <CodeLiteral>LIMIT</CodeLiteral>, it is a good idea to use an <CodeLiteral>ORDER BY</CodeLiteral> clause that constrains the result rows into a unique order. Otherwise you will get an unpredictable subset of the query's rows \u2014 you might be asking for the tenth through twentieth rows, but tenth through twentieth in what ordering? You don't know what ordering unless you specify <CodeLiteral>ORDER BY</CodeLiteral>.\n The query planner takes <CodeLiteral>LIMIT</CodeLiteral> into account when generating a query plan, so you are very likely to get different plans (yielding different row orders) depending on what you use for <CodeLiteral>LIMIT</CodeLiteral> and <CodeLiteral>OFFSET</CodeLiteral>. Thus, using different <CodeLiteral>LIMIT</CodeLiteral>/<CodeLiteral>OFFSET</CodeLiteral> values to select different subsets of a query result will give inconsistent results unless you enforce a predictable result ordering with <CodeLiteral>ORDER BY</CodeLiteral>. This is not a bug; it is an inherent consequence of the fact that SQL does not promise to deliver the results of a query in any particular order unless <CodeLiteral>ORDER BY</CodeLiteral> is used to constrain the order.\n It is even possible for repeated executions of the same <CodeLiteral>LIMIT</CodeLiteral> query to return different subsets of the rows of a table, if there is not an <CodeLiteral>ORDER BY</CodeLiteral> to enforce selection of a deterministic subset. Again, this is not a bug; determinism of the results is simply not guaranteed in such a case. ",
        "detail": "[DESCRIPTION]: The <CodeLiteral>LIMIT</CodeLiteral> clause consists of two independent sub-clauses:\n <code>LIMIT { count | ALL }\nOFFSET start\n</code>\n count specifies the maximum number of rows to return, while start specifies the number of rows to skip before starting to return rows. When both are specified, start rows are skipped before starting to count the count rows to be returned.\n If the count expression evaluates to NULL, it is treated as <CodeLiteral>LIMIT ALL</CodeLiteral>, i.e., no limit. If start evaluates to NULL, it is treated the same as <CodeLiteral>OFFSET 0</CodeLiteral>.\n SQL:2008 introduced a different syntax to achieve the same result, which PostgreSQL also supports. It is:\n <code>OFFSET start { ROW | ROWS }\nFETCH { FIRST | NEXT } [ count ] { ROW | ROWS } ONLY\n</code>\n In this syntax, the start or count value is required by the standard to be a literal constant, a parameter, or a variable name; as a PostgreSQL extension, other expressions are allowed, but will generally need to be enclosed in parentheses to avoid ambiguity. If count is omitted in a <CodeLiteral>FETCH</CodeLiteral> clause, it defaults to 1. <CodeLiteral>ROW</CodeLiteral> and <CodeLiteral>ROWS</CodeLiteral> as well as <CodeLiteral>FIRST</CodeLiteral> and <CodeLiteral>NEXT</CodeLiteral> are noise words that don't influence the effects of these clauses. According to the standard, the <CodeLiteral>OFFSET</CodeLiteral> clause must come before the <CodeLiteral>FETCH</CodeLiteral> clause if both are present; but PostgreSQL is laxer and allows either order.\n When using <CodeLiteral>LIMIT</CodeLiteral>, it is a good idea to use an <CodeLiteral>ORDER BY</CodeLiteral> clause that constrains the result rows into a unique order. Otherwise you will get an unpredictable subset of the query's rows \u2014 you might be asking for the tenth through twentieth rows, but tenth through twentieth in what ordering? You don't know what ordering unless you specify <CodeLiteral>ORDER BY</CodeLiteral>.\n The query planner takes <CodeLiteral>LIMIT</CodeLiteral> into account when generating a query plan, so you are very likely to get different plans (yielding different row orders) depending on what you use for <CodeLiteral>LIMIT</CodeLiteral> and <CodeLiteral>OFFSET</CodeLiteral>. Thus, using different <CodeLiteral>LIMIT</CodeLiteral>/<CodeLiteral>OFFSET</CodeLiteral> values to select different subsets of a query result will give inconsistent results unless you enforce a predictable result ordering with <CodeLiteral>ORDER BY</CodeLiteral>. This is not a bug; it is an inherent consequence of the fact that SQL does not promise to deliver the results of a query in any particular order unless <CodeLiteral>ORDER BY</CodeLiteral> is used to constrain the order.\n It is even possible for repeated executions of the same <CodeLiteral>LIMIT</CodeLiteral> query to return different subsets of the rows of a table, if there is not an <CodeLiteral>ORDER BY</CodeLiteral> to enforce selection of a deterministic subset. Again, this is not a bug; determinism of the results is simply not guaranteed in such a case. <sep>[DEMO]: SELECT * FROM employees ORDER BY employee_id LIMIT ALL;",
        "example": [
            "SELECT * FROM employees ORDER BY employee_id LIMIT ALL;"
        ],
        "link": []
    },
    {
        "type": "keyword",
        "keyword": "OFFSET start ROW",
        "tree": " (select_no_parens (opt_select_limit (select_limit (offset_clause OFFSET (row_or_rows ROW)))))",
        "description": "The <CodeLiteral>LIMIT</CodeLiteral> clause consists of two independent sub-clauses:\n <code>LIMIT { count | ALL }\nOFFSET start\n</code>\n count specifies the maximum number of rows to return, while start specifies the number of rows to skip before starting to return rows. When both are specified, start rows are skipped before starting to count the count rows to be returned.\n If the count expression evaluates to NULL, it is treated as <CodeLiteral>LIMIT ALL</CodeLiteral>, i.e., no limit. If start evaluates to NULL, it is treated the same as <CodeLiteral>OFFSET 0</CodeLiteral>.\n SQL:2008 introduced a different syntax to achieve the same result, which PostgreSQL also supports. It is:\n <code>OFFSET start { ROW | ROWS }\nFETCH { FIRST | NEXT } [ count ] { ROW | ROWS } ONLY\n</code>\n In this syntax, the start or count value is required by the standard to be a literal constant, a parameter, or a variable name; as a PostgreSQL extension, other expressions are allowed, but will generally need to be enclosed in parentheses to avoid ambiguity. If count is omitted in a <CodeLiteral>FETCH</CodeLiteral> clause, it defaults to 1. <CodeLiteral>ROW</CodeLiteral> and <CodeLiteral>ROWS</CodeLiteral> as well as <CodeLiteral>FIRST</CodeLiteral> and <CodeLiteral>NEXT</CodeLiteral> are noise words that don't influence the effects of these clauses. According to the standard, the <CodeLiteral>OFFSET</CodeLiteral> clause must come before the <CodeLiteral>FETCH</CodeLiteral> clause if both are present; but PostgreSQL is laxer and allows either order.\n When using <CodeLiteral>LIMIT</CodeLiteral>, it is a good idea to use an <CodeLiteral>ORDER BY</CodeLiteral> clause that constrains the result rows into a unique order. Otherwise you will get an unpredictable subset of the query's rows \u2014 you might be asking for the tenth through twentieth rows, but tenth through twentieth in what ordering? You don't know what ordering unless you specify <CodeLiteral>ORDER BY</CodeLiteral>.\n The query planner takes <CodeLiteral>LIMIT</CodeLiteral> into account when generating a query plan, so you are very likely to get different plans (yielding different row orders) depending on what you use for <CodeLiteral>LIMIT</CodeLiteral> and <CodeLiteral>OFFSET</CodeLiteral>. Thus, using different <CodeLiteral>LIMIT</CodeLiteral>/<CodeLiteral>OFFSET</CodeLiteral> values to select different subsets of a query result will give inconsistent results unless you enforce a predictable result ordering with <CodeLiteral>ORDER BY</CodeLiteral>. This is not a bug; it is an inherent consequence of the fact that SQL does not promise to deliver the results of a query in any particular order unless <CodeLiteral>ORDER BY</CodeLiteral> is used to constrain the order.\n It is even possible for repeated executions of the same <CodeLiteral>LIMIT</CodeLiteral> query to return different subsets of the rows of a table, if there is not an <CodeLiteral>ORDER BY</CodeLiteral> to enforce selection of a deterministic subset. Again, this is not a bug; determinism of the results is simply not guaranteed in such a case. ",
        "detail": "[DESCRIPTION]: The <CodeLiteral>LIMIT</CodeLiteral> clause consists of two independent sub-clauses:\n <code>LIMIT { count | ALL }\nOFFSET start\n</code>\n count specifies the maximum number of rows to return, while start specifies the number of rows to skip before starting to return rows. When both are specified, start rows are skipped before starting to count the count rows to be returned.\n If the count expression evaluates to NULL, it is treated as <CodeLiteral>LIMIT ALL</CodeLiteral>, i.e., no limit. If start evaluates to NULL, it is treated the same as <CodeLiteral>OFFSET 0</CodeLiteral>.\n SQL:2008 introduced a different syntax to achieve the same result, which PostgreSQL also supports. It is:\n <code>OFFSET start { ROW | ROWS }\nFETCH { FIRST | NEXT } [ count ] { ROW | ROWS } ONLY\n</code>\n In this syntax, the start or count value is required by the standard to be a literal constant, a parameter, or a variable name; as a PostgreSQL extension, other expressions are allowed, but will generally need to be enclosed in parentheses to avoid ambiguity. If count is omitted in a <CodeLiteral>FETCH</CodeLiteral> clause, it defaults to 1. <CodeLiteral>ROW</CodeLiteral> and <CodeLiteral>ROWS</CodeLiteral> as well as <CodeLiteral>FIRST</CodeLiteral> and <CodeLiteral>NEXT</CodeLiteral> are noise words that don't influence the effects of these clauses. According to the standard, the <CodeLiteral>OFFSET</CodeLiteral> clause must come before the <CodeLiteral>FETCH</CodeLiteral> clause if both are present; but PostgreSQL is laxer and allows either order.\n When using <CodeLiteral>LIMIT</CodeLiteral>, it is a good idea to use an <CodeLiteral>ORDER BY</CodeLiteral> clause that constrains the result rows into a unique order. Otherwise you will get an unpredictable subset of the query's rows \u2014 you might be asking for the tenth through twentieth rows, but tenth through twentieth in what ordering? You don't know what ordering unless you specify <CodeLiteral>ORDER BY</CodeLiteral>.\n The query planner takes <CodeLiteral>LIMIT</CodeLiteral> into account when generating a query plan, so you are very likely to get different plans (yielding different row orders) depending on what you use for <CodeLiteral>LIMIT</CodeLiteral> and <CodeLiteral>OFFSET</CodeLiteral>. Thus, using different <CodeLiteral>LIMIT</CodeLiteral>/<CodeLiteral>OFFSET</CodeLiteral> values to select different subsets of a query result will give inconsistent results unless you enforce a predictable result ordering with <CodeLiteral>ORDER BY</CodeLiteral>. This is not a bug; it is an inherent consequence of the fact that SQL does not promise to deliver the results of a query in any particular order unless <CodeLiteral>ORDER BY</CodeLiteral> is used to constrain the order.\n It is even possible for repeated executions of the same <CodeLiteral>LIMIT</CodeLiteral> query to return different subsets of the rows of a table, if there is not an <CodeLiteral>ORDER BY</CodeLiteral> to enforce selection of a deterministic subset. Again, this is not a bug; determinism of the results is simply not guaranteed in such a case. <sep>[DEMO]: SELECT * FROM products ORDER BY price OFFSET 5 ROW LIMIT 10;",
        "example": [
            "SELECT * FROM products ORDER BY price OFFSET 5 ROW LIMIT 10;"
        ],
        "link": []
    },
    {
        "type": "keyword",
        "keyword": "OFFSET start ROWS",
        "tree": " (select_no_parens (opt_select_limit (select_limit (offset_clause OFFSET (row_or_rows ROWS)))))",
        "description": "The <CodeLiteral>LIMIT</CodeLiteral> clause consists of two independent sub-clauses:\n <code>LIMIT { count | ALL }\nOFFSET start\n</code>\n count specifies the maximum number of rows to return, while start specifies the number of rows to skip before starting to return rows. When both are specified, start rows are skipped before starting to count the count rows to be returned.\n If the count expression evaluates to NULL, it is treated as <CodeLiteral>LIMIT ALL</CodeLiteral>, i.e., no limit. If start evaluates to NULL, it is treated the same as <CodeLiteral>OFFSET 0</CodeLiteral>.\n SQL:2008 introduced a different syntax to achieve the same result, which PostgreSQL also supports. It is:\n <code>OFFSET start { ROW | ROWS }\nFETCH { FIRST | NEXT } [ count ] { ROW | ROWS } ONLY\n</code>\n In this syntax, the start or count value is required by the standard to be a literal constant, a parameter, or a variable name; as a PostgreSQL extension, other expressions are allowed, but will generally need to be enclosed in parentheses to avoid ambiguity. If count is omitted in a <CodeLiteral>FETCH</CodeLiteral> clause, it defaults to 1. <CodeLiteral>ROW</CodeLiteral> and <CodeLiteral>ROWS</CodeLiteral> as well as <CodeLiteral>FIRST</CodeLiteral> and <CodeLiteral>NEXT</CodeLiteral> are noise words that don't influence the effects of these clauses. According to the standard, the <CodeLiteral>OFFSET</CodeLiteral> clause must come before the <CodeLiteral>FETCH</CodeLiteral> clause if both are present; but PostgreSQL is laxer and allows either order.\n When using <CodeLiteral>LIMIT</CodeLiteral>, it is a good idea to use an <CodeLiteral>ORDER BY</CodeLiteral> clause that constrains the result rows into a unique order. Otherwise you will get an unpredictable subset of the query's rows \u2014 you might be asking for the tenth through twentieth rows, but tenth through twentieth in what ordering? You don't know what ordering unless you specify <CodeLiteral>ORDER BY</CodeLiteral>.\n The query planner takes <CodeLiteral>LIMIT</CodeLiteral> into account when generating a query plan, so you are very likely to get different plans (yielding different row orders) depending on what you use for <CodeLiteral>LIMIT</CodeLiteral> and <CodeLiteral>OFFSET</CodeLiteral>. Thus, using different <CodeLiteral>LIMIT</CodeLiteral>/<CodeLiteral>OFFSET</CodeLiteral> values to select different subsets of a query result will give inconsistent results unless you enforce a predictable result ordering with <CodeLiteral>ORDER BY</CodeLiteral>. This is not a bug; it is an inherent consequence of the fact that SQL does not promise to deliver the results of a query in any particular order unless <CodeLiteral>ORDER BY</CodeLiteral> is used to constrain the order.\n It is even possible for repeated executions of the same <CodeLiteral>LIMIT</CodeLiteral> query to return different subsets of the rows of a table, if there is not an <CodeLiteral>ORDER BY</CodeLiteral> to enforce selection of a deterministic subset. Again, this is not a bug; determinism of the results is simply not guaranteed in such a case. ",
        "detail": "[DESCRIPTION]: The <CodeLiteral>LIMIT</CodeLiteral> clause consists of two independent sub-clauses:\n <code>LIMIT { count | ALL }\nOFFSET start\n</code>\n count specifies the maximum number of rows to return, while start specifies the number of rows to skip before starting to return rows. When both are specified, start rows are skipped before starting to count the count rows to be returned.\n If the count expression evaluates to NULL, it is treated as <CodeLiteral>LIMIT ALL</CodeLiteral>, i.e., no limit. If start evaluates to NULL, it is treated the same as <CodeLiteral>OFFSET 0</CodeLiteral>.\n SQL:2008 introduced a different syntax to achieve the same result, which PostgreSQL also supports. It is:\n <code>OFFSET start { ROW | ROWS }\nFETCH { FIRST | NEXT } [ count ] { ROW | ROWS } ONLY\n</code>\n In this syntax, the start or count value is required by the standard to be a literal constant, a parameter, or a variable name; as a PostgreSQL extension, other expressions are allowed, but will generally need to be enclosed in parentheses to avoid ambiguity. If count is omitted in a <CodeLiteral>FETCH</CodeLiteral> clause, it defaults to 1. <CodeLiteral>ROW</CodeLiteral> and <CodeLiteral>ROWS</CodeLiteral> as well as <CodeLiteral>FIRST</CodeLiteral> and <CodeLiteral>NEXT</CodeLiteral> are noise words that don't influence the effects of these clauses. According to the standard, the <CodeLiteral>OFFSET</CodeLiteral> clause must come before the <CodeLiteral>FETCH</CodeLiteral> clause if both are present; but PostgreSQL is laxer and allows either order.\n When using <CodeLiteral>LIMIT</CodeLiteral>, it is a good idea to use an <CodeLiteral>ORDER BY</CodeLiteral> clause that constrains the result rows into a unique order. Otherwise you will get an unpredictable subset of the query's rows \u2014 you might be asking for the tenth through twentieth rows, but tenth through twentieth in what ordering? You don't know what ordering unless you specify <CodeLiteral>ORDER BY</CodeLiteral>.\n The query planner takes <CodeLiteral>LIMIT</CodeLiteral> into account when generating a query plan, so you are very likely to get different plans (yielding different row orders) depending on what you use for <CodeLiteral>LIMIT</CodeLiteral> and <CodeLiteral>OFFSET</CodeLiteral>. Thus, using different <CodeLiteral>LIMIT</CodeLiteral>/<CodeLiteral>OFFSET</CodeLiteral> values to select different subsets of a query result will give inconsistent results unless you enforce a predictable result ordering with <CodeLiteral>ORDER BY</CodeLiteral>. This is not a bug; it is an inherent consequence of the fact that SQL does not promise to deliver the results of a query in any particular order unless <CodeLiteral>ORDER BY</CodeLiteral> is used to constrain the order.\n It is even possible for repeated executions of the same <CodeLiteral>LIMIT</CodeLiteral> query to return different subsets of the rows of a table, if there is not an <CodeLiteral>ORDER BY</CodeLiteral> to enforce selection of a deterministic subset. Again, this is not a bug; determinism of the results is simply not guaranteed in such a case. <sep>[DEMO]: SELECT * FROM employees ORDER BY employee_id OFFSET 5 ROWS;",
        "example": [
            "SELECT * FROM employees ORDER BY employee_id OFFSET 5 ROWS;"
        ],
        "link": []
    },
    {
        "type": "keyword",
        "keyword": "OFFSET start",
        "tree": " (select_no_parens (opt_select_limit (select_limit (offset_clause OFFSET))))",
        "description": "The <CodeLiteral>LIMIT</CodeLiteral> clause consists of two independent sub-clauses:\n <code>LIMIT { count | ALL }\nOFFSET start\n</code>\n count specifies the maximum number of rows to return, while start specifies the number of rows to skip before starting to return rows. When both are specified, start rows are skipped before starting to count the count rows to be returned.\n If the count expression evaluates to NULL, it is treated as <CodeLiteral>LIMIT ALL</CodeLiteral>, i.e., no limit. If start evaluates to NULL, it is treated the same as <CodeLiteral>OFFSET 0</CodeLiteral>.\n SQL:2008 introduced a different syntax to achieve the same result, which PostgreSQL also supports. It is:\n <code>OFFSET start { ROW | ROWS }\nFETCH { FIRST | NEXT } [ count ] { ROW | ROWS } ONLY\n</code>\n In this syntax, the start or count value is required by the standard to be a literal constant, a parameter, or a variable name; as a PostgreSQL extension, other expressions are allowed, but will generally need to be enclosed in parentheses to avoid ambiguity. If count is omitted in a <CodeLiteral>FETCH</CodeLiteral> clause, it defaults to 1. <CodeLiteral>ROW</CodeLiteral> and <CodeLiteral>ROWS</CodeLiteral> as well as <CodeLiteral>FIRST</CodeLiteral> and <CodeLiteral>NEXT</CodeLiteral> are noise words that don't influence the effects of these clauses. According to the standard, the <CodeLiteral>OFFSET</CodeLiteral> clause must come before the <CodeLiteral>FETCH</CodeLiteral> clause if both are present; but PostgreSQL is laxer and allows either order.\n When using <CodeLiteral>LIMIT</CodeLiteral>, it is a good idea to use an <CodeLiteral>ORDER BY</CodeLiteral> clause that constrains the result rows into a unique order. Otherwise you will get an unpredictable subset of the query's rows \u2014 you might be asking for the tenth through twentieth rows, but tenth through twentieth in what ordering? You don't know what ordering unless you specify <CodeLiteral>ORDER BY</CodeLiteral>.\n The query planner takes <CodeLiteral>LIMIT</CodeLiteral> into account when generating a query plan, so you are very likely to get different plans (yielding different row orders) depending on what you use for <CodeLiteral>LIMIT</CodeLiteral> and <CodeLiteral>OFFSET</CodeLiteral>. Thus, using different <CodeLiteral>LIMIT</CodeLiteral>/<CodeLiteral>OFFSET</CodeLiteral> values to select different subsets of a query result will give inconsistent results unless you enforce a predictable result ordering with <CodeLiteral>ORDER BY</CodeLiteral>. This is not a bug; it is an inherent consequence of the fact that SQL does not promise to deliver the results of a query in any particular order unless <CodeLiteral>ORDER BY</CodeLiteral> is used to constrain the order.\n It is even possible for repeated executions of the same <CodeLiteral>LIMIT</CodeLiteral> query to return different subsets of the rows of a table, if there is not an <CodeLiteral>ORDER BY</CodeLiteral> to enforce selection of a deterministic subset. Again, this is not a bug; determinism of the results is simply not guaranteed in such a case. ",
        "detail": "[DESCRIPTION]: The <CodeLiteral>LIMIT</CodeLiteral> clause consists of two independent sub-clauses:\n <code>LIMIT { count | ALL }\nOFFSET start\n</code>\n count specifies the maximum number of rows to return, while start specifies the number of rows to skip before starting to return rows. When both are specified, start rows are skipped before starting to count the count rows to be returned.\n If the count expression evaluates to NULL, it is treated as <CodeLiteral>LIMIT ALL</CodeLiteral>, i.e., no limit. If start evaluates to NULL, it is treated the same as <CodeLiteral>OFFSET 0</CodeLiteral>.\n SQL:2008 introduced a different syntax to achieve the same result, which PostgreSQL also supports. It is:\n <code>OFFSET start { ROW | ROWS }\nFETCH { FIRST | NEXT } [ count ] { ROW | ROWS } ONLY\n</code>\n In this syntax, the start or count value is required by the standard to be a literal constant, a parameter, or a variable name; as a PostgreSQL extension, other expressions are allowed, but will generally need to be enclosed in parentheses to avoid ambiguity. If count is omitted in a <CodeLiteral>FETCH</CodeLiteral> clause, it defaults to 1. <CodeLiteral>ROW</CodeLiteral> and <CodeLiteral>ROWS</CodeLiteral> as well as <CodeLiteral>FIRST</CodeLiteral> and <CodeLiteral>NEXT</CodeLiteral> are noise words that don't influence the effects of these clauses. According to the standard, the <CodeLiteral>OFFSET</CodeLiteral> clause must come before the <CodeLiteral>FETCH</CodeLiteral> clause if both are present; but PostgreSQL is laxer and allows either order.\n When using <CodeLiteral>LIMIT</CodeLiteral>, it is a good idea to use an <CodeLiteral>ORDER BY</CodeLiteral> clause that constrains the result rows into a unique order. Otherwise you will get an unpredictable subset of the query's rows \u2014 you might be asking for the tenth through twentieth rows, but tenth through twentieth in what ordering? You don't know what ordering unless you specify <CodeLiteral>ORDER BY</CodeLiteral>.\n The query planner takes <CodeLiteral>LIMIT</CodeLiteral> into account when generating a query plan, so you are very likely to get different plans (yielding different row orders) depending on what you use for <CodeLiteral>LIMIT</CodeLiteral> and <CodeLiteral>OFFSET</CodeLiteral>. Thus, using different <CodeLiteral>LIMIT</CodeLiteral>/<CodeLiteral>OFFSET</CodeLiteral> values to select different subsets of a query result will give inconsistent results unless you enforce a predictable result ordering with <CodeLiteral>ORDER BY</CodeLiteral>. This is not a bug; it is an inherent consequence of the fact that SQL does not promise to deliver the results of a query in any particular order unless <CodeLiteral>ORDER BY</CodeLiteral> is used to constrain the order.\n It is even possible for repeated executions of the same <CodeLiteral>LIMIT</CodeLiteral> query to return different subsets of the rows of a table, if there is not an <CodeLiteral>ORDER BY</CodeLiteral> to enforce selection of a deterministic subset. Again, this is not a bug; determinism of the results is simply not guaranteed in such a case. <sep>[DEMO]: SELECT * FROM employees ORDER BY employee_id LIMIT 5 OFFSET 10;",
        "example": [
            "SELECT * FROM employees ORDER BY employee_id LIMIT 5 OFFSET 10;"
        ],
        "link": []
    },
    {
        "type": "keyword",
        "keyword": "OFFSET start ROW",
        "tree": " (select_no_parens (select_limit (offset_clause OFFSET (row_or_rows ROW))))",
        "description": "The <CodeLiteral>LIMIT</CodeLiteral> clause consists of two independent sub-clauses:\n <code>LIMIT { count | ALL }\nOFFSET start\n</code>\n count specifies the maximum number of rows to return, while start specifies the number of rows to skip before starting to return rows. When both are specified, start rows are skipped before starting to count the count rows to be returned.\n If the count expression evaluates to NULL, it is treated as <CodeLiteral>LIMIT ALL</CodeLiteral>, i.e., no limit. If start evaluates to NULL, it is treated the same as <CodeLiteral>OFFSET 0</CodeLiteral>.\n SQL:2008 introduced a different syntax to achieve the same result, which PostgreSQL also supports. It is:\n <code>OFFSET start { ROW | ROWS }\nFETCH { FIRST | NEXT } [ count ] { ROW | ROWS } ONLY\n</code>\n In this syntax, the start or count value is required by the standard to be a literal constant, a parameter, or a variable name; as a PostgreSQL extension, other expressions are allowed, but will generally need to be enclosed in parentheses to avoid ambiguity. If count is omitted in a <CodeLiteral>FETCH</CodeLiteral> clause, it defaults to 1. <CodeLiteral>ROW</CodeLiteral> and <CodeLiteral>ROWS</CodeLiteral> as well as <CodeLiteral>FIRST</CodeLiteral> and <CodeLiteral>NEXT</CodeLiteral> are noise words that don't influence the effects of these clauses. According to the standard, the <CodeLiteral>OFFSET</CodeLiteral> clause must come before the <CodeLiteral>FETCH</CodeLiteral> clause if both are present; but PostgreSQL is laxer and allows either order.\n When using <CodeLiteral>LIMIT</CodeLiteral>, it is a good idea to use an <CodeLiteral>ORDER BY</CodeLiteral> clause that constrains the result rows into a unique order. Otherwise you will get an unpredictable subset of the query's rows \u2014 you might be asking for the tenth through twentieth rows, but tenth through twentieth in what ordering? You don't know what ordering unless you specify <CodeLiteral>ORDER BY</CodeLiteral>.\n The query planner takes <CodeLiteral>LIMIT</CodeLiteral> into account when generating a query plan, so you are very likely to get different plans (yielding different row orders) depending on what you use for <CodeLiteral>LIMIT</CodeLiteral> and <CodeLiteral>OFFSET</CodeLiteral>. Thus, using different <CodeLiteral>LIMIT</CodeLiteral>/<CodeLiteral>OFFSET</CodeLiteral> values to select different subsets of a query result will give inconsistent results unless you enforce a predictable result ordering with <CodeLiteral>ORDER BY</CodeLiteral>. This is not a bug; it is an inherent consequence of the fact that SQL does not promise to deliver the results of a query in any particular order unless <CodeLiteral>ORDER BY</CodeLiteral> is used to constrain the order.\n It is even possible for repeated executions of the same <CodeLiteral>LIMIT</CodeLiteral> query to return different subsets of the rows of a table, if there is not an <CodeLiteral>ORDER BY</CodeLiteral> to enforce selection of a deterministic subset. Again, this is not a bug; determinism of the results is simply not guaranteed in such a case. ",
        "detail": "[DESCRIPTION]: The <CodeLiteral>LIMIT</CodeLiteral> clause consists of two independent sub-clauses:\n <code>LIMIT { count | ALL }\nOFFSET start\n</code>\n count specifies the maximum number of rows to return, while start specifies the number of rows to skip before starting to return rows. When both are specified, start rows are skipped before starting to count the count rows to be returned.\n If the count expression evaluates to NULL, it is treated as <CodeLiteral>LIMIT ALL</CodeLiteral>, i.e., no limit. If start evaluates to NULL, it is treated the same as <CodeLiteral>OFFSET 0</CodeLiteral>.\n SQL:2008 introduced a different syntax to achieve the same result, which PostgreSQL also supports. It is:\n <code>OFFSET start { ROW | ROWS }\nFETCH { FIRST | NEXT } [ count ] { ROW | ROWS } ONLY\n</code>\n In this syntax, the start or count value is required by the standard to be a literal constant, a parameter, or a variable name; as a PostgreSQL extension, other expressions are allowed, but will generally need to be enclosed in parentheses to avoid ambiguity. If count is omitted in a <CodeLiteral>FETCH</CodeLiteral> clause, it defaults to 1. <CodeLiteral>ROW</CodeLiteral> and <CodeLiteral>ROWS</CodeLiteral> as well as <CodeLiteral>FIRST</CodeLiteral> and <CodeLiteral>NEXT</CodeLiteral> are noise words that don't influence the effects of these clauses. According to the standard, the <CodeLiteral>OFFSET</CodeLiteral> clause must come before the <CodeLiteral>FETCH</CodeLiteral> clause if both are present; but PostgreSQL is laxer and allows either order.\n When using <CodeLiteral>LIMIT</CodeLiteral>, it is a good idea to use an <CodeLiteral>ORDER BY</CodeLiteral> clause that constrains the result rows into a unique order. Otherwise you will get an unpredictable subset of the query's rows \u2014 you might be asking for the tenth through twentieth rows, but tenth through twentieth in what ordering? You don't know what ordering unless you specify <CodeLiteral>ORDER BY</CodeLiteral>.\n The query planner takes <CodeLiteral>LIMIT</CodeLiteral> into account when generating a query plan, so you are very likely to get different plans (yielding different row orders) depending on what you use for <CodeLiteral>LIMIT</CodeLiteral> and <CodeLiteral>OFFSET</CodeLiteral>. Thus, using different <CodeLiteral>LIMIT</CodeLiteral>/<CodeLiteral>OFFSET</CodeLiteral> values to select different subsets of a query result will give inconsistent results unless you enforce a predictable result ordering with <CodeLiteral>ORDER BY</CodeLiteral>. This is not a bug; it is an inherent consequence of the fact that SQL does not promise to deliver the results of a query in any particular order unless <CodeLiteral>ORDER BY</CodeLiteral> is used to constrain the order.\n It is even possible for repeated executions of the same <CodeLiteral>LIMIT</CodeLiteral> query to return different subsets of the rows of a table, if there is not an <CodeLiteral>ORDER BY</CodeLiteral> to enforce selection of a deterministic subset. Again, this is not a bug; determinism of the results is simply not guaranteed in such a case. <sep>[DEMO]: SELECT * FROM products ORDER BY price OFFSET 5 ROW LIMIT 10;",
        "example": [
            "SELECT * FROM products ORDER BY price OFFSET 5 ROW LIMIT 10;"
        ],
        "link": []
    },
    {
        "type": "keyword",
        "keyword": "OFFSET start ROWS",
        "tree": " (select_no_parens (select_limit (offset_clause OFFSET (row_or_rows ROWS))))",
        "description": "The <CodeLiteral>LIMIT</CodeLiteral> clause consists of two independent sub-clauses:\n <code>LIMIT { count | ALL }\nOFFSET start\n</code>\n count specifies the maximum number of rows to return, while start specifies the number of rows to skip before starting to return rows. When both are specified, start rows are skipped before starting to count the count rows to be returned.\n If the count expression evaluates to NULL, it is treated as <CodeLiteral>LIMIT ALL</CodeLiteral>, i.e., no limit. If start evaluates to NULL, it is treated the same as <CodeLiteral>OFFSET 0</CodeLiteral>.\n SQL:2008 introduced a different syntax to achieve the same result, which PostgreSQL also supports. It is:\n <code>OFFSET start { ROW | ROWS }\nFETCH { FIRST | NEXT } [ count ] { ROW | ROWS } ONLY\n</code>\n In this syntax, the start or count value is required by the standard to be a literal constant, a parameter, or a variable name; as a PostgreSQL extension, other expressions are allowed, but will generally need to be enclosed in parentheses to avoid ambiguity. If count is omitted in a <CodeLiteral>FETCH</CodeLiteral> clause, it defaults to 1. <CodeLiteral>ROW</CodeLiteral> and <CodeLiteral>ROWS</CodeLiteral> as well as <CodeLiteral>FIRST</CodeLiteral> and <CodeLiteral>NEXT</CodeLiteral> are noise words that don't influence the effects of these clauses. According to the standard, the <CodeLiteral>OFFSET</CodeLiteral> clause must come before the <CodeLiteral>FETCH</CodeLiteral> clause if both are present; but PostgreSQL is laxer and allows either order.\n When using <CodeLiteral>LIMIT</CodeLiteral>, it is a good idea to use an <CodeLiteral>ORDER BY</CodeLiteral> clause that constrains the result rows into a unique order. Otherwise you will get an unpredictable subset of the query's rows \u2014 you might be asking for the tenth through twentieth rows, but tenth through twentieth in what ordering? You don't know what ordering unless you specify <CodeLiteral>ORDER BY</CodeLiteral>.\n The query planner takes <CodeLiteral>LIMIT</CodeLiteral> into account when generating a query plan, so you are very likely to get different plans (yielding different row orders) depending on what you use for <CodeLiteral>LIMIT</CodeLiteral> and <CodeLiteral>OFFSET</CodeLiteral>. Thus, using different <CodeLiteral>LIMIT</CodeLiteral>/<CodeLiteral>OFFSET</CodeLiteral> values to select different subsets of a query result will give inconsistent results unless you enforce a predictable result ordering with <CodeLiteral>ORDER BY</CodeLiteral>. This is not a bug; it is an inherent consequence of the fact that SQL does not promise to deliver the results of a query in any particular order unless <CodeLiteral>ORDER BY</CodeLiteral> is used to constrain the order.\n It is even possible for repeated executions of the same <CodeLiteral>LIMIT</CodeLiteral> query to return different subsets of the rows of a table, if there is not an <CodeLiteral>ORDER BY</CodeLiteral> to enforce selection of a deterministic subset. Again, this is not a bug; determinism of the results is simply not guaranteed in such a case. ",
        "detail": "[DESCRIPTION]: The <CodeLiteral>LIMIT</CodeLiteral> clause consists of two independent sub-clauses:\n <code>LIMIT { count | ALL }\nOFFSET start\n</code>\n count specifies the maximum number of rows to return, while start specifies the number of rows to skip before starting to return rows. When both are specified, start rows are skipped before starting to count the count rows to be returned.\n If the count expression evaluates to NULL, it is treated as <CodeLiteral>LIMIT ALL</CodeLiteral>, i.e., no limit. If start evaluates to NULL, it is treated the same as <CodeLiteral>OFFSET 0</CodeLiteral>.\n SQL:2008 introduced a different syntax to achieve the same result, which PostgreSQL also supports. It is:\n <code>OFFSET start { ROW | ROWS }\nFETCH { FIRST | NEXT } [ count ] { ROW | ROWS } ONLY\n</code>\n In this syntax, the start or count value is required by the standard to be a literal constant, a parameter, or a variable name; as a PostgreSQL extension, other expressions are allowed, but will generally need to be enclosed in parentheses to avoid ambiguity. If count is omitted in a <CodeLiteral>FETCH</CodeLiteral> clause, it defaults to 1. <CodeLiteral>ROW</CodeLiteral> and <CodeLiteral>ROWS</CodeLiteral> as well as <CodeLiteral>FIRST</CodeLiteral> and <CodeLiteral>NEXT</CodeLiteral> are noise words that don't influence the effects of these clauses. According to the standard, the <CodeLiteral>OFFSET</CodeLiteral> clause must come before the <CodeLiteral>FETCH</CodeLiteral> clause if both are present; but PostgreSQL is laxer and allows either order.\n When using <CodeLiteral>LIMIT</CodeLiteral>, it is a good idea to use an <CodeLiteral>ORDER BY</CodeLiteral> clause that constrains the result rows into a unique order. Otherwise you will get an unpredictable subset of the query's rows \u2014 you might be asking for the tenth through twentieth rows, but tenth through twentieth in what ordering? You don't know what ordering unless you specify <CodeLiteral>ORDER BY</CodeLiteral>.\n The query planner takes <CodeLiteral>LIMIT</CodeLiteral> into account when generating a query plan, so you are very likely to get different plans (yielding different row orders) depending on what you use for <CodeLiteral>LIMIT</CodeLiteral> and <CodeLiteral>OFFSET</CodeLiteral>. Thus, using different <CodeLiteral>LIMIT</CodeLiteral>/<CodeLiteral>OFFSET</CodeLiteral> values to select different subsets of a query result will give inconsistent results unless you enforce a predictable result ordering with <CodeLiteral>ORDER BY</CodeLiteral>. This is not a bug; it is an inherent consequence of the fact that SQL does not promise to deliver the results of a query in any particular order unless <CodeLiteral>ORDER BY</CodeLiteral> is used to constrain the order.\n It is even possible for repeated executions of the same <CodeLiteral>LIMIT</CodeLiteral> query to return different subsets of the rows of a table, if there is not an <CodeLiteral>ORDER BY</CodeLiteral> to enforce selection of a deterministic subset. Again, this is not a bug; determinism of the results is simply not guaranteed in such a case. <sep>[DEMO]: SELECT * FROM employees ORDER BY employee_id OFFSET 5 ROWS;",
        "example": [
            "SELECT * FROM employees ORDER BY employee_id OFFSET 5 ROWS;"
        ],
        "link": []
    },
    {
        "type": "keyword",
        "keyword": "OFFSET start",
        "tree": " (select_no_parens (select_limit (offset_clause OFFSET)))",
        "description": "The <CodeLiteral>LIMIT</CodeLiteral> clause consists of two independent sub-clauses:\n <code>LIMIT { count | ALL }\nOFFSET start\n</code>\n count specifies the maximum number of rows to return, while start specifies the number of rows to skip before starting to return rows. When both are specified, start rows are skipped before starting to count the count rows to be returned.\n If the count expression evaluates to NULL, it is treated as <CodeLiteral>LIMIT ALL</CodeLiteral>, i.e., no limit. If start evaluates to NULL, it is treated the same as <CodeLiteral>OFFSET 0</CodeLiteral>.\n SQL:2008 introduced a different syntax to achieve the same result, which PostgreSQL also supports. It is:\n <code>OFFSET start { ROW | ROWS }\nFETCH { FIRST | NEXT } [ count ] { ROW | ROWS } ONLY\n</code>\n In this syntax, the start or count value is required by the standard to be a literal constant, a parameter, or a variable name; as a PostgreSQL extension, other expressions are allowed, but will generally need to be enclosed in parentheses to avoid ambiguity. If count is omitted in a <CodeLiteral>FETCH</CodeLiteral> clause, it defaults to 1. <CodeLiteral>ROW</CodeLiteral> and <CodeLiteral>ROWS</CodeLiteral> as well as <CodeLiteral>FIRST</CodeLiteral> and <CodeLiteral>NEXT</CodeLiteral> are noise words that don't influence the effects of these clauses. According to the standard, the <CodeLiteral>OFFSET</CodeLiteral> clause must come before the <CodeLiteral>FETCH</CodeLiteral> clause if both are present; but PostgreSQL is laxer and allows either order.\n When using <CodeLiteral>LIMIT</CodeLiteral>, it is a good idea to use an <CodeLiteral>ORDER BY</CodeLiteral> clause that constrains the result rows into a unique order. Otherwise you will get an unpredictable subset of the query's rows \u2014 you might be asking for the tenth through twentieth rows, but tenth through twentieth in what ordering? You don't know what ordering unless you specify <CodeLiteral>ORDER BY</CodeLiteral>.\n The query planner takes <CodeLiteral>LIMIT</CodeLiteral> into account when generating a query plan, so you are very likely to get different plans (yielding different row orders) depending on what you use for <CodeLiteral>LIMIT</CodeLiteral> and <CodeLiteral>OFFSET</CodeLiteral>. Thus, using different <CodeLiteral>LIMIT</CodeLiteral>/<CodeLiteral>OFFSET</CodeLiteral> values to select different subsets of a query result will give inconsistent results unless you enforce a predictable result ordering with <CodeLiteral>ORDER BY</CodeLiteral>. This is not a bug; it is an inherent consequence of the fact that SQL does not promise to deliver the results of a query in any particular order unless <CodeLiteral>ORDER BY</CodeLiteral> is used to constrain the order.\n It is even possible for repeated executions of the same <CodeLiteral>LIMIT</CodeLiteral> query to return different subsets of the rows of a table, if there is not an <CodeLiteral>ORDER BY</CodeLiteral> to enforce selection of a deterministic subset. Again, this is not a bug; determinism of the results is simply not guaranteed in such a case. ",
        "detail": "[DESCRIPTION]: The <CodeLiteral>LIMIT</CodeLiteral> clause consists of two independent sub-clauses:\n <code>LIMIT { count | ALL }\nOFFSET start\n</code>\n count specifies the maximum number of rows to return, while start specifies the number of rows to skip before starting to return rows. When both are specified, start rows are skipped before starting to count the count rows to be returned.\n If the count expression evaluates to NULL, it is treated as <CodeLiteral>LIMIT ALL</CodeLiteral>, i.e., no limit. If start evaluates to NULL, it is treated the same as <CodeLiteral>OFFSET 0</CodeLiteral>.\n SQL:2008 introduced a different syntax to achieve the same result, which PostgreSQL also supports. It is:\n <code>OFFSET start { ROW | ROWS }\nFETCH { FIRST | NEXT } [ count ] { ROW | ROWS } ONLY\n</code>\n In this syntax, the start or count value is required by the standard to be a literal constant, a parameter, or a variable name; as a PostgreSQL extension, other expressions are allowed, but will generally need to be enclosed in parentheses to avoid ambiguity. If count is omitted in a <CodeLiteral>FETCH</CodeLiteral> clause, it defaults to 1. <CodeLiteral>ROW</CodeLiteral> and <CodeLiteral>ROWS</CodeLiteral> as well as <CodeLiteral>FIRST</CodeLiteral> and <CodeLiteral>NEXT</CodeLiteral> are noise words that don't influence the effects of these clauses. According to the standard, the <CodeLiteral>OFFSET</CodeLiteral> clause must come before the <CodeLiteral>FETCH</CodeLiteral> clause if both are present; but PostgreSQL is laxer and allows either order.\n When using <CodeLiteral>LIMIT</CodeLiteral>, it is a good idea to use an <CodeLiteral>ORDER BY</CodeLiteral> clause that constrains the result rows into a unique order. Otherwise you will get an unpredictable subset of the query's rows \u2014 you might be asking for the tenth through twentieth rows, but tenth through twentieth in what ordering? You don't know what ordering unless you specify <CodeLiteral>ORDER BY</CodeLiteral>.\n The query planner takes <CodeLiteral>LIMIT</CodeLiteral> into account when generating a query plan, so you are very likely to get different plans (yielding different row orders) depending on what you use for <CodeLiteral>LIMIT</CodeLiteral> and <CodeLiteral>OFFSET</CodeLiteral>. Thus, using different <CodeLiteral>LIMIT</CodeLiteral>/<CodeLiteral>OFFSET</CodeLiteral> values to select different subsets of a query result will give inconsistent results unless you enforce a predictable result ordering with <CodeLiteral>ORDER BY</CodeLiteral>. This is not a bug; it is an inherent consequence of the fact that SQL does not promise to deliver the results of a query in any particular order unless <CodeLiteral>ORDER BY</CodeLiteral> is used to constrain the order.\n It is even possible for repeated executions of the same <CodeLiteral>LIMIT</CodeLiteral> query to return different subsets of the rows of a table, if there is not an <CodeLiteral>ORDER BY</CodeLiteral> to enforce selection of a deterministic subset. Again, this is not a bug; determinism of the results is simply not guaranteed in such a case. <sep>[DEMO]: SELECT * FROM employees ORDER BY employee_id LIMIT 5 OFFSET 10;",
        "example": [
            "SELECT * FROM employees ORDER BY employee_id LIMIT 5 OFFSET 10;"
        ],
        "link": []
    },
    {
        "type": "keyword",
        "keyword": "FETCH FIRST count ROW ONLY",
        "tree": " (limit_clause FETCH (first_or_next FIRST) (row_or_rows ROW) ONLY)",
        "description": "The <CodeLiteral>LIMIT</CodeLiteral> clause consists of two independent sub-clauses:\n <code>LIMIT { count | ALL }\nOFFSET start\n</code>\n count specifies the maximum number of rows to return, while start specifies the number of rows to skip before starting to return rows. When both are specified, start rows are skipped before starting to count the count rows to be returned.\n If the count expression evaluates to NULL, it is treated as <CodeLiteral>LIMIT ALL</CodeLiteral>, i.e., no limit. If start evaluates to NULL, it is treated the same as <CodeLiteral>OFFSET 0</CodeLiteral>.\n SQL:2008 introduced a different syntax to achieve the same result, which PostgreSQL also supports. It is:\n <code>OFFSET start { ROW | ROWS }\nFETCH { FIRST | NEXT } [ count ] { ROW | ROWS } ONLY\n</code>\n In this syntax, the start or count value is required by the standard to be a literal constant, a parameter, or a variable name; as a PostgreSQL extension, other expressions are allowed, but will generally need to be enclosed in parentheses to avoid ambiguity. If count is omitted in a <CodeLiteral>FETCH</CodeLiteral> clause, it defaults to 1. <CodeLiteral>ROW</CodeLiteral> and <CodeLiteral>ROWS</CodeLiteral> as well as <CodeLiteral>FIRST</CodeLiteral> and <CodeLiteral>NEXT</CodeLiteral> are noise words that don't influence the effects of these clauses. According to the standard, the <CodeLiteral>OFFSET</CodeLiteral> clause must come before the <CodeLiteral>FETCH</CodeLiteral> clause if both are present; but PostgreSQL is laxer and allows either order.\n When using <CodeLiteral>LIMIT</CodeLiteral>, it is a good idea to use an <CodeLiteral>ORDER BY</CodeLiteral> clause that constrains the result rows into a unique order. Otherwise you will get an unpredictable subset of the query's rows \u2014 you might be asking for the tenth through twentieth rows, but tenth through twentieth in what ordering? You don't know what ordering unless you specify <CodeLiteral>ORDER BY</CodeLiteral>.\n The query planner takes <CodeLiteral>LIMIT</CodeLiteral> into account when generating a query plan, so you are very likely to get different plans (yielding different row orders) depending on what you use for <CodeLiteral>LIMIT</CodeLiteral> and <CodeLiteral>OFFSET</CodeLiteral>. Thus, using different <CodeLiteral>LIMIT</CodeLiteral>/<CodeLiteral>OFFSET</CodeLiteral> values to select different subsets of a query result will give inconsistent results unless you enforce a predictable result ordering with <CodeLiteral>ORDER BY</CodeLiteral>. This is not a bug; it is an inherent consequence of the fact that SQL does not promise to deliver the results of a query in any particular order unless <CodeLiteral>ORDER BY</CodeLiteral> is used to constrain the order.\n It is even possible for repeated executions of the same <CodeLiteral>LIMIT</CodeLiteral> query to return different subsets of the rows of a table, if there is not an <CodeLiteral>ORDER BY</CodeLiteral> to enforce selection of a deterministic subset. Again, this is not a bug; determinism of the results is simply not guaranteed in such a case. ",
        "detail": "[DESCRIPTION]: The <CodeLiteral>LIMIT</CodeLiteral> clause consists of two independent sub-clauses:\n <code>LIMIT { count | ALL }\nOFFSET start\n</code>\n count specifies the maximum number of rows to return, while start specifies the number of rows to skip before starting to return rows. When both are specified, start rows are skipped before starting to count the count rows to be returned.\n If the count expression evaluates to NULL, it is treated as <CodeLiteral>LIMIT ALL</CodeLiteral>, i.e., no limit. If start evaluates to NULL, it is treated the same as <CodeLiteral>OFFSET 0</CodeLiteral>.\n SQL:2008 introduced a different syntax to achieve the same result, which PostgreSQL also supports. It is:\n <code>OFFSET start { ROW | ROWS }\nFETCH { FIRST | NEXT } [ count ] { ROW | ROWS } ONLY\n</code>\n In this syntax, the start or count value is required by the standard to be a literal constant, a parameter, or a variable name; as a PostgreSQL extension, other expressions are allowed, but will generally need to be enclosed in parentheses to avoid ambiguity. If count is omitted in a <CodeLiteral>FETCH</CodeLiteral> clause, it defaults to 1. <CodeLiteral>ROW</CodeLiteral> and <CodeLiteral>ROWS</CodeLiteral> as well as <CodeLiteral>FIRST</CodeLiteral> and <CodeLiteral>NEXT</CodeLiteral> are noise words that don't influence the effects of these clauses. According to the standard, the <CodeLiteral>OFFSET</CodeLiteral> clause must come before the <CodeLiteral>FETCH</CodeLiteral> clause if both are present; but PostgreSQL is laxer and allows either order.\n When using <CodeLiteral>LIMIT</CodeLiteral>, it is a good idea to use an <CodeLiteral>ORDER BY</CodeLiteral> clause that constrains the result rows into a unique order. Otherwise you will get an unpredictable subset of the query's rows \u2014 you might be asking for the tenth through twentieth rows, but tenth through twentieth in what ordering? You don't know what ordering unless you specify <CodeLiteral>ORDER BY</CodeLiteral>.\n The query planner takes <CodeLiteral>LIMIT</CodeLiteral> into account when generating a query plan, so you are very likely to get different plans (yielding different row orders) depending on what you use for <CodeLiteral>LIMIT</CodeLiteral> and <CodeLiteral>OFFSET</CodeLiteral>. Thus, using different <CodeLiteral>LIMIT</CodeLiteral>/<CodeLiteral>OFFSET</CodeLiteral> values to select different subsets of a query result will give inconsistent results unless you enforce a predictable result ordering with <CodeLiteral>ORDER BY</CodeLiteral>. This is not a bug; it is an inherent consequence of the fact that SQL does not promise to deliver the results of a query in any particular order unless <CodeLiteral>ORDER BY</CodeLiteral> is used to constrain the order.\n It is even possible for repeated executions of the same <CodeLiteral>LIMIT</CodeLiteral> query to return different subsets of the rows of a table, if there is not an <CodeLiteral>ORDER BY</CodeLiteral> to enforce selection of a deterministic subset. Again, this is not a bug; determinism of the results is simply not guaranteed in such a case. <sep>[DEMO]: SELECT * FROM employees ORDER BY employee_id OFFSET 5 ROWS FETCH FIRST 10 ROW ONLY;",
        "example": [
            "SELECT * FROM employees ORDER BY employee_id OFFSET 5 ROWS FETCH FIRST 10 ROW ONLY;"
        ],
        "link": []
    },
    {
        "type": "keyword",
        "keyword": "FETCH NEXT count ROW ONLY",
        "tree": " (limit_clause FETCH (first_or_next NEXT) (row_or_rows ROW) ONLY)",
        "description": "The <CodeLiteral>LIMIT</CodeLiteral> clause consists of two independent sub-clauses:\n <code>LIMIT { count | ALL }\nOFFSET start\n</code>\n count specifies the maximum number of rows to return, while start specifies the number of rows to skip before starting to return rows. When both are specified, start rows are skipped before starting to count the count rows to be returned.\n If the count expression evaluates to NULL, it is treated as <CodeLiteral>LIMIT ALL</CodeLiteral>, i.e., no limit. If start evaluates to NULL, it is treated the same as <CodeLiteral>OFFSET 0</CodeLiteral>.\n SQL:2008 introduced a different syntax to achieve the same result, which PostgreSQL also supports. It is:\n <code>OFFSET start { ROW | ROWS }\nFETCH { FIRST | NEXT } [ count ] { ROW | ROWS } ONLY\n</code>\n In this syntax, the start or count value is required by the standard to be a literal constant, a parameter, or a variable name; as a PostgreSQL extension, other expressions are allowed, but will generally need to be enclosed in parentheses to avoid ambiguity. If count is omitted in a <CodeLiteral>FETCH</CodeLiteral> clause, it defaults to 1. <CodeLiteral>ROW</CodeLiteral> and <CodeLiteral>ROWS</CodeLiteral> as well as <CodeLiteral>FIRST</CodeLiteral> and <CodeLiteral>NEXT</CodeLiteral> are noise words that don't influence the effects of these clauses. According to the standard, the <CodeLiteral>OFFSET</CodeLiteral> clause must come before the <CodeLiteral>FETCH</CodeLiteral> clause if both are present; but PostgreSQL is laxer and allows either order.\n When using <CodeLiteral>LIMIT</CodeLiteral>, it is a good idea to use an <CodeLiteral>ORDER BY</CodeLiteral> clause that constrains the result rows into a unique order. Otherwise you will get an unpredictable subset of the query's rows \u2014 you might be asking for the tenth through twentieth rows, but tenth through twentieth in what ordering? You don't know what ordering unless you specify <CodeLiteral>ORDER BY</CodeLiteral>.\n The query planner takes <CodeLiteral>LIMIT</CodeLiteral> into account when generating a query plan, so you are very likely to get different plans (yielding different row orders) depending on what you use for <CodeLiteral>LIMIT</CodeLiteral> and <CodeLiteral>OFFSET</CodeLiteral>. Thus, using different <CodeLiteral>LIMIT</CodeLiteral>/<CodeLiteral>OFFSET</CodeLiteral> values to select different subsets of a query result will give inconsistent results unless you enforce a predictable result ordering with <CodeLiteral>ORDER BY</CodeLiteral>. This is not a bug; it is an inherent consequence of the fact that SQL does not promise to deliver the results of a query in any particular order unless <CodeLiteral>ORDER BY</CodeLiteral> is used to constrain the order.\n It is even possible for repeated executions of the same <CodeLiteral>LIMIT</CodeLiteral> query to return different subsets of the rows of a table, if there is not an <CodeLiteral>ORDER BY</CodeLiteral> to enforce selection of a deterministic subset. Again, this is not a bug; determinism of the results is simply not guaranteed in such a case. ",
        "detail": "[DESCRIPTION]: The <CodeLiteral>LIMIT</CodeLiteral> clause consists of two independent sub-clauses:\n <code>LIMIT { count | ALL }\nOFFSET start\n</code>\n count specifies the maximum number of rows to return, while start specifies the number of rows to skip before starting to return rows. When both are specified, start rows are skipped before starting to count the count rows to be returned.\n If the count expression evaluates to NULL, it is treated as <CodeLiteral>LIMIT ALL</CodeLiteral>, i.e., no limit. If start evaluates to NULL, it is treated the same as <CodeLiteral>OFFSET 0</CodeLiteral>.\n SQL:2008 introduced a different syntax to achieve the same result, which PostgreSQL also supports. It is:\n <code>OFFSET start { ROW | ROWS }\nFETCH { FIRST | NEXT } [ count ] { ROW | ROWS } ONLY\n</code>\n In this syntax, the start or count value is required by the standard to be a literal constant, a parameter, or a variable name; as a PostgreSQL extension, other expressions are allowed, but will generally need to be enclosed in parentheses to avoid ambiguity. If count is omitted in a <CodeLiteral>FETCH</CodeLiteral> clause, it defaults to 1. <CodeLiteral>ROW</CodeLiteral> and <CodeLiteral>ROWS</CodeLiteral> as well as <CodeLiteral>FIRST</CodeLiteral> and <CodeLiteral>NEXT</CodeLiteral> are noise words that don't influence the effects of these clauses. According to the standard, the <CodeLiteral>OFFSET</CodeLiteral> clause must come before the <CodeLiteral>FETCH</CodeLiteral> clause if both are present; but PostgreSQL is laxer and allows either order.\n When using <CodeLiteral>LIMIT</CodeLiteral>, it is a good idea to use an <CodeLiteral>ORDER BY</CodeLiteral> clause that constrains the result rows into a unique order. Otherwise you will get an unpredictable subset of the query's rows \u2014 you might be asking for the tenth through twentieth rows, but tenth through twentieth in what ordering? You don't know what ordering unless you specify <CodeLiteral>ORDER BY</CodeLiteral>.\n The query planner takes <CodeLiteral>LIMIT</CodeLiteral> into account when generating a query plan, so you are very likely to get different plans (yielding different row orders) depending on what you use for <CodeLiteral>LIMIT</CodeLiteral> and <CodeLiteral>OFFSET</CodeLiteral>. Thus, using different <CodeLiteral>LIMIT</CodeLiteral>/<CodeLiteral>OFFSET</CodeLiteral> values to select different subsets of a query result will give inconsistent results unless you enforce a predictable result ordering with <CodeLiteral>ORDER BY</CodeLiteral>. This is not a bug; it is an inherent consequence of the fact that SQL does not promise to deliver the results of a query in any particular order unless <CodeLiteral>ORDER BY</CodeLiteral> is used to constrain the order.\n It is even possible for repeated executions of the same <CodeLiteral>LIMIT</CodeLiteral> query to return different subsets of the rows of a table, if there is not an <CodeLiteral>ORDER BY</CodeLiteral> to enforce selection of a deterministic subset. Again, this is not a bug; determinism of the results is simply not guaranteed in such a case. <sep>[DEMO]: SELECT * FROM employees OFFSET 5 ROWS FETCH NEXT 10 ROW ONLY;",
        "example": [
            "SELECT * FROM employees OFFSET 5 ROWS FETCH NEXT 10 ROW ONLY;"
        ],
        "link": []
    },
    {
        "type": "keyword",
        "keyword": "FETCH FIRST count ROWS ONLY",
        "tree": " (limit_clause FETCH (first_or_next FIRST) (row_or_rows ROWS) ONLY)",
        "description": "The <CodeLiteral>LIMIT</CodeLiteral> clause consists of two independent sub-clauses:\n <code>LIMIT { count | ALL }\nOFFSET start\n</code>\n count specifies the maximum number of rows to return, while start specifies the number of rows to skip before starting to return rows. When both are specified, start rows are skipped before starting to count the count rows to be returned.\n If the count expression evaluates to NULL, it is treated as <CodeLiteral>LIMIT ALL</CodeLiteral>, i.e., no limit. If start evaluates to NULL, it is treated the same as <CodeLiteral>OFFSET 0</CodeLiteral>.\n SQL:2008 introduced a different syntax to achieve the same result, which PostgreSQL also supports. It is:\n <code>OFFSET start { ROW | ROWS }\nFETCH { FIRST | NEXT } [ count ] { ROW | ROWS } ONLY\n</code>\n In this syntax, the start or count value is required by the standard to be a literal constant, a parameter, or a variable name; as a PostgreSQL extension, other expressions are allowed, but will generally need to be enclosed in parentheses to avoid ambiguity. If count is omitted in a <CodeLiteral>FETCH</CodeLiteral> clause, it defaults to 1. <CodeLiteral>ROW</CodeLiteral> and <CodeLiteral>ROWS</CodeLiteral> as well as <CodeLiteral>FIRST</CodeLiteral> and <CodeLiteral>NEXT</CodeLiteral> are noise words that don't influence the effects of these clauses. According to the standard, the <CodeLiteral>OFFSET</CodeLiteral> clause must come before the <CodeLiteral>FETCH</CodeLiteral> clause if both are present; but PostgreSQL is laxer and allows either order.\n When using <CodeLiteral>LIMIT</CodeLiteral>, it is a good idea to use an <CodeLiteral>ORDER BY</CodeLiteral> clause that constrains the result rows into a unique order. Otherwise you will get an unpredictable subset of the query's rows \u2014 you might be asking for the tenth through twentieth rows, but tenth through twentieth in what ordering? You don't know what ordering unless you specify <CodeLiteral>ORDER BY</CodeLiteral>.\n The query planner takes <CodeLiteral>LIMIT</CodeLiteral> into account when generating a query plan, so you are very likely to get different plans (yielding different row orders) depending on what you use for <CodeLiteral>LIMIT</CodeLiteral> and <CodeLiteral>OFFSET</CodeLiteral>. Thus, using different <CodeLiteral>LIMIT</CodeLiteral>/<CodeLiteral>OFFSET</CodeLiteral> values to select different subsets of a query result will give inconsistent results unless you enforce a predictable result ordering with <CodeLiteral>ORDER BY</CodeLiteral>. This is not a bug; it is an inherent consequence of the fact that SQL does not promise to deliver the results of a query in any particular order unless <CodeLiteral>ORDER BY</CodeLiteral> is used to constrain the order.\n It is even possible for repeated executions of the same <CodeLiteral>LIMIT</CodeLiteral> query to return different subsets of the rows of a table, if there is not an <CodeLiteral>ORDER BY</CodeLiteral> to enforce selection of a deterministic subset. Again, this is not a bug; determinism of the results is simply not guaranteed in such a case. ",
        "detail": "[DESCRIPTION]: The <CodeLiteral>LIMIT</CodeLiteral> clause consists of two independent sub-clauses:\n <code>LIMIT { count | ALL }\nOFFSET start\n</code>\n count specifies the maximum number of rows to return, while start specifies the number of rows to skip before starting to return rows. When both are specified, start rows are skipped before starting to count the count rows to be returned.\n If the count expression evaluates to NULL, it is treated as <CodeLiteral>LIMIT ALL</CodeLiteral>, i.e., no limit. If start evaluates to NULL, it is treated the same as <CodeLiteral>OFFSET 0</CodeLiteral>.\n SQL:2008 introduced a different syntax to achieve the same result, which PostgreSQL also supports. It is:\n <code>OFFSET start { ROW | ROWS }\nFETCH { FIRST | NEXT } [ count ] { ROW | ROWS } ONLY\n</code>\n In this syntax, the start or count value is required by the standard to be a literal constant, a parameter, or a variable name; as a PostgreSQL extension, other expressions are allowed, but will generally need to be enclosed in parentheses to avoid ambiguity. If count is omitted in a <CodeLiteral>FETCH</CodeLiteral> clause, it defaults to 1. <CodeLiteral>ROW</CodeLiteral> and <CodeLiteral>ROWS</CodeLiteral> as well as <CodeLiteral>FIRST</CodeLiteral> and <CodeLiteral>NEXT</CodeLiteral> are noise words that don't influence the effects of these clauses. According to the standard, the <CodeLiteral>OFFSET</CodeLiteral> clause must come before the <CodeLiteral>FETCH</CodeLiteral> clause if both are present; but PostgreSQL is laxer and allows either order.\n When using <CodeLiteral>LIMIT</CodeLiteral>, it is a good idea to use an <CodeLiteral>ORDER BY</CodeLiteral> clause that constrains the result rows into a unique order. Otherwise you will get an unpredictable subset of the query's rows \u2014 you might be asking for the tenth through twentieth rows, but tenth through twentieth in what ordering? You don't know what ordering unless you specify <CodeLiteral>ORDER BY</CodeLiteral>.\n The query planner takes <CodeLiteral>LIMIT</CodeLiteral> into account when generating a query plan, so you are very likely to get different plans (yielding different row orders) depending on what you use for <CodeLiteral>LIMIT</CodeLiteral> and <CodeLiteral>OFFSET</CodeLiteral>. Thus, using different <CodeLiteral>LIMIT</CodeLiteral>/<CodeLiteral>OFFSET</CodeLiteral> values to select different subsets of a query result will give inconsistent results unless you enforce a predictable result ordering with <CodeLiteral>ORDER BY</CodeLiteral>. This is not a bug; it is an inherent consequence of the fact that SQL does not promise to deliver the results of a query in any particular order unless <CodeLiteral>ORDER BY</CodeLiteral> is used to constrain the order.\n It is even possible for repeated executions of the same <CodeLiteral>LIMIT</CodeLiteral> query to return different subsets of the rows of a table, if there is not an <CodeLiteral>ORDER BY</CodeLiteral> to enforce selection of a deterministic subset. Again, this is not a bug; determinism of the results is simply not guaranteed in such a case. <sep>[DEMO]: SELECT * FROM employees ORDER BY employee_id OFFSET 5 ROWS FETCH FIRST 10 ROWS ONLY",
        "example": [
            "SELECT * FROM employees ORDER BY employee_id OFFSET 5 ROWS FETCH FIRST 10 ROWS ONLY"
        ],
        "link": []
    },
    {
        "type": "keyword",
        "keyword": "FETCH NEXT count ROWS ONLY",
        "tree": " (limit_clause FETCH (first_or_next NEXT) (row_or_rows ROWS) ONLY)",
        "description": "The <CodeLiteral>LIMIT</CodeLiteral> clause consists of two independent sub-clauses:\n <code>LIMIT { count | ALL }\nOFFSET start\n</code>\n count specifies the maximum number of rows to return, while start specifies the number of rows to skip before starting to return rows. When both are specified, start rows are skipped before starting to count the count rows to be returned.\n If the count expression evaluates to NULL, it is treated as <CodeLiteral>LIMIT ALL</CodeLiteral>, i.e., no limit. If start evaluates to NULL, it is treated the same as <CodeLiteral>OFFSET 0</CodeLiteral>.\n SQL:2008 introduced a different syntax to achieve the same result, which PostgreSQL also supports. It is:\n <code>OFFSET start { ROW | ROWS }\nFETCH { FIRST | NEXT } [ count ] { ROW | ROWS } ONLY\n</code>\n In this syntax, the start or count value is required by the standard to be a literal constant, a parameter, or a variable name; as a PostgreSQL extension, other expressions are allowed, but will generally need to be enclosed in parentheses to avoid ambiguity. If count is omitted in a <CodeLiteral>FETCH</CodeLiteral> clause, it defaults to 1. <CodeLiteral>ROW</CodeLiteral> and <CodeLiteral>ROWS</CodeLiteral> as well as <CodeLiteral>FIRST</CodeLiteral> and <CodeLiteral>NEXT</CodeLiteral> are noise words that don't influence the effects of these clauses. According to the standard, the <CodeLiteral>OFFSET</CodeLiteral> clause must come before the <CodeLiteral>FETCH</CodeLiteral> clause if both are present; but PostgreSQL is laxer and allows either order.\n When using <CodeLiteral>LIMIT</CodeLiteral>, it is a good idea to use an <CodeLiteral>ORDER BY</CodeLiteral> clause that constrains the result rows into a unique order. Otherwise you will get an unpredictable subset of the query's rows \u2014 you might be asking for the tenth through twentieth rows, but tenth through twentieth in what ordering? You don't know what ordering unless you specify <CodeLiteral>ORDER BY</CodeLiteral>.\n The query planner takes <CodeLiteral>LIMIT</CodeLiteral> into account when generating a query plan, so you are very likely to get different plans (yielding different row orders) depending on what you use for <CodeLiteral>LIMIT</CodeLiteral> and <CodeLiteral>OFFSET</CodeLiteral>. Thus, using different <CodeLiteral>LIMIT</CodeLiteral>/<CodeLiteral>OFFSET</CodeLiteral> values to select different subsets of a query result will give inconsistent results unless you enforce a predictable result ordering with <CodeLiteral>ORDER BY</CodeLiteral>. This is not a bug; it is an inherent consequence of the fact that SQL does not promise to deliver the results of a query in any particular order unless <CodeLiteral>ORDER BY</CodeLiteral> is used to constrain the order.\n It is even possible for repeated executions of the same <CodeLiteral>LIMIT</CodeLiteral> query to return different subsets of the rows of a table, if there is not an <CodeLiteral>ORDER BY</CodeLiteral> to enforce selection of a deterministic subset. Again, this is not a bug; determinism of the results is simply not guaranteed in such a case. ",
        "detail": "[DESCRIPTION]: The <CodeLiteral>LIMIT</CodeLiteral> clause consists of two independent sub-clauses:\n <code>LIMIT { count | ALL }\nOFFSET start\n</code>\n count specifies the maximum number of rows to return, while start specifies the number of rows to skip before starting to return rows. When both are specified, start rows are skipped before starting to count the count rows to be returned.\n If the count expression evaluates to NULL, it is treated as <CodeLiteral>LIMIT ALL</CodeLiteral>, i.e., no limit. If start evaluates to NULL, it is treated the same as <CodeLiteral>OFFSET 0</CodeLiteral>.\n SQL:2008 introduced a different syntax to achieve the same result, which PostgreSQL also supports. It is:\n <code>OFFSET start { ROW | ROWS }\nFETCH { FIRST | NEXT } [ count ] { ROW | ROWS } ONLY\n</code>\n In this syntax, the start or count value is required by the standard to be a literal constant, a parameter, or a variable name; as a PostgreSQL extension, other expressions are allowed, but will generally need to be enclosed in parentheses to avoid ambiguity. If count is omitted in a <CodeLiteral>FETCH</CodeLiteral> clause, it defaults to 1. <CodeLiteral>ROW</CodeLiteral> and <CodeLiteral>ROWS</CodeLiteral> as well as <CodeLiteral>FIRST</CodeLiteral> and <CodeLiteral>NEXT</CodeLiteral> are noise words that don't influence the effects of these clauses. According to the standard, the <CodeLiteral>OFFSET</CodeLiteral> clause must come before the <CodeLiteral>FETCH</CodeLiteral> clause if both are present; but PostgreSQL is laxer and allows either order.\n When using <CodeLiteral>LIMIT</CodeLiteral>, it is a good idea to use an <CodeLiteral>ORDER BY</CodeLiteral> clause that constrains the result rows into a unique order. Otherwise you will get an unpredictable subset of the query's rows \u2014 you might be asking for the tenth through twentieth rows, but tenth through twentieth in what ordering? You don't know what ordering unless you specify <CodeLiteral>ORDER BY</CodeLiteral>.\n The query planner takes <CodeLiteral>LIMIT</CodeLiteral> into account when generating a query plan, so you are very likely to get different plans (yielding different row orders) depending on what you use for <CodeLiteral>LIMIT</CodeLiteral> and <CodeLiteral>OFFSET</CodeLiteral>. Thus, using different <CodeLiteral>LIMIT</CodeLiteral>/<CodeLiteral>OFFSET</CodeLiteral> values to select different subsets of a query result will give inconsistent results unless you enforce a predictable result ordering with <CodeLiteral>ORDER BY</CodeLiteral>. This is not a bug; it is an inherent consequence of the fact that SQL does not promise to deliver the results of a query in any particular order unless <CodeLiteral>ORDER BY</CodeLiteral> is used to constrain the order.\n It is even possible for repeated executions of the same <CodeLiteral>LIMIT</CodeLiteral> query to return different subsets of the rows of a table, if there is not an <CodeLiteral>ORDER BY</CodeLiteral> to enforce selection of a deterministic subset. Again, this is not a bug; determinism of the results is simply not guaranteed in such a case. <sep>[DEMO]: SELECT * FROM employees ORDER BY employee_id OFFSET 5 ROWS FETCH NEXT 10 ROWS ONLY;",
        "example": [
            "SELECT * FROM employees ORDER BY employee_id OFFSET 5 ROWS FETCH NEXT 10 ROWS ONLY;"
        ],
        "link": []
    },
    {
        "type": "keyword",
        "keyword": "FOR UPDATE OF table_name",
        "tree": " (for_locking_item (for_locking_strength FOR UPDATE) (locked_rels_list OF))",
        "description": "<CodeLiteral>FOR UPDATE</CodeLiteral>, <CodeLiteral>FOR NO KEY UPDATE</CodeLiteral>, <CodeLiteral>FOR SHARE</CodeLiteral> and <CodeLiteral>FOR KEY SHARE</CodeLiteral> are locking clauses; they affect how <CodeLiteral>SELECT</CodeLiteral> locks rows as they are obtained from the table.\n The locking clause has the general form\n <code>FOR lock_strength [ OF table_name [, ...] ] [ NOWAIT | SKIP LOCKED ]\n</code>\n where lock_strength can be one of\n <code>UPDATE\nNO KEY UPDATE\nSHARE\nKEY SHARE\n</code>\n For more information on each row-level lock mode, refer to Section 13.3.2.\n To prevent the operation from waiting for other transactions to commit, use either the <CodeLiteral>NOWAIT</CodeLiteral> or <CodeLiteral>SKIP LOCKED</CodeLiteral> option. With <CodeLiteral>NOWAIT</CodeLiteral>, the statement reports an error, rather than waiting, if a selected row cannot be locked immediately. With <CodeLiteral>SKIP LOCKED</CodeLiteral>, any selected rows that cannot be immediately locked are skipped. Skipping locked rows provides an inconsistent view of the data, so this is not suitable for general purpose work, but can be used to avoid lock contention with multiple consumers accessing a queue-like table. Note that <CodeLiteral>NOWAIT</CodeLiteral> and <CodeLiteral>SKIP LOCKED</CodeLiteral> apply only to the row-level lock(s) \u2014 the required <CodeLiteral>ROW SHARE</CodeLiteral> table-level lock is still taken in the ordinary way (see Chapter 13). You can use LOCK with the <CodeLiteral>NOWAIT</CodeLiteral> option first, if you need to acquire the table-level lock without waiting.\n If specific tables are named in a locking clause, then only rows coming from those tables are locked; any other tables used in the SELECT are simply read as usual. A locking clause without a table list affects all tables used in the statement. If a locking clause is applied to a view or sub-query, it affects all tables used in the view or sub-query. However, these clauses do not apply to <CodeLiteral>WITH</CodeLiteral> queries referenced by the primary query. If you want row locking to occur within a <CodeLiteral>WITH</CodeLiteral> query, specify a locking clause within the <CodeLiteral>WITH</CodeLiteral> query.\n Multiple locking clauses can be written if it is necessary to specify different locking behavior for different tables. If the same table is mentioned (or implicitly affected) by more than one locking clause, then it is processed as if it was only specified by the strongest one. Similarly, a table is processed as <CodeLiteral>NOWAIT</CodeLiteral> if that is specified in any of the clauses affecting it. Otherwise, it is processed as <CodeLiteral>SKIP LOCKED</CodeLiteral> if that is specified in any of the clauses affecting it.\n The locking clauses cannot be used in contexts where returned rows cannot be clearly identified with individual table rows; for example they cannot be used with aggregation.\n When a locking clause appears at the top level of a SELECT query, the rows that are locked are exactly those that are returned by the query; in the case of a join query, the rows locked are those that contribute to returned join rows. In addition, rows that satisfied the query conditions as of the query snapshot will be locked, although they will not be returned if they were updated after the snapshot and no longer satisfy the query conditions. If a <CodeLiteral>LIMIT</CodeLiteral> is used, locking stops once enough rows have been returned to satisfy the limit (but note that rows skipped over by <CodeLiteral>OFFSET</CodeLiteral> will get locked). Similarly, if a locking clause is used in a cursor's query, only rows actually fetched or stepped past by the cursor will be locked.\n When a locking clause appears in a sub-SELECT, the rows locked are those returned to the outer query by the sub-query. This might involve fewer rows than inspection of the sub-query alone would suggest, since conditions from the outer query might be used to optimize execution of the sub-query. For example,\n <code>SELECT * FROM (SELECT * FROM mytable FOR UPDATE) ss WHERE col1 = 5;\n</code>\n will lock only rows having <CodeLiteral>col1 = 5</CodeLiteral>, even though that condition is not textually within the sub-query.\n Previous releases failed to preserve a lock which is upgraded by a later savepoint. For example, this code:\n <code>BEGIN;\nSELECT * FROM mytable WHERE key = 1 FOR UPDATE;\nSAVEPOINT s;\nUPDATE mytable SET ... WHERE key = 1;\nROLLBACK TO s;\n</code>\n would fail to preserve the <CodeLiteral>FOR UPDATE</CodeLiteral> lock after the ROLLBACK TO. This has been fixed in release 9.3.\n \n  <ClauseName>Caution</ClauseName>\n  It is possible for a SELECT command running at the <CodeLiteral>READ COMMITTED</CodeLiteral> transaction isolation level and using <CodeLiteral>ORDER BY</CodeLiteral> and a locking clause to return rows out of order. This is because <CodeLiteral>ORDER BY</CodeLiteral> is applied first. The command sorts the result, but might then block trying to obtain a lock on one or more of the rows. Once the <CodeLiteral>SELECT</CodeLiteral> unblocks, some of the ordering column values might have been modified, leading to those rows appearing to be out of order (though they are in order in terms of the original column values). This can be worked around at need by placing the <CodeLiteral>FOR UPDATE/SHARE</CodeLiteral> clause in a sub-query, for example\n  <code>SELECT * FROM (SELECT * FROM mytable FOR UPDATE) ss ORDER BY column1;\n</code>\n  Note that this will result in locking all rows of mytable, whereas <CodeLiteral>FOR UPDATE</CodeLiteral> at the top level would lock only the actually returned rows. This can make for a significant performance difference, particularly if the <CodeLiteral>ORDER BY</CodeLiteral> is combined with <CodeLiteral>LIMIT</CodeLiteral> or other restrictions. So this technique is recommended only if concurrent updates of the ordering columns are expected and a strictly sorted result is required.\n  At the <CodeLiteral>REPEATABLE READ</CodeLiteral> or <CodeLiteral>SERIALIZABLE</CodeLiteral> transaction isolation level this would cause a serialization failure (with a <CodeLiteral>SQLSTATE</CodeLiteral> of <CodeLiteral>'40001'</CodeLiteral>), so there is no possibility of receiving rows out of order under these isolation levels. ",
        "detail": "[DESCRIPTION]: <CodeLiteral>FOR UPDATE</CodeLiteral>, <CodeLiteral>FOR NO KEY UPDATE</CodeLiteral>, <CodeLiteral>FOR SHARE</CodeLiteral> and <CodeLiteral>FOR KEY SHARE</CodeLiteral> are locking clauses; they affect how <CodeLiteral>SELECT</CodeLiteral> locks rows as they are obtained from the table.\n The locking clause has the general form\n <code>FOR lock_strength [ OF table_name [, ...] ] [ NOWAIT | SKIP LOCKED ]\n</code>\n where lock_strength can be one of\n <code>UPDATE\nNO KEY UPDATE\nSHARE\nKEY SHARE\n</code>\n For more information on each row-level lock mode, refer to Section 13.3.2.\n To prevent the operation from waiting for other transactions to commit, use either the <CodeLiteral>NOWAIT</CodeLiteral> or <CodeLiteral>SKIP LOCKED</CodeLiteral> option. With <CodeLiteral>NOWAIT</CodeLiteral>, the statement reports an error, rather than waiting, if a selected row cannot be locked immediately. With <CodeLiteral>SKIP LOCKED</CodeLiteral>, any selected rows that cannot be immediately locked are skipped. Skipping locked rows provides an inconsistent view of the data, so this is not suitable for general purpose work, but can be used to avoid lock contention with multiple consumers accessing a queue-like table. Note that <CodeLiteral>NOWAIT</CodeLiteral> and <CodeLiteral>SKIP LOCKED</CodeLiteral> apply only to the row-level lock(s) \u2014 the required <CodeLiteral>ROW SHARE</CodeLiteral> table-level lock is still taken in the ordinary way (see Chapter 13). You can use LOCK with the <CodeLiteral>NOWAIT</CodeLiteral> option first, if you need to acquire the table-level lock without waiting.\n If specific tables are named in a locking clause, then only rows coming from those tables are locked; any other tables used in the SELECT are simply read as usual. A locking clause without a table list affects all tables used in the statement. If a locking clause is applied to a view or sub-query, it affects all tables used in the view or sub-query. However, these clauses do not apply to <CodeLiteral>WITH</CodeLiteral> queries referenced by the primary query. If you want row locking to occur within a <CodeLiteral>WITH</CodeLiteral> query, specify a locking clause within the <CodeLiteral>WITH</CodeLiteral> query.\n Multiple locking clauses can be written if it is necessary to specify different locking behavior for different tables. If the same table is mentioned (or implicitly affected) by more than one locking clause, then it is processed as if it was only specified by the strongest one. Similarly, a table is processed as <CodeLiteral>NOWAIT</CodeLiteral> if that is specified in any of the clauses affecting it. Otherwise, it is processed as <CodeLiteral>SKIP LOCKED</CodeLiteral> if that is specified in any of the clauses affecting it.\n The locking clauses cannot be used in contexts where returned rows cannot be clearly identified with individual table rows; for example they cannot be used with aggregation.\n When a locking clause appears at the top level of a SELECT query, the rows that are locked are exactly those that are returned by the query; in the case of a join query, the rows locked are those that contribute to returned join rows. In addition, rows that satisfied the query conditions as of the query snapshot will be locked, although they will not be returned if they were updated after the snapshot and no longer satisfy the query conditions. If a <CodeLiteral>LIMIT</CodeLiteral> is used, locking stops once enough rows have been returned to satisfy the limit (but note that rows skipped over by <CodeLiteral>OFFSET</CodeLiteral> will get locked). Similarly, if a locking clause is used in a cursor's query, only rows actually fetched or stepped past by the cursor will be locked.\n When a locking clause appears in a sub-SELECT, the rows locked are those returned to the outer query by the sub-query. This might involve fewer rows than inspection of the sub-query alone would suggest, since conditions from the outer query might be used to optimize execution of the sub-query. For example,\n <code>SELECT * FROM (SELECT * FROM mytable FOR UPDATE) ss WHERE col1 = 5;\n</code>\n will lock only rows having <CodeLiteral>col1 = 5</CodeLiteral>, even though that condition is not textually within the sub-query.\n Previous releases failed to preserve a lock which is upgraded by a later savepoint. For example, this code:\n <code>BEGIN;\nSELECT * FROM mytable WHERE key = 1 FOR UPDATE;\nSAVEPOINT s;\nUPDATE mytable SET ... WHERE key = 1;\nROLLBACK TO s;\n</code>\n would fail to preserve the <CodeLiteral>FOR UPDATE</CodeLiteral> lock after the ROLLBACK TO. This has been fixed in release 9.3.\n \n  <ClauseName>Caution</ClauseName>\n  It is possible for a SELECT command running at the <CodeLiteral>READ COMMITTED</CodeLiteral> transaction isolation level and using <CodeLiteral>ORDER BY</CodeLiteral> and a locking clause to return rows out of order. This is because <CodeLiteral>ORDER BY</CodeLiteral> is applied first. The command sorts the result, but might then block trying to obtain a lock on one or more of the rows. Once the <CodeLiteral>SELECT</CodeLiteral> unblocks, some of the ordering column values might have been modified, leading to those rows appearing to be out of order (though they are in order in terms of the original column values). This can be worked around at need by placing the <CodeLiteral>FOR UPDATE/SHARE</CodeLiteral> clause in a sub-query, for example\n  <code>SELECT * FROM (SELECT * FROM mytable FOR UPDATE) ss ORDER BY column1;\n</code>\n  Note that this will result in locking all rows of mytable, whereas <CodeLiteral>FOR UPDATE</CodeLiteral> at the top level would lock only the actually returned rows. This can make for a significant performance difference, particularly if the <CodeLiteral>ORDER BY</CodeLiteral> is combined with <CodeLiteral>LIMIT</CodeLiteral> or other restrictions. So this technique is recommended only if concurrent updates of the ordering columns are expected and a strictly sorted result is required.\n  At the <CodeLiteral>REPEATABLE READ</CodeLiteral> or <CodeLiteral>SERIALIZABLE</CodeLiteral> transaction isolation level this would cause a serialization failure (with a <CodeLiteral>SQLSTATE</CodeLiteral> of <CodeLiteral>'40001'</CodeLiteral>), so there is no possibility of receiving rows out of order under these isolation levels. <sep>[DEMO]: SELECT * FROM employees FOR UPDATE OF employees NOWAIT;",
        "example": [
            "SELECT * FROM employees FOR UPDATE OF employees NOWAIT;"
        ],
        "link": []
    },
    {
        "type": "keyword",
        "keyword": "FOR NO KEY UPDATE OF table_name",
        "tree": " (for_locking_item (for_locking_strength FOR NO KEY UPDATE) (locked_rels_list OF))",
        "description": "<CodeLiteral>FOR UPDATE</CodeLiteral>, <CodeLiteral>FOR NO KEY UPDATE</CodeLiteral>, <CodeLiteral>FOR SHARE</CodeLiteral> and <CodeLiteral>FOR KEY SHARE</CodeLiteral> are locking clauses; they affect how <CodeLiteral>SELECT</CodeLiteral> locks rows as they are obtained from the table.\n The locking clause has the general form\n <code>FOR lock_strength [ OF table_name [, ...] ] [ NOWAIT | SKIP LOCKED ]\n</code>\n where lock_strength can be one of\n <code>UPDATE\nNO KEY UPDATE\nSHARE\nKEY SHARE\n</code>\n For more information on each row-level lock mode, refer to Section 13.3.2.\n To prevent the operation from waiting for other transactions to commit, use either the <CodeLiteral>NOWAIT</CodeLiteral> or <CodeLiteral>SKIP LOCKED</CodeLiteral> option. With <CodeLiteral>NOWAIT</CodeLiteral>, the statement reports an error, rather than waiting, if a selected row cannot be locked immediately. With <CodeLiteral>SKIP LOCKED</CodeLiteral>, any selected rows that cannot be immediately locked are skipped. Skipping locked rows provides an inconsistent view of the data, so this is not suitable for general purpose work, but can be used to avoid lock contention with multiple consumers accessing a queue-like table. Note that <CodeLiteral>NOWAIT</CodeLiteral> and <CodeLiteral>SKIP LOCKED</CodeLiteral> apply only to the row-level lock(s) \u2014 the required <CodeLiteral>ROW SHARE</CodeLiteral> table-level lock is still taken in the ordinary way (see Chapter 13). You can use LOCK with the <CodeLiteral>NOWAIT</CodeLiteral> option first, if you need to acquire the table-level lock without waiting.\n If specific tables are named in a locking clause, then only rows coming from those tables are locked; any other tables used in the SELECT are simply read as usual. A locking clause without a table list affects all tables used in the statement. If a locking clause is applied to a view or sub-query, it affects all tables used in the view or sub-query. However, these clauses do not apply to <CodeLiteral>WITH</CodeLiteral> queries referenced by the primary query. If you want row locking to occur within a <CodeLiteral>WITH</CodeLiteral> query, specify a locking clause within the <CodeLiteral>WITH</CodeLiteral> query.\n Multiple locking clauses can be written if it is necessary to specify different locking behavior for different tables. If the same table is mentioned (or implicitly affected) by more than one locking clause, then it is processed as if it was only specified by the strongest one. Similarly, a table is processed as <CodeLiteral>NOWAIT</CodeLiteral> if that is specified in any of the clauses affecting it. Otherwise, it is processed as <CodeLiteral>SKIP LOCKED</CodeLiteral> if that is specified in any of the clauses affecting it.\n The locking clauses cannot be used in contexts where returned rows cannot be clearly identified with individual table rows; for example they cannot be used with aggregation.\n When a locking clause appears at the top level of a SELECT query, the rows that are locked are exactly those that are returned by the query; in the case of a join query, the rows locked are those that contribute to returned join rows. In addition, rows that satisfied the query conditions as of the query snapshot will be locked, although they will not be returned if they were updated after the snapshot and no longer satisfy the query conditions. If a <CodeLiteral>LIMIT</CodeLiteral> is used, locking stops once enough rows have been returned to satisfy the limit (but note that rows skipped over by <CodeLiteral>OFFSET</CodeLiteral> will get locked). Similarly, if a locking clause is used in a cursor's query, only rows actually fetched or stepped past by the cursor will be locked.\n When a locking clause appears in a sub-SELECT, the rows locked are those returned to the outer query by the sub-query. This might involve fewer rows than inspection of the sub-query alone would suggest, since conditions from the outer query might be used to optimize execution of the sub-query. For example,\n <code>SELECT * FROM (SELECT * FROM mytable FOR UPDATE) ss WHERE col1 = 5;\n</code>\n will lock only rows having <CodeLiteral>col1 = 5</CodeLiteral>, even though that condition is not textually within the sub-query.\n Previous releases failed to preserve a lock which is upgraded by a later savepoint. For example, this code:\n <code>BEGIN;\nSELECT * FROM mytable WHERE key = 1 FOR UPDATE;\nSAVEPOINT s;\nUPDATE mytable SET ... WHERE key = 1;\nROLLBACK TO s;\n</code>\n would fail to preserve the <CodeLiteral>FOR UPDATE</CodeLiteral> lock after the ROLLBACK TO. This has been fixed in release 9.3.\n \n  <ClauseName>Caution</ClauseName>\n  It is possible for a SELECT command running at the <CodeLiteral>READ COMMITTED</CodeLiteral> transaction isolation level and using <CodeLiteral>ORDER BY</CodeLiteral> and a locking clause to return rows out of order. This is because <CodeLiteral>ORDER BY</CodeLiteral> is applied first. The command sorts the result, but might then block trying to obtain a lock on one or more of the rows. Once the <CodeLiteral>SELECT</CodeLiteral> unblocks, some of the ordering column values might have been modified, leading to those rows appearing to be out of order (though they are in order in terms of the original column values). This can be worked around at need by placing the <CodeLiteral>FOR UPDATE/SHARE</CodeLiteral> clause in a sub-query, for example\n  <code>SELECT * FROM (SELECT * FROM mytable FOR UPDATE) ss ORDER BY column1;\n</code>\n  Note that this will result in locking all rows of mytable, whereas <CodeLiteral>FOR UPDATE</CodeLiteral> at the top level would lock only the actually returned rows. This can make for a significant performance difference, particularly if the <CodeLiteral>ORDER BY</CodeLiteral> is combined with <CodeLiteral>LIMIT</CodeLiteral> or other restrictions. So this technique is recommended only if concurrent updates of the ordering columns are expected and a strictly sorted result is required.\n  At the <CodeLiteral>REPEATABLE READ</CodeLiteral> or <CodeLiteral>SERIALIZABLE</CodeLiteral> transaction isolation level this would cause a serialization failure (with a <CodeLiteral>SQLSTATE</CodeLiteral> of <CodeLiteral>'40001'</CodeLiteral>), so there is no possibility of receiving rows out of order under these isolation levels. ",
        "detail": "[DESCRIPTION]: <CodeLiteral>FOR UPDATE</CodeLiteral>, <CodeLiteral>FOR NO KEY UPDATE</CodeLiteral>, <CodeLiteral>FOR SHARE</CodeLiteral> and <CodeLiteral>FOR KEY SHARE</CodeLiteral> are locking clauses; they affect how <CodeLiteral>SELECT</CodeLiteral> locks rows as they are obtained from the table.\n The locking clause has the general form\n <code>FOR lock_strength [ OF table_name [, ...] ] [ NOWAIT | SKIP LOCKED ]\n</code>\n where lock_strength can be one of\n <code>UPDATE\nNO KEY UPDATE\nSHARE\nKEY SHARE\n</code>\n For more information on each row-level lock mode, refer to Section 13.3.2.\n To prevent the operation from waiting for other transactions to commit, use either the <CodeLiteral>NOWAIT</CodeLiteral> or <CodeLiteral>SKIP LOCKED</CodeLiteral> option. With <CodeLiteral>NOWAIT</CodeLiteral>, the statement reports an error, rather than waiting, if a selected row cannot be locked immediately. With <CodeLiteral>SKIP LOCKED</CodeLiteral>, any selected rows that cannot be immediately locked are skipped. Skipping locked rows provides an inconsistent view of the data, so this is not suitable for general purpose work, but can be used to avoid lock contention with multiple consumers accessing a queue-like table. Note that <CodeLiteral>NOWAIT</CodeLiteral> and <CodeLiteral>SKIP LOCKED</CodeLiteral> apply only to the row-level lock(s) \u2014 the required <CodeLiteral>ROW SHARE</CodeLiteral> table-level lock is still taken in the ordinary way (see Chapter 13). You can use LOCK with the <CodeLiteral>NOWAIT</CodeLiteral> option first, if you need to acquire the table-level lock without waiting.\n If specific tables are named in a locking clause, then only rows coming from those tables are locked; any other tables used in the SELECT are simply read as usual. A locking clause without a table list affects all tables used in the statement. If a locking clause is applied to a view or sub-query, it affects all tables used in the view or sub-query. However, these clauses do not apply to <CodeLiteral>WITH</CodeLiteral> queries referenced by the primary query. If you want row locking to occur within a <CodeLiteral>WITH</CodeLiteral> query, specify a locking clause within the <CodeLiteral>WITH</CodeLiteral> query.\n Multiple locking clauses can be written if it is necessary to specify different locking behavior for different tables. If the same table is mentioned (or implicitly affected) by more than one locking clause, then it is processed as if it was only specified by the strongest one. Similarly, a table is processed as <CodeLiteral>NOWAIT</CodeLiteral> if that is specified in any of the clauses affecting it. Otherwise, it is processed as <CodeLiteral>SKIP LOCKED</CodeLiteral> if that is specified in any of the clauses affecting it.\n The locking clauses cannot be used in contexts where returned rows cannot be clearly identified with individual table rows; for example they cannot be used with aggregation.\n When a locking clause appears at the top level of a SELECT query, the rows that are locked are exactly those that are returned by the query; in the case of a join query, the rows locked are those that contribute to returned join rows. In addition, rows that satisfied the query conditions as of the query snapshot will be locked, although they will not be returned if they were updated after the snapshot and no longer satisfy the query conditions. If a <CodeLiteral>LIMIT</CodeLiteral> is used, locking stops once enough rows have been returned to satisfy the limit (but note that rows skipped over by <CodeLiteral>OFFSET</CodeLiteral> will get locked). Similarly, if a locking clause is used in a cursor's query, only rows actually fetched or stepped past by the cursor will be locked.\n When a locking clause appears in a sub-SELECT, the rows locked are those returned to the outer query by the sub-query. This might involve fewer rows than inspection of the sub-query alone would suggest, since conditions from the outer query might be used to optimize execution of the sub-query. For example,\n <code>SELECT * FROM (SELECT * FROM mytable FOR UPDATE) ss WHERE col1 = 5;\n</code>\n will lock only rows having <CodeLiteral>col1 = 5</CodeLiteral>, even though that condition is not textually within the sub-query.\n Previous releases failed to preserve a lock which is upgraded by a later savepoint. For example, this code:\n <code>BEGIN;\nSELECT * FROM mytable WHERE key = 1 FOR UPDATE;\nSAVEPOINT s;\nUPDATE mytable SET ... WHERE key = 1;\nROLLBACK TO s;\n</code>\n would fail to preserve the <CodeLiteral>FOR UPDATE</CodeLiteral> lock after the ROLLBACK TO. This has been fixed in release 9.3.\n \n  <ClauseName>Caution</ClauseName>\n  It is possible for a SELECT command running at the <CodeLiteral>READ COMMITTED</CodeLiteral> transaction isolation level and using <CodeLiteral>ORDER BY</CodeLiteral> and a locking clause to return rows out of order. This is because <CodeLiteral>ORDER BY</CodeLiteral> is applied first. The command sorts the result, but might then block trying to obtain a lock on one or more of the rows. Once the <CodeLiteral>SELECT</CodeLiteral> unblocks, some of the ordering column values might have been modified, leading to those rows appearing to be out of order (though they are in order in terms of the original column values). This can be worked around at need by placing the <CodeLiteral>FOR UPDATE/SHARE</CodeLiteral> clause in a sub-query, for example\n  <code>SELECT * FROM (SELECT * FROM mytable FOR UPDATE) ss ORDER BY column1;\n</code>\n  Note that this will result in locking all rows of mytable, whereas <CodeLiteral>FOR UPDATE</CodeLiteral> at the top level would lock only the actually returned rows. This can make for a significant performance difference, particularly if the <CodeLiteral>ORDER BY</CodeLiteral> is combined with <CodeLiteral>LIMIT</CodeLiteral> or other restrictions. So this technique is recommended only if concurrent updates of the ordering columns are expected and a strictly sorted result is required.\n  At the <CodeLiteral>REPEATABLE READ</CodeLiteral> or <CodeLiteral>SERIALIZABLE</CodeLiteral> transaction isolation level this would cause a serialization failure (with a <CodeLiteral>SQLSTATE</CodeLiteral> of <CodeLiteral>'40001'</CodeLiteral>), so there is no possibility of receiving rows out of order under these isolation levels. <sep>[DEMO]: SELECT * FROM employees FOR NO KEY UPDATE OF employees NOWAIT;",
        "example": [
            "SELECT * FROM employees FOR NO KEY UPDATE OF employees NOWAIT;"
        ],
        "link": []
    },
    {
        "type": "keyword",
        "keyword": "FOR SHARE OF table_name",
        "tree": " (for_locking_item (for_locking_strength FOR SHARE) (locked_rels_list OF))",
        "description": "<CodeLiteral>FOR UPDATE</CodeLiteral>, <CodeLiteral>FOR NO KEY UPDATE</CodeLiteral>, <CodeLiteral>FOR SHARE</CodeLiteral> and <CodeLiteral>FOR KEY SHARE</CodeLiteral> are locking clauses; they affect how <CodeLiteral>SELECT</CodeLiteral> locks rows as they are obtained from the table.\n The locking clause has the general form\n <code>FOR lock_strength [ OF table_name [, ...] ] [ NOWAIT | SKIP LOCKED ]\n</code>\n where lock_strength can be one of\n <code>UPDATE\nNO KEY UPDATE\nSHARE\nKEY SHARE\n</code>\n For more information on each row-level lock mode, refer to Section 13.3.2.\n To prevent the operation from waiting for other transactions to commit, use either the <CodeLiteral>NOWAIT</CodeLiteral> or <CodeLiteral>SKIP LOCKED</CodeLiteral> option. With <CodeLiteral>NOWAIT</CodeLiteral>, the statement reports an error, rather than waiting, if a selected row cannot be locked immediately. With <CodeLiteral>SKIP LOCKED</CodeLiteral>, any selected rows that cannot be immediately locked are skipped. Skipping locked rows provides an inconsistent view of the data, so this is not suitable for general purpose work, but can be used to avoid lock contention with multiple consumers accessing a queue-like table. Note that <CodeLiteral>NOWAIT</CodeLiteral> and <CodeLiteral>SKIP LOCKED</CodeLiteral> apply only to the row-level lock(s) \u2014 the required <CodeLiteral>ROW SHARE</CodeLiteral> table-level lock is still taken in the ordinary way (see Chapter 13). You can use LOCK with the <CodeLiteral>NOWAIT</CodeLiteral> option first, if you need to acquire the table-level lock without waiting.\n If specific tables are named in a locking clause, then only rows coming from those tables are locked; any other tables used in the SELECT are simply read as usual. A locking clause without a table list affects all tables used in the statement. If a locking clause is applied to a view or sub-query, it affects all tables used in the view or sub-query. However, these clauses do not apply to <CodeLiteral>WITH</CodeLiteral> queries referenced by the primary query. If you want row locking to occur within a <CodeLiteral>WITH</CodeLiteral> query, specify a locking clause within the <CodeLiteral>WITH</CodeLiteral> query.\n Multiple locking clauses can be written if it is necessary to specify different locking behavior for different tables. If the same table is mentioned (or implicitly affected) by more than one locking clause, then it is processed as if it was only specified by the strongest one. Similarly, a table is processed as <CodeLiteral>NOWAIT</CodeLiteral> if that is specified in any of the clauses affecting it. Otherwise, it is processed as <CodeLiteral>SKIP LOCKED</CodeLiteral> if that is specified in any of the clauses affecting it.\n The locking clauses cannot be used in contexts where returned rows cannot be clearly identified with individual table rows; for example they cannot be used with aggregation.\n When a locking clause appears at the top level of a SELECT query, the rows that are locked are exactly those that are returned by the query; in the case of a join query, the rows locked are those that contribute to returned join rows. In addition, rows that satisfied the query conditions as of the query snapshot will be locked, although they will not be returned if they were updated after the snapshot and no longer satisfy the query conditions. If a <CodeLiteral>LIMIT</CodeLiteral> is used, locking stops once enough rows have been returned to satisfy the limit (but note that rows skipped over by <CodeLiteral>OFFSET</CodeLiteral> will get locked). Similarly, if a locking clause is used in a cursor's query, only rows actually fetched or stepped past by the cursor will be locked.\n When a locking clause appears in a sub-SELECT, the rows locked are those returned to the outer query by the sub-query. This might involve fewer rows than inspection of the sub-query alone would suggest, since conditions from the outer query might be used to optimize execution of the sub-query. For example,\n <code>SELECT * FROM (SELECT * FROM mytable FOR UPDATE) ss WHERE col1 = 5;\n</code>\n will lock only rows having <CodeLiteral>col1 = 5</CodeLiteral>, even though that condition is not textually within the sub-query.\n Previous releases failed to preserve a lock which is upgraded by a later savepoint. For example, this code:\n <code>BEGIN;\nSELECT * FROM mytable WHERE key = 1 FOR UPDATE;\nSAVEPOINT s;\nUPDATE mytable SET ... WHERE key = 1;\nROLLBACK TO s;\n</code>\n would fail to preserve the <CodeLiteral>FOR UPDATE</CodeLiteral> lock after the ROLLBACK TO. This has been fixed in release 9.3.\n \n  <ClauseName>Caution</ClauseName>\n  It is possible for a SELECT command running at the <CodeLiteral>READ COMMITTED</CodeLiteral> transaction isolation level and using <CodeLiteral>ORDER BY</CodeLiteral> and a locking clause to return rows out of order. This is because <CodeLiteral>ORDER BY</CodeLiteral> is applied first. The command sorts the result, but might then block trying to obtain a lock on one or more of the rows. Once the <CodeLiteral>SELECT</CodeLiteral> unblocks, some of the ordering column values might have been modified, leading to those rows appearing to be out of order (though they are in order in terms of the original column values). This can be worked around at need by placing the <CodeLiteral>FOR UPDATE/SHARE</CodeLiteral> clause in a sub-query, for example\n  <code>SELECT * FROM (SELECT * FROM mytable FOR UPDATE) ss ORDER BY column1;\n</code>\n  Note that this will result in locking all rows of mytable, whereas <CodeLiteral>FOR UPDATE</CodeLiteral> at the top level would lock only the actually returned rows. This can make for a significant performance difference, particularly if the <CodeLiteral>ORDER BY</CodeLiteral> is combined with <CodeLiteral>LIMIT</CodeLiteral> or other restrictions. So this technique is recommended only if concurrent updates of the ordering columns are expected and a strictly sorted result is required.\n  At the <CodeLiteral>REPEATABLE READ</CodeLiteral> or <CodeLiteral>SERIALIZABLE</CodeLiteral> transaction isolation level this would cause a serialization failure (with a <CodeLiteral>SQLSTATE</CodeLiteral> of <CodeLiteral>'40001'</CodeLiteral>), so there is no possibility of receiving rows out of order under these isolation levels. ",
        "detail": "[DESCRIPTION]: <CodeLiteral>FOR UPDATE</CodeLiteral>, <CodeLiteral>FOR NO KEY UPDATE</CodeLiteral>, <CodeLiteral>FOR SHARE</CodeLiteral> and <CodeLiteral>FOR KEY SHARE</CodeLiteral> are locking clauses; they affect how <CodeLiteral>SELECT</CodeLiteral> locks rows as they are obtained from the table.\n The locking clause has the general form\n <code>FOR lock_strength [ OF table_name [, ...] ] [ NOWAIT | SKIP LOCKED ]\n</code>\n where lock_strength can be one of\n <code>UPDATE\nNO KEY UPDATE\nSHARE\nKEY SHARE\n</code>\n For more information on each row-level lock mode, refer to Section 13.3.2.\n To prevent the operation from waiting for other transactions to commit, use either the <CodeLiteral>NOWAIT</CodeLiteral> or <CodeLiteral>SKIP LOCKED</CodeLiteral> option. With <CodeLiteral>NOWAIT</CodeLiteral>, the statement reports an error, rather than waiting, if a selected row cannot be locked immediately. With <CodeLiteral>SKIP LOCKED</CodeLiteral>, any selected rows that cannot be immediately locked are skipped. Skipping locked rows provides an inconsistent view of the data, so this is not suitable for general purpose work, but can be used to avoid lock contention with multiple consumers accessing a queue-like table. Note that <CodeLiteral>NOWAIT</CodeLiteral> and <CodeLiteral>SKIP LOCKED</CodeLiteral> apply only to the row-level lock(s) \u2014 the required <CodeLiteral>ROW SHARE</CodeLiteral> table-level lock is still taken in the ordinary way (see Chapter 13). You can use LOCK with the <CodeLiteral>NOWAIT</CodeLiteral> option first, if you need to acquire the table-level lock without waiting.\n If specific tables are named in a locking clause, then only rows coming from those tables are locked; any other tables used in the SELECT are simply read as usual. A locking clause without a table list affects all tables used in the statement. If a locking clause is applied to a view or sub-query, it affects all tables used in the view or sub-query. However, these clauses do not apply to <CodeLiteral>WITH</CodeLiteral> queries referenced by the primary query. If you want row locking to occur within a <CodeLiteral>WITH</CodeLiteral> query, specify a locking clause within the <CodeLiteral>WITH</CodeLiteral> query.\n Multiple locking clauses can be written if it is necessary to specify different locking behavior for different tables. If the same table is mentioned (or implicitly affected) by more than one locking clause, then it is processed as if it was only specified by the strongest one. Similarly, a table is processed as <CodeLiteral>NOWAIT</CodeLiteral> if that is specified in any of the clauses affecting it. Otherwise, it is processed as <CodeLiteral>SKIP LOCKED</CodeLiteral> if that is specified in any of the clauses affecting it.\n The locking clauses cannot be used in contexts where returned rows cannot be clearly identified with individual table rows; for example they cannot be used with aggregation.\n When a locking clause appears at the top level of a SELECT query, the rows that are locked are exactly those that are returned by the query; in the case of a join query, the rows locked are those that contribute to returned join rows. In addition, rows that satisfied the query conditions as of the query snapshot will be locked, although they will not be returned if they were updated after the snapshot and no longer satisfy the query conditions. If a <CodeLiteral>LIMIT</CodeLiteral> is used, locking stops once enough rows have been returned to satisfy the limit (but note that rows skipped over by <CodeLiteral>OFFSET</CodeLiteral> will get locked). Similarly, if a locking clause is used in a cursor's query, only rows actually fetched or stepped past by the cursor will be locked.\n When a locking clause appears in a sub-SELECT, the rows locked are those returned to the outer query by the sub-query. This might involve fewer rows than inspection of the sub-query alone would suggest, since conditions from the outer query might be used to optimize execution of the sub-query. For example,\n <code>SELECT * FROM (SELECT * FROM mytable FOR UPDATE) ss WHERE col1 = 5;\n</code>\n will lock only rows having <CodeLiteral>col1 = 5</CodeLiteral>, even though that condition is not textually within the sub-query.\n Previous releases failed to preserve a lock which is upgraded by a later savepoint. For example, this code:\n <code>BEGIN;\nSELECT * FROM mytable WHERE key = 1 FOR UPDATE;\nSAVEPOINT s;\nUPDATE mytable SET ... WHERE key = 1;\nROLLBACK TO s;\n</code>\n would fail to preserve the <CodeLiteral>FOR UPDATE</CodeLiteral> lock after the ROLLBACK TO. This has been fixed in release 9.3.\n \n  <ClauseName>Caution</ClauseName>\n  It is possible for a SELECT command running at the <CodeLiteral>READ COMMITTED</CodeLiteral> transaction isolation level and using <CodeLiteral>ORDER BY</CodeLiteral> and a locking clause to return rows out of order. This is because <CodeLiteral>ORDER BY</CodeLiteral> is applied first. The command sorts the result, but might then block trying to obtain a lock on one or more of the rows. Once the <CodeLiteral>SELECT</CodeLiteral> unblocks, some of the ordering column values might have been modified, leading to those rows appearing to be out of order (though they are in order in terms of the original column values). This can be worked around at need by placing the <CodeLiteral>FOR UPDATE/SHARE</CodeLiteral> clause in a sub-query, for example\n  <code>SELECT * FROM (SELECT * FROM mytable FOR UPDATE) ss ORDER BY column1;\n</code>\n  Note that this will result in locking all rows of mytable, whereas <CodeLiteral>FOR UPDATE</CodeLiteral> at the top level would lock only the actually returned rows. This can make for a significant performance difference, particularly if the <CodeLiteral>ORDER BY</CodeLiteral> is combined with <CodeLiteral>LIMIT</CodeLiteral> or other restrictions. So this technique is recommended only if concurrent updates of the ordering columns are expected and a strictly sorted result is required.\n  At the <CodeLiteral>REPEATABLE READ</CodeLiteral> or <CodeLiteral>SERIALIZABLE</CodeLiteral> transaction isolation level this would cause a serialization failure (with a <CodeLiteral>SQLSTATE</CodeLiteral> of <CodeLiteral>'40001'</CodeLiteral>), so there is no possibility of receiving rows out of order under these isolation levels. <sep>[DEMO]: SELECT * FROM employees FOR SHARE OF employees;",
        "example": [
            "SELECT * FROM employees FOR SHARE OF employees;"
        ],
        "link": []
    },
    {
        "type": "keyword",
        "keyword": "FOR KEY SHARE OF table_name",
        "tree": " (for_locking_item (for_locking_strength FOR KEY SHARE) (locked_rels_list OF))",
        "description": "<CodeLiteral>FOR UPDATE</CodeLiteral>, <CodeLiteral>FOR NO KEY UPDATE</CodeLiteral>, <CodeLiteral>FOR SHARE</CodeLiteral> and <CodeLiteral>FOR KEY SHARE</CodeLiteral> are locking clauses; they affect how <CodeLiteral>SELECT</CodeLiteral> locks rows as they are obtained from the table.\n The locking clause has the general form\n <code>FOR lock_strength [ OF table_name [, ...] ] [ NOWAIT | SKIP LOCKED ]\n</code>\n where lock_strength can be one of\n <code>UPDATE\nNO KEY UPDATE\nSHARE\nKEY SHARE\n</code>\n For more information on each row-level lock mode, refer to Section 13.3.2.\n To prevent the operation from waiting for other transactions to commit, use either the <CodeLiteral>NOWAIT</CodeLiteral> or <CodeLiteral>SKIP LOCKED</CodeLiteral> option. With <CodeLiteral>NOWAIT</CodeLiteral>, the statement reports an error, rather than waiting, if a selected row cannot be locked immediately. With <CodeLiteral>SKIP LOCKED</CodeLiteral>, any selected rows that cannot be immediately locked are skipped. Skipping locked rows provides an inconsistent view of the data, so this is not suitable for general purpose work, but can be used to avoid lock contention with multiple consumers accessing a queue-like table. Note that <CodeLiteral>NOWAIT</CodeLiteral> and <CodeLiteral>SKIP LOCKED</CodeLiteral> apply only to the row-level lock(s) \u2014 the required <CodeLiteral>ROW SHARE</CodeLiteral> table-level lock is still taken in the ordinary way (see Chapter 13). You can use LOCK with the <CodeLiteral>NOWAIT</CodeLiteral> option first, if you need to acquire the table-level lock without waiting.\n If specific tables are named in a locking clause, then only rows coming from those tables are locked; any other tables used in the SELECT are simply read as usual. A locking clause without a table list affects all tables used in the statement. If a locking clause is applied to a view or sub-query, it affects all tables used in the view or sub-query. However, these clauses do not apply to <CodeLiteral>WITH</CodeLiteral> queries referenced by the primary query. If you want row locking to occur within a <CodeLiteral>WITH</CodeLiteral> query, specify a locking clause within the <CodeLiteral>WITH</CodeLiteral> query.\n Multiple locking clauses can be written if it is necessary to specify different locking behavior for different tables. If the same table is mentioned (or implicitly affected) by more than one locking clause, then it is processed as if it was only specified by the strongest one. Similarly, a table is processed as <CodeLiteral>NOWAIT</CodeLiteral> if that is specified in any of the clauses affecting it. Otherwise, it is processed as <CodeLiteral>SKIP LOCKED</CodeLiteral> if that is specified in any of the clauses affecting it.\n The locking clauses cannot be used in contexts where returned rows cannot be clearly identified with individual table rows; for example they cannot be used with aggregation.\n When a locking clause appears at the top level of a SELECT query, the rows that are locked are exactly those that are returned by the query; in the case of a join query, the rows locked are those that contribute to returned join rows. In addition, rows that satisfied the query conditions as of the query snapshot will be locked, although they will not be returned if they were updated after the snapshot and no longer satisfy the query conditions. If a <CodeLiteral>LIMIT</CodeLiteral> is used, locking stops once enough rows have been returned to satisfy the limit (but note that rows skipped over by <CodeLiteral>OFFSET</CodeLiteral> will get locked). Similarly, if a locking clause is used in a cursor's query, only rows actually fetched or stepped past by the cursor will be locked.\n When a locking clause appears in a sub-SELECT, the rows locked are those returned to the outer query by the sub-query. This might involve fewer rows than inspection of the sub-query alone would suggest, since conditions from the outer query might be used to optimize execution of the sub-query. For example,\n <code>SELECT * FROM (SELECT * FROM mytable FOR UPDATE) ss WHERE col1 = 5;\n</code>\n will lock only rows having <CodeLiteral>col1 = 5</CodeLiteral>, even though that condition is not textually within the sub-query.\n Previous releases failed to preserve a lock which is upgraded by a later savepoint. For example, this code:\n <code>BEGIN;\nSELECT * FROM mytable WHERE key = 1 FOR UPDATE;\nSAVEPOINT s;\nUPDATE mytable SET ... WHERE key = 1;\nROLLBACK TO s;\n</code>\n would fail to preserve the <CodeLiteral>FOR UPDATE</CodeLiteral> lock after the ROLLBACK TO. This has been fixed in release 9.3.\n \n  <ClauseName>Caution</ClauseName>\n  It is possible for a SELECT command running at the <CodeLiteral>READ COMMITTED</CodeLiteral> transaction isolation level and using <CodeLiteral>ORDER BY</CodeLiteral> and a locking clause to return rows out of order. This is because <CodeLiteral>ORDER BY</CodeLiteral> is applied first. The command sorts the result, but might then block trying to obtain a lock on one or more of the rows. Once the <CodeLiteral>SELECT</CodeLiteral> unblocks, some of the ordering column values might have been modified, leading to those rows appearing to be out of order (though they are in order in terms of the original column values). This can be worked around at need by placing the <CodeLiteral>FOR UPDATE/SHARE</CodeLiteral> clause in a sub-query, for example\n  <code>SELECT * FROM (SELECT * FROM mytable FOR UPDATE) ss ORDER BY column1;\n</code>\n  Note that this will result in locking all rows of mytable, whereas <CodeLiteral>FOR UPDATE</CodeLiteral> at the top level would lock only the actually returned rows. This can make for a significant performance difference, particularly if the <CodeLiteral>ORDER BY</CodeLiteral> is combined with <CodeLiteral>LIMIT</CodeLiteral> or other restrictions. So this technique is recommended only if concurrent updates of the ordering columns are expected and a strictly sorted result is required.\n  At the <CodeLiteral>REPEATABLE READ</CodeLiteral> or <CodeLiteral>SERIALIZABLE</CodeLiteral> transaction isolation level this would cause a serialization failure (with a <CodeLiteral>SQLSTATE</CodeLiteral> of <CodeLiteral>'40001'</CodeLiteral>), so there is no possibility of receiving rows out of order under these isolation levels. ",
        "detail": "[DESCRIPTION]: <CodeLiteral>FOR UPDATE</CodeLiteral>, <CodeLiteral>FOR NO KEY UPDATE</CodeLiteral>, <CodeLiteral>FOR SHARE</CodeLiteral> and <CodeLiteral>FOR KEY SHARE</CodeLiteral> are locking clauses; they affect how <CodeLiteral>SELECT</CodeLiteral> locks rows as they are obtained from the table.\n The locking clause has the general form\n <code>FOR lock_strength [ OF table_name [, ...] ] [ NOWAIT | SKIP LOCKED ]\n</code>\n where lock_strength can be one of\n <code>UPDATE\nNO KEY UPDATE\nSHARE\nKEY SHARE\n</code>\n For more information on each row-level lock mode, refer to Section 13.3.2.\n To prevent the operation from waiting for other transactions to commit, use either the <CodeLiteral>NOWAIT</CodeLiteral> or <CodeLiteral>SKIP LOCKED</CodeLiteral> option. With <CodeLiteral>NOWAIT</CodeLiteral>, the statement reports an error, rather than waiting, if a selected row cannot be locked immediately. With <CodeLiteral>SKIP LOCKED</CodeLiteral>, any selected rows that cannot be immediately locked are skipped. Skipping locked rows provides an inconsistent view of the data, so this is not suitable for general purpose work, but can be used to avoid lock contention with multiple consumers accessing a queue-like table. Note that <CodeLiteral>NOWAIT</CodeLiteral> and <CodeLiteral>SKIP LOCKED</CodeLiteral> apply only to the row-level lock(s) \u2014 the required <CodeLiteral>ROW SHARE</CodeLiteral> table-level lock is still taken in the ordinary way (see Chapter 13). You can use LOCK with the <CodeLiteral>NOWAIT</CodeLiteral> option first, if you need to acquire the table-level lock without waiting.\n If specific tables are named in a locking clause, then only rows coming from those tables are locked; any other tables used in the SELECT are simply read as usual. A locking clause without a table list affects all tables used in the statement. If a locking clause is applied to a view or sub-query, it affects all tables used in the view or sub-query. However, these clauses do not apply to <CodeLiteral>WITH</CodeLiteral> queries referenced by the primary query. If you want row locking to occur within a <CodeLiteral>WITH</CodeLiteral> query, specify a locking clause within the <CodeLiteral>WITH</CodeLiteral> query.\n Multiple locking clauses can be written if it is necessary to specify different locking behavior for different tables. If the same table is mentioned (or implicitly affected) by more than one locking clause, then it is processed as if it was only specified by the strongest one. Similarly, a table is processed as <CodeLiteral>NOWAIT</CodeLiteral> if that is specified in any of the clauses affecting it. Otherwise, it is processed as <CodeLiteral>SKIP LOCKED</CodeLiteral> if that is specified in any of the clauses affecting it.\n The locking clauses cannot be used in contexts where returned rows cannot be clearly identified with individual table rows; for example they cannot be used with aggregation.\n When a locking clause appears at the top level of a SELECT query, the rows that are locked are exactly those that are returned by the query; in the case of a join query, the rows locked are those that contribute to returned join rows. In addition, rows that satisfied the query conditions as of the query snapshot will be locked, although they will not be returned if they were updated after the snapshot and no longer satisfy the query conditions. If a <CodeLiteral>LIMIT</CodeLiteral> is used, locking stops once enough rows have been returned to satisfy the limit (but note that rows skipped over by <CodeLiteral>OFFSET</CodeLiteral> will get locked). Similarly, if a locking clause is used in a cursor's query, only rows actually fetched or stepped past by the cursor will be locked.\n When a locking clause appears in a sub-SELECT, the rows locked are those returned to the outer query by the sub-query. This might involve fewer rows than inspection of the sub-query alone would suggest, since conditions from the outer query might be used to optimize execution of the sub-query. For example,\n <code>SELECT * FROM (SELECT * FROM mytable FOR UPDATE) ss WHERE col1 = 5;\n</code>\n will lock only rows having <CodeLiteral>col1 = 5</CodeLiteral>, even though that condition is not textually within the sub-query.\n Previous releases failed to preserve a lock which is upgraded by a later savepoint. For example, this code:\n <code>BEGIN;\nSELECT * FROM mytable WHERE key = 1 FOR UPDATE;\nSAVEPOINT s;\nUPDATE mytable SET ... WHERE key = 1;\nROLLBACK TO s;\n</code>\n would fail to preserve the <CodeLiteral>FOR UPDATE</CodeLiteral> lock after the ROLLBACK TO. This has been fixed in release 9.3.\n \n  <ClauseName>Caution</ClauseName>\n  It is possible for a SELECT command running at the <CodeLiteral>READ COMMITTED</CodeLiteral> transaction isolation level and using <CodeLiteral>ORDER BY</CodeLiteral> and a locking clause to return rows out of order. This is because <CodeLiteral>ORDER BY</CodeLiteral> is applied first. The command sorts the result, but might then block trying to obtain a lock on one or more of the rows. Once the <CodeLiteral>SELECT</CodeLiteral> unblocks, some of the ordering column values might have been modified, leading to those rows appearing to be out of order (though they are in order in terms of the original column values). This can be worked around at need by placing the <CodeLiteral>FOR UPDATE/SHARE</CodeLiteral> clause in a sub-query, for example\n  <code>SELECT * FROM (SELECT * FROM mytable FOR UPDATE) ss ORDER BY column1;\n</code>\n  Note that this will result in locking all rows of mytable, whereas <CodeLiteral>FOR UPDATE</CodeLiteral> at the top level would lock only the actually returned rows. This can make for a significant performance difference, particularly if the <CodeLiteral>ORDER BY</CodeLiteral> is combined with <CodeLiteral>LIMIT</CodeLiteral> or other restrictions. So this technique is recommended only if concurrent updates of the ordering columns are expected and a strictly sorted result is required.\n  At the <CodeLiteral>REPEATABLE READ</CodeLiteral> or <CodeLiteral>SERIALIZABLE</CodeLiteral> transaction isolation level this would cause a serialization failure (with a <CodeLiteral>SQLSTATE</CodeLiteral> of <CodeLiteral>'40001'</CodeLiteral>), so there is no possibility of receiving rows out of order under these isolation levels. <sep>[DEMO]: SELECT * FROM employees FOR KEY SHARE OF employees;",
        "example": [
            "SELECT * FROM employees FOR KEY SHARE OF employees;"
        ],
        "link": []
    },
    {
        "type": "keyword",
        "keyword": "FOR UPDATE NOWAIT",
        "tree": " (for_locking_item (for_locking_strength FOR UPDATE) (opt_nowait_or_skip NOWAIT))",
        "description": "<CodeLiteral>FOR UPDATE</CodeLiteral>, <CodeLiteral>FOR NO KEY UPDATE</CodeLiteral>, <CodeLiteral>FOR SHARE</CodeLiteral> and <CodeLiteral>FOR KEY SHARE</CodeLiteral> are locking clauses; they affect how <CodeLiteral>SELECT</CodeLiteral> locks rows as they are obtained from the table.\n The locking clause has the general form\n <code>FOR lock_strength [ OF table_name [, ...] ] [ NOWAIT | SKIP LOCKED ]\n</code>\n where lock_strength can be one of\n <code>UPDATE\nNO KEY UPDATE\nSHARE\nKEY SHARE\n</code>\n For more information on each row-level lock mode, refer to Section 13.3.2.\n To prevent the operation from waiting for other transactions to commit, use either the <CodeLiteral>NOWAIT</CodeLiteral> or <CodeLiteral>SKIP LOCKED</CodeLiteral> option. With <CodeLiteral>NOWAIT</CodeLiteral>, the statement reports an error, rather than waiting, if a selected row cannot be locked immediately. With <CodeLiteral>SKIP LOCKED</CodeLiteral>, any selected rows that cannot be immediately locked are skipped. Skipping locked rows provides an inconsistent view of the data, so this is not suitable for general purpose work, but can be used to avoid lock contention with multiple consumers accessing a queue-like table. Note that <CodeLiteral>NOWAIT</CodeLiteral> and <CodeLiteral>SKIP LOCKED</CodeLiteral> apply only to the row-level lock(s) \u2014 the required <CodeLiteral>ROW SHARE</CodeLiteral> table-level lock is still taken in the ordinary way (see Chapter 13). You can use LOCK with the <CodeLiteral>NOWAIT</CodeLiteral> option first, if you need to acquire the table-level lock without waiting.\n If specific tables are named in a locking clause, then only rows coming from those tables are locked; any other tables used in the SELECT are simply read as usual. A locking clause without a table list affects all tables used in the statement. If a locking clause is applied to a view or sub-query, it affects all tables used in the view or sub-query. However, these clauses do not apply to <CodeLiteral>WITH</CodeLiteral> queries referenced by the primary query. If you want row locking to occur within a <CodeLiteral>WITH</CodeLiteral> query, specify a locking clause within the <CodeLiteral>WITH</CodeLiteral> query.\n Multiple locking clauses can be written if it is necessary to specify different locking behavior for different tables. If the same table is mentioned (or implicitly affected) by more than one locking clause, then it is processed as if it was only specified by the strongest one. Similarly, a table is processed as <CodeLiteral>NOWAIT</CodeLiteral> if that is specified in any of the clauses affecting it. Otherwise, it is processed as <CodeLiteral>SKIP LOCKED</CodeLiteral> if that is specified in any of the clauses affecting it.\n The locking clauses cannot be used in contexts where returned rows cannot be clearly identified with individual table rows; for example they cannot be used with aggregation.\n When a locking clause appears at the top level of a SELECT query, the rows that are locked are exactly those that are returned by the query; in the case of a join query, the rows locked are those that contribute to returned join rows. In addition, rows that satisfied the query conditions as of the query snapshot will be locked, although they will not be returned if they were updated after the snapshot and no longer satisfy the query conditions. If a <CodeLiteral>LIMIT</CodeLiteral> is used, locking stops once enough rows have been returned to satisfy the limit (but note that rows skipped over by <CodeLiteral>OFFSET</CodeLiteral> will get locked). Similarly, if a locking clause is used in a cursor's query, only rows actually fetched or stepped past by the cursor will be locked.\n When a locking clause appears in a sub-SELECT, the rows locked are those returned to the outer query by the sub-query. This might involve fewer rows than inspection of the sub-query alone would suggest, since conditions from the outer query might be used to optimize execution of the sub-query. For example,\n <code>SELECT * FROM (SELECT * FROM mytable FOR UPDATE) ss WHERE col1 = 5;\n</code>\n will lock only rows having <CodeLiteral>col1 = 5</CodeLiteral>, even though that condition is not textually within the sub-query.\n Previous releases failed to preserve a lock which is upgraded by a later savepoint. For example, this code:\n <code>BEGIN;\nSELECT * FROM mytable WHERE key = 1 FOR UPDATE;\nSAVEPOINT s;\nUPDATE mytable SET ... WHERE key = 1;\nROLLBACK TO s;\n</code>\n would fail to preserve the <CodeLiteral>FOR UPDATE</CodeLiteral> lock after the ROLLBACK TO. This has been fixed in release 9.3.\n \n  <ClauseName>Caution</ClauseName>\n  It is possible for a SELECT command running at the <CodeLiteral>READ COMMITTED</CodeLiteral> transaction isolation level and using <CodeLiteral>ORDER BY</CodeLiteral> and a locking clause to return rows out of order. This is because <CodeLiteral>ORDER BY</CodeLiteral> is applied first. The command sorts the result, but might then block trying to obtain a lock on one or more of the rows. Once the <CodeLiteral>SELECT</CodeLiteral> unblocks, some of the ordering column values might have been modified, leading to those rows appearing to be out of order (though they are in order in terms of the original column values). This can be worked around at need by placing the <CodeLiteral>FOR UPDATE/SHARE</CodeLiteral> clause in a sub-query, for example\n  <code>SELECT * FROM (SELECT * FROM mytable FOR UPDATE) ss ORDER BY column1;\n</code>\n  Note that this will result in locking all rows of mytable, whereas <CodeLiteral>FOR UPDATE</CodeLiteral> at the top level would lock only the actually returned rows. This can make for a significant performance difference, particularly if the <CodeLiteral>ORDER BY</CodeLiteral> is combined with <CodeLiteral>LIMIT</CodeLiteral> or other restrictions. So this technique is recommended only if concurrent updates of the ordering columns are expected and a strictly sorted result is required.\n  At the <CodeLiteral>REPEATABLE READ</CodeLiteral> or <CodeLiteral>SERIALIZABLE</CodeLiteral> transaction isolation level this would cause a serialization failure (with a <CodeLiteral>SQLSTATE</CodeLiteral> of <CodeLiteral>'40001'</CodeLiteral>), so there is no possibility of receiving rows out of order under these isolation levels. ",
        "detail": "[DESCRIPTION]: <CodeLiteral>FOR UPDATE</CodeLiteral>, <CodeLiteral>FOR NO KEY UPDATE</CodeLiteral>, <CodeLiteral>FOR SHARE</CodeLiteral> and <CodeLiteral>FOR KEY SHARE</CodeLiteral> are locking clauses; they affect how <CodeLiteral>SELECT</CodeLiteral> locks rows as they are obtained from the table.\n The locking clause has the general form\n <code>FOR lock_strength [ OF table_name [, ...] ] [ NOWAIT | SKIP LOCKED ]\n</code>\n where lock_strength can be one of\n <code>UPDATE\nNO KEY UPDATE\nSHARE\nKEY SHARE\n</code>\n For more information on each row-level lock mode, refer to Section 13.3.2.\n To prevent the operation from waiting for other transactions to commit, use either the <CodeLiteral>NOWAIT</CodeLiteral> or <CodeLiteral>SKIP LOCKED</CodeLiteral> option. With <CodeLiteral>NOWAIT</CodeLiteral>, the statement reports an error, rather than waiting, if a selected row cannot be locked immediately. With <CodeLiteral>SKIP LOCKED</CodeLiteral>, any selected rows that cannot be immediately locked are skipped. Skipping locked rows provides an inconsistent view of the data, so this is not suitable for general purpose work, but can be used to avoid lock contention with multiple consumers accessing a queue-like table. Note that <CodeLiteral>NOWAIT</CodeLiteral> and <CodeLiteral>SKIP LOCKED</CodeLiteral> apply only to the row-level lock(s) \u2014 the required <CodeLiteral>ROW SHARE</CodeLiteral> table-level lock is still taken in the ordinary way (see Chapter 13). You can use LOCK with the <CodeLiteral>NOWAIT</CodeLiteral> option first, if you need to acquire the table-level lock without waiting.\n If specific tables are named in a locking clause, then only rows coming from those tables are locked; any other tables used in the SELECT are simply read as usual. A locking clause without a table list affects all tables used in the statement. If a locking clause is applied to a view or sub-query, it affects all tables used in the view or sub-query. However, these clauses do not apply to <CodeLiteral>WITH</CodeLiteral> queries referenced by the primary query. If you want row locking to occur within a <CodeLiteral>WITH</CodeLiteral> query, specify a locking clause within the <CodeLiteral>WITH</CodeLiteral> query.\n Multiple locking clauses can be written if it is necessary to specify different locking behavior for different tables. If the same table is mentioned (or implicitly affected) by more than one locking clause, then it is processed as if it was only specified by the strongest one. Similarly, a table is processed as <CodeLiteral>NOWAIT</CodeLiteral> if that is specified in any of the clauses affecting it. Otherwise, it is processed as <CodeLiteral>SKIP LOCKED</CodeLiteral> if that is specified in any of the clauses affecting it.\n The locking clauses cannot be used in contexts where returned rows cannot be clearly identified with individual table rows; for example they cannot be used with aggregation.\n When a locking clause appears at the top level of a SELECT query, the rows that are locked are exactly those that are returned by the query; in the case of a join query, the rows locked are those that contribute to returned join rows. In addition, rows that satisfied the query conditions as of the query snapshot will be locked, although they will not be returned if they were updated after the snapshot and no longer satisfy the query conditions. If a <CodeLiteral>LIMIT</CodeLiteral> is used, locking stops once enough rows have been returned to satisfy the limit (but note that rows skipped over by <CodeLiteral>OFFSET</CodeLiteral> will get locked). Similarly, if a locking clause is used in a cursor's query, only rows actually fetched or stepped past by the cursor will be locked.\n When a locking clause appears in a sub-SELECT, the rows locked are those returned to the outer query by the sub-query. This might involve fewer rows than inspection of the sub-query alone would suggest, since conditions from the outer query might be used to optimize execution of the sub-query. For example,\n <code>SELECT * FROM (SELECT * FROM mytable FOR UPDATE) ss WHERE col1 = 5;\n</code>\n will lock only rows having <CodeLiteral>col1 = 5</CodeLiteral>, even though that condition is not textually within the sub-query.\n Previous releases failed to preserve a lock which is upgraded by a later savepoint. For example, this code:\n <code>BEGIN;\nSELECT * FROM mytable WHERE key = 1 FOR UPDATE;\nSAVEPOINT s;\nUPDATE mytable SET ... WHERE key = 1;\nROLLBACK TO s;\n</code>\n would fail to preserve the <CodeLiteral>FOR UPDATE</CodeLiteral> lock after the ROLLBACK TO. This has been fixed in release 9.3.\n \n  <ClauseName>Caution</ClauseName>\n  It is possible for a SELECT command running at the <CodeLiteral>READ COMMITTED</CodeLiteral> transaction isolation level and using <CodeLiteral>ORDER BY</CodeLiteral> and a locking clause to return rows out of order. This is because <CodeLiteral>ORDER BY</CodeLiteral> is applied first. The command sorts the result, but might then block trying to obtain a lock on one or more of the rows. Once the <CodeLiteral>SELECT</CodeLiteral> unblocks, some of the ordering column values might have been modified, leading to those rows appearing to be out of order (though they are in order in terms of the original column values). This can be worked around at need by placing the <CodeLiteral>FOR UPDATE/SHARE</CodeLiteral> clause in a sub-query, for example\n  <code>SELECT * FROM (SELECT * FROM mytable FOR UPDATE) ss ORDER BY column1;\n</code>\n  Note that this will result in locking all rows of mytable, whereas <CodeLiteral>FOR UPDATE</CodeLiteral> at the top level would lock only the actually returned rows. This can make for a significant performance difference, particularly if the <CodeLiteral>ORDER BY</CodeLiteral> is combined with <CodeLiteral>LIMIT</CodeLiteral> or other restrictions. So this technique is recommended only if concurrent updates of the ordering columns are expected and a strictly sorted result is required.\n  At the <CodeLiteral>REPEATABLE READ</CodeLiteral> or <CodeLiteral>SERIALIZABLE</CodeLiteral> transaction isolation level this would cause a serialization failure (with a <CodeLiteral>SQLSTATE</CodeLiteral> of <CodeLiteral>'40001'</CodeLiteral>), so there is no possibility of receiving rows out of order under these isolation levels. <sep>[DEMO]: SELECT * FROM employees WHERE department = 'Sales' FOR UPDATE NOWAIT;",
        "example": [
            "SELECT * FROM employees WHERE department = 'Sales' FOR UPDATE NOWAIT;"
        ],
        "link": []
    },
    {
        "type": "keyword",
        "keyword": "FOR NO KEY UPDATE NOWAIT",
        "tree": " (for_locking_item (for_locking_strength FOR NO KEY UPDATE) (opt_nowait_or_skip NOWAIT))",
        "description": "<CodeLiteral>FOR UPDATE</CodeLiteral>, <CodeLiteral>FOR NO KEY UPDATE</CodeLiteral>, <CodeLiteral>FOR SHARE</CodeLiteral> and <CodeLiteral>FOR KEY SHARE</CodeLiteral> are locking clauses; they affect how <CodeLiteral>SELECT</CodeLiteral> locks rows as they are obtained from the table.\n The locking clause has the general form\n <code>FOR lock_strength [ OF table_name [, ...] ] [ NOWAIT | SKIP LOCKED ]\n</code>\n where lock_strength can be one of\n <code>UPDATE\nNO KEY UPDATE\nSHARE\nKEY SHARE\n</code>\n For more information on each row-level lock mode, refer to Section 13.3.2.\n To prevent the operation from waiting for other transactions to commit, use either the <CodeLiteral>NOWAIT</CodeLiteral> or <CodeLiteral>SKIP LOCKED</CodeLiteral> option. With <CodeLiteral>NOWAIT</CodeLiteral>, the statement reports an error, rather than waiting, if a selected row cannot be locked immediately. With <CodeLiteral>SKIP LOCKED</CodeLiteral>, any selected rows that cannot be immediately locked are skipped. Skipping locked rows provides an inconsistent view of the data, so this is not suitable for general purpose work, but can be used to avoid lock contention with multiple consumers accessing a queue-like table. Note that <CodeLiteral>NOWAIT</CodeLiteral> and <CodeLiteral>SKIP LOCKED</CodeLiteral> apply only to the row-level lock(s) \u2014 the required <CodeLiteral>ROW SHARE</CodeLiteral> table-level lock is still taken in the ordinary way (see Chapter 13). You can use LOCK with the <CodeLiteral>NOWAIT</CodeLiteral> option first, if you need to acquire the table-level lock without waiting.\n If specific tables are named in a locking clause, then only rows coming from those tables are locked; any other tables used in the SELECT are simply read as usual. A locking clause without a table list affects all tables used in the statement. If a locking clause is applied to a view or sub-query, it affects all tables used in the view or sub-query. However, these clauses do not apply to <CodeLiteral>WITH</CodeLiteral> queries referenced by the primary query. If you want row locking to occur within a <CodeLiteral>WITH</CodeLiteral> query, specify a locking clause within the <CodeLiteral>WITH</CodeLiteral> query.\n Multiple locking clauses can be written if it is necessary to specify different locking behavior for different tables. If the same table is mentioned (or implicitly affected) by more than one locking clause, then it is processed as if it was only specified by the strongest one. Similarly, a table is processed as <CodeLiteral>NOWAIT</CodeLiteral> if that is specified in any of the clauses affecting it. Otherwise, it is processed as <CodeLiteral>SKIP LOCKED</CodeLiteral> if that is specified in any of the clauses affecting it.\n The locking clauses cannot be used in contexts where returned rows cannot be clearly identified with individual table rows; for example they cannot be used with aggregation.\n When a locking clause appears at the top level of a SELECT query, the rows that are locked are exactly those that are returned by the query; in the case of a join query, the rows locked are those that contribute to returned join rows. In addition, rows that satisfied the query conditions as of the query snapshot will be locked, although they will not be returned if they were updated after the snapshot and no longer satisfy the query conditions. If a <CodeLiteral>LIMIT</CodeLiteral> is used, locking stops once enough rows have been returned to satisfy the limit (but note that rows skipped over by <CodeLiteral>OFFSET</CodeLiteral> will get locked). Similarly, if a locking clause is used in a cursor's query, only rows actually fetched or stepped past by the cursor will be locked.\n When a locking clause appears in a sub-SELECT, the rows locked are those returned to the outer query by the sub-query. This might involve fewer rows than inspection of the sub-query alone would suggest, since conditions from the outer query might be used to optimize execution of the sub-query. For example,\n <code>SELECT * FROM (SELECT * FROM mytable FOR UPDATE) ss WHERE col1 = 5;\n</code>\n will lock only rows having <CodeLiteral>col1 = 5</CodeLiteral>, even though that condition is not textually within the sub-query.\n Previous releases failed to preserve a lock which is upgraded by a later savepoint. For example, this code:\n <code>BEGIN;\nSELECT * FROM mytable WHERE key = 1 FOR UPDATE;\nSAVEPOINT s;\nUPDATE mytable SET ... WHERE key = 1;\nROLLBACK TO s;\n</code>\n would fail to preserve the <CodeLiteral>FOR UPDATE</CodeLiteral> lock after the ROLLBACK TO. This has been fixed in release 9.3.\n \n  <ClauseName>Caution</ClauseName>\n  It is possible for a SELECT command running at the <CodeLiteral>READ COMMITTED</CodeLiteral> transaction isolation level and using <CodeLiteral>ORDER BY</CodeLiteral> and a locking clause to return rows out of order. This is because <CodeLiteral>ORDER BY</CodeLiteral> is applied first. The command sorts the result, but might then block trying to obtain a lock on one or more of the rows. Once the <CodeLiteral>SELECT</CodeLiteral> unblocks, some of the ordering column values might have been modified, leading to those rows appearing to be out of order (though they are in order in terms of the original column values). This can be worked around at need by placing the <CodeLiteral>FOR UPDATE/SHARE</CodeLiteral> clause in a sub-query, for example\n  <code>SELECT * FROM (SELECT * FROM mytable FOR UPDATE) ss ORDER BY column1;\n</code>\n  Note that this will result in locking all rows of mytable, whereas <CodeLiteral>FOR UPDATE</CodeLiteral> at the top level would lock only the actually returned rows. This can make for a significant performance difference, particularly if the <CodeLiteral>ORDER BY</CodeLiteral> is combined with <CodeLiteral>LIMIT</CodeLiteral> or other restrictions. So this technique is recommended only if concurrent updates of the ordering columns are expected and a strictly sorted result is required.\n  At the <CodeLiteral>REPEATABLE READ</CodeLiteral> or <CodeLiteral>SERIALIZABLE</CodeLiteral> transaction isolation level this would cause a serialization failure (with a <CodeLiteral>SQLSTATE</CodeLiteral> of <CodeLiteral>'40001'</CodeLiteral>), so there is no possibility of receiving rows out of order under these isolation levels. ",
        "detail": "[DESCRIPTION]: <CodeLiteral>FOR UPDATE</CodeLiteral>, <CodeLiteral>FOR NO KEY UPDATE</CodeLiteral>, <CodeLiteral>FOR SHARE</CodeLiteral> and <CodeLiteral>FOR KEY SHARE</CodeLiteral> are locking clauses; they affect how <CodeLiteral>SELECT</CodeLiteral> locks rows as they are obtained from the table.\n The locking clause has the general form\n <code>FOR lock_strength [ OF table_name [, ...] ] [ NOWAIT | SKIP LOCKED ]\n</code>\n where lock_strength can be one of\n <code>UPDATE\nNO KEY UPDATE\nSHARE\nKEY SHARE\n</code>\n For more information on each row-level lock mode, refer to Section 13.3.2.\n To prevent the operation from waiting for other transactions to commit, use either the <CodeLiteral>NOWAIT</CodeLiteral> or <CodeLiteral>SKIP LOCKED</CodeLiteral> option. With <CodeLiteral>NOWAIT</CodeLiteral>, the statement reports an error, rather than waiting, if a selected row cannot be locked immediately. With <CodeLiteral>SKIP LOCKED</CodeLiteral>, any selected rows that cannot be immediately locked are skipped. Skipping locked rows provides an inconsistent view of the data, so this is not suitable for general purpose work, but can be used to avoid lock contention with multiple consumers accessing a queue-like table. Note that <CodeLiteral>NOWAIT</CodeLiteral> and <CodeLiteral>SKIP LOCKED</CodeLiteral> apply only to the row-level lock(s) \u2014 the required <CodeLiteral>ROW SHARE</CodeLiteral> table-level lock is still taken in the ordinary way (see Chapter 13). You can use LOCK with the <CodeLiteral>NOWAIT</CodeLiteral> option first, if you need to acquire the table-level lock without waiting.\n If specific tables are named in a locking clause, then only rows coming from those tables are locked; any other tables used in the SELECT are simply read as usual. A locking clause without a table list affects all tables used in the statement. If a locking clause is applied to a view or sub-query, it affects all tables used in the view or sub-query. However, these clauses do not apply to <CodeLiteral>WITH</CodeLiteral> queries referenced by the primary query. If you want row locking to occur within a <CodeLiteral>WITH</CodeLiteral> query, specify a locking clause within the <CodeLiteral>WITH</CodeLiteral> query.\n Multiple locking clauses can be written if it is necessary to specify different locking behavior for different tables. If the same table is mentioned (or implicitly affected) by more than one locking clause, then it is processed as if it was only specified by the strongest one. Similarly, a table is processed as <CodeLiteral>NOWAIT</CodeLiteral> if that is specified in any of the clauses affecting it. Otherwise, it is processed as <CodeLiteral>SKIP LOCKED</CodeLiteral> if that is specified in any of the clauses affecting it.\n The locking clauses cannot be used in contexts where returned rows cannot be clearly identified with individual table rows; for example they cannot be used with aggregation.\n When a locking clause appears at the top level of a SELECT query, the rows that are locked are exactly those that are returned by the query; in the case of a join query, the rows locked are those that contribute to returned join rows. In addition, rows that satisfied the query conditions as of the query snapshot will be locked, although they will not be returned if they were updated after the snapshot and no longer satisfy the query conditions. If a <CodeLiteral>LIMIT</CodeLiteral> is used, locking stops once enough rows have been returned to satisfy the limit (but note that rows skipped over by <CodeLiteral>OFFSET</CodeLiteral> will get locked). Similarly, if a locking clause is used in a cursor's query, only rows actually fetched or stepped past by the cursor will be locked.\n When a locking clause appears in a sub-SELECT, the rows locked are those returned to the outer query by the sub-query. This might involve fewer rows than inspection of the sub-query alone would suggest, since conditions from the outer query might be used to optimize execution of the sub-query. For example,\n <code>SELECT * FROM (SELECT * FROM mytable FOR UPDATE) ss WHERE col1 = 5;\n</code>\n will lock only rows having <CodeLiteral>col1 = 5</CodeLiteral>, even though that condition is not textually within the sub-query.\n Previous releases failed to preserve a lock which is upgraded by a later savepoint. For example, this code:\n <code>BEGIN;\nSELECT * FROM mytable WHERE key = 1 FOR UPDATE;\nSAVEPOINT s;\nUPDATE mytable SET ... WHERE key = 1;\nROLLBACK TO s;\n</code>\n would fail to preserve the <CodeLiteral>FOR UPDATE</CodeLiteral> lock after the ROLLBACK TO. This has been fixed in release 9.3.\n \n  <ClauseName>Caution</ClauseName>\n  It is possible for a SELECT command running at the <CodeLiteral>READ COMMITTED</CodeLiteral> transaction isolation level and using <CodeLiteral>ORDER BY</CodeLiteral> and a locking clause to return rows out of order. This is because <CodeLiteral>ORDER BY</CodeLiteral> is applied first. The command sorts the result, but might then block trying to obtain a lock on one or more of the rows. Once the <CodeLiteral>SELECT</CodeLiteral> unblocks, some of the ordering column values might have been modified, leading to those rows appearing to be out of order (though they are in order in terms of the original column values). This can be worked around at need by placing the <CodeLiteral>FOR UPDATE/SHARE</CodeLiteral> clause in a sub-query, for example\n  <code>SELECT * FROM (SELECT * FROM mytable FOR UPDATE) ss ORDER BY column1;\n</code>\n  Note that this will result in locking all rows of mytable, whereas <CodeLiteral>FOR UPDATE</CodeLiteral> at the top level would lock only the actually returned rows. This can make for a significant performance difference, particularly if the <CodeLiteral>ORDER BY</CodeLiteral> is combined with <CodeLiteral>LIMIT</CodeLiteral> or other restrictions. So this technique is recommended only if concurrent updates of the ordering columns are expected and a strictly sorted result is required.\n  At the <CodeLiteral>REPEATABLE READ</CodeLiteral> or <CodeLiteral>SERIALIZABLE</CodeLiteral> transaction isolation level this would cause a serialization failure (with a <CodeLiteral>SQLSTATE</CodeLiteral> of <CodeLiteral>'40001'</CodeLiteral>), so there is no possibility of receiving rows out of order under these isolation levels. <sep>[DEMO]: SELECT * FROM employees WHERE department = 'HR' FOR NO KEY UPDATE NOWAIT;",
        "example": [
            "SELECT * FROM employees WHERE department = 'HR' FOR NO KEY UPDATE NOWAIT;"
        ],
        "link": []
    },
    {
        "type": "keyword",
        "keyword": "FOR SHARE NOWAIT",
        "tree": " (for_locking_item (for_locking_strength FOR SHARE) (opt_nowait_or_skip NOWAIT))",
        "description": "<CodeLiteral>FOR UPDATE</CodeLiteral>, <CodeLiteral>FOR NO KEY UPDATE</CodeLiteral>, <CodeLiteral>FOR SHARE</CodeLiteral> and <CodeLiteral>FOR KEY SHARE</CodeLiteral> are locking clauses; they affect how <CodeLiteral>SELECT</CodeLiteral> locks rows as they are obtained from the table.\n The locking clause has the general form\n <code>FOR lock_strength [ OF table_name [, ...] ] [ NOWAIT | SKIP LOCKED ]\n</code>\n where lock_strength can be one of\n <code>UPDATE\nNO KEY UPDATE\nSHARE\nKEY SHARE\n</code>\n For more information on each row-level lock mode, refer to Section 13.3.2.\n To prevent the operation from waiting for other transactions to commit, use either the <CodeLiteral>NOWAIT</CodeLiteral> or <CodeLiteral>SKIP LOCKED</CodeLiteral> option. With <CodeLiteral>NOWAIT</CodeLiteral>, the statement reports an error, rather than waiting, if a selected row cannot be locked immediately. With <CodeLiteral>SKIP LOCKED</CodeLiteral>, any selected rows that cannot be immediately locked are skipped. Skipping locked rows provides an inconsistent view of the data, so this is not suitable for general purpose work, but can be used to avoid lock contention with multiple consumers accessing a queue-like table. Note that <CodeLiteral>NOWAIT</CodeLiteral> and <CodeLiteral>SKIP LOCKED</CodeLiteral> apply only to the row-level lock(s) \u2014 the required <CodeLiteral>ROW SHARE</CodeLiteral> table-level lock is still taken in the ordinary way (see Chapter 13). You can use LOCK with the <CodeLiteral>NOWAIT</CodeLiteral> option first, if you need to acquire the table-level lock without waiting.\n If specific tables are named in a locking clause, then only rows coming from those tables are locked; any other tables used in the SELECT are simply read as usual. A locking clause without a table list affects all tables used in the statement. If a locking clause is applied to a view or sub-query, it affects all tables used in the view or sub-query. However, these clauses do not apply to <CodeLiteral>WITH</CodeLiteral> queries referenced by the primary query. If you want row locking to occur within a <CodeLiteral>WITH</CodeLiteral> query, specify a locking clause within the <CodeLiteral>WITH</CodeLiteral> query.\n Multiple locking clauses can be written if it is necessary to specify different locking behavior for different tables. If the same table is mentioned (or implicitly affected) by more than one locking clause, then it is processed as if it was only specified by the strongest one. Similarly, a table is processed as <CodeLiteral>NOWAIT</CodeLiteral> if that is specified in any of the clauses affecting it. Otherwise, it is processed as <CodeLiteral>SKIP LOCKED</CodeLiteral> if that is specified in any of the clauses affecting it.\n The locking clauses cannot be used in contexts where returned rows cannot be clearly identified with individual table rows; for example they cannot be used with aggregation.\n When a locking clause appears at the top level of a SELECT query, the rows that are locked are exactly those that are returned by the query; in the case of a join query, the rows locked are those that contribute to returned join rows. In addition, rows that satisfied the query conditions as of the query snapshot will be locked, although they will not be returned if they were updated after the snapshot and no longer satisfy the query conditions. If a <CodeLiteral>LIMIT</CodeLiteral> is used, locking stops once enough rows have been returned to satisfy the limit (but note that rows skipped over by <CodeLiteral>OFFSET</CodeLiteral> will get locked). Similarly, if a locking clause is used in a cursor's query, only rows actually fetched or stepped past by the cursor will be locked.\n When a locking clause appears in a sub-SELECT, the rows locked are those returned to the outer query by the sub-query. This might involve fewer rows than inspection of the sub-query alone would suggest, since conditions from the outer query might be used to optimize execution of the sub-query. For example,\n <code>SELECT * FROM (SELECT * FROM mytable FOR UPDATE) ss WHERE col1 = 5;\n</code>\n will lock only rows having <CodeLiteral>col1 = 5</CodeLiteral>, even though that condition is not textually within the sub-query.\n Previous releases failed to preserve a lock which is upgraded by a later savepoint. For example, this code:\n <code>BEGIN;\nSELECT * FROM mytable WHERE key = 1 FOR UPDATE;\nSAVEPOINT s;\nUPDATE mytable SET ... WHERE key = 1;\nROLLBACK TO s;\n</code>\n would fail to preserve the <CodeLiteral>FOR UPDATE</CodeLiteral> lock after the ROLLBACK TO. This has been fixed in release 9.3.\n \n  <ClauseName>Caution</ClauseName>\n  It is possible for a SELECT command running at the <CodeLiteral>READ COMMITTED</CodeLiteral> transaction isolation level and using <CodeLiteral>ORDER BY</CodeLiteral> and a locking clause to return rows out of order. This is because <CodeLiteral>ORDER BY</CodeLiteral> is applied first. The command sorts the result, but might then block trying to obtain a lock on one or more of the rows. Once the <CodeLiteral>SELECT</CodeLiteral> unblocks, some of the ordering column values might have been modified, leading to those rows appearing to be out of order (though they are in order in terms of the original column values). This can be worked around at need by placing the <CodeLiteral>FOR UPDATE/SHARE</CodeLiteral> clause in a sub-query, for example\n  <code>SELECT * FROM (SELECT * FROM mytable FOR UPDATE) ss ORDER BY column1;\n</code>\n  Note that this will result in locking all rows of mytable, whereas <CodeLiteral>FOR UPDATE</CodeLiteral> at the top level would lock only the actually returned rows. This can make for a significant performance difference, particularly if the <CodeLiteral>ORDER BY</CodeLiteral> is combined with <CodeLiteral>LIMIT</CodeLiteral> or other restrictions. So this technique is recommended only if concurrent updates of the ordering columns are expected and a strictly sorted result is required.\n  At the <CodeLiteral>REPEATABLE READ</CodeLiteral> or <CodeLiteral>SERIALIZABLE</CodeLiteral> transaction isolation level this would cause a serialization failure (with a <CodeLiteral>SQLSTATE</CodeLiteral> of <CodeLiteral>'40001'</CodeLiteral>), so there is no possibility of receiving rows out of order under these isolation levels. ",
        "detail": "[DESCRIPTION]: <CodeLiteral>FOR UPDATE</CodeLiteral>, <CodeLiteral>FOR NO KEY UPDATE</CodeLiteral>, <CodeLiteral>FOR SHARE</CodeLiteral> and <CodeLiteral>FOR KEY SHARE</CodeLiteral> are locking clauses; they affect how <CodeLiteral>SELECT</CodeLiteral> locks rows as they are obtained from the table.\n The locking clause has the general form\n <code>FOR lock_strength [ OF table_name [, ...] ] [ NOWAIT | SKIP LOCKED ]\n</code>\n where lock_strength can be one of\n <code>UPDATE\nNO KEY UPDATE\nSHARE\nKEY SHARE\n</code>\n For more information on each row-level lock mode, refer to Section 13.3.2.\n To prevent the operation from waiting for other transactions to commit, use either the <CodeLiteral>NOWAIT</CodeLiteral> or <CodeLiteral>SKIP LOCKED</CodeLiteral> option. With <CodeLiteral>NOWAIT</CodeLiteral>, the statement reports an error, rather than waiting, if a selected row cannot be locked immediately. With <CodeLiteral>SKIP LOCKED</CodeLiteral>, any selected rows that cannot be immediately locked are skipped. Skipping locked rows provides an inconsistent view of the data, so this is not suitable for general purpose work, but can be used to avoid lock contention with multiple consumers accessing a queue-like table. Note that <CodeLiteral>NOWAIT</CodeLiteral> and <CodeLiteral>SKIP LOCKED</CodeLiteral> apply only to the row-level lock(s) \u2014 the required <CodeLiteral>ROW SHARE</CodeLiteral> table-level lock is still taken in the ordinary way (see Chapter 13). You can use LOCK with the <CodeLiteral>NOWAIT</CodeLiteral> option first, if you need to acquire the table-level lock without waiting.\n If specific tables are named in a locking clause, then only rows coming from those tables are locked; any other tables used in the SELECT are simply read as usual. A locking clause without a table list affects all tables used in the statement. If a locking clause is applied to a view or sub-query, it affects all tables used in the view or sub-query. However, these clauses do not apply to <CodeLiteral>WITH</CodeLiteral> queries referenced by the primary query. If you want row locking to occur within a <CodeLiteral>WITH</CodeLiteral> query, specify a locking clause within the <CodeLiteral>WITH</CodeLiteral> query.\n Multiple locking clauses can be written if it is necessary to specify different locking behavior for different tables. If the same table is mentioned (or implicitly affected) by more than one locking clause, then it is processed as if it was only specified by the strongest one. Similarly, a table is processed as <CodeLiteral>NOWAIT</CodeLiteral> if that is specified in any of the clauses affecting it. Otherwise, it is processed as <CodeLiteral>SKIP LOCKED</CodeLiteral> if that is specified in any of the clauses affecting it.\n The locking clauses cannot be used in contexts where returned rows cannot be clearly identified with individual table rows; for example they cannot be used with aggregation.\n When a locking clause appears at the top level of a SELECT query, the rows that are locked are exactly those that are returned by the query; in the case of a join query, the rows locked are those that contribute to returned join rows. In addition, rows that satisfied the query conditions as of the query snapshot will be locked, although they will not be returned if they were updated after the snapshot and no longer satisfy the query conditions. If a <CodeLiteral>LIMIT</CodeLiteral> is used, locking stops once enough rows have been returned to satisfy the limit (but note that rows skipped over by <CodeLiteral>OFFSET</CodeLiteral> will get locked). Similarly, if a locking clause is used in a cursor's query, only rows actually fetched or stepped past by the cursor will be locked.\n When a locking clause appears in a sub-SELECT, the rows locked are those returned to the outer query by the sub-query. This might involve fewer rows than inspection of the sub-query alone would suggest, since conditions from the outer query might be used to optimize execution of the sub-query. For example,\n <code>SELECT * FROM (SELECT * FROM mytable FOR UPDATE) ss WHERE col1 = 5;\n</code>\n will lock only rows having <CodeLiteral>col1 = 5</CodeLiteral>, even though that condition is not textually within the sub-query.\n Previous releases failed to preserve a lock which is upgraded by a later savepoint. For example, this code:\n <code>BEGIN;\nSELECT * FROM mytable WHERE key = 1 FOR UPDATE;\nSAVEPOINT s;\nUPDATE mytable SET ... WHERE key = 1;\nROLLBACK TO s;\n</code>\n would fail to preserve the <CodeLiteral>FOR UPDATE</CodeLiteral> lock after the ROLLBACK TO. This has been fixed in release 9.3.\n \n  <ClauseName>Caution</ClauseName>\n  It is possible for a SELECT command running at the <CodeLiteral>READ COMMITTED</CodeLiteral> transaction isolation level and using <CodeLiteral>ORDER BY</CodeLiteral> and a locking clause to return rows out of order. This is because <CodeLiteral>ORDER BY</CodeLiteral> is applied first. The command sorts the result, but might then block trying to obtain a lock on one or more of the rows. Once the <CodeLiteral>SELECT</CodeLiteral> unblocks, some of the ordering column values might have been modified, leading to those rows appearing to be out of order (though they are in order in terms of the original column values). This can be worked around at need by placing the <CodeLiteral>FOR UPDATE/SHARE</CodeLiteral> clause in a sub-query, for example\n  <code>SELECT * FROM (SELECT * FROM mytable FOR UPDATE) ss ORDER BY column1;\n</code>\n  Note that this will result in locking all rows of mytable, whereas <CodeLiteral>FOR UPDATE</CodeLiteral> at the top level would lock only the actually returned rows. This can make for a significant performance difference, particularly if the <CodeLiteral>ORDER BY</CodeLiteral> is combined with <CodeLiteral>LIMIT</CodeLiteral> or other restrictions. So this technique is recommended only if concurrent updates of the ordering columns are expected and a strictly sorted result is required.\n  At the <CodeLiteral>REPEATABLE READ</CodeLiteral> or <CodeLiteral>SERIALIZABLE</CodeLiteral> transaction isolation level this would cause a serialization failure (with a <CodeLiteral>SQLSTATE</CodeLiteral> of <CodeLiteral>'40001'</CodeLiteral>), so there is no possibility of receiving rows out of order under these isolation levels. <sep>[DEMO]: SELECT * FROM employees FOR SHARE NOWAIT;",
        "example": [
            "SELECT * FROM employees FOR SHARE NOWAIT;"
        ],
        "link": []
    },
    {
        "type": "keyword",
        "keyword": "FOR KEY SHARE NOWAIT",
        "tree": " (for_locking_item (for_locking_strength FOR KEY SHARE) (opt_nowait_or_skip NOWAIT))",
        "description": "<CodeLiteral>FOR UPDATE</CodeLiteral>, <CodeLiteral>FOR NO KEY UPDATE</CodeLiteral>, <CodeLiteral>FOR SHARE</CodeLiteral> and <CodeLiteral>FOR KEY SHARE</CodeLiteral> are locking clauses; they affect how <CodeLiteral>SELECT</CodeLiteral> locks rows as they are obtained from the table.\n The locking clause has the general form\n <code>FOR lock_strength [ OF table_name [, ...] ] [ NOWAIT | SKIP LOCKED ]\n</code>\n where lock_strength can be one of\n <code>UPDATE\nNO KEY UPDATE\nSHARE\nKEY SHARE\n</code>\n For more information on each row-level lock mode, refer to Section 13.3.2.\n To prevent the operation from waiting for other transactions to commit, use either the <CodeLiteral>NOWAIT</CodeLiteral> or <CodeLiteral>SKIP LOCKED</CodeLiteral> option. With <CodeLiteral>NOWAIT</CodeLiteral>, the statement reports an error, rather than waiting, if a selected row cannot be locked immediately. With <CodeLiteral>SKIP LOCKED</CodeLiteral>, any selected rows that cannot be immediately locked are skipped. Skipping locked rows provides an inconsistent view of the data, so this is not suitable for general purpose work, but can be used to avoid lock contention with multiple consumers accessing a queue-like table. Note that <CodeLiteral>NOWAIT</CodeLiteral> and <CodeLiteral>SKIP LOCKED</CodeLiteral> apply only to the row-level lock(s) \u2014 the required <CodeLiteral>ROW SHARE</CodeLiteral> table-level lock is still taken in the ordinary way (see Chapter 13). You can use LOCK with the <CodeLiteral>NOWAIT</CodeLiteral> option first, if you need to acquire the table-level lock without waiting.\n If specific tables are named in a locking clause, then only rows coming from those tables are locked; any other tables used in the SELECT are simply read as usual. A locking clause without a table list affects all tables used in the statement. If a locking clause is applied to a view or sub-query, it affects all tables used in the view or sub-query. However, these clauses do not apply to <CodeLiteral>WITH</CodeLiteral> queries referenced by the primary query. If you want row locking to occur within a <CodeLiteral>WITH</CodeLiteral> query, specify a locking clause within the <CodeLiteral>WITH</CodeLiteral> query.\n Multiple locking clauses can be written if it is necessary to specify different locking behavior for different tables. If the same table is mentioned (or implicitly affected) by more than one locking clause, then it is processed as if it was only specified by the strongest one. Similarly, a table is processed as <CodeLiteral>NOWAIT</CodeLiteral> if that is specified in any of the clauses affecting it. Otherwise, it is processed as <CodeLiteral>SKIP LOCKED</CodeLiteral> if that is specified in any of the clauses affecting it.\n The locking clauses cannot be used in contexts where returned rows cannot be clearly identified with individual table rows; for example they cannot be used with aggregation.\n When a locking clause appears at the top level of a SELECT query, the rows that are locked are exactly those that are returned by the query; in the case of a join query, the rows locked are those that contribute to returned join rows. In addition, rows that satisfied the query conditions as of the query snapshot will be locked, although they will not be returned if they were updated after the snapshot and no longer satisfy the query conditions. If a <CodeLiteral>LIMIT</CodeLiteral> is used, locking stops once enough rows have been returned to satisfy the limit (but note that rows skipped over by <CodeLiteral>OFFSET</CodeLiteral> will get locked). Similarly, if a locking clause is used in a cursor's query, only rows actually fetched or stepped past by the cursor will be locked.\n When a locking clause appears in a sub-SELECT, the rows locked are those returned to the outer query by the sub-query. This might involve fewer rows than inspection of the sub-query alone would suggest, since conditions from the outer query might be used to optimize execution of the sub-query. For example,\n <code>SELECT * FROM (SELECT * FROM mytable FOR UPDATE) ss WHERE col1 = 5;\n</code>\n will lock only rows having <CodeLiteral>col1 = 5</CodeLiteral>, even though that condition is not textually within the sub-query.\n Previous releases failed to preserve a lock which is upgraded by a later savepoint. For example, this code:\n <code>BEGIN;\nSELECT * FROM mytable WHERE key = 1 FOR UPDATE;\nSAVEPOINT s;\nUPDATE mytable SET ... WHERE key = 1;\nROLLBACK TO s;\n</code>\n would fail to preserve the <CodeLiteral>FOR UPDATE</CodeLiteral> lock after the ROLLBACK TO. This has been fixed in release 9.3.\n \n  <ClauseName>Caution</ClauseName>\n  It is possible for a SELECT command running at the <CodeLiteral>READ COMMITTED</CodeLiteral> transaction isolation level and using <CodeLiteral>ORDER BY</CodeLiteral> and a locking clause to return rows out of order. This is because <CodeLiteral>ORDER BY</CodeLiteral> is applied first. The command sorts the result, but might then block trying to obtain a lock on one or more of the rows. Once the <CodeLiteral>SELECT</CodeLiteral> unblocks, some of the ordering column values might have been modified, leading to those rows appearing to be out of order (though they are in order in terms of the original column values). This can be worked around at need by placing the <CodeLiteral>FOR UPDATE/SHARE</CodeLiteral> clause in a sub-query, for example\n  <code>SELECT * FROM (SELECT * FROM mytable FOR UPDATE) ss ORDER BY column1;\n</code>\n  Note that this will result in locking all rows of mytable, whereas <CodeLiteral>FOR UPDATE</CodeLiteral> at the top level would lock only the actually returned rows. This can make for a significant performance difference, particularly if the <CodeLiteral>ORDER BY</CodeLiteral> is combined with <CodeLiteral>LIMIT</CodeLiteral> or other restrictions. So this technique is recommended only if concurrent updates of the ordering columns are expected and a strictly sorted result is required.\n  At the <CodeLiteral>REPEATABLE READ</CodeLiteral> or <CodeLiteral>SERIALIZABLE</CodeLiteral> transaction isolation level this would cause a serialization failure (with a <CodeLiteral>SQLSTATE</CodeLiteral> of <CodeLiteral>'40001'</CodeLiteral>), so there is no possibility of receiving rows out of order under these isolation levels. ",
        "detail": "[DESCRIPTION]: <CodeLiteral>FOR UPDATE</CodeLiteral>, <CodeLiteral>FOR NO KEY UPDATE</CodeLiteral>, <CodeLiteral>FOR SHARE</CodeLiteral> and <CodeLiteral>FOR KEY SHARE</CodeLiteral> are locking clauses; they affect how <CodeLiteral>SELECT</CodeLiteral> locks rows as they are obtained from the table.\n The locking clause has the general form\n <code>FOR lock_strength [ OF table_name [, ...] ] [ NOWAIT | SKIP LOCKED ]\n</code>\n where lock_strength can be one of\n <code>UPDATE\nNO KEY UPDATE\nSHARE\nKEY SHARE\n</code>\n For more information on each row-level lock mode, refer to Section 13.3.2.\n To prevent the operation from waiting for other transactions to commit, use either the <CodeLiteral>NOWAIT</CodeLiteral> or <CodeLiteral>SKIP LOCKED</CodeLiteral> option. With <CodeLiteral>NOWAIT</CodeLiteral>, the statement reports an error, rather than waiting, if a selected row cannot be locked immediately. With <CodeLiteral>SKIP LOCKED</CodeLiteral>, any selected rows that cannot be immediately locked are skipped. Skipping locked rows provides an inconsistent view of the data, so this is not suitable for general purpose work, but can be used to avoid lock contention with multiple consumers accessing a queue-like table. Note that <CodeLiteral>NOWAIT</CodeLiteral> and <CodeLiteral>SKIP LOCKED</CodeLiteral> apply only to the row-level lock(s) \u2014 the required <CodeLiteral>ROW SHARE</CodeLiteral> table-level lock is still taken in the ordinary way (see Chapter 13). You can use LOCK with the <CodeLiteral>NOWAIT</CodeLiteral> option first, if you need to acquire the table-level lock without waiting.\n If specific tables are named in a locking clause, then only rows coming from those tables are locked; any other tables used in the SELECT are simply read as usual. A locking clause without a table list affects all tables used in the statement. If a locking clause is applied to a view or sub-query, it affects all tables used in the view or sub-query. However, these clauses do not apply to <CodeLiteral>WITH</CodeLiteral> queries referenced by the primary query. If you want row locking to occur within a <CodeLiteral>WITH</CodeLiteral> query, specify a locking clause within the <CodeLiteral>WITH</CodeLiteral> query.\n Multiple locking clauses can be written if it is necessary to specify different locking behavior for different tables. If the same table is mentioned (or implicitly affected) by more than one locking clause, then it is processed as if it was only specified by the strongest one. Similarly, a table is processed as <CodeLiteral>NOWAIT</CodeLiteral> if that is specified in any of the clauses affecting it. Otherwise, it is processed as <CodeLiteral>SKIP LOCKED</CodeLiteral> if that is specified in any of the clauses affecting it.\n The locking clauses cannot be used in contexts where returned rows cannot be clearly identified with individual table rows; for example they cannot be used with aggregation.\n When a locking clause appears at the top level of a SELECT query, the rows that are locked are exactly those that are returned by the query; in the case of a join query, the rows locked are those that contribute to returned join rows. In addition, rows that satisfied the query conditions as of the query snapshot will be locked, although they will not be returned if they were updated after the snapshot and no longer satisfy the query conditions. If a <CodeLiteral>LIMIT</CodeLiteral> is used, locking stops once enough rows have been returned to satisfy the limit (but note that rows skipped over by <CodeLiteral>OFFSET</CodeLiteral> will get locked). Similarly, if a locking clause is used in a cursor's query, only rows actually fetched or stepped past by the cursor will be locked.\n When a locking clause appears in a sub-SELECT, the rows locked are those returned to the outer query by the sub-query. This might involve fewer rows than inspection of the sub-query alone would suggest, since conditions from the outer query might be used to optimize execution of the sub-query. For example,\n <code>SELECT * FROM (SELECT * FROM mytable FOR UPDATE) ss WHERE col1 = 5;\n</code>\n will lock only rows having <CodeLiteral>col1 = 5</CodeLiteral>, even though that condition is not textually within the sub-query.\n Previous releases failed to preserve a lock which is upgraded by a later savepoint. For example, this code:\n <code>BEGIN;\nSELECT * FROM mytable WHERE key = 1 FOR UPDATE;\nSAVEPOINT s;\nUPDATE mytable SET ... WHERE key = 1;\nROLLBACK TO s;\n</code>\n would fail to preserve the <CodeLiteral>FOR UPDATE</CodeLiteral> lock after the ROLLBACK TO. This has been fixed in release 9.3.\n \n  <ClauseName>Caution</ClauseName>\n  It is possible for a SELECT command running at the <CodeLiteral>READ COMMITTED</CodeLiteral> transaction isolation level and using <CodeLiteral>ORDER BY</CodeLiteral> and a locking clause to return rows out of order. This is because <CodeLiteral>ORDER BY</CodeLiteral> is applied first. The command sorts the result, but might then block trying to obtain a lock on one or more of the rows. Once the <CodeLiteral>SELECT</CodeLiteral> unblocks, some of the ordering column values might have been modified, leading to those rows appearing to be out of order (though they are in order in terms of the original column values). This can be worked around at need by placing the <CodeLiteral>FOR UPDATE/SHARE</CodeLiteral> clause in a sub-query, for example\n  <code>SELECT * FROM (SELECT * FROM mytable FOR UPDATE) ss ORDER BY column1;\n</code>\n  Note that this will result in locking all rows of mytable, whereas <CodeLiteral>FOR UPDATE</CodeLiteral> at the top level would lock only the actually returned rows. This can make for a significant performance difference, particularly if the <CodeLiteral>ORDER BY</CodeLiteral> is combined with <CodeLiteral>LIMIT</CodeLiteral> or other restrictions. So this technique is recommended only if concurrent updates of the ordering columns are expected and a strictly sorted result is required.\n  At the <CodeLiteral>REPEATABLE READ</CodeLiteral> or <CodeLiteral>SERIALIZABLE</CodeLiteral> transaction isolation level this would cause a serialization failure (with a <CodeLiteral>SQLSTATE</CodeLiteral> of <CodeLiteral>'40001'</CodeLiteral>), so there is no possibility of receiving rows out of order under these isolation levels. <sep>[DEMO]: SELECT * FROM employees FOR KEY SHARE NOWAIT;",
        "example": [
            "SELECT * FROM employees FOR KEY SHARE NOWAIT;"
        ],
        "link": []
    },
    {
        "type": "keyword",
        "keyword": "FOR UPDATE SKIP LOCKED",
        "tree": " (for_locking_item (for_locking_strength FOR UPDATE) (opt_nowait_or_skip SKIP LOCKED))",
        "description": "<CodeLiteral>FOR UPDATE</CodeLiteral>, <CodeLiteral>FOR NO KEY UPDATE</CodeLiteral>, <CodeLiteral>FOR SHARE</CodeLiteral> and <CodeLiteral>FOR KEY SHARE</CodeLiteral> are locking clauses; they affect how <CodeLiteral>SELECT</CodeLiteral> locks rows as they are obtained from the table.\n The locking clause has the general form\n <code>FOR lock_strength [ OF table_name [, ...] ] [ NOWAIT | SKIP LOCKED ]\n</code>\n where lock_strength can be one of\n <code>UPDATE\nNO KEY UPDATE\nSHARE\nKEY SHARE\n</code>\n For more information on each row-level lock mode, refer to Section 13.3.2.\n To prevent the operation from waiting for other transactions to commit, use either the <CodeLiteral>NOWAIT</CodeLiteral> or <CodeLiteral>SKIP LOCKED</CodeLiteral> option. With <CodeLiteral>NOWAIT</CodeLiteral>, the statement reports an error, rather than waiting, if a selected row cannot be locked immediately. With <CodeLiteral>SKIP LOCKED</CodeLiteral>, any selected rows that cannot be immediately locked are skipped. Skipping locked rows provides an inconsistent view of the data, so this is not suitable for general purpose work, but can be used to avoid lock contention with multiple consumers accessing a queue-like table. Note that <CodeLiteral>NOWAIT</CodeLiteral> and <CodeLiteral>SKIP LOCKED</CodeLiteral> apply only to the row-level lock(s) \u2014 the required <CodeLiteral>ROW SHARE</CodeLiteral> table-level lock is still taken in the ordinary way (see Chapter 13). You can use LOCK with the <CodeLiteral>NOWAIT</CodeLiteral> option first, if you need to acquire the table-level lock without waiting.\n If specific tables are named in a locking clause, then only rows coming from those tables are locked; any other tables used in the SELECT are simply read as usual. A locking clause without a table list affects all tables used in the statement. If a locking clause is applied to a view or sub-query, it affects all tables used in the view or sub-query. However, these clauses do not apply to <CodeLiteral>WITH</CodeLiteral> queries referenced by the primary query. If you want row locking to occur within a <CodeLiteral>WITH</CodeLiteral> query, specify a locking clause within the <CodeLiteral>WITH</CodeLiteral> query.\n Multiple locking clauses can be written if it is necessary to specify different locking behavior for different tables. If the same table is mentioned (or implicitly affected) by more than one locking clause, then it is processed as if it was only specified by the strongest one. Similarly, a table is processed as <CodeLiteral>NOWAIT</CodeLiteral> if that is specified in any of the clauses affecting it. Otherwise, it is processed as <CodeLiteral>SKIP LOCKED</CodeLiteral> if that is specified in any of the clauses affecting it.\n The locking clauses cannot be used in contexts where returned rows cannot be clearly identified with individual table rows; for example they cannot be used with aggregation.\n When a locking clause appears at the top level of a SELECT query, the rows that are locked are exactly those that are returned by the query; in the case of a join query, the rows locked are those that contribute to returned join rows. In addition, rows that satisfied the query conditions as of the query snapshot will be locked, although they will not be returned if they were updated after the snapshot and no longer satisfy the query conditions. If a <CodeLiteral>LIMIT</CodeLiteral> is used, locking stops once enough rows have been returned to satisfy the limit (but note that rows skipped over by <CodeLiteral>OFFSET</CodeLiteral> will get locked). Similarly, if a locking clause is used in a cursor's query, only rows actually fetched or stepped past by the cursor will be locked.\n When a locking clause appears in a sub-SELECT, the rows locked are those returned to the outer query by the sub-query. This might involve fewer rows than inspection of the sub-query alone would suggest, since conditions from the outer query might be used to optimize execution of the sub-query. For example,\n <code>SELECT * FROM (SELECT * FROM mytable FOR UPDATE) ss WHERE col1 = 5;\n</code>\n will lock only rows having <CodeLiteral>col1 = 5</CodeLiteral>, even though that condition is not textually within the sub-query.\n Previous releases failed to preserve a lock which is upgraded by a later savepoint. For example, this code:\n <code>BEGIN;\nSELECT * FROM mytable WHERE key = 1 FOR UPDATE;\nSAVEPOINT s;\nUPDATE mytable SET ... WHERE key = 1;\nROLLBACK TO s;\n</code>\n would fail to preserve the <CodeLiteral>FOR UPDATE</CodeLiteral> lock after the ROLLBACK TO. This has been fixed in release 9.3.\n \n  <ClauseName>Caution</ClauseName>\n  It is possible for a SELECT command running at the <CodeLiteral>READ COMMITTED</CodeLiteral> transaction isolation level and using <CodeLiteral>ORDER BY</CodeLiteral> and a locking clause to return rows out of order. This is because <CodeLiteral>ORDER BY</CodeLiteral> is applied first. The command sorts the result, but might then block trying to obtain a lock on one or more of the rows. Once the <CodeLiteral>SELECT</CodeLiteral> unblocks, some of the ordering column values might have been modified, leading to those rows appearing to be out of order (though they are in order in terms of the original column values). This can be worked around at need by placing the <CodeLiteral>FOR UPDATE/SHARE</CodeLiteral> clause in a sub-query, for example\n  <code>SELECT * FROM (SELECT * FROM mytable FOR UPDATE) ss ORDER BY column1;\n</code>\n  Note that this will result in locking all rows of mytable, whereas <CodeLiteral>FOR UPDATE</CodeLiteral> at the top level would lock only the actually returned rows. This can make for a significant performance difference, particularly if the <CodeLiteral>ORDER BY</CodeLiteral> is combined with <CodeLiteral>LIMIT</CodeLiteral> or other restrictions. So this technique is recommended only if concurrent updates of the ordering columns are expected and a strictly sorted result is required.\n  At the <CodeLiteral>REPEATABLE READ</CodeLiteral> or <CodeLiteral>SERIALIZABLE</CodeLiteral> transaction isolation level this would cause a serialization failure (with a <CodeLiteral>SQLSTATE</CodeLiteral> of <CodeLiteral>'40001'</CodeLiteral>), so there is no possibility of receiving rows out of order under these isolation levels. ",
        "detail": "[DESCRIPTION]: <CodeLiteral>FOR UPDATE</CodeLiteral>, <CodeLiteral>FOR NO KEY UPDATE</CodeLiteral>, <CodeLiteral>FOR SHARE</CodeLiteral> and <CodeLiteral>FOR KEY SHARE</CodeLiteral> are locking clauses; they affect how <CodeLiteral>SELECT</CodeLiteral> locks rows as they are obtained from the table.\n The locking clause has the general form\n <code>FOR lock_strength [ OF table_name [, ...] ] [ NOWAIT | SKIP LOCKED ]\n</code>\n where lock_strength can be one of\n <code>UPDATE\nNO KEY UPDATE\nSHARE\nKEY SHARE\n</code>\n For more information on each row-level lock mode, refer to Section 13.3.2.\n To prevent the operation from waiting for other transactions to commit, use either the <CodeLiteral>NOWAIT</CodeLiteral> or <CodeLiteral>SKIP LOCKED</CodeLiteral> option. With <CodeLiteral>NOWAIT</CodeLiteral>, the statement reports an error, rather than waiting, if a selected row cannot be locked immediately. With <CodeLiteral>SKIP LOCKED</CodeLiteral>, any selected rows that cannot be immediately locked are skipped. Skipping locked rows provides an inconsistent view of the data, so this is not suitable for general purpose work, but can be used to avoid lock contention with multiple consumers accessing a queue-like table. Note that <CodeLiteral>NOWAIT</CodeLiteral> and <CodeLiteral>SKIP LOCKED</CodeLiteral> apply only to the row-level lock(s) \u2014 the required <CodeLiteral>ROW SHARE</CodeLiteral> table-level lock is still taken in the ordinary way (see Chapter 13). You can use LOCK with the <CodeLiteral>NOWAIT</CodeLiteral> option first, if you need to acquire the table-level lock without waiting.\n If specific tables are named in a locking clause, then only rows coming from those tables are locked; any other tables used in the SELECT are simply read as usual. A locking clause without a table list affects all tables used in the statement. If a locking clause is applied to a view or sub-query, it affects all tables used in the view or sub-query. However, these clauses do not apply to <CodeLiteral>WITH</CodeLiteral> queries referenced by the primary query. If you want row locking to occur within a <CodeLiteral>WITH</CodeLiteral> query, specify a locking clause within the <CodeLiteral>WITH</CodeLiteral> query.\n Multiple locking clauses can be written if it is necessary to specify different locking behavior for different tables. If the same table is mentioned (or implicitly affected) by more than one locking clause, then it is processed as if it was only specified by the strongest one. Similarly, a table is processed as <CodeLiteral>NOWAIT</CodeLiteral> if that is specified in any of the clauses affecting it. Otherwise, it is processed as <CodeLiteral>SKIP LOCKED</CodeLiteral> if that is specified in any of the clauses affecting it.\n The locking clauses cannot be used in contexts where returned rows cannot be clearly identified with individual table rows; for example they cannot be used with aggregation.\n When a locking clause appears at the top level of a SELECT query, the rows that are locked are exactly those that are returned by the query; in the case of a join query, the rows locked are those that contribute to returned join rows. In addition, rows that satisfied the query conditions as of the query snapshot will be locked, although they will not be returned if they were updated after the snapshot and no longer satisfy the query conditions. If a <CodeLiteral>LIMIT</CodeLiteral> is used, locking stops once enough rows have been returned to satisfy the limit (but note that rows skipped over by <CodeLiteral>OFFSET</CodeLiteral> will get locked). Similarly, if a locking clause is used in a cursor's query, only rows actually fetched or stepped past by the cursor will be locked.\n When a locking clause appears in a sub-SELECT, the rows locked are those returned to the outer query by the sub-query. This might involve fewer rows than inspection of the sub-query alone would suggest, since conditions from the outer query might be used to optimize execution of the sub-query. For example,\n <code>SELECT * FROM (SELECT * FROM mytable FOR UPDATE) ss WHERE col1 = 5;\n</code>\n will lock only rows having <CodeLiteral>col1 = 5</CodeLiteral>, even though that condition is not textually within the sub-query.\n Previous releases failed to preserve a lock which is upgraded by a later savepoint. For example, this code:\n <code>BEGIN;\nSELECT * FROM mytable WHERE key = 1 FOR UPDATE;\nSAVEPOINT s;\nUPDATE mytable SET ... WHERE key = 1;\nROLLBACK TO s;\n</code>\n would fail to preserve the <CodeLiteral>FOR UPDATE</CodeLiteral> lock after the ROLLBACK TO. This has been fixed in release 9.3.\n \n  <ClauseName>Caution</ClauseName>\n  It is possible for a SELECT command running at the <CodeLiteral>READ COMMITTED</CodeLiteral> transaction isolation level and using <CodeLiteral>ORDER BY</CodeLiteral> and a locking clause to return rows out of order. This is because <CodeLiteral>ORDER BY</CodeLiteral> is applied first. The command sorts the result, but might then block trying to obtain a lock on one or more of the rows. Once the <CodeLiteral>SELECT</CodeLiteral> unblocks, some of the ordering column values might have been modified, leading to those rows appearing to be out of order (though they are in order in terms of the original column values). This can be worked around at need by placing the <CodeLiteral>FOR UPDATE/SHARE</CodeLiteral> clause in a sub-query, for example\n  <code>SELECT * FROM (SELECT * FROM mytable FOR UPDATE) ss ORDER BY column1;\n</code>\n  Note that this will result in locking all rows of mytable, whereas <CodeLiteral>FOR UPDATE</CodeLiteral> at the top level would lock only the actually returned rows. This can make for a significant performance difference, particularly if the <CodeLiteral>ORDER BY</CodeLiteral> is combined with <CodeLiteral>LIMIT</CodeLiteral> or other restrictions. So this technique is recommended only if concurrent updates of the ordering columns are expected and a strictly sorted result is required.\n  At the <CodeLiteral>REPEATABLE READ</CodeLiteral> or <CodeLiteral>SERIALIZABLE</CodeLiteral> transaction isolation level this would cause a serialization failure (with a <CodeLiteral>SQLSTATE</CodeLiteral> of <CodeLiteral>'40001'</CodeLiteral>), so there is no possibility of receiving rows out of order under these isolation levels. <sep>[DEMO]: SELECT * FROM orders WHERE status = 'pending' FOR UPDATE SKIP LOCKED;",
        "example": [
            "SELECT * FROM orders WHERE status = 'pending' FOR UPDATE SKIP LOCKED;"
        ],
        "link": []
    },
    {
        "type": "keyword",
        "keyword": "FOR NO KEY UPDATE SKIP LOCKED",
        "tree": " (for_locking_item (for_locking_strength FOR NO KEY UPDATE) (opt_nowait_or_skip SKIP LOCKED))",
        "description": "<CodeLiteral>FOR UPDATE</CodeLiteral>, <CodeLiteral>FOR NO KEY UPDATE</CodeLiteral>, <CodeLiteral>FOR SHARE</CodeLiteral> and <CodeLiteral>FOR KEY SHARE</CodeLiteral> are locking clauses; they affect how <CodeLiteral>SELECT</CodeLiteral> locks rows as they are obtained from the table.\n The locking clause has the general form\n <code>FOR lock_strength [ OF table_name [, ...] ] [ NOWAIT | SKIP LOCKED ]\n</code>\n where lock_strength can be one of\n <code>UPDATE\nNO KEY UPDATE\nSHARE\nKEY SHARE\n</code>\n For more information on each row-level lock mode, refer to Section 13.3.2.\n To prevent the operation from waiting for other transactions to commit, use either the <CodeLiteral>NOWAIT</CodeLiteral> or <CodeLiteral>SKIP LOCKED</CodeLiteral> option. With <CodeLiteral>NOWAIT</CodeLiteral>, the statement reports an error, rather than waiting, if a selected row cannot be locked immediately. With <CodeLiteral>SKIP LOCKED</CodeLiteral>, any selected rows that cannot be immediately locked are skipped. Skipping locked rows provides an inconsistent view of the data, so this is not suitable for general purpose work, but can be used to avoid lock contention with multiple consumers accessing a queue-like table. Note that <CodeLiteral>NOWAIT</CodeLiteral> and <CodeLiteral>SKIP LOCKED</CodeLiteral> apply only to the row-level lock(s) \u2014 the required <CodeLiteral>ROW SHARE</CodeLiteral> table-level lock is still taken in the ordinary way (see Chapter 13). You can use LOCK with the <CodeLiteral>NOWAIT</CodeLiteral> option first, if you need to acquire the table-level lock without waiting.\n If specific tables are named in a locking clause, then only rows coming from those tables are locked; any other tables used in the SELECT are simply read as usual. A locking clause without a table list affects all tables used in the statement. If a locking clause is applied to a view or sub-query, it affects all tables used in the view or sub-query. However, these clauses do not apply to <CodeLiteral>WITH</CodeLiteral> queries referenced by the primary query. If you want row locking to occur within a <CodeLiteral>WITH</CodeLiteral> query, specify a locking clause within the <CodeLiteral>WITH</CodeLiteral> query.\n Multiple locking clauses can be written if it is necessary to specify different locking behavior for different tables. If the same table is mentioned (or implicitly affected) by more than one locking clause, then it is processed as if it was only specified by the strongest one. Similarly, a table is processed as <CodeLiteral>NOWAIT</CodeLiteral> if that is specified in any of the clauses affecting it. Otherwise, it is processed as <CodeLiteral>SKIP LOCKED</CodeLiteral> if that is specified in any of the clauses affecting it.\n The locking clauses cannot be used in contexts where returned rows cannot be clearly identified with individual table rows; for example they cannot be used with aggregation.\n When a locking clause appears at the top level of a SELECT query, the rows that are locked are exactly those that are returned by the query; in the case of a join query, the rows locked are those that contribute to returned join rows. In addition, rows that satisfied the query conditions as of the query snapshot will be locked, although they will not be returned if they were updated after the snapshot and no longer satisfy the query conditions. If a <CodeLiteral>LIMIT</CodeLiteral> is used, locking stops once enough rows have been returned to satisfy the limit (but note that rows skipped over by <CodeLiteral>OFFSET</CodeLiteral> will get locked). Similarly, if a locking clause is used in a cursor's query, only rows actually fetched or stepped past by the cursor will be locked.\n When a locking clause appears in a sub-SELECT, the rows locked are those returned to the outer query by the sub-query. This might involve fewer rows than inspection of the sub-query alone would suggest, since conditions from the outer query might be used to optimize execution of the sub-query. For example,\n <code>SELECT * FROM (SELECT * FROM mytable FOR UPDATE) ss WHERE col1 = 5;\n</code>\n will lock only rows having <CodeLiteral>col1 = 5</CodeLiteral>, even though that condition is not textually within the sub-query.\n Previous releases failed to preserve a lock which is upgraded by a later savepoint. For example, this code:\n <code>BEGIN;\nSELECT * FROM mytable WHERE key = 1 FOR UPDATE;\nSAVEPOINT s;\nUPDATE mytable SET ... WHERE key = 1;\nROLLBACK TO s;\n</code>\n would fail to preserve the <CodeLiteral>FOR UPDATE</CodeLiteral> lock after the ROLLBACK TO. This has been fixed in release 9.3.\n \n  <ClauseName>Caution</ClauseName>\n  It is possible for a SELECT command running at the <CodeLiteral>READ COMMITTED</CodeLiteral> transaction isolation level and using <CodeLiteral>ORDER BY</CodeLiteral> and a locking clause to return rows out of order. This is because <CodeLiteral>ORDER BY</CodeLiteral> is applied first. The command sorts the result, but might then block trying to obtain a lock on one or more of the rows. Once the <CodeLiteral>SELECT</CodeLiteral> unblocks, some of the ordering column values might have been modified, leading to those rows appearing to be out of order (though they are in order in terms of the original column values). This can be worked around at need by placing the <CodeLiteral>FOR UPDATE/SHARE</CodeLiteral> clause in a sub-query, for example\n  <code>SELECT * FROM (SELECT * FROM mytable FOR UPDATE) ss ORDER BY column1;\n</code>\n  Note that this will result in locking all rows of mytable, whereas <CodeLiteral>FOR UPDATE</CodeLiteral> at the top level would lock only the actually returned rows. This can make for a significant performance difference, particularly if the <CodeLiteral>ORDER BY</CodeLiteral> is combined with <CodeLiteral>LIMIT</CodeLiteral> or other restrictions. So this technique is recommended only if concurrent updates of the ordering columns are expected and a strictly sorted result is required.\n  At the <CodeLiteral>REPEATABLE READ</CodeLiteral> or <CodeLiteral>SERIALIZABLE</CodeLiteral> transaction isolation level this would cause a serialization failure (with a <CodeLiteral>SQLSTATE</CodeLiteral> of <CodeLiteral>'40001'</CodeLiteral>), so there is no possibility of receiving rows out of order under these isolation levels. ",
        "detail": "[DESCRIPTION]: <CodeLiteral>FOR UPDATE</CodeLiteral>, <CodeLiteral>FOR NO KEY UPDATE</CodeLiteral>, <CodeLiteral>FOR SHARE</CodeLiteral> and <CodeLiteral>FOR KEY SHARE</CodeLiteral> are locking clauses; they affect how <CodeLiteral>SELECT</CodeLiteral> locks rows as they are obtained from the table.\n The locking clause has the general form\n <code>FOR lock_strength [ OF table_name [, ...] ] [ NOWAIT | SKIP LOCKED ]\n</code>\n where lock_strength can be one of\n <code>UPDATE\nNO KEY UPDATE\nSHARE\nKEY SHARE\n</code>\n For more information on each row-level lock mode, refer to Section 13.3.2.\n To prevent the operation from waiting for other transactions to commit, use either the <CodeLiteral>NOWAIT</CodeLiteral> or <CodeLiteral>SKIP LOCKED</CodeLiteral> option. With <CodeLiteral>NOWAIT</CodeLiteral>, the statement reports an error, rather than waiting, if a selected row cannot be locked immediately. With <CodeLiteral>SKIP LOCKED</CodeLiteral>, any selected rows that cannot be immediately locked are skipped. Skipping locked rows provides an inconsistent view of the data, so this is not suitable for general purpose work, but can be used to avoid lock contention with multiple consumers accessing a queue-like table. Note that <CodeLiteral>NOWAIT</CodeLiteral> and <CodeLiteral>SKIP LOCKED</CodeLiteral> apply only to the row-level lock(s) \u2014 the required <CodeLiteral>ROW SHARE</CodeLiteral> table-level lock is still taken in the ordinary way (see Chapter 13). You can use LOCK with the <CodeLiteral>NOWAIT</CodeLiteral> option first, if you need to acquire the table-level lock without waiting.\n If specific tables are named in a locking clause, then only rows coming from those tables are locked; any other tables used in the SELECT are simply read as usual. A locking clause without a table list affects all tables used in the statement. If a locking clause is applied to a view or sub-query, it affects all tables used in the view or sub-query. However, these clauses do not apply to <CodeLiteral>WITH</CodeLiteral> queries referenced by the primary query. If you want row locking to occur within a <CodeLiteral>WITH</CodeLiteral> query, specify a locking clause within the <CodeLiteral>WITH</CodeLiteral> query.\n Multiple locking clauses can be written if it is necessary to specify different locking behavior for different tables. If the same table is mentioned (or implicitly affected) by more than one locking clause, then it is processed as if it was only specified by the strongest one. Similarly, a table is processed as <CodeLiteral>NOWAIT</CodeLiteral> if that is specified in any of the clauses affecting it. Otherwise, it is processed as <CodeLiteral>SKIP LOCKED</CodeLiteral> if that is specified in any of the clauses affecting it.\n The locking clauses cannot be used in contexts where returned rows cannot be clearly identified with individual table rows; for example they cannot be used with aggregation.\n When a locking clause appears at the top level of a SELECT query, the rows that are locked are exactly those that are returned by the query; in the case of a join query, the rows locked are those that contribute to returned join rows. In addition, rows that satisfied the query conditions as of the query snapshot will be locked, although they will not be returned if they were updated after the snapshot and no longer satisfy the query conditions. If a <CodeLiteral>LIMIT</CodeLiteral> is used, locking stops once enough rows have been returned to satisfy the limit (but note that rows skipped over by <CodeLiteral>OFFSET</CodeLiteral> will get locked). Similarly, if a locking clause is used in a cursor's query, only rows actually fetched or stepped past by the cursor will be locked.\n When a locking clause appears in a sub-SELECT, the rows locked are those returned to the outer query by the sub-query. This might involve fewer rows than inspection of the sub-query alone would suggest, since conditions from the outer query might be used to optimize execution of the sub-query. For example,\n <code>SELECT * FROM (SELECT * FROM mytable FOR UPDATE) ss WHERE col1 = 5;\n</code>\n will lock only rows having <CodeLiteral>col1 = 5</CodeLiteral>, even though that condition is not textually within the sub-query.\n Previous releases failed to preserve a lock which is upgraded by a later savepoint. For example, this code:\n <code>BEGIN;\nSELECT * FROM mytable WHERE key = 1 FOR UPDATE;\nSAVEPOINT s;\nUPDATE mytable SET ... WHERE key = 1;\nROLLBACK TO s;\n</code>\n would fail to preserve the <CodeLiteral>FOR UPDATE</CodeLiteral> lock after the ROLLBACK TO. This has been fixed in release 9.3.\n \n  <ClauseName>Caution</ClauseName>\n  It is possible for a SELECT command running at the <CodeLiteral>READ COMMITTED</CodeLiteral> transaction isolation level and using <CodeLiteral>ORDER BY</CodeLiteral> and a locking clause to return rows out of order. This is because <CodeLiteral>ORDER BY</CodeLiteral> is applied first. The command sorts the result, but might then block trying to obtain a lock on one or more of the rows. Once the <CodeLiteral>SELECT</CodeLiteral> unblocks, some of the ordering column values might have been modified, leading to those rows appearing to be out of order (though they are in order in terms of the original column values). This can be worked around at need by placing the <CodeLiteral>FOR UPDATE/SHARE</CodeLiteral> clause in a sub-query, for example\n  <code>SELECT * FROM (SELECT * FROM mytable FOR UPDATE) ss ORDER BY column1;\n</code>\n  Note that this will result in locking all rows of mytable, whereas <CodeLiteral>FOR UPDATE</CodeLiteral> at the top level would lock only the actually returned rows. This can make for a significant performance difference, particularly if the <CodeLiteral>ORDER BY</CodeLiteral> is combined with <CodeLiteral>LIMIT</CodeLiteral> or other restrictions. So this technique is recommended only if concurrent updates of the ordering columns are expected and a strictly sorted result is required.\n  At the <CodeLiteral>REPEATABLE READ</CodeLiteral> or <CodeLiteral>SERIALIZABLE</CodeLiteral> transaction isolation level this would cause a serialization failure (with a <CodeLiteral>SQLSTATE</CodeLiteral> of <CodeLiteral>'40001'</CodeLiteral>), so there is no possibility of receiving rows out of order under these isolation levels. <sep>[DEMO]: SELECT * FROM orders WHERE customer_id = 5 FOR NO KEY UPDATE SKIP LOCKED;",
        "example": [
            "SELECT * FROM orders WHERE customer_id = 5 FOR NO KEY UPDATE SKIP LOCKED;"
        ],
        "link": []
    },
    {
        "type": "keyword",
        "keyword": "FOR SHARE SKIP LOCKED",
        "tree": " (for_locking_item (for_locking_strength FOR SHARE) (opt_nowait_or_skip SKIP LOCKED))",
        "description": "<CodeLiteral>FOR UPDATE</CodeLiteral>, <CodeLiteral>FOR NO KEY UPDATE</CodeLiteral>, <CodeLiteral>FOR SHARE</CodeLiteral> and <CodeLiteral>FOR KEY SHARE</CodeLiteral> are locking clauses; they affect how <CodeLiteral>SELECT</CodeLiteral> locks rows as they are obtained from the table.\n The locking clause has the general form\n <code>FOR lock_strength [ OF table_name [, ...] ] [ NOWAIT | SKIP LOCKED ]\n</code>\n where lock_strength can be one of\n <code>UPDATE\nNO KEY UPDATE\nSHARE\nKEY SHARE\n</code>\n For more information on each row-level lock mode, refer to Section 13.3.2.\n To prevent the operation from waiting for other transactions to commit, use either the <CodeLiteral>NOWAIT</CodeLiteral> or <CodeLiteral>SKIP LOCKED</CodeLiteral> option. With <CodeLiteral>NOWAIT</CodeLiteral>, the statement reports an error, rather than waiting, if a selected row cannot be locked immediately. With <CodeLiteral>SKIP LOCKED</CodeLiteral>, any selected rows that cannot be immediately locked are skipped. Skipping locked rows provides an inconsistent view of the data, so this is not suitable for general purpose work, but can be used to avoid lock contention with multiple consumers accessing a queue-like table. Note that <CodeLiteral>NOWAIT</CodeLiteral> and <CodeLiteral>SKIP LOCKED</CodeLiteral> apply only to the row-level lock(s) \u2014 the required <CodeLiteral>ROW SHARE</CodeLiteral> table-level lock is still taken in the ordinary way (see Chapter 13). You can use LOCK with the <CodeLiteral>NOWAIT</CodeLiteral> option first, if you need to acquire the table-level lock without waiting.\n If specific tables are named in a locking clause, then only rows coming from those tables are locked; any other tables used in the SELECT are simply read as usual. A locking clause without a table list affects all tables used in the statement. If a locking clause is applied to a view or sub-query, it affects all tables used in the view or sub-query. However, these clauses do not apply to <CodeLiteral>WITH</CodeLiteral> queries referenced by the primary query. If you want row locking to occur within a <CodeLiteral>WITH</CodeLiteral> query, specify a locking clause within the <CodeLiteral>WITH</CodeLiteral> query.\n Multiple locking clauses can be written if it is necessary to specify different locking behavior for different tables. If the same table is mentioned (or implicitly affected) by more than one locking clause, then it is processed as if it was only specified by the strongest one. Similarly, a table is processed as <CodeLiteral>NOWAIT</CodeLiteral> if that is specified in any of the clauses affecting it. Otherwise, it is processed as <CodeLiteral>SKIP LOCKED</CodeLiteral> if that is specified in any of the clauses affecting it.\n The locking clauses cannot be used in contexts where returned rows cannot be clearly identified with individual table rows; for example they cannot be used with aggregation.\n When a locking clause appears at the top level of a SELECT query, the rows that are locked are exactly those that are returned by the query; in the case of a join query, the rows locked are those that contribute to returned join rows. In addition, rows that satisfied the query conditions as of the query snapshot will be locked, although they will not be returned if they were updated after the snapshot and no longer satisfy the query conditions. If a <CodeLiteral>LIMIT</CodeLiteral> is used, locking stops once enough rows have been returned to satisfy the limit (but note that rows skipped over by <CodeLiteral>OFFSET</CodeLiteral> will get locked). Similarly, if a locking clause is used in a cursor's query, only rows actually fetched or stepped past by the cursor will be locked.\n When a locking clause appears in a sub-SELECT, the rows locked are those returned to the outer query by the sub-query. This might involve fewer rows than inspection of the sub-query alone would suggest, since conditions from the outer query might be used to optimize execution of the sub-query. For example,\n <code>SELECT * FROM (SELECT * FROM mytable FOR UPDATE) ss WHERE col1 = 5;\n</code>\n will lock only rows having <CodeLiteral>col1 = 5</CodeLiteral>, even though that condition is not textually within the sub-query.\n Previous releases failed to preserve a lock which is upgraded by a later savepoint. For example, this code:\n <code>BEGIN;\nSELECT * FROM mytable WHERE key = 1 FOR UPDATE;\nSAVEPOINT s;\nUPDATE mytable SET ... WHERE key = 1;\nROLLBACK TO s;\n</code>\n would fail to preserve the <CodeLiteral>FOR UPDATE</CodeLiteral> lock after the ROLLBACK TO. This has been fixed in release 9.3.\n \n  <ClauseName>Caution</ClauseName>\n  It is possible for a SELECT command running at the <CodeLiteral>READ COMMITTED</CodeLiteral> transaction isolation level and using <CodeLiteral>ORDER BY</CodeLiteral> and a locking clause to return rows out of order. This is because <CodeLiteral>ORDER BY</CodeLiteral> is applied first. The command sorts the result, but might then block trying to obtain a lock on one or more of the rows. Once the <CodeLiteral>SELECT</CodeLiteral> unblocks, some of the ordering column values might have been modified, leading to those rows appearing to be out of order (though they are in order in terms of the original column values). This can be worked around at need by placing the <CodeLiteral>FOR UPDATE/SHARE</CodeLiteral> clause in a sub-query, for example\n  <code>SELECT * FROM (SELECT * FROM mytable FOR UPDATE) ss ORDER BY column1;\n</code>\n  Note that this will result in locking all rows of mytable, whereas <CodeLiteral>FOR UPDATE</CodeLiteral> at the top level would lock only the actually returned rows. This can make for a significant performance difference, particularly if the <CodeLiteral>ORDER BY</CodeLiteral> is combined with <CodeLiteral>LIMIT</CodeLiteral> or other restrictions. So this technique is recommended only if concurrent updates of the ordering columns are expected and a strictly sorted result is required.\n  At the <CodeLiteral>REPEATABLE READ</CodeLiteral> or <CodeLiteral>SERIALIZABLE</CodeLiteral> transaction isolation level this would cause a serialization failure (with a <CodeLiteral>SQLSTATE</CodeLiteral> of <CodeLiteral>'40001'</CodeLiteral>), so there is no possibility of receiving rows out of order under these isolation levels. ",
        "detail": "[DESCRIPTION]: <CodeLiteral>FOR UPDATE</CodeLiteral>, <CodeLiteral>FOR NO KEY UPDATE</CodeLiteral>, <CodeLiteral>FOR SHARE</CodeLiteral> and <CodeLiteral>FOR KEY SHARE</CodeLiteral> are locking clauses; they affect how <CodeLiteral>SELECT</CodeLiteral> locks rows as they are obtained from the table.\n The locking clause has the general form\n <code>FOR lock_strength [ OF table_name [, ...] ] [ NOWAIT | SKIP LOCKED ]\n</code>\n where lock_strength can be one of\n <code>UPDATE\nNO KEY UPDATE\nSHARE\nKEY SHARE\n</code>\n For more information on each row-level lock mode, refer to Section 13.3.2.\n To prevent the operation from waiting for other transactions to commit, use either the <CodeLiteral>NOWAIT</CodeLiteral> or <CodeLiteral>SKIP LOCKED</CodeLiteral> option. With <CodeLiteral>NOWAIT</CodeLiteral>, the statement reports an error, rather than waiting, if a selected row cannot be locked immediately. With <CodeLiteral>SKIP LOCKED</CodeLiteral>, any selected rows that cannot be immediately locked are skipped. Skipping locked rows provides an inconsistent view of the data, so this is not suitable for general purpose work, but can be used to avoid lock contention with multiple consumers accessing a queue-like table. Note that <CodeLiteral>NOWAIT</CodeLiteral> and <CodeLiteral>SKIP LOCKED</CodeLiteral> apply only to the row-level lock(s) \u2014 the required <CodeLiteral>ROW SHARE</CodeLiteral> table-level lock is still taken in the ordinary way (see Chapter 13). You can use LOCK with the <CodeLiteral>NOWAIT</CodeLiteral> option first, if you need to acquire the table-level lock without waiting.\n If specific tables are named in a locking clause, then only rows coming from those tables are locked; any other tables used in the SELECT are simply read as usual. A locking clause without a table list affects all tables used in the statement. If a locking clause is applied to a view or sub-query, it affects all tables used in the view or sub-query. However, these clauses do not apply to <CodeLiteral>WITH</CodeLiteral> queries referenced by the primary query. If you want row locking to occur within a <CodeLiteral>WITH</CodeLiteral> query, specify a locking clause within the <CodeLiteral>WITH</CodeLiteral> query.\n Multiple locking clauses can be written if it is necessary to specify different locking behavior for different tables. If the same table is mentioned (or implicitly affected) by more than one locking clause, then it is processed as if it was only specified by the strongest one. Similarly, a table is processed as <CodeLiteral>NOWAIT</CodeLiteral> if that is specified in any of the clauses affecting it. Otherwise, it is processed as <CodeLiteral>SKIP LOCKED</CodeLiteral> if that is specified in any of the clauses affecting it.\n The locking clauses cannot be used in contexts where returned rows cannot be clearly identified with individual table rows; for example they cannot be used with aggregation.\n When a locking clause appears at the top level of a SELECT query, the rows that are locked are exactly those that are returned by the query; in the case of a join query, the rows locked are those that contribute to returned join rows. In addition, rows that satisfied the query conditions as of the query snapshot will be locked, although they will not be returned if they were updated after the snapshot and no longer satisfy the query conditions. If a <CodeLiteral>LIMIT</CodeLiteral> is used, locking stops once enough rows have been returned to satisfy the limit (but note that rows skipped over by <CodeLiteral>OFFSET</CodeLiteral> will get locked). Similarly, if a locking clause is used in a cursor's query, only rows actually fetched or stepped past by the cursor will be locked.\n When a locking clause appears in a sub-SELECT, the rows locked are those returned to the outer query by the sub-query. This might involve fewer rows than inspection of the sub-query alone would suggest, since conditions from the outer query might be used to optimize execution of the sub-query. For example,\n <code>SELECT * FROM (SELECT * FROM mytable FOR UPDATE) ss WHERE col1 = 5;\n</code>\n will lock only rows having <CodeLiteral>col1 = 5</CodeLiteral>, even though that condition is not textually within the sub-query.\n Previous releases failed to preserve a lock which is upgraded by a later savepoint. For example, this code:\n <code>BEGIN;\nSELECT * FROM mytable WHERE key = 1 FOR UPDATE;\nSAVEPOINT s;\nUPDATE mytable SET ... WHERE key = 1;\nROLLBACK TO s;\n</code>\n would fail to preserve the <CodeLiteral>FOR UPDATE</CodeLiteral> lock after the ROLLBACK TO. This has been fixed in release 9.3.\n \n  <ClauseName>Caution</ClauseName>\n  It is possible for a SELECT command running at the <CodeLiteral>READ COMMITTED</CodeLiteral> transaction isolation level and using <CodeLiteral>ORDER BY</CodeLiteral> and a locking clause to return rows out of order. This is because <CodeLiteral>ORDER BY</CodeLiteral> is applied first. The command sorts the result, but might then block trying to obtain a lock on one or more of the rows. Once the <CodeLiteral>SELECT</CodeLiteral> unblocks, some of the ordering column values might have been modified, leading to those rows appearing to be out of order (though they are in order in terms of the original column values). This can be worked around at need by placing the <CodeLiteral>FOR UPDATE/SHARE</CodeLiteral> clause in a sub-query, for example\n  <code>SELECT * FROM (SELECT * FROM mytable FOR UPDATE) ss ORDER BY column1;\n</code>\n  Note that this will result in locking all rows of mytable, whereas <CodeLiteral>FOR UPDATE</CodeLiteral> at the top level would lock only the actually returned rows. This can make for a significant performance difference, particularly if the <CodeLiteral>ORDER BY</CodeLiteral> is combined with <CodeLiteral>LIMIT</CodeLiteral> or other restrictions. So this technique is recommended only if concurrent updates of the ordering columns are expected and a strictly sorted result is required.\n  At the <CodeLiteral>REPEATABLE READ</CodeLiteral> or <CodeLiteral>SERIALIZABLE</CodeLiteral> transaction isolation level this would cause a serialization failure (with a <CodeLiteral>SQLSTATE</CodeLiteral> of <CodeLiteral>'40001'</CodeLiteral>), so there is no possibility of receiving rows out of order under these isolation levels. <sep>[DEMO]: SELECT * FROM orders WHERE status = 'pending' FOR SHARE SKIP LOCKED;",
        "example": [
            "SELECT * FROM orders WHERE status = 'pending' FOR SHARE SKIP LOCKED;"
        ],
        "link": []
    },
    {
        "type": "keyword",
        "keyword": "FOR KEY SHARE SKIP LOCKED",
        "tree": " (for_locking_item (for_locking_strength FOR KEY SHARE) (opt_nowait_or_skip SKIP LOCKED))",
        "description": "<CodeLiteral>FOR UPDATE</CodeLiteral>, <CodeLiteral>FOR NO KEY UPDATE</CodeLiteral>, <CodeLiteral>FOR SHARE</CodeLiteral> and <CodeLiteral>FOR KEY SHARE</CodeLiteral> are locking clauses; they affect how <CodeLiteral>SELECT</CodeLiteral> locks rows as they are obtained from the table.\n The locking clause has the general form\n <code>FOR lock_strength [ OF table_name [, ...] ] [ NOWAIT | SKIP LOCKED ]\n</code>\n where lock_strength can be one of\n <code>UPDATE\nNO KEY UPDATE\nSHARE\nKEY SHARE\n</code>\n For more information on each row-level lock mode, refer to Section 13.3.2.\n To prevent the operation from waiting for other transactions to commit, use either the <CodeLiteral>NOWAIT</CodeLiteral> or <CodeLiteral>SKIP LOCKED</CodeLiteral> option. With <CodeLiteral>NOWAIT</CodeLiteral>, the statement reports an error, rather than waiting, if a selected row cannot be locked immediately. With <CodeLiteral>SKIP LOCKED</CodeLiteral>, any selected rows that cannot be immediately locked are skipped. Skipping locked rows provides an inconsistent view of the data, so this is not suitable for general purpose work, but can be used to avoid lock contention with multiple consumers accessing a queue-like table. Note that <CodeLiteral>NOWAIT</CodeLiteral> and <CodeLiteral>SKIP LOCKED</CodeLiteral> apply only to the row-level lock(s) \u2014 the required <CodeLiteral>ROW SHARE</CodeLiteral> table-level lock is still taken in the ordinary way (see Chapter 13). You can use LOCK with the <CodeLiteral>NOWAIT</CodeLiteral> option first, if you need to acquire the table-level lock without waiting.\n If specific tables are named in a locking clause, then only rows coming from those tables are locked; any other tables used in the SELECT are simply read as usual. A locking clause without a table list affects all tables used in the statement. If a locking clause is applied to a view or sub-query, it affects all tables used in the view or sub-query. However, these clauses do not apply to <CodeLiteral>WITH</CodeLiteral> queries referenced by the primary query. If you want row locking to occur within a <CodeLiteral>WITH</CodeLiteral> query, specify a locking clause within the <CodeLiteral>WITH</CodeLiteral> query.\n Multiple locking clauses can be written if it is necessary to specify different locking behavior for different tables. If the same table is mentioned (or implicitly affected) by more than one locking clause, then it is processed as if it was only specified by the strongest one. Similarly, a table is processed as <CodeLiteral>NOWAIT</CodeLiteral> if that is specified in any of the clauses affecting it. Otherwise, it is processed as <CodeLiteral>SKIP LOCKED</CodeLiteral> if that is specified in any of the clauses affecting it.\n The locking clauses cannot be used in contexts where returned rows cannot be clearly identified with individual table rows; for example they cannot be used with aggregation.\n When a locking clause appears at the top level of a SELECT query, the rows that are locked are exactly those that are returned by the query; in the case of a join query, the rows locked are those that contribute to returned join rows. In addition, rows that satisfied the query conditions as of the query snapshot will be locked, although they will not be returned if they were updated after the snapshot and no longer satisfy the query conditions. If a <CodeLiteral>LIMIT</CodeLiteral> is used, locking stops once enough rows have been returned to satisfy the limit (but note that rows skipped over by <CodeLiteral>OFFSET</CodeLiteral> will get locked). Similarly, if a locking clause is used in a cursor's query, only rows actually fetched or stepped past by the cursor will be locked.\n When a locking clause appears in a sub-SELECT, the rows locked are those returned to the outer query by the sub-query. This might involve fewer rows than inspection of the sub-query alone would suggest, since conditions from the outer query might be used to optimize execution of the sub-query. For example,\n <code>SELECT * FROM (SELECT * FROM mytable FOR UPDATE) ss WHERE col1 = 5;\n</code>\n will lock only rows having <CodeLiteral>col1 = 5</CodeLiteral>, even though that condition is not textually within the sub-query.\n Previous releases failed to preserve a lock which is upgraded by a later savepoint. For example, this code:\n <code>BEGIN;\nSELECT * FROM mytable WHERE key = 1 FOR UPDATE;\nSAVEPOINT s;\nUPDATE mytable SET ... WHERE key = 1;\nROLLBACK TO s;\n</code>\n would fail to preserve the <CodeLiteral>FOR UPDATE</CodeLiteral> lock after the ROLLBACK TO. This has been fixed in release 9.3.\n \n  <ClauseName>Caution</ClauseName>\n  It is possible for a SELECT command running at the <CodeLiteral>READ COMMITTED</CodeLiteral> transaction isolation level and using <CodeLiteral>ORDER BY</CodeLiteral> and a locking clause to return rows out of order. This is because <CodeLiteral>ORDER BY</CodeLiteral> is applied first. The command sorts the result, but might then block trying to obtain a lock on one or more of the rows. Once the <CodeLiteral>SELECT</CodeLiteral> unblocks, some of the ordering column values might have been modified, leading to those rows appearing to be out of order (though they are in order in terms of the original column values). This can be worked around at need by placing the <CodeLiteral>FOR UPDATE/SHARE</CodeLiteral> clause in a sub-query, for example\n  <code>SELECT * FROM (SELECT * FROM mytable FOR UPDATE) ss ORDER BY column1;\n</code>\n  Note that this will result in locking all rows of mytable, whereas <CodeLiteral>FOR UPDATE</CodeLiteral> at the top level would lock only the actually returned rows. This can make for a significant performance difference, particularly if the <CodeLiteral>ORDER BY</CodeLiteral> is combined with <CodeLiteral>LIMIT</CodeLiteral> or other restrictions. So this technique is recommended only if concurrent updates of the ordering columns are expected and a strictly sorted result is required.\n  At the <CodeLiteral>REPEATABLE READ</CodeLiteral> or <CodeLiteral>SERIALIZABLE</CodeLiteral> transaction isolation level this would cause a serialization failure (with a <CodeLiteral>SQLSTATE</CodeLiteral> of <CodeLiteral>'40001'</CodeLiteral>), so there is no possibility of receiving rows out of order under these isolation levels. ",
        "detail": "[DESCRIPTION]: <CodeLiteral>FOR UPDATE</CodeLiteral>, <CodeLiteral>FOR NO KEY UPDATE</CodeLiteral>, <CodeLiteral>FOR SHARE</CodeLiteral> and <CodeLiteral>FOR KEY SHARE</CodeLiteral> are locking clauses; they affect how <CodeLiteral>SELECT</CodeLiteral> locks rows as they are obtained from the table.\n The locking clause has the general form\n <code>FOR lock_strength [ OF table_name [, ...] ] [ NOWAIT | SKIP LOCKED ]\n</code>\n where lock_strength can be one of\n <code>UPDATE\nNO KEY UPDATE\nSHARE\nKEY SHARE\n</code>\n For more information on each row-level lock mode, refer to Section 13.3.2.\n To prevent the operation from waiting for other transactions to commit, use either the <CodeLiteral>NOWAIT</CodeLiteral> or <CodeLiteral>SKIP LOCKED</CodeLiteral> option. With <CodeLiteral>NOWAIT</CodeLiteral>, the statement reports an error, rather than waiting, if a selected row cannot be locked immediately. With <CodeLiteral>SKIP LOCKED</CodeLiteral>, any selected rows that cannot be immediately locked are skipped. Skipping locked rows provides an inconsistent view of the data, so this is not suitable for general purpose work, but can be used to avoid lock contention with multiple consumers accessing a queue-like table. Note that <CodeLiteral>NOWAIT</CodeLiteral> and <CodeLiteral>SKIP LOCKED</CodeLiteral> apply only to the row-level lock(s) \u2014 the required <CodeLiteral>ROW SHARE</CodeLiteral> table-level lock is still taken in the ordinary way (see Chapter 13). You can use LOCK with the <CodeLiteral>NOWAIT</CodeLiteral> option first, if you need to acquire the table-level lock without waiting.\n If specific tables are named in a locking clause, then only rows coming from those tables are locked; any other tables used in the SELECT are simply read as usual. A locking clause without a table list affects all tables used in the statement. If a locking clause is applied to a view or sub-query, it affects all tables used in the view or sub-query. However, these clauses do not apply to <CodeLiteral>WITH</CodeLiteral> queries referenced by the primary query. If you want row locking to occur within a <CodeLiteral>WITH</CodeLiteral> query, specify a locking clause within the <CodeLiteral>WITH</CodeLiteral> query.\n Multiple locking clauses can be written if it is necessary to specify different locking behavior for different tables. If the same table is mentioned (or implicitly affected) by more than one locking clause, then it is processed as if it was only specified by the strongest one. Similarly, a table is processed as <CodeLiteral>NOWAIT</CodeLiteral> if that is specified in any of the clauses affecting it. Otherwise, it is processed as <CodeLiteral>SKIP LOCKED</CodeLiteral> if that is specified in any of the clauses affecting it.\n The locking clauses cannot be used in contexts where returned rows cannot be clearly identified with individual table rows; for example they cannot be used with aggregation.\n When a locking clause appears at the top level of a SELECT query, the rows that are locked are exactly those that are returned by the query; in the case of a join query, the rows locked are those that contribute to returned join rows. In addition, rows that satisfied the query conditions as of the query snapshot will be locked, although they will not be returned if they were updated after the snapshot and no longer satisfy the query conditions. If a <CodeLiteral>LIMIT</CodeLiteral> is used, locking stops once enough rows have been returned to satisfy the limit (but note that rows skipped over by <CodeLiteral>OFFSET</CodeLiteral> will get locked). Similarly, if a locking clause is used in a cursor's query, only rows actually fetched or stepped past by the cursor will be locked.\n When a locking clause appears in a sub-SELECT, the rows locked are those returned to the outer query by the sub-query. This might involve fewer rows than inspection of the sub-query alone would suggest, since conditions from the outer query might be used to optimize execution of the sub-query. For example,\n <code>SELECT * FROM (SELECT * FROM mytable FOR UPDATE) ss WHERE col1 = 5;\n</code>\n will lock only rows having <CodeLiteral>col1 = 5</CodeLiteral>, even though that condition is not textually within the sub-query.\n Previous releases failed to preserve a lock which is upgraded by a later savepoint. For example, this code:\n <code>BEGIN;\nSELECT * FROM mytable WHERE key = 1 FOR UPDATE;\nSAVEPOINT s;\nUPDATE mytable SET ... WHERE key = 1;\nROLLBACK TO s;\n</code>\n would fail to preserve the <CodeLiteral>FOR UPDATE</CodeLiteral> lock after the ROLLBACK TO. This has been fixed in release 9.3.\n \n  <ClauseName>Caution</ClauseName>\n  It is possible for a SELECT command running at the <CodeLiteral>READ COMMITTED</CodeLiteral> transaction isolation level and using <CodeLiteral>ORDER BY</CodeLiteral> and a locking clause to return rows out of order. This is because <CodeLiteral>ORDER BY</CodeLiteral> is applied first. The command sorts the result, but might then block trying to obtain a lock on one or more of the rows. Once the <CodeLiteral>SELECT</CodeLiteral> unblocks, some of the ordering column values might have been modified, leading to those rows appearing to be out of order (though they are in order in terms of the original column values). This can be worked around at need by placing the <CodeLiteral>FOR UPDATE/SHARE</CodeLiteral> clause in a sub-query, for example\n  <code>SELECT * FROM (SELECT * FROM mytable FOR UPDATE) ss ORDER BY column1;\n</code>\n  Note that this will result in locking all rows of mytable, whereas <CodeLiteral>FOR UPDATE</CodeLiteral> at the top level would lock only the actually returned rows. This can make for a significant performance difference, particularly if the <CodeLiteral>ORDER BY</CodeLiteral> is combined with <CodeLiteral>LIMIT</CodeLiteral> or other restrictions. So this technique is recommended only if concurrent updates of the ordering columns are expected and a strictly sorted result is required.\n  At the <CodeLiteral>REPEATABLE READ</CodeLiteral> or <CodeLiteral>SERIALIZABLE</CodeLiteral> transaction isolation level this would cause a serialization failure (with a <CodeLiteral>SQLSTATE</CodeLiteral> of <CodeLiteral>'40001'</CodeLiteral>), so there is no possibility of receiving rows out of order under these isolation levels. <sep>[DEMO]: SELECT * FROM orders WHERE status = 'pending' FOR KEY SHARE SKIP LOCKED;",
        "example": [
            "SELECT * FROM orders WHERE status = 'pending' FOR KEY SHARE SKIP LOCKED;"
        ],
        "link": []
    },
    {
        "type": "keyword",
        "keyword": "FOR UPDATE",
        "tree": " (for_locking_strength FOR UPDATE)",
        "description": "<CodeLiteral>FOR UPDATE</CodeLiteral>, <CodeLiteral>FOR NO KEY UPDATE</CodeLiteral>, <CodeLiteral>FOR SHARE</CodeLiteral> and <CodeLiteral>FOR KEY SHARE</CodeLiteral> are locking clauses; they affect how <CodeLiteral>SELECT</CodeLiteral> locks rows as they are obtained from the table.\n The locking clause has the general form\n <code>FOR lock_strength [ OF table_name [, ...] ] [ NOWAIT | SKIP LOCKED ]\n</code>\n where lock_strength can be one of\n <code>UPDATE\nNO KEY UPDATE\nSHARE\nKEY SHARE\n</code>\n For more information on each row-level lock mode, refer to Section 13.3.2.\n To prevent the operation from waiting for other transactions to commit, use either the <CodeLiteral>NOWAIT</CodeLiteral> or <CodeLiteral>SKIP LOCKED</CodeLiteral> option. With <CodeLiteral>NOWAIT</CodeLiteral>, the statement reports an error, rather than waiting, if a selected row cannot be locked immediately. With <CodeLiteral>SKIP LOCKED</CodeLiteral>, any selected rows that cannot be immediately locked are skipped. Skipping locked rows provides an inconsistent view of the data, so this is not suitable for general purpose work, but can be used to avoid lock contention with multiple consumers accessing a queue-like table. Note that <CodeLiteral>NOWAIT</CodeLiteral> and <CodeLiteral>SKIP LOCKED</CodeLiteral> apply only to the row-level lock(s) \u2014 the required <CodeLiteral>ROW SHARE</CodeLiteral> table-level lock is still taken in the ordinary way (see Chapter 13). You can use LOCK with the <CodeLiteral>NOWAIT</CodeLiteral> option first, if you need to acquire the table-level lock without waiting.\n If specific tables are named in a locking clause, then only rows coming from those tables are locked; any other tables used in the SELECT are simply read as usual. A locking clause without a table list affects all tables used in the statement. If a locking clause is applied to a view or sub-query, it affects all tables used in the view or sub-query. However, these clauses do not apply to <CodeLiteral>WITH</CodeLiteral> queries referenced by the primary query. If you want row locking to occur within a <CodeLiteral>WITH</CodeLiteral> query, specify a locking clause within the <CodeLiteral>WITH</CodeLiteral> query.\n Multiple locking clauses can be written if it is necessary to specify different locking behavior for different tables. If the same table is mentioned (or implicitly affected) by more than one locking clause, then it is processed as if it was only specified by the strongest one. Similarly, a table is processed as <CodeLiteral>NOWAIT</CodeLiteral> if that is specified in any of the clauses affecting it. Otherwise, it is processed as <CodeLiteral>SKIP LOCKED</CodeLiteral> if that is specified in any of the clauses affecting it.\n The locking clauses cannot be used in contexts where returned rows cannot be clearly identified with individual table rows; for example they cannot be used with aggregation.\n When a locking clause appears at the top level of a SELECT query, the rows that are locked are exactly those that are returned by the query; in the case of a join query, the rows locked are those that contribute to returned join rows. In addition, rows that satisfied the query conditions as of the query snapshot will be locked, although they will not be returned if they were updated after the snapshot and no longer satisfy the query conditions. If a <CodeLiteral>LIMIT</CodeLiteral> is used, locking stops once enough rows have been returned to satisfy the limit (but note that rows skipped over by <CodeLiteral>OFFSET</CodeLiteral> will get locked). Similarly, if a locking clause is used in a cursor's query, only rows actually fetched or stepped past by the cursor will be locked.\n When a locking clause appears in a sub-SELECT, the rows locked are those returned to the outer query by the sub-query. This might involve fewer rows than inspection of the sub-query alone would suggest, since conditions from the outer query might be used to optimize execution of the sub-query. For example,\n <code>SELECT * FROM (SELECT * FROM mytable FOR UPDATE) ss WHERE col1 = 5;\n</code>\n will lock only rows having <CodeLiteral>col1 = 5</CodeLiteral>, even though that condition is not textually within the sub-query.\n Previous releases failed to preserve a lock which is upgraded by a later savepoint. For example, this code:\n <code>BEGIN;\nSELECT * FROM mytable WHERE key = 1 FOR UPDATE;\nSAVEPOINT s;\nUPDATE mytable SET ... WHERE key = 1;\nROLLBACK TO s;\n</code>\n would fail to preserve the <CodeLiteral>FOR UPDATE</CodeLiteral> lock after the ROLLBACK TO. This has been fixed in release 9.3.\n \n  <ClauseName>Caution</ClauseName>\n  It is possible for a SELECT command running at the <CodeLiteral>READ COMMITTED</CodeLiteral> transaction isolation level and using <CodeLiteral>ORDER BY</CodeLiteral> and a locking clause to return rows out of order. This is because <CodeLiteral>ORDER BY</CodeLiteral> is applied first. The command sorts the result, but might then block trying to obtain a lock on one or more of the rows. Once the <CodeLiteral>SELECT</CodeLiteral> unblocks, some of the ordering column values might have been modified, leading to those rows appearing to be out of order (though they are in order in terms of the original column values). This can be worked around at need by placing the <CodeLiteral>FOR UPDATE/SHARE</CodeLiteral> clause in a sub-query, for example\n  <code>SELECT * FROM (SELECT * FROM mytable FOR UPDATE) ss ORDER BY column1;\n</code>\n  Note that this will result in locking all rows of mytable, whereas <CodeLiteral>FOR UPDATE</CodeLiteral> at the top level would lock only the actually returned rows. This can make for a significant performance difference, particularly if the <CodeLiteral>ORDER BY</CodeLiteral> is combined with <CodeLiteral>LIMIT</CodeLiteral> or other restrictions. So this technique is recommended only if concurrent updates of the ordering columns are expected and a strictly sorted result is required.\n  At the <CodeLiteral>REPEATABLE READ</CodeLiteral> or <CodeLiteral>SERIALIZABLE</CodeLiteral> transaction isolation level this would cause a serialization failure (with a <CodeLiteral>SQLSTATE</CodeLiteral> of <CodeLiteral>'40001'</CodeLiteral>), so there is no possibility of receiving rows out of order under these isolation levels. ",
        "detail": "[DESCRIPTION]: <CodeLiteral>FOR UPDATE</CodeLiteral>, <CodeLiteral>FOR NO KEY UPDATE</CodeLiteral>, <CodeLiteral>FOR SHARE</CodeLiteral> and <CodeLiteral>FOR KEY SHARE</CodeLiteral> are locking clauses; they affect how <CodeLiteral>SELECT</CodeLiteral> locks rows as they are obtained from the table.\n The locking clause has the general form\n <code>FOR lock_strength [ OF table_name [, ...] ] [ NOWAIT | SKIP LOCKED ]\n</code>\n where lock_strength can be one of\n <code>UPDATE\nNO KEY UPDATE\nSHARE\nKEY SHARE\n</code>\n For more information on each row-level lock mode, refer to Section 13.3.2.\n To prevent the operation from waiting for other transactions to commit, use either the <CodeLiteral>NOWAIT</CodeLiteral> or <CodeLiteral>SKIP LOCKED</CodeLiteral> option. With <CodeLiteral>NOWAIT</CodeLiteral>, the statement reports an error, rather than waiting, if a selected row cannot be locked immediately. With <CodeLiteral>SKIP LOCKED</CodeLiteral>, any selected rows that cannot be immediately locked are skipped. Skipping locked rows provides an inconsistent view of the data, so this is not suitable for general purpose work, but can be used to avoid lock contention with multiple consumers accessing a queue-like table. Note that <CodeLiteral>NOWAIT</CodeLiteral> and <CodeLiteral>SKIP LOCKED</CodeLiteral> apply only to the row-level lock(s) \u2014 the required <CodeLiteral>ROW SHARE</CodeLiteral> table-level lock is still taken in the ordinary way (see Chapter 13). You can use LOCK with the <CodeLiteral>NOWAIT</CodeLiteral> option first, if you need to acquire the table-level lock without waiting.\n If specific tables are named in a locking clause, then only rows coming from those tables are locked; any other tables used in the SELECT are simply read as usual. A locking clause without a table list affects all tables used in the statement. If a locking clause is applied to a view or sub-query, it affects all tables used in the view or sub-query. However, these clauses do not apply to <CodeLiteral>WITH</CodeLiteral> queries referenced by the primary query. If you want row locking to occur within a <CodeLiteral>WITH</CodeLiteral> query, specify a locking clause within the <CodeLiteral>WITH</CodeLiteral> query.\n Multiple locking clauses can be written if it is necessary to specify different locking behavior for different tables. If the same table is mentioned (or implicitly affected) by more than one locking clause, then it is processed as if it was only specified by the strongest one. Similarly, a table is processed as <CodeLiteral>NOWAIT</CodeLiteral> if that is specified in any of the clauses affecting it. Otherwise, it is processed as <CodeLiteral>SKIP LOCKED</CodeLiteral> if that is specified in any of the clauses affecting it.\n The locking clauses cannot be used in contexts where returned rows cannot be clearly identified with individual table rows; for example they cannot be used with aggregation.\n When a locking clause appears at the top level of a SELECT query, the rows that are locked are exactly those that are returned by the query; in the case of a join query, the rows locked are those that contribute to returned join rows. In addition, rows that satisfied the query conditions as of the query snapshot will be locked, although they will not be returned if they were updated after the snapshot and no longer satisfy the query conditions. If a <CodeLiteral>LIMIT</CodeLiteral> is used, locking stops once enough rows have been returned to satisfy the limit (but note that rows skipped over by <CodeLiteral>OFFSET</CodeLiteral> will get locked). Similarly, if a locking clause is used in a cursor's query, only rows actually fetched or stepped past by the cursor will be locked.\n When a locking clause appears in a sub-SELECT, the rows locked are those returned to the outer query by the sub-query. This might involve fewer rows than inspection of the sub-query alone would suggest, since conditions from the outer query might be used to optimize execution of the sub-query. For example,\n <code>SELECT * FROM (SELECT * FROM mytable FOR UPDATE) ss WHERE col1 = 5;\n</code>\n will lock only rows having <CodeLiteral>col1 = 5</CodeLiteral>, even though that condition is not textually within the sub-query.\n Previous releases failed to preserve a lock which is upgraded by a later savepoint. For example, this code:\n <code>BEGIN;\nSELECT * FROM mytable WHERE key = 1 FOR UPDATE;\nSAVEPOINT s;\nUPDATE mytable SET ... WHERE key = 1;\nROLLBACK TO s;\n</code>\n would fail to preserve the <CodeLiteral>FOR UPDATE</CodeLiteral> lock after the ROLLBACK TO. This has been fixed in release 9.3.\n \n  <ClauseName>Caution</ClauseName>\n  It is possible for a SELECT command running at the <CodeLiteral>READ COMMITTED</CodeLiteral> transaction isolation level and using <CodeLiteral>ORDER BY</CodeLiteral> and a locking clause to return rows out of order. This is because <CodeLiteral>ORDER BY</CodeLiteral> is applied first. The command sorts the result, but might then block trying to obtain a lock on one or more of the rows. Once the <CodeLiteral>SELECT</CodeLiteral> unblocks, some of the ordering column values might have been modified, leading to those rows appearing to be out of order (though they are in order in terms of the original column values). This can be worked around at need by placing the <CodeLiteral>FOR UPDATE/SHARE</CodeLiteral> clause in a sub-query, for example\n  <code>SELECT * FROM (SELECT * FROM mytable FOR UPDATE) ss ORDER BY column1;\n</code>\n  Note that this will result in locking all rows of mytable, whereas <CodeLiteral>FOR UPDATE</CodeLiteral> at the top level would lock only the actually returned rows. This can make for a significant performance difference, particularly if the <CodeLiteral>ORDER BY</CodeLiteral> is combined with <CodeLiteral>LIMIT</CodeLiteral> or other restrictions. So this technique is recommended only if concurrent updates of the ordering columns are expected and a strictly sorted result is required.\n  At the <CodeLiteral>REPEATABLE READ</CodeLiteral> or <CodeLiteral>SERIALIZABLE</CodeLiteral> transaction isolation level this would cause a serialization failure (with a <CodeLiteral>SQLSTATE</CodeLiteral> of <CodeLiteral>'40001'</CodeLiteral>), so there is no possibility of receiving rows out of order under these isolation levels. <sep>[DEMO]: SELECT * FROM employees FOR UPDATE;",
        "example": [
            "SELECT * FROM employees FOR UPDATE;"
        ],
        "link": []
    },
    {
        "type": "keyword",
        "keyword": "FOR NO KEY UPDATE",
        "tree": " (for_locking_strength FOR NO KEY UPDATE)",
        "description": "<CodeLiteral>FOR UPDATE</CodeLiteral>, <CodeLiteral>FOR NO KEY UPDATE</CodeLiteral>, <CodeLiteral>FOR SHARE</CodeLiteral> and <CodeLiteral>FOR KEY SHARE</CodeLiteral> are locking clauses; they affect how <CodeLiteral>SELECT</CodeLiteral> locks rows as they are obtained from the table.\n The locking clause has the general form\n <code>FOR lock_strength [ OF table_name [, ...] ] [ NOWAIT | SKIP LOCKED ]\n</code>\n where lock_strength can be one of\n <code>UPDATE\nNO KEY UPDATE\nSHARE\nKEY SHARE\n</code>\n For more information on each row-level lock mode, refer to Section 13.3.2.\n To prevent the operation from waiting for other transactions to commit, use either the <CodeLiteral>NOWAIT</CodeLiteral> or <CodeLiteral>SKIP LOCKED</CodeLiteral> option. With <CodeLiteral>NOWAIT</CodeLiteral>, the statement reports an error, rather than waiting, if a selected row cannot be locked immediately. With <CodeLiteral>SKIP LOCKED</CodeLiteral>, any selected rows that cannot be immediately locked are skipped. Skipping locked rows provides an inconsistent view of the data, so this is not suitable for general purpose work, but can be used to avoid lock contention with multiple consumers accessing a queue-like table. Note that <CodeLiteral>NOWAIT</CodeLiteral> and <CodeLiteral>SKIP LOCKED</CodeLiteral> apply only to the row-level lock(s) \u2014 the required <CodeLiteral>ROW SHARE</CodeLiteral> table-level lock is still taken in the ordinary way (see Chapter 13). You can use LOCK with the <CodeLiteral>NOWAIT</CodeLiteral> option first, if you need to acquire the table-level lock without waiting.\n If specific tables are named in a locking clause, then only rows coming from those tables are locked; any other tables used in the SELECT are simply read as usual. A locking clause without a table list affects all tables used in the statement. If a locking clause is applied to a view or sub-query, it affects all tables used in the view or sub-query. However, these clauses do not apply to <CodeLiteral>WITH</CodeLiteral> queries referenced by the primary query. If you want row locking to occur within a <CodeLiteral>WITH</CodeLiteral> query, specify a locking clause within the <CodeLiteral>WITH</CodeLiteral> query.\n Multiple locking clauses can be written if it is necessary to specify different locking behavior for different tables. If the same table is mentioned (or implicitly affected) by more than one locking clause, then it is processed as if it was only specified by the strongest one. Similarly, a table is processed as <CodeLiteral>NOWAIT</CodeLiteral> if that is specified in any of the clauses affecting it. Otherwise, it is processed as <CodeLiteral>SKIP LOCKED</CodeLiteral> if that is specified in any of the clauses affecting it.\n The locking clauses cannot be used in contexts where returned rows cannot be clearly identified with individual table rows; for example they cannot be used with aggregation.\n When a locking clause appears at the top level of a SELECT query, the rows that are locked are exactly those that are returned by the query; in the case of a join query, the rows locked are those that contribute to returned join rows. In addition, rows that satisfied the query conditions as of the query snapshot will be locked, although they will not be returned if they were updated after the snapshot and no longer satisfy the query conditions. If a <CodeLiteral>LIMIT</CodeLiteral> is used, locking stops once enough rows have been returned to satisfy the limit (but note that rows skipped over by <CodeLiteral>OFFSET</CodeLiteral> will get locked). Similarly, if a locking clause is used in a cursor's query, only rows actually fetched or stepped past by the cursor will be locked.\n When a locking clause appears in a sub-SELECT, the rows locked are those returned to the outer query by the sub-query. This might involve fewer rows than inspection of the sub-query alone would suggest, since conditions from the outer query might be used to optimize execution of the sub-query. For example,\n <code>SELECT * FROM (SELECT * FROM mytable FOR UPDATE) ss WHERE col1 = 5;\n</code>\n will lock only rows having <CodeLiteral>col1 = 5</CodeLiteral>, even though that condition is not textually within the sub-query.\n Previous releases failed to preserve a lock which is upgraded by a later savepoint. For example, this code:\n <code>BEGIN;\nSELECT * FROM mytable WHERE key = 1 FOR UPDATE;\nSAVEPOINT s;\nUPDATE mytable SET ... WHERE key = 1;\nROLLBACK TO s;\n</code>\n would fail to preserve the <CodeLiteral>FOR UPDATE</CodeLiteral> lock after the ROLLBACK TO. This has been fixed in release 9.3.\n \n  <ClauseName>Caution</ClauseName>\n  It is possible for a SELECT command running at the <CodeLiteral>READ COMMITTED</CodeLiteral> transaction isolation level and using <CodeLiteral>ORDER BY</CodeLiteral> and a locking clause to return rows out of order. This is because <CodeLiteral>ORDER BY</CodeLiteral> is applied first. The command sorts the result, but might then block trying to obtain a lock on one or more of the rows. Once the <CodeLiteral>SELECT</CodeLiteral> unblocks, some of the ordering column values might have been modified, leading to those rows appearing to be out of order (though they are in order in terms of the original column values). This can be worked around at need by placing the <CodeLiteral>FOR UPDATE/SHARE</CodeLiteral> clause in a sub-query, for example\n  <code>SELECT * FROM (SELECT * FROM mytable FOR UPDATE) ss ORDER BY column1;\n</code>\n  Note that this will result in locking all rows of mytable, whereas <CodeLiteral>FOR UPDATE</CodeLiteral> at the top level would lock only the actually returned rows. This can make for a significant performance difference, particularly if the <CodeLiteral>ORDER BY</CodeLiteral> is combined with <CodeLiteral>LIMIT</CodeLiteral> or other restrictions. So this technique is recommended only if concurrent updates of the ordering columns are expected and a strictly sorted result is required.\n  At the <CodeLiteral>REPEATABLE READ</CodeLiteral> or <CodeLiteral>SERIALIZABLE</CodeLiteral> transaction isolation level this would cause a serialization failure (with a <CodeLiteral>SQLSTATE</CodeLiteral> of <CodeLiteral>'40001'</CodeLiteral>), so there is no possibility of receiving rows out of order under these isolation levels. ",
        "detail": "[DESCRIPTION]: <CodeLiteral>FOR UPDATE</CodeLiteral>, <CodeLiteral>FOR NO KEY UPDATE</CodeLiteral>, <CodeLiteral>FOR SHARE</CodeLiteral> and <CodeLiteral>FOR KEY SHARE</CodeLiteral> are locking clauses; they affect how <CodeLiteral>SELECT</CodeLiteral> locks rows as they are obtained from the table.\n The locking clause has the general form\n <code>FOR lock_strength [ OF table_name [, ...] ] [ NOWAIT | SKIP LOCKED ]\n</code>\n where lock_strength can be one of\n <code>UPDATE\nNO KEY UPDATE\nSHARE\nKEY SHARE\n</code>\n For more information on each row-level lock mode, refer to Section 13.3.2.\n To prevent the operation from waiting for other transactions to commit, use either the <CodeLiteral>NOWAIT</CodeLiteral> or <CodeLiteral>SKIP LOCKED</CodeLiteral> option. With <CodeLiteral>NOWAIT</CodeLiteral>, the statement reports an error, rather than waiting, if a selected row cannot be locked immediately. With <CodeLiteral>SKIP LOCKED</CodeLiteral>, any selected rows that cannot be immediately locked are skipped. Skipping locked rows provides an inconsistent view of the data, so this is not suitable for general purpose work, but can be used to avoid lock contention with multiple consumers accessing a queue-like table. Note that <CodeLiteral>NOWAIT</CodeLiteral> and <CodeLiteral>SKIP LOCKED</CodeLiteral> apply only to the row-level lock(s) \u2014 the required <CodeLiteral>ROW SHARE</CodeLiteral> table-level lock is still taken in the ordinary way (see Chapter 13). You can use LOCK with the <CodeLiteral>NOWAIT</CodeLiteral> option first, if you need to acquire the table-level lock without waiting.\n If specific tables are named in a locking clause, then only rows coming from those tables are locked; any other tables used in the SELECT are simply read as usual. A locking clause without a table list affects all tables used in the statement. If a locking clause is applied to a view or sub-query, it affects all tables used in the view or sub-query. However, these clauses do not apply to <CodeLiteral>WITH</CodeLiteral> queries referenced by the primary query. If you want row locking to occur within a <CodeLiteral>WITH</CodeLiteral> query, specify a locking clause within the <CodeLiteral>WITH</CodeLiteral> query.\n Multiple locking clauses can be written if it is necessary to specify different locking behavior for different tables. If the same table is mentioned (or implicitly affected) by more than one locking clause, then it is processed as if it was only specified by the strongest one. Similarly, a table is processed as <CodeLiteral>NOWAIT</CodeLiteral> if that is specified in any of the clauses affecting it. Otherwise, it is processed as <CodeLiteral>SKIP LOCKED</CodeLiteral> if that is specified in any of the clauses affecting it.\n The locking clauses cannot be used in contexts where returned rows cannot be clearly identified with individual table rows; for example they cannot be used with aggregation.\n When a locking clause appears at the top level of a SELECT query, the rows that are locked are exactly those that are returned by the query; in the case of a join query, the rows locked are those that contribute to returned join rows. In addition, rows that satisfied the query conditions as of the query snapshot will be locked, although they will not be returned if they were updated after the snapshot and no longer satisfy the query conditions. If a <CodeLiteral>LIMIT</CodeLiteral> is used, locking stops once enough rows have been returned to satisfy the limit (but note that rows skipped over by <CodeLiteral>OFFSET</CodeLiteral> will get locked). Similarly, if a locking clause is used in a cursor's query, only rows actually fetched or stepped past by the cursor will be locked.\n When a locking clause appears in a sub-SELECT, the rows locked are those returned to the outer query by the sub-query. This might involve fewer rows than inspection of the sub-query alone would suggest, since conditions from the outer query might be used to optimize execution of the sub-query. For example,\n <code>SELECT * FROM (SELECT * FROM mytable FOR UPDATE) ss WHERE col1 = 5;\n</code>\n will lock only rows having <CodeLiteral>col1 = 5</CodeLiteral>, even though that condition is not textually within the sub-query.\n Previous releases failed to preserve a lock which is upgraded by a later savepoint. For example, this code:\n <code>BEGIN;\nSELECT * FROM mytable WHERE key = 1 FOR UPDATE;\nSAVEPOINT s;\nUPDATE mytable SET ... WHERE key = 1;\nROLLBACK TO s;\n</code>\n would fail to preserve the <CodeLiteral>FOR UPDATE</CodeLiteral> lock after the ROLLBACK TO. This has been fixed in release 9.3.\n \n  <ClauseName>Caution</ClauseName>\n  It is possible for a SELECT command running at the <CodeLiteral>READ COMMITTED</CodeLiteral> transaction isolation level and using <CodeLiteral>ORDER BY</CodeLiteral> and a locking clause to return rows out of order. This is because <CodeLiteral>ORDER BY</CodeLiteral> is applied first. The command sorts the result, but might then block trying to obtain a lock on one or more of the rows. Once the <CodeLiteral>SELECT</CodeLiteral> unblocks, some of the ordering column values might have been modified, leading to those rows appearing to be out of order (though they are in order in terms of the original column values). This can be worked around at need by placing the <CodeLiteral>FOR UPDATE/SHARE</CodeLiteral> clause in a sub-query, for example\n  <code>SELECT * FROM (SELECT * FROM mytable FOR UPDATE) ss ORDER BY column1;\n</code>\n  Note that this will result in locking all rows of mytable, whereas <CodeLiteral>FOR UPDATE</CodeLiteral> at the top level would lock only the actually returned rows. This can make for a significant performance difference, particularly if the <CodeLiteral>ORDER BY</CodeLiteral> is combined with <CodeLiteral>LIMIT</CodeLiteral> or other restrictions. So this technique is recommended only if concurrent updates of the ordering columns are expected and a strictly sorted result is required.\n  At the <CodeLiteral>REPEATABLE READ</CodeLiteral> or <CodeLiteral>SERIALIZABLE</CodeLiteral> transaction isolation level this would cause a serialization failure (with a <CodeLiteral>SQLSTATE</CodeLiteral> of <CodeLiteral>'40001'</CodeLiteral>), so there is no possibility of receiving rows out of order under these isolation levels. <sep>[DEMO]: SELECT * FROM employees WHERE department_id = 5 FOR NO KEY UPDATE;",
        "example": [
            "SELECT * FROM employees WHERE department_id = 5 FOR NO KEY UPDATE;"
        ],
        "link": []
    },
    {
        "type": "keyword",
        "keyword": "FOR SHARE",
        "tree": " (for_locking_strength FOR SHARE)",
        "description": "<CodeLiteral>FOR UPDATE</CodeLiteral>, <CodeLiteral>FOR NO KEY UPDATE</CodeLiteral>, <CodeLiteral>FOR SHARE</CodeLiteral> and <CodeLiteral>FOR KEY SHARE</CodeLiteral> are locking clauses; they affect how <CodeLiteral>SELECT</CodeLiteral> locks rows as they are obtained from the table.\n The locking clause has the general form\n <code>FOR lock_strength [ OF table_name [, ...] ] [ NOWAIT | SKIP LOCKED ]\n</code>\n where lock_strength can be one of\n <code>UPDATE\nNO KEY UPDATE\nSHARE\nKEY SHARE\n</code>\n For more information on each row-level lock mode, refer to Section 13.3.2.\n To prevent the operation from waiting for other transactions to commit, use either the <CodeLiteral>NOWAIT</CodeLiteral> or <CodeLiteral>SKIP LOCKED</CodeLiteral> option. With <CodeLiteral>NOWAIT</CodeLiteral>, the statement reports an error, rather than waiting, if a selected row cannot be locked immediately. With <CodeLiteral>SKIP LOCKED</CodeLiteral>, any selected rows that cannot be immediately locked are skipped. Skipping locked rows provides an inconsistent view of the data, so this is not suitable for general purpose work, but can be used to avoid lock contention with multiple consumers accessing a queue-like table. Note that <CodeLiteral>NOWAIT</CodeLiteral> and <CodeLiteral>SKIP LOCKED</CodeLiteral> apply only to the row-level lock(s) \u2014 the required <CodeLiteral>ROW SHARE</CodeLiteral> table-level lock is still taken in the ordinary way (see Chapter 13). You can use LOCK with the <CodeLiteral>NOWAIT</CodeLiteral> option first, if you need to acquire the table-level lock without waiting.\n If specific tables are named in a locking clause, then only rows coming from those tables are locked; any other tables used in the SELECT are simply read as usual. A locking clause without a table list affects all tables used in the statement. If a locking clause is applied to a view or sub-query, it affects all tables used in the view or sub-query. However, these clauses do not apply to <CodeLiteral>WITH</CodeLiteral> queries referenced by the primary query. If you want row locking to occur within a <CodeLiteral>WITH</CodeLiteral> query, specify a locking clause within the <CodeLiteral>WITH</CodeLiteral> query.\n Multiple locking clauses can be written if it is necessary to specify different locking behavior for different tables. If the same table is mentioned (or implicitly affected) by more than one locking clause, then it is processed as if it was only specified by the strongest one. Similarly, a table is processed as <CodeLiteral>NOWAIT</CodeLiteral> if that is specified in any of the clauses affecting it. Otherwise, it is processed as <CodeLiteral>SKIP LOCKED</CodeLiteral> if that is specified in any of the clauses affecting it.\n The locking clauses cannot be used in contexts where returned rows cannot be clearly identified with individual table rows; for example they cannot be used with aggregation.\n When a locking clause appears at the top level of a SELECT query, the rows that are locked are exactly those that are returned by the query; in the case of a join query, the rows locked are those that contribute to returned join rows. In addition, rows that satisfied the query conditions as of the query snapshot will be locked, although they will not be returned if they were updated after the snapshot and no longer satisfy the query conditions. If a <CodeLiteral>LIMIT</CodeLiteral> is used, locking stops once enough rows have been returned to satisfy the limit (but note that rows skipped over by <CodeLiteral>OFFSET</CodeLiteral> will get locked). Similarly, if a locking clause is used in a cursor's query, only rows actually fetched or stepped past by the cursor will be locked.\n When a locking clause appears in a sub-SELECT, the rows locked are those returned to the outer query by the sub-query. This might involve fewer rows than inspection of the sub-query alone would suggest, since conditions from the outer query might be used to optimize execution of the sub-query. For example,\n <code>SELECT * FROM (SELECT * FROM mytable FOR UPDATE) ss WHERE col1 = 5;\n</code>\n will lock only rows having <CodeLiteral>col1 = 5</CodeLiteral>, even though that condition is not textually within the sub-query.\n Previous releases failed to preserve a lock which is upgraded by a later savepoint. For example, this code:\n <code>BEGIN;\nSELECT * FROM mytable WHERE key = 1 FOR UPDATE;\nSAVEPOINT s;\nUPDATE mytable SET ... WHERE key = 1;\nROLLBACK TO s;\n</code>\n would fail to preserve the <CodeLiteral>FOR UPDATE</CodeLiteral> lock after the ROLLBACK TO. This has been fixed in release 9.3.\n \n  <ClauseName>Caution</ClauseName>\n  It is possible for a SELECT command running at the <CodeLiteral>READ COMMITTED</CodeLiteral> transaction isolation level and using <CodeLiteral>ORDER BY</CodeLiteral> and a locking clause to return rows out of order. This is because <CodeLiteral>ORDER BY</CodeLiteral> is applied first. The command sorts the result, but might then block trying to obtain a lock on one or more of the rows. Once the <CodeLiteral>SELECT</CodeLiteral> unblocks, some of the ordering column values might have been modified, leading to those rows appearing to be out of order (though they are in order in terms of the original column values). This can be worked around at need by placing the <CodeLiteral>FOR UPDATE/SHARE</CodeLiteral> clause in a sub-query, for example\n  <code>SELECT * FROM (SELECT * FROM mytable FOR UPDATE) ss ORDER BY column1;\n</code>\n  Note that this will result in locking all rows of mytable, whereas <CodeLiteral>FOR UPDATE</CodeLiteral> at the top level would lock only the actually returned rows. This can make for a significant performance difference, particularly if the <CodeLiteral>ORDER BY</CodeLiteral> is combined with <CodeLiteral>LIMIT</CodeLiteral> or other restrictions. So this technique is recommended only if concurrent updates of the ordering columns are expected and a strictly sorted result is required.\n  At the <CodeLiteral>REPEATABLE READ</CodeLiteral> or <CodeLiteral>SERIALIZABLE</CodeLiteral> transaction isolation level this would cause a serialization failure (with a <CodeLiteral>SQLSTATE</CodeLiteral> of <CodeLiteral>'40001'</CodeLiteral>), so there is no possibility of receiving rows out of order under these isolation levels. ",
        "detail": "[DESCRIPTION]: <CodeLiteral>FOR UPDATE</CodeLiteral>, <CodeLiteral>FOR NO KEY UPDATE</CodeLiteral>, <CodeLiteral>FOR SHARE</CodeLiteral> and <CodeLiteral>FOR KEY SHARE</CodeLiteral> are locking clauses; they affect how <CodeLiteral>SELECT</CodeLiteral> locks rows as they are obtained from the table.\n The locking clause has the general form\n <code>FOR lock_strength [ OF table_name [, ...] ] [ NOWAIT | SKIP LOCKED ]\n</code>\n where lock_strength can be one of\n <code>UPDATE\nNO KEY UPDATE\nSHARE\nKEY SHARE\n</code>\n For more information on each row-level lock mode, refer to Section 13.3.2.\n To prevent the operation from waiting for other transactions to commit, use either the <CodeLiteral>NOWAIT</CodeLiteral> or <CodeLiteral>SKIP LOCKED</CodeLiteral> option. With <CodeLiteral>NOWAIT</CodeLiteral>, the statement reports an error, rather than waiting, if a selected row cannot be locked immediately. With <CodeLiteral>SKIP LOCKED</CodeLiteral>, any selected rows that cannot be immediately locked are skipped. Skipping locked rows provides an inconsistent view of the data, so this is not suitable for general purpose work, but can be used to avoid lock contention with multiple consumers accessing a queue-like table. Note that <CodeLiteral>NOWAIT</CodeLiteral> and <CodeLiteral>SKIP LOCKED</CodeLiteral> apply only to the row-level lock(s) \u2014 the required <CodeLiteral>ROW SHARE</CodeLiteral> table-level lock is still taken in the ordinary way (see Chapter 13). You can use LOCK with the <CodeLiteral>NOWAIT</CodeLiteral> option first, if you need to acquire the table-level lock without waiting.\n If specific tables are named in a locking clause, then only rows coming from those tables are locked; any other tables used in the SELECT are simply read as usual. A locking clause without a table list affects all tables used in the statement. If a locking clause is applied to a view or sub-query, it affects all tables used in the view or sub-query. However, these clauses do not apply to <CodeLiteral>WITH</CodeLiteral> queries referenced by the primary query. If you want row locking to occur within a <CodeLiteral>WITH</CodeLiteral> query, specify a locking clause within the <CodeLiteral>WITH</CodeLiteral> query.\n Multiple locking clauses can be written if it is necessary to specify different locking behavior for different tables. If the same table is mentioned (or implicitly affected) by more than one locking clause, then it is processed as if it was only specified by the strongest one. Similarly, a table is processed as <CodeLiteral>NOWAIT</CodeLiteral> if that is specified in any of the clauses affecting it. Otherwise, it is processed as <CodeLiteral>SKIP LOCKED</CodeLiteral> if that is specified in any of the clauses affecting it.\n The locking clauses cannot be used in contexts where returned rows cannot be clearly identified with individual table rows; for example they cannot be used with aggregation.\n When a locking clause appears at the top level of a SELECT query, the rows that are locked are exactly those that are returned by the query; in the case of a join query, the rows locked are those that contribute to returned join rows. In addition, rows that satisfied the query conditions as of the query snapshot will be locked, although they will not be returned if they were updated after the snapshot and no longer satisfy the query conditions. If a <CodeLiteral>LIMIT</CodeLiteral> is used, locking stops once enough rows have been returned to satisfy the limit (but note that rows skipped over by <CodeLiteral>OFFSET</CodeLiteral> will get locked). Similarly, if a locking clause is used in a cursor's query, only rows actually fetched or stepped past by the cursor will be locked.\n When a locking clause appears in a sub-SELECT, the rows locked are those returned to the outer query by the sub-query. This might involve fewer rows than inspection of the sub-query alone would suggest, since conditions from the outer query might be used to optimize execution of the sub-query. For example,\n <code>SELECT * FROM (SELECT * FROM mytable FOR UPDATE) ss WHERE col1 = 5;\n</code>\n will lock only rows having <CodeLiteral>col1 = 5</CodeLiteral>, even though that condition is not textually within the sub-query.\n Previous releases failed to preserve a lock which is upgraded by a later savepoint. For example, this code:\n <code>BEGIN;\nSELECT * FROM mytable WHERE key = 1 FOR UPDATE;\nSAVEPOINT s;\nUPDATE mytable SET ... WHERE key = 1;\nROLLBACK TO s;\n</code>\n would fail to preserve the <CodeLiteral>FOR UPDATE</CodeLiteral> lock after the ROLLBACK TO. This has been fixed in release 9.3.\n \n  <ClauseName>Caution</ClauseName>\n  It is possible for a SELECT command running at the <CodeLiteral>READ COMMITTED</CodeLiteral> transaction isolation level and using <CodeLiteral>ORDER BY</CodeLiteral> and a locking clause to return rows out of order. This is because <CodeLiteral>ORDER BY</CodeLiteral> is applied first. The command sorts the result, but might then block trying to obtain a lock on one or more of the rows. Once the <CodeLiteral>SELECT</CodeLiteral> unblocks, some of the ordering column values might have been modified, leading to those rows appearing to be out of order (though they are in order in terms of the original column values). This can be worked around at need by placing the <CodeLiteral>FOR UPDATE/SHARE</CodeLiteral> clause in a sub-query, for example\n  <code>SELECT * FROM (SELECT * FROM mytable FOR UPDATE) ss ORDER BY column1;\n</code>\n  Note that this will result in locking all rows of mytable, whereas <CodeLiteral>FOR UPDATE</CodeLiteral> at the top level would lock only the actually returned rows. This can make for a significant performance difference, particularly if the <CodeLiteral>ORDER BY</CodeLiteral> is combined with <CodeLiteral>LIMIT</CodeLiteral> or other restrictions. So this technique is recommended only if concurrent updates of the ordering columns are expected and a strictly sorted result is required.\n  At the <CodeLiteral>REPEATABLE READ</CodeLiteral> or <CodeLiteral>SERIALIZABLE</CodeLiteral> transaction isolation level this would cause a serialization failure (with a <CodeLiteral>SQLSTATE</CodeLiteral> of <CodeLiteral>'40001'</CodeLiteral>), so there is no possibility of receiving rows out of order under these isolation levels. <sep>[DEMO]: SELECT * FROM employees FOR SHARE;",
        "example": [
            "SELECT * FROM employees FOR SHARE;"
        ],
        "link": []
    },
    {
        "type": "keyword",
        "keyword": "FOR KEY SHARE",
        "tree": " (for_locking_strength FOR KEY SHARE)",
        "description": "<CodeLiteral>FOR UPDATE</CodeLiteral>, <CodeLiteral>FOR NO KEY UPDATE</CodeLiteral>, <CodeLiteral>FOR SHARE</CodeLiteral> and <CodeLiteral>FOR KEY SHARE</CodeLiteral> are locking clauses; they affect how <CodeLiteral>SELECT</CodeLiteral> locks rows as they are obtained from the table.\n The locking clause has the general form\n <code>FOR lock_strength [ OF table_name [, ...] ] [ NOWAIT | SKIP LOCKED ]\n</code>\n where lock_strength can be one of\n <code>UPDATE\nNO KEY UPDATE\nSHARE\nKEY SHARE\n</code>\n For more information on each row-level lock mode, refer to Section 13.3.2.\n To prevent the operation from waiting for other transactions to commit, use either the <CodeLiteral>NOWAIT</CodeLiteral> or <CodeLiteral>SKIP LOCKED</CodeLiteral> option. With <CodeLiteral>NOWAIT</CodeLiteral>, the statement reports an error, rather than waiting, if a selected row cannot be locked immediately. With <CodeLiteral>SKIP LOCKED</CodeLiteral>, any selected rows that cannot be immediately locked are skipped. Skipping locked rows provides an inconsistent view of the data, so this is not suitable for general purpose work, but can be used to avoid lock contention with multiple consumers accessing a queue-like table. Note that <CodeLiteral>NOWAIT</CodeLiteral> and <CodeLiteral>SKIP LOCKED</CodeLiteral> apply only to the row-level lock(s) \u2014 the required <CodeLiteral>ROW SHARE</CodeLiteral> table-level lock is still taken in the ordinary way (see Chapter 13). You can use LOCK with the <CodeLiteral>NOWAIT</CodeLiteral> option first, if you need to acquire the table-level lock without waiting.\n If specific tables are named in a locking clause, then only rows coming from those tables are locked; any other tables used in the SELECT are simply read as usual. A locking clause without a table list affects all tables used in the statement. If a locking clause is applied to a view or sub-query, it affects all tables used in the view or sub-query. However, these clauses do not apply to <CodeLiteral>WITH</CodeLiteral> queries referenced by the primary query. If you want row locking to occur within a <CodeLiteral>WITH</CodeLiteral> query, specify a locking clause within the <CodeLiteral>WITH</CodeLiteral> query.\n Multiple locking clauses can be written if it is necessary to specify different locking behavior for different tables. If the same table is mentioned (or implicitly affected) by more than one locking clause, then it is processed as if it was only specified by the strongest one. Similarly, a table is processed as <CodeLiteral>NOWAIT</CodeLiteral> if that is specified in any of the clauses affecting it. Otherwise, it is processed as <CodeLiteral>SKIP LOCKED</CodeLiteral> if that is specified in any of the clauses affecting it.\n The locking clauses cannot be used in contexts where returned rows cannot be clearly identified with individual table rows; for example they cannot be used with aggregation.\n When a locking clause appears at the top level of a SELECT query, the rows that are locked are exactly those that are returned by the query; in the case of a join query, the rows locked are those that contribute to returned join rows. In addition, rows that satisfied the query conditions as of the query snapshot will be locked, although they will not be returned if they were updated after the snapshot and no longer satisfy the query conditions. If a <CodeLiteral>LIMIT</CodeLiteral> is used, locking stops once enough rows have been returned to satisfy the limit (but note that rows skipped over by <CodeLiteral>OFFSET</CodeLiteral> will get locked). Similarly, if a locking clause is used in a cursor's query, only rows actually fetched or stepped past by the cursor will be locked.\n When a locking clause appears in a sub-SELECT, the rows locked are those returned to the outer query by the sub-query. This might involve fewer rows than inspection of the sub-query alone would suggest, since conditions from the outer query might be used to optimize execution of the sub-query. For example,\n <code>SELECT * FROM (SELECT * FROM mytable FOR UPDATE) ss WHERE col1 = 5;\n</code>\n will lock only rows having <CodeLiteral>col1 = 5</CodeLiteral>, even though that condition is not textually within the sub-query.\n Previous releases failed to preserve a lock which is upgraded by a later savepoint. For example, this code:\n <code>BEGIN;\nSELECT * FROM mytable WHERE key = 1 FOR UPDATE;\nSAVEPOINT s;\nUPDATE mytable SET ... WHERE key = 1;\nROLLBACK TO s;\n</code>\n would fail to preserve the <CodeLiteral>FOR UPDATE</CodeLiteral> lock after the ROLLBACK TO. This has been fixed in release 9.3.\n \n  <ClauseName>Caution</ClauseName>\n  It is possible for a SELECT command running at the <CodeLiteral>READ COMMITTED</CodeLiteral> transaction isolation level and using <CodeLiteral>ORDER BY</CodeLiteral> and a locking clause to return rows out of order. This is because <CodeLiteral>ORDER BY</CodeLiteral> is applied first. The command sorts the result, but might then block trying to obtain a lock on one or more of the rows. Once the <CodeLiteral>SELECT</CodeLiteral> unblocks, some of the ordering column values might have been modified, leading to those rows appearing to be out of order (though they are in order in terms of the original column values). This can be worked around at need by placing the <CodeLiteral>FOR UPDATE/SHARE</CodeLiteral> clause in a sub-query, for example\n  <code>SELECT * FROM (SELECT * FROM mytable FOR UPDATE) ss ORDER BY column1;\n</code>\n  Note that this will result in locking all rows of mytable, whereas <CodeLiteral>FOR UPDATE</CodeLiteral> at the top level would lock only the actually returned rows. This can make for a significant performance difference, particularly if the <CodeLiteral>ORDER BY</CodeLiteral> is combined with <CodeLiteral>LIMIT</CodeLiteral> or other restrictions. So this technique is recommended only if concurrent updates of the ordering columns are expected and a strictly sorted result is required.\n  At the <CodeLiteral>REPEATABLE READ</CodeLiteral> or <CodeLiteral>SERIALIZABLE</CodeLiteral> transaction isolation level this would cause a serialization failure (with a <CodeLiteral>SQLSTATE</CodeLiteral> of <CodeLiteral>'40001'</CodeLiteral>), so there is no possibility of receiving rows out of order under these isolation levels. ",
        "detail": "[DESCRIPTION]: <CodeLiteral>FOR UPDATE</CodeLiteral>, <CodeLiteral>FOR NO KEY UPDATE</CodeLiteral>, <CodeLiteral>FOR SHARE</CodeLiteral> and <CodeLiteral>FOR KEY SHARE</CodeLiteral> are locking clauses; they affect how <CodeLiteral>SELECT</CodeLiteral> locks rows as they are obtained from the table.\n The locking clause has the general form\n <code>FOR lock_strength [ OF table_name [, ...] ] [ NOWAIT | SKIP LOCKED ]\n</code>\n where lock_strength can be one of\n <code>UPDATE\nNO KEY UPDATE\nSHARE\nKEY SHARE\n</code>\n For more information on each row-level lock mode, refer to Section 13.3.2.\n To prevent the operation from waiting for other transactions to commit, use either the <CodeLiteral>NOWAIT</CodeLiteral> or <CodeLiteral>SKIP LOCKED</CodeLiteral> option. With <CodeLiteral>NOWAIT</CodeLiteral>, the statement reports an error, rather than waiting, if a selected row cannot be locked immediately. With <CodeLiteral>SKIP LOCKED</CodeLiteral>, any selected rows that cannot be immediately locked are skipped. Skipping locked rows provides an inconsistent view of the data, so this is not suitable for general purpose work, but can be used to avoid lock contention with multiple consumers accessing a queue-like table. Note that <CodeLiteral>NOWAIT</CodeLiteral> and <CodeLiteral>SKIP LOCKED</CodeLiteral> apply only to the row-level lock(s) \u2014 the required <CodeLiteral>ROW SHARE</CodeLiteral> table-level lock is still taken in the ordinary way (see Chapter 13). You can use LOCK with the <CodeLiteral>NOWAIT</CodeLiteral> option first, if you need to acquire the table-level lock without waiting.\n If specific tables are named in a locking clause, then only rows coming from those tables are locked; any other tables used in the SELECT are simply read as usual. A locking clause without a table list affects all tables used in the statement. If a locking clause is applied to a view or sub-query, it affects all tables used in the view or sub-query. However, these clauses do not apply to <CodeLiteral>WITH</CodeLiteral> queries referenced by the primary query. If you want row locking to occur within a <CodeLiteral>WITH</CodeLiteral> query, specify a locking clause within the <CodeLiteral>WITH</CodeLiteral> query.\n Multiple locking clauses can be written if it is necessary to specify different locking behavior for different tables. If the same table is mentioned (or implicitly affected) by more than one locking clause, then it is processed as if it was only specified by the strongest one. Similarly, a table is processed as <CodeLiteral>NOWAIT</CodeLiteral> if that is specified in any of the clauses affecting it. Otherwise, it is processed as <CodeLiteral>SKIP LOCKED</CodeLiteral> if that is specified in any of the clauses affecting it.\n The locking clauses cannot be used in contexts where returned rows cannot be clearly identified with individual table rows; for example they cannot be used with aggregation.\n When a locking clause appears at the top level of a SELECT query, the rows that are locked are exactly those that are returned by the query; in the case of a join query, the rows locked are those that contribute to returned join rows. In addition, rows that satisfied the query conditions as of the query snapshot will be locked, although they will not be returned if they were updated after the snapshot and no longer satisfy the query conditions. If a <CodeLiteral>LIMIT</CodeLiteral> is used, locking stops once enough rows have been returned to satisfy the limit (but note that rows skipped over by <CodeLiteral>OFFSET</CodeLiteral> will get locked). Similarly, if a locking clause is used in a cursor's query, only rows actually fetched or stepped past by the cursor will be locked.\n When a locking clause appears in a sub-SELECT, the rows locked are those returned to the outer query by the sub-query. This might involve fewer rows than inspection of the sub-query alone would suggest, since conditions from the outer query might be used to optimize execution of the sub-query. For example,\n <code>SELECT * FROM (SELECT * FROM mytable FOR UPDATE) ss WHERE col1 = 5;\n</code>\n will lock only rows having <CodeLiteral>col1 = 5</CodeLiteral>, even though that condition is not textually within the sub-query.\n Previous releases failed to preserve a lock which is upgraded by a later savepoint. For example, this code:\n <code>BEGIN;\nSELECT * FROM mytable WHERE key = 1 FOR UPDATE;\nSAVEPOINT s;\nUPDATE mytable SET ... WHERE key = 1;\nROLLBACK TO s;\n</code>\n would fail to preserve the <CodeLiteral>FOR UPDATE</CodeLiteral> lock after the ROLLBACK TO. This has been fixed in release 9.3.\n \n  <ClauseName>Caution</ClauseName>\n  It is possible for a SELECT command running at the <CodeLiteral>READ COMMITTED</CodeLiteral> transaction isolation level and using <CodeLiteral>ORDER BY</CodeLiteral> and a locking clause to return rows out of order. This is because <CodeLiteral>ORDER BY</CodeLiteral> is applied first. The command sorts the result, but might then block trying to obtain a lock on one or more of the rows. Once the <CodeLiteral>SELECT</CodeLiteral> unblocks, some of the ordering column values might have been modified, leading to those rows appearing to be out of order (though they are in order in terms of the original column values). This can be worked around at need by placing the <CodeLiteral>FOR UPDATE/SHARE</CodeLiteral> clause in a sub-query, for example\n  <code>SELECT * FROM (SELECT * FROM mytable FOR UPDATE) ss ORDER BY column1;\n</code>\n  Note that this will result in locking all rows of mytable, whereas <CodeLiteral>FOR UPDATE</CodeLiteral> at the top level would lock only the actually returned rows. This can make for a significant performance difference, particularly if the <CodeLiteral>ORDER BY</CodeLiteral> is combined with <CodeLiteral>LIMIT</CodeLiteral> or other restrictions. So this technique is recommended only if concurrent updates of the ordering columns are expected and a strictly sorted result is required.\n  At the <CodeLiteral>REPEATABLE READ</CodeLiteral> or <CodeLiteral>SERIALIZABLE</CodeLiteral> transaction isolation level this would cause a serialization failure (with a <CodeLiteral>SQLSTATE</CodeLiteral> of <CodeLiteral>'40001'</CodeLiteral>), so there is no possibility of receiving rows out of order under these isolation levels. <sep>[DEMO]: SELECT * FROM employees FOR KEY SHARE;",
        "example": [
            "SELECT * FROM employees FOR KEY SHARE;"
        ],
        "link": []
    },
    {
        "type": "keyword",
        "keyword": "TABLE ONLY table_name",
        "tree": "(simple_select_pramary TABLE (relation_expr ONLY))",
        "description": "The command\n <code>TABLE name\n</code>\n is equivalent to\n <code>SELECT * FROM name\n</code>\n It can be used as a top-level command or as a space-saving syntax variant in parts of complex queries. Only the <CodeLiteral>WITH</CodeLiteral>, <CodeLiteral>UNION</CodeLiteral>, <CodeLiteral>INTERSECT</CodeLiteral>, <CodeLiteral>EXCEPT</CodeLiteral>, <CodeLiteral>ORDER BY</CodeLiteral>, <CodeLiteral>LIMIT</CodeLiteral>, <CodeLiteral>OFFSET</CodeLiteral>, <CodeLiteral>FETCH</CodeLiteral> and <CodeLiteral>FOR</CodeLiteral> locking clauses can be used with TABLE; the <CodeLiteral>WHERE</CodeLiteral> clause and any form of aggregation cannot be used. ",
        "detail": "[DESCRIPTION]: The command\n <code>TABLE name\n</code>\n is equivalent to\n <code>SELECT * FROM name\n</code>\n It can be used as a top-level command or as a space-saving syntax variant in parts of complex queries. Only the <CodeLiteral>WITH</CodeLiteral>, <CodeLiteral>UNION</CodeLiteral>, <CodeLiteral>INTERSECT</CodeLiteral>, <CodeLiteral>EXCEPT</CodeLiteral>, <CodeLiteral>ORDER BY</CodeLiteral>, <CodeLiteral>LIMIT</CodeLiteral>, <CodeLiteral>OFFSET</CodeLiteral>, <CodeLiteral>FETCH</CodeLiteral> and <CodeLiteral>FOR</CodeLiteral> locking clauses can be used with TABLE; the <CodeLiteral>WHERE</CodeLiteral> clause and any form of aggregation cannot be used. <sep>[DEMO]: TABLE ONLY employees",
        "example": [
            "TABLE ONLY employees"
        ],
        "link": []
    },
    {
        "type": "keyword",
        "keyword": "TABLE table_name *",
        "tree": "(simple_select_pramary TABLE)",
        "description": "The command\n <code>TABLE name\n</code>\n is equivalent to\n <code>SELECT * FROM name\n</code>\n It can be used as a top-level command or as a space-saving syntax variant in parts of complex queries. Only the <CodeLiteral>WITH</CodeLiteral>, <CodeLiteral>UNION</CodeLiteral>, <CodeLiteral>INTERSECT</CodeLiteral>, <CodeLiteral>EXCEPT</CodeLiteral>, <CodeLiteral>ORDER BY</CodeLiteral>, <CodeLiteral>LIMIT</CodeLiteral>, <CodeLiteral>OFFSET</CodeLiteral>, <CodeLiteral>FETCH</CodeLiteral> and <CodeLiteral>FOR</CodeLiteral> locking clauses can be used with TABLE; the <CodeLiteral>WHERE</CodeLiteral> clause and any form of aggregation cannot be used. ",
        "detail": "[DESCRIPTION]: The command\n <code>TABLE name\n</code>\n is equivalent to\n <code>SELECT * FROM name\n</code>\n It can be used as a top-level command or as a space-saving syntax variant in parts of complex queries. Only the <CodeLiteral>WITH</CodeLiteral>, <CodeLiteral>UNION</CodeLiteral>, <CodeLiteral>INTERSECT</CodeLiteral>, <CodeLiteral>EXCEPT</CodeLiteral>, <CodeLiteral>ORDER BY</CodeLiteral>, <CodeLiteral>LIMIT</CodeLiteral>, <CodeLiteral>OFFSET</CodeLiteral>, <CodeLiteral>FETCH</CodeLiteral> and <CodeLiteral>FOR</CodeLiteral> locking clauses can be used with TABLE; the <CodeLiteral>WHERE</CodeLiteral> clause and any form of aggregation cannot be used. <sep>[DEMO]: TABLE employees;",
        "example": [
            "TABLE employees;"
        ],
        "link": []
    },
    {
        "type": "keyword",
        "keyword": "TABLE table_name",
        "tree": "(simple_select_pramary TABLE)",
        "description": "The command\n <code>TABLE name\n</code>\n is equivalent to\n <code>SELECT * FROM name\n</code>\n It can be used as a top-level command or as a space-saving syntax variant in parts of complex queries. Only the <CodeLiteral>WITH</CodeLiteral>, <CodeLiteral>UNION</CodeLiteral>, <CodeLiteral>INTERSECT</CodeLiteral>, <CodeLiteral>EXCEPT</CodeLiteral>, <CodeLiteral>ORDER BY</CodeLiteral>, <CodeLiteral>LIMIT</CodeLiteral>, <CodeLiteral>OFFSET</CodeLiteral>, <CodeLiteral>FETCH</CodeLiteral> and <CodeLiteral>FOR</CodeLiteral> locking clauses can be used with TABLE; the <CodeLiteral>WHERE</CodeLiteral> clause and any form of aggregation cannot be used. ",
        "detail": "[DESCRIPTION]: The command\n <code>TABLE name\n</code>\n is equivalent to\n <code>SELECT * FROM name\n</code>\n It can be used as a top-level command or as a space-saving syntax variant in parts of complex queries. Only the <CodeLiteral>WITH</CodeLiteral>, <CodeLiteral>UNION</CodeLiteral>, <CodeLiteral>INTERSECT</CodeLiteral>, <CodeLiteral>EXCEPT</CodeLiteral>, <CodeLiteral>ORDER BY</CodeLiteral>, <CodeLiteral>LIMIT</CodeLiteral>, <CodeLiteral>OFFSET</CodeLiteral>, <CodeLiteral>FETCH</CodeLiteral> and <CodeLiteral>FOR</CodeLiteral> locking clauses can be used with TABLE; the <CodeLiteral>WHERE</CodeLiteral> clause and any form of aggregation cannot be used. <sep>[DEMO]: TABLE employees;",
        "example": [
            "TABLE employees;"
        ],
        "link": []
    },
    {
        "type": "operator",
        "keyword": "a BETWEEN x AND y",
        "tree": "(a_expr_between BETWEEN AND)",
        "description": "between",
        "detail": "[DESCRIPTION]: between<sep>[EXAMPLE]: SELECT * FROM orders WHERE order_date BETWEEN '2024-01-01' AND '2024-03-31';<sep>[COMPENSATE]: Notice that <code>BETWEEN</code> treats the endpoint values as included in the range. <code>NOT BETWEEN</code> does the opposite comparison:;  <code>BETWEEN SYMMETRIC</code> is like <code>BETWEEN</code> except there is no requirement that the argument to the left of <code>AND</code> be less than or equal to the argument on the right. If it is not, those two arguments are automatically swapped, so that a nonempty range is always implied.",
        "example": [
            "SELECT * FROM orders WHERE order_date BETWEEN '2024-01-01' AND '2024-03-31';"
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-comparison.html"
        ]
    },
    {
        "type": "operator",
        "keyword": "a NOT BETWEEN x AND y",
        "tree": "(a_expr_between NOT BETWEEN AND)",
        "description": "not between",
        "detail": "[DESCRIPTION]: not between<sep>[EXAMPLE]: SELECT * FROM orders WHERE order_date NOT BETWEEN '2024-01-01' AND '2024-03-31';<sep>[COMPENSATE]: Notice that <code>BETWEEN</code> treats the endpoint values as included in the range. <code>NOT BETWEEN</code> does the opposite comparison:;  <code>BETWEEN SYMMETRIC</code> is like <code>BETWEEN</code> except there is no requirement that the argument to the left of <code>AND</code> be less than or equal to the argument on the right. If it is not, those two arguments are automatically swapped, so that a nonempty range is always implied.",
        "example": [
            "SELECT * FROM orders WHERE order_date NOT BETWEEN '2024-01-01' AND '2024-03-31';"
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-comparison.html"
        ]
    },
    {
        "type": "operator",
        "keyword": "a BETWEEN SYMMETRIC x AND y",
        "tree": "(a_expr_between BETWEEN SYMMETRIC AND)",
        "description": "between, after sorting the comparison values",
        "detail": "[DESCRIPTION]: between, after sorting the comparison values<sep>[EXAMPLE]: SELECT * FROM orders WHERE amount BETWEEN SYMMETRIC 100 AND 200;<sep>[COMPENSATE]:  The <code>BETWEEN</code> predicate simplifies range tests:; Notice that <code>BETWEEN</code> treats the endpoint values as included in the range. <code>NOT BETWEEN</code> does the opposite comparison:;  <code>BETWEEN SYMMETRIC</code> is like <code>BETWEEN</code> except there is no requirement that the argument to the left of <code>AND</code> be less than or equal to the argument on the right. If it is not, those two arguments are automatically swapped, so that a nonempty range is always implied.",
        "example": [
            "SELECT * FROM orders WHERE amount BETWEEN SYMMETRIC 100 AND 200;"
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-comparison.html"
        ]
    },
    {
        "type": "operator",
        "keyword": "a NOT BETWEEN SYMMETRIC x AND y",
        "tree": "(a_expr_between NOT BETWEEN SYMMETRIC AND)",
        "description": "not between, after sorting the comparison values",
        "detail": "[DESCRIPTION]: not between, after sorting the comparison values<sep>[EXAMPLE]: SELECT * FROM orders WHERE amount NOT BETWEEN SYMMETRIC 100 AND 200;<sep>[COMPENSATE]:  The <code>BETWEEN</code> predicate simplifies range tests:; Notice that <code>BETWEEN</code> treats the endpoint values as included in the range. <code>NOT BETWEEN</code> does the opposite comparison:;  <code>BETWEEN SYMMETRIC</code> is like <code>BETWEEN</code> except there is no requirement that the argument to the left of <code>AND</code> be less than or equal to the argument on the right. If it is not, those two arguments are automatically swapped, so that a nonempty range is always implied.",
        "example": [
            "SELECT * FROM orders WHERE amount NOT BETWEEN SYMMETRIC 100 AND 200;"
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-comparison.html"
        ]
    },
    {
        "type": "operator",
        "keyword": "a IS DISTINCT FROM b",
        "tree": "(a_expr_is_not IS DISTINCT FROM)",
        "description": "not equal, treating null like an ordinary value",
        "detail": "[DESCRIPTION]: not equal, treating null like an ordinary value<sep>[EXAMPLE]: SELECT * FROM orders WHERE customer_name IS DISTINCT FROM 'John Doe';<sep>[COMPENSATE]:   Ordinary comparison operators yield null (signifying \u201cunknown\u201d), not true or false, when either input is null. For example, <code>7 = NULL</code> yields null, as does <code>7 <> NULL</code>. When this behavior is not suitable, use the <code>IS [ NOT ] DISTINCT FROM</code> predicates:; For non-null inputs, <code>IS DISTINCT FROM</code> is the same as the <code><></code> operator. However, if both inputs are null it returns false, and if only one input is null it returns true. Similarly, <code>IS NOT DISTINCT FROM</code> is identical to <code>=</code> for non-null inputs, but it returns true when both inputs are null, and false when only one input is null. Thus, these predicates effectively act as though null were a normal data value, rather than \u201cunknown\u201d.; If the <code>expression</code> is row-valued, then <code>IS NULL</code> is true when the row expression itself is null or when all the row's fields are null, while <code>IS NOT NULL</code> is true when the row expression itself is non-null and all the row's fields are non-null. Because of this behavior, <code>IS NULL</code> and <code>IS NOT NULL</code> do not always return inverse results for row-valued expressions; in particular, a row-valued expression that contains both null and non-null fields will return false for both tests. In some cases, it may be preferable to write <code>row</code> <code>IS DISTINCT FROM NULL</code> or <code>row</code> <code>IS NOT DISTINCT FROM NULL</code>, which will simply check whether the overall row value is null without any additional tests on the row fields.",
        "example": [
            "SELECT * FROM orders WHERE customer_name IS DISTINCT FROM 'John Doe';"
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-comparison.html"
        ]
    },
    {
        "type": "operator",
        "keyword": "a IS NOT DISTINCT FROM b",
        "tree": "(a_expr_is_not IS NOT DISTINCT FROM)",
        "description": "equal, treating null like an ordinary value",
        "detail": "[DESCRIPTION]: equal, treating null like an ordinary value<sep>[EXAMPLE]: SELECT * FROM orders WHERE customer_name IS NOT DISTINCT FROM 'John Doe';<sep>[COMPENSATE]:   Ordinary comparison operators yield null (signifying \u201cunknown\u201d), not true or false, when either input is null. For example, <code>7 = NULL</code> yields null, as does <code>7 <> NULL</code>. When this behavior is not suitable, use the <code>IS [ NOT ] DISTINCT FROM</code> predicates:; For non-null inputs, <code>IS DISTINCT FROM</code> is the same as the <code><></code> operator. However, if both inputs are null it returns false, and if only one input is null it returns true. Similarly, <code>IS NOT DISTINCT FROM</code> is identical to <code>=</code> for non-null inputs, but it returns true when both inputs are null, and false when only one input is null. Thus, these predicates effectively act as though null were a normal data value, rather than \u201cunknown\u201d.; If the <code>expression</code> is row-valued, then <code>IS NULL</code> is true when the row expression itself is null or when all the row's fields are null, while <code>IS NOT NULL</code> is true when the row expression itself is non-null and all the row's fields are non-null. Because of this behavior, <code>IS NULL</code> and <code>IS NOT NULL</code> do not always return inverse results for row-valued expressions; in particular, a row-valued expression that contains both null and non-null fields will return false for both tests. In some cases, it may be preferable to write <code>row</code> <code>IS DISTINCT FROM NULL</code> or <code>row</code> <code>IS NOT DISTINCT FROM NULL</code>, which will simply check whether the overall row value is null without any additional tests on the row fields.",
        "example": [
            "SELECT * FROM orders WHERE customer_name IS NOT DISTINCT FROM 'John Doe';"
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-comparison.html"
        ]
    },
    {
        "type": "operator",
        "keyword": "expression IS NULL",
        "tree": "(a_expr_is_not IS NULL)",
        "description": "is null",
        "detail": "[DESCRIPTION]: is null<sep>[EXAMPLE]: SELECT * FROM orders WHERE order_date IS NULL;<sep>[COMPENSATE]:   Ordinary comparison operators yield null (signifying \u201cunknown\u201d), not true or false, when either input is null. For example, <code>7 = NULL</code> yields null, as does <code>7 <> NULL</code>. When this behavior is not suitable, use the <code>IS [ NOT ] DISTINCT FROM</code> predicates:; Do not write <code>expression = NULL</code> because <code>NULL</code> is not \u201cequal to\u201d <code>NULL</code>. (The null value represents an unknown value, and it is not known whether two unknown values are equal.); Some applications might expect that <code>expression = NULL</code> returns true if <code>expression</code> evaluates to the null value. It is highly recommended that these applications be modified to comply with the SQL standard. However, if that cannot be done the transform_null_equals configuration variable is available. If it is enabled, PostgreSQL will convert <code>x = NULL</code> clauses to <code>x IS NULL</code>.; If the <code>expression</code> is row-valued, then <code>IS NULL</code> is true when the row expression itself is null or when all the row's fields are null, while <code>IS NOT NULL</code> is true when the row expression itself is non-null and all the row's fields are non-null. Because of this behavior, <code>IS NULL</code> and <code>IS NOT NULL</code> do not always return inverse results for row-valued expressions; in particular, a row-valued expression that contains both null and non-null fields will return false for both tests. In some cases, it may be preferable to write <code>row</code> <code>IS DISTINCT FROM NULL</code> or <code>row</code> <code>IS NOT DISTINCT FROM NULL</code>, which will simply check whether the overall row value is null without any additional tests on the row fields.; These will always return true or false, never a null value, even when the operand is null. A null input is treated as the logical value \u201cunknown\u201d. Notice that <code>IS UNKNOWN</code> and <code>IS NOT UNKNOWN</code> are effectively the same as <code>IS NULL</code> and <code>IS NOT NULL</code>, respectively, except that the input expression must be of Boolean type.",
        "example": [
            "SELECT * FROM orders WHERE order_date IS NULL;"
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-comparison.html"
        ]
    },
    {
        "type": "operator",
        "keyword": "expression IS NOT NULL",
        "tree": "(a_expr_is_not IS NOT NULL)",
        "description": "is not null",
        "detail": "[DESCRIPTION]: is not null<sep>[EXAMPLE]: SELECT * FROM orders WHERE order_date IS NOT NULL;<sep>[COMPENSATE]:   Ordinary comparison operators yield null (signifying \u201cunknown\u201d), not true or false, when either input is null. For example, <code>7 = NULL</code> yields null, as does <code>7 <> NULL</code>. When this behavior is not suitable, use the <code>IS [ NOT ] DISTINCT FROM</code> predicates:; Do not write <code>expression = NULL</code> because <code>NULL</code> is not \u201cequal to\u201d <code>NULL</code>. (The null value represents an unknown value, and it is not known whether two unknown values are equal.); Some applications might expect that <code>expression = NULL</code> returns true if <code>expression</code> evaluates to the null value. It is highly recommended that these applications be modified to comply with the SQL standard. However, if that cannot be done the transform_null_equals configuration variable is available. If it is enabled, PostgreSQL will convert <code>x = NULL</code> clauses to <code>x IS NULL</code>.; If the <code>expression</code> is row-valued, then <code>IS NULL</code> is true when the row expression itself is null or when all the row's fields are null, while <code>IS NOT NULL</code> is true when the row expression itself is non-null and all the row's fields are non-null. Because of this behavior, <code>IS NULL</code> and <code>IS NOT NULL</code> do not always return inverse results for row-valued expressions; in particular, a row-valued expression that contains both null and non-null fields will return false for both tests. In some cases, it may be preferable to write <code>row</code> <code>IS DISTINCT FROM NULL</code> or <code>row</code> <code>IS NOT DISTINCT FROM NULL</code>, which will simply check whether the overall row value is null without any additional tests on the row fields.; These will always return true or false, never a null value, even when the operand is null. A null input is treated as the logical value \u201cunknown\u201d. Notice that <code>IS UNKNOWN</code> and <code>IS NOT UNKNOWN</code> are effectively the same as <code>IS NULL</code> and <code>IS NOT NULL</code>, respectively, except that the input expression must be of Boolean type.",
        "example": [
            "SELECT * FROM orders WHERE order_date IS NOT NULL;"
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-comparison.html"
        ]
    },
    {
        "type": "operator",
        "keyword": "expression ISNULL",
        "tree": "(a_expr_isnull ISNULL)",
        "description": "is null (nonstandard syntax)",
        "detail": "[DESCRIPTION]: is null (nonstandard syntax)<sep>[EXAMPLE]: SELECT * FROM orders WHERE order_date ISNULL;<sep>[COMPENSATE]: ",
        "example": [
            "SELECT * FROM orders WHERE order_date ISNULL;"
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-comparison.html"
        ]
    },
    {
        "type": "operator",
        "keyword": "expression NOTNULL",
        "tree": "(a_expr_isnull NOTNULL)",
        "description": "is not null (nonstandard syntax)",
        "detail": "[DESCRIPTION]: is not null (nonstandard syntax)<sep>[EXAMPLE]: SELECT * FROM orders WHERE order_date NOTNULL;<sep>[COMPENSATE]: ",
        "example": [
            "SELECT * FROM orders WHERE order_date NOTNULL;"
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-comparison.html"
        ]
    },
    {
        "type": "operator",
        "keyword": "boolean_expression IS TRUE",
        "tree": "(a_expr_is_not IS TRUE)",
        "description": "is true",
        "detail": "[DESCRIPTION]: is true<sep>[EXAMPLE]: SELECT * FROM orders WHERE status IS TRUE;<sep>[COMPENSATE]: ",
        "example": [
            "SELECT * FROM orders WHERE status IS TRUE;"
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-comparison.html"
        ]
    },
    {
        "type": "operator",
        "keyword": "boolean_expression IS NOT TRUE",
        "tree": "(a_expr_is_not IS NOT TRUE)",
        "description": "is false or unknown",
        "detail": "[DESCRIPTION]: is false or unknown<sep>[EXAMPLE]: SELECT * FROM orders WHERE status IS NOT TRUE;<sep>[COMPENSATE]: ",
        "example": [
            "SELECT * FROM orders WHERE status IS NOT TRUE;"
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-comparison.html"
        ]
    },
    {
        "type": "operator",
        "keyword": "boolean_expression IS FALSE",
        "tree": "(a_expr_is_not IS FALSE)",
        "description": "is false",
        "detail": "[DESCRIPTION]: is false<sep>[EXAMPLE]: SELECT * FROM orders WHERE status IS FALSE;<sep>[COMPENSATE]: ",
        "example": [
            "SELECT * FROM orders WHERE status IS FALSE;"
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-comparison.html"
        ]
    },
    {
        "type": "operator",
        "keyword": "boolean_expression IS NOT FALSE",
        "tree": "(a_expr_is_not IS NOT FALSE)",
        "description": "is true or unknown",
        "detail": "[DESCRIPTION]: is true or unknown<sep>[EXAMPLE]: SELECT * FROM orders WHERE status IS NOT FALSE;<sep>[COMPENSATE]: Notice that <code>BETWEEN</code> treats the endpoint values as included in the range. <code>NOT BETWEEN</code> does the opposite comparison:;   Ordinary comparison operators yield null (signifying \u201cunknown\u201d), not true or false, when either input is null. For example, <code>7 = NULL</code> yields null, as does <code>7 <> NULL</code>. When this behavior is not suitable, use the <code>IS [ NOT ] DISTINCT FROM</code> predicates:; For non-null inputs, <code>IS DISTINCT FROM</code> is the same as the <code><></code> operator. However, if both inputs are null it returns false, and if only one input is null it returns true. Similarly, <code>IS NOT DISTINCT FROM</code> is identical to <code>=</code> for non-null inputs, but it returns true when both inputs are null, and false when only one input is null. Thus, these predicates effectively act as though null were a normal data value, rather than \u201cunknown\u201d.; Some applications might expect that <code>expression = NULL</code> returns true if <code>expression</code> evaluates to the null value. It is highly recommended that these applications be modified to comply with the SQL standard. However, if that cannot be done the transform_null_equals configuration variable is available. If it is enabled, PostgreSQL will convert <code>x = NULL</code> clauses to <code>x IS NULL</code>.; If the <code>expression</code> is row-valued, then <code>IS NULL</code> is true when the row expression itself is null or when all the row's fields are null, while <code>IS NOT NULL</code> is true when the row expression itself is non-null and all the row's fields are non-null. Because of this behavior, <code>IS NULL</code> and <code>IS NOT NULL</code> do not always return inverse results for row-valued expressions; in particular, a row-valued expression that contains both null and non-null fields will return false for both tests. In some cases, it may be preferable to write <code>row</code> <code>IS DISTINCT FROM NULL</code> or <code>row</code> <code>IS NOT DISTINCT FROM NULL</code>, which will simply check whether the overall row value is null without any additional tests on the row fields.; These will always return true or false, never a null value, even when the operand is null. A null input is treated as the logical value \u201cunknown\u201d. Notice that <code>IS UNKNOWN</code> and <code>IS NOT UNKNOWN</code> are effectively the same as <code>IS NULL</code> and <code>IS NOT NULL</code>, respectively, except that the input expression must be of Boolean type.",
        "example": [
            "SELECT * FROM orders WHERE status IS NOT FALSE;"
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-comparison.html"
        ]
    },
    {
        "type": "operator",
        "keyword": "boolean_expression IS UNKNOWN",
        "tree": "(a_expr_is_not IS UNKNOWN)",
        "description": "is unknown",
        "detail": "[DESCRIPTION]: is unknown<sep>[EXAMPLE]: SELECT * FROM orders WHERE status IS UNKNOWN;<sep>[COMPENSATE]: These will always return true or false, never a null value, even when the operand is null. A null input is treated as the logical value \u201cunknown\u201d. Notice that <code>IS UNKNOWN</code> and <code>IS NOT UNKNOWN</code> are effectively the same as <code>IS NULL</code> and <code>IS NOT NULL</code>, respectively, except that the input expression must be of Boolean type.",
        "example": [
            "SELECT * FROM orders WHERE status IS UNKNOWN;"
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-comparison.html"
        ]
    },
    {
        "type": "operator",
        "keyword": "boolean_expression IS NOT UNKNOWN",
        "tree": "(a_expr_is_not IS NOT UNKNOWN)",
        "description": "is true or false",
        "detail": "[DESCRIPTION]: is true or false<sep>[EXAMPLE]: SELECT * FROM orders WHERE status IS NOT UNKNOWN;<sep>[COMPENSATE]: These will always return true or false, never a null value, even when the operand is null. A null input is treated as the logical value \u201cunknown\u201d. Notice that <code>IS UNKNOWN</code> and <code>IS NOT UNKNOWN</code> are effectively the same as <code>IS NULL</code> and <code>IS NOT NULL</code>, respectively, except that the input expression must be of Boolean type.",
        "example": [
            "SELECT * FROM orders WHERE status IS NOT UNKNOWN;"
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-comparison.html"
        ]
    },
    {
        "type": "type",
        "keyword": "bigint",
        "tree": "(numeric BIGINT)",
        "description": [
            "signed eight-byte integer",
            "large-range integer"
        ],
        "detail": "[DESCRIPTION]: signed eight-byte integer; large-range integer<sep>[STORAGE SIZE]: 8 bytes<sep>[RANGE]: -9223372036854775808 to +9223372036854775807<sep>[COMPENSATE]: The types <code>smallint</code>, <code>integer</code>, and <code>bigint</code> store whole numbers, that is, numbers without fractional components, of various ranges. Attempts to store values outside of the allowed range will result in an error.; The type <code>integer</code> is the common choice, as it offers the best balance between range, storage size, and performance. The <code>smallint</code> type is generally only used if disk space is at a premium. The <code>bigint</code> type is designed to be used when the range of the <code>integer</code> type is insufficient.; SQL only specifies the integer types <code>integer</code> (or <code>int</code>), <code>smallint</code>, and <code>bigint</code>. The type names <code>int2</code>, <code>int4</code>, and <code>int8</code> are extensions, which are also used by some other SQL database systems.; The type names <code>serial</code> and <code>serial4</code> are equivalent: both create <code>integer</code> columns. The type names <code>bigserial</code> and <code>serial8</code> work the same way, except that they create a <code>bigint</code> column. <code>bigserial</code> should be used if you anticipate the use of more than 231 identifiers over the lifetime of the table. The type names <code>smallserial</code> and <code>serial2</code> also work the same way, except that they create a <code>smallint</code> column.",
        "example": [],
        "link": [
            "https://www.postgresql.org/docs/12/datatype-numeric.html#DATATYPE-INT"
        ]
    },
    {
        "type": "type",
        "keyword": "int8",
        "tree": "(identifier INT8)",
        "description": [
            "signed eight-byte integer",
            "large-range integer"
        ],
        "detail": "[DESCRIPTION]: signed eight-byte integer; large-range integer<sep>[STORAGE SIZE]: 8 bytes<sep>[RANGE]: -9223372036854775808 to +9223372036854775807<sep>[COMPENSATE]: The types <code>smallint</code>, <code>integer</code>, and <code>bigint</code> store whole numbers, that is, numbers without fractional components, of various ranges. Attempts to store values outside of the allowed range will result in an error.; The type <code>integer</code> is the common choice, as it offers the best balance between range, storage size, and performance. The <code>smallint</code> type is generally only used if disk space is at a premium. The <code>bigint</code> type is designed to be used when the range of the <code>integer</code> type is insufficient.; SQL only specifies the integer types <code>integer</code> (or <code>int</code>), <code>smallint</code>, and <code>bigint</code>. The type names <code>int2</code>, <code>int4</code>, and <code>int8</code> are extensions, which are also used by some other SQL database systems.; The type names <code>serial</code> and <code>serial4</code> are equivalent: both create <code>integer</code> columns. The type names <code>bigserial</code> and <code>serial8</code> work the same way, except that they create a <code>bigint</code> column. <code>bigserial</code> should be used if you anticipate the use of more than 231 identifiers over the lifetime of the table. The type names <code>smallserial</code> and <code>serial2</code> also work the same way, except that they create a <code>smallint</code> column.",
        "example": [],
        "link": [
            "https://www.postgresql.org/docs/12/datatype-numeric.html#DATATYPE-INT"
        ]
    },
    {
        "type": "type",
        "keyword": "bigserial",
        "tree": "(identifier BIGSERIAL)",
        "description": [
            "autoincrementing eight-byte integer",
            "large autoincrementing integer"
        ],
        "detail": "[DESCRIPTION]: autoincrementing eight-byte integer; large autoincrementing integer<sep>[STORAGE SIZE]: 8 bytes<sep>[RANGE]: 1 to 9223372036854775807<sep>[COMPENSATE]: The data types <code>smallserial</code>, <code>serial</code> and <code>bigserial</code> are not true types, but merely a notational convenience for creating unique identifier columns (similar to the <code>AUTO_INCREMENT</code> property supported by some other databases). In the current implementation, specifying:; Because <code>smallserial</code>, <code>serial</code> and <code>bigserial</code> are implemented using sequences, there may be \"holes\" or gaps in the sequence of values which appears in the column, even if no rows are ever deleted. A value allocated from the sequence is still \"used up\" even if a row containing that value is never successfully inserted into the table column. This may happen, for example, if the inserting transaction rolls back. See <code>nextval()</code> in Section 9.16 for details.; The type names <code>serial</code> and <code>serial4</code> are equivalent: both create <code>integer</code> columns. The type names <code>bigserial</code> and <code>serial8</code> work the same way, except that they create a <code>bigint</code> column. <code>bigserial</code> should be used if you anticipate the use of more than 231 identifiers over the lifetime of the table. The type names <code>smallserial</code> and <code>serial2</code> also work the same way, except that they create a <code>smallint</code> column.",
        "example": [],
        "link": [
            "https://www.postgresql.org/docs/12/datatype-numeric.html#DATATYPE-INT"
        ]
    },
    {
        "type": "type",
        "keyword": "serial8",
        "tree": "(identifier SERIAL8)",
        "description": [
            "autoincrementing eight-byte integer",
            "large autoincrementing integer"
        ],
        "detail": "[DESCRIPTION]: autoincrementing eight-byte integer; large autoincrementing integer<sep>[STORAGE SIZE]: 8 bytes<sep>[RANGE]: 1 to 9223372036854775807<sep>[COMPENSATE]: The data types <code>smallserial</code>, <code>serial</code> and <code>bigserial</code> are not true types, but merely a notational convenience for creating unique identifier columns (similar to the <code>AUTO_INCREMENT</code> property supported by some other databases). In the current implementation, specifying:; Because <code>smallserial</code>, <code>serial</code> and <code>bigserial</code> are implemented using sequences, there may be \"holes\" or gaps in the sequence of values which appears in the column, even if no rows are ever deleted. A value allocated from the sequence is still \"used up\" even if a row containing that value is never successfully inserted into the table column. This may happen, for example, if the inserting transaction rolls back. See <code>nextval()</code> in Section 9.16 for details.; The type names <code>serial</code> and <code>serial4</code> are equivalent: both create <code>integer</code> columns. The type names <code>bigserial</code> and <code>serial8</code> work the same way, except that they create a <code>bigint</code> column. <code>bigserial</code> should be used if you anticipate the use of more than 231 identifiers over the lifetime of the table. The type names <code>smallserial</code> and <code>serial2</code> also work the same way, except that they create a <code>smallint</code> column.",
        "example": [],
        "link": [
            "https://www.postgresql.org/docs/12/datatype-numeric.html#DATATYPE-INT"
        ]
    },
    {
        "type": "type",
        "keyword": "smallint",
        "tree": "(numeric SMALLINT)",
        "description": [
            "signed two-byte integer",
            "small-range integer"
        ],
        "detail": "[DESCRIPTION]: signed two-byte integer; small-range integer<sep>[STORAGE SIZE]: 2 bytes<sep>[RANGE]: -32768 to +32767<sep>[COMPENSATE]: The types <code>smallint</code>, <code>integer</code>, and <code>bigint</code> store whole numbers, that is, numbers without fractional components, of various ranges. Attempts to store values outside of the allowed range will result in an error.; The type <code>integer</code> is the common choice, as it offers the best balance between range, storage size, and performance. The <code>smallint</code> type is generally only used if disk space is at a premium. The <code>bigint</code> type is designed to be used when the range of the <code>integer</code> type is insufficient.; SQL only specifies the integer types <code>integer</code> (or <code>int</code>), <code>smallint</code>, and <code>bigint</code>. The type names <code>int2</code>, <code>int4</code>, and <code>int8</code> are extensions, which are also used by some other SQL database systems.; The type names <code>serial</code> and <code>serial4</code> are equivalent: both create <code>integer</code> columns. The type names <code>bigserial</code> and <code>serial8</code> work the same way, except that they create a <code>bigint</code> column. <code>bigserial</code> should be used if you anticipate the use of more than 231 identifiers over the lifetime of the table. The type names <code>smallserial</code> and <code>serial2</code> also work the same way, except that they create a <code>smallint</code> column.",
        "example": [],
        "link": [
            "https://www.postgresql.org/docs/12/datatype-numeric.html#DATATYPE-INT"
        ]
    },
    {
        "type": "type",
        "keyword": "int2",
        "tree": "(identifier INT2)",
        "description": [
            "signed two-byte integer",
            "small-range integer"
        ],
        "detail": "[DESCRIPTION]: signed two-byte integer; small-range integer<sep>[STORAGE SIZE]: 2 bytes<sep>[RANGE]: -32768 to +32767<sep>[COMPENSATE]: The types <code>smallint</code>, <code>integer</code>, and <code>bigint</code> store whole numbers, that is, numbers without fractional components, of various ranges. Attempts to store values outside of the allowed range will result in an error.; The type <code>integer</code> is the common choice, as it offers the best balance between range, storage size, and performance. The <code>smallint</code> type is generally only used if disk space is at a premium. The <code>bigint</code> type is designed to be used when the range of the <code>integer</code> type is insufficient.; SQL only specifies the integer types <code>integer</code> (or <code>int</code>), <code>smallint</code>, and <code>bigint</code>. The type names <code>int2</code>, <code>int4</code>, and <code>int8</code> are extensions, which are also used by some other SQL database systems.; The type names <code>serial</code> and <code>serial4</code> are equivalent: both create <code>integer</code> columns. The type names <code>bigserial</code> and <code>serial8</code> work the same way, except that they create a <code>bigint</code> column. <code>bigserial</code> should be used if you anticipate the use of more than 231 identifiers over the lifetime of the table. The type names <code>smallserial</code> and <code>serial2</code> also work the same way, except that they create a <code>smallint</code> column.",
        "example": [],
        "link": [
            "https://www.postgresql.org/docs/12/datatype-numeric.html#DATATYPE-INT"
        ]
    },
    {
        "type": "type",
        "keyword": "numeric ( p, s )",
        "tree": "(numeric NUMERIC (opt_type_modifiers ( )))",
        "description": [
            "exact numeric of selectable precision",
            "user-specified precision, exact",
            "user-specified precision, exact"
        ],
        "detail": "[DESCRIPTION]: exact numeric of selectable precision; user-specified precision, exact; user-specified precision, exact<sep>[STORAGE SIZE]: variable<sep>[RANGE]: up to 131072 digits before the decimal point; up to 16383 digits after the decimal point<sep>[COMPENSATE]: The type <code>numeric</code> can store numbers with a very large number of digits. It is especially recommended for storing monetary amounts and other quantities where exactness is required. Calculations with <code>numeric</code> values yield exact results where possible, e.g., addition, subtraction, multiplication. However, calculations on <code>numeric</code> values are very slow compared to the integer types, or to the floating-point types described in the next section.; We use the following terms below: The precision of a <code>numeric</code> is the total count of significant digits in the whole number, that is, the number of digits to both sides of the decimal point. The scale of a <code>numeric</code> is the count of decimal digits in the fractional part, to the right of the decimal point. So the number 23.5141 has a precision of 6 and a scale of 4. Integers can be considered to have a scale of zero.; Both the maximum precision and the maximum scale of a <code>numeric</code> column can be configured. To declare a column of type <code>numeric</code> use the syntax:; <code>\nNUMERIC(precision, scale)\n</code>; <code>\nNUMERIC(precision)\n</code>; <code>\nNUMERIC\n</code>; without any precision or scale creates a column in which numeric values of any precision and scale can be stored, up to the implementation limit on precision. A column of this kind will not coerce input values to any particular scale, whereas <code>numeric</code> columns with a declared scale will coerce input values to that scale. (The SQL standard requires a default scale of 0, i.e., coercion to integer precision. We find this a bit useless. If you're concerned about portability, always specify the precision and scale explicitly.); The maximum allowed precision when explicitly specified in the type declaration is 1000; <code>NUMERIC</code> without a specified precision is subject to the limits described in Table 8.2.; Numeric values are physically stored without any extra leading or trailing zeroes. Thus, the declared precision and scale of a column are maximums, not fixed allocations. (In this sense the <code>numeric</code> type is more akin to <code>varchar(n)</code> than to <code>char(n)</code>.) The actual storage requirement is two bytes for each group of four decimal digits, plus three to eight bytes overhead.; In addition to ordinary numeric values, the <code>numeric</code> type allows the special value <code>NaN</code>, meaning \"not-a-number\". Any operation on <code>NaN</code> yields another <code>NaN</code>. When writing this value as a constant in an SQL command, you must put quotes around it, for example <code>UPDATE table SET x = 'NaN'</code>. On input, the string <code>NaN</code> is recognized in a case-insensitive manner.; In most implementations of the \"not-a-number\" concept, <code>NaN</code> is not considered equal to any other numeric value (including <code>NaN</code>). In order to allow <code>numeric</code> values to be sorted and used in tree-based indexes, PostgreSQL treats <code>NaN</code> values as equal, and greater than all non-<code>NaN</code> values.; The types <code>decimal</code> and <code>numeric</code> are equivalent. Both types are part of the SQL standard.; When rounding values, the <code>numeric</code> type rounds ties away from zero, while (on most machines) the <code>real</code> and <code>double precision</code> types round ties to the nearest even number. For example:; <code>\nSELECT x,\n round(x::numeric) AS num_round,\n round(x::double precision) AS dbl_round\nFROM generate_series(-3.5, 3.5, 1) as x;\n x | num_round | dbl_round\n------+-----------+-----------\n -3.5 | -4 | -4\n -2.5 | -3 | -2\n -1.5 | -2 | -2\n -0.5 | -1 | -0\n 0.5 | 1 | 0\n 1.5 | 2 | 2\n 2.5 | 3 | 2\n 3.5 | 4 | 4\n(8 rows)\n</code>; If you require exact storage and calculations (such as for monetary amounts), use the <code>numeric</code> type instead.",
        "example": [],
        "link": [
            "https://www.postgresql.org/docs/12/datatype-numeric.html#DATATYPE-INT"
        ]
    },
    {
        "type": "type",
        "keyword": "decimal ( p, s )",
        "tree": "(numeric DECIMAL (opt_type_modifiers ( )))",
        "description": [
            "exact numeric of selectable precision",
            "user-specified precision, exact",
            "user-specified precision, exact"
        ],
        "detail": "[DESCRIPTION]: exact numeric of selectable precision; user-specified precision, exact; user-specified precision, exact<sep>[STORAGE SIZE]: variable<sep>[RANGE]: up to 131072 digits before the decimal point; up to 16383 digits after the decimal point<sep>[COMPENSATE]: The type <code>numeric</code> can store numbers with a very large number of digits. It is especially recommended for storing monetary amounts and other quantities where exactness is required. Calculations with <code>numeric</code> values yield exact results where possible, e.g., addition, subtraction, multiplication. However, calculations on <code>numeric</code> values are very slow compared to the integer types, or to the floating-point types described in the next section.; We use the following terms below: The precision of a <code>numeric</code> is the total count of significant digits in the whole number, that is, the number of digits to both sides of the decimal point. The scale of a <code>numeric</code> is the count of decimal digits in the fractional part, to the right of the decimal point. So the number 23.5141 has a precision of 6 and a scale of 4. Integers can be considered to have a scale of zero.; Both the maximum precision and the maximum scale of a <code>numeric</code> column can be configured. To declare a column of type <code>numeric</code> use the syntax:; <code>\nNUMERIC(precision, scale)\n</code>; <code>\nNUMERIC(precision)\n</code>; <code>\nNUMERIC\n</code>; without any precision or scale creates a column in which numeric values of any precision and scale can be stored, up to the implementation limit on precision. A column of this kind will not coerce input values to any particular scale, whereas <code>numeric</code> columns with a declared scale will coerce input values to that scale. (The SQL standard requires a default scale of 0, i.e., coercion to integer precision. We find this a bit useless. If you're concerned about portability, always specify the precision and scale explicitly.); The maximum allowed precision when explicitly specified in the type declaration is 1000; <code>NUMERIC</code> without a specified precision is subject to the limits described in Table 8.2.; Numeric values are physically stored without any extra leading or trailing zeroes. Thus, the declared precision and scale of a column are maximums, not fixed allocations. (In this sense the <code>numeric</code> type is more akin to <code>varchar(n)</code> than to <code>char(n)</code>.) The actual storage requirement is two bytes for each group of four decimal digits, plus three to eight bytes overhead.; In addition to ordinary numeric values, the <code>numeric</code> type allows the special value <code>NaN</code>, meaning \"not-a-number\". Any operation on <code>NaN</code> yields another <code>NaN</code>. When writing this value as a constant in an SQL command, you must put quotes around it, for example <code>UPDATE table SET x = 'NaN'</code>. On input, the string <code>NaN</code> is recognized in a case-insensitive manner.; In most implementations of the \"not-a-number\" concept, <code>NaN</code> is not considered equal to any other numeric value (including <code>NaN</code>). In order to allow <code>numeric</code> values to be sorted and used in tree-based indexes, PostgreSQL treats <code>NaN</code> values as equal, and greater than all non-<code>NaN</code> values.; The types <code>decimal</code> and <code>numeric</code> are equivalent. Both types are part of the SQL standard.; When rounding values, the <code>numeric</code> type rounds ties away from zero, while (on most machines) the <code>real</code> and <code>double precision</code> types round ties to the nearest even number. For example:; <code>\nSELECT x,\n round(x::numeric) AS num_round,\n round(x::double precision) AS dbl_round\nFROM generate_series(-3.5, 3.5, 1) as x;\n x | num_round | dbl_round\n------+-----------+-----------\n -3.5 | -4 | -4\n -2.5 | -3 | -2\n -1.5 | -2 | -2\n -0.5 | -1 | -0\n 0.5 | 1 | 0\n 1.5 | 2 | 2\n 2.5 | 3 | 2\n 3.5 | 4 | 4\n(8 rows)\n</code>; If you require exact storage and calculations (such as for monetary amounts), use the <code>numeric</code> type instead.",
        "example": [],
        "link": [
            "https://www.postgresql.org/docs/12/datatype-numeric.html#DATATYPE-INT"
        ]
    },
    {
        "type": "type",
        "keyword": "numeric",
        "tree": "(numeric NUMERIC)",
        "description": [
            "exact numeric of selectable precision",
            "user-specified precision, exact",
            "user-specified precision, exact"
        ],
        "detail": "[DESCRIPTION]: exact numeric of selectable precision; user-specified precision, exact; user-specified precision, exact<sep>[STORAGE SIZE]: variable<sep>[RANGE]: up to 131072 digits before the decimal point; up to 16383 digits after the decimal point<sep>[COMPENSATE]: The type <code>numeric</code> can store numbers with a very large number of digits. It is especially recommended for storing monetary amounts and other quantities where exactness is required. Calculations with <code>numeric</code> values yield exact results where possible, e.g., addition, subtraction, multiplication. However, calculations on <code>numeric</code> values are very slow compared to the integer types, or to the floating-point types described in the next section.; We use the following terms below: The precision of a <code>numeric</code> is the total count of significant digits in the whole number, that is, the number of digits to both sides of the decimal point. The scale of a <code>numeric</code> is the count of decimal digits in the fractional part, to the right of the decimal point. So the number 23.5141 has a precision of 6 and a scale of 4. Integers can be considered to have a scale of zero.; Both the maximum precision and the maximum scale of a <code>numeric</code> column can be configured. To declare a column of type <code>numeric</code> use the syntax:; <code>\nNUMERIC(precision, scale)\n</code>; <code>\nNUMERIC(precision)\n</code>; <code>\nNUMERIC\n</code>; without any precision or scale creates a column in which numeric values of any precision and scale can be stored, up to the implementation limit on precision. A column of this kind will not coerce input values to any particular scale, whereas <code>numeric</code> columns with a declared scale will coerce input values to that scale. (The SQL standard requires a default scale of 0, i.e., coercion to integer precision. We find this a bit useless. If you're concerned about portability, always specify the precision and scale explicitly.); The maximum allowed precision when explicitly specified in the type declaration is 1000; <code>NUMERIC</code> without a specified precision is subject to the limits described in Table 8.2.; Numeric values are physically stored without any extra leading or trailing zeroes. Thus, the declared precision and scale of a column are maximums, not fixed allocations. (In this sense the <code>numeric</code> type is more akin to <code>varchar(n)</code> than to <code>char(n)</code>.) The actual storage requirement is two bytes for each group of four decimal digits, plus three to eight bytes overhead.; In addition to ordinary numeric values, the <code>numeric</code> type allows the special value <code>NaN</code>, meaning \"not-a-number\". Any operation on <code>NaN</code> yields another <code>NaN</code>. When writing this value as a constant in an SQL command, you must put quotes around it, for example <code>UPDATE table SET x = 'NaN'</code>. On input, the string <code>NaN</code> is recognized in a case-insensitive manner.; In most implementations of the \"not-a-number\" concept, <code>NaN</code> is not considered equal to any other numeric value (including <code>NaN</code>). In order to allow <code>numeric</code> values to be sorted and used in tree-based indexes, PostgreSQL treats <code>NaN</code> values as equal, and greater than all non-<code>NaN</code> values.; The types <code>decimal</code> and <code>numeric</code> are equivalent. Both types are part of the SQL standard.; When rounding values, the <code>numeric</code> type rounds ties away from zero, while (on most machines) the <code>real</code> and <code>double precision</code> types round ties to the nearest even number. For example:; <code>\nSELECT x,\n round(x::numeric) AS num_round,\n round(x::double precision) AS dbl_round\nFROM generate_series(-3.5, 3.5, 1) as x;\n x | num_round | dbl_round\n------+-----------+-----------\n -3.5 | -4 | -4\n -2.5 | -3 | -2\n -1.5 | -2 | -2\n -0.5 | -1 | -0\n 0.5 | 1 | 0\n 1.5 | 2 | 2\n 2.5 | 3 | 2\n 3.5 | 4 | 4\n(8 rows)\n</code>; If you require exact storage and calculations (such as for monetary amounts), use the <code>numeric</code> type instead.",
        "example": [],
        "link": [
            "https://www.postgresql.org/docs/12/datatype-numeric.html#DATATYPE-INT"
        ]
    },
    {
        "type": "type",
        "keyword": "decimal",
        "tree": "(numeric DECIMAL)",
        "description": [
            "exact numeric of selectable precision",
            "user-specified precision, exact",
            "user-specified precision, exact"
        ],
        "detail": "[DESCRIPTION]: exact numeric of selectable precision; user-specified precision, exact; user-specified precision, exact<sep>[STORAGE SIZE]: variable<sep>[RANGE]: up to 131072 digits before the decimal point; up to 16383 digits after the decimal point<sep>[COMPENSATE]: The type <code>numeric</code> can store numbers with a very large number of digits. It is especially recommended for storing monetary amounts and other quantities where exactness is required. Calculations with <code>numeric</code> values yield exact results where possible, e.g., addition, subtraction, multiplication. However, calculations on <code>numeric</code> values are very slow compared to the integer types, or to the floating-point types described in the next section.; We use the following terms below: The precision of a <code>numeric</code> is the total count of significant digits in the whole number, that is, the number of digits to both sides of the decimal point. The scale of a <code>numeric</code> is the count of decimal digits in the fractional part, to the right of the decimal point. So the number 23.5141 has a precision of 6 and a scale of 4. Integers can be considered to have a scale of zero.; Both the maximum precision and the maximum scale of a <code>numeric</code> column can be configured. To declare a column of type <code>numeric</code> use the syntax:; <code>\nNUMERIC(precision, scale)\n</code>; <code>\nNUMERIC(precision)\n</code>; <code>\nNUMERIC\n</code>; without any precision or scale creates a column in which numeric values of any precision and scale can be stored, up to the implementation limit on precision. A column of this kind will not coerce input values to any particular scale, whereas <code>numeric</code> columns with a declared scale will coerce input values to that scale. (The SQL standard requires a default scale of 0, i.e., coercion to integer precision. We find this a bit useless. If you're concerned about portability, always specify the precision and scale explicitly.); The maximum allowed precision when explicitly specified in the type declaration is 1000; <code>NUMERIC</code> without a specified precision is subject to the limits described in Table 8.2.; Numeric values are physically stored without any extra leading or trailing zeroes. Thus, the declared precision and scale of a column are maximums, not fixed allocations. (In this sense the <code>numeric</code> type is more akin to <code>varchar(n)</code> than to <code>char(n)</code>.) The actual storage requirement is two bytes for each group of four decimal digits, plus three to eight bytes overhead.; In addition to ordinary numeric values, the <code>numeric</code> type allows the special value <code>NaN</code>, meaning \"not-a-number\". Any operation on <code>NaN</code> yields another <code>NaN</code>. When writing this value as a constant in an SQL command, you must put quotes around it, for example <code>UPDATE table SET x = 'NaN'</code>. On input, the string <code>NaN</code> is recognized in a case-insensitive manner.; In most implementations of the \"not-a-number\" concept, <code>NaN</code> is not considered equal to any other numeric value (including <code>NaN</code>). In order to allow <code>numeric</code> values to be sorted and used in tree-based indexes, PostgreSQL treats <code>NaN</code> values as equal, and greater than all non-<code>NaN</code> values.; The types <code>decimal</code> and <code>numeric</code> are equivalent. Both types are part of the SQL standard.; When rounding values, the <code>numeric</code> type rounds ties away from zero, while (on most machines) the <code>real</code> and <code>double precision</code> types round ties to the nearest even number. For example:; <code>\nSELECT x,\n round(x::numeric) AS num_round,\n round(x::double precision) AS dbl_round\nFROM generate_series(-3.5, 3.5, 1) as x;\n x | num_round | dbl_round\n------+-----------+-----------\n -3.5 | -4 | -4\n -2.5 | -3 | -2\n -1.5 | -2 | -2\n -0.5 | -1 | -0\n 0.5 | 1 | 0\n 1.5 | 2 | 2\n 2.5 | 3 | 2\n 3.5 | 4 | 4\n(8 rows)\n</code>; If you require exact storage and calculations (such as for monetary amounts), use the <code>numeric</code> type instead.",
        "example": [],
        "link": [
            "https://www.postgresql.org/docs/12/datatype-numeric.html#DATATYPE-INT"
        ]
    },
    {
        "type": "type",
        "keyword": "integer",
        "tree": "(numeric INTEGER)",
        "description": [
            "signed four-byte integer",
            "typical choice for integer"
        ],
        "detail": "[DESCRIPTION]: signed four-byte integer; typical choice for integer<sep>[STORAGE SIZE]: 4 bytes<sep>[RANGE]: -2147483648 to +2147483647<sep>[COMPENSATE]: \nThe types <code>smallint</code>, <code>integer</code>, and <code>bigint</code> store whole numbers, that is, numbers without fractional components, of various ranges. Attempts to store values outside of the allowed range will result in an error.\nThe type <code>integer</code> is the common choice, as it offers the best balance between range, storage size, and performance. The <code>smallint</code> type is generally only used if disk space is at a premium. The <code>bigint</code> type is designed to be used when the range of the <code>integer</code> type is insufficient.\nSQL only specifies the integer types <code>integer</code> (or <code>int</code>), <code>smallint</code>, and <code>bigint</code>. The type names <code>int2</code>, <code>int4</code>, and <code>int8</code> are extensions, which are also used by some other SQL database systems.\n; <code>\nCREATE SEQUENCE tablename_colname_seq AS integer;\nCREATE TABLE tablename (\n colname integer NOT NULL DEFAULT nextval('tablename_colname_seq')\n);\nALTER SEQUENCE tablename_colname_seq OWNED BY tablename.colname;\n</code>; The type names <code>serial</code> and <code>serial4</code> are equivalent: both create <code>integer</code> columns. The type names <code>bigserial</code> and <code>serial8</code> work the same way, except that they create a <code>bigint</code> column. <code>bigserial</code> should be used if you anticipate the use of more than 231 identifiers over the lifetime of the table. The type names <code>smallserial</code> and <code>serial2</code> also work the same way, except that they create a <code>smallint</code> column.",
        "example": [],
        "link": [
            "https://www.postgresql.org/docs/12/datatype-numeric.html#DATATYPE-INT"
        ]
    },
    {
        "type": "type",
        "keyword": "int",
        "tree": "(numeric INT)",
        "description": [
            "signed four-byte integer",
            "typical choice for integer"
        ],
        "detail": "[DESCRIPTION]: signed four-byte integer; typical choice for integer<sep>[STORAGE SIZE]: 4 bytes<sep>[RANGE]: -2147483648 to +2147483647<sep>[COMPENSATE]: \nThe types <code>smallint</code>, <code>integer</code>, and <code>bigint</code> store whole numbers, that is, numbers without fractional components, of various ranges. Attempts to store values outside of the allowed range will result in an error.\nThe type <code>integer</code> is the common choice, as it offers the best balance between range, storage size, and performance. The <code>smallint</code> type is generally only used if disk space is at a premium. The <code>bigint</code> type is designed to be used when the range of the <code>integer</code> type is insufficient.\nSQL only specifies the integer types <code>integer</code> (or <code>int</code>), <code>smallint</code>, and <code>bigint</code>. The type names <code>int2</code>, <code>int4</code>, and <code>int8</code> are extensions, which are also used by some other SQL database systems.\n; <code>\nCREATE SEQUENCE tablename_colname_seq AS integer;\nCREATE TABLE tablename (\n colname integer NOT NULL DEFAULT nextval('tablename_colname_seq')\n);\nALTER SEQUENCE tablename_colname_seq OWNED BY tablename.colname;\n</code>; The type names <code>serial</code> and <code>serial4</code> are equivalent: both create <code>integer</code> columns. The type names <code>bigserial</code> and <code>serial8</code> work the same way, except that they create a <code>bigint</code> column. <code>bigserial</code> should be used if you anticipate the use of more than 231 identifiers over the lifetime of the table. The type names <code>smallserial</code> and <code>serial2</code> also work the same way, except that they create a <code>smallint</code> column.",
        "example": [],
        "link": [
            "https://www.postgresql.org/docs/12/datatype-numeric.html#DATATYPE-INT"
        ]
    },
    {
        "type": "type",
        "keyword": "int4",
        "tree": "(identifier INT4)",
        "description": [
            "signed four-byte integer",
            "typical choice for integer"
        ],
        "detail": "[DESCRIPTION]: signed four-byte integer; typical choice for integer<sep>[STORAGE SIZE]: 4 bytes<sep>[RANGE]: -2147483648 to +2147483647<sep>[COMPENSATE]: \nThe types <code>smallint</code>, <code>integer</code>, and <code>bigint</code> store whole numbers, that is, numbers without fractional components, of various ranges. Attempts to store values outside of the allowed range will result in an error.\nThe type <code>integer</code> is the common choice, as it offers the best balance between range, storage size, and performance. The <code>smallint</code> type is generally only used if disk space is at a premium. The <code>bigint</code> type is designed to be used when the range of the <code>integer</code> type is insufficient.\nSQL only specifies the integer types <code>integer</code> (or <code>int</code>), <code>smallint</code>, and <code>bigint</code>. The type names <code>int2</code>, <code>int4</code>, and <code>int8</code> are extensions, which are also used by some other SQL database systems.\n; <code>\nCREATE SEQUENCE tablename_colname_seq AS integer;\nCREATE TABLE tablename (\n colname integer NOT NULL DEFAULT nextval('tablename_colname_seq')\n);\nALTER SEQUENCE tablename_colname_seq OWNED BY tablename.colname;\n</code>; The type names <code>serial</code> and <code>serial4</code> are equivalent: both create <code>integer</code> columns. The type names <code>bigserial</code> and <code>serial8</code> work the same way, except that they create a <code>bigint</code> column. <code>bigserial</code> should be used if you anticipate the use of more than 231 identifiers over the lifetime of the table. The type names <code>smallserial</code> and <code>serial2</code> also work the same way, except that they create a <code>smallint</code> column.",
        "example": [],
        "link": [
            "https://www.postgresql.org/docs/12/datatype-numeric.html#DATATYPE-INT"
        ]
    },
    {
        "type": "type",
        "keyword": "real",
        "tree": "(numeric REAL)",
        "description": [
            "single precision floating-point number (4 bytes)",
            "variable-precision, inexact"
        ],
        "detail": "[DESCRIPTION]: single precision floating-point number (4 bytes); variable-precision, inexact<sep>[STORAGE SIZE]: 4 bytes<sep>[RANGE]: 6 decimal digits precision<sep>[COMPENSATE]: When rounding values, the <code>numeric</code> type rounds ties away from zero, while (on most machines) the <code>real</code> and <code>double precision</code> types round ties to the nearest even number. For example:; The data types <code>real</code> and <code>double precision</code> are inexact, variable-precision numeric types. On all currently supported platforms, these types are implementations of IEEE Standard 754 for Binary Floating-Point Arithmetic (single and double precision, respectively), to the extent that the underlying processor, operating system, and compiler support it.; On all currently supported platforms, the <code>real</code> type has a range of around 1E-37 to 1E+37 with a precision of at least 6 decimal digits. The <code>double precision</code> type has a range of around 1E-307 to 1E+308 with a precision of at least 15 digits. Values that are too large or too small will cause an error. Rounding might take place if the precision of an input number is too high. Numbers too close to zero that are not representable as distinct from zero will cause an underflow error.; By default, floating point values are output in text form in their shortest precise decimal representation; the decimal value produced is closer to the true stored binary value than to any other value representable in the same binary precision. (However, the output value is currently never exactly midway between two representable values, in order to avoid a widespread bug where input routines do not properly respect the round-to-nearest-even rule.) This value will use at most 17 significant decimal digits for <code>float8</code> values, and at most 9 digits for <code>float4</code> values.; For compatibility with output generated by older versions of PostgreSQL, and to allow the output precision to be reduced, the extra_float_digits parameter can be used to select rounded decimal output instead. Setting a value of 0 restores the previous default of rounding the value to 6 (for <code>float4</code>) or 15 (for <code>float8</code>) significant decimal digits. Setting a negative value reduces the number of digits further; for example -2 would round output to 4 or 13 digits respectively.; PostgreSQL also supports the SQL-standard notations <code>float</code> and <code>float(p)</code> for specifying inexact numeric types. Here, <code>p</code> specifies the minimum acceptable precision in binary digits. PostgreSQL accepts <code>float(1)</code> to <code>float(24)</code> as selecting the <code>real</code> type, while <code>float(25)</code> to <code>float(53)</code> select <code>double precision</code>. Values of <code>p</code> outside the allowed range draw an error. <code>float</code> with no precision specified is taken to mean <code>double precision</code>.",
        "example": [],
        "link": [
            "https://www.postgresql.org/docs/12/datatype-numeric.html#DATATYPE-INT"
        ]
    },
    {
        "type": "type",
        "keyword": "float4",
        "tree": "(identifier FLOAT4)",
        "description": [
            "single precision floating-point number (4 bytes)",
            "variable-precision, inexact"
        ],
        "detail": "[DESCRIPTION]: single precision floating-point number (4 bytes); variable-precision, inexact<sep>[STORAGE SIZE]: 4 bytes<sep>[RANGE]: 6 decimal digits precision<sep>[COMPENSATE]: When rounding values, the <code>numeric</code> type rounds ties away from zero, while (on most machines) the <code>real</code> and <code>double precision</code> types round ties to the nearest even number. For example:; The data types <code>real</code> and <code>double precision</code> are inexact, variable-precision numeric types. On all currently supported platforms, these types are implementations of IEEE Standard 754 for Binary Floating-Point Arithmetic (single and double precision, respectively), to the extent that the underlying processor, operating system, and compiler support it.; On all currently supported platforms, the <code>real</code> type has a range of around 1E-37 to 1E+37 with a precision of at least 6 decimal digits. The <code>double precision</code> type has a range of around 1E-307 to 1E+308 with a precision of at least 15 digits. Values that are too large or too small will cause an error. Rounding might take place if the precision of an input number is too high. Numbers too close to zero that are not representable as distinct from zero will cause an underflow error.; By default, floating point values are output in text form in their shortest precise decimal representation; the decimal value produced is closer to the true stored binary value than to any other value representable in the same binary precision. (However, the output value is currently never exactly midway between two representable values, in order to avoid a widespread bug where input routines do not properly respect the round-to-nearest-even rule.) This value will use at most 17 significant decimal digits for <code>float8</code> values, and at most 9 digits for <code>float4</code> values.; For compatibility with output generated by older versions of PostgreSQL, and to allow the output precision to be reduced, the extra_float_digits parameter can be used to select rounded decimal output instead. Setting a value of 0 restores the previous default of rounding the value to 6 (for <code>float4</code>) or 15 (for <code>float8</code>) significant decimal digits. Setting a negative value reduces the number of digits further; for example -2 would round output to 4 or 13 digits respectively.; PostgreSQL also supports the SQL-standard notations <code>float</code> and <code>float(p)</code> for specifying inexact numeric types. Here, <code>p</code> specifies the minimum acceptable precision in binary digits. PostgreSQL accepts <code>float(1)</code> to <code>float(24)</code> as selecting the <code>real</code> type, while <code>float(25)</code> to <code>float(53)</code> select <code>double precision</code>. Values of <code>p</code> outside the allowed range draw an error. <code>float</code> with no precision specified is taken to mean <code>double precision</code>.",
        "example": [],
        "link": [
            "https://www.postgresql.org/docs/12/datatype-numeric.html#DATATYPE-INT"
        ]
    },
    {
        "type": "type",
        "keyword": "double precision",
        "tree": "(numeric DOUBLE PRECISION)",
        "description": [
            "double precision floating-point number (8 bytes)",
            "variable-precision, inexact"
        ],
        "detail": "[DESCRIPTION]: double precision floating-point number (8 bytes); variable-precision, inexact<sep>[STORAGE SIZE]: 8 bytes<sep>[RANGE]: 15 decimal digits precision<sep>[COMPENSATE]: When rounding values, the <code>numeric</code> type rounds ties away from zero, while (on most machines) the <code>real</code> and <code>double precision</code> types round ties to the nearest even number. For example:; <code>\nSELECT x,\n round(x::numeric) AS num_round,\n round(x::double precision) AS dbl_round\nFROM generate_series(-3.5, 3.5, 1) as x;\n x | num_round | dbl_round\n------+-----------+-----------\n -3.5 | -4 | -4\n -2.5 | -3 | -2\n -1.5 | -2 | -2\n -0.5 | -1 | -0\n 0.5 | 1 | 0\n 1.5 | 2 | 2\n 2.5 | 3 | 2\n 3.5 | 4 | 4\n(8 rows)\n</code>; The data types <code>real</code> and <code>double precision</code> are inexact, variable-precision numeric types. On all currently supported platforms, these types are implementations of IEEE Standard 754 for Binary Floating-Point Arithmetic (single and double precision, respectively), to the extent that the underlying processor, operating system, and compiler support it.; On all currently supported platforms, the <code>real</code> type has a range of around 1E-37 to 1E+37 with a precision of at least 6 decimal digits. The <code>double precision</code> type has a range of around 1E-307 to 1E+308 with a precision of at least 15 digits. Values that are too large or too small will cause an error. Rounding might take place if the precision of an input number is too high. Numbers too close to zero that are not representable as distinct from zero will cause an underflow error.; By default, floating point values are output in text form in their shortest precise decimal representation; the decimal value produced is closer to the true stored binary value than to any other value representable in the same binary precision. (However, the output value is currently never exactly midway between two representable values, in order to avoid a widespread bug where input routines do not properly respect the round-to-nearest-even rule.) This value will use at most 17 significant decimal digits for <code>float8</code> values, and at most 9 digits for <code>float4</code> values.; For compatibility with output generated by older versions of PostgreSQL, and to allow the output precision to be reduced, the extra_float_digits parameter can be used to select rounded decimal output instead. Setting a value of 0 restores the previous default of rounding the value to 6 (for <code>float4</code>) or 15 (for <code>float8</code>) significant decimal digits. Setting a negative value reduces the number of digits further; for example -2 would round output to 4 or 13 digits respectively.; PostgreSQL also supports the SQL-standard notations <code>float</code> and <code>float(p)</code> for specifying inexact numeric types. Here, <code>p</code> specifies the minimum acceptable precision in binary digits. PostgreSQL accepts <code>float(1)</code> to <code>float(24)</code> as selecting the <code>real</code> type, while <code>float(25)</code> to <code>float(53)</code> select <code>double precision</code>. Values of <code>p</code> outside the allowed range draw an error. <code>float</code> with no precision specified is taken to mean <code>double precision</code>.",
        "example": [],
        "link": [
            "https://www.postgresql.org/docs/12/datatype-numeric.html#DATATYPE-INT"
        ]
    },
    {
        "type": "type",
        "keyword": "float8",
        "tree": "(identifier FLOAT8)",
        "description": [
            "double precision floating-point number (8 bytes)",
            "variable-precision, inexact"
        ],
        "detail": "[DESCRIPTION]: double precision floating-point number (8 bytes); variable-precision, inexact<sep>[STORAGE SIZE]: 8 bytes<sep>[RANGE]: 15 decimal digits precision<sep>[COMPENSATE]: When rounding values, the <code>numeric</code> type rounds ties away from zero, while (on most machines) the <code>real</code> and <code>double precision</code> types round ties to the nearest even number. For example:; <code>\nSELECT x,\n round(x::numeric) AS num_round,\n round(x::double precision) AS dbl_round\nFROM generate_series(-3.5, 3.5, 1) as x;\n x | num_round | dbl_round\n------+-----------+-----------\n -3.5 | -4 | -4\n -2.5 | -3 | -2\n -1.5 | -2 | -2\n -0.5 | -1 | -0\n 0.5 | 1 | 0\n 1.5 | 2 | 2\n 2.5 | 3 | 2\n 3.5 | 4 | 4\n(8 rows)\n</code>; The data types <code>real</code> and <code>double precision</code> are inexact, variable-precision numeric types. On all currently supported platforms, these types are implementations of IEEE Standard 754 for Binary Floating-Point Arithmetic (single and double precision, respectively), to the extent that the underlying processor, operating system, and compiler support it.; On all currently supported platforms, the <code>real</code> type has a range of around 1E-37 to 1E+37 with a precision of at least 6 decimal digits. The <code>double precision</code> type has a range of around 1E-307 to 1E+308 with a precision of at least 15 digits. Values that are too large or too small will cause an error. Rounding might take place if the precision of an input number is too high. Numbers too close to zero that are not representable as distinct from zero will cause an underflow error.; By default, floating point values are output in text form in their shortest precise decimal representation; the decimal value produced is closer to the true stored binary value than to any other value representable in the same binary precision. (However, the output value is currently never exactly midway between two representable values, in order to avoid a widespread bug where input routines do not properly respect the round-to-nearest-even rule.) This value will use at most 17 significant decimal digits for <code>float8</code> values, and at most 9 digits for <code>float4</code> values.; For compatibility with output generated by older versions of PostgreSQL, and to allow the output precision to be reduced, the extra_float_digits parameter can be used to select rounded decimal output instead. Setting a value of 0 restores the previous default of rounding the value to 6 (for <code>float4</code>) or 15 (for <code>float8</code>) significant decimal digits. Setting a negative value reduces the number of digits further; for example -2 would round output to 4 or 13 digits respectively.; PostgreSQL also supports the SQL-standard notations <code>float</code> and <code>float(p)</code> for specifying inexact numeric types. Here, <code>p</code> specifies the minimum acceptable precision in binary digits. PostgreSQL accepts <code>float(1)</code> to <code>float(24)</code> as selecting the <code>real</code> type, while <code>float(25)</code> to <code>float(53)</code> select <code>double precision</code>. Values of <code>p</code> outside the allowed range draw an error. <code>float</code> with no precision specified is taken to mean <code>double precision</code>.",
        "example": [],
        "link": [
            "https://www.postgresql.org/docs/12/datatype-numeric.html#DATATYPE-INT"
        ]
    },
    {
        "type": "type",
        "keyword": "smallserial",
        "tree": "(identifier SMALLSERIAL)",
        "description": [
            "autoincrementing two-byte integer",
            "small autoincrementing integer"
        ],
        "detail": "[DESCRIPTION]: autoincrementing two-byte integer; small autoincrementing integer<sep>[STORAGE SIZE]: 2 bytes<sep>[RANGE]: 1 to 32767<sep>[COMPENSATE]: The data types <code>smallserial</code>, <code>serial</code> and <code>bigserial</code> are not true types, but merely a notational convenience for creating unique identifier columns (similar to the <code>AUTO_INCREMENT</code> property supported by some other databases). In the current implementation, specifying:; Because <code>smallserial</code>, <code>serial</code> and <code>bigserial</code> are implemented using sequences, there may be \"holes\" or gaps in the sequence of values which appears in the column, even if no rows are ever deleted. A value allocated from the sequence is still \"used up\" even if a row containing that value is never successfully inserted into the table column. This may happen, for example, if the inserting transaction rolls back. See <code>nextval()</code> in Section 9.16 for details.; The type names <code>serial</code> and <code>serial4</code> are equivalent: both create <code>integer</code> columns. The type names <code>bigserial</code> and <code>serial8</code> work the same way, except that they create a <code>bigint</code> column. <code>bigserial</code> should be used if you anticipate the use of more than 231 identifiers over the lifetime of the table. The type names <code>smallserial</code> and <code>serial2</code> also work the same way, except that they create a <code>smallint</code> column.",
        "example": [],
        "link": [
            "https://www.postgresql.org/docs/12/datatype-numeric.html#DATATYPE-INT"
        ]
    },
    {
        "type": "type",
        "keyword": "serial2",
        "tree": "(identifier SERIAL2)",
        "description": [
            "autoincrementing two-byte integer",
            "small autoincrementing integer"
        ],
        "detail": "[DESCRIPTION]: autoincrementing two-byte integer; small autoincrementing integer<sep>[STORAGE SIZE]: 2 bytes<sep>[RANGE]: 1 to 32767<sep>[COMPENSATE]: The data types <code>smallserial</code>, <code>serial</code> and <code>bigserial</code> are not true types, but merely a notational convenience for creating unique identifier columns (similar to the <code>AUTO_INCREMENT</code> property supported by some other databases). In the current implementation, specifying:; Because <code>smallserial</code>, <code>serial</code> and <code>bigserial</code> are implemented using sequences, there may be \"holes\" or gaps in the sequence of values which appears in the column, even if no rows are ever deleted. A value allocated from the sequence is still \"used up\" even if a row containing that value is never successfully inserted into the table column. This may happen, for example, if the inserting transaction rolls back. See <code>nextval()</code> in Section 9.16 for details.; The type names <code>serial</code> and <code>serial4</code> are equivalent: both create <code>integer</code> columns. The type names <code>bigserial</code> and <code>serial8</code> work the same way, except that they create a <code>bigint</code> column. <code>bigserial</code> should be used if you anticipate the use of more than 231 identifiers over the lifetime of the table. The type names <code>smallserial</code> and <code>serial2</code> also work the same way, except that they create a <code>smallint</code> column.",
        "example": [],
        "link": [
            "https://www.postgresql.org/docs/12/datatype-numeric.html#DATATYPE-INT"
        ]
    },
    {
        "type": "type",
        "keyword": "serial",
        "tree": "(identifier SERIAL)",
        "description": [
            "autoincrementing four-byte integer",
            "autoincrementing integer"
        ],
        "detail": "[DESCRIPTION]: autoincrementing four-byte integer; autoincrementing integer<sep>[STORAGE SIZE]: 8 bytes<sep>[RANGE]: 1 to 9223372036854775807<sep>[COMPENSATE]: \nNote\nThis section describes a PostgreSQL-specific way to create an autoincrementing column. Another way is to use the SQL-standard identity column feature, described at CREATE TABLE.\nThe data types <code>smallserial</code>, <code>serial</code> and <code>bigserial</code> are not true types, but merely a notational convenience for creating unique identifier columns (similar to the <code>AUTO_INCREMENT</code> property supported by some other databases). In the current implementation, specifying:\n<code>\nCREATE TABLE <code>tablename</code> (\n <code>colname</code> SERIAL\n);\n</code>\nis equivalent to specifying:\n<code>\nCREATE SEQUENCE <code>tablename</code>_<code>colname</code>_seq AS integer;\nCREATE TABLE <code>tablename</code> (\n <code>colname</code> integer NOT NULL DEFAULT nextval('<code>tablename</code>_<code>colname</code>_seq')\n);\nALTER SEQUENCE <code>tablename</code>_<code>colname</code>_seq OWNED BY <code>tablename</code>.<code>colname</code>;\n</code>\nThus, we have created an integer column and arranged for its default values to be assigned from a sequence generator. A <code>NOT NULL</code> constraint is applied to ensure that a null value cannot be inserted. (In most cases you would also want to attach a <code>UNIQUE</code> or <code>PRIMARY KEY</code> constraint to prevent duplicate values from being inserted by accident, but this is not automatic.) Lastly, the sequence is marked as \"owned by\" the column, so that it will be dropped if the column or table is dropped.\nNote\nBecause <code>smallserial</code>, <code>serial</code> and <code>bigserial</code> are implemented using sequences, there may be \"holes\" or gaps in the sequence of values which appears in the column, even if no rows are ever deleted. A value allocated from the sequence is still \"used up\" even if a row containing that value is never successfully inserted into the table column. This may happen, for example, if the inserting transaction rolls back. See <code>nextval()</code> in Section 9.16 for details.\nTo insert the next value of the sequence into the <code>serial</code> column, specify that the <code>serial</code> column should be assigned its default value. This can be done either by excluding the column from the list of columns in the <code>INSERT</code> statement, or through the use of the <code>DEFAULT</code> key word.\nThe type names <code>serial</code> and <code>serial4</code> are equivalent: both create <code>integer</code> columns. The type names <code>bigserial</code> and <code>serial8</code> work the same way, except that they create a <code>bigint</code> column. <code>bigserial</code> should be used if you anticipate the use of more than 231 identifiers over the lifetime of the table. The type names <code>smallserial</code> and <code>serial2</code> also work the same way, except that they create a <code>smallint</code> column.\nThe sequence created for a <code>serial</code> column is automatically dropped when the owning column is dropped. You can drop the sequence without dropping the column, but this will force removal of the column default expression.\n",
        "example": [],
        "link": [
            "https://www.postgresql.org/docs/12/datatype-numeric.html#DATATYPE-INT"
        ]
    },
    {
        "type": "type",
        "keyword": "serial4",
        "tree": "(identifier SERIAL4)",
        "description": [
            "autoincrementing four-byte integer",
            "autoincrementing integer"
        ],
        "detail": "[DESCRIPTION]: autoincrementing four-byte integer; autoincrementing integer<sep>[STORAGE SIZE]: 8 bytes<sep>[RANGE]: 1 to 9223372036854775807<sep>[COMPENSATE]: \nNote\nThis section describes a PostgreSQL-specific way to create an autoincrementing column. Another way is to use the SQL-standard identity column feature, described at CREATE TABLE.\nThe data types <code>smallserial</code>, <code>serial</code> and <code>bigserial</code> are not true types, but merely a notational convenience for creating unique identifier columns (similar to the <code>AUTO_INCREMENT</code> property supported by some other databases). In the current implementation, specifying:\n<code>\nCREATE TABLE <code>tablename</code> (\n <code>colname</code> SERIAL\n);\n</code>\nis equivalent to specifying:\n<code>\nCREATE SEQUENCE <code>tablename</code>_<code>colname</code>_seq AS integer;\nCREATE TABLE <code>tablename</code> (\n <code>colname</code> integer NOT NULL DEFAULT nextval('<code>tablename</code>_<code>colname</code>_seq')\n);\nALTER SEQUENCE <code>tablename</code>_<code>colname</code>_seq OWNED BY <code>tablename</code>.<code>colname</code>;\n</code>\nThus, we have created an integer column and arranged for its default values to be assigned from a sequence generator. A <code>NOT NULL</code> constraint is applied to ensure that a null value cannot be inserted. (In most cases you would also want to attach a <code>UNIQUE</code> or <code>PRIMARY KEY</code> constraint to prevent duplicate values from being inserted by accident, but this is not automatic.) Lastly, the sequence is marked as \"owned by\" the column, so that it will be dropped if the column or table is dropped.\nNote\nBecause <code>smallserial</code>, <code>serial</code> and <code>bigserial</code> are implemented using sequences, there may be \"holes\" or gaps in the sequence of values which appears in the column, even if no rows are ever deleted. A value allocated from the sequence is still \"used up\" even if a row containing that value is never successfully inserted into the table column. This may happen, for example, if the inserting transaction rolls back. See <code>nextval()</code> in Section 9.16 for details.\nTo insert the next value of the sequence into the <code>serial</code> column, specify that the <code>serial</code> column should be assigned its default value. This can be done either by excluding the column from the list of columns in the <code>INSERT</code> statement, or through the use of the <code>DEFAULT</code> key word.\nThe type names <code>serial</code> and <code>serial4</code> are equivalent: both create <code>integer</code> columns. The type names <code>bigserial</code> and <code>serial8</code> work the same way, except that they create a <code>bigint</code> column. <code>bigserial</code> should be used if you anticipate the use of more than 231 identifiers over the lifetime of the table. The type names <code>smallserial</code> and <code>serial2</code> also work the same way, except that they create a <code>smallint</code> column.\nThe sequence created for a <code>serial</code> column is automatically dropped when the owning column is dropped. You can drop the sequence without dropping the column, but this will force removal of the column default expression.\n",
        "example": [],
        "link": [
            "https://www.postgresql.org/docs/12/datatype-numeric.html#DATATYPE-INT"
        ]
    },
    {
        "type": "type",
        "keyword": "money",
        "tree": "(identifier MONEY)",
        "description": [
            "currency amount"
        ],
        "detail": "[DESCRIPTION]: currency amount<sep>[STORAGE SIZE]: 8 bytes<sep>[RANGE]: -92233720368547758.08 to +92233720368547758.07<sep>[COMPENSATE]: The <code>money</code> type stores a currency amount with a fixed fractional precision; see Table 8.3. The fractional precision is determined by the database's lc_monetary setting. The range shown in the table assumes there are two fractional digits. Input is accepted in a variety of formats, including integer and floating-point literals, as well as typical currency formatting, such as <code>'$1,000.00'</code>. Output is generally in the latter form but depends on the locale.; Since the output of this data type is locale-sensitive, it might not work to load <code>money</code> data into a database that has a different setting of <code>lc_monetary</code>. To avoid problems, before restoring a dump into a new database make sure <code>lc_monetary</code> has the same or equivalent value as in the database that was dumped.; Values of the <code>numeric</code>, <code>int</code>, and <code>bigint</code> data types can be cast to <code>money</code>. Conversion from the <code>real</code> and <code>double precision</code> data types can be done by casting to <code>numeric</code> first, for example:; <code>\nSELECT '12.34'::float8::numeric::money;\n</code>; A <code>money</code> value can be cast to <code>numeric</code> without loss of precision. Conversion to other types could potentially lose precision, and must also be done in two stages:; <code>\nSELECT '52093.89'::money::numeric::float8;\n</code>; Division of a <code>money</code> value by an integer value is performed with truncation of the fractional part towards zero. To get a rounded result, divide by a floating-point value, or cast the <code>money</code> value to <code>numeric</code> before dividing and back to <code>money</code> afterwards. (The latter is preferable to avoid risking precision loss.) When a <code>money</code> value is divided by another <code>money</code> value, the result is <code>double precision</code> (i.e., a pure number, not money); the currency units cancel each other out in the division.",
        "example": [],
        "link": [
            "https://www.postgresql.org/docs/12/datatype-money.html"
        ]
    },
    {
        "type": "type",
        "keyword": "character varying ( n )",
        "tree": "(character (character_c CHARACTER (opt_varying VARYING)) ( ))",
        "description": [
            "variable-length character string",
            "variable-length with limit"
        ],
        "detail": "[DESCRIPTION]: variable-length character string; variable-length with limit<sep>[COMPENSATE]: SQL defines two primary character types: <code>character varying(n)</code> and <code>character(n)</code>, where <code>n</code> is a positive integer. Both of these types can store strings up to <code>n</code> characters (not bytes) in length. An attempt to store a longer string into a column of these types will result in an error, unless the excess characters are all spaces, in which case the string will be truncated to the maximum length. (This somewhat bizarre exception is required by the SQL standard.) If the string to be stored is shorter than the declared length, values of type <code>character</code> will be space-padded; values of type <code>character varying</code> will simply store the shorter string.; If one explicitly casts a value to <code>character varying(n)</code> or <code>character(n)</code>, then an over-length value will be truncated to <code>n</code> characters without raising an error. (This too is required by the SQL standard.); The notations <code>varchar(n)</code> and <code>char(n)</code> are aliases for <code>character varying(n)</code> and <code>character(n)</code>, respectively. If specified, the length must be greater than zero and cannot exceed 10485760. <code>character</code> without length specifier is equivalent to <code>character(1)</code>. If <code>character varying</code> is used without length specifier, the type accepts strings of any size. The latter is a PostgreSQL extension.; Values of type <code>character</code> are physically padded with spaces to the specified width <code>n</code>, and are stored and displayed that way. However, trailing spaces are treated as semantically insignificant and disregarded when comparing two values of type <code>character</code>. In collations where whitespace is significant, this behavior can produce unexpected results; for example <code>SELECT 'a '::CHAR(2) collate \"C\" < E'a\\n'::CHAR(2)</code> returns true, even though <code>C</code> locale would consider a space to be greater than a newline. Trailing spaces are removed when converting a <code>character</code> value to one of the other string types. Note that trailing spaces are semantically significant in <code>character varying</code> and <code>text</code> values, and when using pattern matching, that is <code>LIKE</code> and regular expressions.; The storage requirement for a short string (up to 126 bytes) is 1 byte plus the actual string, which includes the space padding in the case of <code>character</code>. Longer strings have 4 bytes of overhead instead of 1. Long strings are compressed by the system automatically, so the physical requirement on disk might be less. Very long values are also stored in background tables so that they do not interfere with rapid access to shorter column values. In any case, the longest possible character string that can be stored is about 1 GB. (The maximum value that will be allowed for <code>n</code> in the data type declaration is less than that. It wouldn't be useful to change this because with multibyte character encodings the number of characters and bytes can be quite different. If you desire to store long strings with no specific upper limit, use <code>text</code> or <code>character varying</code> without a length specifier, rather than making up an arbitrary length limit.); There is no performance difference among these three types, apart from increased storage space when using the blank-padded type, and a few extra CPU cycles to check the length when storing into a length-constrained column. While <code>character(n)</code> has performance advantages in some other database systems, there is no such advantage in PostgreSQL; in fact <code>character(n)</code> is usually the slowest of the three because of its additional storage costs. In most situations <code>text</code> or <code>character varying</code> should be used instead.; <code>\nCREATE TABLE test1 (a character(4));\nINSERT INTO test1 VALUES ('ok');\nSELECT a, char_length(a) FROM test1; -- (1)\n a | char_length\n------+-------------\n ok | 2\nCREATE TABLE test2 (b varchar(5));\nINSERT INTO test2 VALUES ('ok');\nINSERT INTO test2 VALUES ('good ');\nINSERT INTO test2 VALUES ('too long');\nERROR: value too long for type character varying(5)\nINSERT INTO test2 VALUES ('too long'::varchar(5)); -- explicit truncation\nSELECT b, char_length(b) FROM test2;\n b | char_length\n-------+-------------\n ok | 2\n good | 5\n too l | 5\n</code>",
        "example": [],
        "link": [
            "https://www.postgresql.org/docs/12/datatype-character.html"
        ]
    },
    {
        "type": "type",
        "keyword": "varchar ( n )",
        "tree": "(character (character_c VARCHAR) ( ))",
        "description": [
            "variable-length character string",
            "variable-length with limit"
        ],
        "detail": "[DESCRIPTION]: variable-length character string; variable-length with limit<sep>[COMPENSATE]: SQL defines two primary character types: <code>character varying(n)</code> and <code>character(n)</code>, where <code>n</code> is a positive integer. Both of these types can store strings up to <code>n</code> characters (not bytes) in length. An attempt to store a longer string into a column of these types will result in an error, unless the excess characters are all spaces, in which case the string will be truncated to the maximum length. (This somewhat bizarre exception is required by the SQL standard.) If the string to be stored is shorter than the declared length, values of type <code>character</code> will be space-padded; values of type <code>character varying</code> will simply store the shorter string.; If one explicitly casts a value to <code>character varying(n)</code> or <code>character(n)</code>, then an over-length value will be truncated to <code>n</code> characters without raising an error. (This too is required by the SQL standard.); The notations <code>varchar(n)</code> and <code>char(n)</code> are aliases for <code>character varying(n)</code> and <code>character(n)</code>, respectively. If specified, the length must be greater than zero and cannot exceed 10485760. <code>character</code> without length specifier is equivalent to <code>character(1)</code>. If <code>character varying</code> is used without length specifier, the type accepts strings of any size. The latter is a PostgreSQL extension.; Values of type <code>character</code> are physically padded with spaces to the specified width <code>n</code>, and are stored and displayed that way. However, trailing spaces are treated as semantically insignificant and disregarded when comparing two values of type <code>character</code>. In collations where whitespace is significant, this behavior can produce unexpected results; for example <code>SELECT 'a '::CHAR(2) collate \"C\" < E'a\\n'::CHAR(2)</code> returns true, even though <code>C</code> locale would consider a space to be greater than a newline. Trailing spaces are removed when converting a <code>character</code> value to one of the other string types. Note that trailing spaces are semantically significant in <code>character varying</code> and <code>text</code> values, and when using pattern matching, that is <code>LIKE</code> and regular expressions.; The storage requirement for a short string (up to 126 bytes) is 1 byte plus the actual string, which includes the space padding in the case of <code>character</code>. Longer strings have 4 bytes of overhead instead of 1. Long strings are compressed by the system automatically, so the physical requirement on disk might be less. Very long values are also stored in background tables so that they do not interfere with rapid access to shorter column values. In any case, the longest possible character string that can be stored is about 1 GB. (The maximum value that will be allowed for <code>n</code> in the data type declaration is less than that. It wouldn't be useful to change this because with multibyte character encodings the number of characters and bytes can be quite different. If you desire to store long strings with no specific upper limit, use <code>text</code> or <code>character varying</code> without a length specifier, rather than making up an arbitrary length limit.); There is no performance difference among these three types, apart from increased storage space when using the blank-padded type, and a few extra CPU cycles to check the length when storing into a length-constrained column. While <code>character(n)</code> has performance advantages in some other database systems, there is no such advantage in PostgreSQL; in fact <code>character(n)</code> is usually the slowest of the three because of its additional storage costs. In most situations <code>text</code> or <code>character varying</code> should be used instead.; <code>\nCREATE TABLE test1 (a character(4));\nINSERT INTO test1 VALUES ('ok');\nSELECT a, char_length(a) FROM test1; -- (1)\n a | char_length\n------+-------------\n ok | 2\nCREATE TABLE test2 (b varchar(5));\nINSERT INTO test2 VALUES ('ok');\nINSERT INTO test2 VALUES ('good ');\nINSERT INTO test2 VALUES ('too long');\nERROR: value too long for type character varying(5)\nINSERT INTO test2 VALUES ('too long'::varchar(5)); -- explicit truncation\nSELECT b, char_length(b) FROM test2;\n b | char_length\n-------+-------------\n ok | 2\n good | 5\n too l | 5\n</code>",
        "example": [],
        "link": [
            "https://www.postgresql.org/docs/12/datatype-character.html"
        ]
    },
    {
        "type": "type",
        "keyword": "character varying",
        "tree": "(character_c CHARACTER (opt_varying VARYING))",
        "description": [
            "variable-length character string",
            "variable-length with limit"
        ],
        "detail": "[DESCRIPTION]: variable-length character string; variable-length with limit<sep>[COMPENSATE]: SQL defines two primary character types: <code>character varying(n)</code> and <code>character(n)</code>, where <code>n</code> is a positive integer. Both of these types can store strings up to <code>n</code> characters (not bytes) in length. An attempt to store a longer string into a column of these types will result in an error, unless the excess characters are all spaces, in which case the string will be truncated to the maximum length. (This somewhat bizarre exception is required by the SQL standard.) If the string to be stored is shorter than the declared length, values of type <code>character</code> will be space-padded; values of type <code>character varying</code> will simply store the shorter string.; If one explicitly casts a value to <code>character varying(n)</code> or <code>character(n)</code>, then an over-length value will be truncated to <code>n</code> characters without raising an error. (This too is required by the SQL standard.); The notations <code>varchar(n)</code> and <code>char(n)</code> are aliases for <code>character varying(n)</code> and <code>character(n)</code>, respectively. If specified, the length must be greater than zero and cannot exceed 10485760. <code>character</code> without length specifier is equivalent to <code>character(1)</code>. If <code>character varying</code> is used without length specifier, the type accepts strings of any size. The latter is a PostgreSQL extension.; Values of type <code>character</code> are physically padded with spaces to the specified width <code>n</code>, and are stored and displayed that way. However, trailing spaces are treated as semantically insignificant and disregarded when comparing two values of type <code>character</code>. In collations where whitespace is significant, this behavior can produce unexpected results; for example <code>SELECT 'a '::CHAR(2) collate \"C\" < E'a\\n'::CHAR(2)</code> returns true, even though <code>C</code> locale would consider a space to be greater than a newline. Trailing spaces are removed when converting a <code>character</code> value to one of the other string types. Note that trailing spaces are semantically significant in <code>character varying</code> and <code>text</code> values, and when using pattern matching, that is <code>LIKE</code> and regular expressions.; The storage requirement for a short string (up to 126 bytes) is 1 byte plus the actual string, which includes the space padding in the case of <code>character</code>. Longer strings have 4 bytes of overhead instead of 1. Long strings are compressed by the system automatically, so the physical requirement on disk might be less. Very long values are also stored in background tables so that they do not interfere with rapid access to shorter column values. In any case, the longest possible character string that can be stored is about 1 GB. (The maximum value that will be allowed for <code>n</code> in the data type declaration is less than that. It wouldn't be useful to change this because with multibyte character encodings the number of characters and bytes can be quite different. If you desire to store long strings with no specific upper limit, use <code>text</code> or <code>character varying</code> without a length specifier, rather than making up an arbitrary length limit.); There is no performance difference among these three types, apart from increased storage space when using the blank-padded type, and a few extra CPU cycles to check the length when storing into a length-constrained column. While <code>character(n)</code> has performance advantages in some other database systems, there is no such advantage in PostgreSQL; in fact <code>character(n)</code> is usually the slowest of the three because of its additional storage costs. In most situations <code>text</code> or <code>character varying</code> should be used instead.; <code>\nCREATE TABLE test1 (a character(4));\nINSERT INTO test1 VALUES ('ok');\nSELECT a, char_length(a) FROM test1; -- (1)\n a | char_length\n------+-------------\n ok | 2\nCREATE TABLE test2 (b varchar(5));\nINSERT INTO test2 VALUES ('ok');\nINSERT INTO test2 VALUES ('good ');\nINSERT INTO test2 VALUES ('too long');\nERROR: value too long for type character varying(5)\nINSERT INTO test2 VALUES ('too long'::varchar(5)); -- explicit truncation\nSELECT b, char_length(b) FROM test2;\n b | char_length\n-------+-------------\n ok | 2\n good | 5\n too l | 5\n</code>",
        "example": [],
        "link": [
            "https://www.postgresql.org/docs/12/datatype-character.html"
        ]
    },
    {
        "type": "type",
        "keyword": "varchar",
        "tree": "(character_c VARCHAR)",
        "description": [
            "variable-length character string",
            "variable-length with limit"
        ],
        "detail": "[DESCRIPTION]: variable-length character string; variable-length with limit<sep>[COMPENSATE]: SQL defines two primary character types: <code>character varying(n)</code> and <code>character(n)</code>, where <code>n</code> is a positive integer. Both of these types can store strings up to <code>n</code> characters (not bytes) in length. An attempt to store a longer string into a column of these types will result in an error, unless the excess characters are all spaces, in which case the string will be truncated to the maximum length. (This somewhat bizarre exception is required by the SQL standard.) If the string to be stored is shorter than the declared length, values of type <code>character</code> will be space-padded; values of type <code>character varying</code> will simply store the shorter string.; If one explicitly casts a value to <code>character varying(n)</code> or <code>character(n)</code>, then an over-length value will be truncated to <code>n</code> characters without raising an error. (This too is required by the SQL standard.); The notations <code>varchar(n)</code> and <code>char(n)</code> are aliases for <code>character varying(n)</code> and <code>character(n)</code>, respectively. If specified, the length must be greater than zero and cannot exceed 10485760. <code>character</code> without length specifier is equivalent to <code>character(1)</code>. If <code>character varying</code> is used without length specifier, the type accepts strings of any size. The latter is a PostgreSQL extension.; Values of type <code>character</code> are physically padded with spaces to the specified width <code>n</code>, and are stored and displayed that way. However, trailing spaces are treated as semantically insignificant and disregarded when comparing two values of type <code>character</code>. In collations where whitespace is significant, this behavior can produce unexpected results; for example <code>SELECT 'a '::CHAR(2) collate \"C\" < E'a\\n'::CHAR(2)</code> returns true, even though <code>C</code> locale would consider a space to be greater than a newline. Trailing spaces are removed when converting a <code>character</code> value to one of the other string types. Note that trailing spaces are semantically significant in <code>character varying</code> and <code>text</code> values, and when using pattern matching, that is <code>LIKE</code> and regular expressions.; The storage requirement for a short string (up to 126 bytes) is 1 byte plus the actual string, which includes the space padding in the case of <code>character</code>. Longer strings have 4 bytes of overhead instead of 1. Long strings are compressed by the system automatically, so the physical requirement on disk might be less. Very long values are also stored in background tables so that they do not interfere with rapid access to shorter column values. In any case, the longest possible character string that can be stored is about 1 GB. (The maximum value that will be allowed for <code>n</code> in the data type declaration is less than that. It wouldn't be useful to change this because with multibyte character encodings the number of characters and bytes can be quite different. If you desire to store long strings with no specific upper limit, use <code>text</code> or <code>character varying</code> without a length specifier, rather than making up an arbitrary length limit.); There is no performance difference among these three types, apart from increased storage space when using the blank-padded type, and a few extra CPU cycles to check the length when storing into a length-constrained column. While <code>character(n)</code> has performance advantages in some other database systems, there is no such advantage in PostgreSQL; in fact <code>character(n)</code> is usually the slowest of the three because of its additional storage costs. In most situations <code>text</code> or <code>character varying</code> should be used instead.; <code>\nCREATE TABLE test1 (a character(4));\nINSERT INTO test1 VALUES ('ok');\nSELECT a, char_length(a) FROM test1; -- (1)\n a | char_length\n------+-------------\n ok | 2\nCREATE TABLE test2 (b varchar(5));\nINSERT INTO test2 VALUES ('ok');\nINSERT INTO test2 VALUES ('good ');\nINSERT INTO test2 VALUES ('too long');\nERROR: value too long for type character varying(5)\nINSERT INTO test2 VALUES ('too long'::varchar(5)); -- explicit truncation\nSELECT b, char_length(b) FROM test2;\n b | char_length\n-------+-------------\n ok | 2\n good | 5\n too l | 5\n</code>",
        "example": [],
        "link": [
            "https://www.postgresql.org/docs/12/datatype-character.html"
        ]
    },
    {
        "type": "type",
        "keyword": "character ( n )",
        "tree": "(character (character_c CHARACTER) ( ))",
        "description": [
            "fixed-length character string",
            "fixed-length, blank padded"
        ],
        "detail": "[DESCRIPTION]: fixed-length character string; fixed-length, blank padded<sep>[STORAGE SIZE]: 1 byte<sep>[COMPENSATE]: SQL defines two primary character types: <code>character varying(n)</code> and <code>character(n)</code>, where <code>n</code> is a positive integer. Both of these types can store strings up to <code>n</code> characters (not bytes) in length. An attempt to store a longer string into a column of these types will result in an error, unless the excess characters are all spaces, in which case the string will be truncated to the maximum length. (This somewhat bizarre exception is required by the SQL standard.) If the string to be stored is shorter than the declared length, values of type <code>character</code> will be space-padded; values of type <code>character varying</code> will simply store the shorter string.; If one explicitly casts a value to <code>character varying(n)</code> or <code>character(n)</code>, then an over-length value will be truncated to <code>n</code> characters without raising an error. (This too is required by the SQL standard.); The notations <code>varchar(n)</code> and <code>char(n)</code> are aliases for <code>character varying(n)</code> and <code>character(n)</code>, respectively. If specified, the length must be greater than zero and cannot exceed 10485760. <code>character</code> without length specifier is equivalent to <code>character(1)</code>. If <code>character varying</code> is used without length specifier, the type accepts strings of any size. The latter is a PostgreSQL extension.; Values of type <code>character</code> are physically padded with spaces to the specified width <code>n</code>, and are stored and displayed that way. However, trailing spaces are treated as semantically insignificant and disregarded when comparing two values of type <code>character</code>. In collations where whitespace is significant, this behavior can produce unexpected results; for example <code>SELECT 'a '::CHAR(2) collate \"C\" < E'a\\n'::CHAR(2)</code> returns true, even though <code>C</code> locale would consider a space to be greater than a newline. Trailing spaces are removed when converting a <code>character</code> value to one of the other string types. Note that trailing spaces are semantically significant in <code>character varying</code> and <code>text</code> values, and when using pattern matching, that is <code>LIKE</code> and regular expressions.; The storage requirement for a short string (up to 126 bytes) is 1 byte plus the actual string, which includes the space padding in the case of <code>character</code>. Longer strings have 4 bytes of overhead instead of 1. Long strings are compressed by the system automatically, so the physical requirement on disk might be less. Very long values are also stored in background tables so that they do not interfere with rapid access to shorter column values. In any case, the longest possible character string that can be stored is about 1 GB. (The maximum value that will be allowed for <code>n</code> in the data type declaration is less than that. It wouldn't be useful to change this because with multibyte character encodings the number of characters and bytes can be quite different. If you desire to store long strings with no specific upper limit, use <code>text</code> or <code>character varying</code> without a length specifier, rather than making up an arbitrary length limit.); There is no performance difference among these three types, apart from increased storage space when using the blank-padded type, and a few extra CPU cycles to check the length when storing into a length-constrained column. While <code>character(n)</code> has performance advantages in some other database systems, there is no such advantage in PostgreSQL; in fact <code>character(n)</code> is usually the slowest of the three because of its additional storage costs. In most situations <code>text</code> or <code>character varying</code> should be used instead.; <code>\nCREATE TABLE test1 (a character(4));\nINSERT INTO test1 VALUES ('ok');\nSELECT a, char_length(a) FROM test1; -- (1)\n a | char_length\n------+-------------\n ok | 2\nCREATE TABLE test2 (b varchar(5));\nINSERT INTO test2 VALUES ('ok');\nINSERT INTO test2 VALUES ('good ');\nINSERT INTO test2 VALUES ('too long');\nERROR: value too long for type character varying(5)\nINSERT INTO test2 VALUES ('too long'::varchar(5)); -- explicit truncation\nSELECT b, char_length(b) FROM test2;\n b | char_length\n-------+-------------\n ok | 2\n good | 5\n too l | 5\n</code>; The <code>char_length</code> function is discussed in Section 9.4.; There are two other fixed-length character types in PostgreSQL, shown in Table 8.5. The <code>name</code> type exists only for the storage of identifiers in the internal system catalogs and is not intended for use by the general user. Its length is currently defined as 64 bytes (63 usable characters plus terminator) but should be referenced using the constant <code>NAMEDATALEN</code> in <code>C</code> source code. The length is set at compile time (and is therefore adjustable for special uses); the default maximum length might change in a future release. The type <code>\"char\"</code> (note the quotes) is different from <code>char(1)</code> in that it only uses one byte of storage. It is internally used in the system catalogs as a simplistic enumeration type.",
        "example": [],
        "link": [
            "https://www.postgresql.org/docs/12/datatype-character.html"
        ]
    },
    {
        "type": "type",
        "keyword": "char ( n )",
        "tree": "(character (character_c CHAR) ( ))",
        "description": [
            "fixed-length character string",
            "fixed-length, blank padded"
        ],
        "detail": "[DESCRIPTION]: fixed-length character string; fixed-length, blank padded<sep>[STORAGE SIZE]: 1 byte<sep>[COMPENSATE]: SQL defines two primary character types: <code>character varying(n)</code> and <code>character(n)</code>, where <code>n</code> is a positive integer. Both of these types can store strings up to <code>n</code> characters (not bytes) in length. An attempt to store a longer string into a column of these types will result in an error, unless the excess characters are all spaces, in which case the string will be truncated to the maximum length. (This somewhat bizarre exception is required by the SQL standard.) If the string to be stored is shorter than the declared length, values of type <code>character</code> will be space-padded; values of type <code>character varying</code> will simply store the shorter string.; If one explicitly casts a value to <code>character varying(n)</code> or <code>character(n)</code>, then an over-length value will be truncated to <code>n</code> characters without raising an error. (This too is required by the SQL standard.); The notations <code>varchar(n)</code> and <code>char(n)</code> are aliases for <code>character varying(n)</code> and <code>character(n)</code>, respectively. If specified, the length must be greater than zero and cannot exceed 10485760. <code>character</code> without length specifier is equivalent to <code>character(1)</code>. If <code>character varying</code> is used without length specifier, the type accepts strings of any size. The latter is a PostgreSQL extension.; Values of type <code>character</code> are physically padded with spaces to the specified width <code>n</code>, and are stored and displayed that way. However, trailing spaces are treated as semantically insignificant and disregarded when comparing two values of type <code>character</code>. In collations where whitespace is significant, this behavior can produce unexpected results; for example <code>SELECT 'a '::CHAR(2) collate \"C\" < E'a\\n'::CHAR(2)</code> returns true, even though <code>C</code> locale would consider a space to be greater than a newline. Trailing spaces are removed when converting a <code>character</code> value to one of the other string types. Note that trailing spaces are semantically significant in <code>character varying</code> and <code>text</code> values, and when using pattern matching, that is <code>LIKE</code> and regular expressions.; The storage requirement for a short string (up to 126 bytes) is 1 byte plus the actual string, which includes the space padding in the case of <code>character</code>. Longer strings have 4 bytes of overhead instead of 1. Long strings are compressed by the system automatically, so the physical requirement on disk might be less. Very long values are also stored in background tables so that they do not interfere with rapid access to shorter column values. In any case, the longest possible character string that can be stored is about 1 GB. (The maximum value that will be allowed for <code>n</code> in the data type declaration is less than that. It wouldn't be useful to change this because with multibyte character encodings the number of characters and bytes can be quite different. If you desire to store long strings with no specific upper limit, use <code>text</code> or <code>character varying</code> without a length specifier, rather than making up an arbitrary length limit.); There is no performance difference among these three types, apart from increased storage space when using the blank-padded type, and a few extra CPU cycles to check the length when storing into a length-constrained column. While <code>character(n)</code> has performance advantages in some other database systems, there is no such advantage in PostgreSQL; in fact <code>character(n)</code> is usually the slowest of the three because of its additional storage costs. In most situations <code>text</code> or <code>character varying</code> should be used instead.; <code>\nCREATE TABLE test1 (a character(4));\nINSERT INTO test1 VALUES ('ok');\nSELECT a, char_length(a) FROM test1; -- (1)\n a | char_length\n------+-------------\n ok | 2\nCREATE TABLE test2 (b varchar(5));\nINSERT INTO test2 VALUES ('ok');\nINSERT INTO test2 VALUES ('good ');\nINSERT INTO test2 VALUES ('too long');\nERROR: value too long for type character varying(5)\nINSERT INTO test2 VALUES ('too long'::varchar(5)); -- explicit truncation\nSELECT b, char_length(b) FROM test2;\n b | char_length\n-------+-------------\n ok | 2\n good | 5\n too l | 5\n</code>; The <code>char_length</code> function is discussed in Section 9.4.; There are two other fixed-length character types in PostgreSQL, shown in Table 8.5. The <code>name</code> type exists only for the storage of identifiers in the internal system catalogs and is not intended for use by the general user. Its length is currently defined as 64 bytes (63 usable characters plus terminator) but should be referenced using the constant <code>NAMEDATALEN</code> in <code>C</code> source code. The length is set at compile time (and is therefore adjustable for special uses); the default maximum length might change in a future release. The type <code>\"char\"</code> (note the quotes) is different from <code>char(1)</code> in that it only uses one byte of storage. It is internally used in the system catalogs as a simplistic enumeration type.",
        "example": [],
        "link": [
            "https://www.postgresql.org/docs/12/datatype-character.html"
        ]
    },
    {
        "type": "type",
        "keyword": "character",
        "tree": "(character_c CHARACTER)",
        "description": [
            "fixed-length character string",
            "fixed-length, blank padded"
        ],
        "detail": "[DESCRIPTION]: fixed-length character string; fixed-length, blank padded<sep>[STORAGE SIZE]: 1 byte<sep>[COMPENSATE]: SQL defines two primary character types: <code>character varying(n)</code> and <code>character(n)</code>, where <code>n</code> is a positive integer. Both of these types can store strings up to <code>n</code> characters (not bytes) in length. An attempt to store a longer string into a column of these types will result in an error, unless the excess characters are all spaces, in which case the string will be truncated to the maximum length. (This somewhat bizarre exception is required by the SQL standard.) If the string to be stored is shorter than the declared length, values of type <code>character</code> will be space-padded; values of type <code>character varying</code> will simply store the shorter string.; If one explicitly casts a value to <code>character varying(n)</code> or <code>character(n)</code>, then an over-length value will be truncated to <code>n</code> characters without raising an error. (This too is required by the SQL standard.); The notations <code>varchar(n)</code> and <code>char(n)</code> are aliases for <code>character varying(n)</code> and <code>character(n)</code>, respectively. If specified, the length must be greater than zero and cannot exceed 10485760. <code>character</code> without length specifier is equivalent to <code>character(1)</code>. If <code>character varying</code> is used without length specifier, the type accepts strings of any size. The latter is a PostgreSQL extension.; Values of type <code>character</code> are physically padded with spaces to the specified width <code>n</code>, and are stored and displayed that way. However, trailing spaces are treated as semantically insignificant and disregarded when comparing two values of type <code>character</code>. In collations where whitespace is significant, this behavior can produce unexpected results; for example <code>SELECT 'a '::CHAR(2) collate \"C\" < E'a\\n'::CHAR(2)</code> returns true, even though <code>C</code> locale would consider a space to be greater than a newline. Trailing spaces are removed when converting a <code>character</code> value to one of the other string types. Note that trailing spaces are semantically significant in <code>character varying</code> and <code>text</code> values, and when using pattern matching, that is <code>LIKE</code> and regular expressions.; The storage requirement for a short string (up to 126 bytes) is 1 byte plus the actual string, which includes the space padding in the case of <code>character</code>. Longer strings have 4 bytes of overhead instead of 1. Long strings are compressed by the system automatically, so the physical requirement on disk might be less. Very long values are also stored in background tables so that they do not interfere with rapid access to shorter column values. In any case, the longest possible character string that can be stored is about 1 GB. (The maximum value that will be allowed for <code>n</code> in the data type declaration is less than that. It wouldn't be useful to change this because with multibyte character encodings the number of characters and bytes can be quite different. If you desire to store long strings with no specific upper limit, use <code>text</code> or <code>character varying</code> without a length specifier, rather than making up an arbitrary length limit.); There is no performance difference among these three types, apart from increased storage space when using the blank-padded type, and a few extra CPU cycles to check the length when storing into a length-constrained column. While <code>character(n)</code> has performance advantages in some other database systems, there is no such advantage in PostgreSQL; in fact <code>character(n)</code> is usually the slowest of the three because of its additional storage costs. In most situations <code>text</code> or <code>character varying</code> should be used instead.; <code>\nCREATE TABLE test1 (a character(4));\nINSERT INTO test1 VALUES ('ok');\nSELECT a, char_length(a) FROM test1; -- (1)\n a | char_length\n------+-------------\n ok | 2\nCREATE TABLE test2 (b varchar(5));\nINSERT INTO test2 VALUES ('ok');\nINSERT INTO test2 VALUES ('good ');\nINSERT INTO test2 VALUES ('too long');\nERROR: value too long for type character varying(5)\nINSERT INTO test2 VALUES ('too long'::varchar(5)); -- explicit truncation\nSELECT b, char_length(b) FROM test2;\n b | char_length\n-------+-------------\n ok | 2\n good | 5\n too l | 5\n</code>; The <code>char_length</code> function is discussed in Section 9.4.; There are two other fixed-length character types in PostgreSQL, shown in Table 8.5. The <code>name</code> type exists only for the storage of identifiers in the internal system catalogs and is not intended for use by the general user. Its length is currently defined as 64 bytes (63 usable characters plus terminator) but should be referenced using the constant <code>NAMEDATALEN</code> in <code>C</code> source code. The length is set at compile time (and is therefore adjustable for special uses); the default maximum length might change in a future release. The type <code>\"char\"</code> (note the quotes) is different from <code>char(1)</code> in that it only uses one byte of storage. It is internally used in the system catalogs as a simplistic enumeration type.",
        "example": [],
        "link": [
            "https://www.postgresql.org/docs/12/datatype-character.html"
        ]
    },
    {
        "type": "type",
        "keyword": "char",
        "tree": "(character_c CHAR)",
        "description": [
            "fixed-length character string",
            "fixed-length, blank padded"
        ],
        "detail": "[DESCRIPTION]: fixed-length character string; fixed-length, blank padded<sep>[STORAGE SIZE]: 1 byte<sep>[COMPENSATE]: SQL defines two primary character types: <code>character varying(n)</code> and <code>character(n)</code>, where <code>n</code> is a positive integer. Both of these types can store strings up to <code>n</code> characters (not bytes) in length. An attempt to store a longer string into a column of these types will result in an error, unless the excess characters are all spaces, in which case the string will be truncated to the maximum length. (This somewhat bizarre exception is required by the SQL standard.) If the string to be stored is shorter than the declared length, values of type <code>character</code> will be space-padded; values of type <code>character varying</code> will simply store the shorter string.; If one explicitly casts a value to <code>character varying(n)</code> or <code>character(n)</code>, then an over-length value will be truncated to <code>n</code> characters without raising an error. (This too is required by the SQL standard.); The notations <code>varchar(n)</code> and <code>char(n)</code> are aliases for <code>character varying(n)</code> and <code>character(n)</code>, respectively. If specified, the length must be greater than zero and cannot exceed 10485760. <code>character</code> without length specifier is equivalent to <code>character(1)</code>. If <code>character varying</code> is used without length specifier, the type accepts strings of any size. The latter is a PostgreSQL extension.; Values of type <code>character</code> are physically padded with spaces to the specified width <code>n</code>, and are stored and displayed that way. However, trailing spaces are treated as semantically insignificant and disregarded when comparing two values of type <code>character</code>. In collations where whitespace is significant, this behavior can produce unexpected results; for example <code>SELECT 'a '::CHAR(2) collate \"C\" < E'a\\n'::CHAR(2)</code> returns true, even though <code>C</code> locale would consider a space to be greater than a newline. Trailing spaces are removed when converting a <code>character</code> value to one of the other string types. Note that trailing spaces are semantically significant in <code>character varying</code> and <code>text</code> values, and when using pattern matching, that is <code>LIKE</code> and regular expressions.; The storage requirement for a short string (up to 126 bytes) is 1 byte plus the actual string, which includes the space padding in the case of <code>character</code>. Longer strings have 4 bytes of overhead instead of 1. Long strings are compressed by the system automatically, so the physical requirement on disk might be less. Very long values are also stored in background tables so that they do not interfere with rapid access to shorter column values. In any case, the longest possible character string that can be stored is about 1 GB. (The maximum value that will be allowed for <code>n</code> in the data type declaration is less than that. It wouldn't be useful to change this because with multibyte character encodings the number of characters and bytes can be quite different. If you desire to store long strings with no specific upper limit, use <code>text</code> or <code>character varying</code> without a length specifier, rather than making up an arbitrary length limit.); There is no performance difference among these three types, apart from increased storage space when using the blank-padded type, and a few extra CPU cycles to check the length when storing into a length-constrained column. While <code>character(n)</code> has performance advantages in some other database systems, there is no such advantage in PostgreSQL; in fact <code>character(n)</code> is usually the slowest of the three because of its additional storage costs. In most situations <code>text</code> or <code>character varying</code> should be used instead.; <code>\nCREATE TABLE test1 (a character(4));\nINSERT INTO test1 VALUES ('ok');\nSELECT a, char_length(a) FROM test1; -- (1)\n a | char_length\n------+-------------\n ok | 2\nCREATE TABLE test2 (b varchar(5));\nINSERT INTO test2 VALUES ('ok');\nINSERT INTO test2 VALUES ('good ');\nINSERT INTO test2 VALUES ('too long');\nERROR: value too long for type character varying(5)\nINSERT INTO test2 VALUES ('too long'::varchar(5)); -- explicit truncation\nSELECT b, char_length(b) FROM test2;\n b | char_length\n-------+-------------\n ok | 2\n good | 5\n too l | 5\n</code>; The <code>char_length</code> function is discussed in Section 9.4.; There are two other fixed-length character types in PostgreSQL, shown in Table 8.5. The <code>name</code> type exists only for the storage of identifiers in the internal system catalogs and is not intended for use by the general user. Its length is currently defined as 64 bytes (63 usable characters plus terminator) but should be referenced using the constant <code>NAMEDATALEN</code> in <code>C</code> source code. The length is set at compile time (and is therefore adjustable for special uses); the default maximum length might change in a future release. The type <code>\"char\"</code> (note the quotes) is different from <code>char(1)</code> in that it only uses one byte of storage. It is internally used in the system catalogs as a simplistic enumeration type.",
        "example": [],
        "link": [
            "https://www.postgresql.org/docs/12/datatype-character.html"
        ]
    },
    {
        "type": "type",
        "keyword": "text",
        "tree": "(unreserved_keyword TEXT)",
        "description": [
            "variable-length character string",
            "variable unlimited length"
        ],
        "detail": "[DESCRIPTION]: variable-length character string; variable unlimited length<sep>[COMPENSATE]: In addition, PostgreSQL provides the <code>text</code> type, which stores strings of any length. Although the type <code>text</code> is not in the SQL standard, several other SQL database management systems have it as well.; Values of type <code>character</code> are physically padded with spaces to the specified width <code>n</code>, and are stored and displayed that way. However, trailing spaces are treated as semantically insignificant and disregarded when comparing two values of type <code>character</code>. In collations where whitespace is significant, this behavior can produce unexpected results; for example <code>SELECT 'a '::CHAR(2) collate \"C\" < E'a\\n'::CHAR(2)</code> returns true, even though <code>C</code> locale would consider a space to be greater than a newline. Trailing spaces are removed when converting a <code>character</code> value to one of the other string types. Note that trailing spaces are semantically significant in <code>character varying</code> and <code>text</code> values, and when using pattern matching, that is <code>LIKE</code> and regular expressions.; The storage requirement for a short string (up to 126 bytes) is 1 byte plus the actual string, which includes the space padding in the case of <code>character</code>. Longer strings have 4 bytes of overhead instead of 1. Long strings are compressed by the system automatically, so the physical requirement on disk might be less. Very long values are also stored in background tables so that they do not interfere with rapid access to shorter column values. In any case, the longest possible character string that can be stored is about 1 GB. (The maximum value that will be allowed for <code>n</code> in the data type declaration is less than that. It wouldn't be useful to change this because with multibyte character encodings the number of characters and bytes can be quite different. If you desire to store long strings with no specific upper limit, use <code>text</code> or <code>character varying</code> without a length specifier, rather than making up an arbitrary length limit.); There is no performance difference among these three types, apart from increased storage space when using the blank-padded type, and a few extra CPU cycles to check the length when storing into a length-constrained column. While <code>character(n)</code> has performance advantages in some other database systems, there is no such advantage in PostgreSQL; in fact <code>character(n)</code> is usually the slowest of the three because of its additional storage costs. In most situations <code>text</code> or <code>character varying</code> should be used instead.",
        "example": [],
        "link": [
            "https://www.postgresql.org/docs/12/datatype-character.html"
        ]
    },
    {
        "type": "type",
        "keyword": "bytea",
        "tree": "(identifier BYTEA)",
        "description": [
            "binary data (\"byte array\")",
            "variable-length binary string"
        ],
        "detail": "[DESCRIPTION]: binary data (\"byte array\"); variable-length binary string<sep>[STORAGE SIZE]: 1 or 4 bytes plus the actual binary string<sep>[COMPENSATE]: The <code>bytea</code> data type allows storage of binary strings; see Table 8.6.; The <code>bytea</code> type supports two formats for input and output: \"hex\" format and PostgreSQL's historical \"escape\" format. Both of these are always accepted on input. The output format depends on the configuration parameter bytea_output; the default is hex. (Note that the hex format was introduced in PostgreSQL 9.0; earlier versions and some tools don't understand it.); The SQL standard defines a different binary string type, called <code>BLOB</code> or <code>BINARY LARGE OBJECT</code>. The input format is different from <code>bytea</code>, but the provided functions and operators are mostly the same.; \nThe \"hex\" format encodes binary data as 2 hexadecimal digits per byte, most significant nibble first. The entire string is preceded by the sequence <code>\\x</code> (to distinguish it from the escape format). In some contexts, the initial backslash may need to be escaped by doubling it (see Section 4.1.2.1). For input, the hexadecimal digits can be either upper or lower case, and whitespace is permitted between digit pairs (but not within a digit pair nor in the starting <code>\\x</code> sequence). The hex format is compatible with a wide range of external applications and protocols, and it tends to be faster to convert than the escape format, so its use is preferred.\nExample:\n<code>\nSET bytea_output = 'hex';\nSELECT '\\xDEADBEEF'::bytea;\n bytea\n------------\n \\xdeadbeef\n</code>\n; \nThe \"escape\" format is the traditional PostgreSQL format for the <code>bytea</code> type. It takes the approach of representing a binary string as a sequence of ASCII characters, while converting those bytes that cannot be represented as an ASCII character into special escape sequences. If, from the point of view of the application, representing bytes as characters makes sense, then this representation can be convenient. But in practice it is usually confusing because it fuzzes up the distinction between binary strings and character strings, and also the particular escape mechanism that was chosen is somewhat unwieldy. Therefore, this format should probably be avoided for most new applications.\nWhen entering <code>bytea</code> values in escape format, octets of certain values must be escaped, while all octet values can be escaped. In general, to escape an octet, convert it into its three-digit octal value and precede it by a backslash. Backslash itself (octet decimal value 92) can alternatively be represented by double backslashes. Table 8.7 shows the characters that must be escaped, and gives the alternative escape sequences where applicable.\nTable 8.7. <code>bytea</code> Literal Escaped Octets\n<table>\n<thead>\n<tr>\n<th>Decimal Octet Value</th>\n<th>Description</th>\n<th>Escaped Input Representation</th>\n<th>Example</th>\n<th>Hex Representation</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>0</td>\n<td>zero octet</td>\n<td><code>'\\000'</code></td>\n<td><code>SELECT '\\000'::bytea;</code></td>\n<td><code>\\x00</code></td>\n</tr>\n<tr>\n<td>39</td>\n<td>single quote</td>\n<td><code>''''</code> or <code>'\\047'</code></td>\n<td><code>SELECT ''''::bytea;</code></td>\n<td><code>\\x27</code></td>\n</tr>\n<tr>\n<td>92</td>\n<td>backslash</td>\n<td><code>'\\\\'</code> or <code>'\\134'</code></td>\n<td><code>SELECT '\\\\'::bytea;</code></td>\n<td><code>\\x5c</code></td>\n</tr>\n<tr>\n<td>0 to 31 and 127 to 255</td>\n<td>\"non-printable\" octets</td>\n<td><code>'\\xxx'</code> (octal value)</td>\n<td><code>SELECT '\\001'::bytea;</code></td>\n<td><code>\\x01</code></td>\n</tr>\n</tbody>\n</table>\nThe requirement to escape non-printable octets varies depending on locale settings. In some instances you can get away with leaving them unescaped.\nThe reason that single quotes must be doubled, as shown in Table 8.7, is that this is true for any string literal in a SQL command. The generic string-literal parser consumes the outermost single quotes and reduces any pair of single quotes to one data character. What the <code>bytea</code> input function sees is just one single quote, which it treats as a plain data character. However, the <code>bytea</code> input function treats backslashes as special, and the other behaviors shown in Table 8.7 are implemented by that function.\nIn some contexts, backslashes must be doubled compared to what is shown above, because the generic string-literal parser will also reduce pairs of backslashes to one data character; see Section 4.1.2.1.\n<code>Bytea</code> octets are output in <code>hex</code> format by default. If you change bytea_output to <code>escape</code>, \"non-printable\" octets are converted to their equivalent three-digit octal value and preceded by one backslash. Most \"printable\" octets are output by their standard representation in the client character set, e.g.:\n<code>\nSET bytea_output = 'escape';\nSELECT 'abc \\153\\154\\155 \\052\\251\\124'::bytea;\n bytea\n----------------\n abc klm *\\251T\n</code>\nThe octet with decimal value 92 (backslash) is doubled in the output. Details are in Table 8.8.\nTable 8.8. <code>bytea</code> Output Escaped Octets\n<table>\n<thead>\n<tr>\n<th>Decimal Octet Value</th>\n<th>Description</th>\n<th>Escaped Output Representation</th>\n<th>Example</th>\n<th>Output Result</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>92</td>\n<td>backslash</td>\n<td><code>\\\\</code></td>\n<td><code>SELECT '\\134'::bytea;</code></td>\n<td><code>\\\\</code></td>\n</tr>\n<tr>\n<td>0 to 31 and 127 to 255</td>\n<td>\"non-printable\" octets</td>\n<td><code>\\xxx</code> (octal value)</td>\n<td><code>SELECT '\\001'::bytea;</code></td>\n<td><code>\\001</code></td>\n</tr>\n<tr>\n<td>32 to 126</td>\n<td>\"printable\" octets</td>\n<td>client character set representation</td>\n<td><code>SELECT '\\176'::bytea;</code></td>\n<td><code>~</code></td>\n</tr>\n</tbody>\n</table>\nDepending on the front end to PostgreSQL you use, you might have additional work to do in terms of escaping and unescaping <code>bytea</code> strings. For example, you might also have to escape line feeds and carriage returns if your interface automatically translates these.\n",
        "example": [],
        "link": [
            "https://www.postgresql.org/docs/12/datatype-binary.html"
        ]
    },
    {
        "type": "type",
        "keyword": "timestamp ( p )",
        "tree": "(constdatetime TIMESTAMP ( ))",
        "description": [
            "date and time (no time zone)",
            "both date and time (no time zone)"
        ],
        "detail": "[DESCRIPTION]: date and time (no time zone); both date and time (no time zone)<sep>[STORAGE SIZE]: 8 bytes<sep>[LOW VALUE]: 4713 BC<sep>[HIGH VALUE]: 294276 AD<sep>[COMPENSATE]: The SQL standard requires that writing just <code>timestamp</code> be equivalent to <code>timestamp without time zone</code>, and PostgreSQL honors that behavior. <code>timestamptz</code> is accepted as an abbreviation for <code>timestamp with time zone</code>; this is a PostgreSQL extension.; <code>time</code>, <code>timestamp</code>, and <code>interval</code> accept an optional precision value <code>p</code> which specifies the number of fractional digits retained in the seconds field. By default, there is no explicit bound on precision. The allowed range of <code>p</code> is from 0 to 6.; The type <code>time with time zone</code> is defined by the SQL standard, but the definition exhibits properties which lead to questionable usefulness. In most cases, a combination of <code>date</code>, <code>time</code>, <code>timestamp without time zone</code>, and <code>timestamp with time zone</code> should provide a complete range of date/time functionality required by any application.; where <code>p</code> is an optional precision specification giving the number of fractional digits in the seconds field. Precision can be specified for <code>time</code>, <code>timestamp</code>, and <code>interval</code> types, and can range from 0 to 6. If no precision is specified in a constant specification, it defaults to the precision of the literal value (but not more than 6 digits).; The SQL standard differentiates <code>timestamp without time zone</code> and <code>timestamp with time zone</code> literals by the presence of a \"+\" or \"-\" symbol and time zone offset after the time. Hence, according to the standard,; <code>TIMESTAMP '2004-10-19 10:23:54'</code>; is a <code>timestamp without time zone</code>, while; <code>TIMESTAMP '2004-10-19 10:23:54+02'</code>; is a <code>timestamp with time zone</code>. PostgreSQL never examines the content of a literal string before determining its type, and therefore will treat both of the above as <code>timestamp without time zone</code>. To ensure that a literal is treated as <code>timestamp with time zone</code>, give it the correct explicit type:; <code>TIMESTAMP WITH TIME ZONE '2004-10-19 10:23:54+02'</code>; In a literal that has been determined to be <code>timestamp without time zone</code>, PostgreSQL will silently ignore any time zone indication. That is, the resulting value is derived from the date/time fields in the input value, and is not adjusted for time zone.; For <code>timestamp with time zone</code>, the internally stored value is always in UTC (Universal Coordinated Time, traditionally known as Greenwich Mean Time, GMT). An input value that has an explicit time zone specified is converted to UTC using the appropriate offset for that time zone. If no time zone is stated in the input string, then it is assumed to be in the time zone indicated by the system's TimeZone parameter, and is converted to UTC using the offset for the <code>timezone</code> zone.; When a <code>timestamp with time zone</code> value is output, it is always converted from UTC to the current <code>timezone</code> zone, and displayed as local time in that zone. To see the time in another time zone, either change <code>timezone</code> or use the <code>AT TIME ZONE</code> construct (see Section 9.9.3).; Conversions between <code>timestamp without time zone</code> and <code>timestamp with time zone</code> normally assume that the <code>timestamp without time zone</code> value should be taken or given as <code>timezone</code> local time. A different time zone can be specified for the conversion using <code>AT TIME ZONE</code>.; The following SQL-compatible functions can also be used to obtain the current time value for the corresponding data type: <code>CURRENT_DATE</code>, <code>CURRENT_TIME</code>, <code>CURRENT_TIMESTAMP</code>, <code>LOCALTIME</code>, <code>LOCALTIMESTAMP</code>. (See Section 9.9.4.) Note that these are SQL functions and are not recognized in data input strings.; Internally <code>interval</code> values are stored as months, days, and microseconds. This is done because the number of days in a month varies, and a day can have 23 or 25 hours if a daylight savings time adjustment is involved. The months and days fields are integers while the microseconds field can store fractional seconds. Because intervals are usually created from constant strings or <code>timestamp</code> subtraction, this storage method works well in most cases, but can cause unexpected results:",
        "example": [],
        "link": [
            "https://www.postgresql.org/docs/12/datatype-datetime.html"
        ]
    },
    {
        "type": "type",
        "keyword": "timestamp ( p ) without time zone",
        "tree": "(constdatetime TIMESTAMP ( ) (opt_timezone WITHOUT TIME ZONE))",
        "description": [
            "date and time (no time zone)",
            "both date and time (no time zone)"
        ],
        "detail": "[DESCRIPTION]: date and time (no time zone); both date and time (no time zone)<sep>[STORAGE SIZE]: 8 bytes<sep>[LOW VALUE]: 4713 BC<sep>[HIGH VALUE]: 294276 AD<sep>[COMPENSATE]: The SQL standard requires that writing just <code>timestamp</code> be equivalent to <code>timestamp without time zone</code>, and PostgreSQL honors that behavior. <code>timestamptz</code> is accepted as an abbreviation for <code>timestamp with time zone</code>; this is a PostgreSQL extension.; <code>time</code>, <code>timestamp</code>, and <code>interval</code> accept an optional precision value <code>p</code> which specifies the number of fractional digits retained in the seconds field. By default, there is no explicit bound on precision. The allowed range of <code>p</code> is from 0 to 6.; The type <code>time with time zone</code> is defined by the SQL standard, but the definition exhibits properties which lead to questionable usefulness. In most cases, a combination of <code>date</code>, <code>time</code>, <code>timestamp without time zone</code>, and <code>timestamp with time zone</code> should provide a complete range of date/time functionality required by any application.; where <code>p</code> is an optional precision specification giving the number of fractional digits in the seconds field. Precision can be specified for <code>time</code>, <code>timestamp</code>, and <code>interval</code> types, and can range from 0 to 6. If no precision is specified in a constant specification, it defaults to the precision of the literal value (but not more than 6 digits).; The SQL standard differentiates <code>timestamp without time zone</code> and <code>timestamp with time zone</code> literals by the presence of a \"+\" or \"-\" symbol and time zone offset after the time. Hence, according to the standard,; <code>TIMESTAMP '2004-10-19 10:23:54'</code>; is a <code>timestamp without time zone</code>, while; <code>TIMESTAMP '2004-10-19 10:23:54+02'</code>; is a <code>timestamp with time zone</code>. PostgreSQL never examines the content of a literal string before determining its type, and therefore will treat both of the above as <code>timestamp without time zone</code>. To ensure that a literal is treated as <code>timestamp with time zone</code>, give it the correct explicit type:; <code>TIMESTAMP WITH TIME ZONE '2004-10-19 10:23:54+02'</code>; In a literal that has been determined to be <code>timestamp without time zone</code>, PostgreSQL will silently ignore any time zone indication. That is, the resulting value is derived from the date/time fields in the input value, and is not adjusted for time zone.; For <code>timestamp with time zone</code>, the internally stored value is always in UTC (Universal Coordinated Time, traditionally known as Greenwich Mean Time, GMT). An input value that has an explicit time zone specified is converted to UTC using the appropriate offset for that time zone. If no time zone is stated in the input string, then it is assumed to be in the time zone indicated by the system's TimeZone parameter, and is converted to UTC using the offset for the <code>timezone</code> zone.; When a <code>timestamp with time zone</code> value is output, it is always converted from UTC to the current <code>timezone</code> zone, and displayed as local time in that zone. To see the time in another time zone, either change <code>timezone</code> or use the <code>AT TIME ZONE</code> construct (see Section 9.9.3).; Conversions between <code>timestamp without time zone</code> and <code>timestamp with time zone</code> normally assume that the <code>timestamp without time zone</code> value should be taken or given as <code>timezone</code> local time. A different time zone can be specified for the conversion using <code>AT TIME ZONE</code>.; The following SQL-compatible functions can also be used to obtain the current time value for the corresponding data type: <code>CURRENT_DATE</code>, <code>CURRENT_TIME</code>, <code>CURRENT_TIMESTAMP</code>, <code>LOCALTIME</code>, <code>LOCALTIMESTAMP</code>. (See Section 9.9.4.) Note that these are SQL functions and are not recognized in data input strings.; Internally <code>interval</code> values are stored as months, days, and microseconds. This is done because the number of days in a month varies, and a day can have 23 or 25 hours if a daylight savings time adjustment is involved. The months and days fields are integers while the microseconds field can store fractional seconds. Because intervals are usually created from constant strings or <code>timestamp</code> subtraction, this storage method works well in most cases, but can cause unexpected results:",
        "example": [],
        "link": [
            "https://www.postgresql.org/docs/12/datatype-datetime.html"
        ]
    },
    {
        "type": "type",
        "keyword": "timestamp",
        "tree": "(constdatetime TIMESTAMP)",
        "description": [
            "date and time (no time zone)",
            "both date and time (no time zone)"
        ],
        "detail": "[DESCRIPTION]: date and time (no time zone); both date and time (no time zone)<sep>[STORAGE SIZE]: 8 bytes<sep>[LOW VALUE]: 4713 BC<sep>[HIGH VALUE]: 294276 AD<sep>[COMPENSATE]: The SQL standard requires that writing just <code>timestamp</code> be equivalent to <code>timestamp without time zone</code>, and PostgreSQL honors that behavior. <code>timestamptz</code> is accepted as an abbreviation for <code>timestamp with time zone</code>; this is a PostgreSQL extension.; <code>time</code>, <code>timestamp</code>, and <code>interval</code> accept an optional precision value <code>p</code> which specifies the number of fractional digits retained in the seconds field. By default, there is no explicit bound on precision. The allowed range of <code>p</code> is from 0 to 6.; The type <code>time with time zone</code> is defined by the SQL standard, but the definition exhibits properties which lead to questionable usefulness. In most cases, a combination of <code>date</code>, <code>time</code>, <code>timestamp without time zone</code>, and <code>timestamp with time zone</code> should provide a complete range of date/time functionality required by any application.; where <code>p</code> is an optional precision specification giving the number of fractional digits in the seconds field. Precision can be specified for <code>time</code>, <code>timestamp</code>, and <code>interval</code> types, and can range from 0 to 6. If no precision is specified in a constant specification, it defaults to the precision of the literal value (but not more than 6 digits).; The SQL standard differentiates <code>timestamp without time zone</code> and <code>timestamp with time zone</code> literals by the presence of a \"+\" or \"-\" symbol and time zone offset after the time. Hence, according to the standard,; <code>TIMESTAMP '2004-10-19 10:23:54'</code>; is a <code>timestamp without time zone</code>, while; <code>TIMESTAMP '2004-10-19 10:23:54+02'</code>; is a <code>timestamp with time zone</code>. PostgreSQL never examines the content of a literal string before determining its type, and therefore will treat both of the above as <code>timestamp without time zone</code>. To ensure that a literal is treated as <code>timestamp with time zone</code>, give it the correct explicit type:; <code>TIMESTAMP WITH TIME ZONE '2004-10-19 10:23:54+02'</code>; In a literal that has been determined to be <code>timestamp without time zone</code>, PostgreSQL will silently ignore any time zone indication. That is, the resulting value is derived from the date/time fields in the input value, and is not adjusted for time zone.; For <code>timestamp with time zone</code>, the internally stored value is always in UTC (Universal Coordinated Time, traditionally known as Greenwich Mean Time, GMT). An input value that has an explicit time zone specified is converted to UTC using the appropriate offset for that time zone. If no time zone is stated in the input string, then it is assumed to be in the time zone indicated by the system's TimeZone parameter, and is converted to UTC using the offset for the <code>timezone</code> zone.; When a <code>timestamp with time zone</code> value is output, it is always converted from UTC to the current <code>timezone</code> zone, and displayed as local time in that zone. To see the time in another time zone, either change <code>timezone</code> or use the <code>AT TIME ZONE</code> construct (see Section 9.9.3).; Conversions between <code>timestamp without time zone</code> and <code>timestamp with time zone</code> normally assume that the <code>timestamp without time zone</code> value should be taken or given as <code>timezone</code> local time. A different time zone can be specified for the conversion using <code>AT TIME ZONE</code>.; The following SQL-compatible functions can also be used to obtain the current time value for the corresponding data type: <code>CURRENT_DATE</code>, <code>CURRENT_TIME</code>, <code>CURRENT_TIMESTAMP</code>, <code>LOCALTIME</code>, <code>LOCALTIMESTAMP</code>. (See Section 9.9.4.) Note that these are SQL functions and are not recognized in data input strings.; Internally <code>interval</code> values are stored as months, days, and microseconds. This is done because the number of days in a month varies, and a day can have 23 or 25 hours if a daylight savings time adjustment is involved. The months and days fields are integers while the microseconds field can store fractional seconds. Because intervals are usually created from constant strings or <code>timestamp</code> subtraction, this storage method works well in most cases, but can cause unexpected results:",
        "example": [],
        "link": [
            "https://www.postgresql.org/docs/12/datatype-datetime.html"
        ]
    },
    {
        "type": "type",
        "keyword": "timestamp without time zone",
        "tree": "(constdatetime TIMESTAMP (opt_timezone WITHOUT TIME ZONE))",
        "description": [
            "date and time (no time zone)",
            "both date and time (no time zone)"
        ],
        "detail": "[DESCRIPTION]: date and time (no time zone); both date and time (no time zone)<sep>[STORAGE SIZE]: 8 bytes<sep>[LOW VALUE]: 4713 BC<sep>[HIGH VALUE]: 294276 AD<sep>[COMPENSATE]: The SQL standard requires that writing just <code>timestamp</code> be equivalent to <code>timestamp without time zone</code>, and PostgreSQL honors that behavior. <code>timestamptz</code> is accepted as an abbreviation for <code>timestamp with time zone</code>; this is a PostgreSQL extension.; <code>time</code>, <code>timestamp</code>, and <code>interval</code> accept an optional precision value <code>p</code> which specifies the number of fractional digits retained in the seconds field. By default, there is no explicit bound on precision. The allowed range of <code>p</code> is from 0 to 6.; The type <code>time with time zone</code> is defined by the SQL standard, but the definition exhibits properties which lead to questionable usefulness. In most cases, a combination of <code>date</code>, <code>time</code>, <code>timestamp without time zone</code>, and <code>timestamp with time zone</code> should provide a complete range of date/time functionality required by any application.; where <code>p</code> is an optional precision specification giving the number of fractional digits in the seconds field. Precision can be specified for <code>time</code>, <code>timestamp</code>, and <code>interval</code> types, and can range from 0 to 6. If no precision is specified in a constant specification, it defaults to the precision of the literal value (but not more than 6 digits).; The SQL standard differentiates <code>timestamp without time zone</code> and <code>timestamp with time zone</code> literals by the presence of a \"+\" or \"-\" symbol and time zone offset after the time. Hence, according to the standard,; <code>TIMESTAMP '2004-10-19 10:23:54'</code>; is a <code>timestamp without time zone</code>, while; <code>TIMESTAMP '2004-10-19 10:23:54+02'</code>; is a <code>timestamp with time zone</code>. PostgreSQL never examines the content of a literal string before determining its type, and therefore will treat both of the above as <code>timestamp without time zone</code>. To ensure that a literal is treated as <code>timestamp with time zone</code>, give it the correct explicit type:; <code>TIMESTAMP WITH TIME ZONE '2004-10-19 10:23:54+02'</code>; In a literal that has been determined to be <code>timestamp without time zone</code>, PostgreSQL will silently ignore any time zone indication. That is, the resulting value is derived from the date/time fields in the input value, and is not adjusted for time zone.; For <code>timestamp with time zone</code>, the internally stored value is always in UTC (Universal Coordinated Time, traditionally known as Greenwich Mean Time, GMT). An input value that has an explicit time zone specified is converted to UTC using the appropriate offset for that time zone. If no time zone is stated in the input string, then it is assumed to be in the time zone indicated by the system's TimeZone parameter, and is converted to UTC using the offset for the <code>timezone</code> zone.; When a <code>timestamp with time zone</code> value is output, it is always converted from UTC to the current <code>timezone</code> zone, and displayed as local time in that zone. To see the time in another time zone, either change <code>timezone</code> or use the <code>AT TIME ZONE</code> construct (see Section 9.9.3).; Conversions between <code>timestamp without time zone</code> and <code>timestamp with time zone</code> normally assume that the <code>timestamp without time zone</code> value should be taken or given as <code>timezone</code> local time. A different time zone can be specified for the conversion using <code>AT TIME ZONE</code>.; The following SQL-compatible functions can also be used to obtain the current time value for the corresponding data type: <code>CURRENT_DATE</code>, <code>CURRENT_TIME</code>, <code>CURRENT_TIMESTAMP</code>, <code>LOCALTIME</code>, <code>LOCALTIMESTAMP</code>. (See Section 9.9.4.) Note that these are SQL functions and are not recognized in data input strings.; Internally <code>interval</code> values are stored as months, days, and microseconds. This is done because the number of days in a month varies, and a day can have 23 or 25 hours if a daylight savings time adjustment is involved. The months and days fields are integers while the microseconds field can store fractional seconds. Because intervals are usually created from constant strings or <code>timestamp</code> subtraction, this storage method works well in most cases, but can cause unexpected results:",
        "example": [],
        "link": [
            "https://www.postgresql.org/docs/12/datatype-datetime.html"
        ]
    },
    {
        "type": "type",
        "keyword": "timestamp ( p ) with time zone",
        "tree": "(constdatetime TIMESTAMP ( ) (opt_timezone WITH TIME ZONE))",
        "description": [
            "date and time, including time zone",
            "both date and time, with time zone"
        ],
        "detail": "[DESCRIPTION]: date and time, including time zone; both date and time, with time zone<sep>[STORAGE SIZE]: 8 bytes<sep>[LOW VALUE]: 4713 BC<sep>[HIGH VALUE]: 294276 AD<sep>[COMPENSATE]: The SQL standard requires that writing just <code>timestamp</code> be equivalent to <code>timestamp without time zone</code>, and PostgreSQL honors that behavior. <code>timestamptz</code> is accepted as an abbreviation for <code>timestamp with time zone</code>; this is a PostgreSQL extension.; <code>time</code>, <code>timestamp</code>, and <code>interval</code> accept an optional precision value <code>p</code> which specifies the number of fractional digits retained in the seconds field. By default, there is no explicit bound on precision. The allowed range of <code>p</code> is from 0 to 6.; The type <code>time with time zone</code> is defined by the SQL standard, but the definition exhibits properties which lead to questionable usefulness. In most cases, a combination of <code>date</code>, <code>time</code>, <code>timestamp without time zone</code>, and <code>timestamp with time zone</code> should provide a complete range of date/time functionality required by any application.; where <code>p</code> is an optional precision specification giving the number of fractional digits in the seconds field. Precision can be specified for <code>time</code>, <code>timestamp</code>, and <code>interval</code> types, and can range from 0 to 6. If no precision is specified in a constant specification, it defaults to the precision of the literal value (but not more than 6 digits).; The SQL standard differentiates <code>timestamp without time zone</code> and <code>timestamp with time zone</code> literals by the presence of a \"+\" or \"-\" symbol and time zone offset after the time. Hence, according to the standard,; <code>TIMESTAMP '2004-10-19 10:23:54'</code>; is a <code>timestamp without time zone</code>, while; <code>TIMESTAMP '2004-10-19 10:23:54+02'</code>; is a <code>timestamp with time zone</code>. PostgreSQL never examines the content of a literal string before determining its type, and therefore will treat both of the above as <code>timestamp without time zone</code>. To ensure that a literal is treated as <code>timestamp with time zone</code>, give it the correct explicit type:; <code>TIMESTAMP WITH TIME ZONE '2004-10-19 10:23:54+02'</code>; In a literal that has been determined to be <code>timestamp without time zone</code>, PostgreSQL will silently ignore any time zone indication. That is, the resulting value is derived from the date/time fields in the input value, and is not adjusted for time zone.; For <code>timestamp with time zone</code>, the internally stored value is always in UTC (Universal Coordinated Time, traditionally known as Greenwich Mean Time, GMT). An input value that has an explicit time zone specified is converted to UTC using the appropriate offset for that time zone. If no time zone is stated in the input string, then it is assumed to be in the time zone indicated by the system's TimeZone parameter, and is converted to UTC using the offset for the <code>timezone</code> zone.; When a <code>timestamp with time zone</code> value is output, it is always converted from UTC to the current <code>timezone</code> zone, and displayed as local time in that zone. To see the time in another time zone, either change <code>timezone</code> or use the <code>AT TIME ZONE</code> construct (see Section 9.9.3).; Conversions between <code>timestamp without time zone</code> and <code>timestamp with time zone</code> normally assume that the <code>timestamp without time zone</code> value should be taken or given as <code>timezone</code> local time. A different time zone can be specified for the conversion using <code>AT TIME ZONE</code>.; The following SQL-compatible functions can also be used to obtain the current time value for the corresponding data type: <code>CURRENT_DATE</code>, <code>CURRENT_TIME</code>, <code>CURRENT_TIMESTAMP</code>, <code>LOCALTIME</code>, <code>LOCALTIMESTAMP</code>. (See Section 9.9.4.) Note that these are SQL functions and are not recognized in data input strings.; Internally <code>interval</code> values are stored as months, days, and microseconds. This is done because the number of days in a month varies, and a day can have 23 or 25 hours if a daylight savings time adjustment is involved. The months and days fields are integers while the microseconds field can store fractional seconds. Because intervals are usually created from constant strings or <code>timestamp</code> subtraction, this storage method works well in most cases, but can cause unexpected results:",
        "example": [],
        "link": [
            "https://www.postgresql.org/docs/12/datatype-datetime.html"
        ]
    },
    {
        "type": "type",
        "keyword": "timestamp with time zone",
        "tree": "(constdatetime TIMESTAMP (opt_timezone WITH TIME ZONE))",
        "description": [
            "date and time, including time zone",
            "both date and time, with time zone"
        ],
        "detail": "[DESCRIPTION]: date and time, including time zone; both date and time, with time zone<sep>[STORAGE SIZE]: 8 bytes<sep>[LOW VALUE]: 4713 BC<sep>[HIGH VALUE]: 294276 AD<sep>[COMPENSATE]: The SQL standard requires that writing just <code>timestamp</code> be equivalent to <code>timestamp without time zone</code>, and PostgreSQL honors that behavior. <code>timestamptz</code> is accepted as an abbreviation for <code>timestamp with time zone</code>; this is a PostgreSQL extension.; <code>time</code>, <code>timestamp</code>, and <code>interval</code> accept an optional precision value <code>p</code> which specifies the number of fractional digits retained in the seconds field. By default, there is no explicit bound on precision. The allowed range of <code>p</code> is from 0 to 6.; The type <code>time with time zone</code> is defined by the SQL standard, but the definition exhibits properties which lead to questionable usefulness. In most cases, a combination of <code>date</code>, <code>time</code>, <code>timestamp without time zone</code>, and <code>timestamp with time zone</code> should provide a complete range of date/time functionality required by any application.; where <code>p</code> is an optional precision specification giving the number of fractional digits in the seconds field. Precision can be specified for <code>time</code>, <code>timestamp</code>, and <code>interval</code> types, and can range from 0 to 6. If no precision is specified in a constant specification, it defaults to the precision of the literal value (but not more than 6 digits).; The SQL standard differentiates <code>timestamp without time zone</code> and <code>timestamp with time zone</code> literals by the presence of a \"+\" or \"-\" symbol and time zone offset after the time. Hence, according to the standard,; <code>TIMESTAMP '2004-10-19 10:23:54'</code>; is a <code>timestamp without time zone</code>, while; <code>TIMESTAMP '2004-10-19 10:23:54+02'</code>; is a <code>timestamp with time zone</code>. PostgreSQL never examines the content of a literal string before determining its type, and therefore will treat both of the above as <code>timestamp without time zone</code>. To ensure that a literal is treated as <code>timestamp with time zone</code>, give it the correct explicit type:; <code>TIMESTAMP WITH TIME ZONE '2004-10-19 10:23:54+02'</code>; In a literal that has been determined to be <code>timestamp without time zone</code>, PostgreSQL will silently ignore any time zone indication. That is, the resulting value is derived from the date/time fields in the input value, and is not adjusted for time zone.; For <code>timestamp with time zone</code>, the internally stored value is always in UTC (Universal Coordinated Time, traditionally known as Greenwich Mean Time, GMT). An input value that has an explicit time zone specified is converted to UTC using the appropriate offset for that time zone. If no time zone is stated in the input string, then it is assumed to be in the time zone indicated by the system's TimeZone parameter, and is converted to UTC using the offset for the <code>timezone</code> zone.; When a <code>timestamp with time zone</code> value is output, it is always converted from UTC to the current <code>timezone</code> zone, and displayed as local time in that zone. To see the time in another time zone, either change <code>timezone</code> or use the <code>AT TIME ZONE</code> construct (see Section 9.9.3).; Conversions between <code>timestamp without time zone</code> and <code>timestamp with time zone</code> normally assume that the <code>timestamp without time zone</code> value should be taken or given as <code>timezone</code> local time. A different time zone can be specified for the conversion using <code>AT TIME ZONE</code>.; The following SQL-compatible functions can also be used to obtain the current time value for the corresponding data type: <code>CURRENT_DATE</code>, <code>CURRENT_TIME</code>, <code>CURRENT_TIMESTAMP</code>, <code>LOCALTIME</code>, <code>LOCALTIMESTAMP</code>. (See Section 9.9.4.) Note that these are SQL functions and are not recognized in data input strings.; Internally <code>interval</code> values are stored as months, days, and microseconds. This is done because the number of days in a month varies, and a day can have 23 or 25 hours if a daylight savings time adjustment is involved. The months and days fields are integers while the microseconds field can store fractional seconds. Because intervals are usually created from constant strings or <code>timestamp</code> subtraction, this storage method works well in most cases, but can cause unexpected results:",
        "example": [],
        "link": [
            "https://www.postgresql.org/docs/12/datatype-datetime.html"
        ]
    },
    {
        "type": "type",
        "keyword": "timestamptz",
        "tree": "(identifier TIMESTAMPTZ)",
        "description": [
            "date and time, including time zone",
            "both date and time, with time zone"
        ],
        "detail": "[DESCRIPTION]: date and time, including time zone; both date and time, with time zone<sep>[STORAGE SIZE]: 8 bytes<sep>[LOW VALUE]: 4713 BC<sep>[HIGH VALUE]: 294276 AD<sep>[COMPENSATE]: The SQL standard requires that writing just <code>timestamp</code> be equivalent to <code>timestamp without time zone</code>, and PostgreSQL honors that behavior. <code>timestamptz</code> is accepted as an abbreviation for <code>timestamp with time zone</code>; this is a PostgreSQL extension.; <code>time</code>, <code>timestamp</code>, and <code>interval</code> accept an optional precision value <code>p</code> which specifies the number of fractional digits retained in the seconds field. By default, there is no explicit bound on precision. The allowed range of <code>p</code> is from 0 to 6.; The type <code>time with time zone</code> is defined by the SQL standard, but the definition exhibits properties which lead to questionable usefulness. In most cases, a combination of <code>date</code>, <code>time</code>, <code>timestamp without time zone</code>, and <code>timestamp with time zone</code> should provide a complete range of date/time functionality required by any application.; where <code>p</code> is an optional precision specification giving the number of fractional digits in the seconds field. Precision can be specified for <code>time</code>, <code>timestamp</code>, and <code>interval</code> types, and can range from 0 to 6. If no precision is specified in a constant specification, it defaults to the precision of the literal value (but not more than 6 digits).; The SQL standard differentiates <code>timestamp without time zone</code> and <code>timestamp with time zone</code> literals by the presence of a \"+\" or \"-\" symbol and time zone offset after the time. Hence, according to the standard,; <code>TIMESTAMP '2004-10-19 10:23:54'</code>; is a <code>timestamp without time zone</code>, while; <code>TIMESTAMP '2004-10-19 10:23:54+02'</code>; is a <code>timestamp with time zone</code>. PostgreSQL never examines the content of a literal string before determining its type, and therefore will treat both of the above as <code>timestamp without time zone</code>. To ensure that a literal is treated as <code>timestamp with time zone</code>, give it the correct explicit type:; <code>TIMESTAMP WITH TIME ZONE '2004-10-19 10:23:54+02'</code>; In a literal that has been determined to be <code>timestamp without time zone</code>, PostgreSQL will silently ignore any time zone indication. That is, the resulting value is derived from the date/time fields in the input value, and is not adjusted for time zone.; For <code>timestamp with time zone</code>, the internally stored value is always in UTC (Universal Coordinated Time, traditionally known as Greenwich Mean Time, GMT). An input value that has an explicit time zone specified is converted to UTC using the appropriate offset for that time zone. If no time zone is stated in the input string, then it is assumed to be in the time zone indicated by the system's TimeZone parameter, and is converted to UTC using the offset for the <code>timezone</code> zone.; When a <code>timestamp with time zone</code> value is output, it is always converted from UTC to the current <code>timezone</code> zone, and displayed as local time in that zone. To see the time in another time zone, either change <code>timezone</code> or use the <code>AT TIME ZONE</code> construct (see Section 9.9.3).; Conversions between <code>timestamp without time zone</code> and <code>timestamp with time zone</code> normally assume that the <code>timestamp without time zone</code> value should be taken or given as <code>timezone</code> local time. A different time zone can be specified for the conversion using <code>AT TIME ZONE</code>.; The following SQL-compatible functions can also be used to obtain the current time value for the corresponding data type: <code>CURRENT_DATE</code>, <code>CURRENT_TIME</code>, <code>CURRENT_TIMESTAMP</code>, <code>LOCALTIME</code>, <code>LOCALTIMESTAMP</code>. (See Section 9.9.4.) Note that these are SQL functions and are not recognized in data input strings.; Internally <code>interval</code> values are stored as months, days, and microseconds. This is done because the number of days in a month varies, and a day can have 23 or 25 hours if a daylight savings time adjustment is involved. The months and days fields are integers while the microseconds field can store fractional seconds. Because intervals are usually created from constant strings or <code>timestamp</code> subtraction, this storage method works well in most cases, but can cause unexpected results:",
        "example": [],
        "link": [
            "https://www.postgresql.org/docs/12/datatype-datetime.html"
        ]
    },
    {
        "type": "type",
        "keyword": "time ( p ) without time zone",
        "tree": "(constdatetime TIME ( ) (opt_timezone WITHOUT TIME ZONE))",
        "description": [
            "time of day (no time zone)",
            "time of day (no date)"
        ],
        "detail": "[DESCRIPTION]: time of day (no time zone); time of day (no date)<sep>[STORAGE SIZE]: 12 bytes<sep>[LOW VALUE]: 00:00:00+1559<sep>[HIGH VALUE]: 24:00:00-1559<sep>[COMPENSATE]: <code>time</code>, <code>timestamp</code>, and <code>interval</code> accept an optional precision value <code>p</code> which specifies the number of fractional digits retained in the seconds field. By default, there is no explicit bound on precision. The allowed range of <code>p</code> is from 0 to 6.; The type <code>time with time zone</code> is defined by the SQL standard, but the definition exhibits properties which lead to questionable usefulness. In most cases, a combination of <code>date</code>, time, <code>timestamp without time zone</code>, and <code>timestamp with time zone</code> should provide a complete range of date/time functionality required by any application.; \nDate and time input is accepted in almost any reasonable format, including ISO 8601, SQL-compatible, traditional POSTGRES, and others. For some formats, ordering of day, month, and year in date input is ambiguous and there is support for specifying the expected ordering of these fields. Set the DateStyle parameter to <code>MDY</code> to select month-day-year interpretation, <code>DMY</code> to select day-month-year interpretation, or <code>YMD</code> to select year-month-day interpretation.\nPostgreSQL is more flexible in handling date/time input than the SQL standard requires. See Appendix B for the exact parsing rules of date/time input and for the recognized text fields including months, days of the week, and time zones.\nRemember that any date or time literal input needs to be enclosed in single quotes, like text strings. Refer to Section 4.1.2.7 for more information. SQL requires the following syntax\n<code>\n<code>type</code> [ (<code>p</code>) ] '<code>value</code>'\n</code>\nwhere <code>p</code> is an optional precision specification giving the number of fractional digits in the seconds field. Precision can be specified for <code>time</code>, <code>timestamp</code>, and <code>interval</code> types, and can range from 0 to 6. If no precision is specified in a constant specification, it defaults to the precision of the literal value (but not more than 6 digits).\n8.5.1.1. Dates\nTable 8.10 shows some possible inputs for the <code>date</code> type.\nTable 8.10. Date Input\n<table>\n<thead>\n<tr>\n<th>Example</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1999-01-08</td>\n<td>ISO 8601; January 8 in any mode (recommended format)</td>\n</tr>\n<tr>\n<td>January 8, 1999</td>\n<td>unambiguous in any <code>datestyle</code> input mode</td>\n</tr>\n<tr>\n<td>1/8/1999</td>\n<td>January 8 in <code>MDY</code> mode; August 1 in <code>DMY</code> mode</td>\n</tr>\n<tr>\n<td>1/18/1999</td>\n<td>January 18 in <code>MDY</code> mode; rejected in other modes</td>\n</tr>\n<tr>\n<td>01/02/03</td>\n<td>January 2, 2003 in <code>MDY</code> mode; February 1, 2003 in <code>DMY</code> mode; February 3, 2001 in <code>YMD</code> mode</td>\n</tr>\n<tr>\n<td>1999-Jan-08</td>\n<td>January 8 in any mode</td>\n</tr>\n<tr>\n<td>Jan-08-1999</td>\n<td>January 8 in any mode</td>\n</tr>\n<tr>\n<td>08-Jan-1999</td>\n<td>January 8 in any mode</td>\n</tr>\n<tr>\n<td>99-Jan-08</td>\n<td>January 8 in <code>YMD</code> mode, else error</td>\n</tr>\n<tr>\n<td>08-Jan-99</td>\n<td>January 8, except error in <code>YMD</code> mode</td>\n</tr>\n<tr>\n<td>Jan-08-99</td>\n<td>January 8, except error in <code>YMD</code> mode</td>\n</tr>\n<tr>\n<td>19990108</td>\n<td>ISO 8601; January 8, 1999 in any mode</td>\n</tr>\n<tr>\n<td>990108</td>\n<td>ISO 8601; January 8, 1999 in any mode</td>\n</tr>\n<tr>\n<td>1999.008</td>\n<td>year and day of year</td>\n</tr>\n<tr>\n<td>J2451187</td>\n<td>Julian date</td>\n</tr>\n<tr>\n<td>January 8, 99 BC</td>\n<td>year 99 BC</td>\n</tr>\n</tbody>\n</table>\n8.5.1.2. Times\nThe time-of-day types are <code>time [ (p) ] without time zone</code> and <code>time [ (p) ] with time zone</code>. <code>time</code> alone is equivalent to <code>time without time zone</code>.\nValid input for these types consists of a time of day followed by an optional time zone. (See Table 8.11 and Table 8.12.) If a time zone is specified in the input for <code>time without time zone</code>, it is silently ignored. You can also specify a date but it will be ignored, except when you use a time zone name that involves a daylight-savings rule, such as <code>America/New_York</code>. In this case specifying the date is required in order to determine whether standard or daylight-savings time applies. The appropriate time zone offset is recorded in the <code>time with time zone</code> value and is output as stored; it is not adjusted to the active time zone.\nTable 8.11. Time Input\n<table>\n<thead>\n<tr>\n<th>Example</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>04:05:06.789</code></td>\n<td>ISO 8601</td>\n</tr>\n<tr>\n<td><code>04:05:06</code></td>\n<td>ISO 8601</td>\n</tr>\n<tr>\n<td><code>04:05</code></td>\n<td>ISO 8601</td>\n</tr>\n<tr>\n<td><code>040506</code></td>\n<td>ISO 8601</td>\n</tr>\n<tr>\n<td><code>04:05 AM</code></td>\n<td>same as 04:05; AM does not affect value</td>\n</tr>\n<tr>\n<td><code>04:05 PM</code></td>\n<td>same as 16:05; input hour must be <= 12</td>\n</tr>\n<tr>\n<td><code>04:05:06.789-8</code></td>\n<td>ISO 8601, with time zone as UTC offset</td>\n</tr>\n<tr>\n<td><code>04:05:06-08:00</code></td>\n<td>ISO 8601, with time zone as UTC offset</td>\n</tr>\n<tr>\n<td><code>04:05-08:00</code></td>\n<td>ISO 8601, with time zone as UTC offset</td>\n</tr>\n<tr>\n<td><code>040506-08</code></td>\n<td>ISO 8601, with time zone as UTC offset</td>\n</tr>\n<tr>\n<td><code>040506+0730</code></td>\n<td>ISO 8601, with fractional-hour time zone as UTC offset</td>\n</tr>\n<tr>\n<td><code>040506+07:30:00</code></td>\n<td>UTC offset specified to seconds (not allowed in ISO 8601)</td>\n</tr>\n<tr>\n<td><code>04:05:06 PST</code></td>\n<td>time zone specified by abbreviation</td>\n</tr>\n<tr>\n<td><code>2003-04-12 04:05:06 America/New_York</code></td>\n<td>time zone specified by full name</td>\n</tr>\n</tbody>\n</table>\nTable 8.12. Time Zone Input\n<table>\n<thead>\n<tr>\n<th>Example</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>PST</code></td>\n<td>Abbreviation (for Pacific Standard Time)</td>\n</tr>\n<tr>\n<td><code>America/New_York</code></td>\n<td>Full time zone name</td>\n</tr>\n<tr>\n<td><code>PST8PDT</code></td>\n<td>POSIX-style time zone specification</td>\n</tr>\n<tr>\n<td><code>-8:00:00</code></td>\n<td>UTC offset for PST</td>\n</tr>\n<tr>\n<td><code>-8:00</code></td>\n<td>UTC offset for PST (ISO 8601 extended format)</td>\n</tr>\n<tr>\n<td><code>-800</code></td>\n<td>UTC offset for PST (ISO 8601 basic format)</td>\n</tr>\n<tr>\n<td><code>-8</code></td>\n<td>UTC offset for PST (ISO 8601 basic format)</td>\n</tr>\n<tr>\n<td><code>zulu</code></td>\n<td>Military abbreviation for UTC</td>\n</tr>\n<tr>\n<td><code>z</code></td>\n<td>Short form of <code>zulu</code> (also in ISO 8601)</td>\n</tr>\n</tbody>\n</table>\nRefer to Section 8.5.3 for more information on how to specify time zones.\n8.5.1.3. Time Stamps\nValid input for the time stamp types consists of the concatenation of a date and a time, followed by an optional time zone, followed by an optional <code>AD</code> or <code>BC</code>. (Alternatively, <code>AD</code>/<code>BC</code> can appear before the time zone, but this is not the preferred ordering.) Thus:\n<code>\n1999-01-08 04:05:06\n</code>\nand:\n<code>\n1999-01-08 04:05:06 -8:00\n</code>\nare valid values, which follow the ISO 8601 standard. In addition, the common format:\n<code>\nJanuary 8 04:05:06 1999 PST\n</code>\nis supported.\nThe SQL standard differentiates <code>timestamp without time zone</code> and <code>timestamp with time zone</code> literals by the presence of a \"+\" or \"-\" symbol and time zone offset after the time. Hence, according to the standard,\n<code>TIMESTAMP '2004-10-19 10:23:54'</code>\nis a <code>timestamp without time zone</code>, while\n<code>TIMESTAMP '2004-10-19 10:23:54+02'</code>\nis a <code>timestamp with time zone</code>. PostgreSQL never examines the content of a literal string before determining its type, and therefore will treat both of the above as <code>timestamp without time zone</code>. To ensure that a literal is treated as <code>timestamp with time zone</code>, give it the correct explicit type:\n<code>TIMESTAMP WITH TIME ZONE '2004-10-19 10:23:54+02'</code>\nIn a literal that has been determined to be <code>timestamp without time zone</code>, PostgreSQL will silently ignore any time zone indication. That is, the resulting value is derived from the date/time fields in the input value, and is not adjusted for time zone.\nFor <code>timestamp with time zone</code>, the internally stored value is always in UTC (Universal Coordinated Time, traditionally known as Greenwich Mean Time, GMT). An input value that has an explicit time zone specified is converted to UTC using the appropriate offset for that time zone. If no time zone is stated in the input string, then it is assumed to be in the time zone indicated by the system's TimeZone parameter, and is converted to UTC using the offset for the <code>timezone</code> zone.\nWhen a <code>timestamp with time zone</code> value is output, it is always converted from UTC to the current <code>timezone</code> zone, and displayed as local time in that zone. To see the time in another time zone, either change <code>timezone</code> or use the <code>AT TIME ZONE</code> construct (see Section 9.9.3).\nConversions between <code>timestamp without time zone</code> and <code>timestamp with time zone</code> normally assume that the <code>timestamp without time zone</code> value should be taken or given as <code>timezone</code> local time. A different time zone can be specified for the conversion using <code>AT TIME ZONE</code>.\n8.5.1.4. Special Values\nPostgreSQL supports several special date/time input values for convenience, as shown in Table 8.13. The values <code>infinity</code> and <code>-infinity</code> are specially represented inside the system and will be displayed unchanged; but the others are simply notational shorthands that will be converted to ordinary date/time values when read. (In particular, <code>now</code> and related strings are converted to a specific time value as soon as they are read.) All of these values need to be enclosed in single quotes when used as constants in SQL commands.\nTable 8.13. Special Date/Time Inputs\n<table>\n<thead>\n<tr>\n<th>Input String</th>\n<th>Valid Types</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>epoch</code></td>\n<td><code>date</code>, <code>timestamp</code></td>\n<td>1970-01-01 00:00:00+00 (Unix system time zero)</td>\n</tr>\n<tr>\n<td><code>infinity</code></td>\n<td><code>date</code>, <code>timestamp</code></td>\n<td>later than all other time stamps</td>\n</tr>\n<tr>\n<td><code>-infinity</code></td>\n<td><code>date</code>, <code>timestamp</code></td>\n<td>earlier than all other time stamps</td>\n</tr>\n<tr>\n<td><code>now</code></td>\n<td><code>date</code>, <code>time</code>, <code>timestamp</code></td>\n<td>current transaction's start time</td>\n</tr>\n<tr>\n<td><code>today</code></td>\n<td><code>date</code>, <code>timestamp</code></td>\n<td>midnight (<code>00:00</code>) today</td>\n</tr>\n<tr>\n<td><code>tomorrow</code></td>\n<td><code>date</code>, <code>timestamp</code></td>\n<td>midnight (<code>00:00</code>) tomorrow</td>\n</tr>\n<tr>\n<td><code>yesterday</code></td>\n<td><code>date</code>, <code>timestamp</code></td>\n<td>midnight (<code>00:00</code>) yesterday</td>\n</tr>\n<tr>\n<td><code>allballs</code></td>\n<td><code>time</code></td>\n<td>00:00:00.00 UTC</td>\n</tr>\n</tbody>\n</table>\nThe following SQL-compatible functions can also be used to obtain the current time value for the corresponding data type: <code>CURRENT_DATE</code>, <code>CURRENT_TIME</code>, <code>CURRENT_TIMESTAMP</code>, <code>LOCALTIME</code>, <code>LOCALTIMESTAMP</code>. (See Section 9.9.4.) Note that these are SQL functions and are not recognized in data input strings.\nCaution\nWhile the input strings <code>now</code>, <code>today</code>, <code>tomorrow</code>, and <code>yesterday</code> are fine to use in interactive SQL commands, they can have surprising behavior when the command is saved to be executed later, for example in prepared statements, views, and function definitions. The string can be converted to a specific time value that continues to be used long after it becomes stale. Use one of the SQL functions instead in such contexts. For example, <code>CURRENT_DATE + 1</code> is safer than <code>'tomorrow'::date</code>.\n; \nThe output format of the date/time types can be set to one of the four styles ISO 8601, SQL (Ingres), traditional POSTGRES (Unix date format), or German. The default is the ISO format. (The SQL standard requires the use of the ISO 8601 format. The name of the \"SQL\" output format is a historical accident.) Table 8.14 shows examples of each output style. The output of the <code>date</code> and <code>time</code> types is generally only the date or time part in accordance with the given examples. However, the POSTGRES style outputs date-only values in ISO format.\nTable 8.14. Date/Time Output Styles\n<table>\n<thead>\n<tr>\n<th>Style Specification</th>\n<th>Description</th>\n<th>Example</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>ISO</code></td>\n<td>ISO 8601, SQL standard</td>\n<td><code>1997-12-17 07:37:16-08</code></td>\n</tr>\n<tr>\n<td><code>SQL</code></td>\n<td>traditional style</td>\n<td><code>12/17/1997 07:37:16.00 PST</code></td>\n</tr>\n<tr>\n<td><code>Postgres</code></td>\n<td>original style</td>\n<td><code>Wed Dec 17 07:37:16 1997 PST</code></td>\n</tr>\n<tr>\n<td><code>German</code></td>\n<td>regional style</td>\n<td><code>17.12.1997 07:37:16.00 PST</code></td>\n</tr>\n</tbody>\n</table>\nNote\nISO 8601 specifies the use of uppercase letter <code>T</code> to separate the date and time. PostgreSQL accepts that format on input, but on output it uses a space rather than <code>T</code>, as shown above. This is for readability and for consistency with RFC 3339 as well as some other database systems.\nIn the SQL and POSTGRES styles, day appears before month if DMY field ordering has been specified, otherwise month appears before day. (See Section 8.5.1 for how this setting also affects interpretation of input values.) Table 8.15 shows examples.\nTable 8.15. Date Order Conventions\n<table>\n<thead>\n<tr>\n<th><code>datestyle</code> Setting</th>\n<th>Input Ordering</th>\n<th>Example Output</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>SQL, DMY</code></td>\n<td><code>day</code>/<code>month</code>/<code>year</code></td>\n<td><code>17/12/1997 15:37:16.00 CET</code></td>\n</tr>\n<tr>\n<td><code>SQL, MDY</code></td>\n<td><code>month</code>/<code>day</code>/<code>year</code></td>\n<td><code>12/17/1997 07:37:16.00 PST</code></td>\n</tr>\n<tr>\n<td><code>Postgres, DMY</code></td>\n<td><code>day</code>/<code>month</code>/<code>year</code></td>\n<td><code>Wed 17 Dec 07:37:16 1997 PST</code></td>\n</tr>\n</tbody>\n</table>\nIn the ISO style, the time zone is always shown as a signed numeric offset from UTC, with positive sign used for zones east of Greenwich. The offset will be shown as <code>hh</code> (hours only) if it is an integral number of hours, else as <code>hh</code>:<code>mm</code> if it is an integral number of minutes, else as <code>hh</code>:<code>mm</code>:<code>ss</code>. (The third case is not possible with any modern time zone standard, but it can appear when working with timestamps that predate the adoption of standardized time zones.) In the other date styles, the time zone is shown as an alphabetic abbreviation if one is in common use in the current zone. Otherwise it appears as a signed numeric offset in ISO 8601 basic format (<code>hh</code> or <code>hhmm</code>).\nThe date/time style can be selected by the user using the <code>SET datestyle</code> command, the DateStyle parameter in the <code>postgresql.conf</code> configuration file, or the <code>PGDATESTYLE</code> environment variable on the server or client.\nThe formatting function <code>to_char</code> (see Section 9.8) is also available as a more flexible way to format date/time output.\n; \nTime zones, and time-zone conventions, are influenced by political decisions, not just earth geometry. Time zones around the world became somewhat standardized during the 1900s, but continue to be prone to arbitrary changes, particularly with respect to daylight-savings rules. PostgreSQL uses the widely-used IANA (Olson) time zone database for information about historical time zone rules. For times in the future, the assumption is that the latest known rules for a given time zone will continue to be observed indefinitely far into the future.\nPostgreSQL endeavors to be compatible with the SQL standard definitions for typical usage. However, the SQL standard has an odd mix of date and time types and capabilities. Two obvious problems are:\nAlthough the <code>date</code> type cannot have an associated time zone, the <code>time</code> type can. Time zones in the real world have little meaning unless associated with a date as well as a time, since the offset can vary through the year with daylight-saving time boundaries.\nThe default time zone is specified as a constant numeric offset from UTC. It is therefore impossible to adapt to daylight-saving time when doing date/time arithmetic across DST boundaries.\nTo address these difficulties, we recommend using date/time types that contain both date and time when using time zones. We do not recommend using the type <code>time with time zone</code> (though it is supported by PostgreSQL for legacy applications and for compliance with the SQL standard). PostgreSQL assumes your local time zone for any type containing only date or time.\nAll timezone-aware dates and times are stored internally in UTC. They are converted to local time in the zone specified by the TimeZone configuration parameter before being displayed to the client.\nPostgreSQL allows you to specify time zones in three different forms:\nA full time zone name, for example <code>America/New_York</code>. The recognized time zone names are listed in the <code>pg_timezone_names</code> view (see Section 51.92). PostgreSQL uses the widely-used IANA time zone data for this purpose, so the same time zone names are also recognized by other software.\nA time zone abbreviation, for example <code>PST</code>. Such a specification merely defines a particular offset from UTC, in contrast to full time zone names which can imply a set of daylight savings transition rules as well. The recognized abbreviations are listed in the <code>pg_timezone_abbrevs</code> view (see Section 51.91). You cannot set the configuration parameters TimeZone or log_timezone to a time zone abbreviation, but you can use abbreviations in date/time input values and with the <code>AT TIME ZONE</code> operator.\nIn addition to the timezone names and abbreviations, PostgreSQL will accept POSIX-style time zone specifications, as described in Section B.5. This option is not normally preferable to using a named time zone, but it may be necessary if no suitable IANA time zone entry is available.\nIn short, this is the difference between abbreviations and full names: abbreviations represent a specific offset from UTC, whereas many of the full names imply a local daylight-savings time rule, and so have two possible UTC offsets. As an example, <code>2014-06-04 12:00 America/New_York</code> represents noon local time in New York, which for this particular date was Eastern Daylight Time (UTC-4). So <code>2014-06-04 12:00 EDT</code> specifies that same time instant. But <code>2014-06-04 12:00 EST</code> specifies noon Eastern Standard Time (UTC-5), regardless of whether daylight savings was nominally in effect on that date.\nTo complicate matters, some jurisdictions have used the same timezone abbreviation to mean different UTC offsets at different times; for example, in Moscow <code>MSK</code> has meant UTC+3 in some years and UTC+4 in others. PostgreSQL interprets such abbreviations according to whatever they meant (or had most recently meant) on the specified date; but, as with the <code>EST</code> example above, this is not necessarily the same as local civil time on that date.\nIn all cases, timezone names and abbreviations are recognized case-insensitively. (This is a change from PostgreSQL versions prior to 8.2, which were case-sensitive in some contexts but not others.)\nNeither timezone names nor abbreviations are hard-wired into the server; they are obtained from configuration files stored under <code>.../share/timezone/</code> and <code>.../share/timezonesets/</code> of the installation directory (see Section B.4).\nThe TimeZone configuration parameter can be set in the file <code>postgresql.conf</code>, or in any of the other standard ways described in Chapter 19. There are also some special ways to set it:\nThe SQL command <code>SET TIME ZONE</code> sets the time zone for the session. This is an alternative spelling of <code>SET TIMEZONE TO</code> with a more SQL-spec-compatible syntax.\nThe <code>PGTZ</code> environment variable is used by libpq clients to send a <code>SET TIME ZONE</code> command to the server upon connection.\n; Internally <code>interval</code> values are stored as months, days, and microseconds. This is done because the number of days in a month varies, and a day can have 23 or 25 hours if a daylight savings time adjustment is involved. The months and days fields are integers while the microseconds field can store fractional seconds. Because intervals are usually created from constant strings or <code>timestamp</code> subtraction, this storage method works well in most cases, but can cause unexpected results:",
        "example": [],
        "link": [
            "https://www.postgresql.org/docs/12/datatype-datetime.html"
        ]
    },
    {
        "type": "type",
        "keyword": "time without time zone",
        "tree": "(constdatetime TIME (opt_timezone WITHOUT TIME ZONE))",
        "description": [
            "time of day (no time zone)",
            "time of day (no date)"
        ],
        "detail": "[DESCRIPTION]: time of day (no time zone); time of day (no date)<sep>[STORAGE SIZE]: 12 bytes<sep>[LOW VALUE]: 00:00:00+1559<sep>[HIGH VALUE]: 24:00:00-1559<sep>[COMPENSATE]: <code>time</code>, <code>timestamp</code>, and <code>interval</code> accept an optional precision value <code>p</code> which specifies the number of fractional digits retained in the seconds field. By default, there is no explicit bound on precision. The allowed range of <code>p</code> is from 0 to 6.; The type <code>time with time zone</code> is defined by the SQL standard, but the definition exhibits properties which lead to questionable usefulness. In most cases, a combination of <code>date</code>, time, <code>timestamp without time zone</code>, and <code>timestamp with time zone</code> should provide a complete range of date/time functionality required by any application.; \nDate and time input is accepted in almost any reasonable format, including ISO 8601, SQL-compatible, traditional POSTGRES, and others. For some formats, ordering of day, month, and year in date input is ambiguous and there is support for specifying the expected ordering of these fields. Set the DateStyle parameter to <code>MDY</code> to select month-day-year interpretation, <code>DMY</code> to select day-month-year interpretation, or <code>YMD</code> to select year-month-day interpretation.\nPostgreSQL is more flexible in handling date/time input than the SQL standard requires. See Appendix B for the exact parsing rules of date/time input and for the recognized text fields including months, days of the week, and time zones.\nRemember that any date or time literal input needs to be enclosed in single quotes, like text strings. Refer to Section 4.1.2.7 for more information. SQL requires the following syntax\n<code>\n<code>type</code> [ (<code>p</code>) ] '<code>value</code>'\n</code>\nwhere <code>p</code> is an optional precision specification giving the number of fractional digits in the seconds field. Precision can be specified for <code>time</code>, <code>timestamp</code>, and <code>interval</code> types, and can range from 0 to 6. If no precision is specified in a constant specification, it defaults to the precision of the literal value (but not more than 6 digits).\n8.5.1.1. Dates\nTable 8.10 shows some possible inputs for the <code>date</code> type.\nTable 8.10. Date Input\n<table>\n<thead>\n<tr>\n<th>Example</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1999-01-08</td>\n<td>ISO 8601; January 8 in any mode (recommended format)</td>\n</tr>\n<tr>\n<td>January 8, 1999</td>\n<td>unambiguous in any <code>datestyle</code> input mode</td>\n</tr>\n<tr>\n<td>1/8/1999</td>\n<td>January 8 in <code>MDY</code> mode; August 1 in <code>DMY</code> mode</td>\n</tr>\n<tr>\n<td>1/18/1999</td>\n<td>January 18 in <code>MDY</code> mode; rejected in other modes</td>\n</tr>\n<tr>\n<td>01/02/03</td>\n<td>January 2, 2003 in <code>MDY</code> mode; February 1, 2003 in <code>DMY</code> mode; February 3, 2001 in <code>YMD</code> mode</td>\n</tr>\n<tr>\n<td>1999-Jan-08</td>\n<td>January 8 in any mode</td>\n</tr>\n<tr>\n<td>Jan-08-1999</td>\n<td>January 8 in any mode</td>\n</tr>\n<tr>\n<td>08-Jan-1999</td>\n<td>January 8 in any mode</td>\n</tr>\n<tr>\n<td>99-Jan-08</td>\n<td>January 8 in <code>YMD</code> mode, else error</td>\n</tr>\n<tr>\n<td>08-Jan-99</td>\n<td>January 8, except error in <code>YMD</code> mode</td>\n</tr>\n<tr>\n<td>Jan-08-99</td>\n<td>January 8, except error in <code>YMD</code> mode</td>\n</tr>\n<tr>\n<td>19990108</td>\n<td>ISO 8601; January 8, 1999 in any mode</td>\n</tr>\n<tr>\n<td>990108</td>\n<td>ISO 8601; January 8, 1999 in any mode</td>\n</tr>\n<tr>\n<td>1999.008</td>\n<td>year and day of year</td>\n</tr>\n<tr>\n<td>J2451187</td>\n<td>Julian date</td>\n</tr>\n<tr>\n<td>January 8, 99 BC</td>\n<td>year 99 BC</td>\n</tr>\n</tbody>\n</table>\n8.5.1.2. Times\nThe time-of-day types are <code>time [ (p) ] without time zone</code> and <code>time [ (p) ] with time zone</code>. <code>time</code> alone is equivalent to <code>time without time zone</code>.\nValid input for these types consists of a time of day followed by an optional time zone. (See Table 8.11 and Table 8.12.) If a time zone is specified in the input for <code>time without time zone</code>, it is silently ignored. You can also specify a date but it will be ignored, except when you use a time zone name that involves a daylight-savings rule, such as <code>America/New_York</code>. In this case specifying the date is required in order to determine whether standard or daylight-savings time applies. The appropriate time zone offset is recorded in the <code>time with time zone</code> value and is output as stored; it is not adjusted to the active time zone.\nTable 8.11. Time Input\n<table>\n<thead>\n<tr>\n<th>Example</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>04:05:06.789</code></td>\n<td>ISO 8601</td>\n</tr>\n<tr>\n<td><code>04:05:06</code></td>\n<td>ISO 8601</td>\n</tr>\n<tr>\n<td><code>04:05</code></td>\n<td>ISO 8601</td>\n</tr>\n<tr>\n<td><code>040506</code></td>\n<td>ISO 8601</td>\n</tr>\n<tr>\n<td><code>04:05 AM</code></td>\n<td>same as 04:05; AM does not affect value</td>\n</tr>\n<tr>\n<td><code>04:05 PM</code></td>\n<td>same as 16:05; input hour must be <= 12</td>\n</tr>\n<tr>\n<td><code>04:05:06.789-8</code></td>\n<td>ISO 8601, with time zone as UTC offset</td>\n</tr>\n<tr>\n<td><code>04:05:06-08:00</code></td>\n<td>ISO 8601, with time zone as UTC offset</td>\n</tr>\n<tr>\n<td><code>04:05-08:00</code></td>\n<td>ISO 8601, with time zone as UTC offset</td>\n</tr>\n<tr>\n<td><code>040506-08</code></td>\n<td>ISO 8601, with time zone as UTC offset</td>\n</tr>\n<tr>\n<td><code>040506+0730</code></td>\n<td>ISO 8601, with fractional-hour time zone as UTC offset</td>\n</tr>\n<tr>\n<td><code>040506+07:30:00</code></td>\n<td>UTC offset specified to seconds (not allowed in ISO 8601)</td>\n</tr>\n<tr>\n<td><code>04:05:06 PST</code></td>\n<td>time zone specified by abbreviation</td>\n</tr>\n<tr>\n<td><code>2003-04-12 04:05:06 America/New_York</code></td>\n<td>time zone specified by full name</td>\n</tr>\n</tbody>\n</table>\nTable 8.12. Time Zone Input\n<table>\n<thead>\n<tr>\n<th>Example</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>PST</code></td>\n<td>Abbreviation (for Pacific Standard Time)</td>\n</tr>\n<tr>\n<td><code>America/New_York</code></td>\n<td>Full time zone name</td>\n</tr>\n<tr>\n<td><code>PST8PDT</code></td>\n<td>POSIX-style time zone specification</td>\n</tr>\n<tr>\n<td><code>-8:00:00</code></td>\n<td>UTC offset for PST</td>\n</tr>\n<tr>\n<td><code>-8:00</code></td>\n<td>UTC offset for PST (ISO 8601 extended format)</td>\n</tr>\n<tr>\n<td><code>-800</code></td>\n<td>UTC offset for PST (ISO 8601 basic format)</td>\n</tr>\n<tr>\n<td><code>-8</code></td>\n<td>UTC offset for PST (ISO 8601 basic format)</td>\n</tr>\n<tr>\n<td><code>zulu</code></td>\n<td>Military abbreviation for UTC</td>\n</tr>\n<tr>\n<td><code>z</code></td>\n<td>Short form of <code>zulu</code> (also in ISO 8601)</td>\n</tr>\n</tbody>\n</table>\nRefer to Section 8.5.3 for more information on how to specify time zones.\n8.5.1.3. Time Stamps\nValid input for the time stamp types consists of the concatenation of a date and a time, followed by an optional time zone, followed by an optional <code>AD</code> or <code>BC</code>. (Alternatively, <code>AD</code>/<code>BC</code> can appear before the time zone, but this is not the preferred ordering.) Thus:\n<code>\n1999-01-08 04:05:06\n</code>\nand:\n<code>\n1999-01-08 04:05:06 -8:00\n</code>\nare valid values, which follow the ISO 8601 standard. In addition, the common format:\n<code>\nJanuary 8 04:05:06 1999 PST\n</code>\nis supported.\nThe SQL standard differentiates <code>timestamp without time zone</code> and <code>timestamp with time zone</code> literals by the presence of a \"+\" or \"-\" symbol and time zone offset after the time. Hence, according to the standard,\n<code>TIMESTAMP '2004-10-19 10:23:54'</code>\nis a <code>timestamp without time zone</code>, while\n<code>TIMESTAMP '2004-10-19 10:23:54+02'</code>\nis a <code>timestamp with time zone</code>. PostgreSQL never examines the content of a literal string before determining its type, and therefore will treat both of the above as <code>timestamp without time zone</code>. To ensure that a literal is treated as <code>timestamp with time zone</code>, give it the correct explicit type:\n<code>TIMESTAMP WITH TIME ZONE '2004-10-19 10:23:54+02'</code>\nIn a literal that has been determined to be <code>timestamp without time zone</code>, PostgreSQL will silently ignore any time zone indication. That is, the resulting value is derived from the date/time fields in the input value, and is not adjusted for time zone.\nFor <code>timestamp with time zone</code>, the internally stored value is always in UTC (Universal Coordinated Time, traditionally known as Greenwich Mean Time, GMT). An input value that has an explicit time zone specified is converted to UTC using the appropriate offset for that time zone. If no time zone is stated in the input string, then it is assumed to be in the time zone indicated by the system's TimeZone parameter, and is converted to UTC using the offset for the <code>timezone</code> zone.\nWhen a <code>timestamp with time zone</code> value is output, it is always converted from UTC to the current <code>timezone</code> zone, and displayed as local time in that zone. To see the time in another time zone, either change <code>timezone</code> or use the <code>AT TIME ZONE</code> construct (see Section 9.9.3).\nConversions between <code>timestamp without time zone</code> and <code>timestamp with time zone</code> normally assume that the <code>timestamp without time zone</code> value should be taken or given as <code>timezone</code> local time. A different time zone can be specified for the conversion using <code>AT TIME ZONE</code>.\n8.5.1.4. Special Values\nPostgreSQL supports several special date/time input values for convenience, as shown in Table 8.13. The values <code>infinity</code> and <code>-infinity</code> are specially represented inside the system and will be displayed unchanged; but the others are simply notational shorthands that will be converted to ordinary date/time values when read. (In particular, <code>now</code> and related strings are converted to a specific time value as soon as they are read.) All of these values need to be enclosed in single quotes when used as constants in SQL commands.\nTable 8.13. Special Date/Time Inputs\n<table>\n<thead>\n<tr>\n<th>Input String</th>\n<th>Valid Types</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>epoch</code></td>\n<td><code>date</code>, <code>timestamp</code></td>\n<td>1970-01-01 00:00:00+00 (Unix system time zero)</td>\n</tr>\n<tr>\n<td><code>infinity</code></td>\n<td><code>date</code>, <code>timestamp</code></td>\n<td>later than all other time stamps</td>\n</tr>\n<tr>\n<td><code>-infinity</code></td>\n<td><code>date</code>, <code>timestamp</code></td>\n<td>earlier than all other time stamps</td>\n</tr>\n<tr>\n<td><code>now</code></td>\n<td><code>date</code>, <code>time</code>, <code>timestamp</code></td>\n<td>current transaction's start time</td>\n</tr>\n<tr>\n<td><code>today</code></td>\n<td><code>date</code>, <code>timestamp</code></td>\n<td>midnight (<code>00:00</code>) today</td>\n</tr>\n<tr>\n<td><code>tomorrow</code></td>\n<td><code>date</code>, <code>timestamp</code></td>\n<td>midnight (<code>00:00</code>) tomorrow</td>\n</tr>\n<tr>\n<td><code>yesterday</code></td>\n<td><code>date</code>, <code>timestamp</code></td>\n<td>midnight (<code>00:00</code>) yesterday</td>\n</tr>\n<tr>\n<td><code>allballs</code></td>\n<td><code>time</code></td>\n<td>00:00:00.00 UTC</td>\n</tr>\n</tbody>\n</table>\nThe following SQL-compatible functions can also be used to obtain the current time value for the corresponding data type: <code>CURRENT_DATE</code>, <code>CURRENT_TIME</code>, <code>CURRENT_TIMESTAMP</code>, <code>LOCALTIME</code>, <code>LOCALTIMESTAMP</code>. (See Section 9.9.4.) Note that these are SQL functions and are not recognized in data input strings.\nCaution\nWhile the input strings <code>now</code>, <code>today</code>, <code>tomorrow</code>, and <code>yesterday</code> are fine to use in interactive SQL commands, they can have surprising behavior when the command is saved to be executed later, for example in prepared statements, views, and function definitions. The string can be converted to a specific time value that continues to be used long after it becomes stale. Use one of the SQL functions instead in such contexts. For example, <code>CURRENT_DATE + 1</code> is safer than <code>'tomorrow'::date</code>.\n; \nThe output format of the date/time types can be set to one of the four styles ISO 8601, SQL (Ingres), traditional POSTGRES (Unix date format), or German. The default is the ISO format. (The SQL standard requires the use of the ISO 8601 format. The name of the \"SQL\" output format is a historical accident.) Table 8.14 shows examples of each output style. The output of the <code>date</code> and <code>time</code> types is generally only the date or time part in accordance with the given examples. However, the POSTGRES style outputs date-only values in ISO format.\nTable 8.14. Date/Time Output Styles\n<table>\n<thead>\n<tr>\n<th>Style Specification</th>\n<th>Description</th>\n<th>Example</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>ISO</code></td>\n<td>ISO 8601, SQL standard</td>\n<td><code>1997-12-17 07:37:16-08</code></td>\n</tr>\n<tr>\n<td><code>SQL</code></td>\n<td>traditional style</td>\n<td><code>12/17/1997 07:37:16.00 PST</code></td>\n</tr>\n<tr>\n<td><code>Postgres</code></td>\n<td>original style</td>\n<td><code>Wed Dec 17 07:37:16 1997 PST</code></td>\n</tr>\n<tr>\n<td><code>German</code></td>\n<td>regional style</td>\n<td><code>17.12.1997 07:37:16.00 PST</code></td>\n</tr>\n</tbody>\n</table>\nNote\nISO 8601 specifies the use of uppercase letter <code>T</code> to separate the date and time. PostgreSQL accepts that format on input, but on output it uses a space rather than <code>T</code>, as shown above. This is for readability and for consistency with RFC 3339 as well as some other database systems.\nIn the SQL and POSTGRES styles, day appears before month if DMY field ordering has been specified, otherwise month appears before day. (See Section 8.5.1 for how this setting also affects interpretation of input values.) Table 8.15 shows examples.\nTable 8.15. Date Order Conventions\n<table>\n<thead>\n<tr>\n<th><code>datestyle</code> Setting</th>\n<th>Input Ordering</th>\n<th>Example Output</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>SQL, DMY</code></td>\n<td><code>day</code>/<code>month</code>/<code>year</code></td>\n<td><code>17/12/1997 15:37:16.00 CET</code></td>\n</tr>\n<tr>\n<td><code>SQL, MDY</code></td>\n<td><code>month</code>/<code>day</code>/<code>year</code></td>\n<td><code>12/17/1997 07:37:16.00 PST</code></td>\n</tr>\n<tr>\n<td><code>Postgres, DMY</code></td>\n<td><code>day</code>/<code>month</code>/<code>year</code></td>\n<td><code>Wed 17 Dec 07:37:16 1997 PST</code></td>\n</tr>\n</tbody>\n</table>\nIn the ISO style, the time zone is always shown as a signed numeric offset from UTC, with positive sign used for zones east of Greenwich. The offset will be shown as <code>hh</code> (hours only) if it is an integral number of hours, else as <code>hh</code>:<code>mm</code> if it is an integral number of minutes, else as <code>hh</code>:<code>mm</code>:<code>ss</code>. (The third case is not possible with any modern time zone standard, but it can appear when working with timestamps that predate the adoption of standardized time zones.) In the other date styles, the time zone is shown as an alphabetic abbreviation if one is in common use in the current zone. Otherwise it appears as a signed numeric offset in ISO 8601 basic format (<code>hh</code> or <code>hhmm</code>).\nThe date/time style can be selected by the user using the <code>SET datestyle</code> command, the DateStyle parameter in the <code>postgresql.conf</code> configuration file, or the <code>PGDATESTYLE</code> environment variable on the server or client.\nThe formatting function <code>to_char</code> (see Section 9.8) is also available as a more flexible way to format date/time output.\n; \nTime zones, and time-zone conventions, are influenced by political decisions, not just earth geometry. Time zones around the world became somewhat standardized during the 1900s, but continue to be prone to arbitrary changes, particularly with respect to daylight-savings rules. PostgreSQL uses the widely-used IANA (Olson) time zone database for information about historical time zone rules. For times in the future, the assumption is that the latest known rules for a given time zone will continue to be observed indefinitely far into the future.\nPostgreSQL endeavors to be compatible with the SQL standard definitions for typical usage. However, the SQL standard has an odd mix of date and time types and capabilities. Two obvious problems are:\nAlthough the <code>date</code> type cannot have an associated time zone, the <code>time</code> type can. Time zones in the real world have little meaning unless associated with a date as well as a time, since the offset can vary through the year with daylight-saving time boundaries.\nThe default time zone is specified as a constant numeric offset from UTC. It is therefore impossible to adapt to daylight-saving time when doing date/time arithmetic across DST boundaries.\nTo address these difficulties, we recommend using date/time types that contain both date and time when using time zones. We do not recommend using the type <code>time with time zone</code> (though it is supported by PostgreSQL for legacy applications and for compliance with the SQL standard). PostgreSQL assumes your local time zone for any type containing only date or time.\nAll timezone-aware dates and times are stored internally in UTC. They are converted to local time in the zone specified by the TimeZone configuration parameter before being displayed to the client.\nPostgreSQL allows you to specify time zones in three different forms:\nA full time zone name, for example <code>America/New_York</code>. The recognized time zone names are listed in the <code>pg_timezone_names</code> view (see Section 51.92). PostgreSQL uses the widely-used IANA time zone data for this purpose, so the same time zone names are also recognized by other software.\nA time zone abbreviation, for example <code>PST</code>. Such a specification merely defines a particular offset from UTC, in contrast to full time zone names which can imply a set of daylight savings transition rules as well. The recognized abbreviations are listed in the <code>pg_timezone_abbrevs</code> view (see Section 51.91). You cannot set the configuration parameters TimeZone or log_timezone to a time zone abbreviation, but you can use abbreviations in date/time input values and with the <code>AT TIME ZONE</code> operator.\nIn addition to the timezone names and abbreviations, PostgreSQL will accept POSIX-style time zone specifications, as described in Section B.5. This option is not normally preferable to using a named time zone, but it may be necessary if no suitable IANA time zone entry is available.\nIn short, this is the difference between abbreviations and full names: abbreviations represent a specific offset from UTC, whereas many of the full names imply a local daylight-savings time rule, and so have two possible UTC offsets. As an example, <code>2014-06-04 12:00 America/New_York</code> represents noon local time in New York, which for this particular date was Eastern Daylight Time (UTC-4). So <code>2014-06-04 12:00 EDT</code> specifies that same time instant. But <code>2014-06-04 12:00 EST</code> specifies noon Eastern Standard Time (UTC-5), regardless of whether daylight savings was nominally in effect on that date.\nTo complicate matters, some jurisdictions have used the same timezone abbreviation to mean different UTC offsets at different times; for example, in Moscow <code>MSK</code> has meant UTC+3 in some years and UTC+4 in others. PostgreSQL interprets such abbreviations according to whatever they meant (or had most recently meant) on the specified date; but, as with the <code>EST</code> example above, this is not necessarily the same as local civil time on that date.\nIn all cases, timezone names and abbreviations are recognized case-insensitively. (This is a change from PostgreSQL versions prior to 8.2, which were case-sensitive in some contexts but not others.)\nNeither timezone names nor abbreviations are hard-wired into the server; they are obtained from configuration files stored under <code>.../share/timezone/</code> and <code>.../share/timezonesets/</code> of the installation directory (see Section B.4).\nThe TimeZone configuration parameter can be set in the file <code>postgresql.conf</code>, or in any of the other standard ways described in Chapter 19. There are also some special ways to set it:\nThe SQL command <code>SET TIME ZONE</code> sets the time zone for the session. This is an alternative spelling of <code>SET TIMEZONE TO</code> with a more SQL-spec-compatible syntax.\nThe <code>PGTZ</code> environment variable is used by libpq clients to send a <code>SET TIME ZONE</code> command to the server upon connection.\n; Internally <code>interval</code> values are stored as months, days, and microseconds. This is done because the number of days in a month varies, and a day can have 23 or 25 hours if a daylight savings time adjustment is involved. The months and days fields are integers while the microseconds field can store fractional seconds. Because intervals are usually created from constant strings or <code>timestamp</code> subtraction, this storage method works well in most cases, but can cause unexpected results:",
        "example": [],
        "link": [
            "https://www.postgresql.org/docs/12/datatype-datetime.html"
        ]
    },
    {
        "type": "type",
        "keyword": "time ( p )",
        "tree": "(constdatetime TIME ( ))",
        "description": [
            "time of day (no time zone)",
            "time of day (no date)"
        ],
        "detail": "[DESCRIPTION]: time of day (no time zone); time of day (no date)<sep>[STORAGE SIZE]: 12 bytes<sep>[LOW VALUE]: 00:00:00+1559<sep>[HIGH VALUE]: 24:00:00-1559<sep>[COMPENSATE]: <code>time</code>, <code>timestamp</code>, and <code>interval</code> accept an optional precision value <code>p</code> which specifies the number of fractional digits retained in the seconds field. By default, there is no explicit bound on precision. The allowed range of <code>p</code> is from 0 to 6.; The type <code>time with time zone</code> is defined by the SQL standard, but the definition exhibits properties which lead to questionable usefulness. In most cases, a combination of <code>date</code>, time, <code>timestamp without time zone</code>, and <code>timestamp with time zone</code> should provide a complete range of date/time functionality required by any application.; \nDate and time input is accepted in almost any reasonable format, including ISO 8601, SQL-compatible, traditional POSTGRES, and others. For some formats, ordering of day, month, and year in date input is ambiguous and there is support for specifying the expected ordering of these fields. Set the DateStyle parameter to <code>MDY</code> to select month-day-year interpretation, <code>DMY</code> to select day-month-year interpretation, or <code>YMD</code> to select year-month-day interpretation.\nPostgreSQL is more flexible in handling date/time input than the SQL standard requires. See Appendix B for the exact parsing rules of date/time input and for the recognized text fields including months, days of the week, and time zones.\nRemember that any date or time literal input needs to be enclosed in single quotes, like text strings. Refer to Section 4.1.2.7 for more information. SQL requires the following syntax\n<code>\n<code>type</code> [ (<code>p</code>) ] '<code>value</code>'\n</code>\nwhere <code>p</code> is an optional precision specification giving the number of fractional digits in the seconds field. Precision can be specified for <code>time</code>, <code>timestamp</code>, and <code>interval</code> types, and can range from 0 to 6. If no precision is specified in a constant specification, it defaults to the precision of the literal value (but not more than 6 digits).\n8.5.1.1. Dates\nTable 8.10 shows some possible inputs for the <code>date</code> type.\nTable 8.10. Date Input\n<table>\n<thead>\n<tr>\n<th>Example</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1999-01-08</td>\n<td>ISO 8601; January 8 in any mode (recommended format)</td>\n</tr>\n<tr>\n<td>January 8, 1999</td>\n<td>unambiguous in any <code>datestyle</code> input mode</td>\n</tr>\n<tr>\n<td>1/8/1999</td>\n<td>January 8 in <code>MDY</code> mode; August 1 in <code>DMY</code> mode</td>\n</tr>\n<tr>\n<td>1/18/1999</td>\n<td>January 18 in <code>MDY</code> mode; rejected in other modes</td>\n</tr>\n<tr>\n<td>01/02/03</td>\n<td>January 2, 2003 in <code>MDY</code> mode; February 1, 2003 in <code>DMY</code> mode; February 3, 2001 in <code>YMD</code> mode</td>\n</tr>\n<tr>\n<td>1999-Jan-08</td>\n<td>January 8 in any mode</td>\n</tr>\n<tr>\n<td>Jan-08-1999</td>\n<td>January 8 in any mode</td>\n</tr>\n<tr>\n<td>08-Jan-1999</td>\n<td>January 8 in any mode</td>\n</tr>\n<tr>\n<td>99-Jan-08</td>\n<td>January 8 in <code>YMD</code> mode, else error</td>\n</tr>\n<tr>\n<td>08-Jan-99</td>\n<td>January 8, except error in <code>YMD</code> mode</td>\n</tr>\n<tr>\n<td>Jan-08-99</td>\n<td>January 8, except error in <code>YMD</code> mode</td>\n</tr>\n<tr>\n<td>19990108</td>\n<td>ISO 8601; January 8, 1999 in any mode</td>\n</tr>\n<tr>\n<td>990108</td>\n<td>ISO 8601; January 8, 1999 in any mode</td>\n</tr>\n<tr>\n<td>1999.008</td>\n<td>year and day of year</td>\n</tr>\n<tr>\n<td>J2451187</td>\n<td>Julian date</td>\n</tr>\n<tr>\n<td>January 8, 99 BC</td>\n<td>year 99 BC</td>\n</tr>\n</tbody>\n</table>\n8.5.1.2. Times\nThe time-of-day types are <code>time [ (p) ] without time zone</code> and <code>time [ (p) ] with time zone</code>. <code>time</code> alone is equivalent to <code>time without time zone</code>.\nValid input for these types consists of a time of day followed by an optional time zone. (See Table 8.11 and Table 8.12.) If a time zone is specified in the input for <code>time without time zone</code>, it is silently ignored. You can also specify a date but it will be ignored, except when you use a time zone name that involves a daylight-savings rule, such as <code>America/New_York</code>. In this case specifying the date is required in order to determine whether standard or daylight-savings time applies. The appropriate time zone offset is recorded in the <code>time with time zone</code> value and is output as stored; it is not adjusted to the active time zone.\nTable 8.11. Time Input\n<table>\n<thead>\n<tr>\n<th>Example</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>04:05:06.789</code></td>\n<td>ISO 8601</td>\n</tr>\n<tr>\n<td><code>04:05:06</code></td>\n<td>ISO 8601</td>\n</tr>\n<tr>\n<td><code>04:05</code></td>\n<td>ISO 8601</td>\n</tr>\n<tr>\n<td><code>040506</code></td>\n<td>ISO 8601</td>\n</tr>\n<tr>\n<td><code>04:05 AM</code></td>\n<td>same as 04:05; AM does not affect value</td>\n</tr>\n<tr>\n<td><code>04:05 PM</code></td>\n<td>same as 16:05; input hour must be <= 12</td>\n</tr>\n<tr>\n<td><code>04:05:06.789-8</code></td>\n<td>ISO 8601, with time zone as UTC offset</td>\n</tr>\n<tr>\n<td><code>04:05:06-08:00</code></td>\n<td>ISO 8601, with time zone as UTC offset</td>\n</tr>\n<tr>\n<td><code>04:05-08:00</code></td>\n<td>ISO 8601, with time zone as UTC offset</td>\n</tr>\n<tr>\n<td><code>040506-08</code></td>\n<td>ISO 8601, with time zone as UTC offset</td>\n</tr>\n<tr>\n<td><code>040506+0730</code></td>\n<td>ISO 8601, with fractional-hour time zone as UTC offset</td>\n</tr>\n<tr>\n<td><code>040506+07:30:00</code></td>\n<td>UTC offset specified to seconds (not allowed in ISO 8601)</td>\n</tr>\n<tr>\n<td><code>04:05:06 PST</code></td>\n<td>time zone specified by abbreviation</td>\n</tr>\n<tr>\n<td><code>2003-04-12 04:05:06 America/New_York</code></td>\n<td>time zone specified by full name</td>\n</tr>\n</tbody>\n</table>\nTable 8.12. Time Zone Input\n<table>\n<thead>\n<tr>\n<th>Example</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>PST</code></td>\n<td>Abbreviation (for Pacific Standard Time)</td>\n</tr>\n<tr>\n<td><code>America/New_York</code></td>\n<td>Full time zone name</td>\n</tr>\n<tr>\n<td><code>PST8PDT</code></td>\n<td>POSIX-style time zone specification</td>\n</tr>\n<tr>\n<td><code>-8:00:00</code></td>\n<td>UTC offset for PST</td>\n</tr>\n<tr>\n<td><code>-8:00</code></td>\n<td>UTC offset for PST (ISO 8601 extended format)</td>\n</tr>\n<tr>\n<td><code>-800</code></td>\n<td>UTC offset for PST (ISO 8601 basic format)</td>\n</tr>\n<tr>\n<td><code>-8</code></td>\n<td>UTC offset for PST (ISO 8601 basic format)</td>\n</tr>\n<tr>\n<td><code>zulu</code></td>\n<td>Military abbreviation for UTC</td>\n</tr>\n<tr>\n<td><code>z</code></td>\n<td>Short form of <code>zulu</code> (also in ISO 8601)</td>\n</tr>\n</tbody>\n</table>\nRefer to Section 8.5.3 for more information on how to specify time zones.\n8.5.1.3. Time Stamps\nValid input for the time stamp types consists of the concatenation of a date and a time, followed by an optional time zone, followed by an optional <code>AD</code> or <code>BC</code>. (Alternatively, <code>AD</code>/<code>BC</code> can appear before the time zone, but this is not the preferred ordering.) Thus:\n<code>\n1999-01-08 04:05:06\n</code>\nand:\n<code>\n1999-01-08 04:05:06 -8:00\n</code>\nare valid values, which follow the ISO 8601 standard. In addition, the common format:\n<code>\nJanuary 8 04:05:06 1999 PST\n</code>\nis supported.\nThe SQL standard differentiates <code>timestamp without time zone</code> and <code>timestamp with time zone</code> literals by the presence of a \"+\" or \"-\" symbol and time zone offset after the time. Hence, according to the standard,\n<code>TIMESTAMP '2004-10-19 10:23:54'</code>\nis a <code>timestamp without time zone</code>, while\n<code>TIMESTAMP '2004-10-19 10:23:54+02'</code>\nis a <code>timestamp with time zone</code>. PostgreSQL never examines the content of a literal string before determining its type, and therefore will treat both of the above as <code>timestamp without time zone</code>. To ensure that a literal is treated as <code>timestamp with time zone</code>, give it the correct explicit type:\n<code>TIMESTAMP WITH TIME ZONE '2004-10-19 10:23:54+02'</code>\nIn a literal that has been determined to be <code>timestamp without time zone</code>, PostgreSQL will silently ignore any time zone indication. That is, the resulting value is derived from the date/time fields in the input value, and is not adjusted for time zone.\nFor <code>timestamp with time zone</code>, the internally stored value is always in UTC (Universal Coordinated Time, traditionally known as Greenwich Mean Time, GMT). An input value that has an explicit time zone specified is converted to UTC using the appropriate offset for that time zone. If no time zone is stated in the input string, then it is assumed to be in the time zone indicated by the system's TimeZone parameter, and is converted to UTC using the offset for the <code>timezone</code> zone.\nWhen a <code>timestamp with time zone</code> value is output, it is always converted from UTC to the current <code>timezone</code> zone, and displayed as local time in that zone. To see the time in another time zone, either change <code>timezone</code> or use the <code>AT TIME ZONE</code> construct (see Section 9.9.3).\nConversions between <code>timestamp without time zone</code> and <code>timestamp with time zone</code> normally assume that the <code>timestamp without time zone</code> value should be taken or given as <code>timezone</code> local time. A different time zone can be specified for the conversion using <code>AT TIME ZONE</code>.\n8.5.1.4. Special Values\nPostgreSQL supports several special date/time input values for convenience, as shown in Table 8.13. The values <code>infinity</code> and <code>-infinity</code> are specially represented inside the system and will be displayed unchanged; but the others are simply notational shorthands that will be converted to ordinary date/time values when read. (In particular, <code>now</code> and related strings are converted to a specific time value as soon as they are read.) All of these values need to be enclosed in single quotes when used as constants in SQL commands.\nTable 8.13. Special Date/Time Inputs\n<table>\n<thead>\n<tr>\n<th>Input String</th>\n<th>Valid Types</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>epoch</code></td>\n<td><code>date</code>, <code>timestamp</code></td>\n<td>1970-01-01 00:00:00+00 (Unix system time zero)</td>\n</tr>\n<tr>\n<td><code>infinity</code></td>\n<td><code>date</code>, <code>timestamp</code></td>\n<td>later than all other time stamps</td>\n</tr>\n<tr>\n<td><code>-infinity</code></td>\n<td><code>date</code>, <code>timestamp</code></td>\n<td>earlier than all other time stamps</td>\n</tr>\n<tr>\n<td><code>now</code></td>\n<td><code>date</code>, <code>time</code>, <code>timestamp</code></td>\n<td>current transaction's start time</td>\n</tr>\n<tr>\n<td><code>today</code></td>\n<td><code>date</code>, <code>timestamp</code></td>\n<td>midnight (<code>00:00</code>) today</td>\n</tr>\n<tr>\n<td><code>tomorrow</code></td>\n<td><code>date</code>, <code>timestamp</code></td>\n<td>midnight (<code>00:00</code>) tomorrow</td>\n</tr>\n<tr>\n<td><code>yesterday</code></td>\n<td><code>date</code>, <code>timestamp</code></td>\n<td>midnight (<code>00:00</code>) yesterday</td>\n</tr>\n<tr>\n<td><code>allballs</code></td>\n<td><code>time</code></td>\n<td>00:00:00.00 UTC</td>\n</tr>\n</tbody>\n</table>\nThe following SQL-compatible functions can also be used to obtain the current time value for the corresponding data type: <code>CURRENT_DATE</code>, <code>CURRENT_TIME</code>, <code>CURRENT_TIMESTAMP</code>, <code>LOCALTIME</code>, <code>LOCALTIMESTAMP</code>. (See Section 9.9.4.) Note that these are SQL functions and are not recognized in data input strings.\nCaution\nWhile the input strings <code>now</code>, <code>today</code>, <code>tomorrow</code>, and <code>yesterday</code> are fine to use in interactive SQL commands, they can have surprising behavior when the command is saved to be executed later, for example in prepared statements, views, and function definitions. The string can be converted to a specific time value that continues to be used long after it becomes stale. Use one of the SQL functions instead in such contexts. For example, <code>CURRENT_DATE + 1</code> is safer than <code>'tomorrow'::date</code>.\n; \nThe output format of the date/time types can be set to one of the four styles ISO 8601, SQL (Ingres), traditional POSTGRES (Unix date format), or German. The default is the ISO format. (The SQL standard requires the use of the ISO 8601 format. The name of the \"SQL\" output format is a historical accident.) Table 8.14 shows examples of each output style. The output of the <code>date</code> and <code>time</code> types is generally only the date or time part in accordance with the given examples. However, the POSTGRES style outputs date-only values in ISO format.\nTable 8.14. Date/Time Output Styles\n<table>\n<thead>\n<tr>\n<th>Style Specification</th>\n<th>Description</th>\n<th>Example</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>ISO</code></td>\n<td>ISO 8601, SQL standard</td>\n<td><code>1997-12-17 07:37:16-08</code></td>\n</tr>\n<tr>\n<td><code>SQL</code></td>\n<td>traditional style</td>\n<td><code>12/17/1997 07:37:16.00 PST</code></td>\n</tr>\n<tr>\n<td><code>Postgres</code></td>\n<td>original style</td>\n<td><code>Wed Dec 17 07:37:16 1997 PST</code></td>\n</tr>\n<tr>\n<td><code>German</code></td>\n<td>regional style</td>\n<td><code>17.12.1997 07:37:16.00 PST</code></td>\n</tr>\n</tbody>\n</table>\nNote\nISO 8601 specifies the use of uppercase letter <code>T</code> to separate the date and time. PostgreSQL accepts that format on input, but on output it uses a space rather than <code>T</code>, as shown above. This is for readability and for consistency with RFC 3339 as well as some other database systems.\nIn the SQL and POSTGRES styles, day appears before month if DMY field ordering has been specified, otherwise month appears before day. (See Section 8.5.1 for how this setting also affects interpretation of input values.) Table 8.15 shows examples.\nTable 8.15. Date Order Conventions\n<table>\n<thead>\n<tr>\n<th><code>datestyle</code> Setting</th>\n<th>Input Ordering</th>\n<th>Example Output</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>SQL, DMY</code></td>\n<td><code>day</code>/<code>month</code>/<code>year</code></td>\n<td><code>17/12/1997 15:37:16.00 CET</code></td>\n</tr>\n<tr>\n<td><code>SQL, MDY</code></td>\n<td><code>month</code>/<code>day</code>/<code>year</code></td>\n<td><code>12/17/1997 07:37:16.00 PST</code></td>\n</tr>\n<tr>\n<td><code>Postgres, DMY</code></td>\n<td><code>day</code>/<code>month</code>/<code>year</code></td>\n<td><code>Wed 17 Dec 07:37:16 1997 PST</code></td>\n</tr>\n</tbody>\n</table>\nIn the ISO style, the time zone is always shown as a signed numeric offset from UTC, with positive sign used for zones east of Greenwich. The offset will be shown as <code>hh</code> (hours only) if it is an integral number of hours, else as <code>hh</code>:<code>mm</code> if it is an integral number of minutes, else as <code>hh</code>:<code>mm</code>:<code>ss</code>. (The third case is not possible with any modern time zone standard, but it can appear when working with timestamps that predate the adoption of standardized time zones.) In the other date styles, the time zone is shown as an alphabetic abbreviation if one is in common use in the current zone. Otherwise it appears as a signed numeric offset in ISO 8601 basic format (<code>hh</code> or <code>hhmm</code>).\nThe date/time style can be selected by the user using the <code>SET datestyle</code> command, the DateStyle parameter in the <code>postgresql.conf</code> configuration file, or the <code>PGDATESTYLE</code> environment variable on the server or client.\nThe formatting function <code>to_char</code> (see Section 9.8) is also available as a more flexible way to format date/time output.\n; \nTime zones, and time-zone conventions, are influenced by political decisions, not just earth geometry. Time zones around the world became somewhat standardized during the 1900s, but continue to be prone to arbitrary changes, particularly with respect to daylight-savings rules. PostgreSQL uses the widely-used IANA (Olson) time zone database for information about historical time zone rules. For times in the future, the assumption is that the latest known rules for a given time zone will continue to be observed indefinitely far into the future.\nPostgreSQL endeavors to be compatible with the SQL standard definitions for typical usage. However, the SQL standard has an odd mix of date and time types and capabilities. Two obvious problems are:\nAlthough the <code>date</code> type cannot have an associated time zone, the <code>time</code> type can. Time zones in the real world have little meaning unless associated with a date as well as a time, since the offset can vary through the year with daylight-saving time boundaries.\nThe default time zone is specified as a constant numeric offset from UTC. It is therefore impossible to adapt to daylight-saving time when doing date/time arithmetic across DST boundaries.\nTo address these difficulties, we recommend using date/time types that contain both date and time when using time zones. We do not recommend using the type <code>time with time zone</code> (though it is supported by PostgreSQL for legacy applications and for compliance with the SQL standard). PostgreSQL assumes your local time zone for any type containing only date or time.\nAll timezone-aware dates and times are stored internally in UTC. They are converted to local time in the zone specified by the TimeZone configuration parameter before being displayed to the client.\nPostgreSQL allows you to specify time zones in three different forms:\nA full time zone name, for example <code>America/New_York</code>. The recognized time zone names are listed in the <code>pg_timezone_names</code> view (see Section 51.92). PostgreSQL uses the widely-used IANA time zone data for this purpose, so the same time zone names are also recognized by other software.\nA time zone abbreviation, for example <code>PST</code>. Such a specification merely defines a particular offset from UTC, in contrast to full time zone names which can imply a set of daylight savings transition rules as well. The recognized abbreviations are listed in the <code>pg_timezone_abbrevs</code> view (see Section 51.91). You cannot set the configuration parameters TimeZone or log_timezone to a time zone abbreviation, but you can use abbreviations in date/time input values and with the <code>AT TIME ZONE</code> operator.\nIn addition to the timezone names and abbreviations, PostgreSQL will accept POSIX-style time zone specifications, as described in Section B.5. This option is not normally preferable to using a named time zone, but it may be necessary if no suitable IANA time zone entry is available.\nIn short, this is the difference between abbreviations and full names: abbreviations represent a specific offset from UTC, whereas many of the full names imply a local daylight-savings time rule, and so have two possible UTC offsets. As an example, <code>2014-06-04 12:00 America/New_York</code> represents noon local time in New York, which for this particular date was Eastern Daylight Time (UTC-4). So <code>2014-06-04 12:00 EDT</code> specifies that same time instant. But <code>2014-06-04 12:00 EST</code> specifies noon Eastern Standard Time (UTC-5), regardless of whether daylight savings was nominally in effect on that date.\nTo complicate matters, some jurisdictions have used the same timezone abbreviation to mean different UTC offsets at different times; for example, in Moscow <code>MSK</code> has meant UTC+3 in some years and UTC+4 in others. PostgreSQL interprets such abbreviations according to whatever they meant (or had most recently meant) on the specified date; but, as with the <code>EST</code> example above, this is not necessarily the same as local civil time on that date.\nIn all cases, timezone names and abbreviations are recognized case-insensitively. (This is a change from PostgreSQL versions prior to 8.2, which were case-sensitive in some contexts but not others.)\nNeither timezone names nor abbreviations are hard-wired into the server; they are obtained from configuration files stored under <code>.../share/timezone/</code> and <code>.../share/timezonesets/</code> of the installation directory (see Section B.4).\nThe TimeZone configuration parameter can be set in the file <code>postgresql.conf</code>, or in any of the other standard ways described in Chapter 19. There are also some special ways to set it:\nThe SQL command <code>SET TIME ZONE</code> sets the time zone for the session. This is an alternative spelling of <code>SET TIMEZONE TO</code> with a more SQL-spec-compatible syntax.\nThe <code>PGTZ</code> environment variable is used by libpq clients to send a <code>SET TIME ZONE</code> command to the server upon connection.\n; Internally <code>interval</code> values are stored as months, days, and microseconds. This is done because the number of days in a month varies, and a day can have 23 or 25 hours if a daylight savings time adjustment is involved. The months and days fields are integers while the microseconds field can store fractional seconds. Because intervals are usually created from constant strings or <code>timestamp</code> subtraction, this storage method works well in most cases, but can cause unexpected results:",
        "example": [],
        "link": [
            "https://www.postgresql.org/docs/12/datatype-datetime.html"
        ]
    },
    {
        "type": "type",
        "keyword": "time",
        "tree": "(constdatetime TIME)",
        "description": [
            "time of day (no time zone)",
            "time of day (no date)"
        ],
        "detail": "[DESCRIPTION]: time of day (no time zone); time of day (no date)<sep>[STORAGE SIZE]: 12 bytes<sep>[LOW VALUE]: 00:00:00+1559<sep>[HIGH VALUE]: 24:00:00-1559<sep>[COMPENSATE]: <code>time</code>, <code>timestamp</code>, and <code>interval</code> accept an optional precision value <code>p</code> which specifies the number of fractional digits retained in the seconds field. By default, there is no explicit bound on precision. The allowed range of <code>p</code> is from 0 to 6.; The type <code>time with time zone</code> is defined by the SQL standard, but the definition exhibits properties which lead to questionable usefulness. In most cases, a combination of <code>date</code>, time, <code>timestamp without time zone</code>, and <code>timestamp with time zone</code> should provide a complete range of date/time functionality required by any application.; \nDate and time input is accepted in almost any reasonable format, including ISO 8601, SQL-compatible, traditional POSTGRES, and others. For some formats, ordering of day, month, and year in date input is ambiguous and there is support for specifying the expected ordering of these fields. Set the DateStyle parameter to <code>MDY</code> to select month-day-year interpretation, <code>DMY</code> to select day-month-year interpretation, or <code>YMD</code> to select year-month-day interpretation.\nPostgreSQL is more flexible in handling date/time input than the SQL standard requires. See Appendix B for the exact parsing rules of date/time input and for the recognized text fields including months, days of the week, and time zones.\nRemember that any date or time literal input needs to be enclosed in single quotes, like text strings. Refer to Section 4.1.2.7 for more information. SQL requires the following syntax\n<code>\n<code>type</code> [ (<code>p</code>) ] '<code>value</code>'\n</code>\nwhere <code>p</code> is an optional precision specification giving the number of fractional digits in the seconds field. Precision can be specified for <code>time</code>, <code>timestamp</code>, and <code>interval</code> types, and can range from 0 to 6. If no precision is specified in a constant specification, it defaults to the precision of the literal value (but not more than 6 digits).\n8.5.1.1. Dates\nTable 8.10 shows some possible inputs for the <code>date</code> type.\nTable 8.10. Date Input\n<table>\n<thead>\n<tr>\n<th>Example</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1999-01-08</td>\n<td>ISO 8601; January 8 in any mode (recommended format)</td>\n</tr>\n<tr>\n<td>January 8, 1999</td>\n<td>unambiguous in any <code>datestyle</code> input mode</td>\n</tr>\n<tr>\n<td>1/8/1999</td>\n<td>January 8 in <code>MDY</code> mode; August 1 in <code>DMY</code> mode</td>\n</tr>\n<tr>\n<td>1/18/1999</td>\n<td>January 18 in <code>MDY</code> mode; rejected in other modes</td>\n</tr>\n<tr>\n<td>01/02/03</td>\n<td>January 2, 2003 in <code>MDY</code> mode; February 1, 2003 in <code>DMY</code> mode; February 3, 2001 in <code>YMD</code> mode</td>\n</tr>\n<tr>\n<td>1999-Jan-08</td>\n<td>January 8 in any mode</td>\n</tr>\n<tr>\n<td>Jan-08-1999</td>\n<td>January 8 in any mode</td>\n</tr>\n<tr>\n<td>08-Jan-1999</td>\n<td>January 8 in any mode</td>\n</tr>\n<tr>\n<td>99-Jan-08</td>\n<td>January 8 in <code>YMD</code> mode, else error</td>\n</tr>\n<tr>\n<td>08-Jan-99</td>\n<td>January 8, except error in <code>YMD</code> mode</td>\n</tr>\n<tr>\n<td>Jan-08-99</td>\n<td>January 8, except error in <code>YMD</code> mode</td>\n</tr>\n<tr>\n<td>19990108</td>\n<td>ISO 8601; January 8, 1999 in any mode</td>\n</tr>\n<tr>\n<td>990108</td>\n<td>ISO 8601; January 8, 1999 in any mode</td>\n</tr>\n<tr>\n<td>1999.008</td>\n<td>year and day of year</td>\n</tr>\n<tr>\n<td>J2451187</td>\n<td>Julian date</td>\n</tr>\n<tr>\n<td>January 8, 99 BC</td>\n<td>year 99 BC</td>\n</tr>\n</tbody>\n</table>\n8.5.1.2. Times\nThe time-of-day types are <code>time [ (p) ] without time zone</code> and <code>time [ (p) ] with time zone</code>. <code>time</code> alone is equivalent to <code>time without time zone</code>.\nValid input for these types consists of a time of day followed by an optional time zone. (See Table 8.11 and Table 8.12.) If a time zone is specified in the input for <code>time without time zone</code>, it is silently ignored. You can also specify a date but it will be ignored, except when you use a time zone name that involves a daylight-savings rule, such as <code>America/New_York</code>. In this case specifying the date is required in order to determine whether standard or daylight-savings time applies. The appropriate time zone offset is recorded in the <code>time with time zone</code> value and is output as stored; it is not adjusted to the active time zone.\nTable 8.11. Time Input\n<table>\n<thead>\n<tr>\n<th>Example</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>04:05:06.789</code></td>\n<td>ISO 8601</td>\n</tr>\n<tr>\n<td><code>04:05:06</code></td>\n<td>ISO 8601</td>\n</tr>\n<tr>\n<td><code>04:05</code></td>\n<td>ISO 8601</td>\n</tr>\n<tr>\n<td><code>040506</code></td>\n<td>ISO 8601</td>\n</tr>\n<tr>\n<td><code>04:05 AM</code></td>\n<td>same as 04:05; AM does not affect value</td>\n</tr>\n<tr>\n<td><code>04:05 PM</code></td>\n<td>same as 16:05; input hour must be <= 12</td>\n</tr>\n<tr>\n<td><code>04:05:06.789-8</code></td>\n<td>ISO 8601, with time zone as UTC offset</td>\n</tr>\n<tr>\n<td><code>04:05:06-08:00</code></td>\n<td>ISO 8601, with time zone as UTC offset</td>\n</tr>\n<tr>\n<td><code>04:05-08:00</code></td>\n<td>ISO 8601, with time zone as UTC offset</td>\n</tr>\n<tr>\n<td><code>040506-08</code></td>\n<td>ISO 8601, with time zone as UTC offset</td>\n</tr>\n<tr>\n<td><code>040506+0730</code></td>\n<td>ISO 8601, with fractional-hour time zone as UTC offset</td>\n</tr>\n<tr>\n<td><code>040506+07:30:00</code></td>\n<td>UTC offset specified to seconds (not allowed in ISO 8601)</td>\n</tr>\n<tr>\n<td><code>04:05:06 PST</code></td>\n<td>time zone specified by abbreviation</td>\n</tr>\n<tr>\n<td><code>2003-04-12 04:05:06 America/New_York</code></td>\n<td>time zone specified by full name</td>\n</tr>\n</tbody>\n</table>\nTable 8.12. Time Zone Input\n<table>\n<thead>\n<tr>\n<th>Example</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>PST</code></td>\n<td>Abbreviation (for Pacific Standard Time)</td>\n</tr>\n<tr>\n<td><code>America/New_York</code></td>\n<td>Full time zone name</td>\n</tr>\n<tr>\n<td><code>PST8PDT</code></td>\n<td>POSIX-style time zone specification</td>\n</tr>\n<tr>\n<td><code>-8:00:00</code></td>\n<td>UTC offset for PST</td>\n</tr>\n<tr>\n<td><code>-8:00</code></td>\n<td>UTC offset for PST (ISO 8601 extended format)</td>\n</tr>\n<tr>\n<td><code>-800</code></td>\n<td>UTC offset for PST (ISO 8601 basic format)</td>\n</tr>\n<tr>\n<td><code>-8</code></td>\n<td>UTC offset for PST (ISO 8601 basic format)</td>\n</tr>\n<tr>\n<td><code>zulu</code></td>\n<td>Military abbreviation for UTC</td>\n</tr>\n<tr>\n<td><code>z</code></td>\n<td>Short form of <code>zulu</code> (also in ISO 8601)</td>\n</tr>\n</tbody>\n</table>\nRefer to Section 8.5.3 for more information on how to specify time zones.\n8.5.1.3. Time Stamps\nValid input for the time stamp types consists of the concatenation of a date and a time, followed by an optional time zone, followed by an optional <code>AD</code> or <code>BC</code>. (Alternatively, <code>AD</code>/<code>BC</code> can appear before the time zone, but this is not the preferred ordering.) Thus:\n<code>\n1999-01-08 04:05:06\n</code>\nand:\n<code>\n1999-01-08 04:05:06 -8:00\n</code>\nare valid values, which follow the ISO 8601 standard. In addition, the common format:\n<code>\nJanuary 8 04:05:06 1999 PST\n</code>\nis supported.\nThe SQL standard differentiates <code>timestamp without time zone</code> and <code>timestamp with time zone</code> literals by the presence of a \"+\" or \"-\" symbol and time zone offset after the time. Hence, according to the standard,\n<code>TIMESTAMP '2004-10-19 10:23:54'</code>\nis a <code>timestamp without time zone</code>, while\n<code>TIMESTAMP '2004-10-19 10:23:54+02'</code>\nis a <code>timestamp with time zone</code>. PostgreSQL never examines the content of a literal string before determining its type, and therefore will treat both of the above as <code>timestamp without time zone</code>. To ensure that a literal is treated as <code>timestamp with time zone</code>, give it the correct explicit type:\n<code>TIMESTAMP WITH TIME ZONE '2004-10-19 10:23:54+02'</code>\nIn a literal that has been determined to be <code>timestamp without time zone</code>, PostgreSQL will silently ignore any time zone indication. That is, the resulting value is derived from the date/time fields in the input value, and is not adjusted for time zone.\nFor <code>timestamp with time zone</code>, the internally stored value is always in UTC (Universal Coordinated Time, traditionally known as Greenwich Mean Time, GMT). An input value that has an explicit time zone specified is converted to UTC using the appropriate offset for that time zone. If no time zone is stated in the input string, then it is assumed to be in the time zone indicated by the system's TimeZone parameter, and is converted to UTC using the offset for the <code>timezone</code> zone.\nWhen a <code>timestamp with time zone</code> value is output, it is always converted from UTC to the current <code>timezone</code> zone, and displayed as local time in that zone. To see the time in another time zone, either change <code>timezone</code> or use the <code>AT TIME ZONE</code> construct (see Section 9.9.3).\nConversions between <code>timestamp without time zone</code> and <code>timestamp with time zone</code> normally assume that the <code>timestamp without time zone</code> value should be taken or given as <code>timezone</code> local time. A different time zone can be specified for the conversion using <code>AT TIME ZONE</code>.\n8.5.1.4. Special Values\nPostgreSQL supports several special date/time input values for convenience, as shown in Table 8.13. The values <code>infinity</code> and <code>-infinity</code> are specially represented inside the system and will be displayed unchanged; but the others are simply notational shorthands that will be converted to ordinary date/time values when read. (In particular, <code>now</code> and related strings are converted to a specific time value as soon as they are read.) All of these values need to be enclosed in single quotes when used as constants in SQL commands.\nTable 8.13. Special Date/Time Inputs\n<table>\n<thead>\n<tr>\n<th>Input String</th>\n<th>Valid Types</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>epoch</code></td>\n<td><code>date</code>, <code>timestamp</code></td>\n<td>1970-01-01 00:00:00+00 (Unix system time zero)</td>\n</tr>\n<tr>\n<td><code>infinity</code></td>\n<td><code>date</code>, <code>timestamp</code></td>\n<td>later than all other time stamps</td>\n</tr>\n<tr>\n<td><code>-infinity</code></td>\n<td><code>date</code>, <code>timestamp</code></td>\n<td>earlier than all other time stamps</td>\n</tr>\n<tr>\n<td><code>now</code></td>\n<td><code>date</code>, <code>time</code>, <code>timestamp</code></td>\n<td>current transaction's start time</td>\n</tr>\n<tr>\n<td><code>today</code></td>\n<td><code>date</code>, <code>timestamp</code></td>\n<td>midnight (<code>00:00</code>) today</td>\n</tr>\n<tr>\n<td><code>tomorrow</code></td>\n<td><code>date</code>, <code>timestamp</code></td>\n<td>midnight (<code>00:00</code>) tomorrow</td>\n</tr>\n<tr>\n<td><code>yesterday</code></td>\n<td><code>date</code>, <code>timestamp</code></td>\n<td>midnight (<code>00:00</code>) yesterday</td>\n</tr>\n<tr>\n<td><code>allballs</code></td>\n<td><code>time</code></td>\n<td>00:00:00.00 UTC</td>\n</tr>\n</tbody>\n</table>\nThe following SQL-compatible functions can also be used to obtain the current time value for the corresponding data type: <code>CURRENT_DATE</code>, <code>CURRENT_TIME</code>, <code>CURRENT_TIMESTAMP</code>, <code>LOCALTIME</code>, <code>LOCALTIMESTAMP</code>. (See Section 9.9.4.) Note that these are SQL functions and are not recognized in data input strings.\nCaution\nWhile the input strings <code>now</code>, <code>today</code>, <code>tomorrow</code>, and <code>yesterday</code> are fine to use in interactive SQL commands, they can have surprising behavior when the command is saved to be executed later, for example in prepared statements, views, and function definitions. The string can be converted to a specific time value that continues to be used long after it becomes stale. Use one of the SQL functions instead in such contexts. For example, <code>CURRENT_DATE + 1</code> is safer than <code>'tomorrow'::date</code>.\n; \nThe output format of the date/time types can be set to one of the four styles ISO 8601, SQL (Ingres), traditional POSTGRES (Unix date format), or German. The default is the ISO format. (The SQL standard requires the use of the ISO 8601 format. The name of the \"SQL\" output format is a historical accident.) Table 8.14 shows examples of each output style. The output of the <code>date</code> and <code>time</code> types is generally only the date or time part in accordance with the given examples. However, the POSTGRES style outputs date-only values in ISO format.\nTable 8.14. Date/Time Output Styles\n<table>\n<thead>\n<tr>\n<th>Style Specification</th>\n<th>Description</th>\n<th>Example</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>ISO</code></td>\n<td>ISO 8601, SQL standard</td>\n<td><code>1997-12-17 07:37:16-08</code></td>\n</tr>\n<tr>\n<td><code>SQL</code></td>\n<td>traditional style</td>\n<td><code>12/17/1997 07:37:16.00 PST</code></td>\n</tr>\n<tr>\n<td><code>Postgres</code></td>\n<td>original style</td>\n<td><code>Wed Dec 17 07:37:16 1997 PST</code></td>\n</tr>\n<tr>\n<td><code>German</code></td>\n<td>regional style</td>\n<td><code>17.12.1997 07:37:16.00 PST</code></td>\n</tr>\n</tbody>\n</table>\nNote\nISO 8601 specifies the use of uppercase letter <code>T</code> to separate the date and time. PostgreSQL accepts that format on input, but on output it uses a space rather than <code>T</code>, as shown above. This is for readability and for consistency with RFC 3339 as well as some other database systems.\nIn the SQL and POSTGRES styles, day appears before month if DMY field ordering has been specified, otherwise month appears before day. (See Section 8.5.1 for how this setting also affects interpretation of input values.) Table 8.15 shows examples.\nTable 8.15. Date Order Conventions\n<table>\n<thead>\n<tr>\n<th><code>datestyle</code> Setting</th>\n<th>Input Ordering</th>\n<th>Example Output</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>SQL, DMY</code></td>\n<td><code>day</code>/<code>month</code>/<code>year</code></td>\n<td><code>17/12/1997 15:37:16.00 CET</code></td>\n</tr>\n<tr>\n<td><code>SQL, MDY</code></td>\n<td><code>month</code>/<code>day</code>/<code>year</code></td>\n<td><code>12/17/1997 07:37:16.00 PST</code></td>\n</tr>\n<tr>\n<td><code>Postgres, DMY</code></td>\n<td><code>day</code>/<code>month</code>/<code>year</code></td>\n<td><code>Wed 17 Dec 07:37:16 1997 PST</code></td>\n</tr>\n</tbody>\n</table>\nIn the ISO style, the time zone is always shown as a signed numeric offset from UTC, with positive sign used for zones east of Greenwich. The offset will be shown as <code>hh</code> (hours only) if it is an integral number of hours, else as <code>hh</code>:<code>mm</code> if it is an integral number of minutes, else as <code>hh</code>:<code>mm</code>:<code>ss</code>. (The third case is not possible with any modern time zone standard, but it can appear when working with timestamps that predate the adoption of standardized time zones.) In the other date styles, the time zone is shown as an alphabetic abbreviation if one is in common use in the current zone. Otherwise it appears as a signed numeric offset in ISO 8601 basic format (<code>hh</code> or <code>hhmm</code>).\nThe date/time style can be selected by the user using the <code>SET datestyle</code> command, the DateStyle parameter in the <code>postgresql.conf</code> configuration file, or the <code>PGDATESTYLE</code> environment variable on the server or client.\nThe formatting function <code>to_char</code> (see Section 9.8) is also available as a more flexible way to format date/time output.\n; \nTime zones, and time-zone conventions, are influenced by political decisions, not just earth geometry. Time zones around the world became somewhat standardized during the 1900s, but continue to be prone to arbitrary changes, particularly with respect to daylight-savings rules. PostgreSQL uses the widely-used IANA (Olson) time zone database for information about historical time zone rules. For times in the future, the assumption is that the latest known rules for a given time zone will continue to be observed indefinitely far into the future.\nPostgreSQL endeavors to be compatible with the SQL standard definitions for typical usage. However, the SQL standard has an odd mix of date and time types and capabilities. Two obvious problems are:\nAlthough the <code>date</code> type cannot have an associated time zone, the <code>time</code> type can. Time zones in the real world have little meaning unless associated with a date as well as a time, since the offset can vary through the year with daylight-saving time boundaries.\nThe default time zone is specified as a constant numeric offset from UTC. It is therefore impossible to adapt to daylight-saving time when doing date/time arithmetic across DST boundaries.\nTo address these difficulties, we recommend using date/time types that contain both date and time when using time zones. We do not recommend using the type <code>time with time zone</code> (though it is supported by PostgreSQL for legacy applications and for compliance with the SQL standard). PostgreSQL assumes your local time zone for any type containing only date or time.\nAll timezone-aware dates and times are stored internally in UTC. They are converted to local time in the zone specified by the TimeZone configuration parameter before being displayed to the client.\nPostgreSQL allows you to specify time zones in three different forms:\nA full time zone name, for example <code>America/New_York</code>. The recognized time zone names are listed in the <code>pg_timezone_names</code> view (see Section 51.92). PostgreSQL uses the widely-used IANA time zone data for this purpose, so the same time zone names are also recognized by other software.\nA time zone abbreviation, for example <code>PST</code>. Such a specification merely defines a particular offset from UTC, in contrast to full time zone names which can imply a set of daylight savings transition rules as well. The recognized abbreviations are listed in the <code>pg_timezone_abbrevs</code> view (see Section 51.91). You cannot set the configuration parameters TimeZone or log_timezone to a time zone abbreviation, but you can use abbreviations in date/time input values and with the <code>AT TIME ZONE</code> operator.\nIn addition to the timezone names and abbreviations, PostgreSQL will accept POSIX-style time zone specifications, as described in Section B.5. This option is not normally preferable to using a named time zone, but it may be necessary if no suitable IANA time zone entry is available.\nIn short, this is the difference between abbreviations and full names: abbreviations represent a specific offset from UTC, whereas many of the full names imply a local daylight-savings time rule, and so have two possible UTC offsets. As an example, <code>2014-06-04 12:00 America/New_York</code> represents noon local time in New York, which for this particular date was Eastern Daylight Time (UTC-4). So <code>2014-06-04 12:00 EDT</code> specifies that same time instant. But <code>2014-06-04 12:00 EST</code> specifies noon Eastern Standard Time (UTC-5), regardless of whether daylight savings was nominally in effect on that date.\nTo complicate matters, some jurisdictions have used the same timezone abbreviation to mean different UTC offsets at different times; for example, in Moscow <code>MSK</code> has meant UTC+3 in some years and UTC+4 in others. PostgreSQL interprets such abbreviations according to whatever they meant (or had most recently meant) on the specified date; but, as with the <code>EST</code> example above, this is not necessarily the same as local civil time on that date.\nIn all cases, timezone names and abbreviations are recognized case-insensitively. (This is a change from PostgreSQL versions prior to 8.2, which were case-sensitive in some contexts but not others.)\nNeither timezone names nor abbreviations are hard-wired into the server; they are obtained from configuration files stored under <code>.../share/timezone/</code> and <code>.../share/timezonesets/</code> of the installation directory (see Section B.4).\nThe TimeZone configuration parameter can be set in the file <code>postgresql.conf</code>, or in any of the other standard ways described in Chapter 19. There are also some special ways to set it:\nThe SQL command <code>SET TIME ZONE</code> sets the time zone for the session. This is an alternative spelling of <code>SET TIMEZONE TO</code> with a more SQL-spec-compatible syntax.\nThe <code>PGTZ</code> environment variable is used by libpq clients to send a <code>SET TIME ZONE</code> command to the server upon connection.\n; Internally <code>interval</code> values are stored as months, days, and microseconds. This is done because the number of days in a month varies, and a day can have 23 or 25 hours if a daylight savings time adjustment is involved. The months and days fields are integers while the microseconds field can store fractional seconds. Because intervals are usually created from constant strings or <code>timestamp</code> subtraction, this storage method works well in most cases, but can cause unexpected results:",
        "example": [],
        "link": [
            "https://www.postgresql.org/docs/12/datatype-datetime.html"
        ]
    },
    {
        "type": "type",
        "keyword": "time with time zone",
        "tree": "(constdatetime TIME (opt_timezone WITH TIME ZONE))",
        "description": [
            "time with time zone",
            "timetz",
            "time ( 6 ) with time zone"
        ],
        "detail": "[DESCRIPTION]: time with time zone; timetz; time ( 6 ) with time zone<sep>[STORAGE SIZE]: 12 bytes<sep>[LOW VALUE]: 00:00:00+1559<sep>[HIGH VALUE]: 24:00:00-1559<sep>[COMPENSATE]: <code>time</code>, <code>timestamp</code>, and <code>interval</code> accept an optional precision value <code>p</code> which specifies the number of fractional digits retained in the seconds field. By default, there is no explicit bound on precision. The allowed range of <code>p</code> is from 0 to 6.; The type <code>time with time zone</code> is defined by the SQL standard, but the definition exhibits properties which lead to questionable usefulness. In most cases, a combination of <code>date</code>, <code>time</code>, <code>timestamp without time zone</code>, and <code>timestamp with time zone</code> should provide a complete range of date/time functionality required by any application.; \nDate and time input is accepted in almost any reasonable format, including ISO 8601, SQL-compatible, traditional POSTGRES, and others. For some formats, ordering of day, month, and year in date input is ambiguous and there is support for specifying the expected ordering of these fields. Set the DateStyle parameter to <code>MDY</code> to select month-day-year interpretation, <code>DMY</code> to select day-month-year interpretation, or <code>YMD</code> to select year-month-day interpretation.\nPostgreSQL is more flexible in handling date/time input than the SQL standard requires. See Appendix B for the exact parsing rules of date/time input and for the recognized text fields including months, days of the week, and time zones.\nRemember that any date or time literal input needs to be enclosed in single quotes, like text strings. Refer to Section 4.1.2.7 for more information. SQL requires the following syntax\n<code>\n<code>type</code> [ (<code>p</code>) ] '<code>value</code>'\n</code>\nwhere <code>p</code> is an optional precision specification giving the number of fractional digits in the seconds field. Precision can be specified for <code>time</code>, <code>timestamp</code>, and <code>interval</code> types, and can range from 0 to 6. If no precision is specified in a constant specification, it defaults to the precision of the literal value (but not more than 6 digits).\n8.5.1.1. Dates\nTable 8.10 shows some possible inputs for the <code>date</code> type.\nTable 8.10. Date Input\n<table>\n<thead>\n<tr>\n<th>Example</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1999-01-08</td>\n<td>ISO 8601; January 8 in any mode (recommended format)</td>\n</tr>\n<tr>\n<td>January 8, 1999</td>\n<td>unambiguous in any <code>datestyle</code> input mode</td>\n</tr>\n<tr>\n<td>1/8/1999</td>\n<td>January 8 in <code>MDY</code> mode; August 1 in <code>DMY</code> mode</td>\n</tr>\n<tr>\n<td>1/18/1999</td>\n<td>January 18 in <code>MDY</code> mode; rejected in other modes</td>\n</tr>\n<tr>\n<td>01/02/03</td>\n<td>January 2, 2003 in <code>MDY</code> mode; February 1, 2003 in <code>DMY</code> mode; February 3, 2001 in <code>YMD</code> mode</td>\n</tr>\n<tr>\n<td>1999-Jan-08</td>\n<td>January 8 in any mode</td>\n</tr>\n<tr>\n<td>Jan-08-1999</td>\n<td>January 8 in any mode</td>\n</tr>\n<tr>\n<td>08-Jan-1999</td>\n<td>January 8 in any mode</td>\n</tr>\n<tr>\n<td>99-Jan-08</td>\n<td>January 8 in <code>YMD</code> mode, else error</td>\n</tr>\n<tr>\n<td>08-Jan-99</td>\n<td>January 8, except error in <code>YMD</code> mode</td>\n</tr>\n<tr>\n<td>Jan-08-99</td>\n<td>January 8, except error in <code>YMD</code> mode</td>\n</tr>\n<tr>\n<td>19990108</td>\n<td>ISO 8601; January 8, 1999 in any mode</td>\n</tr>\n<tr>\n<td>990108</td>\n<td>ISO 8601; January 8, 1999 in any mode</td>\n</tr>\n<tr>\n<td>1999.008</td>\n<td>year and day of year</td>\n</tr>\n<tr>\n<td>J2451187</td>\n<td>Julian date</td>\n</tr>\n<tr>\n<td>January 8, 99 BC</td>\n<td>year 99 BC</td>\n</tr>\n</tbody>\n</table>\n8.5.1.2. Times\nThe time-of-day types are <code>time [ (p) ] without time zone</code> and <code>time [ (p) ] with time zone</code>. <code>time</code> alone is equivalent to <code>time without time zone</code>.\nValid input for these types consists of a time of day followed by an optional time zone. (See Table 8.11 and Table 8.12.) If a time zone is specified in the input for <code>time without time zone</code>, it is silently ignored. You can also specify a date but it will be ignored, except when you use a time zone name that involves a daylight-savings rule, such as <code>America/New_York</code>. In this case specifying the date is required in order to determine whether standard or daylight-savings time applies. The appropriate time zone offset is recorded in the <code>time with time zone</code> value and is output as stored; it is not adjusted to the active time zone.\nTable 8.11. Time Input\n<table>\n<thead>\n<tr>\n<th>Example</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>04:05:06.789</code></td>\n<td>ISO 8601</td>\n</tr>\n<tr>\n<td><code>04:05:06</code></td>\n<td>ISO 8601</td>\n</tr>\n<tr>\n<td><code>04:05</code></td>\n<td>ISO 8601</td>\n</tr>\n<tr>\n<td><code>040506</code></td>\n<td>ISO 8601</td>\n</tr>\n<tr>\n<td><code>04:05 AM</code></td>\n<td>same as 04:05; AM does not affect value</td>\n</tr>\n<tr>\n<td><code>04:05 PM</code></td>\n<td>same as 16:05; input hour must be <= 12</td>\n</tr>\n<tr>\n<td><code>04:05:06.789-8</code></td>\n<td>ISO 8601, with time zone as UTC offset</td>\n</tr>\n<tr>\n<td><code>04:05:06-08:00</code></td>\n<td>ISO 8601, with time zone as UTC offset</td>\n</tr>\n<tr>\n<td><code>04:05-08:00</code></td>\n<td>ISO 8601, with time zone as UTC offset</td>\n</tr>\n<tr>\n<td><code>040506-08</code></td>\n<td>ISO 8601, with time zone as UTC offset</td>\n</tr>\n<tr>\n<td><code>040506+0730</code></td>\n<td>ISO 8601, with fractional-hour time zone as UTC offset</td>\n</tr>\n<tr>\n<td><code>040506+07:30:00</code></td>\n<td>UTC offset specified to seconds (not allowed in ISO 8601)</td>\n</tr>\n<tr>\n<td><code>04:05:06 PST</code></td>\n<td>time zone specified by abbreviation</td>\n</tr>\n<tr>\n<td><code>2003-04-12 04:05:06 America/New_York</code></td>\n<td>time zone specified by full name</td>\n</tr>\n</tbody>\n</table>\nTable 8.12. Time Zone Input\n<table>\n<thead>\n<tr>\n<th>Example</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>PST</code></td>\n<td>Abbreviation (for Pacific Standard Time)</td>\n</tr>\n<tr>\n<td><code>America/New_York</code></td>\n<td>Full time zone name</td>\n</tr>\n<tr>\n<td><code>PST8PDT</code></td>\n<td>POSIX-style time zone specification</td>\n</tr>\n<tr>\n<td><code>-8:00:00</code></td>\n<td>UTC offset for PST</td>\n</tr>\n<tr>\n<td><code>-8:00</code></td>\n<td>UTC offset for PST (ISO 8601 extended format)</td>\n</tr>\n<tr>\n<td><code>-800</code></td>\n<td>UTC offset for PST (ISO 8601 basic format)</td>\n</tr>\n<tr>\n<td><code>-8</code></td>\n<td>UTC offset for PST (ISO 8601 basic format)</td>\n</tr>\n<tr>\n<td><code>zulu</code></td>\n<td>Military abbreviation for UTC</td>\n</tr>\n<tr>\n<td><code>z</code></td>\n<td>Short form of <code>zulu</code> (also in ISO 8601)</td>\n</tr>\n</tbody>\n</table>\nRefer to Section 8.5.3 for more information on how to specify time zones.\n8.5.1.3. Time Stamps\nValid input for the time stamp types consists of the concatenation of a date and a time, followed by an optional time zone, followed by an optional <code>AD</code> or <code>BC</code>. (Alternatively, <code>AD</code>/<code>BC</code> can appear before the time zone, but this is not the preferred ordering.) Thus:\n<code>\n1999-01-08 04:05:06\n</code>\nand:\n<code>\n1999-01-08 04:05:06 -8:00\n</code>\nare valid values, which follow the ISO 8601 standard. In addition, the common format:\n<code>\nJanuary 8 04:05:06 1999 PST\n</code>\nis supported.\nThe SQL standard differentiates <code>timestamp without time zone</code> and <code>timestamp with time zone</code> literals by the presence of a \"+\" or \"-\" symbol and time zone offset after the time. Hence, according to the standard,\n<code>TIMESTAMP '2004-10-19 10:23:54'</code>\nis a <code>timestamp without time zone</code>, while\n<code>TIMESTAMP '2004-10-19 10:23:54+02'</code>\nis a <code>timestamp with time zone</code>. PostgreSQL never examines the content of a literal string before determining its type, and therefore will treat both of the above as <code>timestamp without time zone</code>. To ensure that a literal is treated as <code>timestamp with time zone</code>, give it the correct explicit type:\n<code>TIMESTAMP WITH TIME ZONE '2004-10-19 10:23:54+02'</code>\nIn a literal that has been determined to be <code>timestamp without time zone</code>, PostgreSQL will silently ignore any time zone indication. That is, the resulting value is derived from the date/time fields in the input value, and is not adjusted for time zone.\nFor <code>timestamp with time zone</code>, the internally stored value is always in UTC (Universal Coordinated Time, traditionally known as Greenwich Mean Time, GMT). An input value that has an explicit time zone specified is converted to UTC using the appropriate offset for that time zone. If no time zone is stated in the input string, then it is assumed to be in the time zone indicated by the system's TimeZone parameter, and is converted to UTC using the offset for the <code>timezone</code> zone.\nWhen a <code>timestamp with time zone</code> value is output, it is always converted from UTC to the current <code>timezone</code> zone, and displayed as local time in that zone. To see the time in another time zone, either change <code>timezone</code> or use the <code>AT TIME ZONE</code> construct (see Section 9.9.3).\nConversions between <code>timestamp without time zone</code> and <code>timestamp with time zone</code> normally assume that the <code>timestamp without time zone</code> value should be taken or given as <code>timezone</code> local time. A different time zone can be specified for the conversion using <code>AT TIME ZONE</code>.\n8.5.1.4. Special Values\nPostgreSQL supports several special date/time input values for convenience, as shown in Table 8.13. The values <code>infinity</code> and <code>-infinity</code> are specially represented inside the system and will be displayed unchanged; but the others are simply notational shorthands that will be converted to ordinary date/time values when read. (In particular, <code>now</code> and related strings are converted to a specific time value as soon as they are read.) All of these values need to be enclosed in single quotes when used as constants in SQL commands.\nTable 8.13. Special Date/Time Inputs\n<table>\n<thead>\n<tr>\n<th>Input String</th>\n<th>Valid Types</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>epoch</code></td>\n<td><code>date</code>, <code>timestamp</code></td>\n<td>1970-01-01 00:00:00+00 (Unix system time zero)</td>\n</tr>\n<tr>\n<td><code>infinity</code></td>\n<td><code>date</code>, <code>timestamp</code></td>\n<td>later than all other time stamps</td>\n</tr>\n<tr>\n<td><code>-infinity</code></td>\n<td><code>date</code>, <code>timestamp</code></td>\n<td>earlier than all other time stamps</td>\n</tr>\n<tr>\n<td><code>now</code></td>\n<td><code>date</code>, <code>time</code>, <code>timestamp</code></td>\n<td>current transaction's start time</td>\n</tr>\n<tr>\n<td><code>today</code></td>\n<td><code>date</code>, <code>timestamp</code></td>\n<td>midnight (<code>00:00</code>) today</td>\n</tr>\n<tr>\n<td><code>tomorrow</code></td>\n<td><code>date</code>, <code>timestamp</code></td>\n<td>midnight (<code>00:00</code>) tomorrow</td>\n</tr>\n<tr>\n<td><code>yesterday</code></td>\n<td><code>date</code>, <code>timestamp</code></td>\n<td>midnight (<code>00:00</code>) yesterday</td>\n</tr>\n<tr>\n<td><code>allballs</code></td>\n<td><code>time</code></td>\n<td>00:00:00.00 UTC</td>\n</tr>\n</tbody>\n</table>\nThe following SQL-compatible functions can also be used to obtain the current time value for the corresponding data type: <code>CURRENT_DATE</code>, <code>CURRENT_TIME</code>, <code>CURRENT_TIMESTAMP</code>, <code>LOCALTIME</code>, <code>LOCALTIMESTAMP</code>. (See Section 9.9.4.) Note that these are SQL functions and are not recognized in data input strings.\nCaution\nWhile the input strings <code>now</code>, <code>today</code>, <code>tomorrow</code>, and <code>yesterday</code> are fine to use in interactive SQL commands, they can have surprising behavior when the command is saved to be executed later, for example in prepared statements, views, and function definitions. The string can be converted to a specific time value that continues to be used long after it becomes stale. Use one of the SQL functions instead in such contexts. For example, <code>CURRENT_DATE + 1</code> is safer than <code>'tomorrow'::date</code>.\n; \nThe output format of the date/time types can be set to one of the four styles ISO 8601, SQL (Ingres), traditional POSTGRES (Unix date format), or German. The default is the ISO format. (The SQL standard requires the use of the ISO 8601 format. The name of the \"SQL\" output format is a historical accident.) Table 8.14 shows examples of each output style. The output of the <code>date</code> and <code>time</code> types is generally only the date or time part in accordance with the given examples. However, the POSTGRES style outputs date-only values in ISO format.\nTable 8.14. Date/Time Output Styles\n<table>\n<thead>\n<tr>\n<th>Style Specification</th>\n<th>Description</th>\n<th>Example</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>ISO</code></td>\n<td>ISO 8601, SQL standard</td>\n<td><code>1997-12-17 07:37:16-08</code></td>\n</tr>\n<tr>\n<td><code>SQL</code></td>\n<td>traditional style</td>\n<td><code>12/17/1997 07:37:16.00 PST</code></td>\n</tr>\n<tr>\n<td><code>Postgres</code></td>\n<td>original style</td>\n<td><code>Wed Dec 17 07:37:16 1997 PST</code></td>\n</tr>\n<tr>\n<td><code>German</code></td>\n<td>regional style</td>\n<td><code>17.12.1997 07:37:16.00 PST</code></td>\n</tr>\n</tbody>\n</table>\nNote\nISO 8601 specifies the use of uppercase letter <code>T</code> to separate the date and time. PostgreSQL accepts that format on input, but on output it uses a space rather than <code>T</code>, as shown above. This is for readability and for consistency with RFC 3339 as well as some other database systems.\nIn the SQL and POSTGRES styles, day appears before month if DMY field ordering has been specified, otherwise month appears before day. (See Section 8.5.1 for how this setting also affects interpretation of input values.) Table 8.15 shows examples.\nTable 8.15. Date Order Conventions\n<table>\n<thead>\n<tr>\n<th><code>datestyle</code> Setting</th>\n<th>Input Ordering</th>\n<th>Example Output</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>SQL, DMY</code></td>\n<td><code>day</code>/<code>month</code>/<code>year</code></td>\n<td><code>17/12/1997 15:37:16.00 CET</code></td>\n</tr>\n<tr>\n<td><code>SQL, MDY</code></td>\n<td><code>month</code>/<code>day</code>/<code>year</code></td>\n<td><code>12/17/1997 07:37:16.00 PST</code></td>\n</tr>\n<tr>\n<td><code>Postgres, DMY</code></td>\n<td><code>day</code>/<code>month</code>/<code>year</code></td>\n<td><code>Wed 17 Dec 07:37:16 1997 PST</code></td>\n</tr>\n</tbody>\n</table>\nIn the ISO style, the time zone is always shown as a signed numeric offset from UTC, with positive sign used for zones east of Greenwich. The offset will be shown as <code>hh</code> (hours only) if it is an integral number of hours, else as <code>hh</code>:<code>mm</code> if it is an integral number of minutes, else as <code>hh</code>:<code>mm</code>:<code>ss</code>. (The third case is not possible with any modern time zone standard, but it can appear when working with timestamps that predate the adoption of standardized time zones.) In the other date styles, the time zone is shown as an alphabetic abbreviation if one is in common use in the current zone. Otherwise it appears as a signed numeric offset in ISO 8601 basic format (<code>hh</code> or <code>hhmm</code>).\nThe date/time style can be selected by the user using the <code>SET datestyle</code> command, the DateStyle parameter in the <code>postgresql.conf</code> configuration file, or the <code>PGDATESTYLE</code> environment variable on the server or client.\nThe formatting function <code>to_char</code> (see Section 9.8) is also available as a more flexible way to format date/time output.\n; \nTime zones, and time-zone conventions, are influenced by political decisions, not just earth geometry. Time zones around the world became somewhat standardized during the 1900s, but continue to be prone to arbitrary changes, particularly with respect to daylight-savings rules. PostgreSQL uses the widely-used IANA (Olson) time zone database for information about historical time zone rules. For times in the future, the assumption is that the latest known rules for a given time zone will continue to be observed indefinitely far into the future.\nPostgreSQL endeavors to be compatible with the SQL standard definitions for typical usage. However, the SQL standard has an odd mix of date and time types and capabilities. Two obvious problems are:\nAlthough the <code>date</code> type cannot have an associated time zone, the <code>time</code> type can. Time zones in the real world have little meaning unless associated with a date as well as a time, since the offset can vary through the year with daylight-saving time boundaries.\nThe default time zone is specified as a constant numeric offset from UTC. It is therefore impossible to adapt to daylight-saving time when doing date/time arithmetic across DST boundaries.\nTo address these difficulties, we recommend using date/time types that contain both date and time when using time zones. We do not recommend using the type <code>time with time zone</code> (though it is supported by PostgreSQL for legacy applications and for compliance with the SQL standard). PostgreSQL assumes your local time zone for any type containing only date or time.\nAll timezone-aware dates and times are stored internally in UTC. They are converted to local time in the zone specified by the TimeZone configuration parameter before being displayed to the client.\nPostgreSQL allows you to specify time zones in three different forms:\nA full time zone name, for example <code>America/New_York</code>. The recognized time zone names are listed in the <code>pg_timezone_names</code> view (see Section 51.92). PostgreSQL uses the widely-used IANA time zone data for this purpose, so the same time zone names are also recognized by other software.\nA time zone abbreviation, for example <code>PST</code>. Such a specification merely defines a particular offset from UTC, in contrast to full time zone names which can imply a set of daylight savings transition rules as well. The recognized abbreviations are listed in the <code>pg_timezone_abbrevs</code> view (see Section 51.91). You cannot set the configuration parameters TimeZone or log_timezone to a time zone abbreviation, but you can use abbreviations in date/time input values and with the <code>AT TIME ZONE</code> operator.\nIn addition to the timezone names and abbreviations, PostgreSQL will accept POSIX-style time zone specifications, as described in Section B.5. This option is not normally preferable to using a named time zone, but it may be necessary if no suitable IANA time zone entry is available.\nIn short, this is the difference between abbreviations and full names: abbreviations represent a specific offset from UTC, whereas many of the full names imply a local daylight-savings time rule, and so have two possible UTC offsets. As an example, <code>2014-06-04 12:00 America/New_York</code> represents noon local time in New York, which for this particular date was Eastern Daylight Time (UTC-4). So <code>2014-06-04 12:00 EDT</code> specifies that same time instant. But <code>2014-06-04 12:00 EST</code> specifies noon Eastern Standard Time (UTC-5), regardless of whether daylight savings was nominally in effect on that date.\nTo complicate matters, some jurisdictions have used the same timezone abbreviation to mean different UTC offsets at different times; for example, in Moscow <code>MSK</code> has meant UTC+3 in some years and UTC+4 in others. PostgreSQL interprets such abbreviations according to whatever they meant (or had most recently meant) on the specified date; but, as with the <code>EST</code> example above, this is not necessarily the same as local civil time on that date.\nIn all cases, timezone names and abbreviations are recognized case-insensitively. (This is a change from PostgreSQL versions prior to 8.2, which were case-sensitive in some contexts but not others.)\nNeither timezone names nor abbreviations are hard-wired into the server; they are obtained from configuration files stored under <code>.../share/timezone/</code> and <code>.../share/timezonesets/</code> of the installation directory (see Section B.4).\nThe TimeZone configuration parameter can be set in the file <code>postgresql.conf</code>, or in any of the other standard ways described in Chapter 19. There are also some special ways to set it:\nThe SQL command <code>SET TIME ZONE</code> sets the time zone for the session. This is an alternative spelling of <code>SET TIMEZONE TO</code> with a more SQL-spec-compatible syntax.\nThe <code>PGTZ</code> environment variable is used by libpq clients to send a <code>SET TIME ZONE</code> command to the server upon connection.\n; Internally <code>interval</code> values are stored as months, days, and microseconds. This is done because the number of days in a month varies, and a day can have 23 or 25 hours if a daylight savings time adjustment is involved. The months and days fields are integers while the microseconds field can store fractional seconds. Because intervals are usually created from constant strings or <code>timestamp</code> subtraction, this storage method works well in most cases, but can cause unexpected results:",
        "example": [],
        "link": [
            "https://www.postgresql.org/docs/12/datatype-datetime.html"
        ]
    },
    {
        "type": "type",
        "keyword": "timetz",
        "tree": "(identifier TIMETZ)",
        "description": [
            "time with time zone",
            "timetz",
            "time ( 6 ) with time zone"
        ],
        "detail": "[DESCRIPTION]: time with time zone; timetz; time ( 6 ) with time zone<sep>[STORAGE SIZE]: 12 bytes<sep>[LOW VALUE]: 00:00:00+1559<sep>[HIGH VALUE]: 24:00:00-1559<sep>[COMPENSATE]: <code>time</code>, <code>timestamp</code>, and <code>interval</code> accept an optional precision value <code>p</code> which specifies the number of fractional digits retained in the seconds field. By default, there is no explicit bound on precision. The allowed range of <code>p</code> is from 0 to 6.; The type <code>time with time zone</code> is defined by the SQL standard, but the definition exhibits properties which lead to questionable usefulness. In most cases, a combination of <code>date</code>, <code>time</code>, <code>timestamp without time zone</code>, and <code>timestamp with time zone</code> should provide a complete range of date/time functionality required by any application.; \nDate and time input is accepted in almost any reasonable format, including ISO 8601, SQL-compatible, traditional POSTGRES, and others. For some formats, ordering of day, month, and year in date input is ambiguous and there is support for specifying the expected ordering of these fields. Set the DateStyle parameter to <code>MDY</code> to select month-day-year interpretation, <code>DMY</code> to select day-month-year interpretation, or <code>YMD</code> to select year-month-day interpretation.\nPostgreSQL is more flexible in handling date/time input than the SQL standard requires. See Appendix B for the exact parsing rules of date/time input and for the recognized text fields including months, days of the week, and time zones.\nRemember that any date or time literal input needs to be enclosed in single quotes, like text strings. Refer to Section 4.1.2.7 for more information. SQL requires the following syntax\n<code>\n<code>type</code> [ (<code>p</code>) ] '<code>value</code>'\n</code>\nwhere <code>p</code> is an optional precision specification giving the number of fractional digits in the seconds field. Precision can be specified for <code>time</code>, <code>timestamp</code>, and <code>interval</code> types, and can range from 0 to 6. If no precision is specified in a constant specification, it defaults to the precision of the literal value (but not more than 6 digits).\n8.5.1.1. Dates\nTable 8.10 shows some possible inputs for the <code>date</code> type.\nTable 8.10. Date Input\n<table>\n<thead>\n<tr>\n<th>Example</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1999-01-08</td>\n<td>ISO 8601; January 8 in any mode (recommended format)</td>\n</tr>\n<tr>\n<td>January 8, 1999</td>\n<td>unambiguous in any <code>datestyle</code> input mode</td>\n</tr>\n<tr>\n<td>1/8/1999</td>\n<td>January 8 in <code>MDY</code> mode; August 1 in <code>DMY</code> mode</td>\n</tr>\n<tr>\n<td>1/18/1999</td>\n<td>January 18 in <code>MDY</code> mode; rejected in other modes</td>\n</tr>\n<tr>\n<td>01/02/03</td>\n<td>January 2, 2003 in <code>MDY</code> mode; February 1, 2003 in <code>DMY</code> mode; February 3, 2001 in <code>YMD</code> mode</td>\n</tr>\n<tr>\n<td>1999-Jan-08</td>\n<td>January 8 in any mode</td>\n</tr>\n<tr>\n<td>Jan-08-1999</td>\n<td>January 8 in any mode</td>\n</tr>\n<tr>\n<td>08-Jan-1999</td>\n<td>January 8 in any mode</td>\n</tr>\n<tr>\n<td>99-Jan-08</td>\n<td>January 8 in <code>YMD</code> mode, else error</td>\n</tr>\n<tr>\n<td>08-Jan-99</td>\n<td>January 8, except error in <code>YMD</code> mode</td>\n</tr>\n<tr>\n<td>Jan-08-99</td>\n<td>January 8, except error in <code>YMD</code> mode</td>\n</tr>\n<tr>\n<td>19990108</td>\n<td>ISO 8601; January 8, 1999 in any mode</td>\n</tr>\n<tr>\n<td>990108</td>\n<td>ISO 8601; January 8, 1999 in any mode</td>\n</tr>\n<tr>\n<td>1999.008</td>\n<td>year and day of year</td>\n</tr>\n<tr>\n<td>J2451187</td>\n<td>Julian date</td>\n</tr>\n<tr>\n<td>January 8, 99 BC</td>\n<td>year 99 BC</td>\n</tr>\n</tbody>\n</table>\n8.5.1.2. Times\nThe time-of-day types are <code>time [ (p) ] without time zone</code> and <code>time [ (p) ] with time zone</code>. <code>time</code> alone is equivalent to <code>time without time zone</code>.\nValid input for these types consists of a time of day followed by an optional time zone. (See Table 8.11 and Table 8.12.) If a time zone is specified in the input for <code>time without time zone</code>, it is silently ignored. You can also specify a date but it will be ignored, except when you use a time zone name that involves a daylight-savings rule, such as <code>America/New_York</code>. In this case specifying the date is required in order to determine whether standard or daylight-savings time applies. The appropriate time zone offset is recorded in the <code>time with time zone</code> value and is output as stored; it is not adjusted to the active time zone.\nTable 8.11. Time Input\n<table>\n<thead>\n<tr>\n<th>Example</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>04:05:06.789</code></td>\n<td>ISO 8601</td>\n</tr>\n<tr>\n<td><code>04:05:06</code></td>\n<td>ISO 8601</td>\n</tr>\n<tr>\n<td><code>04:05</code></td>\n<td>ISO 8601</td>\n</tr>\n<tr>\n<td><code>040506</code></td>\n<td>ISO 8601</td>\n</tr>\n<tr>\n<td><code>04:05 AM</code></td>\n<td>same as 04:05; AM does not affect value</td>\n</tr>\n<tr>\n<td><code>04:05 PM</code></td>\n<td>same as 16:05; input hour must be <= 12</td>\n</tr>\n<tr>\n<td><code>04:05:06.789-8</code></td>\n<td>ISO 8601, with time zone as UTC offset</td>\n</tr>\n<tr>\n<td><code>04:05:06-08:00</code></td>\n<td>ISO 8601, with time zone as UTC offset</td>\n</tr>\n<tr>\n<td><code>04:05-08:00</code></td>\n<td>ISO 8601, with time zone as UTC offset</td>\n</tr>\n<tr>\n<td><code>040506-08</code></td>\n<td>ISO 8601, with time zone as UTC offset</td>\n</tr>\n<tr>\n<td><code>040506+0730</code></td>\n<td>ISO 8601, with fractional-hour time zone as UTC offset</td>\n</tr>\n<tr>\n<td><code>040506+07:30:00</code></td>\n<td>UTC offset specified to seconds (not allowed in ISO 8601)</td>\n</tr>\n<tr>\n<td><code>04:05:06 PST</code></td>\n<td>time zone specified by abbreviation</td>\n</tr>\n<tr>\n<td><code>2003-04-12 04:05:06 America/New_York</code></td>\n<td>time zone specified by full name</td>\n</tr>\n</tbody>\n</table>\nTable 8.12. Time Zone Input\n<table>\n<thead>\n<tr>\n<th>Example</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>PST</code></td>\n<td>Abbreviation (for Pacific Standard Time)</td>\n</tr>\n<tr>\n<td><code>America/New_York</code></td>\n<td>Full time zone name</td>\n</tr>\n<tr>\n<td><code>PST8PDT</code></td>\n<td>POSIX-style time zone specification</td>\n</tr>\n<tr>\n<td><code>-8:00:00</code></td>\n<td>UTC offset for PST</td>\n</tr>\n<tr>\n<td><code>-8:00</code></td>\n<td>UTC offset for PST (ISO 8601 extended format)</td>\n</tr>\n<tr>\n<td><code>-800</code></td>\n<td>UTC offset for PST (ISO 8601 basic format)</td>\n</tr>\n<tr>\n<td><code>-8</code></td>\n<td>UTC offset for PST (ISO 8601 basic format)</td>\n</tr>\n<tr>\n<td><code>zulu</code></td>\n<td>Military abbreviation for UTC</td>\n</tr>\n<tr>\n<td><code>z</code></td>\n<td>Short form of <code>zulu</code> (also in ISO 8601)</td>\n</tr>\n</tbody>\n</table>\nRefer to Section 8.5.3 for more information on how to specify time zones.\n8.5.1.3. Time Stamps\nValid input for the time stamp types consists of the concatenation of a date and a time, followed by an optional time zone, followed by an optional <code>AD</code> or <code>BC</code>. (Alternatively, <code>AD</code>/<code>BC</code> can appear before the time zone, but this is not the preferred ordering.) Thus:\n<code>\n1999-01-08 04:05:06\n</code>\nand:\n<code>\n1999-01-08 04:05:06 -8:00\n</code>\nare valid values, which follow the ISO 8601 standard. In addition, the common format:\n<code>\nJanuary 8 04:05:06 1999 PST\n</code>\nis supported.\nThe SQL standard differentiates <code>timestamp without time zone</code> and <code>timestamp with time zone</code> literals by the presence of a \"+\" or \"-\" symbol and time zone offset after the time. Hence, according to the standard,\n<code>TIMESTAMP '2004-10-19 10:23:54'</code>\nis a <code>timestamp without time zone</code>, while\n<code>TIMESTAMP '2004-10-19 10:23:54+02'</code>\nis a <code>timestamp with time zone</code>. PostgreSQL never examines the content of a literal string before determining its type, and therefore will treat both of the above as <code>timestamp without time zone</code>. To ensure that a literal is treated as <code>timestamp with time zone</code>, give it the correct explicit type:\n<code>TIMESTAMP WITH TIME ZONE '2004-10-19 10:23:54+02'</code>\nIn a literal that has been determined to be <code>timestamp without time zone</code>, PostgreSQL will silently ignore any time zone indication. That is, the resulting value is derived from the date/time fields in the input value, and is not adjusted for time zone.\nFor <code>timestamp with time zone</code>, the internally stored value is always in UTC (Universal Coordinated Time, traditionally known as Greenwich Mean Time, GMT). An input value that has an explicit time zone specified is converted to UTC using the appropriate offset for that time zone. If no time zone is stated in the input string, then it is assumed to be in the time zone indicated by the system's TimeZone parameter, and is converted to UTC using the offset for the <code>timezone</code> zone.\nWhen a <code>timestamp with time zone</code> value is output, it is always converted from UTC to the current <code>timezone</code> zone, and displayed as local time in that zone. To see the time in another time zone, either change <code>timezone</code> or use the <code>AT TIME ZONE</code> construct (see Section 9.9.3).\nConversions between <code>timestamp without time zone</code> and <code>timestamp with time zone</code> normally assume that the <code>timestamp without time zone</code> value should be taken or given as <code>timezone</code> local time. A different time zone can be specified for the conversion using <code>AT TIME ZONE</code>.\n8.5.1.4. Special Values\nPostgreSQL supports several special date/time input values for convenience, as shown in Table 8.13. The values <code>infinity</code> and <code>-infinity</code> are specially represented inside the system and will be displayed unchanged; but the others are simply notational shorthands that will be converted to ordinary date/time values when read. (In particular, <code>now</code> and related strings are converted to a specific time value as soon as they are read.) All of these values need to be enclosed in single quotes when used as constants in SQL commands.\nTable 8.13. Special Date/Time Inputs\n<table>\n<thead>\n<tr>\n<th>Input String</th>\n<th>Valid Types</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>epoch</code></td>\n<td><code>date</code>, <code>timestamp</code></td>\n<td>1970-01-01 00:00:00+00 (Unix system time zero)</td>\n</tr>\n<tr>\n<td><code>infinity</code></td>\n<td><code>date</code>, <code>timestamp</code></td>\n<td>later than all other time stamps</td>\n</tr>\n<tr>\n<td><code>-infinity</code></td>\n<td><code>date</code>, <code>timestamp</code></td>\n<td>earlier than all other time stamps</td>\n</tr>\n<tr>\n<td><code>now</code></td>\n<td><code>date</code>, <code>time</code>, <code>timestamp</code></td>\n<td>current transaction's start time</td>\n</tr>\n<tr>\n<td><code>today</code></td>\n<td><code>date</code>, <code>timestamp</code></td>\n<td>midnight (<code>00:00</code>) today</td>\n</tr>\n<tr>\n<td><code>tomorrow</code></td>\n<td><code>date</code>, <code>timestamp</code></td>\n<td>midnight (<code>00:00</code>) tomorrow</td>\n</tr>\n<tr>\n<td><code>yesterday</code></td>\n<td><code>date</code>, <code>timestamp</code></td>\n<td>midnight (<code>00:00</code>) yesterday</td>\n</tr>\n<tr>\n<td><code>allballs</code></td>\n<td><code>time</code></td>\n<td>00:00:00.00 UTC</td>\n</tr>\n</tbody>\n</table>\nThe following SQL-compatible functions can also be used to obtain the current time value for the corresponding data type: <code>CURRENT_DATE</code>, <code>CURRENT_TIME</code>, <code>CURRENT_TIMESTAMP</code>, <code>LOCALTIME</code>, <code>LOCALTIMESTAMP</code>. (See Section 9.9.4.) Note that these are SQL functions and are not recognized in data input strings.\nCaution\nWhile the input strings <code>now</code>, <code>today</code>, <code>tomorrow</code>, and <code>yesterday</code> are fine to use in interactive SQL commands, they can have surprising behavior when the command is saved to be executed later, for example in prepared statements, views, and function definitions. The string can be converted to a specific time value that continues to be used long after it becomes stale. Use one of the SQL functions instead in such contexts. For example, <code>CURRENT_DATE + 1</code> is safer than <code>'tomorrow'::date</code>.\n; \nThe output format of the date/time types can be set to one of the four styles ISO 8601, SQL (Ingres), traditional POSTGRES (Unix date format), or German. The default is the ISO format. (The SQL standard requires the use of the ISO 8601 format. The name of the \"SQL\" output format is a historical accident.) Table 8.14 shows examples of each output style. The output of the <code>date</code> and <code>time</code> types is generally only the date or time part in accordance with the given examples. However, the POSTGRES style outputs date-only values in ISO format.\nTable 8.14. Date/Time Output Styles\n<table>\n<thead>\n<tr>\n<th>Style Specification</th>\n<th>Description</th>\n<th>Example</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>ISO</code></td>\n<td>ISO 8601, SQL standard</td>\n<td><code>1997-12-17 07:37:16-08</code></td>\n</tr>\n<tr>\n<td><code>SQL</code></td>\n<td>traditional style</td>\n<td><code>12/17/1997 07:37:16.00 PST</code></td>\n</tr>\n<tr>\n<td><code>Postgres</code></td>\n<td>original style</td>\n<td><code>Wed Dec 17 07:37:16 1997 PST</code></td>\n</tr>\n<tr>\n<td><code>German</code></td>\n<td>regional style</td>\n<td><code>17.12.1997 07:37:16.00 PST</code></td>\n</tr>\n</tbody>\n</table>\nNote\nISO 8601 specifies the use of uppercase letter <code>T</code> to separate the date and time. PostgreSQL accepts that format on input, but on output it uses a space rather than <code>T</code>, as shown above. This is for readability and for consistency with RFC 3339 as well as some other database systems.\nIn the SQL and POSTGRES styles, day appears before month if DMY field ordering has been specified, otherwise month appears before day. (See Section 8.5.1 for how this setting also affects interpretation of input values.) Table 8.15 shows examples.\nTable 8.15. Date Order Conventions\n<table>\n<thead>\n<tr>\n<th><code>datestyle</code> Setting</th>\n<th>Input Ordering</th>\n<th>Example Output</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>SQL, DMY</code></td>\n<td><code>day</code>/<code>month</code>/<code>year</code></td>\n<td><code>17/12/1997 15:37:16.00 CET</code></td>\n</tr>\n<tr>\n<td><code>SQL, MDY</code></td>\n<td><code>month</code>/<code>day</code>/<code>year</code></td>\n<td><code>12/17/1997 07:37:16.00 PST</code></td>\n</tr>\n<tr>\n<td><code>Postgres, DMY</code></td>\n<td><code>day</code>/<code>month</code>/<code>year</code></td>\n<td><code>Wed 17 Dec 07:37:16 1997 PST</code></td>\n</tr>\n</tbody>\n</table>\nIn the ISO style, the time zone is always shown as a signed numeric offset from UTC, with positive sign used for zones east of Greenwich. The offset will be shown as <code>hh</code> (hours only) if it is an integral number of hours, else as <code>hh</code>:<code>mm</code> if it is an integral number of minutes, else as <code>hh</code>:<code>mm</code>:<code>ss</code>. (The third case is not possible with any modern time zone standard, but it can appear when working with timestamps that predate the adoption of standardized time zones.) In the other date styles, the time zone is shown as an alphabetic abbreviation if one is in common use in the current zone. Otherwise it appears as a signed numeric offset in ISO 8601 basic format (<code>hh</code> or <code>hhmm</code>).\nThe date/time style can be selected by the user using the <code>SET datestyle</code> command, the DateStyle parameter in the <code>postgresql.conf</code> configuration file, or the <code>PGDATESTYLE</code> environment variable on the server or client.\nThe formatting function <code>to_char</code> (see Section 9.8) is also available as a more flexible way to format date/time output.\n; \nTime zones, and time-zone conventions, are influenced by political decisions, not just earth geometry. Time zones around the world became somewhat standardized during the 1900s, but continue to be prone to arbitrary changes, particularly with respect to daylight-savings rules. PostgreSQL uses the widely-used IANA (Olson) time zone database for information about historical time zone rules. For times in the future, the assumption is that the latest known rules for a given time zone will continue to be observed indefinitely far into the future.\nPostgreSQL endeavors to be compatible with the SQL standard definitions for typical usage. However, the SQL standard has an odd mix of date and time types and capabilities. Two obvious problems are:\nAlthough the <code>date</code> type cannot have an associated time zone, the <code>time</code> type can. Time zones in the real world have little meaning unless associated with a date as well as a time, since the offset can vary through the year with daylight-saving time boundaries.\nThe default time zone is specified as a constant numeric offset from UTC. It is therefore impossible to adapt to daylight-saving time when doing date/time arithmetic across DST boundaries.\nTo address these difficulties, we recommend using date/time types that contain both date and time when using time zones. We do not recommend using the type <code>time with time zone</code> (though it is supported by PostgreSQL for legacy applications and for compliance with the SQL standard). PostgreSQL assumes your local time zone for any type containing only date or time.\nAll timezone-aware dates and times are stored internally in UTC. They are converted to local time in the zone specified by the TimeZone configuration parameter before being displayed to the client.\nPostgreSQL allows you to specify time zones in three different forms:\nA full time zone name, for example <code>America/New_York</code>. The recognized time zone names are listed in the <code>pg_timezone_names</code> view (see Section 51.92). PostgreSQL uses the widely-used IANA time zone data for this purpose, so the same time zone names are also recognized by other software.\nA time zone abbreviation, for example <code>PST</code>. Such a specification merely defines a particular offset from UTC, in contrast to full time zone names which can imply a set of daylight savings transition rules as well. The recognized abbreviations are listed in the <code>pg_timezone_abbrevs</code> view (see Section 51.91). You cannot set the configuration parameters TimeZone or log_timezone to a time zone abbreviation, but you can use abbreviations in date/time input values and with the <code>AT TIME ZONE</code> operator.\nIn addition to the timezone names and abbreviations, PostgreSQL will accept POSIX-style time zone specifications, as described in Section B.5. This option is not normally preferable to using a named time zone, but it may be necessary if no suitable IANA time zone entry is available.\nIn short, this is the difference between abbreviations and full names: abbreviations represent a specific offset from UTC, whereas many of the full names imply a local daylight-savings time rule, and so have two possible UTC offsets. As an example, <code>2014-06-04 12:00 America/New_York</code> represents noon local time in New York, which for this particular date was Eastern Daylight Time (UTC-4). So <code>2014-06-04 12:00 EDT</code> specifies that same time instant. But <code>2014-06-04 12:00 EST</code> specifies noon Eastern Standard Time (UTC-5), regardless of whether daylight savings was nominally in effect on that date.\nTo complicate matters, some jurisdictions have used the same timezone abbreviation to mean different UTC offsets at different times; for example, in Moscow <code>MSK</code> has meant UTC+3 in some years and UTC+4 in others. PostgreSQL interprets such abbreviations according to whatever they meant (or had most recently meant) on the specified date; but, as with the <code>EST</code> example above, this is not necessarily the same as local civil time on that date.\nIn all cases, timezone names and abbreviations are recognized case-insensitively. (This is a change from PostgreSQL versions prior to 8.2, which were case-sensitive in some contexts but not others.)\nNeither timezone names nor abbreviations are hard-wired into the server; they are obtained from configuration files stored under <code>.../share/timezone/</code> and <code>.../share/timezonesets/</code> of the installation directory (see Section B.4).\nThe TimeZone configuration parameter can be set in the file <code>postgresql.conf</code>, or in any of the other standard ways described in Chapter 19. There are also some special ways to set it:\nThe SQL command <code>SET TIME ZONE</code> sets the time zone for the session. This is an alternative spelling of <code>SET TIMEZONE TO</code> with a more SQL-spec-compatible syntax.\nThe <code>PGTZ</code> environment variable is used by libpq clients to send a <code>SET TIME ZONE</code> command to the server upon connection.\n; Internally <code>interval</code> values are stored as months, days, and microseconds. This is done because the number of days in a month varies, and a day can have 23 or 25 hours if a daylight savings time adjustment is involved. The months and days fields are integers while the microseconds field can store fractional seconds. Because intervals are usually created from constant strings or <code>timestamp</code> subtraction, this storage method works well in most cases, but can cause unexpected results:",
        "example": [],
        "link": [
            "https://www.postgresql.org/docs/12/datatype-datetime.html"
        ]
    },
    {
        "type": "type",
        "keyword": "time ( p ) with time zone",
        "tree": "(constdatetime TIME ( ) (opt_timezone WITH TIME ZONE))",
        "description": [
            "time with time zone",
            "timetz",
            "time ( 6 ) with time zone"
        ],
        "detail": "[DESCRIPTION]: time with time zone; timetz; time ( 6 ) with time zone<sep>[STORAGE SIZE]: 12 bytes<sep>[LOW VALUE]: 00:00:00+1559<sep>[HIGH VALUE]: 24:00:00-1559<sep>[COMPENSATE]: <code>time</code>, <code>timestamp</code>, and <code>interval</code> accept an optional precision value <code>p</code> which specifies the number of fractional digits retained in the seconds field. By default, there is no explicit bound on precision. The allowed range of <code>p</code> is from 0 to 6.; The type <code>time with time zone</code> is defined by the SQL standard, but the definition exhibits properties which lead to questionable usefulness. In most cases, a combination of <code>date</code>, <code>time</code>, <code>timestamp without time zone</code>, and <code>timestamp with time zone</code> should provide a complete range of date/time functionality required by any application.; \nDate and time input is accepted in almost any reasonable format, including ISO 8601, SQL-compatible, traditional POSTGRES, and others. For some formats, ordering of day, month, and year in date input is ambiguous and there is support for specifying the expected ordering of these fields. Set the DateStyle parameter to <code>MDY</code> to select month-day-year interpretation, <code>DMY</code> to select day-month-year interpretation, or <code>YMD</code> to select year-month-day interpretation.\nPostgreSQL is more flexible in handling date/time input than the SQL standard requires. See Appendix B for the exact parsing rules of date/time input and for the recognized text fields including months, days of the week, and time zones.\nRemember that any date or time literal input needs to be enclosed in single quotes, like text strings. Refer to Section 4.1.2.7 for more information. SQL requires the following syntax\n<code>\n<code>type</code> [ (<code>p</code>) ] '<code>value</code>'\n</code>\nwhere <code>p</code> is an optional precision specification giving the number of fractional digits in the seconds field. Precision can be specified for <code>time</code>, <code>timestamp</code>, and <code>interval</code> types, and can range from 0 to 6. If no precision is specified in a constant specification, it defaults to the precision of the literal value (but not more than 6 digits).\n8.5.1.1. Dates\nTable 8.10 shows some possible inputs for the <code>date</code> type.\nTable 8.10. Date Input\n<table>\n<thead>\n<tr>\n<th>Example</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1999-01-08</td>\n<td>ISO 8601; January 8 in any mode (recommended format)</td>\n</tr>\n<tr>\n<td>January 8, 1999</td>\n<td>unambiguous in any <code>datestyle</code> input mode</td>\n</tr>\n<tr>\n<td>1/8/1999</td>\n<td>January 8 in <code>MDY</code> mode; August 1 in <code>DMY</code> mode</td>\n</tr>\n<tr>\n<td>1/18/1999</td>\n<td>January 18 in <code>MDY</code> mode; rejected in other modes</td>\n</tr>\n<tr>\n<td>01/02/03</td>\n<td>January 2, 2003 in <code>MDY</code> mode; February 1, 2003 in <code>DMY</code> mode; February 3, 2001 in <code>YMD</code> mode</td>\n</tr>\n<tr>\n<td>1999-Jan-08</td>\n<td>January 8 in any mode</td>\n</tr>\n<tr>\n<td>Jan-08-1999</td>\n<td>January 8 in any mode</td>\n</tr>\n<tr>\n<td>08-Jan-1999</td>\n<td>January 8 in any mode</td>\n</tr>\n<tr>\n<td>99-Jan-08</td>\n<td>January 8 in <code>YMD</code> mode, else error</td>\n</tr>\n<tr>\n<td>08-Jan-99</td>\n<td>January 8, except error in <code>YMD</code> mode</td>\n</tr>\n<tr>\n<td>Jan-08-99</td>\n<td>January 8, except error in <code>YMD</code> mode</td>\n</tr>\n<tr>\n<td>19990108</td>\n<td>ISO 8601; January 8, 1999 in any mode</td>\n</tr>\n<tr>\n<td>990108</td>\n<td>ISO 8601; January 8, 1999 in any mode</td>\n</tr>\n<tr>\n<td>1999.008</td>\n<td>year and day of year</td>\n</tr>\n<tr>\n<td>J2451187</td>\n<td>Julian date</td>\n</tr>\n<tr>\n<td>January 8, 99 BC</td>\n<td>year 99 BC</td>\n</tr>\n</tbody>\n</table>\n8.5.1.2. Times\nThe time-of-day types are <code>time [ (p) ] without time zone</code> and <code>time [ (p) ] with time zone</code>. <code>time</code> alone is equivalent to <code>time without time zone</code>.\nValid input for these types consists of a time of day followed by an optional time zone. (See Table 8.11 and Table 8.12.) If a time zone is specified in the input for <code>time without time zone</code>, it is silently ignored. You can also specify a date but it will be ignored, except when you use a time zone name that involves a daylight-savings rule, such as <code>America/New_York</code>. In this case specifying the date is required in order to determine whether standard or daylight-savings time applies. The appropriate time zone offset is recorded in the <code>time with time zone</code> value and is output as stored; it is not adjusted to the active time zone.\nTable 8.11. Time Input\n<table>\n<thead>\n<tr>\n<th>Example</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>04:05:06.789</code></td>\n<td>ISO 8601</td>\n</tr>\n<tr>\n<td><code>04:05:06</code></td>\n<td>ISO 8601</td>\n</tr>\n<tr>\n<td><code>04:05</code></td>\n<td>ISO 8601</td>\n</tr>\n<tr>\n<td><code>040506</code></td>\n<td>ISO 8601</td>\n</tr>\n<tr>\n<td><code>04:05 AM</code></td>\n<td>same as 04:05; AM does not affect value</td>\n</tr>\n<tr>\n<td><code>04:05 PM</code></td>\n<td>same as 16:05; input hour must be <= 12</td>\n</tr>\n<tr>\n<td><code>04:05:06.789-8</code></td>\n<td>ISO 8601, with time zone as UTC offset</td>\n</tr>\n<tr>\n<td><code>04:05:06-08:00</code></td>\n<td>ISO 8601, with time zone as UTC offset</td>\n</tr>\n<tr>\n<td><code>04:05-08:00</code></td>\n<td>ISO 8601, with time zone as UTC offset</td>\n</tr>\n<tr>\n<td><code>040506-08</code></td>\n<td>ISO 8601, with time zone as UTC offset</td>\n</tr>\n<tr>\n<td><code>040506+0730</code></td>\n<td>ISO 8601, with fractional-hour time zone as UTC offset</td>\n</tr>\n<tr>\n<td><code>040506+07:30:00</code></td>\n<td>UTC offset specified to seconds (not allowed in ISO 8601)</td>\n</tr>\n<tr>\n<td><code>04:05:06 PST</code></td>\n<td>time zone specified by abbreviation</td>\n</tr>\n<tr>\n<td><code>2003-04-12 04:05:06 America/New_York</code></td>\n<td>time zone specified by full name</td>\n</tr>\n</tbody>\n</table>\nTable 8.12. Time Zone Input\n<table>\n<thead>\n<tr>\n<th>Example</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>PST</code></td>\n<td>Abbreviation (for Pacific Standard Time)</td>\n</tr>\n<tr>\n<td><code>America/New_York</code></td>\n<td>Full time zone name</td>\n</tr>\n<tr>\n<td><code>PST8PDT</code></td>\n<td>POSIX-style time zone specification</td>\n</tr>\n<tr>\n<td><code>-8:00:00</code></td>\n<td>UTC offset for PST</td>\n</tr>\n<tr>\n<td><code>-8:00</code></td>\n<td>UTC offset for PST (ISO 8601 extended format)</td>\n</tr>\n<tr>\n<td><code>-800</code></td>\n<td>UTC offset for PST (ISO 8601 basic format)</td>\n</tr>\n<tr>\n<td><code>-8</code></td>\n<td>UTC offset for PST (ISO 8601 basic format)</td>\n</tr>\n<tr>\n<td><code>zulu</code></td>\n<td>Military abbreviation for UTC</td>\n</tr>\n<tr>\n<td><code>z</code></td>\n<td>Short form of <code>zulu</code> (also in ISO 8601)</td>\n</tr>\n</tbody>\n</table>\nRefer to Section 8.5.3 for more information on how to specify time zones.\n8.5.1.3. Time Stamps\nValid input for the time stamp types consists of the concatenation of a date and a time, followed by an optional time zone, followed by an optional <code>AD</code> or <code>BC</code>. (Alternatively, <code>AD</code>/<code>BC</code> can appear before the time zone, but this is not the preferred ordering.) Thus:\n<code>\n1999-01-08 04:05:06\n</code>\nand:\n<code>\n1999-01-08 04:05:06 -8:00\n</code>\nare valid values, which follow the ISO 8601 standard. In addition, the common format:\n<code>\nJanuary 8 04:05:06 1999 PST\n</code>\nis supported.\nThe SQL standard differentiates <code>timestamp without time zone</code> and <code>timestamp with time zone</code> literals by the presence of a \"+\" or \"-\" symbol and time zone offset after the time. Hence, according to the standard,\n<code>TIMESTAMP '2004-10-19 10:23:54'</code>\nis a <code>timestamp without time zone</code>, while\n<code>TIMESTAMP '2004-10-19 10:23:54+02'</code>\nis a <code>timestamp with time zone</code>. PostgreSQL never examines the content of a literal string before determining its type, and therefore will treat both of the above as <code>timestamp without time zone</code>. To ensure that a literal is treated as <code>timestamp with time zone</code>, give it the correct explicit type:\n<code>TIMESTAMP WITH TIME ZONE '2004-10-19 10:23:54+02'</code>\nIn a literal that has been determined to be <code>timestamp without time zone</code>, PostgreSQL will silently ignore any time zone indication. That is, the resulting value is derived from the date/time fields in the input value, and is not adjusted for time zone.\nFor <code>timestamp with time zone</code>, the internally stored value is always in UTC (Universal Coordinated Time, traditionally known as Greenwich Mean Time, GMT). An input value that has an explicit time zone specified is converted to UTC using the appropriate offset for that time zone. If no time zone is stated in the input string, then it is assumed to be in the time zone indicated by the system's TimeZone parameter, and is converted to UTC using the offset for the <code>timezone</code> zone.\nWhen a <code>timestamp with time zone</code> value is output, it is always converted from UTC to the current <code>timezone</code> zone, and displayed as local time in that zone. To see the time in another time zone, either change <code>timezone</code> or use the <code>AT TIME ZONE</code> construct (see Section 9.9.3).\nConversions between <code>timestamp without time zone</code> and <code>timestamp with time zone</code> normally assume that the <code>timestamp without time zone</code> value should be taken or given as <code>timezone</code> local time. A different time zone can be specified for the conversion using <code>AT TIME ZONE</code>.\n8.5.1.4. Special Values\nPostgreSQL supports several special date/time input values for convenience, as shown in Table 8.13. The values <code>infinity</code> and <code>-infinity</code> are specially represented inside the system and will be displayed unchanged; but the others are simply notational shorthands that will be converted to ordinary date/time values when read. (In particular, <code>now</code> and related strings are converted to a specific time value as soon as they are read.) All of these values need to be enclosed in single quotes when used as constants in SQL commands.\nTable 8.13. Special Date/Time Inputs\n<table>\n<thead>\n<tr>\n<th>Input String</th>\n<th>Valid Types</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>epoch</code></td>\n<td><code>date</code>, <code>timestamp</code></td>\n<td>1970-01-01 00:00:00+00 (Unix system time zero)</td>\n</tr>\n<tr>\n<td><code>infinity</code></td>\n<td><code>date</code>, <code>timestamp</code></td>\n<td>later than all other time stamps</td>\n</tr>\n<tr>\n<td><code>-infinity</code></td>\n<td><code>date</code>, <code>timestamp</code></td>\n<td>earlier than all other time stamps</td>\n</tr>\n<tr>\n<td><code>now</code></td>\n<td><code>date</code>, <code>time</code>, <code>timestamp</code></td>\n<td>current transaction's start time</td>\n</tr>\n<tr>\n<td><code>today</code></td>\n<td><code>date</code>, <code>timestamp</code></td>\n<td>midnight (<code>00:00</code>) today</td>\n</tr>\n<tr>\n<td><code>tomorrow</code></td>\n<td><code>date</code>, <code>timestamp</code></td>\n<td>midnight (<code>00:00</code>) tomorrow</td>\n</tr>\n<tr>\n<td><code>yesterday</code></td>\n<td><code>date</code>, <code>timestamp</code></td>\n<td>midnight (<code>00:00</code>) yesterday</td>\n</tr>\n<tr>\n<td><code>allballs</code></td>\n<td><code>time</code></td>\n<td>00:00:00.00 UTC</td>\n</tr>\n</tbody>\n</table>\nThe following SQL-compatible functions can also be used to obtain the current time value for the corresponding data type: <code>CURRENT_DATE</code>, <code>CURRENT_TIME</code>, <code>CURRENT_TIMESTAMP</code>, <code>LOCALTIME</code>, <code>LOCALTIMESTAMP</code>. (See Section 9.9.4.) Note that these are SQL functions and are not recognized in data input strings.\nCaution\nWhile the input strings <code>now</code>, <code>today</code>, <code>tomorrow</code>, and <code>yesterday</code> are fine to use in interactive SQL commands, they can have surprising behavior when the command is saved to be executed later, for example in prepared statements, views, and function definitions. The string can be converted to a specific time value that continues to be used long after it becomes stale. Use one of the SQL functions instead in such contexts. For example, <code>CURRENT_DATE + 1</code> is safer than <code>'tomorrow'::date</code>.\n; \nThe output format of the date/time types can be set to one of the four styles ISO 8601, SQL (Ingres), traditional POSTGRES (Unix date format), or German. The default is the ISO format. (The SQL standard requires the use of the ISO 8601 format. The name of the \"SQL\" output format is a historical accident.) Table 8.14 shows examples of each output style. The output of the <code>date</code> and <code>time</code> types is generally only the date or time part in accordance with the given examples. However, the POSTGRES style outputs date-only values in ISO format.\nTable 8.14. Date/Time Output Styles\n<table>\n<thead>\n<tr>\n<th>Style Specification</th>\n<th>Description</th>\n<th>Example</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>ISO</code></td>\n<td>ISO 8601, SQL standard</td>\n<td><code>1997-12-17 07:37:16-08</code></td>\n</tr>\n<tr>\n<td><code>SQL</code></td>\n<td>traditional style</td>\n<td><code>12/17/1997 07:37:16.00 PST</code></td>\n</tr>\n<tr>\n<td><code>Postgres</code></td>\n<td>original style</td>\n<td><code>Wed Dec 17 07:37:16 1997 PST</code></td>\n</tr>\n<tr>\n<td><code>German</code></td>\n<td>regional style</td>\n<td><code>17.12.1997 07:37:16.00 PST</code></td>\n</tr>\n</tbody>\n</table>\nNote\nISO 8601 specifies the use of uppercase letter <code>T</code> to separate the date and time. PostgreSQL accepts that format on input, but on output it uses a space rather than <code>T</code>, as shown above. This is for readability and for consistency with RFC 3339 as well as some other database systems.\nIn the SQL and POSTGRES styles, day appears before month if DMY field ordering has been specified, otherwise month appears before day. (See Section 8.5.1 for how this setting also affects interpretation of input values.) Table 8.15 shows examples.\nTable 8.15. Date Order Conventions\n<table>\n<thead>\n<tr>\n<th><code>datestyle</code> Setting</th>\n<th>Input Ordering</th>\n<th>Example Output</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>SQL, DMY</code></td>\n<td><code>day</code>/<code>month</code>/<code>year</code></td>\n<td><code>17/12/1997 15:37:16.00 CET</code></td>\n</tr>\n<tr>\n<td><code>SQL, MDY</code></td>\n<td><code>month</code>/<code>day</code>/<code>year</code></td>\n<td><code>12/17/1997 07:37:16.00 PST</code></td>\n</tr>\n<tr>\n<td><code>Postgres, DMY</code></td>\n<td><code>day</code>/<code>month</code>/<code>year</code></td>\n<td><code>Wed 17 Dec 07:37:16 1997 PST</code></td>\n</tr>\n</tbody>\n</table>\nIn the ISO style, the time zone is always shown as a signed numeric offset from UTC, with positive sign used for zones east of Greenwich. The offset will be shown as <code>hh</code> (hours only) if it is an integral number of hours, else as <code>hh</code>:<code>mm</code> if it is an integral number of minutes, else as <code>hh</code>:<code>mm</code>:<code>ss</code>. (The third case is not possible with any modern time zone standard, but it can appear when working with timestamps that predate the adoption of standardized time zones.) In the other date styles, the time zone is shown as an alphabetic abbreviation if one is in common use in the current zone. Otherwise it appears as a signed numeric offset in ISO 8601 basic format (<code>hh</code> or <code>hhmm</code>).\nThe date/time style can be selected by the user using the <code>SET datestyle</code> command, the DateStyle parameter in the <code>postgresql.conf</code> configuration file, or the <code>PGDATESTYLE</code> environment variable on the server or client.\nThe formatting function <code>to_char</code> (see Section 9.8) is also available as a more flexible way to format date/time output.\n; \nTime zones, and time-zone conventions, are influenced by political decisions, not just earth geometry. Time zones around the world became somewhat standardized during the 1900s, but continue to be prone to arbitrary changes, particularly with respect to daylight-savings rules. PostgreSQL uses the widely-used IANA (Olson) time zone database for information about historical time zone rules. For times in the future, the assumption is that the latest known rules for a given time zone will continue to be observed indefinitely far into the future.\nPostgreSQL endeavors to be compatible with the SQL standard definitions for typical usage. However, the SQL standard has an odd mix of date and time types and capabilities. Two obvious problems are:\nAlthough the <code>date</code> type cannot have an associated time zone, the <code>time</code> type can. Time zones in the real world have little meaning unless associated with a date as well as a time, since the offset can vary through the year with daylight-saving time boundaries.\nThe default time zone is specified as a constant numeric offset from UTC. It is therefore impossible to adapt to daylight-saving time when doing date/time arithmetic across DST boundaries.\nTo address these difficulties, we recommend using date/time types that contain both date and time when using time zones. We do not recommend using the type <code>time with time zone</code> (though it is supported by PostgreSQL for legacy applications and for compliance with the SQL standard). PostgreSQL assumes your local time zone for any type containing only date or time.\nAll timezone-aware dates and times are stored internally in UTC. They are converted to local time in the zone specified by the TimeZone configuration parameter before being displayed to the client.\nPostgreSQL allows you to specify time zones in three different forms:\nA full time zone name, for example <code>America/New_York</code>. The recognized time zone names are listed in the <code>pg_timezone_names</code> view (see Section 51.92). PostgreSQL uses the widely-used IANA time zone data for this purpose, so the same time zone names are also recognized by other software.\nA time zone abbreviation, for example <code>PST</code>. Such a specification merely defines a particular offset from UTC, in contrast to full time zone names which can imply a set of daylight savings transition rules as well. The recognized abbreviations are listed in the <code>pg_timezone_abbrevs</code> view (see Section 51.91). You cannot set the configuration parameters TimeZone or log_timezone to a time zone abbreviation, but you can use abbreviations in date/time input values and with the <code>AT TIME ZONE</code> operator.\nIn addition to the timezone names and abbreviations, PostgreSQL will accept POSIX-style time zone specifications, as described in Section B.5. This option is not normally preferable to using a named time zone, but it may be necessary if no suitable IANA time zone entry is available.\nIn short, this is the difference between abbreviations and full names: abbreviations represent a specific offset from UTC, whereas many of the full names imply a local daylight-savings time rule, and so have two possible UTC offsets. As an example, <code>2014-06-04 12:00 America/New_York</code> represents noon local time in New York, which for this particular date was Eastern Daylight Time (UTC-4). So <code>2014-06-04 12:00 EDT</code> specifies that same time instant. But <code>2014-06-04 12:00 EST</code> specifies noon Eastern Standard Time (UTC-5), regardless of whether daylight savings was nominally in effect on that date.\nTo complicate matters, some jurisdictions have used the same timezone abbreviation to mean different UTC offsets at different times; for example, in Moscow <code>MSK</code> has meant UTC+3 in some years and UTC+4 in others. PostgreSQL interprets such abbreviations according to whatever they meant (or had most recently meant) on the specified date; but, as with the <code>EST</code> example above, this is not necessarily the same as local civil time on that date.\nIn all cases, timezone names and abbreviations are recognized case-insensitively. (This is a change from PostgreSQL versions prior to 8.2, which were case-sensitive in some contexts but not others.)\nNeither timezone names nor abbreviations are hard-wired into the server; they are obtained from configuration files stored under <code>.../share/timezone/</code> and <code>.../share/timezonesets/</code> of the installation directory (see Section B.4).\nThe TimeZone configuration parameter can be set in the file <code>postgresql.conf</code>, or in any of the other standard ways described in Chapter 19. There are also some special ways to set it:\nThe SQL command <code>SET TIME ZONE</code> sets the time zone for the session. This is an alternative spelling of <code>SET TIMEZONE TO</code> with a more SQL-spec-compatible syntax.\nThe <code>PGTZ</code> environment variable is used by libpq clients to send a <code>SET TIME ZONE</code> command to the server upon connection.\n; Internally <code>interval</code> values are stored as months, days, and microseconds. This is done because the number of days in a month varies, and a day can have 23 or 25 hours if a daylight savings time adjustment is involved. The months and days fields are integers while the microseconds field can store fractional seconds. Because intervals are usually created from constant strings or <code>timestamp</code> subtraction, this storage method works well in most cases, but can cause unexpected results:",
        "example": [],
        "link": [
            "https://www.postgresql.org/docs/12/datatype-datetime.html"
        ]
    },
    {
        "type": "type",
        "keyword": "date",
        "tree": "(identifier DATE)",
        "description": [
            "calendar date (year, month, day)",
            "date (no time of day)"
        ],
        "detail": "[DESCRIPTION]: calendar date (year, month, day); date (no time of day)<sep>[STORAGE SIZE]: 4 bytes<sep>[LOW VALUE]: 4713 BC<sep>[HIGH VALUE]: 5874897 AD<sep>[COMPENSATE]: The type <code>time with time zone</code> is defined by the SQL standard, but the definition exhibits properties which lead to questionable usefulness. In most cases, a combination of <code>date</code>, <code>time</code>, <code>timestamp without time zone</code>, and <code>timestamp with time zone</code> should provide a complete range of date/time functionality required by any application.; \nDate and time input is accepted in almost any reasonable format, including ISO 8601, SQL-compatible, traditional POSTGRES, and others. For some formats, ordering of day, month, and year in date input is ambiguous and there is support for specifying the expected ordering of these fields. Set the DateStyle parameter to <code>MDY</code> to select month-day-year interpretation, <code>DMY</code> to select day-month-year interpretation, or <code>YMD</code> to select year-month-day interpretation.\nPostgreSQL is more flexible in handling date/time input than the SQL standard requires. See Appendix B for the exact parsing rules of date/time input and for the recognized text fields including months, days of the week, and time zones.\nRemember that any date or time literal input needs to be enclosed in single quotes, like text strings. Refer to Section 4.1.2.7 for more information. SQL requires the following syntax\n<code>\n<code>type</code> [ (<code>p</code>) ] '<code>value</code>'\n</code>\nwhere <code>p</code> is an optional precision specification giving the number of fractional digits in the seconds field. Precision can be specified for <code>time</code>, <code>timestamp</code>, and <code>interval</code> types, and can range from 0 to 6. If no precision is specified in a constant specification, it defaults to the precision of the literal value (but not more than 6 digits).\n8.5.1.1. Dates\nTable 8.10 shows some possible inputs for the <code>date</code> type.\nTable 8.10. Date Input\n<table>\n<thead>\n<tr>\n<th>Example</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1999-01-08</td>\n<td>ISO 8601; January 8 in any mode (recommended format)</td>\n</tr>\n<tr>\n<td>January 8, 1999</td>\n<td>unambiguous in any <code>datestyle</code> input mode</td>\n</tr>\n<tr>\n<td>1/8/1999</td>\n<td>January 8 in <code>MDY</code> mode; August 1 in <code>DMY</code> mode</td>\n</tr>\n<tr>\n<td>1/18/1999</td>\n<td>January 18 in <code>MDY</code> mode; rejected in other modes</td>\n</tr>\n<tr>\n<td>01/02/03</td>\n<td>January 2, 2003 in <code>MDY</code> mode; February 1, 2003 in <code>DMY</code> mode; February 3, 2001 in <code>YMD</code> mode</td>\n</tr>\n<tr>\n<td>1999-Jan-08</td>\n<td>January 8 in any mode</td>\n</tr>\n<tr>\n<td>Jan-08-1999</td>\n<td>January 8 in any mode</td>\n</tr>\n<tr>\n<td>08-Jan-1999</td>\n<td>January 8 in any mode</td>\n</tr>\n<tr>\n<td>99-Jan-08</td>\n<td>January 8 in <code>YMD</code> mode, else error</td>\n</tr>\n<tr>\n<td>08-Jan-99</td>\n<td>January 8, except error in <code>YMD</code> mode</td>\n</tr>\n<tr>\n<td>Jan-08-99</td>\n<td>January 8, except error in <code>YMD</code> mode</td>\n</tr>\n<tr>\n<td>19990108</td>\n<td>ISO 8601; January 8, 1999 in any mode</td>\n</tr>\n<tr>\n<td>990108</td>\n<td>ISO 8601; January 8, 1999 in any mode</td>\n</tr>\n<tr>\n<td>1999.008</td>\n<td>year and day of year</td>\n</tr>\n<tr>\n<td>J2451187</td>\n<td>Julian date</td>\n</tr>\n<tr>\n<td>January 8, 99 BC</td>\n<td>year 99 BC</td>\n</tr>\n</tbody>\n</table>\n8.5.1.2. Times\nThe time-of-day types are <code>time [ (p) ] without time zone</code> and <code>time [ (p) ] with time zone</code>. <code>time</code> alone is equivalent to <code>time without time zone</code>.\nValid input for these types consists of a time of day followed by an optional time zone. (See Table 8.11 and Table 8.12.) If a time zone is specified in the input for <code>time without time zone</code>, it is silently ignored. You can also specify a date but it will be ignored, except when you use a time zone name that involves a daylight-savings rule, such as <code>America/New_York</code>. In this case specifying the date is required in order to determine whether standard or daylight-savings time applies. The appropriate time zone offset is recorded in the <code>time with time zone</code> value and is output as stored; it is not adjusted to the active time zone.\nTable 8.11. Time Input\n<table>\n<thead>\n<tr>\n<th>Example</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>04:05:06.789</code></td>\n<td>ISO 8601</td>\n</tr>\n<tr>\n<td><code>04:05:06</code></td>\n<td>ISO 8601</td>\n</tr>\n<tr>\n<td><code>04:05</code></td>\n<td>ISO 8601</td>\n</tr>\n<tr>\n<td><code>040506</code></td>\n<td>ISO 8601</td>\n</tr>\n<tr>\n<td><code>04:05 AM</code></td>\n<td>same as 04:05; AM does not affect value</td>\n</tr>\n<tr>\n<td><code>04:05 PM</code></td>\n<td>same as 16:05; input hour must be <= 12</td>\n</tr>\n<tr>\n<td><code>04:05:06.789-8</code></td>\n<td>ISO 8601, with time zone as UTC offset</td>\n</tr>\n<tr>\n<td><code>04:05:06-08:00</code></td>\n<td>ISO 8601, with time zone as UTC offset</td>\n</tr>\n<tr>\n<td><code>04:05-08:00</code></td>\n<td>ISO 8601, with time zone as UTC offset</td>\n</tr>\n<tr>\n<td><code>040506-08</code></td>\n<td>ISO 8601, with time zone as UTC offset</td>\n</tr>\n<tr>\n<td><code>040506+0730</code></td>\n<td>ISO 8601, with fractional-hour time zone as UTC offset</td>\n</tr>\n<tr>\n<td><code>040506+07:30:00</code></td>\n<td>UTC offset specified to seconds (not allowed in ISO 8601)</td>\n</tr>\n<tr>\n<td><code>04:05:06 PST</code></td>\n<td>time zone specified by abbreviation</td>\n</tr>\n<tr>\n<td><code>2003-04-12 04:05:06 America/New_York</code></td>\n<td>time zone specified by full name</td>\n</tr>\n</tbody>\n</table>\nTable 8.12. Time Zone Input\n<table>\n<thead>\n<tr>\n<th>Example</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>PST</code></td>\n<td>Abbreviation (for Pacific Standard Time)</td>\n</tr>\n<tr>\n<td><code>America/New_York</code></td>\n<td>Full time zone name</td>\n</tr>\n<tr>\n<td><code>PST8PDT</code></td>\n<td>POSIX-style time zone specification</td>\n</tr>\n<tr>\n<td><code>-8:00:00</code></td>\n<td>UTC offset for PST</td>\n</tr>\n<tr>\n<td><code>-8:00</code></td>\n<td>UTC offset for PST (ISO 8601 extended format)</td>\n</tr>\n<tr>\n<td><code>-800</code></td>\n<td>UTC offset for PST (ISO 8601 basic format)</td>\n</tr>\n<tr>\n<td><code>-8</code></td>\n<td>UTC offset for PST (ISO 8601 basic format)</td>\n</tr>\n<tr>\n<td><code>zulu</code></td>\n<td>Military abbreviation for UTC</td>\n</tr>\n<tr>\n<td><code>z</code></td>\n<td>Short form of <code>zulu</code> (also in ISO 8601)</td>\n</tr>\n</tbody>\n</table>\nRefer to Section 8.5.3 for more information on how to specify time zones.\n8.5.1.3. Time Stamps\nValid input for the time stamp types consists of the concatenation of a date and a time, followed by an optional time zone, followed by an optional <code>AD</code> or <code>BC</code>. (Alternatively, <code>AD</code>/<code>BC</code> can appear before the time zone, but this is not the preferred ordering.) Thus:\n<code>\n1999-01-08 04:05:06\n</code>\nand:\n<code>\n1999-01-08 04:05:06 -8:00\n</code>\nare valid values, which follow the ISO 8601 standard. In addition, the common format:\n<code>\nJanuary 8 04:05:06 1999 PST\n</code>\nis supported.\nThe SQL standard differentiates <code>timestamp without time zone</code> and <code>timestamp with time zone</code> literals by the presence of a \"+\" or \"-\" symbol and time zone offset after the time. Hence, according to the standard,\n<code>TIMESTAMP '2004-10-19 10:23:54'</code>\nis a <code>timestamp without time zone</code>, while\n<code>TIMESTAMP '2004-10-19 10:23:54+02'</code>\nis a <code>timestamp with time zone</code>. PostgreSQL never examines the content of a literal string before determining its type, and therefore will treat both of the above as <code>timestamp without time zone</code>. To ensure that a literal is treated as <code>timestamp with time zone</code>, give it the correct explicit type:\n<code>TIMESTAMP WITH TIME ZONE '2004-10-19 10:23:54+02'</code>\nIn a literal that has been determined to be <code>timestamp without time zone</code>, PostgreSQL will silently ignore any time zone indication. That is, the resulting value is derived from the date/time fields in the input value, and is not adjusted for time zone.\nFor <code>timestamp with time zone</code>, the internally stored value is always in UTC (Universal Coordinated Time, traditionally known as Greenwich Mean Time, GMT). An input value that has an explicit time zone specified is converted to UTC using the appropriate offset for that time zone. If no time zone is stated in the input string, then it is assumed to be in the time zone indicated by the system's TimeZone parameter, and is converted to UTC using the offset for the <code>timezone</code> zone.\nWhen a <code>timestamp with time zone</code> value is output, it is always converted from UTC to the current <code>timezone</code> zone, and displayed as local time in that zone. To see the time in another time zone, either change <code>timezone</code> or use the <code>AT TIME ZONE</code> construct (see Section 9.9.3).\nConversions between <code>timestamp without time zone</code> and <code>timestamp with time zone</code> normally assume that the <code>timestamp without time zone</code> value should be taken or given as <code>timezone</code> local time. A different time zone can be specified for the conversion using <code>AT TIME ZONE</code>.\n8.5.1.4. Special Values\nPostgreSQL supports several special date/time input values for convenience, as shown in Table 8.13. The values <code>infinity</code> and <code>-infinity</code> are specially represented inside the system and will be displayed unchanged; but the others are simply notational shorthands that will be converted to ordinary date/time values when read. (In particular, <code>now</code> and related strings are converted to a specific time value as soon as they are read.) All of these values need to be enclosed in single quotes when used as constants in SQL commands.\nTable 8.13. Special Date/Time Inputs\n<table>\n<thead>\n<tr>\n<th>Input String</th>\n<th>Valid Types</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>epoch</code></td>\n<td><code>date</code>, <code>timestamp</code></td>\n<td>1970-01-01 00:00:00+00 (Unix system time zero)</td>\n</tr>\n<tr>\n<td><code>infinity</code></td>\n<td><code>date</code>, <code>timestamp</code></td>\n<td>later than all other time stamps</td>\n</tr>\n<tr>\n<td><code>-infinity</code></td>\n<td><code>date</code>, <code>timestamp</code></td>\n<td>earlier than all other time stamps</td>\n</tr>\n<tr>\n<td><code>now</code></td>\n<td><code>date</code>, <code>time</code>, <code>timestamp</code></td>\n<td>current transaction's start time</td>\n</tr>\n<tr>\n<td><code>today</code></td>\n<td><code>date</code>, <code>timestamp</code></td>\n<td>midnight (<code>00:00</code>) today</td>\n</tr>\n<tr>\n<td><code>tomorrow</code></td>\n<td><code>date</code>, <code>timestamp</code></td>\n<td>midnight (<code>00:00</code>) tomorrow</td>\n</tr>\n<tr>\n<td><code>yesterday</code></td>\n<td><code>date</code>, <code>timestamp</code></td>\n<td>midnight (<code>00:00</code>) yesterday</td>\n</tr>\n<tr>\n<td><code>allballs</code></td>\n<td><code>time</code></td>\n<td>00:00:00.00 UTC</td>\n</tr>\n</tbody>\n</table>\nThe following SQL-compatible functions can also be used to obtain the current time value for the corresponding data type: <code>CURRENT_DATE</code>, <code>CURRENT_TIME</code>, <code>CURRENT_TIMESTAMP</code>, <code>LOCALTIME</code>, <code>LOCALTIMESTAMP</code>. (See Section 9.9.4.) Note that these are SQL functions and are not recognized in data input strings.\nCaution\nWhile the input strings <code>now</code>, <code>today</code>, <code>tomorrow</code>, and <code>yesterday</code> are fine to use in interactive SQL commands, they can have surprising behavior when the command is saved to be executed later, for example in prepared statements, views, and function definitions. The string can be converted to a specific time value that continues to be used long after it becomes stale. Use one of the SQL functions instead in such contexts. For example, <code>CURRENT_DATE + 1</code> is safer than <code>'tomorrow'::date</code>.\n; \nThe output format of the date/time types can be set to one of the four styles ISO 8601, SQL (Ingres), traditional POSTGRES (Unix date format), or German. The default is the ISO format. (The SQL standard requires the use of the ISO 8601 format. The name of the \"SQL\" output format is a historical accident.) Table 8.14 shows examples of each output style. The output of the <code>date</code> and <code>time</code> types is generally only the date or time part in accordance with the given examples. However, the POSTGRES style outputs date-only values in ISO format.\nTable 8.14. Date/Time Output Styles\n<table>\n<thead>\n<tr>\n<th>Style Specification</th>\n<th>Description</th>\n<th>Example</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>ISO</code></td>\n<td>ISO 8601, SQL standard</td>\n<td><code>1997-12-17 07:37:16-08</code></td>\n</tr>\n<tr>\n<td><code>SQL</code></td>\n<td>traditional style</td>\n<td><code>12/17/1997 07:37:16.00 PST</code></td>\n</tr>\n<tr>\n<td><code>Postgres</code></td>\n<td>original style</td>\n<td><code>Wed Dec 17 07:37:16 1997 PST</code></td>\n</tr>\n<tr>\n<td><code>German</code></td>\n<td>regional style</td>\n<td><code>17.12.1997 07:37:16.00 PST</code></td>\n</tr>\n</tbody>\n</table>\nNote\nISO 8601 specifies the use of uppercase letter <code>T</code> to separate the date and time. PostgreSQL accepts that format on input, but on output it uses a space rather than <code>T</code>, as shown above. This is for readability and for consistency with RFC 3339 as well as some other database systems.\nIn the SQL and POSTGRES styles, day appears before month if DMY field ordering has been specified, otherwise month appears before day. (See Section 8.5.1 for how this setting also affects interpretation of input values.) Table 8.15 shows examples.\nTable 8.15. Date Order Conventions\n<table>\n<thead>\n<tr>\n<th><code>datestyle</code> Setting</th>\n<th>Input Ordering</th>\n<th>Example Output</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>SQL, DMY</code></td>\n<td><code>day</code>/<code>month</code>/<code>year</code></td>\n<td><code>17/12/1997 15:37:16.00 CET</code></td>\n</tr>\n<tr>\n<td><code>SQL, MDY</code></td>\n<td><code>month</code>/<code>day</code>/<code>year</code></td>\n<td><code>12/17/1997 07:37:16.00 PST</code></td>\n</tr>\n<tr>\n<td><code>Postgres, DMY</code></td>\n<td><code>day</code>/<code>month</code>/<code>year</code></td>\n<td><code>Wed 17 Dec 07:37:16 1997 PST</code></td>\n</tr>\n</tbody>\n</table>\nIn the ISO style, the time zone is always shown as a signed numeric offset from UTC, with positive sign used for zones east of Greenwich. The offset will be shown as <code>hh</code> (hours only) if it is an integral number of hours, else as <code>hh</code>:<code>mm</code> if it is an integral number of minutes, else as <code>hh</code>:<code>mm</code>:<code>ss</code>. (The third case is not possible with any modern time zone standard, but it can appear when working with timestamps that predate the adoption of standardized time zones.) In the other date styles, the time zone is shown as an alphabetic abbreviation if one is in common use in the current zone. Otherwise it appears as a signed numeric offset in ISO 8601 basic format (<code>hh</code> or <code>hhmm</code>).\nThe date/time style can be selected by the user using the <code>SET datestyle</code> command, the DateStyle parameter in the <code>postgresql.conf</code> configuration file, or the <code>PGDATESTYLE</code> environment variable on the server or client.\nThe formatting function <code>to_char</code> (see Section 9.8) is also available as a more flexible way to format date/time output.\n; Although the <code>date</code> type cannot have an associated time zone, the <code>time</code> type can. Time zones in the real world have little meaning unless associated with a date as well as a time, since the offset can vary through the year with daylight-saving time boundaries.; <code>\nSELECT EXTRACT(hours from '80 minutes'::interval);\n date_part\n-----------\n 1\nSELECT EXTRACT(days from '80 hours'::interval);\n date_part\n-----------\n 0\n</code>; The output of the <code>postgres_verbose</code> style matches the output of PostgreSQL releases prior to 8.4 when the <code>DateStyle</code> parameter was set to non-<code>ISO</code> output.",
        "example": [],
        "link": [
            "https://www.postgresql.org/docs/12/datatype-datetime.html"
        ]
    },
    {
        "type": "type",
        "keyword": "interval YEAR",
        "tree": "(simpletypename (constinterval INTERVAL) (opt_interval YEAR))",
        "description": [
            "time span",
            "time interval"
        ],
        "detail": "[DESCRIPTION]: time span; time interval<sep>[STORAGE SIZE]: 16 bytes<sep>[LOW VALUE]: -178000000 years<sep>[HIGH VALUE]: 178000000 years<sep>[COMPENSATE]: <code>time</code>, <code>timestamp</code>, and <code>interval</code> accept an optional precision value <code>p</code> which specifies the number of fractional digits retained in the seconds field. By default, there is no explicit bound on precision. The allowed range of <code>p</code> is from 0 to 6.; The <code>interval</code> type has an additional option, which is to restrict the set of stored fields by writing one of these phrases:; where <code>p</code> is an optional precision specification giving the number of fractional digits in the seconds field. Precision can be specified for <code>time</code>, <code>timestamp</code>, and <code>interval</code> types, and can range from 0 to 6. If no precision is specified in a constant specification, it defaults to the precision of the literal value (but not more than 6 digits).; \n<code>interval</code> values can be written using the following verbose syntax:\n<code>\n[@] <code>quantity</code> <code>unit</code> [<code>quantity</code> <code>unit</code>...] [<code>direction</code>]\n</code>\nwhere <code>quantity</code> is a number (possibly signed); <code>unit</code> is <code>microsecond</code>, <code>millisecond</code>, <code>second</code>, <code>minute</code>, <code>hour</code>, <code>day</code>, <code>week</code>, <code>month</code>, <code>year</code>, <code>decade</code>, <code>century</code>, <code>millennium</code>, or abbreviations or plurals of these units; <code>direction</code> can be <code>ago</code> or empty. The at sign (<code>@</code>) is optional noise. The amounts of the different units are implicitly added with appropriate sign accounting. <code>ago</code> negates all the fields. This syntax is also used for interval output, if IntervalStyle is set to <code>postgres_verbose</code>.\nQuantities of days, hours, minutes, and seconds can be specified without explicit unit markings. For example, <code>'1 12:59:10'</code> is read the same as <code>'1 day 12 hours 59 min 10 sec'</code>. Also, a combination of years and months can be specified with a dash; for example <code>'200-10'</code> is read the same as <code>'200 years 10 months'</code>. (These shorter forms are in fact the only ones allowed by the SQL standard, and are used for output when <code>IntervalStyle</code> is set to <code>sql_standard</code>.)\nInterval values can also be written as ISO 8601 time intervals, using either the \"format with designators\" of the standard's section 4.4.3.2 or the \"alternative format\" of section 4.4.3.3. The format with designators looks like this:\n<code>\nP <code>quantity</code> <code>unit</code> [ <code>quantity</code> <code>unit</code> ...] [ T [ <code>quantity</code> <code>unit</code> ...]]\n</code>\nThe string must start with a <code>P</code>, and may include a <code>T</code> that introduces the time-of-day units. The available unit abbreviations are given in Table 8.16. Units may be omitted, and may be specified in any order, but units smaller than a day must appear after <code>T</code>. In particular, the meaning of <code>M</code> depends on whether it is before or after <code>T</code>.\nTable 8.16. ISO 8601 Interval Unit Abbreviations\n<table>\n<thead>\n<tr>\n<th>Abbreviation</th>\n<th>Meaning</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Y</td>\n<td>Years</td>\n</tr>\n<tr>\n<td>M</td>\n<td>Months (in the date part)</td>\n</tr>\n<tr>\n<td>W</td>\n<td>Weeks</td>\n</tr>\n<tr>\n<td>D</td>\n<td>Days</td>\n</tr>\n<tr>\n<td>H</td>\n<td>Hours</td>\n</tr>\n<tr>\n<td>M</td>\n<td>Minutes (in the time part)</td>\n</tr>\n<tr>\n<td>S</td>\n<td>Seconds</td>\n</tr>\n</tbody>\n</table>\nIn the alternative format:\n<code>\nP [ <code>years</code>-<code>months</code>-<code>days</code> ] [ T <code>hours</code>:<code>minutes</code>:<code>seconds</code> ]\n</code>\nthe string must begin with <code>P</code>, and a <code>T</code> separates the date and time parts of the interval. The values are given as numbers similar to ISO 8601 dates.\nWhen writing an interval constant with a <code>fields</code> specification, or when assigning a string to an interval column that was defined with a <code>fields</code> specification, the interpretation of unmarked quantities depends on the <code>fields</code>. For example <code>INTERVAL '1' YEAR</code> is read as 1 year, whereas <code>INTERVAL '1'</code> means 1 second. Also, field values \"to the right\" of the least significant field allowed by the <code>fields</code> specification are silently discarded. For example, writing <code>INTERVAL '1 day 2:03:04' HOUR TO MINUTE</code> results in dropping the seconds field, but not the day field.\nAccording to the SQL standard all fields of an interval value must have the same sign, so a leading negative sign applies to all fields; for example the negative sign in the interval literal <code>'-1 2:03:04'</code> applies to both the days and hour/minute/second parts. PostgreSQL allows the fields to have different signs, and traditionally treats each field in the textual representation as independently signed, so that the hour/minute/second part is considered positive in this example. If <code>IntervalStyle</code> is set to <code>sql_standard</code> then a leading sign is considered to apply to all fields (but only if no additional signs appear). Otherwise the traditional PostgreSQL interpretation is used. To avoid ambiguity, it's recommended to attach an explicit sign to each field if any field is negative.\nField values can have fractional parts: for example, <code>'1.5 weeks'</code> or <code>'01:02:03.45'</code>. However, because interval internally stores only three integer units (months, days, microseconds), fractional units must be spilled to smaller units. Fractional parts of units greater than months are truncated to be an integer number of months, e.g. <code>'1.5 years'</code> becomes <code>'1 year 6 mons'</code>. Fractional parts of weeks and days are computed to be an integer number of days and microseconds, assuming 30 days per month and 24 hours per day, e.g., <code>'1.75 months'</code> becomes <code>1 mon 22 days 12:00:00</code>. Only seconds will ever be shown as fractional on output.\nTable 8.17 shows some examples of valid <code>interval</code> input.\nTable 8.17. Interval Input\n<table>\n<thead>\n<tr>\n<th>Example</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1-2</td>\n<td>SQL standard format: 1 year 2 months</td>\n</tr>\n<tr>\n<td>3 4:05:06</td>\n<td>SQL standard format: 3 days 4 hours 5 minutes 6 seconds</td>\n</tr>\n<tr>\n<td>1 year 2 months 3 days 4 hours 5 minutes 6 seconds</td>\n<td>Traditional Postgres format: 1 year 2 months 3 days 4 hours 5 minutes 6 seconds</td>\n</tr>\n<tr>\n<td>P1Y2M3DT4H5M6S</td>\n<td>ISO 8601 \"format with designators\": same meaning as above</td>\n</tr>\n<tr>\n<td>P0001-02-03T04:05:06</td>\n<td>ISO 8601 \"alternative format\": same meaning as above</td>\n</tr>\n</tbody>\n</table>\nInternally <code>interval</code> values are stored as months, days, and microseconds. This is done because the number of days in a month varies, and a day can have 23 or 25 hours if a daylight savings time adjustment is involved. The months and days fields are integers while the microseconds field can store fractional seconds. Because intervals are usually created from constant strings or <code>timestamp</code> subtraction, this storage method works well in most cases, but can cause unexpected results:\n<code>\nSELECT EXTRACT(hours from '80 minutes'::interval);\n date_part\n-----------\n 1\nSELECT EXTRACT(days from '80 hours'::interval);\n date_part\n-----------\n 0\n</code>\nFunctions <code>justify_days</code> and <code>justify_hours</code> are available for adjusting days and hours that overflow their normal ranges.\n; \nThe output format of the interval type can be set to one of the four styles <code>sql_standard</code>, <code>postgres</code>, <code>postgres_verbose</code>, or <code>iso_8601</code>, using the command <code>SET intervalstyle</code>. The default is the <code>postgres</code> format. Table 8.18 shows examples of each output style.\nThe <code>sql_standard</code> style produces output that conforms to the SQL standard's specification for interval literal strings, if the interval value meets the standard's restrictions (either year-month only or day-time only, with no mixing of positive and negative components). Otherwise the output looks like a standard year-month literal string followed by a day-time literal string, with explicit signs added to disambiguate mixed-sign intervals.\nThe output of the <code>postgres</code> style matches the output of PostgreSQL releases prior to 8.4 when the DateStyle parameter was set to <code>ISO</code>.\nThe output of the <code>postgres_verbose</code> style matches the output of PostgreSQL releases prior to 8.4 when the <code>DateStyle</code> parameter was set to non-<code>ISO</code> output.\nThe output of the <code>iso_8601</code> style matches the \"format with designators\" described in section 4.4.3.2 of the ISO 8601 standard.\nTable 8.18. Interval Output Style Examples\n<table>\n<thead>\n<tr>\n<th>Style Specification</th>\n<th>Year-Month Interval</th>\n<th>Day-Time Interval</th>\n<th>Mixed Interval</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>sql_standard</code></td>\n<td>1-2</td>\n<td>3 4:05:06</td>\n<td>-1-2 +3 -4:05:06</td>\n</tr>\n<tr>\n<td><code>postgres</code></td>\n<td>1 year 2 mons</td>\n<td>3 days 04:05:06</td>\n<td>-1 year -2 mons +3 days -04:05:06</td>\n</tr>\n<tr>\n<td><code>postgres_verbose</code></td>\n<td>@ 1 year 2 mons</td>\n<td>@ 3 days 4 hours 5 mins 6 secs</td>\n<td>@ 1 year 2 mons -3 days 4 hours 5 mins 6 secs ago</td>\n</tr>\n<tr>\n<td><code>iso_8601</code></td>\n<td>P1Y2M</td>\n<td>P3DT4H5M6S</td>\n<td>P-1Y-2M3DT-4H-5M-6S</td>\n</tr>\n</tbody>\n</table>\n",
        "example": [],
        "link": [
            "https://www.postgresql.org/docs/12/datatype-datetime.html"
        ]
    },
    {
        "type": "type",
        "keyword": "interval MONTH",
        "tree": "(simpletypename (constinterval INTERVAL) (opt_interval MONTH))",
        "description": [
            "time span",
            "time interval"
        ],
        "detail": "[DESCRIPTION]: time span; time interval<sep>[STORAGE SIZE]: 16 bytes<sep>[LOW VALUE]: -178000000 years<sep>[HIGH VALUE]: 178000000 years<sep>[COMPENSATE]: <code>time</code>, <code>timestamp</code>, and <code>interval</code> accept an optional precision value <code>p</code> which specifies the number of fractional digits retained in the seconds field. By default, there is no explicit bound on precision. The allowed range of <code>p</code> is from 0 to 6.; The <code>interval</code> type has an additional option, which is to restrict the set of stored fields by writing one of these phrases:; where <code>p</code> is an optional precision specification giving the number of fractional digits in the seconds field. Precision can be specified for <code>time</code>, <code>timestamp</code>, and <code>interval</code> types, and can range from 0 to 6. If no precision is specified in a constant specification, it defaults to the precision of the literal value (but not more than 6 digits).; \n<code>interval</code> values can be written using the following verbose syntax:\n<code>\n[@] <code>quantity</code> <code>unit</code> [<code>quantity</code> <code>unit</code>...] [<code>direction</code>]\n</code>\nwhere <code>quantity</code> is a number (possibly signed); <code>unit</code> is <code>microsecond</code>, <code>millisecond</code>, <code>second</code>, <code>minute</code>, <code>hour</code>, <code>day</code>, <code>week</code>, <code>month</code>, <code>year</code>, <code>decade</code>, <code>century</code>, <code>millennium</code>, or abbreviations or plurals of these units; <code>direction</code> can be <code>ago</code> or empty. The at sign (<code>@</code>) is optional noise. The amounts of the different units are implicitly added with appropriate sign accounting. <code>ago</code> negates all the fields. This syntax is also used for interval output, if IntervalStyle is set to <code>postgres_verbose</code>.\nQuantities of days, hours, minutes, and seconds can be specified without explicit unit markings. For example, <code>'1 12:59:10'</code> is read the same as <code>'1 day 12 hours 59 min 10 sec'</code>. Also, a combination of years and months can be specified with a dash; for example <code>'200-10'</code> is read the same as <code>'200 years 10 months'</code>. (These shorter forms are in fact the only ones allowed by the SQL standard, and are used for output when <code>IntervalStyle</code> is set to <code>sql_standard</code>.)\nInterval values can also be written as ISO 8601 time intervals, using either the \"format with designators\" of the standard's section 4.4.3.2 or the \"alternative format\" of section 4.4.3.3. The format with designators looks like this:\n<code>\nP <code>quantity</code> <code>unit</code> [ <code>quantity</code> <code>unit</code> ...] [ T [ <code>quantity</code> <code>unit</code> ...]]\n</code>\nThe string must start with a <code>P</code>, and may include a <code>T</code> that introduces the time-of-day units. The available unit abbreviations are given in Table 8.16. Units may be omitted, and may be specified in any order, but units smaller than a day must appear after <code>T</code>. In particular, the meaning of <code>M</code> depends on whether it is before or after <code>T</code>.\nTable 8.16. ISO 8601 Interval Unit Abbreviations\n<table>\n<thead>\n<tr>\n<th>Abbreviation</th>\n<th>Meaning</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Y</td>\n<td>Years</td>\n</tr>\n<tr>\n<td>M</td>\n<td>Months (in the date part)</td>\n</tr>\n<tr>\n<td>W</td>\n<td>Weeks</td>\n</tr>\n<tr>\n<td>D</td>\n<td>Days</td>\n</tr>\n<tr>\n<td>H</td>\n<td>Hours</td>\n</tr>\n<tr>\n<td>M</td>\n<td>Minutes (in the time part)</td>\n</tr>\n<tr>\n<td>S</td>\n<td>Seconds</td>\n</tr>\n</tbody>\n</table>\nIn the alternative format:\n<code>\nP [ <code>years</code>-<code>months</code>-<code>days</code> ] [ T <code>hours</code>:<code>minutes</code>:<code>seconds</code> ]\n</code>\nthe string must begin with <code>P</code>, and a <code>T</code> separates the date and time parts of the interval. The values are given as numbers similar to ISO 8601 dates.\nWhen writing an interval constant with a <code>fields</code> specification, or when assigning a string to an interval column that was defined with a <code>fields</code> specification, the interpretation of unmarked quantities depends on the <code>fields</code>. For example <code>INTERVAL '1' YEAR</code> is read as 1 year, whereas <code>INTERVAL '1'</code> means 1 second. Also, field values \"to the right\" of the least significant field allowed by the <code>fields</code> specification are silently discarded. For example, writing <code>INTERVAL '1 day 2:03:04' HOUR TO MINUTE</code> results in dropping the seconds field, but not the day field.\nAccording to the SQL standard all fields of an interval value must have the same sign, so a leading negative sign applies to all fields; for example the negative sign in the interval literal <code>'-1 2:03:04'</code> applies to both the days and hour/minute/second parts. PostgreSQL allows the fields to have different signs, and traditionally treats each field in the textual representation as independently signed, so that the hour/minute/second part is considered positive in this example. If <code>IntervalStyle</code> is set to <code>sql_standard</code> then a leading sign is considered to apply to all fields (but only if no additional signs appear). Otherwise the traditional PostgreSQL interpretation is used. To avoid ambiguity, it's recommended to attach an explicit sign to each field if any field is negative.\nField values can have fractional parts: for example, <code>'1.5 weeks'</code> or <code>'01:02:03.45'</code>. However, because interval internally stores only three integer units (months, days, microseconds), fractional units must be spilled to smaller units. Fractional parts of units greater than months are truncated to be an integer number of months, e.g. <code>'1.5 years'</code> becomes <code>'1 year 6 mons'</code>. Fractional parts of weeks and days are computed to be an integer number of days and microseconds, assuming 30 days per month and 24 hours per day, e.g., <code>'1.75 months'</code> becomes <code>1 mon 22 days 12:00:00</code>. Only seconds will ever be shown as fractional on output.\nTable 8.17 shows some examples of valid <code>interval</code> input.\nTable 8.17. Interval Input\n<table>\n<thead>\n<tr>\n<th>Example</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1-2</td>\n<td>SQL standard format: 1 year 2 months</td>\n</tr>\n<tr>\n<td>3 4:05:06</td>\n<td>SQL standard format: 3 days 4 hours 5 minutes 6 seconds</td>\n</tr>\n<tr>\n<td>1 year 2 months 3 days 4 hours 5 minutes 6 seconds</td>\n<td>Traditional Postgres format: 1 year 2 months 3 days 4 hours 5 minutes 6 seconds</td>\n</tr>\n<tr>\n<td>P1Y2M3DT4H5M6S</td>\n<td>ISO 8601 \"format with designators\": same meaning as above</td>\n</tr>\n<tr>\n<td>P0001-02-03T04:05:06</td>\n<td>ISO 8601 \"alternative format\": same meaning as above</td>\n</tr>\n</tbody>\n</table>\nInternally <code>interval</code> values are stored as months, days, and microseconds. This is done because the number of days in a month varies, and a day can have 23 or 25 hours if a daylight savings time adjustment is involved. The months and days fields are integers while the microseconds field can store fractional seconds. Because intervals are usually created from constant strings or <code>timestamp</code> subtraction, this storage method works well in most cases, but can cause unexpected results:\n<code>\nSELECT EXTRACT(hours from '80 minutes'::interval);\n date_part\n-----------\n 1\nSELECT EXTRACT(days from '80 hours'::interval);\n date_part\n-----------\n 0\n</code>\nFunctions <code>justify_days</code> and <code>justify_hours</code> are available for adjusting days and hours that overflow their normal ranges.\n; \nThe output format of the interval type can be set to one of the four styles <code>sql_standard</code>, <code>postgres</code>, <code>postgres_verbose</code>, or <code>iso_8601</code>, using the command <code>SET intervalstyle</code>. The default is the <code>postgres</code> format. Table 8.18 shows examples of each output style.\nThe <code>sql_standard</code> style produces output that conforms to the SQL standard's specification for interval literal strings, if the interval value meets the standard's restrictions (either year-month only or day-time only, with no mixing of positive and negative components). Otherwise the output looks like a standard year-month literal string followed by a day-time literal string, with explicit signs added to disambiguate mixed-sign intervals.\nThe output of the <code>postgres</code> style matches the output of PostgreSQL releases prior to 8.4 when the DateStyle parameter was set to <code>ISO</code>.\nThe output of the <code>postgres_verbose</code> style matches the output of PostgreSQL releases prior to 8.4 when the <code>DateStyle</code> parameter was set to non-<code>ISO</code> output.\nThe output of the <code>iso_8601</code> style matches the \"format with designators\" described in section 4.4.3.2 of the ISO 8601 standard.\nTable 8.18. Interval Output Style Examples\n<table>\n<thead>\n<tr>\n<th>Style Specification</th>\n<th>Year-Month Interval</th>\n<th>Day-Time Interval</th>\n<th>Mixed Interval</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>sql_standard</code></td>\n<td>1-2</td>\n<td>3 4:05:06</td>\n<td>-1-2 +3 -4:05:06</td>\n</tr>\n<tr>\n<td><code>postgres</code></td>\n<td>1 year 2 mons</td>\n<td>3 days 04:05:06</td>\n<td>-1 year -2 mons +3 days -04:05:06</td>\n</tr>\n<tr>\n<td><code>postgres_verbose</code></td>\n<td>@ 1 year 2 mons</td>\n<td>@ 3 days 4 hours 5 mins 6 secs</td>\n<td>@ 1 year 2 mons -3 days 4 hours 5 mins 6 secs ago</td>\n</tr>\n<tr>\n<td><code>iso_8601</code></td>\n<td>P1Y2M</td>\n<td>P3DT4H5M6S</td>\n<td>P-1Y-2M3DT-4H-5M-6S</td>\n</tr>\n</tbody>\n</table>\n",
        "example": [],
        "link": [
            "https://www.postgresql.org/docs/12/datatype-datetime.html"
        ]
    },
    {
        "type": "type",
        "keyword": "interval DAY",
        "tree": "(simpletypename (constinterval INTERVAL) (opt_interval DAY))",
        "description": [
            "time span",
            "time interval"
        ],
        "detail": "[DESCRIPTION]: time span; time interval<sep>[STORAGE SIZE]: 16 bytes<sep>[LOW VALUE]: -178000000 years<sep>[HIGH VALUE]: 178000000 years<sep>[COMPENSATE]: <code>time</code>, <code>timestamp</code>, and <code>interval</code> accept an optional precision value <code>p</code> which specifies the number of fractional digits retained in the seconds field. By default, there is no explicit bound on precision. The allowed range of <code>p</code> is from 0 to 6.; The <code>interval</code> type has an additional option, which is to restrict the set of stored fields by writing one of these phrases:; where <code>p</code> is an optional precision specification giving the number of fractional digits in the seconds field. Precision can be specified for <code>time</code>, <code>timestamp</code>, and <code>interval</code> types, and can range from 0 to 6. If no precision is specified in a constant specification, it defaults to the precision of the literal value (but not more than 6 digits).; \n<code>interval</code> values can be written using the following verbose syntax:\n<code>\n[@] <code>quantity</code> <code>unit</code> [<code>quantity</code> <code>unit</code>...] [<code>direction</code>]\n</code>\nwhere <code>quantity</code> is a number (possibly signed); <code>unit</code> is <code>microsecond</code>, <code>millisecond</code>, <code>second</code>, <code>minute</code>, <code>hour</code>, <code>day</code>, <code>week</code>, <code>month</code>, <code>year</code>, <code>decade</code>, <code>century</code>, <code>millennium</code>, or abbreviations or plurals of these units; <code>direction</code> can be <code>ago</code> or empty. The at sign (<code>@</code>) is optional noise. The amounts of the different units are implicitly added with appropriate sign accounting. <code>ago</code> negates all the fields. This syntax is also used for interval output, if IntervalStyle is set to <code>postgres_verbose</code>.\nQuantities of days, hours, minutes, and seconds can be specified without explicit unit markings. For example, <code>'1 12:59:10'</code> is read the same as <code>'1 day 12 hours 59 min 10 sec'</code>. Also, a combination of years and months can be specified with a dash; for example <code>'200-10'</code> is read the same as <code>'200 years 10 months'</code>. (These shorter forms are in fact the only ones allowed by the SQL standard, and are used for output when <code>IntervalStyle</code> is set to <code>sql_standard</code>.)\nInterval values can also be written as ISO 8601 time intervals, using either the \"format with designators\" of the standard's section 4.4.3.2 or the \"alternative format\" of section 4.4.3.3. The format with designators looks like this:\n<code>\nP <code>quantity</code> <code>unit</code> [ <code>quantity</code> <code>unit</code> ...] [ T [ <code>quantity</code> <code>unit</code> ...]]\n</code>\nThe string must start with a <code>P</code>, and may include a <code>T</code> that introduces the time-of-day units. The available unit abbreviations are given in Table 8.16. Units may be omitted, and may be specified in any order, but units smaller than a day must appear after <code>T</code>. In particular, the meaning of <code>M</code> depends on whether it is before or after <code>T</code>.\nTable 8.16. ISO 8601 Interval Unit Abbreviations\n<table>\n<thead>\n<tr>\n<th>Abbreviation</th>\n<th>Meaning</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Y</td>\n<td>Years</td>\n</tr>\n<tr>\n<td>M</td>\n<td>Months (in the date part)</td>\n</tr>\n<tr>\n<td>W</td>\n<td>Weeks</td>\n</tr>\n<tr>\n<td>D</td>\n<td>Days</td>\n</tr>\n<tr>\n<td>H</td>\n<td>Hours</td>\n</tr>\n<tr>\n<td>M</td>\n<td>Minutes (in the time part)</td>\n</tr>\n<tr>\n<td>S</td>\n<td>Seconds</td>\n</tr>\n</tbody>\n</table>\nIn the alternative format:\n<code>\nP [ <code>years</code>-<code>months</code>-<code>days</code> ] [ T <code>hours</code>:<code>minutes</code>:<code>seconds</code> ]\n</code>\nthe string must begin with <code>P</code>, and a <code>T</code> separates the date and time parts of the interval. The values are given as numbers similar to ISO 8601 dates.\nWhen writing an interval constant with a <code>fields</code> specification, or when assigning a string to an interval column that was defined with a <code>fields</code> specification, the interpretation of unmarked quantities depends on the <code>fields</code>. For example <code>INTERVAL '1' YEAR</code> is read as 1 year, whereas <code>INTERVAL '1'</code> means 1 second. Also, field values \"to the right\" of the least significant field allowed by the <code>fields</code> specification are silently discarded. For example, writing <code>INTERVAL '1 day 2:03:04' HOUR TO MINUTE</code> results in dropping the seconds field, but not the day field.\nAccording to the SQL standard all fields of an interval value must have the same sign, so a leading negative sign applies to all fields; for example the negative sign in the interval literal <code>'-1 2:03:04'</code> applies to both the days and hour/minute/second parts. PostgreSQL allows the fields to have different signs, and traditionally treats each field in the textual representation as independently signed, so that the hour/minute/second part is considered positive in this example. If <code>IntervalStyle</code> is set to <code>sql_standard</code> then a leading sign is considered to apply to all fields (but only if no additional signs appear). Otherwise the traditional PostgreSQL interpretation is used. To avoid ambiguity, it's recommended to attach an explicit sign to each field if any field is negative.\nField values can have fractional parts: for example, <code>'1.5 weeks'</code> or <code>'01:02:03.45'</code>. However, because interval internally stores only three integer units (months, days, microseconds), fractional units must be spilled to smaller units. Fractional parts of units greater than months are truncated to be an integer number of months, e.g. <code>'1.5 years'</code> becomes <code>'1 year 6 mons'</code>. Fractional parts of weeks and days are computed to be an integer number of days and microseconds, assuming 30 days per month and 24 hours per day, e.g., <code>'1.75 months'</code> becomes <code>1 mon 22 days 12:00:00</code>. Only seconds will ever be shown as fractional on output.\nTable 8.17 shows some examples of valid <code>interval</code> input.\nTable 8.17. Interval Input\n<table>\n<thead>\n<tr>\n<th>Example</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1-2</td>\n<td>SQL standard format: 1 year 2 months</td>\n</tr>\n<tr>\n<td>3 4:05:06</td>\n<td>SQL standard format: 3 days 4 hours 5 minutes 6 seconds</td>\n</tr>\n<tr>\n<td>1 year 2 months 3 days 4 hours 5 minutes 6 seconds</td>\n<td>Traditional Postgres format: 1 year 2 months 3 days 4 hours 5 minutes 6 seconds</td>\n</tr>\n<tr>\n<td>P1Y2M3DT4H5M6S</td>\n<td>ISO 8601 \"format with designators\": same meaning as above</td>\n</tr>\n<tr>\n<td>P0001-02-03T04:05:06</td>\n<td>ISO 8601 \"alternative format\": same meaning as above</td>\n</tr>\n</tbody>\n</table>\nInternally <code>interval</code> values are stored as months, days, and microseconds. This is done because the number of days in a month varies, and a day can have 23 or 25 hours if a daylight savings time adjustment is involved. The months and days fields are integers while the microseconds field can store fractional seconds. Because intervals are usually created from constant strings or <code>timestamp</code> subtraction, this storage method works well in most cases, but can cause unexpected results:\n<code>\nSELECT EXTRACT(hours from '80 minutes'::interval);\n date_part\n-----------\n 1\nSELECT EXTRACT(days from '80 hours'::interval);\n date_part\n-----------\n 0\n</code>\nFunctions <code>justify_days</code> and <code>justify_hours</code> are available for adjusting days and hours that overflow their normal ranges.\n; \nThe output format of the interval type can be set to one of the four styles <code>sql_standard</code>, <code>postgres</code>, <code>postgres_verbose</code>, or <code>iso_8601</code>, using the command <code>SET intervalstyle</code>. The default is the <code>postgres</code> format. Table 8.18 shows examples of each output style.\nThe <code>sql_standard</code> style produces output that conforms to the SQL standard's specification for interval literal strings, if the interval value meets the standard's restrictions (either year-month only or day-time only, with no mixing of positive and negative components). Otherwise the output looks like a standard year-month literal string followed by a day-time literal string, with explicit signs added to disambiguate mixed-sign intervals.\nThe output of the <code>postgres</code> style matches the output of PostgreSQL releases prior to 8.4 when the DateStyle parameter was set to <code>ISO</code>.\nThe output of the <code>postgres_verbose</code> style matches the output of PostgreSQL releases prior to 8.4 when the <code>DateStyle</code> parameter was set to non-<code>ISO</code> output.\nThe output of the <code>iso_8601</code> style matches the \"format with designators\" described in section 4.4.3.2 of the ISO 8601 standard.\nTable 8.18. Interval Output Style Examples\n<table>\n<thead>\n<tr>\n<th>Style Specification</th>\n<th>Year-Month Interval</th>\n<th>Day-Time Interval</th>\n<th>Mixed Interval</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>sql_standard</code></td>\n<td>1-2</td>\n<td>3 4:05:06</td>\n<td>-1-2 +3 -4:05:06</td>\n</tr>\n<tr>\n<td><code>postgres</code></td>\n<td>1 year 2 mons</td>\n<td>3 days 04:05:06</td>\n<td>-1 year -2 mons +3 days -04:05:06</td>\n</tr>\n<tr>\n<td><code>postgres_verbose</code></td>\n<td>@ 1 year 2 mons</td>\n<td>@ 3 days 4 hours 5 mins 6 secs</td>\n<td>@ 1 year 2 mons -3 days 4 hours 5 mins 6 secs ago</td>\n</tr>\n<tr>\n<td><code>iso_8601</code></td>\n<td>P1Y2M</td>\n<td>P3DT4H5M6S</td>\n<td>P-1Y-2M3DT-4H-5M-6S</td>\n</tr>\n</tbody>\n</table>\n",
        "example": [],
        "link": [
            "https://www.postgresql.org/docs/12/datatype-datetime.html"
        ]
    },
    {
        "type": "type",
        "keyword": "interval HOUR",
        "tree": "(simpletypename (constinterval INTERVAL) (opt_interval HOUR))",
        "description": [
            "time span",
            "time interval"
        ],
        "detail": "[DESCRIPTION]: time span; time interval<sep>[STORAGE SIZE]: 16 bytes<sep>[LOW VALUE]: -178000000 years<sep>[HIGH VALUE]: 178000000 years<sep>[COMPENSATE]: <code>time</code>, <code>timestamp</code>, and <code>interval</code> accept an optional precision value <code>p</code> which specifies the number of fractional digits retained in the seconds field. By default, there is no explicit bound on precision. The allowed range of <code>p</code> is from 0 to 6.; The <code>interval</code> type has an additional option, which is to restrict the set of stored fields by writing one of these phrases:; where <code>p</code> is an optional precision specification giving the number of fractional digits in the seconds field. Precision can be specified for <code>time</code>, <code>timestamp</code>, and <code>interval</code> types, and can range from 0 to 6. If no precision is specified in a constant specification, it defaults to the precision of the literal value (but not more than 6 digits).; \n<code>interval</code> values can be written using the following verbose syntax:\n<code>\n[@] <code>quantity</code> <code>unit</code> [<code>quantity</code> <code>unit</code>...] [<code>direction</code>]\n</code>\nwhere <code>quantity</code> is a number (possibly signed); <code>unit</code> is <code>microsecond</code>, <code>millisecond</code>, <code>second</code>, <code>minute</code>, <code>hour</code>, <code>day</code>, <code>week</code>, <code>month</code>, <code>year</code>, <code>decade</code>, <code>century</code>, <code>millennium</code>, or abbreviations or plurals of these units; <code>direction</code> can be <code>ago</code> or empty. The at sign (<code>@</code>) is optional noise. The amounts of the different units are implicitly added with appropriate sign accounting. <code>ago</code> negates all the fields. This syntax is also used for interval output, if IntervalStyle is set to <code>postgres_verbose</code>.\nQuantities of days, hours, minutes, and seconds can be specified without explicit unit markings. For example, <code>'1 12:59:10'</code> is read the same as <code>'1 day 12 hours 59 min 10 sec'</code>. Also, a combination of years and months can be specified with a dash; for example <code>'200-10'</code> is read the same as <code>'200 years 10 months'</code>. (These shorter forms are in fact the only ones allowed by the SQL standard, and are used for output when <code>IntervalStyle</code> is set to <code>sql_standard</code>.)\nInterval values can also be written as ISO 8601 time intervals, using either the \"format with designators\" of the standard's section 4.4.3.2 or the \"alternative format\" of section 4.4.3.3. The format with designators looks like this:\n<code>\nP <code>quantity</code> <code>unit</code> [ <code>quantity</code> <code>unit</code> ...] [ T [ <code>quantity</code> <code>unit</code> ...]]\n</code>\nThe string must start with a <code>P</code>, and may include a <code>T</code> that introduces the time-of-day units. The available unit abbreviations are given in Table 8.16. Units may be omitted, and may be specified in any order, but units smaller than a day must appear after <code>T</code>. In particular, the meaning of <code>M</code> depends on whether it is before or after <code>T</code>.\nTable 8.16. ISO 8601 Interval Unit Abbreviations\n<table>\n<thead>\n<tr>\n<th>Abbreviation</th>\n<th>Meaning</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Y</td>\n<td>Years</td>\n</tr>\n<tr>\n<td>M</td>\n<td>Months (in the date part)</td>\n</tr>\n<tr>\n<td>W</td>\n<td>Weeks</td>\n</tr>\n<tr>\n<td>D</td>\n<td>Days</td>\n</tr>\n<tr>\n<td>H</td>\n<td>Hours</td>\n</tr>\n<tr>\n<td>M</td>\n<td>Minutes (in the time part)</td>\n</tr>\n<tr>\n<td>S</td>\n<td>Seconds</td>\n</tr>\n</tbody>\n</table>\nIn the alternative format:\n<code>\nP [ <code>years</code>-<code>months</code>-<code>days</code> ] [ T <code>hours</code>:<code>minutes</code>:<code>seconds</code> ]\n</code>\nthe string must begin with <code>P</code>, and a <code>T</code> separates the date and time parts of the interval. The values are given as numbers similar to ISO 8601 dates.\nWhen writing an interval constant with a <code>fields</code> specification, or when assigning a string to an interval column that was defined with a <code>fields</code> specification, the interpretation of unmarked quantities depends on the <code>fields</code>. For example <code>INTERVAL '1' YEAR</code> is read as 1 year, whereas <code>INTERVAL '1'</code> means 1 second. Also, field values \"to the right\" of the least significant field allowed by the <code>fields</code> specification are silently discarded. For example, writing <code>INTERVAL '1 day 2:03:04' HOUR TO MINUTE</code> results in dropping the seconds field, but not the day field.\nAccording to the SQL standard all fields of an interval value must have the same sign, so a leading negative sign applies to all fields; for example the negative sign in the interval literal <code>'-1 2:03:04'</code> applies to both the days and hour/minute/second parts. PostgreSQL allows the fields to have different signs, and traditionally treats each field in the textual representation as independently signed, so that the hour/minute/second part is considered positive in this example. If <code>IntervalStyle</code> is set to <code>sql_standard</code> then a leading sign is considered to apply to all fields (but only if no additional signs appear). Otherwise the traditional PostgreSQL interpretation is used. To avoid ambiguity, it's recommended to attach an explicit sign to each field if any field is negative.\nField values can have fractional parts: for example, <code>'1.5 weeks'</code> or <code>'01:02:03.45'</code>. However, because interval internally stores only three integer units (months, days, microseconds), fractional units must be spilled to smaller units. Fractional parts of units greater than months are truncated to be an integer number of months, e.g. <code>'1.5 years'</code> becomes <code>'1 year 6 mons'</code>. Fractional parts of weeks and days are computed to be an integer number of days and microseconds, assuming 30 days per month and 24 hours per day, e.g., <code>'1.75 months'</code> becomes <code>1 mon 22 days 12:00:00</code>. Only seconds will ever be shown as fractional on output.\nTable 8.17 shows some examples of valid <code>interval</code> input.\nTable 8.17. Interval Input\n<table>\n<thead>\n<tr>\n<th>Example</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1-2</td>\n<td>SQL standard format: 1 year 2 months</td>\n</tr>\n<tr>\n<td>3 4:05:06</td>\n<td>SQL standard format: 3 days 4 hours 5 minutes 6 seconds</td>\n</tr>\n<tr>\n<td>1 year 2 months 3 days 4 hours 5 minutes 6 seconds</td>\n<td>Traditional Postgres format: 1 year 2 months 3 days 4 hours 5 minutes 6 seconds</td>\n</tr>\n<tr>\n<td>P1Y2M3DT4H5M6S</td>\n<td>ISO 8601 \"format with designators\": same meaning as above</td>\n</tr>\n<tr>\n<td>P0001-02-03T04:05:06</td>\n<td>ISO 8601 \"alternative format\": same meaning as above</td>\n</tr>\n</tbody>\n</table>\nInternally <code>interval</code> values are stored as months, days, and microseconds. This is done because the number of days in a month varies, and a day can have 23 or 25 hours if a daylight savings time adjustment is involved. The months and days fields are integers while the microseconds field can store fractional seconds. Because intervals are usually created from constant strings or <code>timestamp</code> subtraction, this storage method works well in most cases, but can cause unexpected results:\n<code>\nSELECT EXTRACT(hours from '80 minutes'::interval);\n date_part\n-----------\n 1\nSELECT EXTRACT(days from '80 hours'::interval);\n date_part\n-----------\n 0\n</code>\nFunctions <code>justify_days</code> and <code>justify_hours</code> are available for adjusting days and hours that overflow their normal ranges.\n; \nThe output format of the interval type can be set to one of the four styles <code>sql_standard</code>, <code>postgres</code>, <code>postgres_verbose</code>, or <code>iso_8601</code>, using the command <code>SET intervalstyle</code>. The default is the <code>postgres</code> format. Table 8.18 shows examples of each output style.\nThe <code>sql_standard</code> style produces output that conforms to the SQL standard's specification for interval literal strings, if the interval value meets the standard's restrictions (either year-month only or day-time only, with no mixing of positive and negative components). Otherwise the output looks like a standard year-month literal string followed by a day-time literal string, with explicit signs added to disambiguate mixed-sign intervals.\nThe output of the <code>postgres</code> style matches the output of PostgreSQL releases prior to 8.4 when the DateStyle parameter was set to <code>ISO</code>.\nThe output of the <code>postgres_verbose</code> style matches the output of PostgreSQL releases prior to 8.4 when the <code>DateStyle</code> parameter was set to non-<code>ISO</code> output.\nThe output of the <code>iso_8601</code> style matches the \"format with designators\" described in section 4.4.3.2 of the ISO 8601 standard.\nTable 8.18. Interval Output Style Examples\n<table>\n<thead>\n<tr>\n<th>Style Specification</th>\n<th>Year-Month Interval</th>\n<th>Day-Time Interval</th>\n<th>Mixed Interval</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>sql_standard</code></td>\n<td>1-2</td>\n<td>3 4:05:06</td>\n<td>-1-2 +3 -4:05:06</td>\n</tr>\n<tr>\n<td><code>postgres</code></td>\n<td>1 year 2 mons</td>\n<td>3 days 04:05:06</td>\n<td>-1 year -2 mons +3 days -04:05:06</td>\n</tr>\n<tr>\n<td><code>postgres_verbose</code></td>\n<td>@ 1 year 2 mons</td>\n<td>@ 3 days 4 hours 5 mins 6 secs</td>\n<td>@ 1 year 2 mons -3 days 4 hours 5 mins 6 secs ago</td>\n</tr>\n<tr>\n<td><code>iso_8601</code></td>\n<td>P1Y2M</td>\n<td>P3DT4H5M6S</td>\n<td>P-1Y-2M3DT-4H-5M-6S</td>\n</tr>\n</tbody>\n</table>\n",
        "example": [],
        "link": [
            "https://www.postgresql.org/docs/12/datatype-datetime.html"
        ]
    },
    {
        "type": "type",
        "keyword": "interval MINUTE",
        "tree": "(simpletypename (constinterval INTERVAL) (opt_interval MINUTE))",
        "description": [
            "time span",
            "time interval"
        ],
        "detail": "[DESCRIPTION]: time span; time interval<sep>[STORAGE SIZE]: 16 bytes<sep>[LOW VALUE]: -178000000 years<sep>[HIGH VALUE]: 178000000 years<sep>[COMPENSATE]: <code>time</code>, <code>timestamp</code>, and <code>interval</code> accept an optional precision value <code>p</code> which specifies the number of fractional digits retained in the seconds field. By default, there is no explicit bound on precision. The allowed range of <code>p</code> is from 0 to 6.; The <code>interval</code> type has an additional option, which is to restrict the set of stored fields by writing one of these phrases:; where <code>p</code> is an optional precision specification giving the number of fractional digits in the seconds field. Precision can be specified for <code>time</code>, <code>timestamp</code>, and <code>interval</code> types, and can range from 0 to 6. If no precision is specified in a constant specification, it defaults to the precision of the literal value (but not more than 6 digits).; \n<code>interval</code> values can be written using the following verbose syntax:\n<code>\n[@] <code>quantity</code> <code>unit</code> [<code>quantity</code> <code>unit</code>...] [<code>direction</code>]\n</code>\nwhere <code>quantity</code> is a number (possibly signed); <code>unit</code> is <code>microsecond</code>, <code>millisecond</code>, <code>second</code>, <code>minute</code>, <code>hour</code>, <code>day</code>, <code>week</code>, <code>month</code>, <code>year</code>, <code>decade</code>, <code>century</code>, <code>millennium</code>, or abbreviations or plurals of these units; <code>direction</code> can be <code>ago</code> or empty. The at sign (<code>@</code>) is optional noise. The amounts of the different units are implicitly added with appropriate sign accounting. <code>ago</code> negates all the fields. This syntax is also used for interval output, if IntervalStyle is set to <code>postgres_verbose</code>.\nQuantities of days, hours, minutes, and seconds can be specified without explicit unit markings. For example, <code>'1 12:59:10'</code> is read the same as <code>'1 day 12 hours 59 min 10 sec'</code>. Also, a combination of years and months can be specified with a dash; for example <code>'200-10'</code> is read the same as <code>'200 years 10 months'</code>. (These shorter forms are in fact the only ones allowed by the SQL standard, and are used for output when <code>IntervalStyle</code> is set to <code>sql_standard</code>.)\nInterval values can also be written as ISO 8601 time intervals, using either the \"format with designators\" of the standard's section 4.4.3.2 or the \"alternative format\" of section 4.4.3.3. The format with designators looks like this:\n<code>\nP <code>quantity</code> <code>unit</code> [ <code>quantity</code> <code>unit</code> ...] [ T [ <code>quantity</code> <code>unit</code> ...]]\n</code>\nThe string must start with a <code>P</code>, and may include a <code>T</code> that introduces the time-of-day units. The available unit abbreviations are given in Table 8.16. Units may be omitted, and may be specified in any order, but units smaller than a day must appear after <code>T</code>. In particular, the meaning of <code>M</code> depends on whether it is before or after <code>T</code>.\nTable 8.16. ISO 8601 Interval Unit Abbreviations\n<table>\n<thead>\n<tr>\n<th>Abbreviation</th>\n<th>Meaning</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Y</td>\n<td>Years</td>\n</tr>\n<tr>\n<td>M</td>\n<td>Months (in the date part)</td>\n</tr>\n<tr>\n<td>W</td>\n<td>Weeks</td>\n</tr>\n<tr>\n<td>D</td>\n<td>Days</td>\n</tr>\n<tr>\n<td>H</td>\n<td>Hours</td>\n</tr>\n<tr>\n<td>M</td>\n<td>Minutes (in the time part)</td>\n</tr>\n<tr>\n<td>S</td>\n<td>Seconds</td>\n</tr>\n</tbody>\n</table>\nIn the alternative format:\n<code>\nP [ <code>years</code>-<code>months</code>-<code>days</code> ] [ T <code>hours</code>:<code>minutes</code>:<code>seconds</code> ]\n</code>\nthe string must begin with <code>P</code>, and a <code>T</code> separates the date and time parts of the interval. The values are given as numbers similar to ISO 8601 dates.\nWhen writing an interval constant with a <code>fields</code> specification, or when assigning a string to an interval column that was defined with a <code>fields</code> specification, the interpretation of unmarked quantities depends on the <code>fields</code>. For example <code>INTERVAL '1' YEAR</code> is read as 1 year, whereas <code>INTERVAL '1'</code> means 1 second. Also, field values \"to the right\" of the least significant field allowed by the <code>fields</code> specification are silently discarded. For example, writing <code>INTERVAL '1 day 2:03:04' HOUR TO MINUTE</code> results in dropping the seconds field, but not the day field.\nAccording to the SQL standard all fields of an interval value must have the same sign, so a leading negative sign applies to all fields; for example the negative sign in the interval literal <code>'-1 2:03:04'</code> applies to both the days and hour/minute/second parts. PostgreSQL allows the fields to have different signs, and traditionally treats each field in the textual representation as independently signed, so that the hour/minute/second part is considered positive in this example. If <code>IntervalStyle</code> is set to <code>sql_standard</code> then a leading sign is considered to apply to all fields (but only if no additional signs appear). Otherwise the traditional PostgreSQL interpretation is used. To avoid ambiguity, it's recommended to attach an explicit sign to each field if any field is negative.\nField values can have fractional parts: for example, <code>'1.5 weeks'</code> or <code>'01:02:03.45'</code>. However, because interval internally stores only three integer units (months, days, microseconds), fractional units must be spilled to smaller units. Fractional parts of units greater than months are truncated to be an integer number of months, e.g. <code>'1.5 years'</code> becomes <code>'1 year 6 mons'</code>. Fractional parts of weeks and days are computed to be an integer number of days and microseconds, assuming 30 days per month and 24 hours per day, e.g., <code>'1.75 months'</code> becomes <code>1 mon 22 days 12:00:00</code>. Only seconds will ever be shown as fractional on output.\nTable 8.17 shows some examples of valid <code>interval</code> input.\nTable 8.17. Interval Input\n<table>\n<thead>\n<tr>\n<th>Example</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1-2</td>\n<td>SQL standard format: 1 year 2 months</td>\n</tr>\n<tr>\n<td>3 4:05:06</td>\n<td>SQL standard format: 3 days 4 hours 5 minutes 6 seconds</td>\n</tr>\n<tr>\n<td>1 year 2 months 3 days 4 hours 5 minutes 6 seconds</td>\n<td>Traditional Postgres format: 1 year 2 months 3 days 4 hours 5 minutes 6 seconds</td>\n</tr>\n<tr>\n<td>P1Y2M3DT4H5M6S</td>\n<td>ISO 8601 \"format with designators\": same meaning as above</td>\n</tr>\n<tr>\n<td>P0001-02-03T04:05:06</td>\n<td>ISO 8601 \"alternative format\": same meaning as above</td>\n</tr>\n</tbody>\n</table>\nInternally <code>interval</code> values are stored as months, days, and microseconds. This is done because the number of days in a month varies, and a day can have 23 or 25 hours if a daylight savings time adjustment is involved. The months and days fields are integers while the microseconds field can store fractional seconds. Because intervals are usually created from constant strings or <code>timestamp</code> subtraction, this storage method works well in most cases, but can cause unexpected results:\n<code>\nSELECT EXTRACT(hours from '80 minutes'::interval);\n date_part\n-----------\n 1\nSELECT EXTRACT(days from '80 hours'::interval);\n date_part\n-----------\n 0\n</code>\nFunctions <code>justify_days</code> and <code>justify_hours</code> are available for adjusting days and hours that overflow their normal ranges.\n; \nThe output format of the interval type can be set to one of the four styles <code>sql_standard</code>, <code>postgres</code>, <code>postgres_verbose</code>, or <code>iso_8601</code>, using the command <code>SET intervalstyle</code>. The default is the <code>postgres</code> format. Table 8.18 shows examples of each output style.\nThe <code>sql_standard</code> style produces output that conforms to the SQL standard's specification for interval literal strings, if the interval value meets the standard's restrictions (either year-month only or day-time only, with no mixing of positive and negative components). Otherwise the output looks like a standard year-month literal string followed by a day-time literal string, with explicit signs added to disambiguate mixed-sign intervals.\nThe output of the <code>postgres</code> style matches the output of PostgreSQL releases prior to 8.4 when the DateStyle parameter was set to <code>ISO</code>.\nThe output of the <code>postgres_verbose</code> style matches the output of PostgreSQL releases prior to 8.4 when the <code>DateStyle</code> parameter was set to non-<code>ISO</code> output.\nThe output of the <code>iso_8601</code> style matches the \"format with designators\" described in section 4.4.3.2 of the ISO 8601 standard.\nTable 8.18. Interval Output Style Examples\n<table>\n<thead>\n<tr>\n<th>Style Specification</th>\n<th>Year-Month Interval</th>\n<th>Day-Time Interval</th>\n<th>Mixed Interval</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>sql_standard</code></td>\n<td>1-2</td>\n<td>3 4:05:06</td>\n<td>-1-2 +3 -4:05:06</td>\n</tr>\n<tr>\n<td><code>postgres</code></td>\n<td>1 year 2 mons</td>\n<td>3 days 04:05:06</td>\n<td>-1 year -2 mons +3 days -04:05:06</td>\n</tr>\n<tr>\n<td><code>postgres_verbose</code></td>\n<td>@ 1 year 2 mons</td>\n<td>@ 3 days 4 hours 5 mins 6 secs</td>\n<td>@ 1 year 2 mons -3 days 4 hours 5 mins 6 secs ago</td>\n</tr>\n<tr>\n<td><code>iso_8601</code></td>\n<td>P1Y2M</td>\n<td>P3DT4H5M6S</td>\n<td>P-1Y-2M3DT-4H-5M-6S</td>\n</tr>\n</tbody>\n</table>\n",
        "example": [],
        "link": [
            "https://www.postgresql.org/docs/12/datatype-datetime.html"
        ]
    },
    {
        "type": "type",
        "keyword": "interval SECOND",
        "tree": "(simpletypename (constinterval INTERVAL) (opt_interval (interval_second SECOND)))",
        "description": [
            "time span",
            "time interval"
        ],
        "detail": "[DESCRIPTION]: time span; time interval<sep>[STORAGE SIZE]: 16 bytes<sep>[LOW VALUE]: -178000000 years<sep>[HIGH VALUE]: 178000000 years<sep>[COMPENSATE]: <code>time</code>, <code>timestamp</code>, and <code>interval</code> accept an optional precision value <code>p</code> which specifies the number of fractional digits retained in the seconds field. By default, there is no explicit bound on precision. The allowed range of <code>p</code> is from 0 to 6.; The <code>interval</code> type has an additional option, which is to restrict the set of stored fields by writing one of these phrases:; where <code>p</code> is an optional precision specification giving the number of fractional digits in the seconds field. Precision can be specified for <code>time</code>, <code>timestamp</code>, and <code>interval</code> types, and can range from 0 to 6. If no precision is specified in a constant specification, it defaults to the precision of the literal value (but not more than 6 digits).; \n<code>interval</code> values can be written using the following verbose syntax:\n<code>\n[@] <code>quantity</code> <code>unit</code> [<code>quantity</code> <code>unit</code>...] [<code>direction</code>]\n</code>\nwhere <code>quantity</code> is a number (possibly signed); <code>unit</code> is <code>microsecond</code>, <code>millisecond</code>, <code>second</code>, <code>minute</code>, <code>hour</code>, <code>day</code>, <code>week</code>, <code>month</code>, <code>year</code>, <code>decade</code>, <code>century</code>, <code>millennium</code>, or abbreviations or plurals of these units; <code>direction</code> can be <code>ago</code> or empty. The at sign (<code>@</code>) is optional noise. The amounts of the different units are implicitly added with appropriate sign accounting. <code>ago</code> negates all the fields. This syntax is also used for interval output, if IntervalStyle is set to <code>postgres_verbose</code>.\nQuantities of days, hours, minutes, and seconds can be specified without explicit unit markings. For example, <code>'1 12:59:10'</code> is read the same as <code>'1 day 12 hours 59 min 10 sec'</code>. Also, a combination of years and months can be specified with a dash; for example <code>'200-10'</code> is read the same as <code>'200 years 10 months'</code>. (These shorter forms are in fact the only ones allowed by the SQL standard, and are used for output when <code>IntervalStyle</code> is set to <code>sql_standard</code>.)\nInterval values can also be written as ISO 8601 time intervals, using either the \"format with designators\" of the standard's section 4.4.3.2 or the \"alternative format\" of section 4.4.3.3. The format with designators looks like this:\n<code>\nP <code>quantity</code> <code>unit</code> [ <code>quantity</code> <code>unit</code> ...] [ T [ <code>quantity</code> <code>unit</code> ...]]\n</code>\nThe string must start with a <code>P</code>, and may include a <code>T</code> that introduces the time-of-day units. The available unit abbreviations are given in Table 8.16. Units may be omitted, and may be specified in any order, but units smaller than a day must appear after <code>T</code>. In particular, the meaning of <code>M</code> depends on whether it is before or after <code>T</code>.\nTable 8.16. ISO 8601 Interval Unit Abbreviations\n<table>\n<thead>\n<tr>\n<th>Abbreviation</th>\n<th>Meaning</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Y</td>\n<td>Years</td>\n</tr>\n<tr>\n<td>M</td>\n<td>Months (in the date part)</td>\n</tr>\n<tr>\n<td>W</td>\n<td>Weeks</td>\n</tr>\n<tr>\n<td>D</td>\n<td>Days</td>\n</tr>\n<tr>\n<td>H</td>\n<td>Hours</td>\n</tr>\n<tr>\n<td>M</td>\n<td>Minutes (in the time part)</td>\n</tr>\n<tr>\n<td>S</td>\n<td>Seconds</td>\n</tr>\n</tbody>\n</table>\nIn the alternative format:\n<code>\nP [ <code>years</code>-<code>months</code>-<code>days</code> ] [ T <code>hours</code>:<code>minutes</code>:<code>seconds</code> ]\n</code>\nthe string must begin with <code>P</code>, and a <code>T</code> separates the date and time parts of the interval. The values are given as numbers similar to ISO 8601 dates.\nWhen writing an interval constant with a <code>fields</code> specification, or when assigning a string to an interval column that was defined with a <code>fields</code> specification, the interpretation of unmarked quantities depends on the <code>fields</code>. For example <code>INTERVAL '1' YEAR</code> is read as 1 year, whereas <code>INTERVAL '1'</code> means 1 second. Also, field values \"to the right\" of the least significant field allowed by the <code>fields</code> specification are silently discarded. For example, writing <code>INTERVAL '1 day 2:03:04' HOUR TO MINUTE</code> results in dropping the seconds field, but not the day field.\nAccording to the SQL standard all fields of an interval value must have the same sign, so a leading negative sign applies to all fields; for example the negative sign in the interval literal <code>'-1 2:03:04'</code> applies to both the days and hour/minute/second parts. PostgreSQL allows the fields to have different signs, and traditionally treats each field in the textual representation as independently signed, so that the hour/minute/second part is considered positive in this example. If <code>IntervalStyle</code> is set to <code>sql_standard</code> then a leading sign is considered to apply to all fields (but only if no additional signs appear). Otherwise the traditional PostgreSQL interpretation is used. To avoid ambiguity, it's recommended to attach an explicit sign to each field if any field is negative.\nField values can have fractional parts: for example, <code>'1.5 weeks'</code> or <code>'01:02:03.45'</code>. However, because interval internally stores only three integer units (months, days, microseconds), fractional units must be spilled to smaller units. Fractional parts of units greater than months are truncated to be an integer number of months, e.g. <code>'1.5 years'</code> becomes <code>'1 year 6 mons'</code>. Fractional parts of weeks and days are computed to be an integer number of days and microseconds, assuming 30 days per month and 24 hours per day, e.g., <code>'1.75 months'</code> becomes <code>1 mon 22 days 12:00:00</code>. Only seconds will ever be shown as fractional on output.\nTable 8.17 shows some examples of valid <code>interval</code> input.\nTable 8.17. Interval Input\n<table>\n<thead>\n<tr>\n<th>Example</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1-2</td>\n<td>SQL standard format: 1 year 2 months</td>\n</tr>\n<tr>\n<td>3 4:05:06</td>\n<td>SQL standard format: 3 days 4 hours 5 minutes 6 seconds</td>\n</tr>\n<tr>\n<td>1 year 2 months 3 days 4 hours 5 minutes 6 seconds</td>\n<td>Traditional Postgres format: 1 year 2 months 3 days 4 hours 5 minutes 6 seconds</td>\n</tr>\n<tr>\n<td>P1Y2M3DT4H5M6S</td>\n<td>ISO 8601 \"format with designators\": same meaning as above</td>\n</tr>\n<tr>\n<td>P0001-02-03T04:05:06</td>\n<td>ISO 8601 \"alternative format\": same meaning as above</td>\n</tr>\n</tbody>\n</table>\nInternally <code>interval</code> values are stored as months, days, and microseconds. This is done because the number of days in a month varies, and a day can have 23 or 25 hours if a daylight savings time adjustment is involved. The months and days fields are integers while the microseconds field can store fractional seconds. Because intervals are usually created from constant strings or <code>timestamp</code> subtraction, this storage method works well in most cases, but can cause unexpected results:\n<code>\nSELECT EXTRACT(hours from '80 minutes'::interval);\n date_part\n-----------\n 1\nSELECT EXTRACT(days from '80 hours'::interval);\n date_part\n-----------\n 0\n</code>\nFunctions <code>justify_days</code> and <code>justify_hours</code> are available for adjusting days and hours that overflow their normal ranges.\n; \nThe output format of the interval type can be set to one of the four styles <code>sql_standard</code>, <code>postgres</code>, <code>postgres_verbose</code>, or <code>iso_8601</code>, using the command <code>SET intervalstyle</code>. The default is the <code>postgres</code> format. Table 8.18 shows examples of each output style.\nThe <code>sql_standard</code> style produces output that conforms to the SQL standard's specification for interval literal strings, if the interval value meets the standard's restrictions (either year-month only or day-time only, with no mixing of positive and negative components). Otherwise the output looks like a standard year-month literal string followed by a day-time literal string, with explicit signs added to disambiguate mixed-sign intervals.\nThe output of the <code>postgres</code> style matches the output of PostgreSQL releases prior to 8.4 when the DateStyle parameter was set to <code>ISO</code>.\nThe output of the <code>postgres_verbose</code> style matches the output of PostgreSQL releases prior to 8.4 when the <code>DateStyle</code> parameter was set to non-<code>ISO</code> output.\nThe output of the <code>iso_8601</code> style matches the \"format with designators\" described in section 4.4.3.2 of the ISO 8601 standard.\nTable 8.18. Interval Output Style Examples\n<table>\n<thead>\n<tr>\n<th>Style Specification</th>\n<th>Year-Month Interval</th>\n<th>Day-Time Interval</th>\n<th>Mixed Interval</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>sql_standard</code></td>\n<td>1-2</td>\n<td>3 4:05:06</td>\n<td>-1-2 +3 -4:05:06</td>\n</tr>\n<tr>\n<td><code>postgres</code></td>\n<td>1 year 2 mons</td>\n<td>3 days 04:05:06</td>\n<td>-1 year -2 mons +3 days -04:05:06</td>\n</tr>\n<tr>\n<td><code>postgres_verbose</code></td>\n<td>@ 1 year 2 mons</td>\n<td>@ 3 days 4 hours 5 mins 6 secs</td>\n<td>@ 1 year 2 mons -3 days 4 hours 5 mins 6 secs ago</td>\n</tr>\n<tr>\n<td><code>iso_8601</code></td>\n<td>P1Y2M</td>\n<td>P3DT4H5M6S</td>\n<td>P-1Y-2M3DT-4H-5M-6S</td>\n</tr>\n</tbody>\n</table>\n",
        "example": [],
        "link": [
            "https://www.postgresql.org/docs/12/datatype-datetime.html"
        ]
    },
    {
        "type": "type",
        "keyword": "interval SECOND ( p )",
        "tree": "(simpletypename (constinterval INTERVAL) (opt_interval (interval_second SECOND ( ))))",
        "description": [
            "time span",
            "time interval"
        ],
        "detail": "[DESCRIPTION]: time span; time interval<sep>[STORAGE SIZE]: 16 bytes<sep>[LOW VALUE]: -178000000 years<sep>[HIGH VALUE]: 178000000 years<sep>[COMPENSATE]: <code>time</code>, <code>timestamp</code>, and <code>interval</code> accept an optional precision value <code>p</code> which specifies the number of fractional digits retained in the seconds field. By default, there is no explicit bound on precision. The allowed range of <code>p</code> is from 0 to 6.; The <code>interval</code> type has an additional option, which is to restrict the set of stored fields by writing one of these phrases:; where <code>p</code> is an optional precision specification giving the number of fractional digits in the seconds field. Precision can be specified for <code>time</code>, <code>timestamp</code>, and <code>interval</code> types, and can range from 0 to 6. If no precision is specified in a constant specification, it defaults to the precision of the literal value (but not more than 6 digits).; \n<code>interval</code> values can be written using the following verbose syntax:\n<code>\n[@] <code>quantity</code> <code>unit</code> [<code>quantity</code> <code>unit</code>...] [<code>direction</code>]\n</code>\nwhere <code>quantity</code> is a number (possibly signed); <code>unit</code> is <code>microsecond</code>, <code>millisecond</code>, <code>second</code>, <code>minute</code>, <code>hour</code>, <code>day</code>, <code>week</code>, <code>month</code>, <code>year</code>, <code>decade</code>, <code>century</code>, <code>millennium</code>, or abbreviations or plurals of these units; <code>direction</code> can be <code>ago</code> or empty. The at sign (<code>@</code>) is optional noise. The amounts of the different units are implicitly added with appropriate sign accounting. <code>ago</code> negates all the fields. This syntax is also used for interval output, if IntervalStyle is set to <code>postgres_verbose</code>.\nQuantities of days, hours, minutes, and seconds can be specified without explicit unit markings. For example, <code>'1 12:59:10'</code> is read the same as <code>'1 day 12 hours 59 min 10 sec'</code>. Also, a combination of years and months can be specified with a dash; for example <code>'200-10'</code> is read the same as <code>'200 years 10 months'</code>. (These shorter forms are in fact the only ones allowed by the SQL standard, and are used for output when <code>IntervalStyle</code> is set to <code>sql_standard</code>.)\nInterval values can also be written as ISO 8601 time intervals, using either the \"format with designators\" of the standard's section 4.4.3.2 or the \"alternative format\" of section 4.4.3.3. The format with designators looks like this:\n<code>\nP <code>quantity</code> <code>unit</code> [ <code>quantity</code> <code>unit</code> ...] [ T [ <code>quantity</code> <code>unit</code> ...]]\n</code>\nThe string must start with a <code>P</code>, and may include a <code>T</code> that introduces the time-of-day units. The available unit abbreviations are given in Table 8.16. Units may be omitted, and may be specified in any order, but units smaller than a day must appear after <code>T</code>. In particular, the meaning of <code>M</code> depends on whether it is before or after <code>T</code>.\nTable 8.16. ISO 8601 Interval Unit Abbreviations\n<table>\n<thead>\n<tr>\n<th>Abbreviation</th>\n<th>Meaning</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Y</td>\n<td>Years</td>\n</tr>\n<tr>\n<td>M</td>\n<td>Months (in the date part)</td>\n</tr>\n<tr>\n<td>W</td>\n<td>Weeks</td>\n</tr>\n<tr>\n<td>D</td>\n<td>Days</td>\n</tr>\n<tr>\n<td>H</td>\n<td>Hours</td>\n</tr>\n<tr>\n<td>M</td>\n<td>Minutes (in the time part)</td>\n</tr>\n<tr>\n<td>S</td>\n<td>Seconds</td>\n</tr>\n</tbody>\n</table>\nIn the alternative format:\n<code>\nP [ <code>years</code>-<code>months</code>-<code>days</code> ] [ T <code>hours</code>:<code>minutes</code>:<code>seconds</code> ]\n</code>\nthe string must begin with <code>P</code>, and a <code>T</code> separates the date and time parts of the interval. The values are given as numbers similar to ISO 8601 dates.\nWhen writing an interval constant with a <code>fields</code> specification, or when assigning a string to an interval column that was defined with a <code>fields</code> specification, the interpretation of unmarked quantities depends on the <code>fields</code>. For example <code>INTERVAL '1' YEAR</code> is read as 1 year, whereas <code>INTERVAL '1'</code> means 1 second. Also, field values \"to the right\" of the least significant field allowed by the <code>fields</code> specification are silently discarded. For example, writing <code>INTERVAL '1 day 2:03:04' HOUR TO MINUTE</code> results in dropping the seconds field, but not the day field.\nAccording to the SQL standard all fields of an interval value must have the same sign, so a leading negative sign applies to all fields; for example the negative sign in the interval literal <code>'-1 2:03:04'</code> applies to both the days and hour/minute/second parts. PostgreSQL allows the fields to have different signs, and traditionally treats each field in the textual representation as independently signed, so that the hour/minute/second part is considered positive in this example. If <code>IntervalStyle</code> is set to <code>sql_standard</code> then a leading sign is considered to apply to all fields (but only if no additional signs appear). Otherwise the traditional PostgreSQL interpretation is used. To avoid ambiguity, it's recommended to attach an explicit sign to each field if any field is negative.\nField values can have fractional parts: for example, <code>'1.5 weeks'</code> or <code>'01:02:03.45'</code>. However, because interval internally stores only three integer units (months, days, microseconds), fractional units must be spilled to smaller units. Fractional parts of units greater than months are truncated to be an integer number of months, e.g. <code>'1.5 years'</code> becomes <code>'1 year 6 mons'</code>. Fractional parts of weeks and days are computed to be an integer number of days and microseconds, assuming 30 days per month and 24 hours per day, e.g., <code>'1.75 months'</code> becomes <code>1 mon 22 days 12:00:00</code>. Only seconds will ever be shown as fractional on output.\nTable 8.17 shows some examples of valid <code>interval</code> input.\nTable 8.17. Interval Input\n<table>\n<thead>\n<tr>\n<th>Example</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1-2</td>\n<td>SQL standard format: 1 year 2 months</td>\n</tr>\n<tr>\n<td>3 4:05:06</td>\n<td>SQL standard format: 3 days 4 hours 5 minutes 6 seconds</td>\n</tr>\n<tr>\n<td>1 year 2 months 3 days 4 hours 5 minutes 6 seconds</td>\n<td>Traditional Postgres format: 1 year 2 months 3 days 4 hours 5 minutes 6 seconds</td>\n</tr>\n<tr>\n<td>P1Y2M3DT4H5M6S</td>\n<td>ISO 8601 \"format with designators\": same meaning as above</td>\n</tr>\n<tr>\n<td>P0001-02-03T04:05:06</td>\n<td>ISO 8601 \"alternative format\": same meaning as above</td>\n</tr>\n</tbody>\n</table>\nInternally <code>interval</code> values are stored as months, days, and microseconds. This is done because the number of days in a month varies, and a day can have 23 or 25 hours if a daylight savings time adjustment is involved. The months and days fields are integers while the microseconds field can store fractional seconds. Because intervals are usually created from constant strings or <code>timestamp</code> subtraction, this storage method works well in most cases, but can cause unexpected results:\n<code>\nSELECT EXTRACT(hours from '80 minutes'::interval);\n date_part\n-----------\n 1\nSELECT EXTRACT(days from '80 hours'::interval);\n date_part\n-----------\n 0\n</code>\nFunctions <code>justify_days</code> and <code>justify_hours</code> are available for adjusting days and hours that overflow their normal ranges.\n; \nThe output format of the interval type can be set to one of the four styles <code>sql_standard</code>, <code>postgres</code>, <code>postgres_verbose</code>, or <code>iso_8601</code>, using the command <code>SET intervalstyle</code>. The default is the <code>postgres</code> format. Table 8.18 shows examples of each output style.\nThe <code>sql_standard</code> style produces output that conforms to the SQL standard's specification for interval literal strings, if the interval value meets the standard's restrictions (either year-month only or day-time only, with no mixing of positive and negative components). Otherwise the output looks like a standard year-month literal string followed by a day-time literal string, with explicit signs added to disambiguate mixed-sign intervals.\nThe output of the <code>postgres</code> style matches the output of PostgreSQL releases prior to 8.4 when the DateStyle parameter was set to <code>ISO</code>.\nThe output of the <code>postgres_verbose</code> style matches the output of PostgreSQL releases prior to 8.4 when the <code>DateStyle</code> parameter was set to non-<code>ISO</code> output.\nThe output of the <code>iso_8601</code> style matches the \"format with designators\" described in section 4.4.3.2 of the ISO 8601 standard.\nTable 8.18. Interval Output Style Examples\n<table>\n<thead>\n<tr>\n<th>Style Specification</th>\n<th>Year-Month Interval</th>\n<th>Day-Time Interval</th>\n<th>Mixed Interval</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>sql_standard</code></td>\n<td>1-2</td>\n<td>3 4:05:06</td>\n<td>-1-2 +3 -4:05:06</td>\n</tr>\n<tr>\n<td><code>postgres</code></td>\n<td>1 year 2 mons</td>\n<td>3 days 04:05:06</td>\n<td>-1 year -2 mons +3 days -04:05:06</td>\n</tr>\n<tr>\n<td><code>postgres_verbose</code></td>\n<td>@ 1 year 2 mons</td>\n<td>@ 3 days 4 hours 5 mins 6 secs</td>\n<td>@ 1 year 2 mons -3 days 4 hours 5 mins 6 secs ago</td>\n</tr>\n<tr>\n<td><code>iso_8601</code></td>\n<td>P1Y2M</td>\n<td>P3DT4H5M6S</td>\n<td>P-1Y-2M3DT-4H-5M-6S</td>\n</tr>\n</tbody>\n</table>\n",
        "example": [],
        "link": [
            "https://www.postgresql.org/docs/12/datatype-datetime.html"
        ]
    },
    {
        "type": "type",
        "keyword": "interval YEAR TO MONTH",
        "tree": "(simpletypename (constinterval INTERVAL) (opt_interval YEAR TO MONTH))",
        "description": [
            "time span",
            "time interval"
        ],
        "detail": "[DESCRIPTION]: time span; time interval<sep>[STORAGE SIZE]: 16 bytes<sep>[LOW VALUE]: -178000000 years<sep>[HIGH VALUE]: 178000000 years<sep>[COMPENSATE]: <code>time</code>, <code>timestamp</code>, and <code>interval</code> accept an optional precision value <code>p</code> which specifies the number of fractional digits retained in the seconds field. By default, there is no explicit bound on precision. The allowed range of <code>p</code> is from 0 to 6.; The <code>interval</code> type has an additional option, which is to restrict the set of stored fields by writing one of these phrases:; where <code>p</code> is an optional precision specification giving the number of fractional digits in the seconds field. Precision can be specified for <code>time</code>, <code>timestamp</code>, and <code>interval</code> types, and can range from 0 to 6. If no precision is specified in a constant specification, it defaults to the precision of the literal value (but not more than 6 digits).; \n<code>interval</code> values can be written using the following verbose syntax:\n<code>\n[@] <code>quantity</code> <code>unit</code> [<code>quantity</code> <code>unit</code>...] [<code>direction</code>]\n</code>\nwhere <code>quantity</code> is a number (possibly signed); <code>unit</code> is <code>microsecond</code>, <code>millisecond</code>, <code>second</code>, <code>minute</code>, <code>hour</code>, <code>day</code>, <code>week</code>, <code>month</code>, <code>year</code>, <code>decade</code>, <code>century</code>, <code>millennium</code>, or abbreviations or plurals of these units; <code>direction</code> can be <code>ago</code> or empty. The at sign (<code>@</code>) is optional noise. The amounts of the different units are implicitly added with appropriate sign accounting. <code>ago</code> negates all the fields. This syntax is also used for interval output, if IntervalStyle is set to <code>postgres_verbose</code>.\nQuantities of days, hours, minutes, and seconds can be specified without explicit unit markings. For example, <code>'1 12:59:10'</code> is read the same as <code>'1 day 12 hours 59 min 10 sec'</code>. Also, a combination of years and months can be specified with a dash; for example <code>'200-10'</code> is read the same as <code>'200 years 10 months'</code>. (These shorter forms are in fact the only ones allowed by the SQL standard, and are used for output when <code>IntervalStyle</code> is set to <code>sql_standard</code>.)\nInterval values can also be written as ISO 8601 time intervals, using either the \"format with designators\" of the standard's section 4.4.3.2 or the \"alternative format\" of section 4.4.3.3. The format with designators looks like this:\n<code>\nP <code>quantity</code> <code>unit</code> [ <code>quantity</code> <code>unit</code> ...] [ T [ <code>quantity</code> <code>unit</code> ...]]\n</code>\nThe string must start with a <code>P</code>, and may include a <code>T</code> that introduces the time-of-day units. The available unit abbreviations are given in Table 8.16. Units may be omitted, and may be specified in any order, but units smaller than a day must appear after <code>T</code>. In particular, the meaning of <code>M</code> depends on whether it is before or after <code>T</code>.\nTable 8.16. ISO 8601 Interval Unit Abbreviations\n<table>\n<thead>\n<tr>\n<th>Abbreviation</th>\n<th>Meaning</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Y</td>\n<td>Years</td>\n</tr>\n<tr>\n<td>M</td>\n<td>Months (in the date part)</td>\n</tr>\n<tr>\n<td>W</td>\n<td>Weeks</td>\n</tr>\n<tr>\n<td>D</td>\n<td>Days</td>\n</tr>\n<tr>\n<td>H</td>\n<td>Hours</td>\n</tr>\n<tr>\n<td>M</td>\n<td>Minutes (in the time part)</td>\n</tr>\n<tr>\n<td>S</td>\n<td>Seconds</td>\n</tr>\n</tbody>\n</table>\nIn the alternative format:\n<code>\nP [ <code>years</code>-<code>months</code>-<code>days</code> ] [ T <code>hours</code>:<code>minutes</code>:<code>seconds</code> ]\n</code>\nthe string must begin with <code>P</code>, and a <code>T</code> separates the date and time parts of the interval. The values are given as numbers similar to ISO 8601 dates.\nWhen writing an interval constant with a <code>fields</code> specification, or when assigning a string to an interval column that was defined with a <code>fields</code> specification, the interpretation of unmarked quantities depends on the <code>fields</code>. For example <code>INTERVAL '1' YEAR</code> is read as 1 year, whereas <code>INTERVAL '1'</code> means 1 second. Also, field values \"to the right\" of the least significant field allowed by the <code>fields</code> specification are silently discarded. For example, writing <code>INTERVAL '1 day 2:03:04' HOUR TO MINUTE</code> results in dropping the seconds field, but not the day field.\nAccording to the SQL standard all fields of an interval value must have the same sign, so a leading negative sign applies to all fields; for example the negative sign in the interval literal <code>'-1 2:03:04'</code> applies to both the days and hour/minute/second parts. PostgreSQL allows the fields to have different signs, and traditionally treats each field in the textual representation as independently signed, so that the hour/minute/second part is considered positive in this example. If <code>IntervalStyle</code> is set to <code>sql_standard</code> then a leading sign is considered to apply to all fields (but only if no additional signs appear). Otherwise the traditional PostgreSQL interpretation is used. To avoid ambiguity, it's recommended to attach an explicit sign to each field if any field is negative.\nField values can have fractional parts: for example, <code>'1.5 weeks'</code> or <code>'01:02:03.45'</code>. However, because interval internally stores only three integer units (months, days, microseconds), fractional units must be spilled to smaller units. Fractional parts of units greater than months are truncated to be an integer number of months, e.g. <code>'1.5 years'</code> becomes <code>'1 year 6 mons'</code>. Fractional parts of weeks and days are computed to be an integer number of days and microseconds, assuming 30 days per month and 24 hours per day, e.g., <code>'1.75 months'</code> becomes <code>1 mon 22 days 12:00:00</code>. Only seconds will ever be shown as fractional on output.\nTable 8.17 shows some examples of valid <code>interval</code> input.\nTable 8.17. Interval Input\n<table>\n<thead>\n<tr>\n<th>Example</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1-2</td>\n<td>SQL standard format: 1 year 2 months</td>\n</tr>\n<tr>\n<td>3 4:05:06</td>\n<td>SQL standard format: 3 days 4 hours 5 minutes 6 seconds</td>\n</tr>\n<tr>\n<td>1 year 2 months 3 days 4 hours 5 minutes 6 seconds</td>\n<td>Traditional Postgres format: 1 year 2 months 3 days 4 hours 5 minutes 6 seconds</td>\n</tr>\n<tr>\n<td>P1Y2M3DT4H5M6S</td>\n<td>ISO 8601 \"format with designators\": same meaning as above</td>\n</tr>\n<tr>\n<td>P0001-02-03T04:05:06</td>\n<td>ISO 8601 \"alternative format\": same meaning as above</td>\n</tr>\n</tbody>\n</table>\nInternally <code>interval</code> values are stored as months, days, and microseconds. This is done because the number of days in a month varies, and a day can have 23 or 25 hours if a daylight savings time adjustment is involved. The months and days fields are integers while the microseconds field can store fractional seconds. Because intervals are usually created from constant strings or <code>timestamp</code> subtraction, this storage method works well in most cases, but can cause unexpected results:\n<code>\nSELECT EXTRACT(hours from '80 minutes'::interval);\n date_part\n-----------\n 1\nSELECT EXTRACT(days from '80 hours'::interval);\n date_part\n-----------\n 0\n</code>\nFunctions <code>justify_days</code> and <code>justify_hours</code> are available for adjusting days and hours that overflow their normal ranges.\n; \nThe output format of the interval type can be set to one of the four styles <code>sql_standard</code>, <code>postgres</code>, <code>postgres_verbose</code>, or <code>iso_8601</code>, using the command <code>SET intervalstyle</code>. The default is the <code>postgres</code> format. Table 8.18 shows examples of each output style.\nThe <code>sql_standard</code> style produces output that conforms to the SQL standard's specification for interval literal strings, if the interval value meets the standard's restrictions (either year-month only or day-time only, with no mixing of positive and negative components). Otherwise the output looks like a standard year-month literal string followed by a day-time literal string, with explicit signs added to disambiguate mixed-sign intervals.\nThe output of the <code>postgres</code> style matches the output of PostgreSQL releases prior to 8.4 when the DateStyle parameter was set to <code>ISO</code>.\nThe output of the <code>postgres_verbose</code> style matches the output of PostgreSQL releases prior to 8.4 when the <code>DateStyle</code> parameter was set to non-<code>ISO</code> output.\nThe output of the <code>iso_8601</code> style matches the \"format with designators\" described in section 4.4.3.2 of the ISO 8601 standard.\nTable 8.18. Interval Output Style Examples\n<table>\n<thead>\n<tr>\n<th>Style Specification</th>\n<th>Year-Month Interval</th>\n<th>Day-Time Interval</th>\n<th>Mixed Interval</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>sql_standard</code></td>\n<td>1-2</td>\n<td>3 4:05:06</td>\n<td>-1-2 +3 -4:05:06</td>\n</tr>\n<tr>\n<td><code>postgres</code></td>\n<td>1 year 2 mons</td>\n<td>3 days 04:05:06</td>\n<td>-1 year -2 mons +3 days -04:05:06</td>\n</tr>\n<tr>\n<td><code>postgres_verbose</code></td>\n<td>@ 1 year 2 mons</td>\n<td>@ 3 days 4 hours 5 mins 6 secs</td>\n<td>@ 1 year 2 mons -3 days 4 hours 5 mins 6 secs ago</td>\n</tr>\n<tr>\n<td><code>iso_8601</code></td>\n<td>P1Y2M</td>\n<td>P3DT4H5M6S</td>\n<td>P-1Y-2M3DT-4H-5M-6S</td>\n</tr>\n</tbody>\n</table>\n",
        "example": [],
        "link": [
            "https://www.postgresql.org/docs/12/datatype-datetime.html"
        ]
    },
    {
        "type": "type",
        "keyword": "interval DAY TO HOUR",
        "tree": "(simpletypename (constinterval INTERVAL) (opt_interval DAY TO HOUR))",
        "description": [
            "time span",
            "time interval"
        ],
        "detail": "[DESCRIPTION]: time span; time interval<sep>[STORAGE SIZE]: 16 bytes<sep>[LOW VALUE]: -178000000 years<sep>[HIGH VALUE]: 178000000 years<sep>[COMPENSATE]: <code>time</code>, <code>timestamp</code>, and <code>interval</code> accept an optional precision value <code>p</code> which specifies the number of fractional digits retained in the seconds field. By default, there is no explicit bound on precision. The allowed range of <code>p</code> is from 0 to 6.; The <code>interval</code> type has an additional option, which is to restrict the set of stored fields by writing one of these phrases:; where <code>p</code> is an optional precision specification giving the number of fractional digits in the seconds field. Precision can be specified for <code>time</code>, <code>timestamp</code>, and <code>interval</code> types, and can range from 0 to 6. If no precision is specified in a constant specification, it defaults to the precision of the literal value (but not more than 6 digits).; \n<code>interval</code> values can be written using the following verbose syntax:\n<code>\n[@] <code>quantity</code> <code>unit</code> [<code>quantity</code> <code>unit</code>...] [<code>direction</code>]\n</code>\nwhere <code>quantity</code> is a number (possibly signed); <code>unit</code> is <code>microsecond</code>, <code>millisecond</code>, <code>second</code>, <code>minute</code>, <code>hour</code>, <code>day</code>, <code>week</code>, <code>month</code>, <code>year</code>, <code>decade</code>, <code>century</code>, <code>millennium</code>, or abbreviations or plurals of these units; <code>direction</code> can be <code>ago</code> or empty. The at sign (<code>@</code>) is optional noise. The amounts of the different units are implicitly added with appropriate sign accounting. <code>ago</code> negates all the fields. This syntax is also used for interval output, if IntervalStyle is set to <code>postgres_verbose</code>.\nQuantities of days, hours, minutes, and seconds can be specified without explicit unit markings. For example, <code>'1 12:59:10'</code> is read the same as <code>'1 day 12 hours 59 min 10 sec'</code>. Also, a combination of years and months can be specified with a dash; for example <code>'200-10'</code> is read the same as <code>'200 years 10 months'</code>. (These shorter forms are in fact the only ones allowed by the SQL standard, and are used for output when <code>IntervalStyle</code> is set to <code>sql_standard</code>.)\nInterval values can also be written as ISO 8601 time intervals, using either the \"format with designators\" of the standard's section 4.4.3.2 or the \"alternative format\" of section 4.4.3.3. The format with designators looks like this:\n<code>\nP <code>quantity</code> <code>unit</code> [ <code>quantity</code> <code>unit</code> ...] [ T [ <code>quantity</code> <code>unit</code> ...]]\n</code>\nThe string must start with a <code>P</code>, and may include a <code>T</code> that introduces the time-of-day units. The available unit abbreviations are given in Table 8.16. Units may be omitted, and may be specified in any order, but units smaller than a day must appear after <code>T</code>. In particular, the meaning of <code>M</code> depends on whether it is before or after <code>T</code>.\nTable 8.16. ISO 8601 Interval Unit Abbreviations\n<table>\n<thead>\n<tr>\n<th>Abbreviation</th>\n<th>Meaning</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Y</td>\n<td>Years</td>\n</tr>\n<tr>\n<td>M</td>\n<td>Months (in the date part)</td>\n</tr>\n<tr>\n<td>W</td>\n<td>Weeks</td>\n</tr>\n<tr>\n<td>D</td>\n<td>Days</td>\n</tr>\n<tr>\n<td>H</td>\n<td>Hours</td>\n</tr>\n<tr>\n<td>M</td>\n<td>Minutes (in the time part)</td>\n</tr>\n<tr>\n<td>S</td>\n<td>Seconds</td>\n</tr>\n</tbody>\n</table>\nIn the alternative format:\n<code>\nP [ <code>years</code>-<code>months</code>-<code>days</code> ] [ T <code>hours</code>:<code>minutes</code>:<code>seconds</code> ]\n</code>\nthe string must begin with <code>P</code>, and a <code>T</code> separates the date and time parts of the interval. The values are given as numbers similar to ISO 8601 dates.\nWhen writing an interval constant with a <code>fields</code> specification, or when assigning a string to an interval column that was defined with a <code>fields</code> specification, the interpretation of unmarked quantities depends on the <code>fields</code>. For example <code>INTERVAL '1' YEAR</code> is read as 1 year, whereas <code>INTERVAL '1'</code> means 1 second. Also, field values \"to the right\" of the least significant field allowed by the <code>fields</code> specification are silently discarded. For example, writing <code>INTERVAL '1 day 2:03:04' HOUR TO MINUTE</code> results in dropping the seconds field, but not the day field.\nAccording to the SQL standard all fields of an interval value must have the same sign, so a leading negative sign applies to all fields; for example the negative sign in the interval literal <code>'-1 2:03:04'</code> applies to both the days and hour/minute/second parts. PostgreSQL allows the fields to have different signs, and traditionally treats each field in the textual representation as independently signed, so that the hour/minute/second part is considered positive in this example. If <code>IntervalStyle</code> is set to <code>sql_standard</code> then a leading sign is considered to apply to all fields (but only if no additional signs appear). Otherwise the traditional PostgreSQL interpretation is used. To avoid ambiguity, it's recommended to attach an explicit sign to each field if any field is negative.\nField values can have fractional parts: for example, <code>'1.5 weeks'</code> or <code>'01:02:03.45'</code>. However, because interval internally stores only three integer units (months, days, microseconds), fractional units must be spilled to smaller units. Fractional parts of units greater than months are truncated to be an integer number of months, e.g. <code>'1.5 years'</code> becomes <code>'1 year 6 mons'</code>. Fractional parts of weeks and days are computed to be an integer number of days and microseconds, assuming 30 days per month and 24 hours per day, e.g., <code>'1.75 months'</code> becomes <code>1 mon 22 days 12:00:00</code>. Only seconds will ever be shown as fractional on output.\nTable 8.17 shows some examples of valid <code>interval</code> input.\nTable 8.17. Interval Input\n<table>\n<thead>\n<tr>\n<th>Example</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1-2</td>\n<td>SQL standard format: 1 year 2 months</td>\n</tr>\n<tr>\n<td>3 4:05:06</td>\n<td>SQL standard format: 3 days 4 hours 5 minutes 6 seconds</td>\n</tr>\n<tr>\n<td>1 year 2 months 3 days 4 hours 5 minutes 6 seconds</td>\n<td>Traditional Postgres format: 1 year 2 months 3 days 4 hours 5 minutes 6 seconds</td>\n</tr>\n<tr>\n<td>P1Y2M3DT4H5M6S</td>\n<td>ISO 8601 \"format with designators\": same meaning as above</td>\n</tr>\n<tr>\n<td>P0001-02-03T04:05:06</td>\n<td>ISO 8601 \"alternative format\": same meaning as above</td>\n</tr>\n</tbody>\n</table>\nInternally <code>interval</code> values are stored as months, days, and microseconds. This is done because the number of days in a month varies, and a day can have 23 or 25 hours if a daylight savings time adjustment is involved. The months and days fields are integers while the microseconds field can store fractional seconds. Because intervals are usually created from constant strings or <code>timestamp</code> subtraction, this storage method works well in most cases, but can cause unexpected results:\n<code>\nSELECT EXTRACT(hours from '80 minutes'::interval);\n date_part\n-----------\n 1\nSELECT EXTRACT(days from '80 hours'::interval);\n date_part\n-----------\n 0\n</code>\nFunctions <code>justify_days</code> and <code>justify_hours</code> are available for adjusting days and hours that overflow their normal ranges.\n; \nThe output format of the interval type can be set to one of the four styles <code>sql_standard</code>, <code>postgres</code>, <code>postgres_verbose</code>, or <code>iso_8601</code>, using the command <code>SET intervalstyle</code>. The default is the <code>postgres</code> format. Table 8.18 shows examples of each output style.\nThe <code>sql_standard</code> style produces output that conforms to the SQL standard's specification for interval literal strings, if the interval value meets the standard's restrictions (either year-month only or day-time only, with no mixing of positive and negative components). Otherwise the output looks like a standard year-month literal string followed by a day-time literal string, with explicit signs added to disambiguate mixed-sign intervals.\nThe output of the <code>postgres</code> style matches the output of PostgreSQL releases prior to 8.4 when the DateStyle parameter was set to <code>ISO</code>.\nThe output of the <code>postgres_verbose</code> style matches the output of PostgreSQL releases prior to 8.4 when the <code>DateStyle</code> parameter was set to non-<code>ISO</code> output.\nThe output of the <code>iso_8601</code> style matches the \"format with designators\" described in section 4.4.3.2 of the ISO 8601 standard.\nTable 8.18. Interval Output Style Examples\n<table>\n<thead>\n<tr>\n<th>Style Specification</th>\n<th>Year-Month Interval</th>\n<th>Day-Time Interval</th>\n<th>Mixed Interval</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>sql_standard</code></td>\n<td>1-2</td>\n<td>3 4:05:06</td>\n<td>-1-2 +3 -4:05:06</td>\n</tr>\n<tr>\n<td><code>postgres</code></td>\n<td>1 year 2 mons</td>\n<td>3 days 04:05:06</td>\n<td>-1 year -2 mons +3 days -04:05:06</td>\n</tr>\n<tr>\n<td><code>postgres_verbose</code></td>\n<td>@ 1 year 2 mons</td>\n<td>@ 3 days 4 hours 5 mins 6 secs</td>\n<td>@ 1 year 2 mons -3 days 4 hours 5 mins 6 secs ago</td>\n</tr>\n<tr>\n<td><code>iso_8601</code></td>\n<td>P1Y2M</td>\n<td>P3DT4H5M6S</td>\n<td>P-1Y-2M3DT-4H-5M-6S</td>\n</tr>\n</tbody>\n</table>\n",
        "example": [],
        "link": [
            "https://www.postgresql.org/docs/12/datatype-datetime.html"
        ]
    },
    {
        "type": "type",
        "keyword": "interval DAY TO MINUTE",
        "tree": "(simpletypename (constinterval INTERVAL) (opt_interval DAY TO MINUTE))",
        "description": [
            "time span",
            "time interval"
        ],
        "detail": "[DESCRIPTION]: time span; time interval<sep>[STORAGE SIZE]: 16 bytes<sep>[LOW VALUE]: -178000000 years<sep>[HIGH VALUE]: 178000000 years<sep>[COMPENSATE]: <code>time</code>, <code>timestamp</code>, and <code>interval</code> accept an optional precision value <code>p</code> which specifies the number of fractional digits retained in the seconds field. By default, there is no explicit bound on precision. The allowed range of <code>p</code> is from 0 to 6.; The <code>interval</code> type has an additional option, which is to restrict the set of stored fields by writing one of these phrases:; where <code>p</code> is an optional precision specification giving the number of fractional digits in the seconds field. Precision can be specified for <code>time</code>, <code>timestamp</code>, and <code>interval</code> types, and can range from 0 to 6. If no precision is specified in a constant specification, it defaults to the precision of the literal value (but not more than 6 digits).; \n<code>interval</code> values can be written using the following verbose syntax:\n<code>\n[@] <code>quantity</code> <code>unit</code> [<code>quantity</code> <code>unit</code>...] [<code>direction</code>]\n</code>\nwhere <code>quantity</code> is a number (possibly signed); <code>unit</code> is <code>microsecond</code>, <code>millisecond</code>, <code>second</code>, <code>minute</code>, <code>hour</code>, <code>day</code>, <code>week</code>, <code>month</code>, <code>year</code>, <code>decade</code>, <code>century</code>, <code>millennium</code>, or abbreviations or plurals of these units; <code>direction</code> can be <code>ago</code> or empty. The at sign (<code>@</code>) is optional noise. The amounts of the different units are implicitly added with appropriate sign accounting. <code>ago</code> negates all the fields. This syntax is also used for interval output, if IntervalStyle is set to <code>postgres_verbose</code>.\nQuantities of days, hours, minutes, and seconds can be specified without explicit unit markings. For example, <code>'1 12:59:10'</code> is read the same as <code>'1 day 12 hours 59 min 10 sec'</code>. Also, a combination of years and months can be specified with a dash; for example <code>'200-10'</code> is read the same as <code>'200 years 10 months'</code>. (These shorter forms are in fact the only ones allowed by the SQL standard, and are used for output when <code>IntervalStyle</code> is set to <code>sql_standard</code>.)\nInterval values can also be written as ISO 8601 time intervals, using either the \"format with designators\" of the standard's section 4.4.3.2 or the \"alternative format\" of section 4.4.3.3. The format with designators looks like this:\n<code>\nP <code>quantity</code> <code>unit</code> [ <code>quantity</code> <code>unit</code> ...] [ T [ <code>quantity</code> <code>unit</code> ...]]\n</code>\nThe string must start with a <code>P</code>, and may include a <code>T</code> that introduces the time-of-day units. The available unit abbreviations are given in Table 8.16. Units may be omitted, and may be specified in any order, but units smaller than a day must appear after <code>T</code>. In particular, the meaning of <code>M</code> depends on whether it is before or after <code>T</code>.\nTable 8.16. ISO 8601 Interval Unit Abbreviations\n<table>\n<thead>\n<tr>\n<th>Abbreviation</th>\n<th>Meaning</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Y</td>\n<td>Years</td>\n</tr>\n<tr>\n<td>M</td>\n<td>Months (in the date part)</td>\n</tr>\n<tr>\n<td>W</td>\n<td>Weeks</td>\n</tr>\n<tr>\n<td>D</td>\n<td>Days</td>\n</tr>\n<tr>\n<td>H</td>\n<td>Hours</td>\n</tr>\n<tr>\n<td>M</td>\n<td>Minutes (in the time part)</td>\n</tr>\n<tr>\n<td>S</td>\n<td>Seconds</td>\n</tr>\n</tbody>\n</table>\nIn the alternative format:\n<code>\nP [ <code>years</code>-<code>months</code>-<code>days</code> ] [ T <code>hours</code>:<code>minutes</code>:<code>seconds</code> ]\n</code>\nthe string must begin with <code>P</code>, and a <code>T</code> separates the date and time parts of the interval. The values are given as numbers similar to ISO 8601 dates.\nWhen writing an interval constant with a <code>fields</code> specification, or when assigning a string to an interval column that was defined with a <code>fields</code> specification, the interpretation of unmarked quantities depends on the <code>fields</code>. For example <code>INTERVAL '1' YEAR</code> is read as 1 year, whereas <code>INTERVAL '1'</code> means 1 second. Also, field values \"to the right\" of the least significant field allowed by the <code>fields</code> specification are silently discarded. For example, writing <code>INTERVAL '1 day 2:03:04' HOUR TO MINUTE</code> results in dropping the seconds field, but not the day field.\nAccording to the SQL standard all fields of an interval value must have the same sign, so a leading negative sign applies to all fields; for example the negative sign in the interval literal <code>'-1 2:03:04'</code> applies to both the days and hour/minute/second parts. PostgreSQL allows the fields to have different signs, and traditionally treats each field in the textual representation as independently signed, so that the hour/minute/second part is considered positive in this example. If <code>IntervalStyle</code> is set to <code>sql_standard</code> then a leading sign is considered to apply to all fields (but only if no additional signs appear). Otherwise the traditional PostgreSQL interpretation is used. To avoid ambiguity, it's recommended to attach an explicit sign to each field if any field is negative.\nField values can have fractional parts: for example, <code>'1.5 weeks'</code> or <code>'01:02:03.45'</code>. However, because interval internally stores only three integer units (months, days, microseconds), fractional units must be spilled to smaller units. Fractional parts of units greater than months are truncated to be an integer number of months, e.g. <code>'1.5 years'</code> becomes <code>'1 year 6 mons'</code>. Fractional parts of weeks and days are computed to be an integer number of days and microseconds, assuming 30 days per month and 24 hours per day, e.g., <code>'1.75 months'</code> becomes <code>1 mon 22 days 12:00:00</code>. Only seconds will ever be shown as fractional on output.\nTable 8.17 shows some examples of valid <code>interval</code> input.\nTable 8.17. Interval Input\n<table>\n<thead>\n<tr>\n<th>Example</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1-2</td>\n<td>SQL standard format: 1 year 2 months</td>\n</tr>\n<tr>\n<td>3 4:05:06</td>\n<td>SQL standard format: 3 days 4 hours 5 minutes 6 seconds</td>\n</tr>\n<tr>\n<td>1 year 2 months 3 days 4 hours 5 minutes 6 seconds</td>\n<td>Traditional Postgres format: 1 year 2 months 3 days 4 hours 5 minutes 6 seconds</td>\n</tr>\n<tr>\n<td>P1Y2M3DT4H5M6S</td>\n<td>ISO 8601 \"format with designators\": same meaning as above</td>\n</tr>\n<tr>\n<td>P0001-02-03T04:05:06</td>\n<td>ISO 8601 \"alternative format\": same meaning as above</td>\n</tr>\n</tbody>\n</table>\nInternally <code>interval</code> values are stored as months, days, and microseconds. This is done because the number of days in a month varies, and a day can have 23 or 25 hours if a daylight savings time adjustment is involved. The months and days fields are integers while the microseconds field can store fractional seconds. Because intervals are usually created from constant strings or <code>timestamp</code> subtraction, this storage method works well in most cases, but can cause unexpected results:\n<code>\nSELECT EXTRACT(hours from '80 minutes'::interval);\n date_part\n-----------\n 1\nSELECT EXTRACT(days from '80 hours'::interval);\n date_part\n-----------\n 0\n</code>\nFunctions <code>justify_days</code> and <code>justify_hours</code> are available for adjusting days and hours that overflow their normal ranges.\n; \nThe output format of the interval type can be set to one of the four styles <code>sql_standard</code>, <code>postgres</code>, <code>postgres_verbose</code>, or <code>iso_8601</code>, using the command <code>SET intervalstyle</code>. The default is the <code>postgres</code> format. Table 8.18 shows examples of each output style.\nThe <code>sql_standard</code> style produces output that conforms to the SQL standard's specification for interval literal strings, if the interval value meets the standard's restrictions (either year-month only or day-time only, with no mixing of positive and negative components). Otherwise the output looks like a standard year-month literal string followed by a day-time literal string, with explicit signs added to disambiguate mixed-sign intervals.\nThe output of the <code>postgres</code> style matches the output of PostgreSQL releases prior to 8.4 when the DateStyle parameter was set to <code>ISO</code>.\nThe output of the <code>postgres_verbose</code> style matches the output of PostgreSQL releases prior to 8.4 when the <code>DateStyle</code> parameter was set to non-<code>ISO</code> output.\nThe output of the <code>iso_8601</code> style matches the \"format with designators\" described in section 4.4.3.2 of the ISO 8601 standard.\nTable 8.18. Interval Output Style Examples\n<table>\n<thead>\n<tr>\n<th>Style Specification</th>\n<th>Year-Month Interval</th>\n<th>Day-Time Interval</th>\n<th>Mixed Interval</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>sql_standard</code></td>\n<td>1-2</td>\n<td>3 4:05:06</td>\n<td>-1-2 +3 -4:05:06</td>\n</tr>\n<tr>\n<td><code>postgres</code></td>\n<td>1 year 2 mons</td>\n<td>3 days 04:05:06</td>\n<td>-1 year -2 mons +3 days -04:05:06</td>\n</tr>\n<tr>\n<td><code>postgres_verbose</code></td>\n<td>@ 1 year 2 mons</td>\n<td>@ 3 days 4 hours 5 mins 6 secs</td>\n<td>@ 1 year 2 mons -3 days 4 hours 5 mins 6 secs ago</td>\n</tr>\n<tr>\n<td><code>iso_8601</code></td>\n<td>P1Y2M</td>\n<td>P3DT4H5M6S</td>\n<td>P-1Y-2M3DT-4H-5M-6S</td>\n</tr>\n</tbody>\n</table>\n",
        "example": [],
        "link": [
            "https://www.postgresql.org/docs/12/datatype-datetime.html"
        ]
    },
    {
        "type": "type",
        "keyword": "interval DAY TO SECOND",
        "tree": "(simpletypename (constinterval INTERVAL) (opt_interval DAY TO (interval_second SECOND)))",
        "description": [
            "time span",
            "time interval"
        ],
        "detail": "[DESCRIPTION]: time span; time interval<sep>[STORAGE SIZE]: 16 bytes<sep>[LOW VALUE]: -178000000 years<sep>[HIGH VALUE]: 178000000 years<sep>[COMPENSATE]: <code>time</code>, <code>timestamp</code>, and <code>interval</code> accept an optional precision value <code>p</code> which specifies the number of fractional digits retained in the seconds field. By default, there is no explicit bound on precision. The allowed range of <code>p</code> is from 0 to 6.; The <code>interval</code> type has an additional option, which is to restrict the set of stored fields by writing one of these phrases:; where <code>p</code> is an optional precision specification giving the number of fractional digits in the seconds field. Precision can be specified for <code>time</code>, <code>timestamp</code>, and <code>interval</code> types, and can range from 0 to 6. If no precision is specified in a constant specification, it defaults to the precision of the literal value (but not more than 6 digits).; \n<code>interval</code> values can be written using the following verbose syntax:\n<code>\n[@] <code>quantity</code> <code>unit</code> [<code>quantity</code> <code>unit</code>...] [<code>direction</code>]\n</code>\nwhere <code>quantity</code> is a number (possibly signed); <code>unit</code> is <code>microsecond</code>, <code>millisecond</code>, <code>second</code>, <code>minute</code>, <code>hour</code>, <code>day</code>, <code>week</code>, <code>month</code>, <code>year</code>, <code>decade</code>, <code>century</code>, <code>millennium</code>, or abbreviations or plurals of these units; <code>direction</code> can be <code>ago</code> or empty. The at sign (<code>@</code>) is optional noise. The amounts of the different units are implicitly added with appropriate sign accounting. <code>ago</code> negates all the fields. This syntax is also used for interval output, if IntervalStyle is set to <code>postgres_verbose</code>.\nQuantities of days, hours, minutes, and seconds can be specified without explicit unit markings. For example, <code>'1 12:59:10'</code> is read the same as <code>'1 day 12 hours 59 min 10 sec'</code>. Also, a combination of years and months can be specified with a dash; for example <code>'200-10'</code> is read the same as <code>'200 years 10 months'</code>. (These shorter forms are in fact the only ones allowed by the SQL standard, and are used for output when <code>IntervalStyle</code> is set to <code>sql_standard</code>.)\nInterval values can also be written as ISO 8601 time intervals, using either the \"format with designators\" of the standard's section 4.4.3.2 or the \"alternative format\" of section 4.4.3.3. The format with designators looks like this:\n<code>\nP <code>quantity</code> <code>unit</code> [ <code>quantity</code> <code>unit</code> ...] [ T [ <code>quantity</code> <code>unit</code> ...]]\n</code>\nThe string must start with a <code>P</code>, and may include a <code>T</code> that introduces the time-of-day units. The available unit abbreviations are given in Table 8.16. Units may be omitted, and may be specified in any order, but units smaller than a day must appear after <code>T</code>. In particular, the meaning of <code>M</code> depends on whether it is before or after <code>T</code>.\nTable 8.16. ISO 8601 Interval Unit Abbreviations\n<table>\n<thead>\n<tr>\n<th>Abbreviation</th>\n<th>Meaning</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Y</td>\n<td>Years</td>\n</tr>\n<tr>\n<td>M</td>\n<td>Months (in the date part)</td>\n</tr>\n<tr>\n<td>W</td>\n<td>Weeks</td>\n</tr>\n<tr>\n<td>D</td>\n<td>Days</td>\n</tr>\n<tr>\n<td>H</td>\n<td>Hours</td>\n</tr>\n<tr>\n<td>M</td>\n<td>Minutes (in the time part)</td>\n</tr>\n<tr>\n<td>S</td>\n<td>Seconds</td>\n</tr>\n</tbody>\n</table>\nIn the alternative format:\n<code>\nP [ <code>years</code>-<code>months</code>-<code>days</code> ] [ T <code>hours</code>:<code>minutes</code>:<code>seconds</code> ]\n</code>\nthe string must begin with <code>P</code>, and a <code>T</code> separates the date and time parts of the interval. The values are given as numbers similar to ISO 8601 dates.\nWhen writing an interval constant with a <code>fields</code> specification, or when assigning a string to an interval column that was defined with a <code>fields</code> specification, the interpretation of unmarked quantities depends on the <code>fields</code>. For example <code>INTERVAL '1' YEAR</code> is read as 1 year, whereas <code>INTERVAL '1'</code> means 1 second. Also, field values \"to the right\" of the least significant field allowed by the <code>fields</code> specification are silently discarded. For example, writing <code>INTERVAL '1 day 2:03:04' HOUR TO MINUTE</code> results in dropping the seconds field, but not the day field.\nAccording to the SQL standard all fields of an interval value must have the same sign, so a leading negative sign applies to all fields; for example the negative sign in the interval literal <code>'-1 2:03:04'</code> applies to both the days and hour/minute/second parts. PostgreSQL allows the fields to have different signs, and traditionally treats each field in the textual representation as independently signed, so that the hour/minute/second part is considered positive in this example. If <code>IntervalStyle</code> is set to <code>sql_standard</code> then a leading sign is considered to apply to all fields (but only if no additional signs appear). Otherwise the traditional PostgreSQL interpretation is used. To avoid ambiguity, it's recommended to attach an explicit sign to each field if any field is negative.\nField values can have fractional parts: for example, <code>'1.5 weeks'</code> or <code>'01:02:03.45'</code>. However, because interval internally stores only three integer units (months, days, microseconds), fractional units must be spilled to smaller units. Fractional parts of units greater than months are truncated to be an integer number of months, e.g. <code>'1.5 years'</code> becomes <code>'1 year 6 mons'</code>. Fractional parts of weeks and days are computed to be an integer number of days and microseconds, assuming 30 days per month and 24 hours per day, e.g., <code>'1.75 months'</code> becomes <code>1 mon 22 days 12:00:00</code>. Only seconds will ever be shown as fractional on output.\nTable 8.17 shows some examples of valid <code>interval</code> input.\nTable 8.17. Interval Input\n<table>\n<thead>\n<tr>\n<th>Example</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1-2</td>\n<td>SQL standard format: 1 year 2 months</td>\n</tr>\n<tr>\n<td>3 4:05:06</td>\n<td>SQL standard format: 3 days 4 hours 5 minutes 6 seconds</td>\n</tr>\n<tr>\n<td>1 year 2 months 3 days 4 hours 5 minutes 6 seconds</td>\n<td>Traditional Postgres format: 1 year 2 months 3 days 4 hours 5 minutes 6 seconds</td>\n</tr>\n<tr>\n<td>P1Y2M3DT4H5M6S</td>\n<td>ISO 8601 \"format with designators\": same meaning as above</td>\n</tr>\n<tr>\n<td>P0001-02-03T04:05:06</td>\n<td>ISO 8601 \"alternative format\": same meaning as above</td>\n</tr>\n</tbody>\n</table>\nInternally <code>interval</code> values are stored as months, days, and microseconds. This is done because the number of days in a month varies, and a day can have 23 or 25 hours if a daylight savings time adjustment is involved. The months and days fields are integers while the microseconds field can store fractional seconds. Because intervals are usually created from constant strings or <code>timestamp</code> subtraction, this storage method works well in most cases, but can cause unexpected results:\n<code>\nSELECT EXTRACT(hours from '80 minutes'::interval);\n date_part\n-----------\n 1\nSELECT EXTRACT(days from '80 hours'::interval);\n date_part\n-----------\n 0\n</code>\nFunctions <code>justify_days</code> and <code>justify_hours</code> are available for adjusting days and hours that overflow their normal ranges.\n; \nThe output format of the interval type can be set to one of the four styles <code>sql_standard</code>, <code>postgres</code>, <code>postgres_verbose</code>, or <code>iso_8601</code>, using the command <code>SET intervalstyle</code>. The default is the <code>postgres</code> format. Table 8.18 shows examples of each output style.\nThe <code>sql_standard</code> style produces output that conforms to the SQL standard's specification for interval literal strings, if the interval value meets the standard's restrictions (either year-month only or day-time only, with no mixing of positive and negative components). Otherwise the output looks like a standard year-month literal string followed by a day-time literal string, with explicit signs added to disambiguate mixed-sign intervals.\nThe output of the <code>postgres</code> style matches the output of PostgreSQL releases prior to 8.4 when the DateStyle parameter was set to <code>ISO</code>.\nThe output of the <code>postgres_verbose</code> style matches the output of PostgreSQL releases prior to 8.4 when the <code>DateStyle</code> parameter was set to non-<code>ISO</code> output.\nThe output of the <code>iso_8601</code> style matches the \"format with designators\" described in section 4.4.3.2 of the ISO 8601 standard.\nTable 8.18. Interval Output Style Examples\n<table>\n<thead>\n<tr>\n<th>Style Specification</th>\n<th>Year-Month Interval</th>\n<th>Day-Time Interval</th>\n<th>Mixed Interval</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>sql_standard</code></td>\n<td>1-2</td>\n<td>3 4:05:06</td>\n<td>-1-2 +3 -4:05:06</td>\n</tr>\n<tr>\n<td><code>postgres</code></td>\n<td>1 year 2 mons</td>\n<td>3 days 04:05:06</td>\n<td>-1 year -2 mons +3 days -04:05:06</td>\n</tr>\n<tr>\n<td><code>postgres_verbose</code></td>\n<td>@ 1 year 2 mons</td>\n<td>@ 3 days 4 hours 5 mins 6 secs</td>\n<td>@ 1 year 2 mons -3 days 4 hours 5 mins 6 secs ago</td>\n</tr>\n<tr>\n<td><code>iso_8601</code></td>\n<td>P1Y2M</td>\n<td>P3DT4H5M6S</td>\n<td>P-1Y-2M3DT-4H-5M-6S</td>\n</tr>\n</tbody>\n</table>\n",
        "example": [],
        "link": [
            "https://www.postgresql.org/docs/12/datatype-datetime.html"
        ]
    },
    {
        "type": "type",
        "keyword": "interval DAY TO SECOND ( p )",
        "tree": "(simpletypename (constinterval INTERVAL) (opt_interval DAY TO (interval_second SECOND ( ))))",
        "description": [
            "time span",
            "time interval"
        ],
        "detail": "[DESCRIPTION]: time span; time interval<sep>[STORAGE SIZE]: 16 bytes<sep>[LOW VALUE]: -178000000 years<sep>[HIGH VALUE]: 178000000 years<sep>[COMPENSATE]: <code>time</code>, <code>timestamp</code>, and <code>interval</code> accept an optional precision value <code>p</code> which specifies the number of fractional digits retained in the seconds field. By default, there is no explicit bound on precision. The allowed range of <code>p</code> is from 0 to 6.; The <code>interval</code> type has an additional option, which is to restrict the set of stored fields by writing one of these phrases:; where <code>p</code> is an optional precision specification giving the number of fractional digits in the seconds field. Precision can be specified for <code>time</code>, <code>timestamp</code>, and <code>interval</code> types, and can range from 0 to 6. If no precision is specified in a constant specification, it defaults to the precision of the literal value (but not more than 6 digits).; \n<code>interval</code> values can be written using the following verbose syntax:\n<code>\n[@] <code>quantity</code> <code>unit</code> [<code>quantity</code> <code>unit</code>...] [<code>direction</code>]\n</code>\nwhere <code>quantity</code> is a number (possibly signed); <code>unit</code> is <code>microsecond</code>, <code>millisecond</code>, <code>second</code>, <code>minute</code>, <code>hour</code>, <code>day</code>, <code>week</code>, <code>month</code>, <code>year</code>, <code>decade</code>, <code>century</code>, <code>millennium</code>, or abbreviations or plurals of these units; <code>direction</code> can be <code>ago</code> or empty. The at sign (<code>@</code>) is optional noise. The amounts of the different units are implicitly added with appropriate sign accounting. <code>ago</code> negates all the fields. This syntax is also used for interval output, if IntervalStyle is set to <code>postgres_verbose</code>.\nQuantities of days, hours, minutes, and seconds can be specified without explicit unit markings. For example, <code>'1 12:59:10'</code> is read the same as <code>'1 day 12 hours 59 min 10 sec'</code>. Also, a combination of years and months can be specified with a dash; for example <code>'200-10'</code> is read the same as <code>'200 years 10 months'</code>. (These shorter forms are in fact the only ones allowed by the SQL standard, and are used for output when <code>IntervalStyle</code> is set to <code>sql_standard</code>.)\nInterval values can also be written as ISO 8601 time intervals, using either the \"format with designators\" of the standard's section 4.4.3.2 or the \"alternative format\" of section 4.4.3.3. The format with designators looks like this:\n<code>\nP <code>quantity</code> <code>unit</code> [ <code>quantity</code> <code>unit</code> ...] [ T [ <code>quantity</code> <code>unit</code> ...]]\n</code>\nThe string must start with a <code>P</code>, and may include a <code>T</code> that introduces the time-of-day units. The available unit abbreviations are given in Table 8.16. Units may be omitted, and may be specified in any order, but units smaller than a day must appear after <code>T</code>. In particular, the meaning of <code>M</code> depends on whether it is before or after <code>T</code>.\nTable 8.16. ISO 8601 Interval Unit Abbreviations\n<table>\n<thead>\n<tr>\n<th>Abbreviation</th>\n<th>Meaning</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Y</td>\n<td>Years</td>\n</tr>\n<tr>\n<td>M</td>\n<td>Months (in the date part)</td>\n</tr>\n<tr>\n<td>W</td>\n<td>Weeks</td>\n</tr>\n<tr>\n<td>D</td>\n<td>Days</td>\n</tr>\n<tr>\n<td>H</td>\n<td>Hours</td>\n</tr>\n<tr>\n<td>M</td>\n<td>Minutes (in the time part)</td>\n</tr>\n<tr>\n<td>S</td>\n<td>Seconds</td>\n</tr>\n</tbody>\n</table>\nIn the alternative format:\n<code>\nP [ <code>years</code>-<code>months</code>-<code>days</code> ] [ T <code>hours</code>:<code>minutes</code>:<code>seconds</code> ]\n</code>\nthe string must begin with <code>P</code>, and a <code>T</code> separates the date and time parts of the interval. The values are given as numbers similar to ISO 8601 dates.\nWhen writing an interval constant with a <code>fields</code> specification, or when assigning a string to an interval column that was defined with a <code>fields</code> specification, the interpretation of unmarked quantities depends on the <code>fields</code>. For example <code>INTERVAL '1' YEAR</code> is read as 1 year, whereas <code>INTERVAL '1'</code> means 1 second. Also, field values \"to the right\" of the least significant field allowed by the <code>fields</code> specification are silently discarded. For example, writing <code>INTERVAL '1 day 2:03:04' HOUR TO MINUTE</code> results in dropping the seconds field, but not the day field.\nAccording to the SQL standard all fields of an interval value must have the same sign, so a leading negative sign applies to all fields; for example the negative sign in the interval literal <code>'-1 2:03:04'</code> applies to both the days and hour/minute/second parts. PostgreSQL allows the fields to have different signs, and traditionally treats each field in the textual representation as independently signed, so that the hour/minute/second part is considered positive in this example. If <code>IntervalStyle</code> is set to <code>sql_standard</code> then a leading sign is considered to apply to all fields (but only if no additional signs appear). Otherwise the traditional PostgreSQL interpretation is used. To avoid ambiguity, it's recommended to attach an explicit sign to each field if any field is negative.\nField values can have fractional parts: for example, <code>'1.5 weeks'</code> or <code>'01:02:03.45'</code>. However, because interval internally stores only three integer units (months, days, microseconds), fractional units must be spilled to smaller units. Fractional parts of units greater than months are truncated to be an integer number of months, e.g. <code>'1.5 years'</code> becomes <code>'1 year 6 mons'</code>. Fractional parts of weeks and days are computed to be an integer number of days and microseconds, assuming 30 days per month and 24 hours per day, e.g., <code>'1.75 months'</code> becomes <code>1 mon 22 days 12:00:00</code>. Only seconds will ever be shown as fractional on output.\nTable 8.17 shows some examples of valid <code>interval</code> input.\nTable 8.17. Interval Input\n<table>\n<thead>\n<tr>\n<th>Example</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1-2</td>\n<td>SQL standard format: 1 year 2 months</td>\n</tr>\n<tr>\n<td>3 4:05:06</td>\n<td>SQL standard format: 3 days 4 hours 5 minutes 6 seconds</td>\n</tr>\n<tr>\n<td>1 year 2 months 3 days 4 hours 5 minutes 6 seconds</td>\n<td>Traditional Postgres format: 1 year 2 months 3 days 4 hours 5 minutes 6 seconds</td>\n</tr>\n<tr>\n<td>P1Y2M3DT4H5M6S</td>\n<td>ISO 8601 \"format with designators\": same meaning as above</td>\n</tr>\n<tr>\n<td>P0001-02-03T04:05:06</td>\n<td>ISO 8601 \"alternative format\": same meaning as above</td>\n</tr>\n</tbody>\n</table>\nInternally <code>interval</code> values are stored as months, days, and microseconds. This is done because the number of days in a month varies, and a day can have 23 or 25 hours if a daylight savings time adjustment is involved. The months and days fields are integers while the microseconds field can store fractional seconds. Because intervals are usually created from constant strings or <code>timestamp</code> subtraction, this storage method works well in most cases, but can cause unexpected results:\n<code>\nSELECT EXTRACT(hours from '80 minutes'::interval);\n date_part\n-----------\n 1\nSELECT EXTRACT(days from '80 hours'::interval);\n date_part\n-----------\n 0\n</code>\nFunctions <code>justify_days</code> and <code>justify_hours</code> are available for adjusting days and hours that overflow their normal ranges.\n; \nThe output format of the interval type can be set to one of the four styles <code>sql_standard</code>, <code>postgres</code>, <code>postgres_verbose</code>, or <code>iso_8601</code>, using the command <code>SET intervalstyle</code>. The default is the <code>postgres</code> format. Table 8.18 shows examples of each output style.\nThe <code>sql_standard</code> style produces output that conforms to the SQL standard's specification for interval literal strings, if the interval value meets the standard's restrictions (either year-month only or day-time only, with no mixing of positive and negative components). Otherwise the output looks like a standard year-month literal string followed by a day-time literal string, with explicit signs added to disambiguate mixed-sign intervals.\nThe output of the <code>postgres</code> style matches the output of PostgreSQL releases prior to 8.4 when the DateStyle parameter was set to <code>ISO</code>.\nThe output of the <code>postgres_verbose</code> style matches the output of PostgreSQL releases prior to 8.4 when the <code>DateStyle</code> parameter was set to non-<code>ISO</code> output.\nThe output of the <code>iso_8601</code> style matches the \"format with designators\" described in section 4.4.3.2 of the ISO 8601 standard.\nTable 8.18. Interval Output Style Examples\n<table>\n<thead>\n<tr>\n<th>Style Specification</th>\n<th>Year-Month Interval</th>\n<th>Day-Time Interval</th>\n<th>Mixed Interval</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>sql_standard</code></td>\n<td>1-2</td>\n<td>3 4:05:06</td>\n<td>-1-2 +3 -4:05:06</td>\n</tr>\n<tr>\n<td><code>postgres</code></td>\n<td>1 year 2 mons</td>\n<td>3 days 04:05:06</td>\n<td>-1 year -2 mons +3 days -04:05:06</td>\n</tr>\n<tr>\n<td><code>postgres_verbose</code></td>\n<td>@ 1 year 2 mons</td>\n<td>@ 3 days 4 hours 5 mins 6 secs</td>\n<td>@ 1 year 2 mons -3 days 4 hours 5 mins 6 secs ago</td>\n</tr>\n<tr>\n<td><code>iso_8601</code></td>\n<td>P1Y2M</td>\n<td>P3DT4H5M6S</td>\n<td>P-1Y-2M3DT-4H-5M-6S</td>\n</tr>\n</tbody>\n</table>\n",
        "example": [],
        "link": [
            "https://www.postgresql.org/docs/12/datatype-datetime.html"
        ]
    },
    {
        "type": "type",
        "keyword": "interval HOUR TO MINUTE",
        "tree": "(simpletypename (constinterval INTERVAL) (opt_interval HOUR TO MINUTE))",
        "description": [
            "time span",
            "time interval"
        ],
        "detail": "[DESCRIPTION]: time span; time interval<sep>[STORAGE SIZE]: 16 bytes<sep>[LOW VALUE]: -178000000 years<sep>[HIGH VALUE]: 178000000 years<sep>[COMPENSATE]: <code>time</code>, <code>timestamp</code>, and <code>interval</code> accept an optional precision value <code>p</code> which specifies the number of fractional digits retained in the seconds field. By default, there is no explicit bound on precision. The allowed range of <code>p</code> is from 0 to 6.; The <code>interval</code> type has an additional option, which is to restrict the set of stored fields by writing one of these phrases:; where <code>p</code> is an optional precision specification giving the number of fractional digits in the seconds field. Precision can be specified for <code>time</code>, <code>timestamp</code>, and <code>interval</code> types, and can range from 0 to 6. If no precision is specified in a constant specification, it defaults to the precision of the literal value (but not more than 6 digits).; \n<code>interval</code> values can be written using the following verbose syntax:\n<code>\n[@] <code>quantity</code> <code>unit</code> [<code>quantity</code> <code>unit</code>...] [<code>direction</code>]\n</code>\nwhere <code>quantity</code> is a number (possibly signed); <code>unit</code> is <code>microsecond</code>, <code>millisecond</code>, <code>second</code>, <code>minute</code>, <code>hour</code>, <code>day</code>, <code>week</code>, <code>month</code>, <code>year</code>, <code>decade</code>, <code>century</code>, <code>millennium</code>, or abbreviations or plurals of these units; <code>direction</code> can be <code>ago</code> or empty. The at sign (<code>@</code>) is optional noise. The amounts of the different units are implicitly added with appropriate sign accounting. <code>ago</code> negates all the fields. This syntax is also used for interval output, if IntervalStyle is set to <code>postgres_verbose</code>.\nQuantities of days, hours, minutes, and seconds can be specified without explicit unit markings. For example, <code>'1 12:59:10'</code> is read the same as <code>'1 day 12 hours 59 min 10 sec'</code>. Also, a combination of years and months can be specified with a dash; for example <code>'200-10'</code> is read the same as <code>'200 years 10 months'</code>. (These shorter forms are in fact the only ones allowed by the SQL standard, and are used for output when <code>IntervalStyle</code> is set to <code>sql_standard</code>.)\nInterval values can also be written as ISO 8601 time intervals, using either the \"format with designators\" of the standard's section 4.4.3.2 or the \"alternative format\" of section 4.4.3.3. The format with designators looks like this:\n<code>\nP <code>quantity</code> <code>unit</code> [ <code>quantity</code> <code>unit</code> ...] [ T [ <code>quantity</code> <code>unit</code> ...]]\n</code>\nThe string must start with a <code>P</code>, and may include a <code>T</code> that introduces the time-of-day units. The available unit abbreviations are given in Table 8.16. Units may be omitted, and may be specified in any order, but units smaller than a day must appear after <code>T</code>. In particular, the meaning of <code>M</code> depends on whether it is before or after <code>T</code>.\nTable 8.16. ISO 8601 Interval Unit Abbreviations\n<table>\n<thead>\n<tr>\n<th>Abbreviation</th>\n<th>Meaning</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Y</td>\n<td>Years</td>\n</tr>\n<tr>\n<td>M</td>\n<td>Months (in the date part)</td>\n</tr>\n<tr>\n<td>W</td>\n<td>Weeks</td>\n</tr>\n<tr>\n<td>D</td>\n<td>Days</td>\n</tr>\n<tr>\n<td>H</td>\n<td>Hours</td>\n</tr>\n<tr>\n<td>M</td>\n<td>Minutes (in the time part)</td>\n</tr>\n<tr>\n<td>S</td>\n<td>Seconds</td>\n</tr>\n</tbody>\n</table>\nIn the alternative format:\n<code>\nP [ <code>years</code>-<code>months</code>-<code>days</code> ] [ T <code>hours</code>:<code>minutes</code>:<code>seconds</code> ]\n</code>\nthe string must begin with <code>P</code>, and a <code>T</code> separates the date and time parts of the interval. The values are given as numbers similar to ISO 8601 dates.\nWhen writing an interval constant with a <code>fields</code> specification, or when assigning a string to an interval column that was defined with a <code>fields</code> specification, the interpretation of unmarked quantities depends on the <code>fields</code>. For example <code>INTERVAL '1' YEAR</code> is read as 1 year, whereas <code>INTERVAL '1'</code> means 1 second. Also, field values \"to the right\" of the least significant field allowed by the <code>fields</code> specification are silently discarded. For example, writing <code>INTERVAL '1 day 2:03:04' HOUR TO MINUTE</code> results in dropping the seconds field, but not the day field.\nAccording to the SQL standard all fields of an interval value must have the same sign, so a leading negative sign applies to all fields; for example the negative sign in the interval literal <code>'-1 2:03:04'</code> applies to both the days and hour/minute/second parts. PostgreSQL allows the fields to have different signs, and traditionally treats each field in the textual representation as independently signed, so that the hour/minute/second part is considered positive in this example. If <code>IntervalStyle</code> is set to <code>sql_standard</code> then a leading sign is considered to apply to all fields (but only if no additional signs appear). Otherwise the traditional PostgreSQL interpretation is used. To avoid ambiguity, it's recommended to attach an explicit sign to each field if any field is negative.\nField values can have fractional parts: for example, <code>'1.5 weeks'</code> or <code>'01:02:03.45'</code>. However, because interval internally stores only three integer units (months, days, microseconds), fractional units must be spilled to smaller units. Fractional parts of units greater than months are truncated to be an integer number of months, e.g. <code>'1.5 years'</code> becomes <code>'1 year 6 mons'</code>. Fractional parts of weeks and days are computed to be an integer number of days and microseconds, assuming 30 days per month and 24 hours per day, e.g., <code>'1.75 months'</code> becomes <code>1 mon 22 days 12:00:00</code>. Only seconds will ever be shown as fractional on output.\nTable 8.17 shows some examples of valid <code>interval</code> input.\nTable 8.17. Interval Input\n<table>\n<thead>\n<tr>\n<th>Example</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1-2</td>\n<td>SQL standard format: 1 year 2 months</td>\n</tr>\n<tr>\n<td>3 4:05:06</td>\n<td>SQL standard format: 3 days 4 hours 5 minutes 6 seconds</td>\n</tr>\n<tr>\n<td>1 year 2 months 3 days 4 hours 5 minutes 6 seconds</td>\n<td>Traditional Postgres format: 1 year 2 months 3 days 4 hours 5 minutes 6 seconds</td>\n</tr>\n<tr>\n<td>P1Y2M3DT4H5M6S</td>\n<td>ISO 8601 \"format with designators\": same meaning as above</td>\n</tr>\n<tr>\n<td>P0001-02-03T04:05:06</td>\n<td>ISO 8601 \"alternative format\": same meaning as above</td>\n</tr>\n</tbody>\n</table>\nInternally <code>interval</code> values are stored as months, days, and microseconds. This is done because the number of days in a month varies, and a day can have 23 or 25 hours if a daylight savings time adjustment is involved. The months and days fields are integers while the microseconds field can store fractional seconds. Because intervals are usually created from constant strings or <code>timestamp</code> subtraction, this storage method works well in most cases, but can cause unexpected results:\n<code>\nSELECT EXTRACT(hours from '80 minutes'::interval);\n date_part\n-----------\n 1\nSELECT EXTRACT(days from '80 hours'::interval);\n date_part\n-----------\n 0\n</code>\nFunctions <code>justify_days</code> and <code>justify_hours</code> are available for adjusting days and hours that overflow their normal ranges.\n; \nThe output format of the interval type can be set to one of the four styles <code>sql_standard</code>, <code>postgres</code>, <code>postgres_verbose</code>, or <code>iso_8601</code>, using the command <code>SET intervalstyle</code>. The default is the <code>postgres</code> format. Table 8.18 shows examples of each output style.\nThe <code>sql_standard</code> style produces output that conforms to the SQL standard's specification for interval literal strings, if the interval value meets the standard's restrictions (either year-month only or day-time only, with no mixing of positive and negative components). Otherwise the output looks like a standard year-month literal string followed by a day-time literal string, with explicit signs added to disambiguate mixed-sign intervals.\nThe output of the <code>postgres</code> style matches the output of PostgreSQL releases prior to 8.4 when the DateStyle parameter was set to <code>ISO</code>.\nThe output of the <code>postgres_verbose</code> style matches the output of PostgreSQL releases prior to 8.4 when the <code>DateStyle</code> parameter was set to non-<code>ISO</code> output.\nThe output of the <code>iso_8601</code> style matches the \"format with designators\" described in section 4.4.3.2 of the ISO 8601 standard.\nTable 8.18. Interval Output Style Examples\n<table>\n<thead>\n<tr>\n<th>Style Specification</th>\n<th>Year-Month Interval</th>\n<th>Day-Time Interval</th>\n<th>Mixed Interval</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>sql_standard</code></td>\n<td>1-2</td>\n<td>3 4:05:06</td>\n<td>-1-2 +3 -4:05:06</td>\n</tr>\n<tr>\n<td><code>postgres</code></td>\n<td>1 year 2 mons</td>\n<td>3 days 04:05:06</td>\n<td>-1 year -2 mons +3 days -04:05:06</td>\n</tr>\n<tr>\n<td><code>postgres_verbose</code></td>\n<td>@ 1 year 2 mons</td>\n<td>@ 3 days 4 hours 5 mins 6 secs</td>\n<td>@ 1 year 2 mons -3 days 4 hours 5 mins 6 secs ago</td>\n</tr>\n<tr>\n<td><code>iso_8601</code></td>\n<td>P1Y2M</td>\n<td>P3DT4H5M6S</td>\n<td>P-1Y-2M3DT-4H-5M-6S</td>\n</tr>\n</tbody>\n</table>\n",
        "example": [],
        "link": [
            "https://www.postgresql.org/docs/12/datatype-datetime.html"
        ]
    },
    {
        "type": "type",
        "keyword": "interval HOUR TO MINUTE",
        "tree": "(simpletypename (constinterval INTERVAL) (opt_interval HOUR TO MINUTE))",
        "description": [
            "time span",
            "time interval"
        ],
        "detail": "[DESCRIPTION]: time span; time interval<sep>[STORAGE SIZE]: 16 bytes<sep>[LOW VALUE]: -178000000 years<sep>[HIGH VALUE]: 178000000 years<sep>[COMPENSATE]: <code>time</code>, <code>timestamp</code>, and <code>interval</code> accept an optional precision value <code>p</code> which specifies the number of fractional digits retained in the seconds field. By default, there is no explicit bound on precision. The allowed range of <code>p</code> is from 0 to 6.; The <code>interval</code> type has an additional option, which is to restrict the set of stored fields by writing one of these phrases:; where <code>p</code> is an optional precision specification giving the number of fractional digits in the seconds field. Precision can be specified for <code>time</code>, <code>timestamp</code>, and <code>interval</code> types, and can range from 0 to 6. If no precision is specified in a constant specification, it defaults to the precision of the literal value (but not more than 6 digits).; \n<code>interval</code> values can be written using the following verbose syntax:\n<code>\n[@] <code>quantity</code> <code>unit</code> [<code>quantity</code> <code>unit</code>...] [<code>direction</code>]\n</code>\nwhere <code>quantity</code> is a number (possibly signed); <code>unit</code> is <code>microsecond</code>, <code>millisecond</code>, <code>second</code>, <code>minute</code>, <code>hour</code>, <code>day</code>, <code>week</code>, <code>month</code>, <code>year</code>, <code>decade</code>, <code>century</code>, <code>millennium</code>, or abbreviations or plurals of these units; <code>direction</code> can be <code>ago</code> or empty. The at sign (<code>@</code>) is optional noise. The amounts of the different units are implicitly added with appropriate sign accounting. <code>ago</code> negates all the fields. This syntax is also used for interval output, if IntervalStyle is set to <code>postgres_verbose</code>.\nQuantities of days, hours, minutes, and seconds can be specified without explicit unit markings. For example, <code>'1 12:59:10'</code> is read the same as <code>'1 day 12 hours 59 min 10 sec'</code>. Also, a combination of years and months can be specified with a dash; for example <code>'200-10'</code> is read the same as <code>'200 years 10 months'</code>. (These shorter forms are in fact the only ones allowed by the SQL standard, and are used for output when <code>IntervalStyle</code> is set to <code>sql_standard</code>.)\nInterval values can also be written as ISO 8601 time intervals, using either the \"format with designators\" of the standard's section 4.4.3.2 or the \"alternative format\" of section 4.4.3.3. The format with designators looks like this:\n<code>\nP <code>quantity</code> <code>unit</code> [ <code>quantity</code> <code>unit</code> ...] [ T [ <code>quantity</code> <code>unit</code> ...]]\n</code>\nThe string must start with a <code>P</code>, and may include a <code>T</code> that introduces the time-of-day units. The available unit abbreviations are given in Table 8.16. Units may be omitted, and may be specified in any order, but units smaller than a day must appear after <code>T</code>. In particular, the meaning of <code>M</code> depends on whether it is before or after <code>T</code>.\nTable 8.16. ISO 8601 Interval Unit Abbreviations\n<table>\n<thead>\n<tr>\n<th>Abbreviation</th>\n<th>Meaning</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Y</td>\n<td>Years</td>\n</tr>\n<tr>\n<td>M</td>\n<td>Months (in the date part)</td>\n</tr>\n<tr>\n<td>W</td>\n<td>Weeks</td>\n</tr>\n<tr>\n<td>D</td>\n<td>Days</td>\n</tr>\n<tr>\n<td>H</td>\n<td>Hours</td>\n</tr>\n<tr>\n<td>M</td>\n<td>Minutes (in the time part)</td>\n</tr>\n<tr>\n<td>S</td>\n<td>Seconds</td>\n</tr>\n</tbody>\n</table>\nIn the alternative format:\n<code>\nP [ <code>years</code>-<code>months</code>-<code>days</code> ] [ T <code>hours</code>:<code>minutes</code>:<code>seconds</code> ]\n</code>\nthe string must begin with <code>P</code>, and a <code>T</code> separates the date and time parts of the interval. The values are given as numbers similar to ISO 8601 dates.\nWhen writing an interval constant with a <code>fields</code> specification, or when assigning a string to an interval column that was defined with a <code>fields</code> specification, the interpretation of unmarked quantities depends on the <code>fields</code>. For example <code>INTERVAL '1' YEAR</code> is read as 1 year, whereas <code>INTERVAL '1'</code> means 1 second. Also, field values \"to the right\" of the least significant field allowed by the <code>fields</code> specification are silently discarded. For example, writing <code>INTERVAL '1 day 2:03:04' HOUR TO MINUTE</code> results in dropping the seconds field, but not the day field.\nAccording to the SQL standard all fields of an interval value must have the same sign, so a leading negative sign applies to all fields; for example the negative sign in the interval literal <code>'-1 2:03:04'</code> applies to both the days and hour/minute/second parts. PostgreSQL allows the fields to have different signs, and traditionally treats each field in the textual representation as independently signed, so that the hour/minute/second part is considered positive in this example. If <code>IntervalStyle</code> is set to <code>sql_standard</code> then a leading sign is considered to apply to all fields (but only if no additional signs appear). Otherwise the traditional PostgreSQL interpretation is used. To avoid ambiguity, it's recommended to attach an explicit sign to each field if any field is negative.\nField values can have fractional parts: for example, <code>'1.5 weeks'</code> or <code>'01:02:03.45'</code>. However, because interval internally stores only three integer units (months, days, microseconds), fractional units must be spilled to smaller units. Fractional parts of units greater than months are truncated to be an integer number of months, e.g. <code>'1.5 years'</code> becomes <code>'1 year 6 mons'</code>. Fractional parts of weeks and days are computed to be an integer number of days and microseconds, assuming 30 days per month and 24 hours per day, e.g., <code>'1.75 months'</code> becomes <code>1 mon 22 days 12:00:00</code>. Only seconds will ever be shown as fractional on output.\nTable 8.17 shows some examples of valid <code>interval</code> input.\nTable 8.17. Interval Input\n<table>\n<thead>\n<tr>\n<th>Example</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1-2</td>\n<td>SQL standard format: 1 year 2 months</td>\n</tr>\n<tr>\n<td>3 4:05:06</td>\n<td>SQL standard format: 3 days 4 hours 5 minutes 6 seconds</td>\n</tr>\n<tr>\n<td>1 year 2 months 3 days 4 hours 5 minutes 6 seconds</td>\n<td>Traditional Postgres format: 1 year 2 months 3 days 4 hours 5 minutes 6 seconds</td>\n</tr>\n<tr>\n<td>P1Y2M3DT4H5M6S</td>\n<td>ISO 8601 \"format with designators\": same meaning as above</td>\n</tr>\n<tr>\n<td>P0001-02-03T04:05:06</td>\n<td>ISO 8601 \"alternative format\": same meaning as above</td>\n</tr>\n</tbody>\n</table>\nInternally <code>interval</code> values are stored as months, days, and microseconds. This is done because the number of days in a month varies, and a day can have 23 or 25 hours if a daylight savings time adjustment is involved. The months and days fields are integers while the microseconds field can store fractional seconds. Because intervals are usually created from constant strings or <code>timestamp</code> subtraction, this storage method works well in most cases, but can cause unexpected results:\n<code>\nSELECT EXTRACT(hours from '80 minutes'::interval);\n date_part\n-----------\n 1\nSELECT EXTRACT(days from '80 hours'::interval);\n date_part\n-----------\n 0\n</code>\nFunctions <code>justify_days</code> and <code>justify_hours</code> are available for adjusting days and hours that overflow their normal ranges.\n; \nThe output format of the interval type can be set to one of the four styles <code>sql_standard</code>, <code>postgres</code>, <code>postgres_verbose</code>, or <code>iso_8601</code>, using the command <code>SET intervalstyle</code>. The default is the <code>postgres</code> format. Table 8.18 shows examples of each output style.\nThe <code>sql_standard</code> style produces output that conforms to the SQL standard's specification for interval literal strings, if the interval value meets the standard's restrictions (either year-month only or day-time only, with no mixing of positive and negative components). Otherwise the output looks like a standard year-month literal string followed by a day-time literal string, with explicit signs added to disambiguate mixed-sign intervals.\nThe output of the <code>postgres</code> style matches the output of PostgreSQL releases prior to 8.4 when the DateStyle parameter was set to <code>ISO</code>.\nThe output of the <code>postgres_verbose</code> style matches the output of PostgreSQL releases prior to 8.4 when the <code>DateStyle</code> parameter was set to non-<code>ISO</code> output.\nThe output of the <code>iso_8601</code> style matches the \"format with designators\" described in section 4.4.3.2 of the ISO 8601 standard.\nTable 8.18. Interval Output Style Examples\n<table>\n<thead>\n<tr>\n<th>Style Specification</th>\n<th>Year-Month Interval</th>\n<th>Day-Time Interval</th>\n<th>Mixed Interval</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>sql_standard</code></td>\n<td>1-2</td>\n<td>3 4:05:06</td>\n<td>-1-2 +3 -4:05:06</td>\n</tr>\n<tr>\n<td><code>postgres</code></td>\n<td>1 year 2 mons</td>\n<td>3 days 04:05:06</td>\n<td>-1 year -2 mons +3 days -04:05:06</td>\n</tr>\n<tr>\n<td><code>postgres_verbose</code></td>\n<td>@ 1 year 2 mons</td>\n<td>@ 3 days 4 hours 5 mins 6 secs</td>\n<td>@ 1 year 2 mons -3 days 4 hours 5 mins 6 secs ago</td>\n</tr>\n<tr>\n<td><code>iso_8601</code></td>\n<td>P1Y2M</td>\n<td>P3DT4H5M6S</td>\n<td>P-1Y-2M3DT-4H-5M-6S</td>\n</tr>\n</tbody>\n</table>\n",
        "example": [],
        "link": [
            "https://www.postgresql.org/docs/12/datatype-datetime.html"
        ]
    },
    {
        "type": "type",
        "keyword": "interval HOUR TO SECOND",
        "tree": "(simpletypename (constinterval INTERVAL) (opt_interval HOUR TO (interval_second SECOND)))",
        "description": [
            "time span",
            "time interval"
        ],
        "detail": "[DESCRIPTION]: time span; time interval<sep>[STORAGE SIZE]: 16 bytes<sep>[LOW VALUE]: -178000000 years<sep>[HIGH VALUE]: 178000000 years<sep>[COMPENSATE]: <code>time</code>, <code>timestamp</code>, and <code>interval</code> accept an optional precision value <code>p</code> which specifies the number of fractional digits retained in the seconds field. By default, there is no explicit bound on precision. The allowed range of <code>p</code> is from 0 to 6.; The <code>interval</code> type has an additional option, which is to restrict the set of stored fields by writing one of these phrases:; where <code>p</code> is an optional precision specification giving the number of fractional digits in the seconds field. Precision can be specified for <code>time</code>, <code>timestamp</code>, and <code>interval</code> types, and can range from 0 to 6. If no precision is specified in a constant specification, it defaults to the precision of the literal value (but not more than 6 digits).; \n<code>interval</code> values can be written using the following verbose syntax:\n<code>\n[@] <code>quantity</code> <code>unit</code> [<code>quantity</code> <code>unit</code>...] [<code>direction</code>]\n</code>\nwhere <code>quantity</code> is a number (possibly signed); <code>unit</code> is <code>microsecond</code>, <code>millisecond</code>, <code>second</code>, <code>minute</code>, <code>hour</code>, <code>day</code>, <code>week</code>, <code>month</code>, <code>year</code>, <code>decade</code>, <code>century</code>, <code>millennium</code>, or abbreviations or plurals of these units; <code>direction</code> can be <code>ago</code> or empty. The at sign (<code>@</code>) is optional noise. The amounts of the different units are implicitly added with appropriate sign accounting. <code>ago</code> negates all the fields. This syntax is also used for interval output, if IntervalStyle is set to <code>postgres_verbose</code>.\nQuantities of days, hours, minutes, and seconds can be specified without explicit unit markings. For example, <code>'1 12:59:10'</code> is read the same as <code>'1 day 12 hours 59 min 10 sec'</code>. Also, a combination of years and months can be specified with a dash; for example <code>'200-10'</code> is read the same as <code>'200 years 10 months'</code>. (These shorter forms are in fact the only ones allowed by the SQL standard, and are used for output when <code>IntervalStyle</code> is set to <code>sql_standard</code>.)\nInterval values can also be written as ISO 8601 time intervals, using either the \"format with designators\" of the standard's section 4.4.3.2 or the \"alternative format\" of section 4.4.3.3. The format with designators looks like this:\n<code>\nP <code>quantity</code> <code>unit</code> [ <code>quantity</code> <code>unit</code> ...] [ T [ <code>quantity</code> <code>unit</code> ...]]\n</code>\nThe string must start with a <code>P</code>, and may include a <code>T</code> that introduces the time-of-day units. The available unit abbreviations are given in Table 8.16. Units may be omitted, and may be specified in any order, but units smaller than a day must appear after <code>T</code>. In particular, the meaning of <code>M</code> depends on whether it is before or after <code>T</code>.\nTable 8.16. ISO 8601 Interval Unit Abbreviations\n<table>\n<thead>\n<tr>\n<th>Abbreviation</th>\n<th>Meaning</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Y</td>\n<td>Years</td>\n</tr>\n<tr>\n<td>M</td>\n<td>Months (in the date part)</td>\n</tr>\n<tr>\n<td>W</td>\n<td>Weeks</td>\n</tr>\n<tr>\n<td>D</td>\n<td>Days</td>\n</tr>\n<tr>\n<td>H</td>\n<td>Hours</td>\n</tr>\n<tr>\n<td>M</td>\n<td>Minutes (in the time part)</td>\n</tr>\n<tr>\n<td>S</td>\n<td>Seconds</td>\n</tr>\n</tbody>\n</table>\nIn the alternative format:\n<code>\nP [ <code>years</code>-<code>months</code>-<code>days</code> ] [ T <code>hours</code>:<code>minutes</code>:<code>seconds</code> ]\n</code>\nthe string must begin with <code>P</code>, and a <code>T</code> separates the date and time parts of the interval. The values are given as numbers similar to ISO 8601 dates.\nWhen writing an interval constant with a <code>fields</code> specification, or when assigning a string to an interval column that was defined with a <code>fields</code> specification, the interpretation of unmarked quantities depends on the <code>fields</code>. For example <code>INTERVAL '1' YEAR</code> is read as 1 year, whereas <code>INTERVAL '1'</code> means 1 second. Also, field values \"to the right\" of the least significant field allowed by the <code>fields</code> specification are silently discarded. For example, writing <code>INTERVAL '1 day 2:03:04' HOUR TO MINUTE</code> results in dropping the seconds field, but not the day field.\nAccording to the SQL standard all fields of an interval value must have the same sign, so a leading negative sign applies to all fields; for example the negative sign in the interval literal <code>'-1 2:03:04'</code> applies to both the days and hour/minute/second parts. PostgreSQL allows the fields to have different signs, and traditionally treats each field in the textual representation as independently signed, so that the hour/minute/second part is considered positive in this example. If <code>IntervalStyle</code> is set to <code>sql_standard</code> then a leading sign is considered to apply to all fields (but only if no additional signs appear). Otherwise the traditional PostgreSQL interpretation is used. To avoid ambiguity, it's recommended to attach an explicit sign to each field if any field is negative.\nField values can have fractional parts: for example, <code>'1.5 weeks'</code> or <code>'01:02:03.45'</code>. However, because interval internally stores only three integer units (months, days, microseconds), fractional units must be spilled to smaller units. Fractional parts of units greater than months are truncated to be an integer number of months, e.g. <code>'1.5 years'</code> becomes <code>'1 year 6 mons'</code>. Fractional parts of weeks and days are computed to be an integer number of days and microseconds, assuming 30 days per month and 24 hours per day, e.g., <code>'1.75 months'</code> becomes <code>1 mon 22 days 12:00:00</code>. Only seconds will ever be shown as fractional on output.\nTable 8.17 shows some examples of valid <code>interval</code> input.\nTable 8.17. Interval Input\n<table>\n<thead>\n<tr>\n<th>Example</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1-2</td>\n<td>SQL standard format: 1 year 2 months</td>\n</tr>\n<tr>\n<td>3 4:05:06</td>\n<td>SQL standard format: 3 days 4 hours 5 minutes 6 seconds</td>\n</tr>\n<tr>\n<td>1 year 2 months 3 days 4 hours 5 minutes 6 seconds</td>\n<td>Traditional Postgres format: 1 year 2 months 3 days 4 hours 5 minutes 6 seconds</td>\n</tr>\n<tr>\n<td>P1Y2M3DT4H5M6S</td>\n<td>ISO 8601 \"format with designators\": same meaning as above</td>\n</tr>\n<tr>\n<td>P0001-02-03T04:05:06</td>\n<td>ISO 8601 \"alternative format\": same meaning as above</td>\n</tr>\n</tbody>\n</table>\nInternally <code>interval</code> values are stored as months, days, and microseconds. This is done because the number of days in a month varies, and a day can have 23 or 25 hours if a daylight savings time adjustment is involved. The months and days fields are integers while the microseconds field can store fractional seconds. Because intervals are usually created from constant strings or <code>timestamp</code> subtraction, this storage method works well in most cases, but can cause unexpected results:\n<code>\nSELECT EXTRACT(hours from '80 minutes'::interval);\n date_part\n-----------\n 1\nSELECT EXTRACT(days from '80 hours'::interval);\n date_part\n-----------\n 0\n</code>\nFunctions <code>justify_days</code> and <code>justify_hours</code> are available for adjusting days and hours that overflow their normal ranges.\n; \nThe output format of the interval type can be set to one of the four styles <code>sql_standard</code>, <code>postgres</code>, <code>postgres_verbose</code>, or <code>iso_8601</code>, using the command <code>SET intervalstyle</code>. The default is the <code>postgres</code> format. Table 8.18 shows examples of each output style.\nThe <code>sql_standard</code> style produces output that conforms to the SQL standard's specification for interval literal strings, if the interval value meets the standard's restrictions (either year-month only or day-time only, with no mixing of positive and negative components). Otherwise the output looks like a standard year-month literal string followed by a day-time literal string, with explicit signs added to disambiguate mixed-sign intervals.\nThe output of the <code>postgres</code> style matches the output of PostgreSQL releases prior to 8.4 when the DateStyle parameter was set to <code>ISO</code>.\nThe output of the <code>postgres_verbose</code> style matches the output of PostgreSQL releases prior to 8.4 when the <code>DateStyle</code> parameter was set to non-<code>ISO</code> output.\nThe output of the <code>iso_8601</code> style matches the \"format with designators\" described in section 4.4.3.2 of the ISO 8601 standard.\nTable 8.18. Interval Output Style Examples\n<table>\n<thead>\n<tr>\n<th>Style Specification</th>\n<th>Year-Month Interval</th>\n<th>Day-Time Interval</th>\n<th>Mixed Interval</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>sql_standard</code></td>\n<td>1-2</td>\n<td>3 4:05:06</td>\n<td>-1-2 +3 -4:05:06</td>\n</tr>\n<tr>\n<td><code>postgres</code></td>\n<td>1 year 2 mons</td>\n<td>3 days 04:05:06</td>\n<td>-1 year -2 mons +3 days -04:05:06</td>\n</tr>\n<tr>\n<td><code>postgres_verbose</code></td>\n<td>@ 1 year 2 mons</td>\n<td>@ 3 days 4 hours 5 mins 6 secs</td>\n<td>@ 1 year 2 mons -3 days 4 hours 5 mins 6 secs ago</td>\n</tr>\n<tr>\n<td><code>iso_8601</code></td>\n<td>P1Y2M</td>\n<td>P3DT4H5M6S</td>\n<td>P-1Y-2M3DT-4H-5M-6S</td>\n</tr>\n</tbody>\n</table>\n",
        "example": [],
        "link": [
            "https://www.postgresql.org/docs/12/datatype-datetime.html"
        ]
    },
    {
        "type": "type",
        "keyword": "interval HOUR TO SECOND ( p )",
        "tree": "(simpletypename (constinterval INTERVAL) (opt_interval HOUR TO (interval_second SECOND ( ))))",
        "description": [
            "time span",
            "time interval"
        ],
        "detail": "[DESCRIPTION]: time span; time interval<sep>[STORAGE SIZE]: 16 bytes<sep>[LOW VALUE]: -178000000 years<sep>[HIGH VALUE]: 178000000 years<sep>[COMPENSATE]: <code>time</code>, <code>timestamp</code>, and <code>interval</code> accept an optional precision value <code>p</code> which specifies the number of fractional digits retained in the seconds field. By default, there is no explicit bound on precision. The allowed range of <code>p</code> is from 0 to 6.; The <code>interval</code> type has an additional option, which is to restrict the set of stored fields by writing one of these phrases:; where <code>p</code> is an optional precision specification giving the number of fractional digits in the seconds field. Precision can be specified for <code>time</code>, <code>timestamp</code>, and <code>interval</code> types, and can range from 0 to 6. If no precision is specified in a constant specification, it defaults to the precision of the literal value (but not more than 6 digits).; \n<code>interval</code> values can be written using the following verbose syntax:\n<code>\n[@] <code>quantity</code> <code>unit</code> [<code>quantity</code> <code>unit</code>...] [<code>direction</code>]\n</code>\nwhere <code>quantity</code> is a number (possibly signed); <code>unit</code> is <code>microsecond</code>, <code>millisecond</code>, <code>second</code>, <code>minute</code>, <code>hour</code>, <code>day</code>, <code>week</code>, <code>month</code>, <code>year</code>, <code>decade</code>, <code>century</code>, <code>millennium</code>, or abbreviations or plurals of these units; <code>direction</code> can be <code>ago</code> or empty. The at sign (<code>@</code>) is optional noise. The amounts of the different units are implicitly added with appropriate sign accounting. <code>ago</code> negates all the fields. This syntax is also used for interval output, if IntervalStyle is set to <code>postgres_verbose</code>.\nQuantities of days, hours, minutes, and seconds can be specified without explicit unit markings. For example, <code>'1 12:59:10'</code> is read the same as <code>'1 day 12 hours 59 min 10 sec'</code>. Also, a combination of years and months can be specified with a dash; for example <code>'200-10'</code> is read the same as <code>'200 years 10 months'</code>. (These shorter forms are in fact the only ones allowed by the SQL standard, and are used for output when <code>IntervalStyle</code> is set to <code>sql_standard</code>.)\nInterval values can also be written as ISO 8601 time intervals, using either the \"format with designators\" of the standard's section 4.4.3.2 or the \"alternative format\" of section 4.4.3.3. The format with designators looks like this:\n<code>\nP <code>quantity</code> <code>unit</code> [ <code>quantity</code> <code>unit</code> ...] [ T [ <code>quantity</code> <code>unit</code> ...]]\n</code>\nThe string must start with a <code>P</code>, and may include a <code>T</code> that introduces the time-of-day units. The available unit abbreviations are given in Table 8.16. Units may be omitted, and may be specified in any order, but units smaller than a day must appear after <code>T</code>. In particular, the meaning of <code>M</code> depends on whether it is before or after <code>T</code>.\nTable 8.16. ISO 8601 Interval Unit Abbreviations\n<table>\n<thead>\n<tr>\n<th>Abbreviation</th>\n<th>Meaning</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Y</td>\n<td>Years</td>\n</tr>\n<tr>\n<td>M</td>\n<td>Months (in the date part)</td>\n</tr>\n<tr>\n<td>W</td>\n<td>Weeks</td>\n</tr>\n<tr>\n<td>D</td>\n<td>Days</td>\n</tr>\n<tr>\n<td>H</td>\n<td>Hours</td>\n</tr>\n<tr>\n<td>M</td>\n<td>Minutes (in the time part)</td>\n</tr>\n<tr>\n<td>S</td>\n<td>Seconds</td>\n</tr>\n</tbody>\n</table>\nIn the alternative format:\n<code>\nP [ <code>years</code>-<code>months</code>-<code>days</code> ] [ T <code>hours</code>:<code>minutes</code>:<code>seconds</code> ]\n</code>\nthe string must begin with <code>P</code>, and a <code>T</code> separates the date and time parts of the interval. The values are given as numbers similar to ISO 8601 dates.\nWhen writing an interval constant with a <code>fields</code> specification, or when assigning a string to an interval column that was defined with a <code>fields</code> specification, the interpretation of unmarked quantities depends on the <code>fields</code>. For example <code>INTERVAL '1' YEAR</code> is read as 1 year, whereas <code>INTERVAL '1'</code> means 1 second. Also, field values \"to the right\" of the least significant field allowed by the <code>fields</code> specification are silently discarded. For example, writing <code>INTERVAL '1 day 2:03:04' HOUR TO MINUTE</code> results in dropping the seconds field, but not the day field.\nAccording to the SQL standard all fields of an interval value must have the same sign, so a leading negative sign applies to all fields; for example the negative sign in the interval literal <code>'-1 2:03:04'</code> applies to both the days and hour/minute/second parts. PostgreSQL allows the fields to have different signs, and traditionally treats each field in the textual representation as independently signed, so that the hour/minute/second part is considered positive in this example. If <code>IntervalStyle</code> is set to <code>sql_standard</code> then a leading sign is considered to apply to all fields (but only if no additional signs appear). Otherwise the traditional PostgreSQL interpretation is used. To avoid ambiguity, it's recommended to attach an explicit sign to each field if any field is negative.\nField values can have fractional parts: for example, <code>'1.5 weeks'</code> or <code>'01:02:03.45'</code>. However, because interval internally stores only three integer units (months, days, microseconds), fractional units must be spilled to smaller units. Fractional parts of units greater than months are truncated to be an integer number of months, e.g. <code>'1.5 years'</code> becomes <code>'1 year 6 mons'</code>. Fractional parts of weeks and days are computed to be an integer number of days and microseconds, assuming 30 days per month and 24 hours per day, e.g., <code>'1.75 months'</code> becomes <code>1 mon 22 days 12:00:00</code>. Only seconds will ever be shown as fractional on output.\nTable 8.17 shows some examples of valid <code>interval</code> input.\nTable 8.17. Interval Input\n<table>\n<thead>\n<tr>\n<th>Example</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1-2</td>\n<td>SQL standard format: 1 year 2 months</td>\n</tr>\n<tr>\n<td>3 4:05:06</td>\n<td>SQL standard format: 3 days 4 hours 5 minutes 6 seconds</td>\n</tr>\n<tr>\n<td>1 year 2 months 3 days 4 hours 5 minutes 6 seconds</td>\n<td>Traditional Postgres format: 1 year 2 months 3 days 4 hours 5 minutes 6 seconds</td>\n</tr>\n<tr>\n<td>P1Y2M3DT4H5M6S</td>\n<td>ISO 8601 \"format with designators\": same meaning as above</td>\n</tr>\n<tr>\n<td>P0001-02-03T04:05:06</td>\n<td>ISO 8601 \"alternative format\": same meaning as above</td>\n</tr>\n</tbody>\n</table>\nInternally <code>interval</code> values are stored as months, days, and microseconds. This is done because the number of days in a month varies, and a day can have 23 or 25 hours if a daylight savings time adjustment is involved. The months and days fields are integers while the microseconds field can store fractional seconds. Because intervals are usually created from constant strings or <code>timestamp</code> subtraction, this storage method works well in most cases, but can cause unexpected results:\n<code>\nSELECT EXTRACT(hours from '80 minutes'::interval);\n date_part\n-----------\n 1\nSELECT EXTRACT(days from '80 hours'::interval);\n date_part\n-----------\n 0\n</code>\nFunctions <code>justify_days</code> and <code>justify_hours</code> are available for adjusting days and hours that overflow their normal ranges.\n; \nThe output format of the interval type can be set to one of the four styles <code>sql_standard</code>, <code>postgres</code>, <code>postgres_verbose</code>, or <code>iso_8601</code>, using the command <code>SET intervalstyle</code>. The default is the <code>postgres</code> format. Table 8.18 shows examples of each output style.\nThe <code>sql_standard</code> style produces output that conforms to the SQL standard's specification for interval literal strings, if the interval value meets the standard's restrictions (either year-month only or day-time only, with no mixing of positive and negative components). Otherwise the output looks like a standard year-month literal string followed by a day-time literal string, with explicit signs added to disambiguate mixed-sign intervals.\nThe output of the <code>postgres</code> style matches the output of PostgreSQL releases prior to 8.4 when the DateStyle parameter was set to <code>ISO</code>.\nThe output of the <code>postgres_verbose</code> style matches the output of PostgreSQL releases prior to 8.4 when the <code>DateStyle</code> parameter was set to non-<code>ISO</code> output.\nThe output of the <code>iso_8601</code> style matches the \"format with designators\" described in section 4.4.3.2 of the ISO 8601 standard.\nTable 8.18. Interval Output Style Examples\n<table>\n<thead>\n<tr>\n<th>Style Specification</th>\n<th>Year-Month Interval</th>\n<th>Day-Time Interval</th>\n<th>Mixed Interval</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>sql_standard</code></td>\n<td>1-2</td>\n<td>3 4:05:06</td>\n<td>-1-2 +3 -4:05:06</td>\n</tr>\n<tr>\n<td><code>postgres</code></td>\n<td>1 year 2 mons</td>\n<td>3 days 04:05:06</td>\n<td>-1 year -2 mons +3 days -04:05:06</td>\n</tr>\n<tr>\n<td><code>postgres_verbose</code></td>\n<td>@ 1 year 2 mons</td>\n<td>@ 3 days 4 hours 5 mins 6 secs</td>\n<td>@ 1 year 2 mons -3 days 4 hours 5 mins 6 secs ago</td>\n</tr>\n<tr>\n<td><code>iso_8601</code></td>\n<td>P1Y2M</td>\n<td>P3DT4H5M6S</td>\n<td>P-1Y-2M3DT-4H-5M-6S</td>\n</tr>\n</tbody>\n</table>\n",
        "example": [],
        "link": [
            "https://www.postgresql.org/docs/12/datatype-datetime.html"
        ]
    },
    {
        "type": "type",
        "keyword": "interval MINUTE TO SECOND",
        "tree": "(simpletypename (constinterval INTERVAL) (opt_interval MINUTE TO (interval_second SECOND)))",
        "description": [
            "time span",
            "time interval"
        ],
        "detail": "[DESCRIPTION]: time span; time interval<sep>[STORAGE SIZE]: 16 bytes<sep>[LOW VALUE]: -178000000 years<sep>[HIGH VALUE]: 178000000 years<sep>[COMPENSATE]: <code>time</code>, <code>timestamp</code>, and <code>interval</code> accept an optional precision value <code>p</code> which specifies the number of fractional digits retained in the seconds field. By default, there is no explicit bound on precision. The allowed range of <code>p</code> is from 0 to 6.; The <code>interval</code> type has an additional option, which is to restrict the set of stored fields by writing one of these phrases:; where <code>p</code> is an optional precision specification giving the number of fractional digits in the seconds field. Precision can be specified for <code>time</code>, <code>timestamp</code>, and <code>interval</code> types, and can range from 0 to 6. If no precision is specified in a constant specification, it defaults to the precision of the literal value (but not more than 6 digits).; \n<code>interval</code> values can be written using the following verbose syntax:\n<code>\n[@] <code>quantity</code> <code>unit</code> [<code>quantity</code> <code>unit</code>...] [<code>direction</code>]\n</code>\nwhere <code>quantity</code> is a number (possibly signed); <code>unit</code> is <code>microsecond</code>, <code>millisecond</code>, <code>second</code>, <code>minute</code>, <code>hour</code>, <code>day</code>, <code>week</code>, <code>month</code>, <code>year</code>, <code>decade</code>, <code>century</code>, <code>millennium</code>, or abbreviations or plurals of these units; <code>direction</code> can be <code>ago</code> or empty. The at sign (<code>@</code>) is optional noise. The amounts of the different units are implicitly added with appropriate sign accounting. <code>ago</code> negates all the fields. This syntax is also used for interval output, if IntervalStyle is set to <code>postgres_verbose</code>.\nQuantities of days, hours, minutes, and seconds can be specified without explicit unit markings. For example, <code>'1 12:59:10'</code> is read the same as <code>'1 day 12 hours 59 min 10 sec'</code>. Also, a combination of years and months can be specified with a dash; for example <code>'200-10'</code> is read the same as <code>'200 years 10 months'</code>. (These shorter forms are in fact the only ones allowed by the SQL standard, and are used for output when <code>IntervalStyle</code> is set to <code>sql_standard</code>.)\nInterval values can also be written as ISO 8601 time intervals, using either the \"format with designators\" of the standard's section 4.4.3.2 or the \"alternative format\" of section 4.4.3.3. The format with designators looks like this:\n<code>\nP <code>quantity</code> <code>unit</code> [ <code>quantity</code> <code>unit</code> ...] [ T [ <code>quantity</code> <code>unit</code> ...]]\n</code>\nThe string must start with a <code>P</code>, and may include a <code>T</code> that introduces the time-of-day units. The available unit abbreviations are given in Table 8.16. Units may be omitted, and may be specified in any order, but units smaller than a day must appear after <code>T</code>. In particular, the meaning of <code>M</code> depends on whether it is before or after <code>T</code>.\nTable 8.16. ISO 8601 Interval Unit Abbreviations\n<table>\n<thead>\n<tr>\n<th>Abbreviation</th>\n<th>Meaning</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Y</td>\n<td>Years</td>\n</tr>\n<tr>\n<td>M</td>\n<td>Months (in the date part)</td>\n</tr>\n<tr>\n<td>W</td>\n<td>Weeks</td>\n</tr>\n<tr>\n<td>D</td>\n<td>Days</td>\n</tr>\n<tr>\n<td>H</td>\n<td>Hours</td>\n</tr>\n<tr>\n<td>M</td>\n<td>Minutes (in the time part)</td>\n</tr>\n<tr>\n<td>S</td>\n<td>Seconds</td>\n</tr>\n</tbody>\n</table>\nIn the alternative format:\n<code>\nP [ <code>years</code>-<code>months</code>-<code>days</code> ] [ T <code>hours</code>:<code>minutes</code>:<code>seconds</code> ]\n</code>\nthe string must begin with <code>P</code>, and a <code>T</code> separates the date and time parts of the interval. The values are given as numbers similar to ISO 8601 dates.\nWhen writing an interval constant with a <code>fields</code> specification, or when assigning a string to an interval column that was defined with a <code>fields</code> specification, the interpretation of unmarked quantities depends on the <code>fields</code>. For example <code>INTERVAL '1' YEAR</code> is read as 1 year, whereas <code>INTERVAL '1'</code> means 1 second. Also, field values \"to the right\" of the least significant field allowed by the <code>fields</code> specification are silently discarded. For example, writing <code>INTERVAL '1 day 2:03:04' HOUR TO MINUTE</code> results in dropping the seconds field, but not the day field.\nAccording to the SQL standard all fields of an interval value must have the same sign, so a leading negative sign applies to all fields; for example the negative sign in the interval literal <code>'-1 2:03:04'</code> applies to both the days and hour/minute/second parts. PostgreSQL allows the fields to have different signs, and traditionally treats each field in the textual representation as independently signed, so that the hour/minute/second part is considered positive in this example. If <code>IntervalStyle</code> is set to <code>sql_standard</code> then a leading sign is considered to apply to all fields (but only if no additional signs appear). Otherwise the traditional PostgreSQL interpretation is used. To avoid ambiguity, it's recommended to attach an explicit sign to each field if any field is negative.\nField values can have fractional parts: for example, <code>'1.5 weeks'</code> or <code>'01:02:03.45'</code>. However, because interval internally stores only three integer units (months, days, microseconds), fractional units must be spilled to smaller units. Fractional parts of units greater than months are truncated to be an integer number of months, e.g. <code>'1.5 years'</code> becomes <code>'1 year 6 mons'</code>. Fractional parts of weeks and days are computed to be an integer number of days and microseconds, assuming 30 days per month and 24 hours per day, e.g., <code>'1.75 months'</code> becomes <code>1 mon 22 days 12:00:00</code>. Only seconds will ever be shown as fractional on output.\nTable 8.17 shows some examples of valid <code>interval</code> input.\nTable 8.17. Interval Input\n<table>\n<thead>\n<tr>\n<th>Example</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1-2</td>\n<td>SQL standard format: 1 year 2 months</td>\n</tr>\n<tr>\n<td>3 4:05:06</td>\n<td>SQL standard format: 3 days 4 hours 5 minutes 6 seconds</td>\n</tr>\n<tr>\n<td>1 year 2 months 3 days 4 hours 5 minutes 6 seconds</td>\n<td>Traditional Postgres format: 1 year 2 months 3 days 4 hours 5 minutes 6 seconds</td>\n</tr>\n<tr>\n<td>P1Y2M3DT4H5M6S</td>\n<td>ISO 8601 \"format with designators\": same meaning as above</td>\n</tr>\n<tr>\n<td>P0001-02-03T04:05:06</td>\n<td>ISO 8601 \"alternative format\": same meaning as above</td>\n</tr>\n</tbody>\n</table>\nInternally <code>interval</code> values are stored as months, days, and microseconds. This is done because the number of days in a month varies, and a day can have 23 or 25 hours if a daylight savings time adjustment is involved. The months and days fields are integers while the microseconds field can store fractional seconds. Because intervals are usually created from constant strings or <code>timestamp</code> subtraction, this storage method works well in most cases, but can cause unexpected results:\n<code>\nSELECT EXTRACT(hours from '80 minutes'::interval);\n date_part\n-----------\n 1\nSELECT EXTRACT(days from '80 hours'::interval);\n date_part\n-----------\n 0\n</code>\nFunctions <code>justify_days</code> and <code>justify_hours</code> are available for adjusting days and hours that overflow their normal ranges.\n; \nThe output format of the interval type can be set to one of the four styles <code>sql_standard</code>, <code>postgres</code>, <code>postgres_verbose</code>, or <code>iso_8601</code>, using the command <code>SET intervalstyle</code>. The default is the <code>postgres</code> format. Table 8.18 shows examples of each output style.\nThe <code>sql_standard</code> style produces output that conforms to the SQL standard's specification for interval literal strings, if the interval value meets the standard's restrictions (either year-month only or day-time only, with no mixing of positive and negative components). Otherwise the output looks like a standard year-month literal string followed by a day-time literal string, with explicit signs added to disambiguate mixed-sign intervals.\nThe output of the <code>postgres</code> style matches the output of PostgreSQL releases prior to 8.4 when the DateStyle parameter was set to <code>ISO</code>.\nThe output of the <code>postgres_verbose</code> style matches the output of PostgreSQL releases prior to 8.4 when the <code>DateStyle</code> parameter was set to non-<code>ISO</code> output.\nThe output of the <code>iso_8601</code> style matches the \"format with designators\" described in section 4.4.3.2 of the ISO 8601 standard.\nTable 8.18. Interval Output Style Examples\n<table>\n<thead>\n<tr>\n<th>Style Specification</th>\n<th>Year-Month Interval</th>\n<th>Day-Time Interval</th>\n<th>Mixed Interval</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>sql_standard</code></td>\n<td>1-2</td>\n<td>3 4:05:06</td>\n<td>-1-2 +3 -4:05:06</td>\n</tr>\n<tr>\n<td><code>postgres</code></td>\n<td>1 year 2 mons</td>\n<td>3 days 04:05:06</td>\n<td>-1 year -2 mons +3 days -04:05:06</td>\n</tr>\n<tr>\n<td><code>postgres_verbose</code></td>\n<td>@ 1 year 2 mons</td>\n<td>@ 3 days 4 hours 5 mins 6 secs</td>\n<td>@ 1 year 2 mons -3 days 4 hours 5 mins 6 secs ago</td>\n</tr>\n<tr>\n<td><code>iso_8601</code></td>\n<td>P1Y2M</td>\n<td>P3DT4H5M6S</td>\n<td>P-1Y-2M3DT-4H-5M-6S</td>\n</tr>\n</tbody>\n</table>\n",
        "example": [],
        "link": [
            "https://www.postgresql.org/docs/12/datatype-datetime.html"
        ]
    },
    {
        "type": "type",
        "keyword": "interval MINUTE TO SECOND ( p )",
        "tree": "(simpletypename (constinterval INTERVAL) (opt_interval MINUTE TO (interval_second SECOND ( ))))",
        "description": [
            "time span",
            "time interval"
        ],
        "detail": "[DESCRIPTION]: time span; time interval<sep>[STORAGE SIZE]: 16 bytes<sep>[LOW VALUE]: -178000000 years<sep>[HIGH VALUE]: 178000000 years<sep>[COMPENSATE]: <code>time</code>, <code>timestamp</code>, and <code>interval</code> accept an optional precision value <code>p</code> which specifies the number of fractional digits retained in the seconds field. By default, there is no explicit bound on precision. The allowed range of <code>p</code> is from 0 to 6.; The <code>interval</code> type has an additional option, which is to restrict the set of stored fields by writing one of these phrases:; where <code>p</code> is an optional precision specification giving the number of fractional digits in the seconds field. Precision can be specified for <code>time</code>, <code>timestamp</code>, and <code>interval</code> types, and can range from 0 to 6. If no precision is specified in a constant specification, it defaults to the precision of the literal value (but not more than 6 digits).; \n<code>interval</code> values can be written using the following verbose syntax:\n<code>\n[@] <code>quantity</code> <code>unit</code> [<code>quantity</code> <code>unit</code>...] [<code>direction</code>]\n</code>\nwhere <code>quantity</code> is a number (possibly signed); <code>unit</code> is <code>microsecond</code>, <code>millisecond</code>, <code>second</code>, <code>minute</code>, <code>hour</code>, <code>day</code>, <code>week</code>, <code>month</code>, <code>year</code>, <code>decade</code>, <code>century</code>, <code>millennium</code>, or abbreviations or plurals of these units; <code>direction</code> can be <code>ago</code> or empty. The at sign (<code>@</code>) is optional noise. The amounts of the different units are implicitly added with appropriate sign accounting. <code>ago</code> negates all the fields. This syntax is also used for interval output, if IntervalStyle is set to <code>postgres_verbose</code>.\nQuantities of days, hours, minutes, and seconds can be specified without explicit unit markings. For example, <code>'1 12:59:10'</code> is read the same as <code>'1 day 12 hours 59 min 10 sec'</code>. Also, a combination of years and months can be specified with a dash; for example <code>'200-10'</code> is read the same as <code>'200 years 10 months'</code>. (These shorter forms are in fact the only ones allowed by the SQL standard, and are used for output when <code>IntervalStyle</code> is set to <code>sql_standard</code>.)\nInterval values can also be written as ISO 8601 time intervals, using either the \"format with designators\" of the standard's section 4.4.3.2 or the \"alternative format\" of section 4.4.3.3. The format with designators looks like this:\n<code>\nP <code>quantity</code> <code>unit</code> [ <code>quantity</code> <code>unit</code> ...] [ T [ <code>quantity</code> <code>unit</code> ...]]\n</code>\nThe string must start with a <code>P</code>, and may include a <code>T</code> that introduces the time-of-day units. The available unit abbreviations are given in Table 8.16. Units may be omitted, and may be specified in any order, but units smaller than a day must appear after <code>T</code>. In particular, the meaning of <code>M</code> depends on whether it is before or after <code>T</code>.\nTable 8.16. ISO 8601 Interval Unit Abbreviations\n<table>\n<thead>\n<tr>\n<th>Abbreviation</th>\n<th>Meaning</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Y</td>\n<td>Years</td>\n</tr>\n<tr>\n<td>M</td>\n<td>Months (in the date part)</td>\n</tr>\n<tr>\n<td>W</td>\n<td>Weeks</td>\n</tr>\n<tr>\n<td>D</td>\n<td>Days</td>\n</tr>\n<tr>\n<td>H</td>\n<td>Hours</td>\n</tr>\n<tr>\n<td>M</td>\n<td>Minutes (in the time part)</td>\n</tr>\n<tr>\n<td>S</td>\n<td>Seconds</td>\n</tr>\n</tbody>\n</table>\nIn the alternative format:\n<code>\nP [ <code>years</code>-<code>months</code>-<code>days</code> ] [ T <code>hours</code>:<code>minutes</code>:<code>seconds</code> ]\n</code>\nthe string must begin with <code>P</code>, and a <code>T</code> separates the date and time parts of the interval. The values are given as numbers similar to ISO 8601 dates.\nWhen writing an interval constant with a <code>fields</code> specification, or when assigning a string to an interval column that was defined with a <code>fields</code> specification, the interpretation of unmarked quantities depends on the <code>fields</code>. For example <code>INTERVAL '1' YEAR</code> is read as 1 year, whereas <code>INTERVAL '1'</code> means 1 second. Also, field values \"to the right\" of the least significant field allowed by the <code>fields</code> specification are silently discarded. For example, writing <code>INTERVAL '1 day 2:03:04' HOUR TO MINUTE</code> results in dropping the seconds field, but not the day field.\nAccording to the SQL standard all fields of an interval value must have the same sign, so a leading negative sign applies to all fields; for example the negative sign in the interval literal <code>'-1 2:03:04'</code> applies to both the days and hour/minute/second parts. PostgreSQL allows the fields to have different signs, and traditionally treats each field in the textual representation as independently signed, so that the hour/minute/second part is considered positive in this example. If <code>IntervalStyle</code> is set to <code>sql_standard</code> then a leading sign is considered to apply to all fields (but only if no additional signs appear). Otherwise the traditional PostgreSQL interpretation is used. To avoid ambiguity, it's recommended to attach an explicit sign to each field if any field is negative.\nField values can have fractional parts: for example, <code>'1.5 weeks'</code> or <code>'01:02:03.45'</code>. However, because interval internally stores only three integer units (months, days, microseconds), fractional units must be spilled to smaller units. Fractional parts of units greater than months are truncated to be an integer number of months, e.g. <code>'1.5 years'</code> becomes <code>'1 year 6 mons'</code>. Fractional parts of weeks and days are computed to be an integer number of days and microseconds, assuming 30 days per month and 24 hours per day, e.g., <code>'1.75 months'</code> becomes <code>1 mon 22 days 12:00:00</code>. Only seconds will ever be shown as fractional on output.\nTable 8.17 shows some examples of valid <code>interval</code> input.\nTable 8.17. Interval Input\n<table>\n<thead>\n<tr>\n<th>Example</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1-2</td>\n<td>SQL standard format: 1 year 2 months</td>\n</tr>\n<tr>\n<td>3 4:05:06</td>\n<td>SQL standard format: 3 days 4 hours 5 minutes 6 seconds</td>\n</tr>\n<tr>\n<td>1 year 2 months 3 days 4 hours 5 minutes 6 seconds</td>\n<td>Traditional Postgres format: 1 year 2 months 3 days 4 hours 5 minutes 6 seconds</td>\n</tr>\n<tr>\n<td>P1Y2M3DT4H5M6S</td>\n<td>ISO 8601 \"format with designators\": same meaning as above</td>\n</tr>\n<tr>\n<td>P0001-02-03T04:05:06</td>\n<td>ISO 8601 \"alternative format\": same meaning as above</td>\n</tr>\n</tbody>\n</table>\nInternally <code>interval</code> values are stored as months, days, and microseconds. This is done because the number of days in a month varies, and a day can have 23 or 25 hours if a daylight savings time adjustment is involved. The months and days fields are integers while the microseconds field can store fractional seconds. Because intervals are usually created from constant strings or <code>timestamp</code> subtraction, this storage method works well in most cases, but can cause unexpected results:\n<code>\nSELECT EXTRACT(hours from '80 minutes'::interval);\n date_part\n-----------\n 1\nSELECT EXTRACT(days from '80 hours'::interval);\n date_part\n-----------\n 0\n</code>\nFunctions <code>justify_days</code> and <code>justify_hours</code> are available for adjusting days and hours that overflow their normal ranges.\n; \nThe output format of the interval type can be set to one of the four styles <code>sql_standard</code>, <code>postgres</code>, <code>postgres_verbose</code>, or <code>iso_8601</code>, using the command <code>SET intervalstyle</code>. The default is the <code>postgres</code> format. Table 8.18 shows examples of each output style.\nThe <code>sql_standard</code> style produces output that conforms to the SQL standard's specification for interval literal strings, if the interval value meets the standard's restrictions (either year-month only or day-time only, with no mixing of positive and negative components). Otherwise the output looks like a standard year-month literal string followed by a day-time literal string, with explicit signs added to disambiguate mixed-sign intervals.\nThe output of the <code>postgres</code> style matches the output of PostgreSQL releases prior to 8.4 when the DateStyle parameter was set to <code>ISO</code>.\nThe output of the <code>postgres_verbose</code> style matches the output of PostgreSQL releases prior to 8.4 when the <code>DateStyle</code> parameter was set to non-<code>ISO</code> output.\nThe output of the <code>iso_8601</code> style matches the \"format with designators\" described in section 4.4.3.2 of the ISO 8601 standard.\nTable 8.18. Interval Output Style Examples\n<table>\n<thead>\n<tr>\n<th>Style Specification</th>\n<th>Year-Month Interval</th>\n<th>Day-Time Interval</th>\n<th>Mixed Interval</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>sql_standard</code></td>\n<td>1-2</td>\n<td>3 4:05:06</td>\n<td>-1-2 +3 -4:05:06</td>\n</tr>\n<tr>\n<td><code>postgres</code></td>\n<td>1 year 2 mons</td>\n<td>3 days 04:05:06</td>\n<td>-1 year -2 mons +3 days -04:05:06</td>\n</tr>\n<tr>\n<td><code>postgres_verbose</code></td>\n<td>@ 1 year 2 mons</td>\n<td>@ 3 days 4 hours 5 mins 6 secs</td>\n<td>@ 1 year 2 mons -3 days 4 hours 5 mins 6 secs ago</td>\n</tr>\n<tr>\n<td><code>iso_8601</code></td>\n<td>P1Y2M</td>\n<td>P3DT4H5M6S</td>\n<td>P-1Y-2M3DT-4H-5M-6S</td>\n</tr>\n</tbody>\n</table>\n",
        "example": [],
        "link": [
            "https://www.postgresql.org/docs/12/datatype-datetime.html"
        ]
    },
    {
        "type": "type",
        "keyword": "boolean",
        "tree": "(numeric BOOLEAN)",
        "description": [
            "logical Boolean (true/false)",
            "state of true or false"
        ],
        "detail": "[DESCRIPTION]: logical Boolean (true/false); state of true or false<sep>[STORAGE SIZE]: 1 byte<sep>[COMPENSATE]: PostgreSQL provides the standard SQL type <code>boolean</code>; see Table 8.19. The <code>boolean</code> type can have several states: \"true\", \"false\", and a third state, \"unknown\", which is represented by the SQL null value.; The datatype input function for type <code>boolean</code> accepts these string representations for the \"true\" state:; The datatype output function for type <code>boolean</code> always emits either <code>t</code> or <code>f</code>, as shown in Example 8.2.; Example 8.2. Using the <code>boolean</code> Type; <code>\nCREATE TABLE test1 (a boolean, b text);\nINSERT INTO test1 VALUES (TRUE, 'sic est');\nINSERT INTO test1 VALUES (FALSE, 'non est');\nSELECT * FROM test1;\n a | b\n---+---------\n t | sic est\n f | non est\nSELECT * FROM test1 WHERE a;\n a | b\n---+---------\n t | sic est\n</code>; The key words <code>TRUE</code> and <code>FALSE</code> are the preferred (SQL-compliant) method for writing Boolean constants in SQL queries. But you can also use the string representations by following the generic string-literal constant syntax described in Section 4.1.2.7, for example <code>'yes'::boolean</code>.; Note that the parser automatically understands that <code>TRUE</code> and <code>FALSE</code> are of type <code>boolean</code>, but this is not so for <code>NULL</code> because that can have any type. So in some contexts you might have to cast <code>NULL</code> to <code>boolean</code> explicitly, for example <code>NULL::boolean</code>. Conversely, the cast can be omitted from a string-literal Boolean value in contexts where the parser can deduce that the literal must be of type <code>boolean</code>.",
        "example": [],
        "link": [
            "https://www.postgresql.org/docs/12/datatype-boolean.html"
        ]
    },
    {
        "type": "type",
        "keyword": "bool",
        "tree": "(identifier BOOL)",
        "description": [
            "logical Boolean (true/false)",
            "state of true or false"
        ],
        "detail": "[DESCRIPTION]: logical Boolean (true/false); state of true or false<sep>[STORAGE SIZE]: 1 byte<sep>[COMPENSATE]: PostgreSQL provides the standard SQL type <code>boolean</code>; see Table 8.19. The <code>boolean</code> type can have several states: \"true\", \"false\", and a third state, \"unknown\", which is represented by the SQL null value.; The datatype input function for type <code>boolean</code> accepts these string representations for the \"true\" state:; The datatype output function for type <code>boolean</code> always emits either <code>t</code> or <code>f</code>, as shown in Example 8.2.; Example 8.2. Using the <code>boolean</code> Type; <code>\nCREATE TABLE test1 (a boolean, b text);\nINSERT INTO test1 VALUES (TRUE, 'sic est');\nINSERT INTO test1 VALUES (FALSE, 'non est');\nSELECT * FROM test1;\n a | b\n---+---------\n t | sic est\n f | non est\nSELECT * FROM test1 WHERE a;\n a | b\n---+---------\n t | sic est\n</code>; The key words <code>TRUE</code> and <code>FALSE</code> are the preferred (SQL-compliant) method for writing Boolean constants in SQL queries. But you can also use the string representations by following the generic string-literal constant syntax described in Section 4.1.2.7, for example <code>'yes'::boolean</code>.; Note that the parser automatically understands that <code>TRUE</code> and <code>FALSE</code> are of type <code>boolean</code>, but this is not so for <code>NULL</code> because that can have any type. So in some contexts you might have to cast <code>NULL</code> to <code>boolean</code> explicitly, for example <code>NULL::boolean</code>. Conversely, the cast can be omitted from a string-literal Boolean value in contexts where the parser can deduce that the literal must be of type <code>boolean</code>.",
        "example": [],
        "link": [
            "https://www.postgresql.org/docs/12/datatype-boolean.html"
        ]
    },
    {
        "type": "type",
        "keyword": "point",
        "tree": "(identifier POINT)",
        "description": [
            "geometric point on a plane",
            "Point on a plane"
        ],
        "detail": "[DESCRIPTION]: geometric point on a plane; Point on a plane<sep>[STORAGE SIZE]: 16 bytes<sep>[COMPENSATE]: \nPoints are the fundamental two-dimensional building block for geometric types. Values of type <code>point</code> are specified using either of the following syntaxes:\n<code>\n( <code>x</code> , <code>y</code> )\n <code>x</code> , <code>y</code>\n</code>\nwhere <code>x</code> and <code>y</code> are the respective coordinates, as floating-point numbers.\nPoints are output using the first syntax.\n",
        "example": [],
        "link": [
            "https://www.postgresql.org/docs/12/datatype-geometric.html"
        ]
    },
    {
        "type": "type",
        "keyword": "line",
        "tree": "(identifier LINE)",
        "description": [
            "infinite line on a plane",
            "Infinite line"
        ],
        "detail": "[DESCRIPTION]: infinite line on a plane; Infinite line<sep>[STORAGE SIZE]: 24 bytes<sep>[COMPENSATE]: \nLines are represented by the linear equation <code>A</code>x + <code>B</code>y + <code>C</code> = 0, where <code>A</code> and <code>B</code> are not both zero. Values of type <code>line</code> are input and output in the following form:\n<code>\n{ <code>A</code>, <code>B</code>, <code>C</code> }\n</code>\nAlternatively, any of the following forms can be used for input:\n<code>\n[ ( <code>x1</code> , <code>y1</code> ) , ( <code>x2</code> , <code>y2</code> ) ]\n( ( <code>x1</code> , <code>y1</code> ) , ( <code>x2</code> , <code>y2</code> ) )\n ( <code>x1</code> , <code>y1</code> ) , ( <code>x2</code> , <code>y2</code> )\n <code>x1</code> , <code>y1</code> , <code>x2</code> , <code>y2</code>\n</code>\nwhere <code>(x1,y1)</code> and <code>(x2,y2)</code> are two different points on the line.\n; \nLine segments are represented by pairs of points that are the endpoints of the segment. Values of type <code>lseg</code> are specified using any of the following syntaxes:\n<code>\n[ ( <code>x1</code> , <code>y1</code> ) , ( <code>x2</code> , <code>y2</code> ) ]\n( ( <code>x1</code> , <code>y1</code> ) , ( <code>x2</code> , <code>y2</code> ) )\n ( <code>x1</code> , <code>y1</code> ) , ( <code>x2</code> , <code>y2</code> )\n <code>x1</code> , <code>y1</code> , <code>x2</code> , <code>y2</code>\n</code>\nwhere <code>(x1,y1)</code> and <code>(x2,y2)</code> are the end points of the line segment.\nLine segments are output using the first syntax.\n",
        "example": [],
        "link": [
            "https://www.postgresql.org/docs/12/datatype-geometric.html"
        ]
    },
    {
        "type": "type",
        "keyword": "lseg",
        "tree": "(identifier LSEG)",
        "description": [
            "line segment on a plane",
            "Finite line segment"
        ],
        "detail": "[DESCRIPTION]: line segment on a plane; Finite line segment<sep>[STORAGE SIZE]: 32 bytes<sep>[COMPENSATE]: Line segments are represented by pairs of points that are the endpoints of the segment. Values of type <code>lseg</code> are specified using any of the following syntaxes:",
        "example": [],
        "link": [
            "https://www.postgresql.org/docs/12/datatype-geometric.html"
        ]
    },
    {
        "type": "type",
        "keyword": "box",
        "tree": "(identifier BOX)",
        "description": [
            "rectangular box on a plane",
            "Rectangular box"
        ],
        "detail": "[DESCRIPTION]: rectangular box on a plane; Rectangular box<sep>[STORAGE SIZE]: 32 bytes<sep>[COMPENSATE]: \nBoxes are represented by pairs of points that are opposite corners of the box. Values of type <code>box</code> are specified using any of the following syntaxes:\n<code>\n( ( <code>x1</code> , <code>y1</code> ) , ( <code>x2</code> , <code>y2</code> ) )\n ( <code>x1</code> , <code>y1</code> ) , ( <code>x2</code> , <code>y2</code> )\n <code>x1</code> , <code>y1</code> , <code>x2</code> , <code>y2</code>\n</code>\nwhere <code>(x1,y1)</code> and <code>(x2,y2)</code> are any two opposite corners of the box.\nBoxes are output using the second syntax.\nAny two opposite corners can be supplied on input, but the values will be reordered as needed to store the upper right and lower left corners, in that order.\n",
        "example": [],
        "link": [
            "https://www.postgresql.org/docs/12/datatype-geometric.html"
        ]
    },
    {
        "type": "type",
        "keyword": "path",
        "tree": "(identifier PATH)",
        "description": [
            "geometric path on a plane",
            "Closed path (similar to polygon)",
            "Open path"
        ],
        "detail": "[DESCRIPTION]: geometric path on a plane; Closed path (similar to polygon); Open path<sep>[STORAGE SIZE]: 16+16n bytes<sep>[COMPENSATE]: \nPaths are represented by lists of connected points. Paths can be open, where the first and last points in the list are considered not connected, or closed, where the first and last points are considered connected.\nValues of type <code>path</code> are specified using any of the following syntaxes:\n<code>\n[ ( <code>x1</code> , <code>y1</code> ) , ... , ( <code>xn</code> , <code>yn</code> ) ]\n( ( <code>x1</code> , <code>y1</code> ) , ... , ( <code>xn</code> , <code>yn</code> ) )\n ( <code>x1</code> , <code>y1</code> ) , ... , ( <code>xn</code> , <code>yn</code> )\n ( <code>x1</code> , <code>y1</code> , ... , <code>xn</code> , <code>yn</code> )\n <code>x1</code> , <code>y1</code> , ... , <code>xn</code> , <code>yn</code>\n</code>\nwhere the points are the end points of the line segments comprising the path. Square brackets (<code>[]</code>) indicate an open path, while parentheses (<code>()</code>) indicate a closed path. When the outermost parentheses are omitted, as in the third through fifth syntaxes, a closed path is assumed.\nPaths are output using the first or second syntax, as appropriate.\n",
        "example": [],
        "link": [
            "https://www.postgresql.org/docs/12/datatype-geometric.html"
        ]
    },
    {
        "type": "type",
        "keyword": "polygon",
        "tree": "(identifier POLYGON)",
        "description": [
            "closed geometric path on a plane",
            "Polygon (similar to closed path)"
        ],
        "detail": "[DESCRIPTION]: closed geometric path on a plane; Polygon (similar to closed path)<sep>[STORAGE SIZE]: 40+16n bytes<sep>[COMPENSATE]: \nPolygons are represented by lists of points (the vertexes of the polygon). Polygons are very similar to closed paths; the essential semantic difference is that a polygon is considered to include the area within it, while a path is not.\nAn important implementation difference between polygons and paths is that the stored representation of a polygon includes its smallest bounding box. This speeds up certain search operations, although computing the bounding box adds overhead while constructing new polygons.\nValues of type <code>polygon</code> are specified using any of the following syntaxes:\n<code>\n( ( <code>x1</code> , <code>y1</code> ) , ... , ( <code>xn</code> , <code>yn</code> ) )\n ( <code>x1</code> , <code>y1</code> ) , ... , ( <code>xn</code> , <code>yn</code> )\n ( <code>x1</code> , <code>y1</code> , ... , <code>xn</code> , <code>yn</code> )\n <code>x1</code> , <code>y1</code> , ... , <code>xn</code> , <code>yn</code>\n</code>\nwhere the points are the end points of the line segments comprising the boundary of the polygon.\nPolygons are output using the first syntax.\n",
        "example": [],
        "link": [
            "https://www.postgresql.org/docs/12/datatype-geometric.html"
        ]
    },
    {
        "type": "type",
        "keyword": "circle",
        "tree": "(identifier CIRCLE)",
        "description": [
            "circle on a plane"
        ],
        "detail": "[DESCRIPTION]: circle on a plane<sep>[STORAGE SIZE]: 24 bytes<sep>[COMPENSATE]: \nCircles are represented by a center point and radius. Values of type <code>circle</code> are specified using any of the following syntaxes:\n<code>\n< ( <code>x</code> , <code>y</code> ) , <code>r</code> >\n( ( <code>x</code> , <code>y</code> ) , <code>r</code> )\n ( <code>x</code> , <code>y</code> ) , <code>r</code>\n <code>x</code> , <code>y</code> , <code>r</code>\n</code>\nwhere <code>(x,y)</code> is the center point and <code>r</code> is the radius of the circle.\nCircles are output using the first syntax.\n",
        "example": [],
        "link": [
            "https://www.postgresql.org/docs/12/datatype-geometric.html"
        ]
    },
    {
        "type": "type",
        "keyword": "cidr",
        "tree": "(identifier CIDR)",
        "description": [
            "IPv4 or IPv6 network address"
        ],
        "detail": "[DESCRIPTION]: IPv4 or IPv6 network address<sep>[STORAGE SIZE]: 7 or 19 bytes<sep>[COMPENSATE]: When sorting <code>inet</code> or <code>cidr</code> data types, IPv4 addresses will always sort before IPv6 addresses, including IPv4 addresses encapsulated or mapped to IPv6 addresses, such as ::10.2.3.4 or ::ffff:10.4.3.2.; The <code>inet</code> type holds an IPv4 or IPv6 host address, and optionally its subnet, all in one field. The subnet is represented by the number of network address bits present in the host address (the \"netmask\"). If the netmask is 32 and the address is IPv4, then the value does not indicate a subnet, only a single host. In IPv6, the address length is 128 bits, so 128 bits specify a unique host address. Note that if you want to accept only networks, you should use the <code>cidr</code> type rather than <code>inet</code>.; \nThe <code>cidr</code> type holds an IPv4 or IPv6 network specification. Input and output formats follow Classless Internet Domain Routing conventions. The format for specifying networks is <code>address/y</code> where <code>address</code> is the network represented as an IPv4 or IPv6 address, and <code>y</code> is the number of bits in the netmask. If <code>y</code> is omitted, it is calculated using assumptions from the older classful network numbering system, except it will be at least large enough to include all of the octets written in the input. It is an error to specify a network address that has bits set to the right of the specified netmask.\nTable 8.22 shows some examples.\nTable 8.22. <code>cidr</code> Type Input Examples\n<table>\n<thead>\n<tr>\n<th><code>cidr</code> Input</th>\n<th><code>cidr</code> Output</th>\n<th><code>abbrev(cidr)</code></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>192.168.100.128/25</td>\n<td>192.168.100.128/25</td>\n<td>192.168.100.128/25</td>\n</tr>\n<tr>\n<td>192.168/24</td>\n<td>192.168.0.0/24</td>\n<td>192.168.0/24</td>\n</tr>\n<tr>\n<td>192.168/25</td>\n<td>192.168.0.0/25</td>\n<td>192.168.0.0/25</td>\n</tr>\n<tr>\n<td>192.168.1</td>\n<td>192.168.1.0/24</td>\n<td>192.168.1/24</td>\n</tr>\n<tr>\n<td>192.168</td>\n<td>192.168.0.0/24</td>\n<td>192.168.0/24</td>\n</tr>\n<tr>\n<td>128.1</td>\n<td>128.1.0.0/16</td>\n<td>128.1/16</td>\n</tr>\n<tr>\n<td>128</td>\n<td>128.0.0.0/16</td>\n<td>128.0/16</td>\n</tr>\n<tr>\n<td>128.1.2</td>\n<td>128.1.2.0/24</td>\n<td>128.1.2/24</td>\n</tr>\n<tr>\n<td>10.1.2</td>\n<td>10.1.2.0/24</td>\n<td>10.1.2/24</td>\n</tr>\n<tr>\n<td>10.1</td>\n<td>10.1.0.0/16</td>\n<td>10.1/16</td>\n</tr>\n<tr>\n<td>10</td>\n<td>10.0.0.0/8</td>\n<td>10/8</td>\n</tr>\n<tr>\n<td>10.1.2.3/32</td>\n<td>10.1.2.3/32</td>\n<td>10.1.2.3/32</td>\n</tr>\n<tr>\n<td>2001:4f8:3:ba::/64</td>\n<td>2001:4f8:3:ba::/64</td>\n<td>2001:4f8:3:ba::/64</td>\n</tr>\n<tr>\n<td>2001:4f8:3:ba:2e0:81ff:fe22:d1f1/128</td>\n<td>2001:4f8:3:ba:2e0:81ff:fe22:d1f1/128</td>\n<td>2001:4f8:3:ba:2e0:81ff:fe22:d1f1</td>\n</tr>\n<tr>\n<td>::ffff:1.2.3.0/120</td>\n<td>::ffff:1.2.3.0/120</td>\n<td>::ffff:1.2.3/120</td>\n</tr>\n<tr>\n<td>::ffff:1.2.3.0/128</td>\n<td>::ffff:1.2.3.0/128</td>\n<td>::ffff:1.2.3.0/128</td>\n</tr>\n</tbody>\n</table>\n; \nThe essential difference between <code>inet</code> and <code>cidr</code> data types is that <code>inet</code> accepts values with nonzero bits to the right of the netmask, whereas <code>cidr</code> does not. For example, <code>192.168.0.1/24</code> is valid for <code>inet</code> but not for <code>cidr</code>.\nTip\nIf you do not like the output format for <code>inet</code> or <code>cidr</code> values, try the functions <code>host</code>, <code>text</code>, and <code>abbrev</code>.\n",
        "example": [],
        "link": [
            "https://www.postgresql.org/docs/12/datatype-net-types.html"
        ]
    },
    {
        "type": "type",
        "keyword": "inet",
        "tree": "(identifier INET)",
        "description": [
            "IPv4 or IPv6 host address",
            "IPv4 and IPv6 hosts and networks"
        ],
        "detail": "[DESCRIPTION]: IPv4 or IPv6 host address; IPv4 and IPv6 hosts and networks<sep>[STORAGE SIZE]: 7 or 19 bytes<sep>[COMPENSATE]: When sorting <code>inet</code> or <code>cidr</code> data types, IPv4 addresses will always sort before IPv6 addresses, including IPv4 addresses encapsulated or mapped to IPv6 addresses, such as ::10.2.3.4 or ::ffff:10.4.3.2.; \nThe <code>inet</code> type holds an IPv4 or IPv6 host address, and optionally its subnet, all in one field. The subnet is represented by the number of network address bits present in the host address (the \"netmask\"). If the netmask is 32 and the address is IPv4, then the value does not indicate a subnet, only a single host. In IPv6, the address length is 128 bits, so 128 bits specify a unique host address. Note that if you want to accept only networks, you should use the <code>cidr</code> type rather than <code>inet</code>.\nThe input format for this type is <code>address/y</code> where <code>address</code> is an IPv4 or IPv6 address and <code>y</code> is the number of bits in the netmask. If the <code>/y</code> portion is missing, the netmask is 32 for IPv4 and 128 for IPv6, so the value represents just a single host. On display, the <code>/y</code> portion is suppressed if the netmask specifies a single host.\n; \nThe essential difference between <code>inet</code> and <code>cidr</code> data types is that <code>inet</code> accepts values with nonzero bits to the right of the netmask, whereas <code>cidr</code> does not. For example, <code>192.168.0.1/24</code> is valid for <code>inet</code> but not for <code>cidr</code>.\nTip\nIf you do not like the output format for <code>inet</code> or <code>cidr</code> values, try the functions <code>host</code>, <code>text</code>, and <code>abbrev</code>.\n",
        "example": [],
        "link": [
            "https://www.postgresql.org/docs/12/datatype-net-types.html"
        ]
    },
    {
        "type": "type",
        "keyword": "macaddr",
        "tree": "(identifier MACADDR)",
        "description": [
            "MAC (Media Access Control) address",
            "MAC addresses (EUI-64 format)"
        ],
        "detail": "[DESCRIPTION]: MAC (Media Access Control) address; MAC addresses (EUI-64 format)<sep>[STORAGE SIZE]: 8 bytes<sep>[COMPENSATE]: \nThe <code>macaddr</code> type stores MAC addresses, known for example from Ethernet card hardware addresses (although MAC addresses are used for other purposes as well). Input is accepted in the following formats:\n<table>\n<tr>\n<td><code>'08:00:2b:01:02:03'</code></td>\n</tr>\n<tr>\n<td><code>'08-00-2b-01-02-03'</code></td>\n</tr>\n<tr>\n<td><code>'08002b:010203'</code></td>\n</tr>\n<tr>\n<td><code>'08002b-010203'</code></td>\n</tr>\n<tr>\n<td><code>'0800.2b01.0203'</code></td>\n</tr>\n<tr>\n<td><code>'0800-2b01-0203'</code></td>\n</tr>\n<tr>\n<td><code>'08002b010203'</code></td>\n</tr>\n</table>\nThese examples would all specify the same address. Upper and lower case is accepted for the digits <code>a</code> through <code>f</code>. Output is always in the first of the forms shown.\nIEEE Standard 802-2001 specifies the second form shown (with hyphens) as the canonical form for MAC addresses, and specifies the first form (with colons) as used with bit-reversed, MSB-first notation, so that 08-00-2b-01-02-03 = 10:00:D4:80:40:C0. This convention is widely ignored nowadays, and it is relevant only for obsolete network protocols (such as Token Ring). PostgreSQL makes no provisions for bit reversal; all accepted formats use the canonical LSB order.\nThe remaining five input formats are not part of any standard.\n; \nThe <code>macaddr8</code> type stores MAC addresses in EUI-64 format, known for example from Ethernet card hardware addresses (although MAC addresses are used for other purposes as well). This type can accept both 6 and 8 byte length MAC addresses and stores them in 8 byte length format. MAC addresses given in 6 byte format will be stored in 8 byte length format with the 4th and 5th bytes set to FF and FE, respectively. Note that IPv6 uses a modified EUI-64 format where the 7th bit should be set to one after the conversion from EUI-48. The function <code>macaddr8_set7bit</code> is provided to make this change. Generally speaking, any input which is comprised of pairs of hex digits (on byte boundaries), optionally separated consistently by one of <code>':'</code>, <code>'-'</code> or <code>'.'</code>, is accepted. The number of hex digits must be either 16 (8 bytes) or 12 (6 bytes). Leading and trailing whitespace is ignored. The following are examples of input formats that are accepted:\n<table>\n<tr>\n<td><code>'08:00:2b:01:02:03:04:05'</code></td>\n</tr>\n<tr>\n<td><code>'08-00-2b-01-02-03-04-05'</code></td>\n</tr>\n<tr>\n<td><code>'08002b:0102030405'</code></td>\n</tr>\n<tr>\n<td><code>'08002b-0102030405'</code></td>\n</tr>\n<tr>\n<td><code>'0800.2b01.0203.0405'</code></td>\n</tr>\n<tr>\n<td><code>'0800-2b01-0203-0405'</code></td>\n</tr>\n<tr>\n<td><code>'08002b01:02030405'</code></td>\n</tr>\n<tr>\n<td><code>'08002b0102030405'</code></td>\n</tr>\n</table>\nThese examples would all specify the same address. Upper and lower case is accepted for the digits <code>a</code> through <code>f</code>. Output is always in the first of the forms shown. The last six input formats that are mentioned above are not part of any standard. To convert a traditional 48 bit MAC address in EUI-48 format to modified EUI-64 format to be included as the host portion of an IPv6 address, use <code>macaddr8_set7bit</code> as shown:\n<code>\nSELECT macaddr8_set7bit('08:00:2b:01:02:03');\n<code>\n macaddr8_set7bit \n-------------------------\n 0a:00:2b:ff:fe:01:02:03\n(1 row)\n</code>\n</code>\n",
        "example": [],
        "link": [
            "https://www.postgresql.org/docs/12/datatype-net-types.html"
        ]
    },
    {
        "type": "type",
        "keyword": "macaddr8",
        "tree": "(identifier MACADDR8)",
        "description": [
            "MAC (Media Access Control) address (EUI-64 format)",
            "MAC addresses (EUI-64 format)"
        ],
        "detail": "[DESCRIPTION]: MAC (Media Access Control) address (EUI-64 format); MAC addresses (EUI-64 format)<sep>[STORAGE SIZE]: 8 bytes<sep>[COMPENSATE]: \nThe <code>macaddr8</code> type stores MAC addresses in EUI-64 format, known for example from Ethernet card hardware addresses (although MAC addresses are used for other purposes as well). This type can accept both 6 and 8 byte length MAC addresses and stores them in 8 byte length format. MAC addresses given in 6 byte format will be stored in 8 byte length format with the 4th and 5th bytes set to FF and FE, respectively. Note that IPv6 uses a modified EUI-64 format where the 7th bit should be set to one after the conversion from EUI-48. The function <code>macaddr8_set7bit</code> is provided to make this change. Generally speaking, any input which is comprised of pairs of hex digits (on byte boundaries), optionally separated consistently by one of <code>':'</code>, <code>'-'</code> or <code>'.'</code>, is accepted. The number of hex digits must be either 16 (8 bytes) or 12 (6 bytes). Leading and trailing whitespace is ignored. The following are examples of input formats that are accepted:\n<table>\n<tr>\n<td><code>'08:00:2b:01:02:03:04:05'</code></td>\n</tr>\n<tr>\n<td><code>'08-00-2b-01-02-03-04-05'</code></td>\n</tr>\n<tr>\n<td><code>'08002b:0102030405'</code></td>\n</tr>\n<tr>\n<td><code>'08002b-0102030405'</code></td>\n</tr>\n<tr>\n<td><code>'0800.2b01.0203.0405'</code></td>\n</tr>\n<tr>\n<td><code>'0800-2b01-0203-0405'</code></td>\n</tr>\n<tr>\n<td><code>'08002b01:02030405'</code></td>\n</tr>\n<tr>\n<td><code>'08002b0102030405'</code></td>\n</tr>\n</table>\nThese examples would all specify the same address. Upper and lower case is accepted for the digits <code>a</code> through <code>f</code>. Output is always in the first of the forms shown. The last six input formats that are mentioned above are not part of any standard. To convert a traditional 48 bit MAC address in EUI-48 format to modified EUI-64 format to be included as the host portion of an IPv6 address, use <code>macaddr8_set7bit</code> as shown:\n<code>\nSELECT macaddr8_set7bit('08:00:2b:01:02:03');\n<code>\n macaddr8_set7bit \n-------------------------\n 0a:00:2b:ff:fe:01:02:03\n(1 row)\n</code>\n</code>\n",
        "example": [],
        "link": [
            "https://www.postgresql.org/docs/12/datatype-net-types.html"
        ]
    },
    {
        "type": "type",
        "keyword": "bit ( n )",
        "tree": "(bitwithlength BIT ( ))",
        "description": [
            "fixed-length bit string"
        ],
        "detail": "[DESCRIPTION]: fixed-length bit string<sep>[COMPENSATE]: Bit strings are strings of 1's and 0's. They can be used to store or visualize bit masks. There are two SQL bit types: <code>bit(n)</code> and <code>bit varying(n)</code>, where <code>n</code> is a positive integer.; <code>bit</code> type data must match the length <code>n</code> exactly; it is an error to attempt to store shorter or longer bit strings. <code>bit varying</code> data is of variable length up to the maximum length <code>n</code>; longer strings will be rejected. Writing <code>bit</code> without a length is equivalent to <code>bit(1)</code>, while <code>bit varying</code> without a length specification means unlimited length.; If one explicitly casts a bit-string value to <code>bit(n)</code>, it will be truncated or zero-padded on the right to be exactly <code>n</code> bits, without raising an error. Similarly, if one explicitly casts a bit-string value to <code>bit varying(n)</code>, it will be truncated on the right if it is more than <code>n</code> bits.; <code>\nCREATE TABLE test (a BIT(3), b BIT VARYING(5));\nINSERT INTO test VALUES (B'101', B'00');\nINSERT INTO test VALUES (B'10', B'101');\nERROR: bit string length 2 does not match type bit(3)\nINSERT INTO test VALUES (B'10'::bit(3), B'101');\nSELECT * FROM test;\n a | b\n-----+-----\n 101 | 00\n 100 | 101\n</code>",
        "example": [],
        "link": [
            "https://www.postgresql.org/docs/12/datatype-bit.html"
        ]
    },
    {
        "type": "type",
        "keyword": "bit",
        "tree": "(bitwithoutlength BIT)",
        "description": [
            "fixed-length bit string"
        ],
        "detail": "[DESCRIPTION]: fixed-length bit string<sep>[COMPENSATE]: Bit strings are strings of 1's and 0's. They can be used to store or visualize bit masks. There are two SQL bit types: <code>bit(n)</code> and <code>bit varying(n)</code>, where <code>n</code> is a positive integer.; <code>bit</code> type data must match the length <code>n</code> exactly; it is an error to attempt to store shorter or longer bit strings. <code>bit varying</code> data is of variable length up to the maximum length <code>n</code>; longer strings will be rejected. Writing <code>bit</code> without a length is equivalent to <code>bit(1)</code>, while <code>bit varying</code> without a length specification means unlimited length.; If one explicitly casts a bit-string value to <code>bit(n)</code>, it will be truncated or zero-padded on the right to be exactly <code>n</code> bits, without raising an error. Similarly, if one explicitly casts a bit-string value to <code>bit varying(n)</code>, it will be truncated on the right if it is more than <code>n</code> bits.; <code>\nCREATE TABLE test (a BIT(3), b BIT VARYING(5));\nINSERT INTO test VALUES (B'101', B'00');\nINSERT INTO test VALUES (B'10', B'101');\nERROR: bit string length 2 does not match type bit(3)\nINSERT INTO test VALUES (B'10'::bit(3), B'101');\nSELECT * FROM test;\n a | b\n-----+-----\n 101 | 00\n 100 | 101\n</code>",
        "example": [],
        "link": [
            "https://www.postgresql.org/docs/12/datatype-bit.html"
        ]
    },
    {
        "type": "type",
        "keyword": "bit varying ( n )",
        "tree": "(bitwithlength BIT (opt_varying VARYING) ( ))",
        "description": [
            "variable-length bit string"
        ],
        "detail": "[DESCRIPTION]: variable-length bit string<sep>[COMPENSATE]: Bit strings are strings of 1's and 0's. They can be used to store or visualize bit masks. There are two SQL bit types: <code>bit(n)</code> and <code>bit varying(n)</code>, where <code>n</code> is a positive integer.; <code>bit</code> type data must match the length <code>n</code> exactly; it is an error to attempt to store shorter or longer bit strings. <code>bit varying</code> data is of variable length up to the maximum length <code>n</code>; longer strings will be rejected. Writing <code>bit</code> without a length is equivalent to <code>bit(1)</code>, while <code>bit varying</code> without a length specification means unlimited length.; If one explicitly casts a bit-string value to <code>bit(n)</code>, it will be truncated or zero-padded on the right to be exactly <code>n</code> bits, without raising an error. Similarly, if one explicitly casts a bit-string value to <code>bit varying(n)</code>, it will be truncated on the right if it is more than <code>n</code> bits.; <code>\nCREATE TABLE test (a BIT(3), b BIT VARYING(5));\nINSERT INTO test VALUES (B'101', B'00');\nINSERT INTO test VALUES (B'10', B'101');\nERROR: bit string length 2 does not match type bit(3)\nINSERT INTO test VALUES (B'10'::bit(3), B'101');\nSELECT * FROM test;\n a | b\n-----+-----\n 101 | 00\n 100 | 101\n</code>",
        "example": [],
        "link": [
            "https://www.postgresql.org/docs/12/datatype-bit.html"
        ]
    },
    {
        "type": "type",
        "keyword": "varbit ( n )",
        "tree": "(generictype (type_function_name (identifier VARBIT)) (opt_type_modifiers ( )))",
        "description": [
            "variable-length bit string"
        ],
        "detail": "[DESCRIPTION]: variable-length bit string<sep>[COMPENSATE]: Bit strings are strings of 1's and 0's. They can be used to store or visualize bit masks. There are two SQL bit types: <code>bit(n)</code> and <code>bit varying(n)</code>, where <code>n</code> is a positive integer.; <code>bit</code> type data must match the length <code>n</code> exactly; it is an error to attempt to store shorter or longer bit strings. <code>bit varying</code> data is of variable length up to the maximum length <code>n</code>; longer strings will be rejected. Writing <code>bit</code> without a length is equivalent to <code>bit(1)</code>, while <code>bit varying</code> without a length specification means unlimited length.; If one explicitly casts a bit-string value to <code>bit(n)</code>, it will be truncated or zero-padded on the right to be exactly <code>n</code> bits, without raising an error. Similarly, if one explicitly casts a bit-string value to <code>bit varying(n)</code>, it will be truncated on the right if it is more than <code>n</code> bits.; <code>\nCREATE TABLE test (a BIT(3), b BIT VARYING(5));\nINSERT INTO test VALUES (B'101', B'00');\nINSERT INTO test VALUES (B'10', B'101');\nERROR: bit string length 2 does not match type bit(3)\nINSERT INTO test VALUES (B'10'::bit(3), B'101');\nSELECT * FROM test;\n a | b\n-----+-----\n 101 | 00\n 100 | 101\n</code>",
        "example": [],
        "link": [
            "https://www.postgresql.org/docs/12/datatype-bit.html"
        ]
    },
    {
        "type": "type",
        "keyword": "bit varying",
        "tree": "(bitwithoutlength BIT (opt_varying VARYING))",
        "description": [
            "variable-length bit string"
        ],
        "detail": "[DESCRIPTION]: variable-length bit string<sep>[COMPENSATE]: Bit strings are strings of 1's and 0's. They can be used to store or visualize bit masks. There are two SQL bit types: <code>bit(n)</code> and <code>bit varying(n)</code>, where <code>n</code> is a positive integer.; <code>bit</code> type data must match the length <code>n</code> exactly; it is an error to attempt to store shorter or longer bit strings. <code>bit varying</code> data is of variable length up to the maximum length <code>n</code>; longer strings will be rejected. Writing <code>bit</code> without a length is equivalent to <code>bit(1)</code>, while <code>bit varying</code> without a length specification means unlimited length.; If one explicitly casts a bit-string value to <code>bit(n)</code>, it will be truncated or zero-padded on the right to be exactly <code>n</code> bits, without raising an error. Similarly, if one explicitly casts a bit-string value to <code>bit varying(n)</code>, it will be truncated on the right if it is more than <code>n</code> bits.; <code>\nCREATE TABLE test (a BIT(3), b BIT VARYING(5));\nINSERT INTO test VALUES (B'101', B'00');\nINSERT INTO test VALUES (B'10', B'101');\nERROR: bit string length 2 does not match type bit(3)\nINSERT INTO test VALUES (B'10'::bit(3), B'101');\nSELECT * FROM test;\n a | b\n-----+-----\n 101 | 00\n 100 | 101\n</code>",
        "example": [],
        "link": [
            "https://www.postgresql.org/docs/12/datatype-bit.html"
        ]
    },
    {
        "type": "type",
        "keyword": "varbit",
        "tree": "(identifier VARBIT)",
        "description": [
            "variable-length bit string"
        ],
        "detail": "[DESCRIPTION]: variable-length bit string<sep>[COMPENSATE]: Bit strings are strings of 1's and 0's. They can be used to store or visualize bit masks. There are two SQL bit types: <code>bit(n)</code> and <code>bit varying(n)</code>, where <code>n</code> is a positive integer.; <code>bit</code> type data must match the length <code>n</code> exactly; it is an error to attempt to store shorter or longer bit strings. <code>bit varying</code> data is of variable length up to the maximum length <code>n</code>; longer strings will be rejected. Writing <code>bit</code> without a length is equivalent to <code>bit(1)</code>, while <code>bit varying</code> without a length specification means unlimited length.; If one explicitly casts a bit-string value to <code>bit(n)</code>, it will be truncated or zero-padded on the right to be exactly <code>n</code> bits, without raising an error. Similarly, if one explicitly casts a bit-string value to <code>bit varying(n)</code>, it will be truncated on the right if it is more than <code>n</code> bits.; <code>\nCREATE TABLE test (a BIT(3), b BIT VARYING(5));\nINSERT INTO test VALUES (B'101', B'00');\nINSERT INTO test VALUES (B'10', B'101');\nERROR: bit string length 2 does not match type bit(3)\nINSERT INTO test VALUES (B'10'::bit(3), B'101');\nSELECT * FROM test;\n a | b\n-----+-----\n 101 | 00\n 100 | 101\n</code>",
        "example": [],
        "link": [
            "https://www.postgresql.org/docs/12/datatype-bit.html"
        ]
    },
    {
        "type": "type",
        "keyword": "tsquery",
        "tree": "(identifier TSQUERY)",
        "description": [
            "text search query"
        ],
        "detail": "[DESCRIPTION]: text search query<sep>[COMPENSATE]: PostgreSQL provides two data types that are designed to support full text search, which is the activity of searching through a collection of natural-language documents to locate those that best match a query. The <code>tsvector</code> type represents a document in a form optimized for text search; the <code>tsquery</code> type similarly represents a text query. Chapter 12 provides a detailed explanation of this facility, and Section 9.13 summarizes the related functions and operators.; \nA <code>tsquery</code> value stores lexemes that are to be searched for, and can combine them using the Boolean operators <code>&</code> (AND), <code>|</code> (OR), and <code>!</code> (NOT), as well as the phrase search operator <code><-></code> (FOLLOWED BY). There is also a variant <code><N></code> of the FOLLOWED BY operator, where <code>N</code> is an integer constant that specifies the distance between the two lexemes being searched for. <code><-></code> is equivalent to <code><1></code>.\nParentheses can be used to enforce grouping of these operators. In the absence of parentheses, <code>!</code> (NOT) binds most tightly, <code><-></code> (FOLLOWED BY) next most tightly, then <code>&</code> (AND), with <code>|</code> (OR) binding the least tightly.\nHere are some examples:\n<code>\nSELECT 'fat & rat'::tsquery;\n tsquery \n---------------\n 'fat' & 'rat'\nSELECT 'fat & (rat | cat)'::tsquery;\n tsquery \n---------------------------\n 'fat' & ( 'rat' | 'cat' )\nSELECT 'fat & rat & ! cat'::tsquery;\n tsquery \n------------------------\n 'fat' & 'rat' & !'cat'\n</code>\nOptionally, lexemes in a <code>tsquery</code> can be labeled with one or more weight letters, which restricts them to match only <code>tsvector</code> lexemes with one of those weights:\n<code>\nSELECT 'fat:ab & cat'::tsquery;\n tsquery\n------------------\n 'fat':AB & 'cat'\n</code>\nAlso, lexemes in a <code>tsquery</code> can be labeled with <code>*</code> to specify prefix matching:\n<code>\nSELECT 'super:*'::tsquery;\n tsquery \n-----------\n 'super':*\n</code>\nThis query will match any word in a <code>tsvector</code> that begins with \"super\".\nQuoting rules for lexemes are the same as described previously for lexemes in <code>tsvector</code>; and, as with <code>tsvector</code>, any required normalization of words must be done before converting to the <code>tsquery</code> type. The <code>to_tsquery</code> function is convenient for performing such normalization:\n<code>\nSELECT to_tsquery('Fat:ab & Cats');\n to_tsquery \n------------------\n 'fat':AB & 'cat'\n</code>\nNote that <code>to_tsquery</code> will process prefixes in the same way as other words, which means this comparison returns true:\n<code>\nSELECT to_tsvector( 'postgraduate' ) @@ to_tsquery( 'postgres:*' );\n ?column?\n----------\n t\n</code>\nbecause <code>postgres</code> gets stemmed to <code>postgr</code>:\n<code>\nSELECT to_tsvector( 'postgraduate' ), to_tsquery( 'postgres:*' );\n to_tsvector | to_tsquery\n---------------+------------\n 'postgradu':1 | 'postgr':*\n</code>\nwhich will match the stemmed form of <code>postgraduate</code>.\n",
        "example": [],
        "link": [
            "https://www.postgresql.org/docs/12/datatype-textsearch.html"
        ]
    },
    {
        "type": "type",
        "keyword": "tsvector",
        "tree": "(identifier TSVECTOR)",
        "description": [
            "text search document"
        ],
        "detail": "[DESCRIPTION]: text search document<sep>[COMPENSATE]: PostgreSQL provides two data types that are designed to support full text search, which is the activity of searching through a collection of natural-language documents to locate those that best match a query. The <code>tsvector</code> type represents a document in a form optimized for text search; the <code>tsquery</code> type similarly represents a text query. Chapter 12 provides a detailed explanation of this facility, and Section 9.13 summarizes the related functions and operators.; \nA <code>tsvector</code> value is a sorted list of distinct lexemes, which are words that have been normalized to merge different variants of the same word (see Chapter 12 for details). Sorting and duplicate-elimination are done automatically during input, as shown in this example:\n<code>\nSELECT 'a fat cat sat on a mat and ate a fat rat'::tsvector;\n tsvector\n----------------------------------------------------\n 'a' 'and' 'ate' 'cat' 'fat' 'mat' 'on' 'rat' 'sat'\n</code>\nTo represent lexemes containing whitespace or punctuation, surround them with quotes:\n<code>\nSELECT $$the lexeme ' ' contains spaces$$::tsvector;\n tsvector \n-------------------------------------------\n ' ' 'contains' 'lexeme' 'spaces' 'the'\n</code>\n(We use dollar-quoted string literals in this example and the next one to avoid the confusion of having to double quote marks within the literals.) Embedded quotes and backslashes must be doubled:\n<code>\nSELECT $$the lexeme 'Joe''s' contains a quote$$::tsvector;\n tsvector \n------------------------------------------------\n 'Joe''s' 'a' 'contains' 'lexeme' 'quote' 'the'\n</code>\nOptionally, integer positions can be attached to lexemes:\n<code>\nSELECT 'a:1 fat:2 cat:3 sat:4 on:5 a:6 mat:7 and:8 ate:9 a:10 fat:11 rat:12'::tsvector;\n tsvector\n-------------------------------------------------------------------------------\n 'a':1,6,10 'and':8 'ate':9 'cat':3 'fat':2,11 'mat':7 'on':5 'rat':12 'sat':4\n</code>\nA position normally indicates the source word's location in the document. Positional information can be used for proximity ranking. Position values can range from 1 to 16383; larger numbers are silently set to 16383. Duplicate positions for the same lexeme are discarded.\nLexemes that have positions can further be labeled with a weight, which can be <code>A</code>, <code>B</code>, <code>C</code>, or <code>D</code>. <code>D</code> is the default and hence is not shown on output:\n<code>\nSELECT 'a:1A fat:2B,4C cat:5D'::tsvector;\n tsvector \n----------------------------\n 'a':1A 'cat':5 'fat':2B,4C\n</code>\nWeights are typically used to reflect document structure, for example by marking title words differently from body words. Text search ranking functions can assign different priorities to the different weight markers.\nIt is important to understand that the <code>tsvector</code> type itself does not perform any word normalization; it assumes the words it is given are normalized appropriately for the application. For example,\n<code>\nSELECT 'The Fat Rats'::tsvector;\n tsvector \n--------------------\n 'Fat' 'Rats' 'The'\n</code>\nFor most English-text-searching applications the above words would be considered non-normalized, but <code>tsvector</code> doesn't care. Raw document text should usually be passed through <code>to_tsvector</code> to normalize the words appropriately for searching:\n<code>\nSELECT to_tsvector('english', 'The Fat Rats');\n to_tsvector \n-----------------\n 'fat':2 'rat':3\n</code>\nAgain, see Chapter 12 for more detail.\n; Optionally, lexemes in a <code>tsquery</code> can be labeled with one or more weight letters, which restricts them to match only <code>tsvector</code> lexemes with one of those weights:; This query will match any word in a <code>tsvector</code> that begins with \"super\".; Quoting rules for lexemes are the same as described previously for lexemes in <code>tsvector</code>; and, as with <code>tsvector</code>, any required normalization of words must be done before converting to the <code>tsquery</code> type. The <code>to_tsquery</code> function is convenient for performing such normalization:; <code>\nSELECT to_tsvector( 'postgraduate' ) @@ to_tsquery( 'postgres:*' );\n ?column?\n----------\n t\n</code>; <code>\nSELECT to_tsvector( 'postgraduate' ), to_tsquery( 'postgres:*' );\n to_tsvector | to_tsquery\n---------------+------------\n 'postgradu':1 | 'postgr':*\n</code>",
        "example": [],
        "link": [
            "https://www.postgresql.org/docs/12/datatype-textsearch.html"
        ]
    },
    {
        "type": "type",
        "keyword": "uuid",
        "tree": "(identifier UUID)",
        "description": [
            "universally unique identifier"
        ],
        "detail": "[DESCRIPTION]: universally unique identifier<sep>[COMPENSATE]: The data type <code>uuid</code> stores Universally Unique Identifiers (UUID) as defined by RFC 4122, ISO/IEC 9834-8:2005, and related standards. (Some systems refer to this data type as a globally unique identifier, or GUID, instead.) This identifier is a 128-bit quantity that is generated by an algorithm chosen to make it very unlikely that the same identifier will be generated by anyone else in the known universe using the same algorithm. Therefore, for distributed systems, these identifiers provide a better uniqueness guarantee than sequence generators, which are only unique within a single database.",
        "example": [],
        "link": [
            "https://www.postgresql.org/docs/12/datatype-uuid.html"
        ]
    },
    {
        "type": "type",
        "keyword": "xml",
        "tree": "(unreserved_keyword XML)",
        "description": [
            "XML data"
        ],
        "detail": "[DESCRIPTION]: XML data<sep>[COMPENSATE]: The <code>xml</code> data type can be used to store XML data. Its advantage over storing XML data in a <code>text</code> field is that it checks the input values for well-formedness, and there are support functions to perform type-safe operations on it; see Section 9.14. Use of this data type requires the installation to have been built with <code>configure --with-libxml</code>.; The <code>xml</code> type can store well-formed \"documents\", as defined by the XML standard, as well as \"content\" fragments, which are defined by reference to the more permissive \"document node\" of the XQuery and XPath data model. Roughly, this means that content fragments can have more than one top-level element or character node. The expression <code>xmlvalue IS DOCUMENT</code> can be used to evaluate whether a particular <code>xml</code> value is a full document or only a content fragment.; Limits and compatibility notes for the <code>xml</code> data type can be found in Section D.3.; \nTo produce a value of type <code>xml</code> from character data, use the function <code>xmlparse</code>:\n<code>\nXMLPARSE ( { DOCUMENT | CONTENT } <code>value</code>)\n</code>\nExamples:\n<code>\nXMLPARSE (DOCUMENT '<?xml version=\"1.0\"?><book><title>Manual</title><chapter>...</chapter></book>')\nXMLPARSE (CONTENT 'abc<foo>bar</foo><bar>foo</bar>')\n</code>\nWhile this is the only way to convert character strings into XML values according to the SQL standard, the PostgreSQL-specific syntaxes:\n<code>\nxml '<foo>bar</foo>'\n'<foo>bar</foo>'::xml\n</code>\ncan also be used.\nThe <code>xml</code> type does not validate input values against a document type declaration (DTD), even when the input value specifies a DTD. There is also currently no built-in support for validating against other XML schema languages such as XML Schema.\nThe inverse operation, producing a character string value from <code>xml</code>, uses the function <code>xmlserialize</code>:\n<code>\nXMLSERIALIZE ( { DOCUMENT | CONTENT } <code>value</code> AS <code>type</code> )\n</code>\n<code>type</code> can be <code>character</code>, <code>character varying</code>, or <code>text</code> (or an alias for one of those). Again, according to the SQL standard, this is the only way to convert between type <code>xml</code> and character types, but PostgreSQL also allows you to simply cast the value.\nWhen a character string value is cast to or from type <code>xml</code> without going through <code>XMLPARSE</code> or <code>XMLSERIALIZE</code>, respectively, the choice of <code>DOCUMENT</code> versus <code>CONTENT</code> is determined by the \"XML option\" session configuration parameter, which can be set using the standard command:\n<code>\nSET XML OPTION { DOCUMENT | CONTENT };\n</code>\nor the more PostgreSQL-like syntax\n<code>\nSET xmloption TO { DOCUMENT | CONTENT };\n</code>\nThe default is <code>CONTENT</code>, so all forms of XML data are allowed.\n; Care must be taken when dealing with multiple character encodings on the client, server, and in the XML data passed through them. When using the text mode to pass queries to the server and query results to the client (which is the normal mode), PostgreSQL converts all character data passed between the client and the server and vice versa to the character encoding of the respective end; see Section 23.3. This includes string representations of XML values, such as in the above examples. This would ordinarily mean that encoding declarations contained in XML data can become invalid as the character data is converted to other encodings while traveling between client and server, because the embedded encoding declaration is not changed. To cope with this behavior, encoding declarations contained in character strings presented for input to the <code>xml</code> type are ignored, and content is assumed to be in the current server encoding. Consequently, for correct processing, character strings of XML data must be sent from the client in the current client encoding. It is the responsibility of the client to either convert documents to the current client encoding before sending them to the server, or to adjust the client encoding appropriately. On output, values of type <code>xml</code> will not have an encoding declaration, and clients should assume all data is in the current client encoding.; Some XML-related functions may not work at all on non-ASCII data when the server encoding is not UTF-8. This is known to be an issue for <code>xmltable()</code> and <code>xpath()</code> in particular.; \nThe <code>xml</code> data type is unusual in that it does not provide any comparison operators. This is because there is no well-defined and universally useful comparison algorithm for XML data. One consequence of this is that you cannot retrieve rows by comparing an <code>xml</code> column against a search value. XML values should therefore typically be accompanied by a separate key field such as an ID. An alternative solution for comparing XML values is to convert them to character strings first, but note that character string comparison has little to do with a useful XML comparison method.\nSince there are no comparison operators for the <code>xml</code> data type, it is not possible to create an index directly on a column of this type. If speedy searches in XML data are desired, possible workarounds include casting the expression to a character string type and indexing that, or indexing an XPath expression. Of course, the actual query would have to be adjusted to search by the indexed expression.\nThe text-search functionality in PostgreSQL can also be used to speed up full-document searches of XML data. The necessary preprocessing support is, however, not yet available in the PostgreSQL distribution.\n",
        "example": [],
        "link": [
            "https://www.postgresql.org/docs/12/datatype-xml.html"
        ]
    },
    {
        "type": "type",
        "keyword": "json",
        "tree": "(identifier JSON)",
        "description": [
            "textual JSON data"
        ],
        "detail": "[DESCRIPTION]: textual JSON data<sep>[COMPENSATE]: PostgreSQL offers two types for storing JSON data: <code>json</code> and <code>jsonb</code>. To implement efficient query mechanisms for these data types, PostgreSQL also provides the <code>jsonpath</code> data type described in Section 8.14.6.; The <code>json</code> and <code>jsonb</code> data types accept almost identical sets of values as input. The major practical difference is one of efficiency. The <code>json</code> data type stores an exact copy of the input text, which processing functions must reparse on each execution; while <code>jsonb</code> data is stored in a decomposed binary format that makes it slightly slower to input due to added conversion overhead, but significantly faster to process, since no reparsing is needed. <code>jsonb</code> also supports indexing, which can be a significant advantage.; Because the <code>json</code> type stores an exact copy of the input text, it will preserve semantically-insignificant white space between tokens, as well as the order of keys within JSON objects. Also, if a JSON object within the value contains the same key more than once, all the key/value pairs are kept. (The processing functions consider the last value as the operative one.) By contrast, <code>jsonb</code> does not preserve white space, does not preserve the order of object keys, and does not keep duplicate object keys. If duplicate keys are specified in the input, only the last value is kept.; In general, most applications should prefer to store JSON data as <code>jsonb</code>, unless there are quite specialized needs, such as legacy assumptions about ordering of object keys.; RFC 7159 permits JSON strings to contain Unicode escape sequences denoted by <code>\\uXXXX</code>. In the input function for the <code>json</code> type, Unicode escapes are allowed regardless of the database encoding, and are checked only for syntactic correctness (that is, that four hex digits follow <code>\\u</code>). However, the input function for <code>jsonb</code> is stricter: it disallows Unicode escapes for non-ASCII characters (those above <code>U+007F</code>) unless the database encoding is UTF8. The <code>jsonb</code> type also rejects <code>\\u0000</code> (because that cannot be represented in PostgreSQL's <code>text</code> type), and it insists that any use of Unicode surrogate pairs to designate characters outside the Unicode Basic Multilingual Plane be correct. Valid Unicode escapes are converted to the equivalent ASCII or UTF8 character for storage; this includes folding surrogate pairs into a single character.; Many of the JSON processing functions described in Section 9.15 will convert Unicode escapes to regular characters, and will therefore throw the same types of errors just described even if their input is of type <code>json</code> not <code>jsonb</code>. The fact that the <code>json</code> input function does not make these checks may be considered a historical artifact, although it does allow for simple storage (without processing) of JSON Unicode escapes in a non-UTF8 database encoding. In general, it is best to avoid mixing Unicode escapes in JSON with a non-UTF8 database encoding, if possible.; When converting textual JSON input into <code>jsonb</code>, the primitive types described by RFC 7159 are effectively mapped onto native PostgreSQL types, as shown in Table 8.23. Therefore, there are some minor additional constraints on what constitutes valid <code>jsonb</code> data that do not apply to the <code>json</code> type, nor to JSON in the abstract, corresponding to limits on what can be represented by the underlying data type. Notably, <code>jsonb</code> will reject numbers that are outside the range of the PostgreSQL <code>numeric</code> data type, while <code>json</code> will not. Such implementation-defined restrictions are permitted by RFC 7159. However, in practice such problems are far more likely to occur in other implementations, as it is common to represent JSON's <code>number</code> primitive type as IEEE 754 double precision floating point (which RFC 7159 explicitly anticipates and allows for). When using JSON as an interchange format with such systems, the danger of losing numeric precision compared to data originally stored by PostgreSQL should be considered.; \nThe input/output syntax for the JSON data types is as specified in RFC 7159.\nThe following are all valid <code>json</code> (or <code>jsonb</code>) expressions:\n<code>\n-- Simple scalar/primitive value\n-- Primitive values can be numbers, quoted strings, true, false, or null\nSELECT '5'::json;\n-- Array of zero or more elements (elements need not be of same type)\nSELECT '[1, 2, \"foo\", null]'::json;\n-- Object containing pairs of keys and values\n-- Note that object keys must always be quoted strings\nSELECT '{\"bar\": \"baz\", \"balance\": 7.77, \"active\": false}'::json;\n-- Arrays and objects can be nested arbitrarily\nSELECT '{\"foo\": [true, \"bar\"], \"tags\": {\"a\": 1, \"b\": null}}'::json;\n</code>\nAs previously stated, when a JSON value is input and then printed without any additional processing, <code>json</code> outputs the same text that was input, while <code>jsonb</code> does not preserve semantically-insignificant details such as whitespace. For example, note the differences here:\n<code>\nSELECT '{\"bar\": \"baz\", \"balance\": 7.77, \"active\":false}'::json;\n json \n-------------------------------------------------\n {\"bar\": \"baz\", \"balance\": 7.77, \"active\":false}\n(1 row)\nSELECT '{\"bar\": \"baz\", \"balance\": 7.77, \"active\":false}'::jsonb;\n jsonb \n--------------------------------------------------\n {\"bar\": \"baz\", \"active\": false, \"balance\": 7.77}\n(1 row)\n</code>\nOne semantically-insignificant detail worth noting is that in <code>jsonb</code>, numbers will be printed according to the behavior of the underlying <code>numeric</code> type. In practice this means that numbers entered with <code>E</code> notation will be printed without it, for example:\n<code>\nSELECT '{\"reading\": 1.230e-5}'::json, '{\"reading\": 1.230e-5}'::jsonb;\n json | jsonb \n-----------------------+-------------------------\n {\"reading\": 1.230e-5} | {\"reading\": 0.00001230}\n(1 row)\n</code>\nHowever, <code>jsonb</code> will preserve trailing fractional zeroes, as seen in this example, even though those are semantically insignificant for purposes such as equality checks.\nFor the list of built-in functions and operators available for constructing and processing JSON values, see Section 9.15.\n; \nRepresenting data as JSON can be considerably more flexible than the traditional relational data model, which is compelling in environments where requirements are fluid. It is quite possible for both approaches to co-exist and complement each other within the same application. However, even for applications where maximal flexibility is desired, it is still recommended that JSON documents have a somewhat fixed structure. The structure is typically unenforced (though enforcing some business rules declaratively is possible), but having a predictable structure makes it easier to write queries that usefully summarize a set of \"documents\" (datums) in a table.\nJSON data is subject to the same concurrency-control considerations as any other data type when stored in a table. Although storing large documents is practicable, keep in mind that any update acquires a row-level lock on the whole row. Consider limiting JSON documents to a manageable size in order to decrease lock contention among updating transactions. Ideally, JSON documents should each represent an atomic datum that business rules dictate cannot reasonably be further subdivided into smaller datums that could be modified independently.\n; \nTesting containment is an important capability of <code>jsonb</code>. There is no parallel set of facilities for the <code>json</code> type. Containment tests whether one <code>jsonb</code> document has contained within it another one. These examples return true except as noted:\n<code>\n-- Simple scalar/primitive values contain only the identical value:\nSELECT '\"foo\"'::jsonb @> '\"foo\"'::jsonb;\n-- The array on the right side is contained within the one on the left:\nSELECT '[1, 2, 3]'::jsonb @> '[1, 3]'::jsonb;\n-- Order of array elements is not significant, so this is also true:\nSELECT '[1, 2, 3]'::jsonb @> '[3, 1]'::jsonb;\n-- Duplicate array elements don't matter either:\nSELECT '[1, 2, 3]'::jsonb @> '[1, 2, 2]'::jsonb;\n-- The object with a single pair on the right side is contained\n-- within the object on the left side:\nSELECT '{\"product\": \"PostgreSQL\", \"version\": 9.4, \"jsonb\": true}'::jsonb @> '{\"version\": 9.4}'::jsonb;\n-- The array on the right side is not considered contained within the\n-- array on the left, even though a similar array is nested within it:\nSELECT '[1, 2, [1, 3]]'::jsonb @> '[1, 3]'::jsonb; -- yields false\n-- But with a layer of nesting, it is contained:\nSELECT '[1, 2, [1, 3]]'::jsonb @> '[[1, 3]]'::jsonb;\n-- Similarly, containment is not reported here:\nSELECT '{\"foo\": {\"bar\": \"baz\"}}'::jsonb @> '{\"bar\": \"baz\"}'::jsonb; -- yields false\n-- A top-level key and an empty object is contained:\nSELECT '{\"foo\": {\"bar\": \"baz\"}}'::jsonb @> '{\"foo\": {}}'::jsonb;\n</code>\nThe general principle is that the contained object must match the containing object as to structure and data contents, possibly after discarding some non-matching array elements or object key/value pairs from the containing object. But remember that the order of array elements is not significant when doing a containment match, and duplicate array elements are effectively considered only once.\nAs a special exception to the general principle that the structures must match, an array may contain a primitive value:\n<code>\n-- This array contains the primitive string value:\nSELECT '[\"foo\", \"bar\"]'::jsonb @> '\"bar\"'::jsonb;\n-- This exception is not reciprocal -- non-containment is reported here:\nSELECT '\"bar\"'::jsonb @> '[\"bar\"]'::jsonb; -- yields false\n</code>\n<code>jsonb</code> also has an existence operator, which is a variation on the theme of containment: it tests whether a string (given as a <code>text</code> value) appears as an object key or array element at the top level of the <code>jsonb</code> value. These examples return true except as noted:\n<code>\n-- String exists as array element:\nSELECT '[\"foo\", \"bar\", \"baz\"]'::jsonb ? 'bar';\n-- String exists as object key:\nSELECT '{\"foo\": \"bar\"}'::jsonb ? 'foo';\n-- Object values are not considered:\nSELECT '{\"foo\": \"bar\"}'::jsonb ? 'bar'; -- yields false\n-- As with containment, existence must match at the top level:\nSELECT '{\"foo\": {\"bar\": \"baz\"}}'::jsonb ? 'bar'; -- yields false\n-- A string is considered to exist if it matches a primitive JSON string:\nSELECT '\"foo\"'::jsonb ? 'foo';\n</code>\nJSON objects are better suited than arrays for testing containment or existence when there are many keys or elements involved, because unlike arrays they are internally optimized for searching, and do not need to be searched linearly.\nTip\nBecause JSON containment is nested, an appropriate query can skip explicit selection of sub-objects. As an example, suppose that we have a <code>doc</code> column containing objects at the top level, with most objects containing <code>tags</code> fields that contain arrays of sub-objects. This query finds entries in which sub-objects containing both <code>\"term\":\"paris\"</code> and <code>\"term\":\"food\"</code> appear, while ignoring any such keys outside the <code>tags</code> array:\n<code>\nSELECT doc->'site_name' FROM websites\n WHERE doc @> '{\"tags\":[{\"term\":\"paris\"}, {\"term\":\"food\"}]}';\n</code>\nOne could accomplish the same thing with, say,\n<code>\nSELECT doc->'site_name' FROM websites\n WHERE doc->'tags' @> '[{\"term\":\"paris\"}, {\"term\":\"food\"}]';\n</code>\nbut that approach is less flexible, and often less efficient as well.\nOn the other hand, the JSON existence operator is not nested: it will only look for the specified key or array element at top level of the JSON value.\nThe various containment and existence operators, along with all other JSON operators and functions are documented in Section 9.15.\n; \nGIN indexes can be used to efficiently search for keys or key/value pairs occurring within a large number of <code>jsonb</code> documents (datums). Two GIN \"operator classes\" are provided, offering different performance and flexibility trade-offs.\nThe default GIN operator class for <code>jsonb</code> supports queries with the key-exists operators <code>?</code>, <code>?|</code> and <code>?&</code>, the containment operator <code>@></code>, and the <code>jsonpath</code> match operators <code>@?</code> and <code>@@</code>. (For details of the semantics that these operators implement, see Table 9.45.) An example of creating an index with this operator class is:\n<code>\nCREATE INDEX idxgin ON api USING GIN (jdoc);\n</code>\nThe non-default GIN operator class <code>jsonb_path_ops</code> does not support the key-exists operators, but it does support <code>@></code>, <code>@?</code> and <code>@@</code>. An example of creating an index with this operator class is:\n<code>\nCREATE INDEX idxginp ON api USING GIN (jdoc jsonb_path_ops);\n</code>\nConsider the example of a table that stores JSON documents retrieved from a third-party web service, with a documented schema definition. A typical document is:\n<code>\n{\n \"guid\": \"9c36adc1-7fb5-4d5b-83b4-90356a46061a\",\n \"name\": \"Angela Barton\",\n \"is_active\": true,\n \"company\": \"Magnafone\",\n \"address\": \"178 Howard Place, Gulf, Washington, 702\",\n \"registered\": \"2009-11-07T08:53:22 +08:00\",\n \"latitude\": 19.793713,\n \"longitude\": 86.513373,\n \"tags\": [\n \"enim\",\n \"aliquip\",\n \"qui\"\n ]\n}\n</code>\nWe store these documents in a table named <code>api</code>, in a <code>jsonb</code> column named <code>jdoc</code>. If a GIN index is created on this column, queries like the following can make use of the index:\n<code>\n-- Find documents in which the key \"company\" has value \"Magnafone\"\nSELECT jdoc->'guid', jdoc->'name' FROM api WHERE jdoc @> '{\"company\": \"Magnafone\"}';\n</code>\nHowever, the index could not be used for queries like the following, because though the operator <code>?</code> is indexable, it is not applied directly to the indexed column <code>jdoc</code>:\n<code>\n-- Find documents in which the key \"tags\" contains key or array element \"qui\"\nSELECT jdoc->'guid', jdoc->'name' FROM api WHERE jdoc -> 'tags' ? 'qui';\n</code>\nStill, with appropriate use of expression indexes, the above query can use an index. If querying for particular items within the <code>\"tags\"</code> key is common, defining an index like this may be worthwhile:\n<code>\nCREATE INDEX idxgintags ON api USING GIN ((jdoc -> 'tags'));\n</code>\nNow, the <code>WHERE</code> clause <code>jdoc -> 'tags' ? 'qui'</code> will be recognized as an application of the indexable operator <code>?</code> to the indexed expression <code>jdoc -> 'tags'</code>. (More information on expression indexes can be found in Section 11.7.)\nAnother approach to querying is to exploit containment, for example:\n<code>\n-- Find documents in which the key \"tags\" contains array element \"qui\"\nSELECT jdoc->'guid', jdoc->'name' FROM api WHERE jdoc @> '{\"tags\": [\"qui\"]}';\n</code>\nA simple GIN index on the <code>jdoc</code> column can support this query. But note that such an index will store copies of every key and value in the <code>jdoc</code> column, whereas the expression index of the previous example stores only data found under the <code>tags</code> key. While the simple-index approach is far more flexible (since it supports queries about any key), targeted expression indexes are likely to be smaller and faster to search than a simple index.\nGIN indexes also support the <code>@?</code> and <code>@@</code> operators, which perform <code>jsonpath</code> matching. Examples are\n<code>\nSELECT jdoc->'guid', jdoc->'name' FROM api WHERE jdoc @? '$.tags[*] ? (@ == \"qui\")';\n</code>\n<code>\nSELECT jdoc->'guid', jdoc->'name' FROM api WHERE jdoc @@ '$.tags[*] == \"qui\"';\n</code>\nFor these operators, a GIN index extracts clauses of the form <code>accessors_chain = constant</code> out of the <code>jsonpath</code> pattern, and does the index search based on the keys and values mentioned in these clauses. The accessors chain may include <code>.key</code>, <code>[*]</code>, and <code>[index]</code> accessors. The <code>jsonb_ops</code> operator class also supports <code>.*</code> and <code>.**</code> accessors, but the <code>jsonb_path_ops</code> operator class does not.\nAlthough the <code>jsonb_path_ops</code> operator class supports only queries with the <code>@></code>, <code>@?</code> and <code>@@</code> operators, it has notable performance advantages over the default operator class <code>jsonb_ops</code>. A <code>jsonb_path_ops</code> index is usually much smaller than a <code>jsonb_ops</code> index over the same data, and the specificity of searches is better, particularly when queries contain keys that appear frequently in the data. Therefore search operations typically perform better than with the default operator class.\nThe technical difference between a <code>jsonb_ops</code> and a <code>jsonb_path_ops</code> GIN index is that the former creates independent index items for each key and value in the data, while the latter creates index items only for each value in the data. [6] Basically, each <code>jsonb_path_ops</code> index item is a hash of the value and the key(s) leading to it; for example to index <code>{\"foo\": {\"bar\": \"baz\"}}</code>, a single index item would be created incorporating all three of <code>foo</code>, <code>bar</code>, and <code>baz</code> into the hash value. Thus a containment query looking for this structure would result in an extremely specific index search; but there is no way at all to find out whether <code>foo</code> appears as a key. On the other hand, a <code>jsonb_ops</code> index would create three index items representing <code>foo</code>, <code>bar</code>, and <code>baz</code> separately; then to do the containment query, it would look for rows containing all three of these items. While GIN indexes can perform such an AND search fairly efficiently, it will still be less specific and slower than the equivalent <code>jsonb_path_ops</code> search, especially if there are a very large number of rows containing any single one of the three index items.\nA disadvantage of the <code>jsonb_path_ops</code> approach is that it produces no index entries for JSON structures not containing any values, such as <code>{\"a\": {}}</code>. If a search for documents containing such a structure is requested, it will require a full-index scan, which is quite slow. <code>jsonb_path_ops</code> is therefore ill-suited for applications that often perform such searches.\n<code>jsonb</code> also supports <code>btree</code> and <code>hash</code> indexes. These are usually useful only if it's important to check equality of complete JSON documents. The <code>btree</code> ordering for <code>jsonb</code> datums is seldom of great interest, but for completeness it is:\n<code>\n<code>Object</code> > <code>Array</code> > <code>Boolean</code> > <code>Number</code> > <code>String</code> > <code>Null</code>\n<code>Object with n pairs</code> > <code>object with n - 1 pairs</code>\n<code>Array with n elements</code> > <code>array with n - 1 elements</code>\n</code>\nObjects with equal numbers of pairs are compared in the order:\n<code>\n<code>key-1</code>, <code>value-1</code>, <code>key-2</code> ...\n</code>\nNote that object keys are compared in their storage order; in particular, since shorter keys are stored before longer keys, this can lead to results that might be unintuitive, such as:\n<code>\n{ \"aa\": 1, \"c\": 1} > {\"b\": 1, \"d\": 1}\n</code>\nSimilarly, arrays with equal numbers of elements are compared in the order:\n<code>\n<code>element-1</code>, <code>element-2</code> ...\n</code>\nPrimitive JSON values are compared using the same comparison rules as for the underlying PostgreSQL data type. Strings are compared using the default database collation.\n; Additional extensions are available that implement transforms for the <code>jsonb</code> type for different procedural languages.; The extensions for PL/Perl are called <code>jsonb_plperl</code> and <code>jsonb_plperlu</code>. If you use them, <code>jsonb</code> values are mapped to Perl arrays, hashes, and scalars, as appropriate.; The extensions for PL/Python are called <code>jsonb_plpythonu</code>, <code>jsonb_plpython2u</code>, and <code>jsonb_plpython3u</code> (see Section 45.1 for the PL/Python naming convention). If you use them, <code>jsonb</code> values are mapped to Python dictionaries, lists, and scalars, as appropriate.; \nThe <code>jsonpath</code> type implements support for the SQL/JSON path language in PostgreSQL to efficiently query JSON data. It provides a binary representation of the parsed SQL/JSON path expression that specifies the items to be retrieved by the path engine from the JSON data for further processing with the SQL/JSON query functions.\nThe semantics of SQL/JSON path predicates and operators generally follow SQL. At the same time, to provide a most natural way of working with JSON data, SQL/JSON path syntax uses some of the JavaScript conventions:\nDot (<code>.</code>) is used for member access.\nSquare brackets (<code>[]</code>) are used for array access.\nSQL/JSON arrays are 0-relative, unlike regular SQL arrays that start from 1.\nAn SQL/JSON path expression is typically written in an SQL query as an SQL character string literal, so it must be enclosed in single quotes, and any single quotes desired within the value must be doubled (see Section 4.1.2.1). Some forms of path expressions require string literals within them. These embedded string literals follow JavaScript/ECMAScript conventions: they must be surrounded by double quotes, and backslash escapes may be used within them to represent otherwise-hard-to-type characters. In particular, the way to write a double quote within an embedded string literal is <code>\\\"</code>, and to write a backslash itself, you must write <code>\\\\</code>. Other special backslash sequences include those recognized in JavaScript strings: <code>\\b</code>, <code>\\f</code>, <code>\\n</code>, <code>\\r</code>, <code>\\t</code>, <code>\\v</code> for various ASCII control characters, <code>\\xNN</code> for a character code written with only two hex digits, <code>\\uNNNN</code> for a Unicode character identified by its 4-hex-digit code point, and <code>\\u{N...}</code> for a Unicode character code point written with 1 to 6 hex digits.\nA path expression consists of a sequence of path elements, which can be the following:\nPath literals of JSON primitive types: Unicode text, numeric, true, false, or null.\nPath variables listed in Table 8.24.\nAccessor operators listed in Table 8.25.\n<code>jsonpath</code> operators and methods listed in Section 9.15.2.3\nParentheses, which can be used to provide filter expressions or define the order of path evaluation.\nFor details on using <code>jsonpath</code> expressions with SQL/JSON query functions, see Section 9.15.2.\nTable 8.24. <code>jsonpath</code> Variables\n<table>\n<thead>\n<tr>\n<th>Variable</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>$</code></td>\n<td>A variable representing the JSON text to be queried (the context item).</td>\n</tr>\n<tr>\n<td><code>$varname</code></td>\n<td>A named variable. Its value can be set by the parameter <code>vars</code> of several JSON processing functions. See <link>Table 9.47&LINK&https://www.postgresql.org/docs/12/functions-json.html#FUNCTIONS-JSON-PROCESSING-TABLE</link> and its notes for details.</td>\n</tr>\n<tr>\n<td><code>@</code></td>\n<td>A variable representing the result of path evaluation in filter expressions.</td>\n</tr>\n</tbody>\n</table>\nTable 8.25. <code>jsonpath</code> Accessors\n<table>\n<thead>\n<tr>\n<th>Accessor Operator</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\n<code>.key</code>\n<code>.\"$varname\"</code>\n</td>\n<td>\nMember accessor that returns an object member with the specified key. If the key name is a named variable starting with <code>$</code> or does not meet the JavaScript rules of an identifier, it must be enclosed in double quotes as a character string literal.\n</td>\n</tr>\n<tr>\n<td>\n<code>.*</code>\n</td>\n<td>\nWildcard member accessor that returns the values of all members located at the top level of the current object.\n</td>\n</tr>\n<tr>\n<td>\n<code>.**</code>\n</td>\n<td>\nRecursive wildcard member accessor that processes all levels of the JSON hierarchy of the current object and returns all the member values, regardless of their nesting level. This is a PostgreSQL extension of the SQL/JSON standard.\n</td>\n</tr>\n<tr>\n<td>\n<code>.**{level}</code>\n<code>.**{start_level to end_level}</code>\n</td>\n<td>\nSame as <code>.**</code>, but with a filter over nesting levels of JSON hierarchy. Nesting levels are specified as integers. Zero level corresponds to the current object. To access the lowest nesting level, you can use the <code>last</code> keyword. This is a PostgreSQL extension of the SQL/JSON standard.\n</td>\n</tr>\n<tr>\n<td>\n<code>[subscript, ...]</code>\n</td>\n<td>\nArray element accessor. <code>subscript</code> can be given in two forms: <code>index</code> or <code>start_index to end_index</code>. The first form returns a single array element by its index. The second form returns an array slice by the range of indexes, including the elements that correspond to the provided <code>start_index</code> and <code>end_index</code>.\nThe specified <code>index</code> can be an integer, as well as an expression returning a single numeric value, which is automatically cast to integer. Zero index corresponds to the first array element. You can also use the <code>last</code> keyword to denote the last array element, which is useful for handling arrays of unknown length.\n</td>\n</tr>\n<tr>\n<td>\n<code>[*]</code>\n</td>\n<td>\nWildcard array element accessor that returns all array elements.\n</td>\n</tr>\n</tbody>\n</table>\n[6] For this purpose, the term \"value\" includes array elements, though JSON terminology sometimes considers array elements distinct from values within objects.\n",
        "example": [],
        "link": [
            "https://www.postgresql.org/docs/12/datatype-json.html"
        ]
    },
    {
        "type": "type",
        "keyword": "jsonb",
        "tree": "(identifier JSONB)",
        "description": [
            "binary JSON data, decomposed"
        ],
        "detail": "[DESCRIPTION]: binary JSON data, decomposed<sep>[COMPENSATE]: PostgreSQL offers two types for storing JSON data: <code>json</code> and <code>jsonb</code>. To implement efficient query mechanisms for these data types, PostgreSQL also provides the <code>jsonpath</code> data type described in Section 8.14.6.; The <code>json</code> and <code>jsonb</code> data types accept almost identical sets of values as input. The major practical difference is one of efficiency. The <code>json</code> data type stores an exact copy of the input text, which processing functions must reparse on each execution; while <code>jsonb</code> data is stored in a decomposed binary format that makes it slightly slower to input due to added conversion overhead, but significantly faster to process, since no reparsing is needed. <code>jsonb</code> also supports indexing, which can be a significant advantage.; Because the <code>json</code> type stores an exact copy of the input text, it will preserve semantically-insignificant white space between tokens, as well as the order of keys within JSON objects. Also, if a JSON object within the value contains the same key more than once, all the key/value pairs are kept. (The processing functions consider the last value as the operative one.) By contrast, <code>jsonb</code> does not preserve white space, does not preserve the order of object keys, and does not keep duplicate object keys. If duplicate keys are specified in the input, only the last value is kept.; In general, most applications should prefer to store JSON data as <code>jsonb</code>, unless there are quite specialized needs, such as legacy assumptions about ordering of object keys.; RFC 7159 permits JSON strings to contain Unicode escape sequences denoted by <code>\\uXXXX</code>. In the input function for the <code>json</code> type, Unicode escapes are allowed regardless of the database encoding, and are checked only for syntactic correctness (that is, that four hex digits follow <code>\\u</code>). However, the input function for <code>jsonb</code> is stricter: it disallows Unicode escapes for non-ASCII characters (those above <code>U+007F</code>) unless the database encoding is UTF8. The <code>jsonb</code> type also rejects <code>\\u0000</code> (because that cannot be represented in PostgreSQL's <code>text</code> type), and it insists that any use of Unicode surrogate pairs to designate characters outside the Unicode Basic Multilingual Plane be correct. Valid Unicode escapes are converted to the equivalent ASCII or UTF8 character for storage; this includes folding surrogate pairs into a single character.; Many of the JSON processing functions described in Section 9.15 will convert Unicode escapes to regular characters, and will therefore throw the same types of errors just described even if their input is of type <code>json</code> not <code>jsonb</code>. The fact that the <code>json</code> input function does not make these checks may be considered a historical artifact, although it does allow for simple storage (without processing) of JSON Unicode escapes in a non-UTF8 database encoding. In general, it is best to avoid mixing Unicode escapes in JSON with a non-UTF8 database encoding, if possible.; When converting textual JSON input into <code>jsonb</code>, the primitive types described by RFC 7159 are effectively mapped onto native PostgreSQL types, as shown in Table 8.23. Therefore, there are some minor additional constraints on what constitutes valid <code>jsonb</code> data that do not apply to the <code>json</code> type, nor to JSON in the abstract, corresponding to limits on what can be represented by the underlying data type. Notably, <code>jsonb</code> will reject numbers that are outside the range of the PostgreSQL <code>numeric</code> data type, while <code>json</code> will not. Such implementation-defined restrictions are permitted by RFC 7159. However, in practice such problems are far more likely to occur in other implementations, as it is common to represent JSON's <code>number</code> primitive type as IEEE 754 double precision floating point (which RFC 7159 explicitly anticipates and allows for). When using JSON as an interchange format with such systems, the danger of losing numeric precision compared to data originally stored by PostgreSQL should be considered.; The following are all valid <code>json</code> (or <code>jsonb</code>) expressions:; As previously stated, when a JSON value is input and then printed without any additional processing, <code>json</code> outputs the same text that was input, while <code>jsonb</code> does not preserve semantically-insignificant details such as whitespace. For example, note the differences here:; <code>\nSELECT '{\"bar\": \"baz\", \"balance\": 7.77, \"active\":false}'::json;\n json \n-------------------------------------------------\n {\"bar\": \"baz\", \"balance\": 7.77, \"active\":false}\n(1 row)\nSELECT '{\"bar\": \"baz\", \"balance\": 7.77, \"active\":false}'::jsonb;\n jsonb \n--------------------------------------------------\n {\"bar\": \"baz\", \"active\": false, \"balance\": 7.77}\n(1 row)\n</code>; One semantically-insignificant detail worth noting is that in <code>jsonb</code>, numbers will be printed according to the behavior of the underlying <code>numeric</code> type. In practice this means that numbers entered with <code>E</code> notation will be printed without it, for example:; <code>\nSELECT '{\"reading\": 1.230e-5}'::json, '{\"reading\": 1.230e-5}'::jsonb;\n json | jsonb \n-----------------------+-------------------------\n {\"reading\": 1.230e-5} | {\"reading\": 0.00001230}\n(1 row)\n</code>; However, <code>jsonb</code> will preserve trailing fractional zeroes, as seen in this example, even though those are semantically insignificant for purposes such as equality checks.; \nTesting containment is an important capability of <code>jsonb</code>. There is no parallel set of facilities for the <code>json</code> type. Containment tests whether one <code>jsonb</code> document has contained within it another one. These examples return true except as noted:\n<code>\n-- Simple scalar/primitive values contain only the identical value:\nSELECT '\"foo\"'::jsonb @> '\"foo\"'::jsonb;\n-- The array on the right side is contained within the one on the left:\nSELECT '[1, 2, 3]'::jsonb @> '[1, 3]'::jsonb;\n-- Order of array elements is not significant, so this is also true:\nSELECT '[1, 2, 3]'::jsonb @> '[3, 1]'::jsonb;\n-- Duplicate array elements don't matter either:\nSELECT '[1, 2, 3]'::jsonb @> '[1, 2, 2]'::jsonb;\n-- The object with a single pair on the right side is contained\n-- within the object on the left side:\nSELECT '{\"product\": \"PostgreSQL\", \"version\": 9.4, \"jsonb\": true}'::jsonb @> '{\"version\": 9.4}'::jsonb;\n-- The array on the right side is not considered contained within the\n-- array on the left, even though a similar array is nested within it:\nSELECT '[1, 2, [1, 3]]'::jsonb @> '[1, 3]'::jsonb; -- yields false\n-- But with a layer of nesting, it is contained:\nSELECT '[1, 2, [1, 3]]'::jsonb @> '[[1, 3]]'::jsonb;\n-- Similarly, containment is not reported here:\nSELECT '{\"foo\": {\"bar\": \"baz\"}}'::jsonb @> '{\"bar\": \"baz\"}'::jsonb; -- yields false\n-- A top-level key and an empty object is contained:\nSELECT '{\"foo\": {\"bar\": \"baz\"}}'::jsonb @> '{\"foo\": {}}'::jsonb;\n</code>\nThe general principle is that the contained object must match the containing object as to structure and data contents, possibly after discarding some non-matching array elements or object key/value pairs from the containing object. But remember that the order of array elements is not significant when doing a containment match, and duplicate array elements are effectively considered only once.\nAs a special exception to the general principle that the structures must match, an array may contain a primitive value:\n<code>\n-- This array contains the primitive string value:\nSELECT '[\"foo\", \"bar\"]'::jsonb @> '\"bar\"'::jsonb;\n-- This exception is not reciprocal -- non-containment is reported here:\nSELECT '\"bar\"'::jsonb @> '[\"bar\"]'::jsonb; -- yields false\n</code>\n<code>jsonb</code> also has an existence operator, which is a variation on the theme of containment: it tests whether a string (given as a <code>text</code> value) appears as an object key or array element at the top level of the <code>jsonb</code> value. These examples return true except as noted:\n<code>\n-- String exists as array element:\nSELECT '[\"foo\", \"bar\", \"baz\"]'::jsonb ? 'bar';\n-- String exists as object key:\nSELECT '{\"foo\": \"bar\"}'::jsonb ? 'foo';\n-- Object values are not considered:\nSELECT '{\"foo\": \"bar\"}'::jsonb ? 'bar'; -- yields false\n-- As with containment, existence must match at the top level:\nSELECT '{\"foo\": {\"bar\": \"baz\"}}'::jsonb ? 'bar'; -- yields false\n-- A string is considered to exist if it matches a primitive JSON string:\nSELECT '\"foo\"'::jsonb ? 'foo';\n</code>\nJSON objects are better suited than arrays for testing containment or existence when there are many keys or elements involved, because unlike arrays they are internally optimized for searching, and do not need to be searched linearly.\nTip\nBecause JSON containment is nested, an appropriate query can skip explicit selection of sub-objects. As an example, suppose that we have a <code>doc</code> column containing objects at the top level, with most objects containing <code>tags</code> fields that contain arrays of sub-objects. This query finds entries in which sub-objects containing both <code>\"term\":\"paris\"</code> and <code>\"term\":\"food\"</code> appear, while ignoring any such keys outside the <code>tags</code> array:\n<code>\nSELECT doc->'site_name' FROM websites\n WHERE doc @> '{\"tags\":[{\"term\":\"paris\"}, {\"term\":\"food\"}]}';\n</code>\nOne could accomplish the same thing with, say,\n<code>\nSELECT doc->'site_name' FROM websites\n WHERE doc->'tags' @> '[{\"term\":\"paris\"}, {\"term\":\"food\"}]';\n</code>\nbut that approach is less flexible, and often less efficient as well.\nOn the other hand, the JSON existence operator is not nested: it will only look for the specified key or array element at top level of the JSON value.\nThe various containment and existence operators, along with all other JSON operators and functions are documented in Section 9.15.\n; \nGIN indexes can be used to efficiently search for keys or key/value pairs occurring within a large number of <code>jsonb</code> documents (datums). Two GIN \"operator classes\" are provided, offering different performance and flexibility trade-offs.\nThe default GIN operator class for <code>jsonb</code> supports queries with the key-exists operators <code>?</code>, <code>?|</code> and <code>?&</code>, the containment operator <code>@></code>, and the <code>jsonpath</code> match operators <code>@?</code> and <code>@@</code>. (For details of the semantics that these operators implement, see Table 9.45.) An example of creating an index with this operator class is:\n<code>\nCREATE INDEX idxgin ON api USING GIN (jdoc);\n</code>\nThe non-default GIN operator class <code>jsonb_path_ops</code> does not support the key-exists operators, but it does support <code>@></code>, <code>@?</code> and <code>@@</code>. An example of creating an index with this operator class is:\n<code>\nCREATE INDEX idxginp ON api USING GIN (jdoc jsonb_path_ops);\n</code>\nConsider the example of a table that stores JSON documents retrieved from a third-party web service, with a documented schema definition. A typical document is:\n<code>\n{\n \"guid\": \"9c36adc1-7fb5-4d5b-83b4-90356a46061a\",\n \"name\": \"Angela Barton\",\n \"is_active\": true,\n \"company\": \"Magnafone\",\n \"address\": \"178 Howard Place, Gulf, Washington, 702\",\n \"registered\": \"2009-11-07T08:53:22 +08:00\",\n \"latitude\": 19.793713,\n \"longitude\": 86.513373,\n \"tags\": [\n \"enim\",\n \"aliquip\",\n \"qui\"\n ]\n}\n</code>\nWe store these documents in a table named <code>api</code>, in a <code>jsonb</code> column named <code>jdoc</code>. If a GIN index is created on this column, queries like the following can make use of the index:\n<code>\n-- Find documents in which the key \"company\" has value \"Magnafone\"\nSELECT jdoc->'guid', jdoc->'name' FROM api WHERE jdoc @> '{\"company\": \"Magnafone\"}';\n</code>\nHowever, the index could not be used for queries like the following, because though the operator <code>?</code> is indexable, it is not applied directly to the indexed column <code>jdoc</code>:\n<code>\n-- Find documents in which the key \"tags\" contains key or array element \"qui\"\nSELECT jdoc->'guid', jdoc->'name' FROM api WHERE jdoc -> 'tags' ? 'qui';\n</code>\nStill, with appropriate use of expression indexes, the above query can use an index. If querying for particular items within the <code>\"tags\"</code> key is common, defining an index like this may be worthwhile:\n<code>\nCREATE INDEX idxgintags ON api USING GIN ((jdoc -> 'tags'));\n</code>\nNow, the <code>WHERE</code> clause <code>jdoc -> 'tags' ? 'qui'</code> will be recognized as an application of the indexable operator <code>?</code> to the indexed expression <code>jdoc -> 'tags'</code>. (More information on expression indexes can be found in Section 11.7.)\nAnother approach to querying is to exploit containment, for example:\n<code>\n-- Find documents in which the key \"tags\" contains array element \"qui\"\nSELECT jdoc->'guid', jdoc->'name' FROM api WHERE jdoc @> '{\"tags\": [\"qui\"]}';\n</code>\nA simple GIN index on the <code>jdoc</code> column can support this query. But note that such an index will store copies of every key and value in the <code>jdoc</code> column, whereas the expression index of the previous example stores only data found under the <code>tags</code> key. While the simple-index approach is far more flexible (since it supports queries about any key), targeted expression indexes are likely to be smaller and faster to search than a simple index.\nGIN indexes also support the <code>@?</code> and <code>@@</code> operators, which perform <code>jsonpath</code> matching. Examples are\n<code>\nSELECT jdoc->'guid', jdoc->'name' FROM api WHERE jdoc @? '$.tags[*] ? (@ == \"qui\")';\n</code>\n<code>\nSELECT jdoc->'guid', jdoc->'name' FROM api WHERE jdoc @@ '$.tags[*] == \"qui\"';\n</code>\nFor these operators, a GIN index extracts clauses of the form <code>accessors_chain = constant</code> out of the <code>jsonpath</code> pattern, and does the index search based on the keys and values mentioned in these clauses. The accessors chain may include <code>.key</code>, <code>[*]</code>, and <code>[index]</code> accessors. The <code>jsonb_ops</code> operator class also supports <code>.*</code> and <code>.**</code> accessors, but the <code>jsonb_path_ops</code> operator class does not.\nAlthough the <code>jsonb_path_ops</code> operator class supports only queries with the <code>@></code>, <code>@?</code> and <code>@@</code> operators, it has notable performance advantages over the default operator class <code>jsonb_ops</code>. A <code>jsonb_path_ops</code> index is usually much smaller than a <code>jsonb_ops</code> index over the same data, and the specificity of searches is better, particularly when queries contain keys that appear frequently in the data. Therefore search operations typically perform better than with the default operator class.\nThe technical difference between a <code>jsonb_ops</code> and a <code>jsonb_path_ops</code> GIN index is that the former creates independent index items for each key and value in the data, while the latter creates index items only for each value in the data. [6] Basically, each <code>jsonb_path_ops</code> index item is a hash of the value and the key(s) leading to it; for example to index <code>{\"foo\": {\"bar\": \"baz\"}}</code>, a single index item would be created incorporating all three of <code>foo</code>, <code>bar</code>, and <code>baz</code> into the hash value. Thus a containment query looking for this structure would result in an extremely specific index search; but there is no way at all to find out whether <code>foo</code> appears as a key. On the other hand, a <code>jsonb_ops</code> index would create three index items representing <code>foo</code>, <code>bar</code>, and <code>baz</code> separately; then to do the containment query, it would look for rows containing all three of these items. While GIN indexes can perform such an AND search fairly efficiently, it will still be less specific and slower than the equivalent <code>jsonb_path_ops</code> search, especially if there are a very large number of rows containing any single one of the three index items.\nA disadvantage of the <code>jsonb_path_ops</code> approach is that it produces no index entries for JSON structures not containing any values, such as <code>{\"a\": {}}</code>. If a search for documents containing such a structure is requested, it will require a full-index scan, which is quite slow. <code>jsonb_path_ops</code> is therefore ill-suited for applications that often perform such searches.\n<code>jsonb</code> also supports <code>btree</code> and <code>hash</code> indexes. These are usually useful only if it's important to check equality of complete JSON documents. The <code>btree</code> ordering for <code>jsonb</code> datums is seldom of great interest, but for completeness it is:\n<code>\n<code>Object</code> > <code>Array</code> > <code>Boolean</code> > <code>Number</code> > <code>String</code> > <code>Null</code>\n<code>Object with n pairs</code> > <code>object with n - 1 pairs</code>\n<code>Array with n elements</code> > <code>array with n - 1 elements</code>\n</code>\nObjects with equal numbers of pairs are compared in the order:\n<code>\n<code>key-1</code>, <code>value-1</code>, <code>key-2</code> ...\n</code>\nNote that object keys are compared in their storage order; in particular, since shorter keys are stored before longer keys, this can lead to results that might be unintuitive, such as:\n<code>\n{ \"aa\": 1, \"c\": 1} > {\"b\": 1, \"d\": 1}\n</code>\nSimilarly, arrays with equal numbers of elements are compared in the order:\n<code>\n<code>element-1</code>, <code>element-2</code> ...\n</code>\nPrimitive JSON values are compared using the same comparison rules as for the underlying PostgreSQL data type. Strings are compared using the default database collation.\n; Additional extensions are available that implement transforms for the <code>jsonb</code> type for different procedural languages.; The extensions for PL/Perl are called <code>jsonb_plperl</code> and <code>jsonb_plperlu</code>. If you use them, <code>jsonb</code> values are mapped to Perl arrays, hashes, and scalars, as appropriate.; The extensions for PL/Python are called <code>jsonb_plpythonu</code>, <code>jsonb_plpython2u</code>, and <code>jsonb_plpython3u</code> (see Section 45.1 for the PL/Python naming convention). If you use them, <code>jsonb</code> values are mapped to Python dictionaries, lists, and scalars, as appropriate.",
        "example": [],
        "link": [
            "https://www.postgresql.org/docs/12/datatype-json.html"
        ]
    },
    {
        "type": "type",
        "keyword": "pg_lsn",
        "tree": "(identifier PG_LSN)",
        "description": [
            "PostgreSQL Log Sequence Number"
        ],
        "detail": "[DESCRIPTION]: PostgreSQL Log Sequence Number<sep>[COMPENSATE]: The <code>pg_lsn</code> data type can be used to store LSN (Log Sequence Number) data which is a pointer to a location in the WAL. This type is a representation of <code>XLogRecPtr</code> and an internal system type of PostgreSQL.; Internally, an LSN is a 64-bit integer, representing a byte position in the write-ahead log stream. It is printed as two hexadecimal numbers of up to 8 digits each, separated by a slash; for example, <code>16/B374D848</code>. The <code>pg_lsn</code> type supports the standard comparison operators, like <code>=</code> and <code>></code>. Two LSNs can be subtracted using the <code>-</code> operator; the result is the number of bytes separating those write-ahead log locations.",
        "example": [],
        "link": [
            "https://www.postgresql.org/docs/12/datatype-pg-lsn.html"
        ]
    },
    {
        "type": "type",
        "keyword": "int4range",
        "tree": "(identifier INT4RANGE)",
        "description": [
            "Range of integer"
        ],
        "detail": "[DESCRIPTION]: Range of integer<sep>[COMPENSATE]: <code>\nCREATE TABLE reservation (room int, during tsrange);\nINSERT INTO reservation VALUES\n (1108, '[2010-01-01 14:30, 2010-01-01 15:30)');\n-- Containment\nSELECT int4range(10, 20) @> 3;\n-- Overlaps\nSELECT numrange(11.1, 22.2) && numrange(20.0, 30.0);\n-- Extract the upper bound\nSELECT upper(int8range(15, 25));\n-- Compute the intersection\nSELECT int4range(10, 20) * int4range(15, 25);\n-- Is the range empty?\nSELECT isempty(numrange(1, 5));\n</code>; <code>\n-- includes 3, does not include 7, and does include all points in between\nSELECT '[3,7)'::int4range;\n-- does not include either 3 or 7, but includes all points in between\nSELECT '(3,7)'::int4range;\n-- includes only the single point 4\nSELECT '[4,4]'::int4range;\n-- includes no points (and will be normalized to 'empty')\nSELECT '[4,4)'::int4range;\n</code>; The built-in range types <code>int4range</code>, <code>int8range</code>, and <code>daterange</code> all use a canonical form that includes the lower bound and excludes the upper bound; that is, <code>[)</code>. User-defined range types can use other conventions, however.",
        "example": [],
        "link": [
            "https://www.postgresql.org/docs/12/rangetypes.html"
        ]
    },
    {
        "type": "type",
        "keyword": "int8range",
        "tree": "(identifier INT8RANGE)",
        "description": [
            "Range of bigint"
        ],
        "detail": "[DESCRIPTION]: Range of bigint<sep>[COMPENSATE]: <code>\nCREATE TABLE reservation (room int, during tsrange);\nINSERT INTO reservation VALUES\n (1108, '[2010-01-01 14:30, 2010-01-01 15:30)');\n-- Containment\nSELECT int4range(10, 20) @> 3;\n-- Overlaps\nSELECT numrange(11.1, 22.2) && numrange(20.0, 30.0);\n-- Extract the upper bound\nSELECT upper(int8range(15, 25));\n-- Compute the intersection\nSELECT int4range(10, 20) * int4range(15, 25);\n-- Is the range empty?\nSELECT isempty(numrange(1, 5));\n</code>; <code>\n-- The full form is: lower bound, upper bound, and text argument indicating\n-- inclusivity/exclusivity of bounds.\nSELECT numrange(1.0, 14.0, '(]');\n-- If the third argument is omitted, '[)' is assumed.\nSELECT numrange(1.0, 14.0);\n-- Although '(]' is specified here, on display the value will be converted to\n-- canonical form, since int8range is a discrete range type (see below).\nSELECT int8range(1, 14, '(]');\n-- Using NULL for either bound causes the range to be unbounded on that side.\nSELECT numrange(NULL, 2.2);\n</code>; The built-in range types <code>int4range</code>, <code>int8range</code>, and <code>daterange</code> all use a canonical form that includes the lower bound and excludes the upper bound; that is, <code>[)</code>. User-defined range types can use other conventions, however.",
        "example": [],
        "link": [
            "https://www.postgresql.org/docs/12/rangetypes.html"
        ]
    },
    {
        "type": "type",
        "keyword": "numrange",
        "tree": "(identifier NUMRANGE)",
        "description": [
            "Range of numericr"
        ],
        "detail": "[DESCRIPTION]: Range of numericr<sep>[COMPENSATE]: <code>\nCREATE TABLE reservation (room int, during tsrange);\nINSERT INTO reservation VALUES\n (1108, '[2010-01-01 14:30, 2010-01-01 15:30)');\n-- Containment\nSELECT int4range(10, 20) @> 3;\n-- Overlaps\nSELECT numrange(11.1, 22.2) && numrange(20.0, 30.0);\n-- Extract the upper bound\nSELECT upper(int8range(15, 25));\n-- Compute the intersection\nSELECT int4range(10, 20) * int4range(15, 25);\n-- Is the range empty?\nSELECT isempty(numrange(1, 5));\n</code>; <code>\n-- The full form is: lower bound, upper bound, and text argument indicating\n-- inclusivity/exclusivity of bounds.\nSELECT numrange(1.0, 14.0, '(]');\n-- If the third argument is omitted, '[)' is assumed.\nSELECT numrange(1.0, 14.0);\n-- Although '(]' is specified here, on display the value will be converted to\n-- canonical form, since int8range is a discrete range type (see below).\nSELECT int8range(1, 14, '(]');\n-- Using NULL for either bound causes the range to be unbounded on that side.\nSELECT numrange(NULL, 2.2);\n</code>",
        "example": [],
        "link": [
            "https://www.postgresql.org/docs/12/rangetypes.html"
        ]
    },
    {
        "type": "type",
        "keyword": "tsrange",
        "tree": "(identifier TSRANGE)",
        "description": [
            "Range of timestamp without time zone"
        ],
        "detail": "[DESCRIPTION]: Range of timestamp without time zone<sep>[COMPENSATE]: Range types are data types representing a range of values of some element type (called the range's subtype). For instance, ranges of <code>timestamp</code> might be used to represent the ranges of time that a meeting room is reserved. In this case the data type is <code>tsrange</code> (short for \"timestamp range\"), and <code>timestamp</code> is the subtype. The subtype must have a total order so that it is well-defined whether element values are within, before, or after a range of values.; <code>\nCREATE TABLE reservation (room int, during tsrange);\nINSERT INTO reservation VALUES\n (1108, '[2010-01-01 14:30, 2010-01-01 15:30)');\n-- Containment\nSELECT int4range(10, 20) @> 3;\n-- Overlaps\nSELECT numrange(11.1, 22.2) && numrange(20.0, 30.0);\n-- Extract the upper bound\nSELECT upper(int8range(15, 25));\n-- Compute the intersection\nSELECT int4range(10, 20) * int4range(15, 25);\n-- Is the range empty?\nSELECT isempty(numrange(1, 5));\n</code>; <code>\nCREATE TABLE reservation (\n during tsrange,\n EXCLUDE USING GIST (during WITH &&)\n);\n</code>; <code>\nCREATE EXTENSION btree_gist;\nCREATE TABLE room_reservation (\n room text,\n during tsrange,\n EXCLUDE USING GIST (room WITH =, during WITH &&)\n);\nINSERT INTO room_reservation VALUES\n ('123A', '[2010-01-01 14:00, 2010-01-01 15:00)');\nINSERT 0 1\nINSERT INTO room_reservation VALUES\n ('123A', '[2010-01-01 14:30, 2010-01-01 15:30)');\nERROR: conflicting key value violates exclusion constraint \"room_reservation_room_during_excl\"\nDETAIL: Key (room, during)=(123A, [\"2010-01-01 14:30:00\",\"2010-01-01 15:30:00\")) conflicts\nwith existing key (room, during)=(123A, [\"2010-01-01 14:00:00\",\"2010-01-01 15:00:00\")).\nINSERT INTO room_reservation VALUES\n ('123B', '[2010-01-01 14:30, 2010-01-01 15:30)');\nINSERT 0 1\n</code>",
        "example": [],
        "link": [
            "https://www.postgresql.org/docs/12/rangetypes.html"
        ]
    },
    {
        "type": "type",
        "keyword": "tstzrange",
        "tree": "(identifier TSTZRANGE)",
        "description": [
            "Range of timestamp with time zone"
        ],
        "detail": "[DESCRIPTION]: Range of timestamp with time zone<sep>[COMPENSATE]: ",
        "example": [],
        "link": [
            "https://www.postgresql.org/docs/12/rangetypes.html"
        ]
    },
    {
        "type": "type",
        "keyword": "daterange",
        "tree": "(identifier DATERANGE)",
        "description": [
            "Range of date"
        ],
        "detail": "[DESCRIPTION]: Range of date<sep>[COMPENSATE]: The built-in range types <code>int4range</code>, <code>int8range</code>, and <code>daterange</code> all use a canonical form that includes the lower bound and excludes the upper bound; that is, <code>[)</code>. User-defined range types can use other conventions, however.",
        "example": [],
        "link": [
            "https://www.postgresql.org/docs/12/rangetypes.html"
        ]
    },
    {
        "type": "function",
        "keyword": "array_append(anyarray, anyelement)",
        "tree": "(func_application (func_name (type_function_name (identifier array_append))) ( ))",
        "description": "append an element to the end of an array",
        "detail": "[DESCRIPTION]: append an element to the end of an array<sep>[EXAMPLE]: array_append(ARRAY[1,2], 3)<sep>[RESULT]: {1,2,3}<sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "array_append(ARRAY[1,2], 3)",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-array.html"
        ]
    },
    {
        "type": "function",
        "keyword": "array_cat(anyarray, anyarray)",
        "tree": "(func_application (func_name (type_function_name (identifier array_cat))) ( ))",
        "description": "concatenate two arrays",
        "detail": "[DESCRIPTION]: concatenate two arrays<sep>[EXAMPLE]: array_cat(ARRAY[1,2,3], ARRAY[4,5])<sep>[RESULT]: {1,2,3,4,5}<sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "array_cat(ARRAY[1,2,3], ARRAY[4,5])",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-array.html"
        ]
    },
    {
        "type": "function",
        "keyword": "array_ndims(anyarray)",
        "tree": "(func_application (func_name (type_function_name (identifier array_ndims))) ( ))",
        "description": "returns the number of dimensions of the array",
        "detail": "[DESCRIPTION]: returns the number of dimensions of the array<sep>[EXAMPLE]: array_ndims(ARRAY[[1,2,3], [4,5,6]])<sep>[RESULT]: 2<sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "array_ndims(ARRAY[[1,2,3], [4,5,6]])",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-array.html"
        ]
    },
    {
        "type": "function",
        "keyword": "array_dims(anyarray)",
        "tree": "(func_application (func_name (type_function_name (identifier array_dims))) ( ))",
        "description": "returns a text representation of array's dimensions",
        "detail": "[DESCRIPTION]: returns a text representation of array's dimensions<sep>[EXAMPLE]: array_dims(ARRAY[[1,2,3], [4,5,6]])<sep>[RESULT]: [1:2][1:3]<sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "array_dims(ARRAY[[1,2,3], [4,5,6]])",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-array.html"
        ]
    },
    {
        "type": "function",
        "keyword": "array_fill(anyelement, int[] [, int[]])",
        "tree": "(func_application (func_name (type_function_name (identifier array_fill))) ( ))",
        "description": "returns an array initialized with supplied value and dimensions, optionally with lower bounds other than 1",
        "detail": "[DESCRIPTION]: returns an array initialized with supplied value and dimensions, optionally with lower bounds other than 1<sep>[EXAMPLE]: array_fill(7, ARRAY[3], ARRAY[2])<sep>[RESULT]: [2:4]={7,7,7}<sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "array_fill(7, ARRAY[3], ARRAY[2])",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-array.html"
        ]
    },
    {
        "type": "function",
        "keyword": "array_length(anyarray, int)",
        "tree": "(func_application (func_name (type_function_name (identifier array_length))) ( ))",
        "description": "returns the length of the requested array dimension",
        "detail": "[DESCRIPTION]: returns the length of the requested array dimension<sep>[EXAMPLE]: array_length(array[1,2,3], 1)<sep>[RESULT]: 3<sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "array_length(array[1,2,3], 1)",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-array.html"
        ]
    },
    {
        "type": "function",
        "keyword": "array_lower(anyarray, int)",
        "tree": "(func_application (func_name (type_function_name (identifier array_lower))) ( ))",
        "description": "returns lower bound of the requested array dimension",
        "detail": "[DESCRIPTION]: returns lower bound of the requested array dimension<sep>[EXAMPLE]: array_lower('[0:2]={1,2,3}'::int[], 1)<sep>[RESULT]: 0<sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "array_lower('[0:2]={1,2,3}'::int[], 1)",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-array.html"
        ]
    },
    {
        "type": "function",
        "keyword": "array_position(anyarray, anyelement [, int])",
        "tree": "(func_application (func_name (type_function_name (identifier array_position))) ( ))",
        "description": "returns the subscript of the first occurrence of the second argument in the array, starting at the element indicated by the third argument or at the first element (array must be one-dimensional)",
        "detail": "[DESCRIPTION]: returns the subscript of the first occurrence of the second argument in the array, starting at the element indicated by the third argument or at the first element (array must be one-dimensional)<sep>[EXAMPLE]: array_position(ARRAY['sun','mon','tue','wed','thu','fri','sat'], 'mon')<sep>[RESULT]: 2<sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "array_position(ARRAY['sun','mon','tue','wed','thu','fri','sat'], 'mon')",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-array.html"
        ]
    },
    {
        "type": "function",
        "keyword": "array_positions(anyarray, anyelement)",
        "tree": "(func_application (func_name (type_function_name (identifier array_positions))) ( ))",
        "description": "returns an array of subscripts of all occurrences of the second argument in the array given as first argument (array must be one-dimensional)",
        "detail": "[DESCRIPTION]: returns an array of subscripts of all occurrences of the second argument in the array given as first argument (array must be one-dimensional)<sep>[EXAMPLE]: array_positions(ARRAY['A','A','B','A'], 'A')<sep>[RESULT]: {1,2,4}<sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "array_positions(ARRAY['A','A','B','A'], 'A')",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-array.html"
        ]
    },
    {
        "type": "function",
        "keyword": "array_prepend(anyelement, anyarray)",
        "tree": "(func_application (func_name (type_function_name (identifier array_prepend))) ( ))",
        "description": "append an element to the beginning of an array",
        "detail": "[DESCRIPTION]: append an element to the beginning of an array<sep>[EXAMPLE]: array_prepend(1, ARRAY[2,3])<sep>[RESULT]: {1,2,3}<sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "array_prepend(1, ARRAY[2,3])",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-array.html"
        ]
    },
    {
        "type": "function",
        "keyword": "array_remove(anyarray, anyelement)",
        "tree": "(func_application (func_name (type_function_name (identifier array_remove))) ( ))",
        "description": "remove all elements equal to the given value from the array (array must be one-dimensional)",
        "detail": "[DESCRIPTION]: remove all elements equal to the given value from the array (array must be one-dimensional)<sep>[EXAMPLE]: array_remove(ARRAY[1,2,3,2], 2)<sep>[RESULT]: {1,3}<sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "array_remove(ARRAY[1,2,3,2], 2)",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-array.html"
        ]
    },
    {
        "type": "function",
        "keyword": "array_replace(anyarray, anyelement, anyelement)",
        "tree": "(func_application (func_name (type_function_name (identifier array_replace))) ( ))",
        "description": "replace each array element equal to the given value with a new value",
        "detail": "[DESCRIPTION]: replace each array element equal to the given value with a new value<sep>[EXAMPLE]: array_replace(ARRAY[1,2,5,4], 5, 3)<sep>[RESULT]: {1,2,3,4}<sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "array_replace(ARRAY[1,2,5,4], 5, 3)",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-array.html"
        ]
    },
    {
        "type": "function",
        "keyword": "array_to_string(anyarray, text [, text])",
        "tree": "(func_application (func_name (type_function_name (identifier array_to_string))) ( ))",
        "description": "concatenates array elements using supplied delimiter and optional null string",
        "detail": "[DESCRIPTION]: concatenates array elements using supplied delimiter and optional null string<sep>[EXAMPLE]: array_to_string(ARRAY[1, 2, 3, NULL, 5], ',', '*')<sep>[RESULT]: 1,2,3,*,5<sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "array_to_string(ARRAY[1, 2, 3, NULL, 5], ',', '*')",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-array.html"
        ]
    },
    {
        "type": "function",
        "keyword": "array_upper(anyarray, int)",
        "tree": "(func_application (func_name (type_function_name (identifier array_upper))) ( ))",
        "description": "returns upper bound of the requested array dimension",
        "detail": "[DESCRIPTION]: returns upper bound of the requested array dimension<sep>[EXAMPLE]: array_upper(ARRAY[1,8,3,7], 1)<sep>[RESULT]: 4<sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "array_upper(ARRAY[1,8,3,7], 1)",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-array.html"
        ]
    },
    {
        "type": "function",
        "keyword": "cardinality(anyarray)",
        "tree": "(func_application (func_name (type_function_name (identifier cardinality))) ( ))",
        "description": "returns the total number of elements in the array, or 0 if the array is empty",
        "detail": "[DESCRIPTION]: returns the total number of elements in the array, or 0 if the array is empty<sep>[EXAMPLE]: cardinality(ARRAY[[1,2],[3,4]])<sep>[RESULT]: 4<sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "cardinality(ARRAY[[1,2],[3,4]])",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-array.html"
        ]
    },
    {
        "type": "function",
        "keyword": "string_to_array(text, text [, text])",
        "tree": "(func_application (func_name (builtin_function_name string_to_array)) ( ))",
        "description": "splits string into array elements using supplied delimiter and optional null string",
        "detail": "[DESCRIPTION]: splits string into array elements using supplied delimiter and optional null string<sep>[EXAMPLE]: string_to_array('xx~^~yy~^~zz', '~^~', 'yy')<sep>[RESULT]: {xx,NULL,zz}<sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "string_to_array('xx~^~yy~^~zz', '~^~', 'yy')",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-array.html"
        ]
    },
    {
        "type": "function",
        "keyword": "unnest(anyarray)",
        "tree": "(func_application (func_name (type_function_name (identifier unnest))) ( ))",
        "description": "expand an array to a set of rows",
        "detail": "[DESCRIPTION]: expand an array to a set of rows<sep>[EXAMPLE]: unnest(ARRAY[1,2])<sep>[RESULT]: 1\n2(2 rows)<sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "unnest(ARRAY[1,2])",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-array.html"
        ]
    },
    {
        "type": "function",
        "keyword": "unnest(anyarray, anyarray [, ...])",
        "tree": "(func_application (func_name (type_function_name (identifier unnest))) ( ))",
        "description": "expand multiple arrays (possibly of different types) to a set of rows. This is only allowed in the FROM clause; see Section\u00a07.2.1.4",
        "detail": "[DESCRIPTION]: expand multiple arrays (possibly of different types) to a set of rows. This is only allowed in the FROM clause; see Section\u00a07.2.1.4<sep>[EXAMPLE]: unnest(ARRAY[1,2],ARRAY['foo','bar','baz'])<sep>[RESULT]: 1    foo\n2    bar\nNULL baz(3 rows)<sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "unnest(ARRAY[1,2],ARRAY['foo','bar','baz'])",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-array.html"
        ]
    },
    {
        "type": "function",
        "keyword": "currval(regclass)",
        "tree": "(func_application (func_name (type_function_name (identifier currval))) ( ))",
        "description": "Return value most recently obtained with nextval for specified sequence",
        "detail": "[DESCRIPTION]: Return value most recently obtained with nextval for specified sequence<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-sequence.html"
        ]
    },
    {
        "type": "function",
        "keyword": "lastval()",
        "tree": "(func_application (func_name (type_function_name (identifier lastval))) ( ))",
        "description": "Return value most recently obtained with nextval for any sequence",
        "detail": "[DESCRIPTION]: Return value most recently obtained with nextval for any sequence<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-sequence.html"
        ]
    },
    {
        "type": "function",
        "keyword": "nextval(regclass)",
        "tree": "(func_application (func_name (type_function_name (identifier nextval))) ( ))",
        "description": "Advance sequence and return new value",
        "detail": "[DESCRIPTION]: Advance sequence and return new value<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-sequence.html"
        ]
    },
    {
        "type": "function",
        "keyword": "setval(regclass, bigint)",
        "tree": "(func_application (func_name (type_function_name (identifier setval))) ( ))",
        "description": "Set sequence's current value",
        "detail": "[DESCRIPTION]: Set sequence's current value<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-sequence.html"
        ]
    },
    {
        "type": "function",
        "keyword": "setval(regclass, bigint, boolean)",
        "tree": "(func_application (func_name (type_function_name (identifier setval))) ( ))",
        "description": "Set sequence's current value and is_called flag",
        "detail": "[DESCRIPTION]: Set sequence's current value and is_called flag<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-sequence.html"
        ]
    },
    {
        "type": "function",
        "keyword": "to_char(timestamp, text)",
        "tree": "(func_application (func_name (builtin_function_name to_char)) ( ))",
        "description": "convert time stamp to string",
        "detail": "[DESCRIPTION]: convert time stamp to string<sep>[EXAMPLE]: to_char(current_timestamp, 'HH12:MI:SS')<sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "to_char(current_timestamp, 'HH12:MI:SS')",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-formatting.html"
        ]
    },
    {
        "type": "function",
        "keyword": "to_char(interval, text)",
        "tree": "(func_application (func_name (builtin_function_name to_char)) ( ))",
        "description": "convert interval to string",
        "detail": "[DESCRIPTION]: convert interval to string<sep>[EXAMPLE]: to_char(interval '15h\u00a02m\u00a012s', 'HH24:MI:SS')<sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "to_char(interval '15h\u00a02m\u00a012s', 'HH24:MI:SS')",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-formatting.html"
        ]
    },
    {
        "type": "function",
        "keyword": "to_char(int, text)",
        "tree": "(func_application (func_name (builtin_function_name to_char)) ( ))",
        "description": "convert integer to string",
        "detail": "[DESCRIPTION]: convert integer to string<sep>[EXAMPLE]: to_char(125, '999')<sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "to_char(125, '999')",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-formatting.html"
        ]
    },
    {
        "type": "function",
        "keyword": "to_char(double precision, text)",
        "tree": "(func_application (func_name (builtin_function_name to_char)) ( ))",
        "description": "convert real/double precision to string",
        "detail": "[DESCRIPTION]: convert real/double precision to string<sep>[EXAMPLE]: to_char(125.8::real, '999D9')<sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "to_char(125.8::real, '999D9')",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-formatting.html"
        ]
    },
    {
        "type": "function",
        "keyword": "to_char(numeric, text)",
        "tree": "(func_application (func_name (builtin_function_name to_char)) ( ))",
        "description": "convert numeric to string",
        "detail": "[DESCRIPTION]: convert numeric to string<sep>[EXAMPLE]: to_char(-125.8, '999D99S')<sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "to_char(-125.8, '999D99S')",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-formatting.html"
        ]
    },
    {
        "type": "function",
        "keyword": "to_date(text, text)",
        "tree": "(func_application (func_name (builtin_function_name to_date)) ( ))",
        "description": "convert string to date",
        "detail": "[DESCRIPTION]: convert string to date<sep>[EXAMPLE]: to_date('05\u00a0Dec\u00a02000', 'DD\u00a0Mon\u00a0YYYY')<sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "to_date('05\u00a0Dec\u00a02000', 'DD\u00a0Mon\u00a0YYYY')",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-formatting.html"
        ]
    },
    {
        "type": "function",
        "keyword": "to_number(text, text)",
        "tree": "(func_application (func_name (builtin_function_name to_number)) ( ))",
        "description": "convert string to numeric",
        "detail": "[DESCRIPTION]: convert string to numeric<sep>[EXAMPLE]: to_number('12,454.8-', '99G999D9S')<sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "to_number('12,454.8-', '99G999D9S')",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-formatting.html"
        ]
    },
    {
        "type": "function",
        "keyword": "to_timestamp(text, text)",
        "tree": "(func_application (func_name (builtin_function_name to_timestamp)) ( ))",
        "description": "convert string to time stamp",
        "detail": "[DESCRIPTION]: convert string to time stamp<sep>[EXAMPLE]: to_timestamp('05\u00a0Dec\u00a02000', 'DD\u00a0Mon\u00a0YYYY')<sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "to_timestamp('05\u00a0Dec\u00a02000', 'DD\u00a0Mon\u00a0YYYY')",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-formatting.html"
        ]
    },
    {
        "type": "function",
        "keyword": "to_json(anyelement)",
        "tree": "(func_application (func_name (type_function_name (identifier to_json))) ( ))",
        "description": "Returns the value as json or jsonb. Arrays and composites are converted (recursively) to arrays and objects; otherwise, if there is a cast from the type to json, the cast function will be used to perform the conversion; otherwise, a scalar value is produced. For any scalar type other than a number, a Boolean, or a null value, the text representation will be used, in such a fashion that it is a valid json or jsonb value.",
        "detail": "[DESCRIPTION]: Returns the value as json or jsonb. Arrays and composites are converted (recursively) to arrays and objects; otherwise, if there is a cast from the type to json, the cast function will be used to perform the conversion; otherwise, a scalar value is produced. For any scalar type other than a number, a Boolean, or a null value, the text representation will be used, in such a fashion that it is a valid json or jsonb value.<sep>[EXAMPLE]: to_json('Fred said \"Hi.\"'::text)<sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: \"Fred said \\\"Hi.\\\"\"<sep>[COMPENSATE]: ",
        "example": [
            "to_json('Fred said \"Hi.\"'::text)",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-json.html"
        ]
    },
    {
        "type": "function",
        "keyword": "to_jsonb(anyelement)",
        "tree": "(func_application (func_name (type_function_name (identifier to_jsonb))) ( ))",
        "description": "Returns the value as json or jsonb. Arrays and composites are converted (recursively) to arrays and objects; otherwise, if there is a cast from the type to json, the cast function will be used to perform the conversion; otherwise, a scalar value is produced. For any scalar type other than a number, a Boolean, or a null value, the text representation will be used, in such a fashion that it is a valid json or jsonb value.",
        "detail": "[DESCRIPTION]: Returns the value as json or jsonb. Arrays and composites are converted (recursively) to arrays and objects; otherwise, if there is a cast from the type to json, the cast function will be used to perform the conversion; otherwise, a scalar value is produced. For any scalar type other than a number, a Boolean, or a null value, the text representation will be used, in such a fashion that it is a valid json or jsonb value.<sep>[EXAMPLE]: to_jsonb('Fred said \"Hi.\"'::text)<sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: \"Fred said \\\"Hi.\\\"\"<sep>[COMPENSATE]: ",
        "example": [
            "to_jsonb('Fred said \"Hi.\"'::text)",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-json.html"
        ]
    },
    {
        "type": "function",
        "keyword": "array_to_json(anyarray [, pretty_bool])",
        "tree": "(func_application (func_name (type_function_name (identifier array_to_json))) ( ))",
        "description": "Returns the array as a JSON array. A PostgreSQL multidimensional array becomes a JSON array of arrays. Line feeds will be added between dimension-1 elements if pretty_bool is true.",
        "detail": "[DESCRIPTION]: Returns the array as a JSON array. A PostgreSQL multidimensional array becomes a JSON array of arrays. Line feeds will be added between dimension-1 elements if pretty_bool is true.<sep>[EXAMPLE]: array_to_json('{{1,5},{99,100}}'::int[])<sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: [[1,5],[99,100]]<sep>[COMPENSATE]: ",
        "example": [
            "array_to_json('{{1,5},{99,100}}'::int[])",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-json.html"
        ]
    },
    {
        "type": "function",
        "keyword": "row_to_json(record [, pretty_bool])",
        "tree": "(func_application (func_name (type_function_name (identifier row_to_json))) ( ))",
        "description": "Returns the row as a JSON object. Line feeds will be added between level-1 elements if pretty_bool is true.",
        "detail": "[DESCRIPTION]: Returns the row as a JSON object. Line feeds will be added between level-1 elements if pretty_bool is true.<sep>[EXAMPLE]: row_to_json(row(1,'foo'))<sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: {\"f1\":1,\"f2\":\"foo\"}<sep>[COMPENSATE]: ",
        "example": [
            "row_to_json(row(1,'foo'))",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-json.html"
        ]
    },
    {
        "type": "function",
        "keyword": "json_build_array(VARIADIC \"any\")",
        "tree": "(func_application (func_name (type_function_name (identifier json_build_array))) ( ))",
        "description": "Builds a possibly-heterogeneously-typed JSON array out of a variadic argument list.",
        "detail": "[DESCRIPTION]: Builds a possibly-heterogeneously-typed JSON array out of a variadic argument list.<sep>[EXAMPLE]: json_build_array(1,2,'3',4,5)<sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: [1, 2, \"3\", 4, 5]<sep>[COMPENSATE]: ",
        "example": [
            "json_build_array(1,2,'3',4,5)",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-json.html"
        ]
    },
    {
        "type": "function",
        "keyword": "jsonb_build_array(VARIADIC \"any\")",
        "tree": "(func_application (func_name (type_function_name (identifier jsonb_build_array))) ( ))",
        "description": "Builds a possibly-heterogeneously-typed JSON array out of a variadic argument list.",
        "detail": "[DESCRIPTION]: Builds a possibly-heterogeneously-typed JSON array out of a variadic argument list.<sep>[EXAMPLE]: jsonb_build_array(1,2,'3',4,5)<sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: [1, 2, \"3\", 4, 5]<sep>[COMPENSATE]: ",
        "example": [
            "jsonb_build_array(1,2,'3',4,5)",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-json.html"
        ]
    },
    {
        "type": "function",
        "keyword": "json_build_object(VARIADIC \"any\")",
        "tree": "(func_application (func_name (type_function_name (identifier json_build_object))) ( ))",
        "description": "Builds a JSON object out of a variadic argument list. By convention, the argument list consists of alternating keys and values.",
        "detail": "[DESCRIPTION]: Builds a JSON object out of a variadic argument list. By convention, the argument list consists of alternating keys and values.<sep>[EXAMPLE]: json_build_object('foo',1,'bar',2)<sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: {\"foo\": 1, \"bar\": 2}<sep>[COMPENSATE]: ",
        "example": [
            "json_build_object('foo',1,'bar',2)",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-json.html"
        ]
    },
    {
        "type": "function",
        "keyword": "jsonb_build_object(VARIADIC \"any\")",
        "tree": "(func_application (func_name (type_function_name (identifier jsonb_build_object))) ( ))",
        "description": "Builds a JSON object out of a variadic argument list. By convention, the argument list consists of alternating keys and values.",
        "detail": "[DESCRIPTION]: Builds a JSON object out of a variadic argument list. By convention, the argument list consists of alternating keys and values.<sep>[EXAMPLE]: jsonb_build_object('foo',1,'bar',2)<sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: {\"foo\": 1, \"bar\": 2}<sep>[COMPENSATE]: ",
        "example": [
            "jsonb_build_object('foo',1,'bar',2)",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-json.html"
        ]
    },
    {
        "type": "function",
        "keyword": "json_object(text[])",
        "tree": "(func_application (func_name (type_function_name (identifier json_object))) ( ))",
        "description": "Builds a JSON object out of a text array. The array must have either exactly one dimension with an even number of members, in which case they are taken as alternating key/value pairs, or two dimensions such that each inner array has exactly two elements, which are taken as a key/value pair.",
        "detail": "[DESCRIPTION]: Builds a JSON object out of a text array. The array must have either exactly one dimension with an even number of members, in which case they are taken as alternating key/value pairs, or two dimensions such that each inner array has exactly two elements, which are taken as a key/value pair.<sep>[EXAMPLE]: json_object('{a, 1, b, \"def\", c, 3.5}')\njson_object('{{a, 1},{b, \"def\"},{c, 3.5}}')<sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: {\"a\": \"1\", \"b\": \"def\", \"c\": \"3.5\"}<sep>[COMPENSATE]: ",
        "example": [
            "json_object('{a, 1, b, \"def\", c, 3.5}')\njson_object('{{a, 1},{b, \"def\"},{c, 3.5}}')",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-json.html"
        ]
    },
    {
        "type": "function",
        "keyword": "jsonb_object(text[])",
        "tree": "(func_application (func_name (type_function_name (identifier jsonb_object))) ( ))",
        "description": "Builds a JSON object out of a text array. The array must have either exactly one dimension with an even number of members, in which case they are taken as alternating key/value pairs, or two dimensions such that each inner array has exactly two elements, which are taken as a key/value pair.",
        "detail": "[DESCRIPTION]: Builds a JSON object out of a text array. The array must have either exactly one dimension with an even number of members, in which case they are taken as alternating key/value pairs, or two dimensions such that each inner array has exactly two elements, which are taken as a key/value pair.<sep>[EXAMPLE]: jsonb_object('{a, 1, b, \"def\", c, 3.5}')\njsonb_object('{{a, 1},{b, \"def\"},{c, 3.5}}')<sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: {\"a\": \"1\", \"b\": \"def\", \"c\": \"3.5\"}<sep>[COMPENSATE]: ",
        "example": [
            "jsonb_object('{a, 1, b, \"def\", c, 3.5}')\njsonb_object('{{a, 1},{b, \"def\"},{c, 3.5}}')",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-json.html"
        ]
    },
    {
        "type": "function",
        "keyword": "json_object(keys text[], values text[])",
        "tree": "(func_application (func_name (type_function_name (identifier json_object))) ( ))",
        "description": "This form of json_object takes keys and values pairwise from two separate arrays. In all other respects it is identical to the one-argument form.",
        "detail": "[DESCRIPTION]: This form of json_object takes keys and values pairwise from two separate arrays. In all other respects it is identical to the one-argument form.<sep>[EXAMPLE]: json_object('{a, b}', '{1,2}')<sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: {\"a\": \"1\", \"b\": \"2\"}<sep>[COMPENSATE]: ",
        "example": [
            "json_object('{a, b}', '{1,2}')",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-json.html"
        ]
    },
    {
        "type": "function",
        "keyword": "jsonb_object(keys text[], values text[])",
        "tree": "(func_application (func_name (type_function_name (identifier jsonb_object))) ( ))",
        "description": "This form of json_object takes keys and values pairwise from two separate arrays. In all other respects it is identical to the one-argument form.",
        "detail": "[DESCRIPTION]: This form of json_object takes keys and values pairwise from two separate arrays. In all other respects it is identical to the one-argument form.<sep>[EXAMPLE]: jsonb_object('{a, b}', '{1,2}')<sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: {\"a\": \"1\", \"b\": \"2\"}<sep>[COMPENSATE]: ",
        "example": [
            "jsonb_object('{a, b}', '{1,2}')",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-json.html"
        ]
    },
    {
        "type": "function",
        "keyword": "json_array_length(json)",
        "tree": "(func_application (func_name (type_function_name (identifier json_array_length))) ( ))",
        "description": "Returns the number of elements in the outermost JSON array.",
        "detail": "[DESCRIPTION]: Returns the number of elements in the outermost JSON array.<sep>[EXAMPLE]: json_array_length('[1,2,3,{\"f1\":1,\"f2\":[5,6]},4]')<sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: 5<sep>[COMPENSATE]: ",
        "example": [
            "json_array_length('[1,2,3,{\"f1\":1,\"f2\":[5,6]},4]')",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-json.html"
        ]
    },
    {
        "type": "function",
        "keyword": "jsonb_array_length(jsonb)",
        "tree": "(func_application (func_name (type_function_name (identifier jsonb_array_length))) ( ))",
        "description": "Returns the number of elements in the outermost JSON array.",
        "detail": "[DESCRIPTION]: Returns the number of elements in the outermost JSON array.<sep>[EXAMPLE]: jsonb_array_length('[1,2,3,{\"f1\":1,\"f2\":[5,6]},4]')<sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: 5<sep>[COMPENSATE]: ",
        "example": [
            "jsonb_array_length('[1,2,3,{\"f1\":1,\"f2\":[5,6]},4]')",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-json.html"
        ]
    },
    {
        "type": "function",
        "keyword": "json_each(json)",
        "tree": "(func_application (func_name (type_function_name (identifier json_each))) ( ))",
        "description": "Expands the outermost JSON object into a set of key/value pairs.",
        "detail": "[DESCRIPTION]: Expands the outermost JSON object into a set of key/value pairs.<sep>[EXAMPLE]: select * from json_each('{\"a\":\"foo\", \"b\":\"bar\"}')<sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: key | value\n-----+-------\n a   | \"foo\"\n b   | \"bar\"<sep>[COMPENSATE]: ",
        "example": [
            "select * from json_each('{\"a\":\"foo\", \"b\":\"bar\"}')",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-json.html"
        ]
    },
    {
        "type": "function",
        "keyword": "jsonb_each(jsonb)",
        "tree": "(func_application (func_name (type_function_name (identifier jsonb_each))) ( ))",
        "description": "Expands the outermost JSON object into a set of key/value pairs.",
        "detail": "[DESCRIPTION]: Expands the outermost JSON object into a set of key/value pairs.<sep>[EXAMPLE]: select * from jsonb_each('{\"a\":\"foo\", \"b\":\"bar\"}')<sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: key | value\n-----+-------\n a   | \"foo\"\n b   | \"bar\"<sep>[COMPENSATE]: ",
        "example": [
            "select * from jsonb_each('{\"a\":\"foo\", \"b\":\"bar\"}')",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-json.html"
        ]
    },
    {
        "type": "function",
        "keyword": "json_each_text(json)",
        "tree": "(func_application (func_name (type_function_name (identifier json_each_text))) ( ))",
        "description": "Expands the outermost JSON object into a set of key/value pairs. The returned values will be of type text.",
        "detail": "[DESCRIPTION]: Expands the outermost JSON object into a set of key/value pairs. The returned values will be of type text.<sep>[EXAMPLE]: select * from json_each_text('{\"a\":\"foo\", \"b\":\"bar\"}')<sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: key | value\n-----+-------\n a   | foo\n b   | bar<sep>[COMPENSATE]: ",
        "example": [
            "select * from json_each_text('{\"a\":\"foo\", \"b\":\"bar\"}')",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-json.html"
        ]
    },
    {
        "type": "function",
        "keyword": "jsonb_each_text(jsonb)",
        "tree": "(func_application (func_name (type_function_name (identifier jsonb_each_text))) ( ))",
        "description": "Expands the outermost JSON object into a set of key/value pairs. The returned values will be of type text.",
        "detail": "[DESCRIPTION]: Expands the outermost JSON object into a set of key/value pairs. The returned values will be of type text.<sep>[EXAMPLE]: select * from jsonb_each_text('{\"a\":\"foo\", \"b\":\"bar\"}')<sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: key | value\n-----+-------\n a   | foo\n b   | bar<sep>[COMPENSATE]: ",
        "example": [
            "select * from jsonb_each_text('{\"a\":\"foo\", \"b\":\"bar\"}')",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-json.html"
        ]
    },
    {
        "type": "function",
        "keyword": "json_extract_path(from_json json, VARIADIC path_elems text[])",
        "tree": "(func_application (func_name (type_function_name (identifier json_extract_path))) ( ))",
        "description": "Returns JSON value pointed to by path_elems (equivalent to #> operator).",
        "detail": "[DESCRIPTION]: Returns JSON value pointed to by path_elems (equivalent to #> operator).<sep>[EXAMPLE]: json_extract_path('{\"f2\":{\"f3\":1},\"f4\":{\"f5\":99,\"f6\":\"foo\"}}','f4')<sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: {\"f5\":99,\"f6\":\"foo\"}<sep>[COMPENSATE]: ",
        "example": [
            "json_extract_path('{\"f2\":{\"f3\":1},\"f4\":{\"f5\":99,\"f6\":\"foo\"}}','f4')",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-json.html"
        ]
    },
    {
        "type": "function",
        "keyword": "jsonb_extract_path(from_json jsonb, VARIADIC path_elems text[])",
        "tree": "(func_application (func_name (type_function_name (identifier jsonb_extract_path))) ( ))",
        "description": "Returns JSON value pointed to by path_elems (equivalent to #> operator).",
        "detail": "[DESCRIPTION]: Returns JSON value pointed to by path_elems (equivalent to #> operator).<sep>[EXAMPLE]: jsonb_extract_path('{\"f2\":{\"f3\":1},\"f4\":{\"f5\":99,\"f6\":\"foo\"}}','f4')<sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: {\"f5\":99,\"f6\":\"foo\"}<sep>[COMPENSATE]: ",
        "example": [
            "jsonb_extract_path('{\"f2\":{\"f3\":1},\"f4\":{\"f5\":99,\"f6\":\"foo\"}}','f4')",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-json.html"
        ]
    },
    {
        "type": "function",
        "keyword": "json_extract_path_text(from_json json, VARIADIC path_elems text[])",
        "tree": "(func_application (func_name (type_function_name (identifier json_extract_path_text))) ( ))",
        "description": "Returns JSON value pointed to by path_elems as text (equivalent to #>> operator).",
        "detail": "[DESCRIPTION]: Returns JSON value pointed to by path_elems as text (equivalent to #>> operator).<sep>[EXAMPLE]: json_extract_path_text('{\"f2\":{\"f3\":1},\"f4\":{\"f5\":99,\"f6\":\"foo\"}}','f4', 'f6')<sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: foo<sep>[COMPENSATE]: ",
        "example": [
            "json_extract_path_text('{\"f2\":{\"f3\":1},\"f4\":{\"f5\":99,\"f6\":\"foo\"}}','f4', 'f6')",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-json.html"
        ]
    },
    {
        "type": "function",
        "keyword": "jsonb_extract_path_text(from_json jsonb, VARIADIC path_elems text[])",
        "tree": "(func_application (func_name (type_function_name (identifier jsonb_extract_path_text))) ( ))",
        "description": "Returns JSON value pointed to by path_elems as text (equivalent to #>> operator).",
        "detail": "[DESCRIPTION]: Returns JSON value pointed to by path_elems as text (equivalent to #>> operator).<sep>[EXAMPLE]: jsonb_extract_path_text('{\"f2\":{\"f3\":1},\"f4\":{\"f5\":99,\"f6\":\"foo\"}}','f4', 'f6')<sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: foo<sep>[COMPENSATE]: ",
        "example": [
            "jsonb_extract_path_text('{\"f2\":{\"f3\":1},\"f4\":{\"f5\":99,\"f6\":\"foo\"}}','f4', 'f6')",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-json.html"
        ]
    },
    {
        "type": "function",
        "keyword": "json_object_keys(json)",
        "tree": "(func_application (func_name (type_function_name (identifier json_object_keys))) ( ))",
        "description": "Returns set of keys in the outermost JSON object.",
        "detail": "[DESCRIPTION]: Returns set of keys in the outermost JSON object.<sep>[EXAMPLE]: json_object_keys('{\"f1\":\"abc\",\"f2\":{\"f3\":\"a\", \"f4\":\"b\"}}')<sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: json_object_keys\n------------------\n f1\n f2<sep>[COMPENSATE]: ",
        "example": [
            "json_object_keys('{\"f1\":\"abc\",\"f2\":{\"f3\":\"a\", \"f4\":\"b\"}}')",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-json.html"
        ]
    },
    {
        "type": "function",
        "keyword": "jsonb_object_keys(jsonb)",
        "tree": "(func_application (func_name (type_function_name (identifier jsonb_object_keys))) ( ))",
        "description": "Returns set of keys in the outermost JSON object.",
        "detail": "[DESCRIPTION]: Returns set of keys in the outermost JSON object.<sep>[EXAMPLE]: jsonb_object_keys('{\"f1\":\"abc\",\"f2\":{\"f3\":\"a\", \"f4\":\"b\"}}')<sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: json_object_keys\n------------------\n f1\n f2<sep>[COMPENSATE]: ",
        "example": [
            "jsonb_object_keys('{\"f1\":\"abc\",\"f2\":{\"f3\":\"a\", \"f4\":\"b\"}}')",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-json.html"
        ]
    },
    {
        "type": "function",
        "keyword": "json_populate_record(base anyelement, from_json json)",
        "tree": "(func_application (func_name (type_function_name (identifier json_populate_record))) ( ))",
        "description": "Expands the object in from_json to a row whose columns match the record type defined by base (see note below).",
        "detail": "[DESCRIPTION]: Expands the object in from_json to a row whose columns match the record type defined by base (see note below).<sep>[EXAMPLE]: select * from json_populate_record(null::myrowtype, '{\"a\": 1, \"b\": [\"2\", \"a b\"], \"c\": {\"d\": 4, \"e\": \"a b c\"}}')<sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: a |   b       |      c\n---+-----------+-------------\n 1 | {2,\"a b\"} | (4,\"a b c\")<sep>[COMPENSATE]: ",
        "example": [
            "select * from json_populate_record(null::myrowtype, '{\"a\": 1, \"b\": [\"2\", \"a b\"], \"c\": {\"d\": 4, \"e\": \"a b c\"}}')",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-json.html"
        ]
    },
    {
        "type": "function",
        "keyword": "jsonb_populate_record(base anyelement, from_json jsonb)",
        "tree": "(func_application (func_name (type_function_name (identifier jsonb_populate_record))) ( ))",
        "description": "Expands the object in from_json to a row whose columns match the record type defined by base (see note below).",
        "detail": "[DESCRIPTION]: Expands the object in from_json to a row whose columns match the record type defined by base (see note below).<sep>[EXAMPLE]: select * from jsonb_populate_record(null::myrowtype, '{\"a\": 1, \"b\": [\"2\", \"a b\"], \"c\": {\"d\": 4, \"e\": \"a b c\"}}')<sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: a |   b       |      c\n---+-----------+-------------\n 1 | {2,\"a b\"} | (4,\"a b c\")<sep>[COMPENSATE]: ",
        "example": [
            "select * from jsonb_populate_record(null::myrowtype, '{\"a\": 1, \"b\": [\"2\", \"a b\"], \"c\": {\"d\": 4, \"e\": \"a b c\"}}')",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-json.html"
        ]
    },
    {
        "type": "function",
        "keyword": "json_populate_recordset(base anyelement, from_json json)",
        "tree": "(func_application (func_name (type_function_name (identifier json_populate_recordset))) ( ))",
        "description": "Expands the outermost array of objects in from_json to a set of rows whose columns match the record type defined by base (see note below).",
        "detail": "[DESCRIPTION]: Expands the outermost array of objects in from_json to a set of rows whose columns match the record type defined by base (see note below).<sep>[EXAMPLE]: select * from json_populate_recordset(null::myrowtype, '[{\"a\":1,\"b\":2},{\"a\":3,\"b\":4}]')<sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: a | b\n---+---\n 1 | 2\n 3 | 4<sep>[COMPENSATE]: ",
        "example": [
            "select * from json_populate_recordset(null::myrowtype, '[{\"a\":1,\"b\":2},{\"a\":3,\"b\":4}]')",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-json.html"
        ]
    },
    {
        "type": "function",
        "keyword": "jsonb_populate_recordset(base anyelement, from_json jsonb)",
        "tree": "(func_application (func_name (type_function_name (identifier jsonb_populate_recordset))) ( ))",
        "description": "Expands the outermost array of objects in from_json to a set of rows whose columns match the record type defined by base (see note below).",
        "detail": "[DESCRIPTION]: Expands the outermost array of objects in from_json to a set of rows whose columns match the record type defined by base (see note below).<sep>[EXAMPLE]: select * from jsonb_populate_recordset(null::myrowtype, '[{\"a\":1,\"b\":2},{\"a\":3,\"b\":4}]')<sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: a | b\n---+---\n 1 | 2\n 3 | 4<sep>[COMPENSATE]: ",
        "example": [
            "select * from jsonb_populate_recordset(null::myrowtype, '[{\"a\":1,\"b\":2},{\"a\":3,\"b\":4}]')",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-json.html"
        ]
    },
    {
        "type": "function",
        "keyword": "json_array_elements(json)",
        "tree": "(func_application (func_name (type_function_name (identifier json_array_elements))) ( ))",
        "description": "Expands a JSON array to a set of JSON values.",
        "detail": "[DESCRIPTION]: Expands a JSON array to a set of JSON values.<sep>[EXAMPLE]: select * from json_array_elements('[1,true, [2,false]]')<sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: value\n-----------\n 1\n true\n [2,false]<sep>[COMPENSATE]: ",
        "example": [
            "select * from json_array_elements('[1,true, [2,false]]')",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-json.html"
        ]
    },
    {
        "type": "function",
        "keyword": "jsonb_array_elements(jsonb)",
        "tree": "(func_application (func_name (type_function_name (identifier jsonb_array_elements))) ( ))",
        "description": "Expands a JSON array to a set of JSON values.",
        "detail": "[DESCRIPTION]: Expands a JSON array to a set of JSON values.<sep>[EXAMPLE]: select * from jsonb_array_elements('[1,true, [2,false]]')<sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: value\n-----------\n 1\n true\n [2,false]<sep>[COMPENSATE]: ",
        "example": [
            "select * from jsonb_array_elements('[1,true, [2,false]]')",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-json.html"
        ]
    },
    {
        "type": "function",
        "keyword": "json_array_elements_text(json)",
        "tree": "(func_application (func_name (type_function_name (identifier json_array_elements_text))) ( ))",
        "description": "Expands a JSON array to a set of text values.",
        "detail": "[DESCRIPTION]: Expands a JSON array to a set of text values.<sep>[EXAMPLE]: select * from json_array_elements_text('[\"foo\", \"bar\"]')<sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: value\n-----------\n foo\n bar<sep>[COMPENSATE]: ",
        "example": [
            "select * from json_array_elements_text('[\"foo\", \"bar\"]')",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-json.html"
        ]
    },
    {
        "type": "function",
        "keyword": "jsonb_array_elements_text(jsonb)",
        "tree": "(func_application (func_name (type_function_name (identifier jsonb_array_elements_text))) ( ))",
        "description": "Expands a JSON array to a set of text values.",
        "detail": "[DESCRIPTION]: Expands a JSON array to a set of text values.<sep>[EXAMPLE]: select * from jsonb_array_elements_text('[\"foo\", \"bar\"]')<sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: value\n-----------\n foo\n bar<sep>[COMPENSATE]: ",
        "example": [
            "select * from jsonb_array_elements_text('[\"foo\", \"bar\"]')",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-json.html"
        ]
    },
    {
        "type": "function",
        "keyword": "json_typeof(json)",
        "tree": "(func_application (func_name (type_function_name (identifier json_typeof))) ( ))",
        "description": "Returns the type of the outermost JSON value as a text string. Possible types are object, array, string, number, boolean, and null.",
        "detail": "[DESCRIPTION]: Returns the type of the outermost JSON value as a text string. Possible types are object, array, string, number, boolean, and null.<sep>[EXAMPLE]: json_typeof('-123.4')<sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: number<sep>[COMPENSATE]: ",
        "example": [
            "json_typeof('-123.4')",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-json.html"
        ]
    },
    {
        "type": "function",
        "keyword": "jsonb_typeof(jsonb)",
        "tree": "(func_application (func_name (type_function_name (identifier jsonb_typeof))) ( ))",
        "description": "Returns the type of the outermost JSON value as a text string. Possible types are object, array, string, number, boolean, and null.",
        "detail": "[DESCRIPTION]: Returns the type of the outermost JSON value as a text string. Possible types are object, array, string, number, boolean, and null.<sep>[EXAMPLE]: jsonb_typeof('-123.4')<sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: number<sep>[COMPENSATE]: ",
        "example": [
            "jsonb_typeof('-123.4')",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-json.html"
        ]
    },
    {
        "type": "function",
        "keyword": "json_to_record(json)",
        "tree": "(func_application (func_name (type_function_name (identifier json_to_record))) ( ))",
        "description": "Builds an arbitrary record from a JSON object (see note below). As with all functions returning record, the caller must explicitly define the structure of the record with an AS clause.",
        "detail": "[DESCRIPTION]: Builds an arbitrary record from a JSON object (see note below). As with all functions returning record, the caller must explicitly define the structure of the record with an AS clause.<sep>[EXAMPLE]: select * from json_to_record('{\"a\":1,\"b\":[1,2,3],\"c\":[1,2,3],\"e\":\"bar\",\"r\": {\"a\": 123, \"b\": \"a b c\"}}') as x(a int, b text, c int[], d text, r myrowtype)<sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: a |    b    |    c    | d |       r\n---+---------+---------+---+---------------\n 1 | [1,2,3] | {1,2,3} |   | (123,\"a b c\")<sep>[COMPENSATE]: ",
        "example": [
            "select * from json_to_record('{\"a\":1,\"b\":[1,2,3],\"c\":[1,2,3],\"e\":\"bar\",\"r\": {\"a\": 123, \"b\": \"a b c\"}}') as x(a int, b text, c int[], d text, r myrowtype)",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-json.html"
        ]
    },
    {
        "type": "function",
        "keyword": "jsonb_to_record(jsonb)",
        "tree": "(func_application (func_name (type_function_name (identifier jsonb_to_record))) ( ))",
        "description": "Builds an arbitrary record from a JSON object (see note below). As with all functions returning record, the caller must explicitly define the structure of the record with an AS clause.",
        "detail": "[DESCRIPTION]: Builds an arbitrary record from a JSON object (see note below). As with all functions returning record, the caller must explicitly define the structure of the record with an AS clause.<sep>[EXAMPLE]: select * from jsonb_to_record('{\"a\":1,\"b\":[1,2,3],\"c\":[1,2,3],\"e\":\"bar\",\"r\": {\"a\": 123, \"b\": \"a b c\"}}') as x(a int, b text, c int[], d text, r myrowtype)<sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: a |    b    |    c    | d |       r\n---+---------+---------+---+---------------\n 1 | [1,2,3] | {1,2,3} |   | (123,\"a b c\")<sep>[COMPENSATE]: ",
        "example": [
            "select * from jsonb_to_record('{\"a\":1,\"b\":[1,2,3],\"c\":[1,2,3],\"e\":\"bar\",\"r\": {\"a\": 123, \"b\": \"a b c\"}}') as x(a int, b text, c int[], d text, r myrowtype)",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-json.html"
        ]
    },
    {
        "type": "function",
        "keyword": "json_to_recordset(json)",
        "tree": "(func_application (func_name (type_function_name (identifier json_to_recordset))) ( ))",
        "description": "Builds an arbitrary set of records from a JSON array of objects (see note below). As with all functions returning record, the caller must explicitly define the structure of the record with an AS clause.",
        "detail": "[DESCRIPTION]: Builds an arbitrary set of records from a JSON array of objects (see note below). As with all functions returning record, the caller must explicitly define the structure of the record with an AS clause.<sep>[EXAMPLE]: select * from json_to_recordset('[{\"a\":1,\"b\":\"foo\"},{\"a\":\"2\",\"c\":\"bar\"}]') as x(a int, b text);<sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: a |  b\n---+-----\n 1 | foo\n 2 |<sep>[COMPENSATE]: ",
        "example": [
            "select * from json_to_recordset('[{\"a\":1,\"b\":\"foo\"},{\"a\":\"2\",\"c\":\"bar\"}]') as x(a int, b text);",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-json.html"
        ]
    },
    {
        "type": "function",
        "keyword": "jsonb_to_recordset(jsonb)",
        "tree": "(func_application (func_name (type_function_name (identifier jsonb_to_recordset))) ( ))",
        "description": "Builds an arbitrary set of records from a JSON array of objects (see note below). As with all functions returning record, the caller must explicitly define the structure of the record with an AS clause.",
        "detail": "[DESCRIPTION]: Builds an arbitrary set of records from a JSON array of objects (see note below). As with all functions returning record, the caller must explicitly define the structure of the record with an AS clause.<sep>[EXAMPLE]: select * from jsonb_to_recordset('[{\"a\":1,\"b\":\"foo\"},{\"a\":\"2\",\"c\":\"bar\"}]') as x(a int, b text);<sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: a |  b\n---+-----\n 1 | foo\n 2 |<sep>[COMPENSATE]: ",
        "example": [
            "select * from jsonb_to_recordset('[{\"a\":1,\"b\":\"foo\"},{\"a\":\"2\",\"c\":\"bar\"}]') as x(a int, b text);",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-json.html"
        ]
    },
    {
        "type": "function",
        "keyword": "json_strip_nulls(from_json json)",
        "tree": "(func_application (func_name (type_function_name (identifier json_strip_nulls))) ( ))",
        "description": "Returns from_json with all object fields that have null values omitted. Other null values are untouched.",
        "detail": "[DESCRIPTION]: Returns from_json with all object fields that have null values omitted. Other null values are untouched.<sep>[EXAMPLE]: json_strip_nulls('[{\"f1\":1,\"f2\":null},2,null,3]')<sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: [{\"f1\":1},2,null,3]<sep>[COMPENSATE]: ",
        "example": [
            "json_strip_nulls('[{\"f1\":1,\"f2\":null},2,null,3]')",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-json.html"
        ]
    },
    {
        "type": "function",
        "keyword": "jsonb_strip_nulls(from_json jsonb)",
        "tree": "(func_application (func_name (type_function_name (identifier jsonb_strip_nulls))) ( ))",
        "description": "Returns from_json with all object fields that have null values omitted. Other null values are untouched.",
        "detail": "[DESCRIPTION]: Returns from_json with all object fields that have null values omitted. Other null values are untouched.<sep>[EXAMPLE]: jsonb_strip_nulls('[{\"f1\":1,\"f2\":null},2,null,3]')<sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: [{\"f1\":1},2,null,3]<sep>[COMPENSATE]: ",
        "example": [
            "jsonb_strip_nulls('[{\"f1\":1,\"f2\":null},2,null,3]')",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-json.html"
        ]
    },
    {
        "type": "function",
        "keyword": "jsonb_set(target jsonb, path text[], new_value jsonb [, create_missing boolean])",
        "tree": "(func_application (func_name (type_function_name (identifier jsonb_set))) ( ))",
        "description": "Returns target with the section designated by path replaced by new_value, or with new_value added if create_missing is true (default is true) and the item designated by path does not exist. As with the path oriented operators, negative integers that appear in path count from the end of JSON arrays.",
        "detail": "[DESCRIPTION]: Returns target with the section designated by path replaced by new_value, or with new_value added if create_missing is true (default is true) and the item designated by path does not exist. As with the path oriented operators, negative integers that appear in path count from the end of JSON arrays.<sep>[EXAMPLE]: jsonb_set('[{\"f1\":1,\"f2\":null},2,null,3]', '{0,f1}','[2,3,4]', false)\njsonb_set('[{\"f1\":1,\"f2\":null},2]', '{0,f3}','[2,3,4]')<sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: [{\"f1\":[2,3,4],\"f2\":null},2,null,3]\n[{\"f1\": 1, \"f2\": null, \"f3\": [2, 3, 4]}, 2]<sep>[COMPENSATE]: ",
        "example": [
            "jsonb_set('[{\"f1\":1,\"f2\":null},2,null,3]', '{0,f1}','[2,3,4]', false)\njsonb_set('[{\"f1\":1,\"f2\":null},2]', '{0,f3}','[2,3,4]')",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-json.html"
        ]
    },
    {
        "type": "function",
        "keyword": "jsonb_insert(target jsonb, path text[], new_value jsonb [, insert_after boolean])",
        "tree": "(func_application (func_name (type_function_name (identifier jsonb_insert))) ( ))",
        "description": "Returns target with new_value inserted. If target section designated by path is in a JSONB array, new_value will be inserted before target or after if insert_after is true (default is false). If target section designated by path is in JSONB object, new_value will be inserted only if target does not exist. As with the path oriented operators, negative integers that appear in path count from the end of JSON arrays.",
        "detail": "[DESCRIPTION]: Returns target with new_value inserted. If target section designated by path is in a JSONB array, new_value will be inserted before target or after if insert_after is true (default is false). If target section designated by path is in JSONB object, new_value will be inserted only if target does not exist. As with the path oriented operators, negative integers that appear in path count from the end of JSON arrays.<sep>[EXAMPLE]: jsonb_insert('{\"a\": [0,1,2]}', '{a, 1}', '\"new_value\"')\njsonb_insert('{\"a\": [0,1,2]}', '{a, 1}', '\"new_value\"', true)<sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: {\"a\": [0, \"new_value\", 1, 2]}\n{\"a\": [0, 1, \"new_value\", 2]}<sep>[COMPENSATE]: ",
        "example": [
            "jsonb_insert('{\"a\": [0,1,2]}', '{a, 1}', '\"new_value\"')\njsonb_insert('{\"a\": [0,1,2]}', '{a, 1}', '\"new_value\"', true)",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-json.html"
        ]
    },
    {
        "type": "function",
        "keyword": "jsonb_pretty(from_json jsonb)",
        "tree": "(func_application (func_name (type_function_name (identifier jsonb_pretty))) ( ))",
        "description": "Returns from_json as indented JSON text.",
        "detail": "[DESCRIPTION]: Returns from_json as indented JSON text.<sep>[EXAMPLE]: jsonb_pretty('[{\"f1\":1,\"f2\":null},2,null,3]')<sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: [\n    {\n        \"f1\": 1,\n        \"f2\": null\n    },\n    2,\n    null,\n    3\n]<sep>[COMPENSATE]: ",
        "example": [
            "jsonb_pretty('[{\"f1\":1,\"f2\":null},2,null,3]')",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-json.html"
        ]
    },
    {
        "type": "function",
        "keyword": "jsonb_path_exists(target jsonb, path jsonpath [, vars jsonb [, silent bool]])",
        "tree": "(func_application (func_name (type_function_name (identifier jsonb_path_exists))) ( ))",
        "description": "Checks whether JSON path returns any item for the specified JSON value.",
        "detail": "[DESCRIPTION]: Checks whether JSON path returns any item for the specified JSON value.<sep>[EXAMPLE]: jsonb_path_exists('{\"a\":[1,2,3,4,5]}', '$.a[*] ? (@ >= $min && @ <= $max)', '{\"min\":2,\"max\":4}')<sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: true<sep>[COMPENSATE]: ",
        "example": [
            "jsonb_path_exists('{\"a\":[1,2,3,4,5]}', '$.a[*] ? (@ >= $min && @ <= $max)', '{\"min\":2,\"max\":4}')",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-json.html"
        ]
    },
    {
        "type": "function",
        "keyword": "jsonb_path_match(target jsonb, path jsonpath [, vars jsonb [, silent bool]])",
        "tree": "(func_application (func_name (type_function_name (identifier jsonb_path_match))) ( ))",
        "description": "Returns the result of JSON path predicate check for the specified JSON value. Only the first item of the result is taken into account. If the result is not Boolean, then null is returned.",
        "detail": "[DESCRIPTION]: Returns the result of JSON path predicate check for the specified JSON value. Only the first item of the result is taken into account. If the result is not Boolean, then null is returned.<sep>[EXAMPLE]: jsonb_path_match('{\"a\":[1,2,3,4,5]}', 'exists($.a[*] ? (@ >= $min && @ <= $max))', '{\"min\":2,\"max\":4}')<sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: true<sep>[COMPENSATE]: ",
        "example": [
            "jsonb_path_match('{\"a\":[1,2,3,4,5]}', 'exists($.a[*] ? (@ >= $min && @ <= $max))', '{\"min\":2,\"max\":4}')",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-json.html"
        ]
    },
    {
        "type": "function",
        "keyword": "jsonb_path_query(target jsonb, path jsonpath [, vars jsonb [, silent bool]])",
        "tree": "(func_application (func_name (type_function_name (identifier jsonb_path_query))) ( ))",
        "description": "Gets all JSON items returned by JSON path for the specified JSON value.",
        "detail": "[DESCRIPTION]: Gets all JSON items returned by JSON path for the specified JSON value.<sep>[EXAMPLE]: select * from jsonb_path_query('{\"a\":[1,2,3,4,5]}', '$.a[*] ? (@ >= $min && @ <= $max)', '{\"min\":2,\"max\":4}');<sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: jsonb_path_query\n------------------\n 2\n 3\n 4<sep>[COMPENSATE]: ",
        "example": [
            "select * from jsonb_path_query('{\"a\":[1,2,3,4,5]}', '$.a[*] ? (@ >= $min && @ <= $max)', '{\"min\":2,\"max\":4}');",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-json.html"
        ]
    },
    {
        "type": "function",
        "keyword": "jsonb_path_query_array(target jsonb, path jsonpath [, vars jsonb [, silent bool]])",
        "tree": "(func_application (func_name (type_function_name (identifier jsonb_path_query_array))) ( ))",
        "description": "Gets all JSON items returned by JSON path for the specified JSON value and wraps result into an array.",
        "detail": "[DESCRIPTION]: Gets all JSON items returned by JSON path for the specified JSON value and wraps result into an array.<sep>[EXAMPLE]: jsonb_path_query_array('{\"a\":[1,2,3,4,5]}', '$.a[*] ? (@ >= $min && @ <= $max)', '{\"min\":2,\"max\":4}')<sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: [2, 3, 4]<sep>[COMPENSATE]: ",
        "example": [
            "jsonb_path_query_array('{\"a\":[1,2,3,4,5]}', '$.a[*] ? (@ >= $min && @ <= $max)', '{\"min\":2,\"max\":4}')",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-json.html"
        ]
    },
    {
        "type": "function",
        "keyword": "jsonb_path_query_first(target jsonb, path jsonpath [, vars jsonb [, silent bool]])",
        "tree": "(func_application (func_name (type_function_name (identifier jsonb_path_query_first))) ( ))",
        "description": "Gets the first JSON item returned by JSON path for the specified JSON value. Returns NULL on no results.",
        "detail": "[DESCRIPTION]: Gets the first JSON item returned by JSON path for the specified JSON value. Returns NULL on no results.<sep>[EXAMPLE]: jsonb_path_query_first('{\"a\":[1,2,3,4,5]}', '$.a[*] ? (@ >= $min && @ <= $max)', '{\"min\":2,\"max\":4}')<sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: 2<sep>[COMPENSATE]: ",
        "example": [
            "jsonb_path_query_first('{\"a\":[1,2,3,4,5]}', '$.a[*] ? (@ >= $min && @ <= $max)', '{\"min\":2,\"max\":4}')",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-json.html"
        ]
    },
    {
        "type": "function",
        "keyword": "type()",
        "tree": "(func_application (func_name (type_function_name (identifier (plsql_unreserved_keyword type)))) ( ))",
        "description": "Type of the SQL/JSON item",
        "detail": "[DESCRIPTION]: Type of the SQL/JSON item<sep>[EXAMPLE]: <sep>[RESULT]: \"number\", \"string\", \"object\"<sep>[EXAMPLE QUERY]: $[*].type()<sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            "$[*].type()"
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-json.html"
        ]
    },
    {
        "type": "function",
        "keyword": "size()",
        "tree": "(func_application (func_name (type_function_name (identifier size))) ( ))",
        "description": "Size of the SQL/JSON item",
        "detail": "[DESCRIPTION]: Size of the SQL/JSON item<sep>[EXAMPLE]: <sep>[RESULT]: 2<sep>[EXAMPLE QUERY]: $.m.size()<sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            "$.m.size()"
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-json.html"
        ]
    },
    {
        "type": "function",
        "keyword": "double()",
        "tree": "(func_application (func_name (type_function_name (unreserved_keyword double))) ( ))",
        "description": "Approximate floating-point number converted from an SQL/JSON number or a string",
        "detail": "[DESCRIPTION]: Approximate floating-point number converted from an SQL/JSON number or a string<sep>[EXAMPLE]: <sep>[RESULT]: 3.8<sep>[EXAMPLE QUERY]: $.len.double() * 2<sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            "$.len.double() * 2"
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-json.html"
        ]
    },
    {
        "type": "function",
        "keyword": "ceiling()",
        "tree": "(func_application (func_name (builtin_function_name ceiling)) ( ))",
        "description": "Nearest integer greater than or equal to the SQL/JSON number",
        "detail": "[DESCRIPTION]: Nearest integer greater than or equal to the SQL/JSON number<sep>[EXAMPLE]: <sep>[RESULT]: 2<sep>[EXAMPLE QUERY]: $.h.ceiling()<sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            "$.h.ceiling()"
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-json.html"
        ]
    },
    {
        "type": "function",
        "keyword": "floor()",
        "tree": "(func_application (func_name (builtin_function_name floor)) ( ))",
        "description": "Nearest integer less than or equal to the SQL/JSON number",
        "detail": "[DESCRIPTION]: Nearest integer less than or equal to the SQL/JSON number<sep>[EXAMPLE]: <sep>[RESULT]: 1<sep>[EXAMPLE QUERY]: $.h.floor()<sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            "$.h.floor()"
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-json.html"
        ]
    },
    {
        "type": "function",
        "keyword": "abs()",
        "tree": "(func_application (func_name (builtin_function_name abs)) ( ))",
        "description": "Absolute value of the SQL/JSON number",
        "detail": "[DESCRIPTION]: Absolute value of the SQL/JSON number<sep>[EXAMPLE]: <sep>[RESULT]: 0.3<sep>[EXAMPLE QUERY]: $.z.abs()<sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            "$.z.abs()"
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-json.html"
        ]
    },
    {
        "type": "function",
        "keyword": "keyvalue()",
        "tree": "(func_application (func_name (type_function_name (identifier keyvalue))) ( ))",
        "description": "Sequence of object's key-value pairs represented as array of items containing three fields (\"key\", \"value\", and \"id\"). \"id\" is a unique identifier of the object key-value pair belongs to.",
        "detail": "[DESCRIPTION]: Sequence of object's key-value pairs represented as array of items containing three fields (\"key\", \"value\", and \"id\"). \"id\" is a unique identifier of the object key-value pair belongs to.<sep>[EXAMPLE]: <sep>[RESULT]: {\"key\": \"x\", \"value\": \"20\", \"id\": 0}, {\"key\": \"y\", \"value\": 32, \"id\": 0}<sep>[EXAMPLE QUERY]: $.keyvalue()<sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            "$.keyvalue()"
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-json.html"
        ]
    },
    {
        "type": "function",
        "keyword": "num_nonnulls(VARIADIC \"any\")",
        "tree": "(func_application (func_name (type_function_name (identifier num_nonnulls))) ( ))",
        "description": "returns the number of non-null arguments",
        "detail": "[DESCRIPTION]: returns the number of non-null arguments<sep>[EXAMPLE]: num_nonnulls(1, NULL, 2)<sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: 2<sep>[COMPENSATE]: ",
        "example": [
            "num_nonnulls(1, NULL, 2)",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-comparison.html"
        ]
    },
    {
        "type": "function",
        "keyword": "num_nulls(VARIADIC \"any\")",
        "tree": "(func_application (func_name (type_function_name (identifier num_nulls))) ( ))",
        "description": "returns the number of null arguments",
        "detail": "[DESCRIPTION]: returns the number of null arguments<sep>[EXAMPLE]: num_nulls(1, NULL, 2)<sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: 1<sep>[COMPENSATE]: ",
        "example": [
            "num_nulls(1, NULL, 2)",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-comparison.html"
        ]
    },
    {
        "type": "function",
        "keyword": "enum_first(anyenum)",
        "tree": "(func_application (func_name (type_function_name (identifier enum_first))) ( ))",
        "description": "Returns the first value of the input enum type",
        "detail": "[DESCRIPTION]: Returns the first value of the input enum type<sep>[EXAMPLE]: enum_first(null::rainbow)<sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: red<sep>[COMPENSATE]: ",
        "example": [
            "enum_first(null::rainbow)",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-enum.html"
        ]
    },
    {
        "type": "function",
        "keyword": "enum_last(anyenum)",
        "tree": "(func_application (func_name (type_function_name (identifier enum_last))) ( ))",
        "description": "Returns the last value of the input enum type",
        "detail": "[DESCRIPTION]: Returns the last value of the input enum type<sep>[EXAMPLE]: enum_last(null::rainbow)<sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: purple<sep>[COMPENSATE]: ",
        "example": [
            "enum_last(null::rainbow)",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-enum.html"
        ]
    },
    {
        "type": "function",
        "keyword": "enum_range(anyenum)",
        "tree": "(func_application (func_name (type_function_name (identifier enum_range))) ( ))",
        "description": "Returns all values of the input enum type in an ordered array",
        "detail": "[DESCRIPTION]: Returns all values of the input enum type in an ordered array<sep>[EXAMPLE]: enum_range(null::rainbow)<sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: {red,orange,yellow,green,blue,purple}<sep>[COMPENSATE]: ",
        "example": [
            "enum_range(null::rainbow)",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-enum.html"
        ]
    },
    {
        "type": "function",
        "keyword": "enum_range(anyenum, anyenum)",
        "tree": "(func_application (func_name (type_function_name (identifier enum_range))) ( ))",
        "description": "Returns the range between the two given enum values, as an ordered array. The values must be from the same enum type. If the first parameter is null, the result will start with the first value of the enum type. If the second parameter is null, the result will end with the last value of the enum type.",
        "detail": "[DESCRIPTION]: Returns the range between the two given enum values, as an ordered array. The values must be from the same enum type. If the first parameter is null, the result will start with the first value of the enum type. If the second parameter is null, the result will end with the last value of the enum type.<sep>[EXAMPLE]: enum_range('orange'::rainbow, 'green'::rainbow)<sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: {orange,yellow,green}<sep>[COMPENSATE]: ",
        "example": [
            "enum_range('orange'::rainbow, 'green'::rainbow)",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-enum.html"
        ]
    },
    {
        "type": "function",
        "keyword": "enum_range(NULL, 'green'::rainbow)",
        "tree": "(func_application (func_name (type_function_name (identifier enum_range))) ( ))",
        "description": "{red,orange,yellow,green}",
        "detail": "[DESCRIPTION]: {red,orange,yellow,green}<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-enum.html"
        ]
    },
    {
        "type": "function",
        "keyword": "enum_range('orange'::rainbow, NULL)",
        "tree": "(func_application (func_name (type_function_name (identifier enum_range))) ( ))",
        "description": "{orange,yellow,green,blue,purple}",
        "detail": "[DESCRIPTION]: {orange,yellow,green,blue,purple}<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-enum.html"
        ]
    },
    {
        "type": "function",
        "keyword": "array_to_tsvector(text[])",
        "tree": "(func_application (func_name (type_function_name (identifier array_to_tsvector))) ( ))",
        "description": "convert array of lexemes to tsvector",
        "detail": "[DESCRIPTION]: convert array of lexemes to tsvector<sep>[EXAMPLE]: array_to_tsvector('{fat,cat,rat}'::text[])<sep>[RESULT]: 'cat' 'fat' 'rat'<sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "array_to_tsvector('{fat,cat,rat}'::text[])",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-textsearch.html"
        ]
    },
    {
        "type": "function",
        "keyword": "get_current_ts_config()",
        "tree": "(func_application (func_name (type_function_name (identifier get_current_ts_config))) ( ))",
        "description": "get default text search configuration",
        "detail": "[DESCRIPTION]: get default text search configuration<sep>[EXAMPLE]: get_current_ts_config()<sep>[RESULT]: english<sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "get_current_ts_config()",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-textsearch.html"
        ]
    },
    {
        "type": "function",
        "keyword": "length(tsvector)",
        "tree": "(func_application (func_name (builtin_function_name length)) ( ))",
        "description": "number of lexemes in tsvector",
        "detail": "[DESCRIPTION]: number of lexemes in tsvector<sep>[EXAMPLE]: length('fat:2,4 cat:3 rat:5A'::tsvector)<sep>[RESULT]: 3<sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "length('fat:2,4 cat:3 rat:5A'::tsvector)",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-textsearch.html"
        ]
    },
    {
        "type": "function",
        "keyword": "numnode(tsquery)",
        "tree": "(func_application (func_name (type_function_name (identifier numnode))) ( ))",
        "description": "number of lexemes plus operators in tsquery",
        "detail": "[DESCRIPTION]: number of lexemes plus operators in tsquery<sep>[EXAMPLE]: numnode('(fat & rat) | cat'::tsquery)<sep>[RESULT]: 5<sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "numnode('(fat & rat) | cat'::tsquery)",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-textsearch.html"
        ]
    },
    {
        "type": "function",
        "keyword": "plainto_tsquery([ config regconfig , ] query text)",
        "tree": "(func_application (func_name (type_function_name (identifier plainto_tsquery))) ( ))",
        "description": "produce tsquery ignoring punctuation",
        "detail": "[DESCRIPTION]: produce tsquery ignoring punctuation<sep>[EXAMPLE]: plainto_tsquery('english', 'The Fat Rats')<sep>[RESULT]: 'fat' & 'rat'<sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "plainto_tsquery('english', 'The Fat Rats')",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-textsearch.html"
        ]
    },
    {
        "type": "function",
        "keyword": "phraseto_tsquery([ config regconfig , ] query text)",
        "tree": "(func_application (func_name (type_function_name (identifier phraseto_tsquery))) ( ))",
        "description": "produce tsquery that searches for a phrase, ignoring punctuation",
        "detail": "[DESCRIPTION]: produce tsquery that searches for a phrase, ignoring punctuation<sep>[EXAMPLE]: phraseto_tsquery('english', 'The Fat Rats')<sep>[RESULT]: 'fat' <-> 'rat'<sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "phraseto_tsquery('english', 'The Fat Rats')",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-textsearch.html"
        ]
    },
    {
        "type": "function",
        "keyword": "websearch_to_tsquery([ config regconfig , ] query text)",
        "tree": "(func_application (func_name (type_function_name (identifier websearch_to_tsquery))) ( ))",
        "description": "produce tsquery from a web search style query",
        "detail": "[DESCRIPTION]: produce tsquery from a web search style query<sep>[EXAMPLE]: websearch_to_tsquery('english', '\"fat rat\" or rat')<sep>[RESULT]: 'fat' <-> 'rat' | 'rat'<sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "websearch_to_tsquery('english', '\"fat rat\" or rat')",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-textsearch.html"
        ]
    },
    {
        "type": "function",
        "keyword": "querytree(query tsquery)",
        "tree": "(func_application (func_name (type_function_name (identifier querytree))) ( ))",
        "description": "get indexable part of a tsquery",
        "detail": "[DESCRIPTION]: get indexable part of a tsquery<sep>[EXAMPLE]: querytree('foo & ! bar'::tsquery)<sep>[RESULT]: 'foo'<sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "querytree('foo & ! bar'::tsquery)",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-textsearch.html"
        ]
    },
    {
        "type": "function",
        "keyword": "setweight(vector tsvector, weight \"char\")",
        "tree": "(func_application (func_name (type_function_name (identifier setweight))) ( ))",
        "description": "assign weight to each element of vector",
        "detail": "[DESCRIPTION]: assign weight to each element of vector<sep>[EXAMPLE]: setweight('fat:2,4 cat:3 rat:5B'::tsvector, 'A')<sep>[RESULT]: 'cat':3A 'fat':2A,4A 'rat':5A<sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "setweight('fat:2,4 cat:3 rat:5B'::tsvector, 'A')",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-textsearch.html"
        ]
    },
    {
        "type": "function",
        "keyword": "setweight(vector tsvector, weight \"char\", lexemes text[])",
        "tree": "(func_application (func_name (type_function_name (identifier setweight))) ( ))",
        "description": "assign weight to elements of vector that are listed in lexemes",
        "detail": "[DESCRIPTION]: assign weight to elements of vector that are listed in lexemes<sep>[EXAMPLE]: setweight('fat:2,4 cat:3 rat:5B'::tsvector, 'A', '{cat,rat}')<sep>[RESULT]: 'cat':3A 'fat':2,4 'rat':5A<sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "setweight('fat:2,4 cat:3 rat:5B'::tsvector, 'A', '{cat,rat}')",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-textsearch.html"
        ]
    },
    {
        "type": "function",
        "keyword": "strip(tsvector)",
        "tree": "(func_application (func_name (type_function_name (unreserved_keyword strip))) ( ))",
        "description": "remove positions and weights from tsvector",
        "detail": "[DESCRIPTION]: remove positions and weights from tsvector<sep>[EXAMPLE]: strip('fat:2,4 cat:3 rat:5A'::tsvector)<sep>[RESULT]: 'cat' 'fat' 'rat'<sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "strip('fat:2,4 cat:3 rat:5A'::tsvector)",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-textsearch.html"
        ]
    },
    {
        "type": "function",
        "keyword": "to_tsquery([ config regconfig , ] query text)",
        "tree": "(func_application (func_name (type_function_name (identifier to_tsquery))) ( ))",
        "description": "normalize words and convert to tsquery",
        "detail": "[DESCRIPTION]: normalize words and convert to tsquery<sep>[EXAMPLE]: to_tsquery('english', 'The & Fat & Rats')<sep>[RESULT]: 'fat' & 'rat'<sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "to_tsquery('english', 'The & Fat & Rats')",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-textsearch.html"
        ]
    },
    {
        "type": "function",
        "keyword": "to_tsvector([ config regconfig , ] document text)",
        "tree": "(func_application (func_name (type_function_name (identifier to_tsvector))) ( ))",
        "description": "reduce document text to tsvector",
        "detail": "[DESCRIPTION]: reduce document text to tsvector<sep>[EXAMPLE]: to_tsvector('english', 'The Fat Rats')<sep>[RESULT]: 'fat':2 'rat':3<sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "to_tsvector('english', 'The Fat Rats')",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-textsearch.html"
        ]
    },
    {
        "type": "function",
        "keyword": "to_tsvector([ config regconfig , ] document json(b))",
        "tree": "(func_application (func_name (type_function_name (identifier to_tsvector))) ( ))",
        "description": "reduce each string value in the document to a tsvector, and then concatenate those in document order to produce a single tsvector",
        "detail": "[DESCRIPTION]: reduce each string value in the document to a tsvector, and then concatenate those in document order to produce a single tsvector<sep>[EXAMPLE]: to_tsvector('english', '{\"a\": \"The Fat Rats\"}'::json)<sep>[RESULT]: 'fat':2 'rat':3<sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "to_tsvector('english', '{\"a\": \"The Fat Rats\"}'::json)",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-textsearch.html"
        ]
    },
    {
        "type": "function",
        "keyword": "json_to_tsvector([config regconfig,]document json,filter json)",
        "tree": "(func_application (func_name (type_function_name (identifier json_to_tsvector))) ( ))",
        "description": "reduce each value in the document, specified by filter to a tsvector, and then concatenate those in document order to produce a single tsvector. filter is a jsonb array, that enumerates what kind of elements need to be included into the resulting tsvector. Possible values for filter are \"string\" (to include all string values), \"numeric\" (to include all numeric values in the string format), \"boolean\" (to include all Boolean values in the string format \"true\"/\"false\"), \"key\" (to include all keys) or \"all\" (to include all above). These values can be combined together to include, e.g., all string and numeric values.",
        "detail": "[DESCRIPTION]: reduce each value in the document, specified by filter to a tsvector, and then concatenate those in document order to produce a single tsvector. filter is a jsonb array, that enumerates what kind of elements need to be included into the resulting tsvector. Possible values for filter are \"string\" (to include all string values), \"numeric\" (to include all numeric values in the string format), \"boolean\" (to include all Boolean values in the string format \"true\"/\"false\"), \"key\" (to include all keys) or \"all\" (to include all above). These values can be combined together to include, e.g., all string and numeric values.<sep>[EXAMPLE]: json_to_tsvector('english', '{\"a\": \"The Fat Rats\", \"b\": 123}'::json, '[\"string\", \"numeric\"]')<sep>[RESULT]: '123':5 'fat':2 'rat':3<sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "json_to_tsvector('english', '{\"a\": \"The Fat Rats\", \"b\": 123}'::json, '[\"string\", \"numeric\"]')",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-textsearch.html"
        ]
    },
    {
        "type": "function",
        "keyword": "jsonb_to_tsvector([config regconfig,]document jsonb,filter jsonb)",
        "tree": "(func_application (func_name (type_function_name (identifier jsonb_to_tsvector))) ( ))",
        "description": "reduce each value in the document, specified by filter to a tsvector, and then concatenate those in document order to produce a single tsvector. filter is a jsonb array, that enumerates what kind of elements need to be included into the resulting tsvector. Possible values for filter are \"string\" (to include all string values), \"numeric\" (to include all numeric values in the string format), \"boolean\" (to include all Boolean values in the string format \"true\"/\"false\"), \"key\" (to include all keys) or \"all\" (to include all above). These values can be combined together to include, e.g., all string and numeric values.",
        "detail": "[DESCRIPTION]: reduce each value in the document, specified by filter to a tsvector, and then concatenate those in document order to produce a single tsvector. filter is a jsonb array, that enumerates what kind of elements need to be included into the resulting tsvector. Possible values for filter are \"string\" (to include all string values), \"numeric\" (to include all numeric values in the string format), \"boolean\" (to include all Boolean values in the string format \"true\"/\"false\"), \"key\" (to include all keys) or \"all\" (to include all above). These values can be combined together to include, e.g., all string and numeric values.<sep>[EXAMPLE]: json_to_tsvector('english', '{\"a\": \"The Fat Rats\", \"b\": 123}'::json, '[\"string\", \"numeric\"]')<sep>[RESULT]: '123':5 'fat':2 'rat':3<sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "json_to_tsvector('english', '{\"a\": \"The Fat Rats\", \"b\": 123}'::json, '[\"string\", \"numeric\"]')",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-textsearch.html"
        ]
    },
    {
        "type": "function",
        "keyword": "ts_delete(vector tsvector, lexeme text)",
        "tree": "(func_application (func_name (type_function_name (identifier ts_delete))) ( ))",
        "description": "remove given lexeme from vector",
        "detail": "[DESCRIPTION]: remove given lexeme from vector<sep>[EXAMPLE]: ts_delete('fat:2,4 cat:3 rat:5A'::tsvector, 'fat')<sep>[RESULT]: 'cat':3 'rat':5A<sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "ts_delete('fat:2,4 cat:3 rat:5A'::tsvector, 'fat')",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-textsearch.html"
        ]
    },
    {
        "type": "function",
        "keyword": "ts_delete(vector tsvector, lexemes text[])",
        "tree": "(func_application (func_name (type_function_name (identifier ts_delete))) ( ))",
        "description": "remove any occurrence of lexemes in lexemes from vector",
        "detail": "[DESCRIPTION]: remove any occurrence of lexemes in lexemes from vector<sep>[EXAMPLE]: ts_delete('fat:2,4 cat:3 rat:5A'::tsvector, ARRAY['fat','rat'])<sep>[RESULT]: 'cat':3<sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "ts_delete('fat:2,4 cat:3 rat:5A'::tsvector, ARRAY['fat','rat'])",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-textsearch.html"
        ]
    },
    {
        "type": "function",
        "keyword": "ts_filter(vector tsvector, weights \"char\"[])",
        "tree": "(func_application (func_name (type_function_name (identifier ts_filter))) ( ))",
        "description": "select only elements with given weights from vector",
        "detail": "[DESCRIPTION]: select only elements with given weights from vector<sep>[EXAMPLE]: ts_filter('fat:2,4 cat:3b rat:5A'::tsvector, '{a,b}')<sep>[RESULT]: 'cat':3B 'rat':5A<sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "ts_filter('fat:2,4 cat:3b rat:5A'::tsvector, '{a,b}')",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-textsearch.html"
        ]
    },
    {
        "type": "function",
        "keyword": "ts_headline([ config regconfig, ] document text, query tsquery [, options text ])",
        "tree": "(func_application (func_name (type_function_name (identifier ts_headline))) ( ))",
        "description": "display a query match",
        "detail": "[DESCRIPTION]: display a query match<sep>[EXAMPLE]: ts_headline('x y z', 'z'::tsquery)<sep>[RESULT]: x y <b>z</b><sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "ts_headline('x y z', 'z'::tsquery)",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-textsearch.html"
        ]
    },
    {
        "type": "function",
        "keyword": "ts_headline([ config regconfig, ] document json(b), query tsquery [, options text ])",
        "tree": "(func_application (func_name (type_function_name (identifier ts_headline))) ( ))",
        "description": "display a query match",
        "detail": "[DESCRIPTION]: display a query match<sep>[EXAMPLE]: ts_headline('{\"a\":\"x y z\"}'::json, 'z'::tsquery)<sep>[RESULT]: {\"a\":\"x y <b>z</b>\"}<sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "ts_headline('{\"a\":\"x y z\"}'::json, 'z'::tsquery)",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-textsearch.html"
        ]
    },
    {
        "type": "function",
        "keyword": "ts_rank([ weights float4[], ] vector tsvector, query tsquery [, normalization integer ])",
        "tree": "(func_application (func_name (type_function_name (identifier ts_rank))) ( ))",
        "description": "rank document for query",
        "detail": "[DESCRIPTION]: rank document for query<sep>[EXAMPLE]: ts_rank(textsearch, query)<sep>[RESULT]: 0.818<sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "ts_rank(textsearch, query)",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-textsearch.html"
        ]
    },
    {
        "type": "function",
        "keyword": "ts_rank_cd([ weights float4[], ] vector tsvector, query tsquery [, normalization integer ])",
        "tree": "(func_application (func_name (type_function_name (identifier ts_rank_cd))) ( ))",
        "description": "rank document for query using cover density",
        "detail": "[DESCRIPTION]: rank document for query using cover density<sep>[EXAMPLE]: ts_rank_cd('{0.1, 0.2, 0.4, 1.0}', textsearch, query)<sep>[RESULT]: 2.01317<sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "ts_rank_cd('{0.1, 0.2, 0.4, 1.0}', textsearch, query)",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-textsearch.html"
        ]
    },
    {
        "type": "function",
        "keyword": "ts_rewrite(query tsquery, target tsquery, substitute tsquery)",
        "tree": "(func_application (func_name (type_function_name (identifier ts_rewrite))) ( ))",
        "description": "replace target with substitute within query",
        "detail": "[DESCRIPTION]: replace target with substitute within query<sep>[EXAMPLE]: ts_rewrite('a & b'::tsquery, 'a'::tsquery, 'foo|bar'::tsquery)<sep>[RESULT]: 'b' & ( 'foo' | 'bar' )<sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "ts_rewrite('a & b'::tsquery, 'a'::tsquery, 'foo|bar'::tsquery)",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-textsearch.html"
        ]
    },
    {
        "type": "function",
        "keyword": "ts_rewrite(query tsquery, select text)",
        "tree": "(func_application (func_name (type_function_name (identifier ts_rewrite))) ( ))",
        "description": "replace using targets and substitutes from a SELECT command",
        "detail": "[DESCRIPTION]: replace using targets and substitutes from a SELECT command<sep>[EXAMPLE]: SELECT ts_rewrite('a & b'::tsquery, 'SELECT t,s FROM aliases')<sep>[RESULT]: 'b' & ( 'foo' | 'bar' )<sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "SELECT ts_rewrite('a & b'::tsquery, 'SELECT t,s FROM aliases')",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-textsearch.html"
        ]
    },
    {
        "type": "function",
        "keyword": "tsquery_phrase(query1 tsquery, query2 tsquery)",
        "tree": "(func_application (func_name (type_function_name (identifier tsquery_phrase))) ( ))",
        "description": "make query that searches for query1 followed by query2 (same as <-> operator)",
        "detail": "[DESCRIPTION]: make query that searches for query1 followed by query2 (same as <-> operator)<sep>[EXAMPLE]: tsquery_phrase(to_tsquery('fat'), to_tsquery('cat'))<sep>[RESULT]: 'fat' <-> 'cat'<sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "tsquery_phrase(to_tsquery('fat'), to_tsquery('cat'))",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-textsearch.html"
        ]
    },
    {
        "type": "function",
        "keyword": "tsquery_phrase(query1 tsquery, query2 tsquery, distance integer)",
        "tree": "(func_application (func_name (type_function_name (identifier tsquery_phrase))) ( ))",
        "description": "make query that searches for query1 followed by query2 at distance distance",
        "detail": "[DESCRIPTION]: make query that searches for query1 followed by query2 at distance distance<sep>[EXAMPLE]: tsquery_phrase(to_tsquery('fat'), to_tsquery('cat'), 10)<sep>[RESULT]: 'fat' <10> 'cat'<sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "tsquery_phrase(to_tsquery('fat'), to_tsquery('cat'), 10)",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-textsearch.html"
        ]
    },
    {
        "type": "function",
        "keyword": "tsvector_to_array(tsvector)",
        "tree": "(func_application (func_name (type_function_name (identifier tsvector_to_array))) ( ))",
        "description": "convert tsvector to array of lexemes",
        "detail": "[DESCRIPTION]: convert tsvector to array of lexemes<sep>[EXAMPLE]: tsvector_to_array('fat:2,4 cat:3 rat:5A'::tsvector)<sep>[RESULT]: {cat,fat,rat}<sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "tsvector_to_array('fat:2,4 cat:3 rat:5A'::tsvector)",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-textsearch.html"
        ]
    },
    {
        "type": "function",
        "keyword": "tsvector_update_trigger()",
        "tree": "(func_application (func_name (type_function_name (identifier tsvector_update_trigger))) ( ))",
        "description": "trigger function for automatic tsvector column update",
        "detail": "[DESCRIPTION]: trigger function for automatic tsvector column update<sep>[EXAMPLE]: CREATE TRIGGER ... tsvector_update_trigger(tsvcol, 'pg_catalog.swedish', title, body)<sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "CREATE TRIGGER ... tsvector_update_trigger(tsvcol, 'pg_catalog.swedish', title, body)",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-textsearch.html"
        ]
    },
    {
        "type": "function",
        "keyword": "tsvector_update_trigger_column()",
        "tree": "(func_application (func_name (type_function_name (identifier tsvector_update_trigger_column))) ( ))",
        "description": "trigger function for automatic tsvector column update",
        "detail": "[DESCRIPTION]: trigger function for automatic tsvector column update<sep>[EXAMPLE]: CREATE TRIGGER ... tsvector_update_trigger_column(tsvcol, configcol, title, body)<sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "CREATE TRIGGER ... tsvector_update_trigger_column(tsvcol, configcol, title, body)",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-textsearch.html"
        ]
    },
    {
        "type": "function",
        "keyword": "unnest(tsvector, OUT lexeme text, OUT positions smallint[], OUT weights text)",
        "tree": "(func_application (func_name (type_function_name (identifier unnest))) ( ))",
        "description": "expand a tsvector to a set of rows",
        "detail": "[DESCRIPTION]: expand a tsvector to a set of rows<sep>[EXAMPLE]: unnest('fat:2,4 cat:3 rat:5A'::tsvector)<sep>[RESULT]: (cat,{3},{D}) ...<sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "unnest('fat:2,4 cat:3 rat:5A'::tsvector)",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-textsearch.html"
        ]
    },
    {
        "type": "function",
        "keyword": "ts_debug([ config regconfig, ] document text, OUT alias text, OUT description text, OUT token text, OUT dictionaries regdictionary[], OUT dictionary regdictionary, OUT lexemes text[])",
        "tree": "(func_application (func_name (type_function_name (identifier ts_debug))) ( ))",
        "description": "test a configuration",
        "detail": "[DESCRIPTION]: test a configuration<sep>[EXAMPLE]: ts_debug('english', 'The Brightest supernovaes')<sep>[RESULT]: (asciiword,\"Word, all ASCII\",The,{english_stem},english_stem,{}) ...<sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "ts_debug('english', 'The Brightest supernovaes')",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-textsearch.html"
        ]
    },
    {
        "type": "function",
        "keyword": "ts_lexize(dict regdictionary, token text)",
        "tree": "(func_application (func_name (type_function_name (identifier ts_lexize))) ( ))",
        "description": "test a dictionary",
        "detail": "[DESCRIPTION]: test a dictionary<sep>[EXAMPLE]: ts_lexize('english_stem', 'stars')<sep>[RESULT]: {star}<sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "ts_lexize('english_stem', 'stars')",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-textsearch.html"
        ]
    },
    {
        "type": "function",
        "keyword": "ts_parse(parser_name text, document text, OUT tokid integer, OUT token text)",
        "tree": "(func_application (func_name (type_function_name (identifier ts_parse))) ( ))",
        "description": "test a parser",
        "detail": "[DESCRIPTION]: test a parser<sep>[EXAMPLE]: ts_parse('default', 'foo - bar')<sep>[RESULT]: (1,foo) ...<sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "ts_parse('default', 'foo - bar')",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-textsearch.html"
        ]
    },
    {
        "type": "function",
        "keyword": "ts_parse(parser_oid oid, document text, OUT tokid integer, OUT token text)",
        "tree": "(func_application (func_name (type_function_name (identifier ts_parse))) ( ))",
        "description": "test a parser",
        "detail": "[DESCRIPTION]: test a parser<sep>[EXAMPLE]: ts_parse(3722, 'foo - bar')<sep>[RESULT]: (1,foo) ...<sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "ts_parse(3722, 'foo - bar')",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-textsearch.html"
        ]
    },
    {
        "type": "function",
        "keyword": "ts_token_type(parser_name text, OUT tokid integer, OUT alias text, OUT description text)",
        "tree": "(func_application (func_name (type_function_name (identifier ts_token_type))) ( ))",
        "description": "get token types defined by parser",
        "detail": "[DESCRIPTION]: get token types defined by parser<sep>[EXAMPLE]: ts_token_type('default')<sep>[RESULT]: (1,asciiword,\"Word, all ASCII\") ...<sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "ts_token_type('default')",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-textsearch.html"
        ]
    },
    {
        "type": "function",
        "keyword": "ts_token_type(parser_oid oid, OUT tokid integer, OUT alias text, OUT description text)",
        "tree": "(func_application (func_name (type_function_name (identifier ts_token_type))) ( ))",
        "description": "get token types defined by parser",
        "detail": "[DESCRIPTION]: get token types defined by parser<sep>[EXAMPLE]: ts_token_type(3722)<sep>[RESULT]: (1,asciiword,\"Word, all ASCII\") ...<sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "ts_token_type(3722)",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-textsearch.html"
        ]
    },
    {
        "type": "function",
        "keyword": "ts_stat(sqlquery text, [ weights text, ] OUT word text, OUT ndoc integer, OUT nentry integer)",
        "tree": "(func_application (func_name (type_function_name (identifier ts_stat))) ( ))",
        "description": "get statistics of a tsvector column",
        "detail": "[DESCRIPTION]: get statistics of a tsvector column<sep>[EXAMPLE]: ts_stat('SELECT vector from apod')<sep>[RESULT]: (foo,10,15) ...<sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "ts_stat('SELECT vector from apod')",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-textsearch.html"
        ]
    },
    {
        "type": "function",
        "keyword": "lower(anyrange)",
        "tree": "(func_application (func_name (builtin_function_name lower)) ( ))",
        "description": "lower bound of range",
        "detail": "[DESCRIPTION]: lower bound of range<sep>[EXAMPLE]: lower(numrange(1.1,2.2))<sep>[RESULT]: 1.1<sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "lower(numrange(1.1,2.2))",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-range.html"
        ]
    },
    {
        "type": "function",
        "keyword": "upper(anyrange)",
        "tree": "(func_application (func_name (builtin_function_name upper)) ( ))",
        "description": "upper bound of range",
        "detail": "[DESCRIPTION]: upper bound of range<sep>[EXAMPLE]: upper(numrange(1.1,2.2))<sep>[RESULT]: 2.2<sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "upper(numrange(1.1,2.2))",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-range.html"
        ]
    },
    {
        "type": "function",
        "keyword": "isempty(anyrange)",
        "tree": "(func_application (func_name (type_function_name (identifier isempty))) ( ))",
        "description": "is the range empty?",
        "detail": "[DESCRIPTION]: is the range empty?<sep>[EXAMPLE]: isempty(numrange(1.1,2.2))<sep>[RESULT]: false<sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "isempty(numrange(1.1,2.2))",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-range.html"
        ]
    },
    {
        "type": "function",
        "keyword": "lower_inc(anyrange)",
        "tree": "(func_application (func_name (type_function_name (identifier lower_inc))) ( ))",
        "description": "is the lower bound inclusive?",
        "detail": "[DESCRIPTION]: is the lower bound inclusive?<sep>[EXAMPLE]: lower_inc(numrange(1.1,2.2))<sep>[RESULT]: true<sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "lower_inc(numrange(1.1,2.2))",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-range.html"
        ]
    },
    {
        "type": "function",
        "keyword": "upper_inc(anyrange)",
        "tree": "(func_application (func_name (type_function_name (identifier upper_inc))) ( ))",
        "description": "is the upper bound inclusive?",
        "detail": "[DESCRIPTION]: is the upper bound inclusive?<sep>[EXAMPLE]: upper_inc(numrange(1.1,2.2))<sep>[RESULT]: false<sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "upper_inc(numrange(1.1,2.2))",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-range.html"
        ]
    },
    {
        "type": "function",
        "keyword": "lower_inf(anyrange)",
        "tree": "(func_application (func_name (type_function_name (identifier lower_inf))) ( ))",
        "description": "is the lower bound infinite?",
        "detail": "[DESCRIPTION]: is the lower bound infinite?<sep>[EXAMPLE]: lower_inf('(,)'::daterange)<sep>[RESULT]: true<sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "lower_inf('(,)'::daterange)",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-range.html"
        ]
    },
    {
        "type": "function",
        "keyword": "upper_inf(anyrange)",
        "tree": "(func_application (func_name (type_function_name (identifier upper_inf))) ( ))",
        "description": "is the upper bound infinite?",
        "detail": "[DESCRIPTION]: is the upper bound infinite?<sep>[EXAMPLE]: upper_inf('(,)'::daterange)<sep>[RESULT]: true<sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "upper_inf('(,)'::daterange)",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-range.html"
        ]
    },
    {
        "type": "function",
        "keyword": "range_merge(anyrange, anyrange)",
        "tree": "(func_application (func_name (type_function_name (identifier range_merge))) ( ))",
        "description": "the smallest range which includes both of the given ranges",
        "detail": "[DESCRIPTION]: the smallest range which includes both of the given ranges<sep>[EXAMPLE]: range_merge('[1,2)'::int4range, '[3,4)'::int4range)<sep>[RESULT]: [1,4)<sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "range_merge('[1,2)'::int4range, '[3,4)'::int4range)",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-range.html"
        ]
    },
    {
        "type": "function",
        "keyword": "abbrev(inet)",
        "tree": "(func_application (func_name (type_function_name (identifier abbrev))) ( ))",
        "description": "abbreviated display format as text",
        "detail": "[DESCRIPTION]: abbreviated display format as text<sep>[EXAMPLE]: abbrev(inet '10.1.0.0/16')<sep>[RESULT]: 10.1.0.0/16<sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "abbrev(inet '10.1.0.0/16')",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-net.html"
        ]
    },
    {
        "type": "function",
        "keyword": "abbrev(cidr)",
        "tree": "(func_application (func_name (type_function_name (identifier abbrev))) ( ))",
        "description": "abbreviated display format as text",
        "detail": "[DESCRIPTION]: abbreviated display format as text<sep>[EXAMPLE]: abbrev(cidr '10.1.0.0/16')<sep>[RESULT]: 10.1/16<sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "abbrev(cidr '10.1.0.0/16')",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-net.html"
        ]
    },
    {
        "type": "function",
        "keyword": "broadcast(inet)",
        "tree": "(func_application (func_name (type_function_name (identifier broadcast))) ( ))",
        "description": "broadcast address for network",
        "detail": "[DESCRIPTION]: broadcast address for network<sep>[EXAMPLE]: broadcast('192.168.1.5/24')<sep>[RESULT]: 192.168.1.255/24<sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "broadcast('192.168.1.5/24')",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-net.html"
        ]
    },
    {
        "type": "function",
        "keyword": "family(inet)",
        "tree": "(func_application (func_name (type_function_name (unreserved_keyword family))) ( ))",
        "description": "extract family of address; 4 for IPv4, 6 for IPv6",
        "detail": "[DESCRIPTION]: extract family of address; 4 for IPv4, 6 for IPv6<sep>[EXAMPLE]: family('::1')<sep>[RESULT]: 6<sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "family('::1')",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-net.html"
        ]
    },
    {
        "type": "function",
        "keyword": "host(inet)",
        "tree": "(func_application (func_name (type_function_name (identifier host))) ( ))",
        "description": "extract IP address as text",
        "detail": "[DESCRIPTION]: extract IP address as text<sep>[EXAMPLE]: host('192.168.1.5/24')<sep>[RESULT]: 192.168.1.5<sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "host('192.168.1.5/24')",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-net.html"
        ]
    },
    {
        "type": "function",
        "keyword": "hostmask(inet)",
        "tree": "(func_application (func_name (type_function_name (identifier hostmask))) ( ))",
        "description": "construct host mask for network",
        "detail": "[DESCRIPTION]: construct host mask for network<sep>[EXAMPLE]: hostmask('192.168.23.20/30')<sep>[RESULT]: 0.0.0.3<sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "hostmask('192.168.23.20/30')",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-net.html"
        ]
    },
    {
        "type": "function",
        "keyword": "masklen(inet)",
        "tree": "(func_application (func_name (type_function_name (identifier masklen))) ( ))",
        "description": "extract netmask length",
        "detail": "[DESCRIPTION]: extract netmask length<sep>[EXAMPLE]: masklen('192.168.1.5/24')<sep>[RESULT]: 24<sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "masklen('192.168.1.5/24')",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-net.html"
        ]
    },
    {
        "type": "function",
        "keyword": "netmask(inet)",
        "tree": "(func_application (func_name (type_function_name (identifier netmask))) ( ))",
        "description": "construct netmask for network",
        "detail": "[DESCRIPTION]: construct netmask for network<sep>[EXAMPLE]: netmask('192.168.1.5/24')<sep>[RESULT]: 255.255.255.0<sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "netmask('192.168.1.5/24')",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-net.html"
        ]
    },
    {
        "type": "function",
        "keyword": "network(inet)",
        "tree": "(func_application (func_name (type_function_name (identifier network))) ( ))",
        "description": "extract network part of address",
        "detail": "[DESCRIPTION]: extract network part of address<sep>[EXAMPLE]: network('192.168.1.5/24')<sep>[RESULT]: 192.168.1.0/24<sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "network('192.168.1.5/24')",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-net.html"
        ]
    },
    {
        "type": "function",
        "keyword": "set_masklen(inet, int)",
        "tree": "(func_application (func_name (type_function_name (identifier set_masklen))) ( ))",
        "description": "set netmask length for inet value",
        "detail": "[DESCRIPTION]: set netmask length for inet value<sep>[EXAMPLE]: set_masklen('192.168.1.5/24', 16)<sep>[RESULT]: 192.168.1.5/16<sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "set_masklen('192.168.1.5/24', 16)",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-net.html"
        ]
    },
    {
        "type": "function",
        "keyword": "set_masklen(cidr, int)",
        "tree": "(func_application (func_name (type_function_name (identifier set_masklen))) ( ))",
        "description": "set netmask length for cidr value",
        "detail": "[DESCRIPTION]: set netmask length for cidr value<sep>[EXAMPLE]: set_masklen('192.168.1.0/24'::cidr, 16)<sep>[RESULT]: 192.168.0.0/16<sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "set_masklen('192.168.1.0/24'::cidr, 16)",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-net.html"
        ]
    },
    {
        "type": "function",
        "keyword": "text(inet)",
        "tree": "(func_application (func_name (type_function_name (unreserved_keyword text))) ( ))",
        "description": "extract IP address and netmask length as text",
        "detail": "[DESCRIPTION]: extract IP address and netmask length as text<sep>[EXAMPLE]: text(inet '192.168.1.5')<sep>[RESULT]: 192.168.1.5/32<sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "text(inet '192.168.1.5')",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-net.html"
        ]
    },
    {
        "type": "function",
        "keyword": "inet_same_family(inet, inet)",
        "tree": "(func_application (func_name (type_function_name (identifier inet_same_family))) ( ))",
        "description": "are the addresses from the same family?",
        "detail": "[DESCRIPTION]: are the addresses from the same family?<sep>[EXAMPLE]: inet_same_family('192.168.1.5/24', '::1')<sep>[RESULT]: false<sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "inet_same_family('192.168.1.5/24', '::1')",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-net.html"
        ]
    },
    {
        "type": "function",
        "keyword": "inet_merge(inet, inet)",
        "tree": "(func_application (func_name (type_function_name (identifier inet_merge))) ( ))",
        "description": "the smallest network which includes both of the given networks",
        "detail": "[DESCRIPTION]: the smallest network which includes both of the given networks<sep>[EXAMPLE]: inet_merge('192.168.1.5/24', '192.168.2.5/24')<sep>[RESULT]: 192.168.0.0/22<sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "inet_merge('192.168.1.5/24', '192.168.2.5/24')",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-net.html"
        ]
    },
    {
        "type": "function",
        "keyword": "trunc(macaddr)",
        "tree": "(func_application (func_name (builtin_function_name trunc)) ( ))",
        "description": "set last 3 bytes to zero",
        "detail": "[DESCRIPTION]: set last 3 bytes to zero<sep>[EXAMPLE]: trunc(macaddr '12:34:56:78:90:ab')<sep>[RESULT]: 12:34:56:00:00:00<sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "trunc(macaddr '12:34:56:78:90:ab')",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-net.html"
        ]
    },
    {
        "type": "function",
        "keyword": "trunc(macaddr8)",
        "tree": "(func_application (func_name (builtin_function_name trunc)) ( ))",
        "description": "set last 5 bytes to zero",
        "detail": "[DESCRIPTION]: set last 5 bytes to zero<sep>[EXAMPLE]: trunc(macaddr8 '12:34:56:78:90:ab:cd:ef')<sep>[RESULT]: 12:34:56:00:00:00:00:00<sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "trunc(macaddr8 '12:34:56:78:90:ab:cd:ef')",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-net.html"
        ]
    },
    {
        "type": "function",
        "keyword": "macaddr8_set7bit(macaddr8)",
        "tree": "(func_application (func_name (type_function_name (identifier macaddr8_set7bit))) ( ))",
        "description": "set 7th bit to one, also known as modified EUI-64, for inclusion in an IPv6 address",
        "detail": "[DESCRIPTION]: set 7th bit to one, also known as modified EUI-64, for inclusion in an IPv6 address<sep>[EXAMPLE]: macaddr8_set7bit(macaddr8 '00:34:56:ab:cd:ef')<sep>[RESULT]: 02:34:56:ff:fe:ab:cd:ef<sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "macaddr8_set7bit(macaddr8 '00:34:56:ab:cd:ef')",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-net.html"
        ]
    },
    {
        "type": "function",
        "keyword": "bit_length(string)",
        "tree": "(func_application (func_name (builtin_function_name bit_length)) ( ))",
        "description": "Number of bits in string",
        "detail": "[DESCRIPTION]: Number of bits in string<sep>[EXAMPLE]: bit_length('jose')<sep>[RESULT]: 32<sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "bit_length('jose')",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-string.html"
        ]
    },
    {
        "type": "function",
        "keyword": "char_length(string)",
        "tree": "(func_application (func_name (builtin_function_name char_length)) ( ))",
        "description": "Number of characters in string",
        "detail": "[DESCRIPTION]: Number of characters in string<sep>[EXAMPLE]: char_length('jose')<sep>[RESULT]: 4<sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "char_length('jose')",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-string.html"
        ]
    },
    {
        "type": "function",
        "keyword": "character_length(string)",
        "tree": "(func_application (func_name (builtin_function_name character_length)) ( ))",
        "description": "Number of characters in string",
        "detail": "[DESCRIPTION]: Number of characters in string<sep>[EXAMPLE]: char_length('jose')<sep>[RESULT]: 4<sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "char_length('jose')",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-string.html"
        ]
    },
    {
        "type": "function",
        "keyword": "lower(string)",
        "tree": "(func_application (func_name (builtin_function_name lower)) ( ))",
        "description": "Convert string to lower case",
        "detail": "[DESCRIPTION]: Convert string to lower case<sep>[EXAMPLE]: lower('TOM')<sep>[RESULT]: tom<sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "lower('TOM')",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-string.html"
        ]
    },
    {
        "type": "function",
        "keyword": "substring(string [from int] [for int])",
        "tree": "(func_expr_common_subexpr substring ( ))",
        "description": "Extract substring",
        "detail": "[DESCRIPTION]: Extract substring<sep>[EXAMPLE]: substring('Thomas' from 2 for 3)<sep>[RESULT]: hom<sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "substring('Thomas' from 2 for 3)",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-string.html"
        ]
    },
    {
        "type": "function",
        "keyword": "substring(string from pattern)",
        "tree": "(func_expr_common_subexpr substring ( ))",
        "description": "Extract substring matching POSIX regular expression. See Section\u00a09.7 for more information on pattern matching.",
        "detail": "[DESCRIPTION]: Extract substring matching POSIX regular expression. See Section\u00a09.7 for more information on pattern matching.<sep>[EXAMPLE]: substring('Thomas' from '...$')<sep>[RESULT]: mas<sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "substring('Thomas' from '...$')",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-string.html"
        ]
    },
    {
        "type": "function",
        "keyword": "substring(string from pattern for escape)",
        "tree": "(func_expr_common_subexpr substring ( ))",
        "description": "Extract substring matching SQL regular expression. See Section\u00a09.7 for more information on pattern matching.",
        "detail": "[DESCRIPTION]: Extract substring matching SQL regular expression. See Section\u00a09.7 for more information on pattern matching.<sep>[EXAMPLE]: substring('Thomas' from '%#\"o_a#\"_' for '#')<sep>[RESULT]: oma<sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "substring('Thomas' from '%#\"o_a#\"_' for '#')",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-string.html"
        ]
    },
    {
        "type": "function",
        "keyword": "trim([leading | trailing | both] [characters] from string)",
        "tree": "(func_expr_common_subexpr trim ( ))",
        "description": "Remove the longest string containing only characters from characters (a space by default) from the start, end, or both ends (both is the default) of string",
        "detail": "[DESCRIPTION]: Remove the longest string containing only characters from characters (a space by default) from the start, end, or both ends (both is the default) of string<sep>[EXAMPLE]: trim(both 'xyz' from 'yxTomxx')<sep>[RESULT]: Tom<sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "trim(both 'xyz' from 'yxTomxx')",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-string.html"
        ]
    },
    {
        "type": "function",
        "keyword": "trim([leading | trailing | both] [from] string [, characters] )",
        "tree": "(func_expr_common_subexpr trim ( ))",
        "description": "Non-standard syntax for trim()",
        "detail": "[DESCRIPTION]: Non-standard syntax for trim()<sep>[EXAMPLE]: trim(both from 'yxTomxx', 'xyz')<sep>[RESULT]: Tom<sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "trim(both from 'yxTomxx', 'xyz')",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-string.html"
        ]
    },
    {
        "type": "function",
        "keyword": "upper(string)",
        "tree": "(func_application (func_name (builtin_function_name upper)) ( ))",
        "description": "Convert string to upper case",
        "detail": "[DESCRIPTION]: Convert string to upper case<sep>[EXAMPLE]: upper('tom')<sep>[RESULT]: TOM<sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "upper('tom')",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-string.html"
        ]
    },
    {
        "type": "function",
        "keyword": "ascii(string)",
        "tree": "(func_application (func_name (builtin_function_name ascii)) ( ))",
        "description": "ASCII code of the first character of the argument. For UTF8 returns the Unicode code point of the character. For other multibyte encodings, the argument must be an ASCII character.",
        "detail": "[DESCRIPTION]: ASCII code of the first character of the argument. For UTF8 returns the Unicode code point of the character. For other multibyte encodings, the argument must be an ASCII character.<sep>[EXAMPLE]: ascii('x')<sep>[RESULT]: 120<sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "ascii('x')",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-string.html"
        ]
    },
    {
        "type": "function",
        "keyword": "btrim(string text [, characters text])",
        "tree": "(func_application (func_name (builtin_function_name btrim)) ( ))",
        "description": "Remove the longest string consisting only of characters in characters (a space by default) from the start and end of string",
        "detail": "[DESCRIPTION]: Remove the longest string consisting only of characters in characters (a space by default) from the start and end of string<sep>[EXAMPLE]: btrim('xyxtrimyyx', 'xyz')<sep>[RESULT]: trim<sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "btrim('xyxtrimyyx', 'xyz')",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-string.html"
        ]
    },
    {
        "type": "function",
        "keyword": "chr(int)",
        "tree": "(func_application (func_name (builtin_function_name chr)) ( ))",
        "description": "Character with the given code. For UTF8 the argument is treated as a Unicode code point. For other multibyte encodings the argument must designate an ASCII character. The NULL (0) character is not allowed because text data types cannot store such bytes.",
        "detail": "[DESCRIPTION]: Character with the given code. For UTF8 the argument is treated as a Unicode code point. For other multibyte encodings the argument must designate an ASCII character. The NULL (0) character is not allowed because text data types cannot store such bytes.<sep>[EXAMPLE]: chr(65)<sep>[RESULT]: A<sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "chr(65)",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-string.html"
        ]
    },
    {
        "type": "function",
        "keyword": "concat(str \"any\" [, str \"any\" [, ...] ])",
        "tree": "(func_application (func_name (builtin_function_name concat)) ( ))",
        "description": "Concatenate the text representations of all the arguments. NULL arguments are ignored.",
        "detail": "[DESCRIPTION]: Concatenate the text representations of all the arguments. NULL arguments are ignored.<sep>[EXAMPLE]: concat('abcde', 2, NULL, 22)<sep>[RESULT]: abcde222<sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "concat('abcde', 2, NULL, 22)",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-string.html"
        ]
    },
    {
        "type": "function",
        "keyword": "concat_ws(sep text, str \"any\" [, str \"any\" [, ...] ])",
        "tree": "(func_application (func_name (builtin_function_name concat_ws)) ( ))",
        "description": "Concatenate all but the first argument with separators. The first argument is used as the separator string. NULL arguments are ignored.",
        "detail": "[DESCRIPTION]: Concatenate all but the first argument with separators. The first argument is used as the separator string. NULL arguments are ignored.<sep>[EXAMPLE]: concat_ws(',', 'abcde', 2, NULL, 22)<sep>[RESULT]: abcde,2,22<sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "concat_ws(',', 'abcde', 2, NULL, 22)",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-string.html"
        ]
    },
    {
        "type": "function",
        "keyword": "convert(string bytea, src_encoding name, dest_encoding name)",
        "tree": "(func_application (func_name (type_function_name (identifier convert))) ( ))",
        "description": "Convert string to dest_encoding. The original encoding is specified by src_encoding. The string must be valid in this encoding. Conversions can be defined by CREATE CONVERSION. Also there are some predefined conversions. See Table\u00a09.11 for available conversions.",
        "detail": "[DESCRIPTION]: Convert string to dest_encoding. The original encoding is specified by src_encoding. The string must be valid in this encoding. Conversions can be defined by CREATE CONVERSION. Also there are some predefined conversions. See Table\u00a09.11 for available conversions.<sep>[EXAMPLE]: convert('text_in_utf8', 'UTF8', 'LATIN1')<sep>[RESULT]: text_in_utf8 represented in Latin-1 encoding (ISO 8859-1)<sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "convert('text_in_utf8', 'UTF8', 'LATIN1')",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-string.html"
        ]
    },
    {
        "type": "function",
        "keyword": "convert_from(string bytea, src_encoding name)",
        "tree": "(func_application (func_name (type_function_name (identifier convert_from))) ( ))",
        "description": "Convert string to the database encoding. The original encoding is specified by src_encoding. The string must be valid in this encoding.",
        "detail": "[DESCRIPTION]: Convert string to the database encoding. The original encoding is specified by src_encoding. The string must be valid in this encoding.<sep>[EXAMPLE]: convert_from('text_in_utf8', 'UTF8')<sep>[RESULT]: text_in_utf8 represented in the current database encoding<sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "convert_from('text_in_utf8', 'UTF8')",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-string.html"
        ]
    },
    {
        "type": "function",
        "keyword": "convert_to(string text, dest_encoding name)",
        "tree": "(func_application (func_name (type_function_name (identifier convert_to))) ( ))",
        "description": "Convert string to dest_encoding.",
        "detail": "[DESCRIPTION]: Convert string to dest_encoding.<sep>[EXAMPLE]: convert_to('some text', 'UTF8')<sep>[RESULT]: some text represented in the UTF8 encoding<sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "convert_to('some text', 'UTF8')",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-string.html"
        ]
    },
    {
        "type": "function",
        "keyword": "format(formatstr text [, formatarg \"any\" [, ...] ])",
        "tree": "(func_application (func_name (builtin_function_name format)) ( ))",
        "description": "Format arguments according to a format string. This function is similar to the C function sprintf. See Section\u00a09.4.1.",
        "detail": "[DESCRIPTION]: Format arguments according to a format string. This function is similar to the C function sprintf. See Section\u00a09.4.1.<sep>[EXAMPLE]: format('Hello %s, %1$s', 'World')<sep>[RESULT]: Hello World, World<sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "format('Hello %s, %1$s', 'World')",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-string.html"
        ]
    },
    {
        "type": "function",
        "keyword": "initcap(string)",
        "tree": "(func_application (func_name (builtin_function_name initcap)) ( ))",
        "description": "Convert the first letter of each word to upper case and the rest to lower case. Words are sequences of alphanumeric characters separated by non-alphanumeric characters.",
        "detail": "[DESCRIPTION]: Convert the first letter of each word to upper case and the rest to lower case. Words are sequences of alphanumeric characters separated by non-alphanumeric characters.<sep>[EXAMPLE]: initcap('hi THOMAS')<sep>[RESULT]: Hi Thomas<sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "initcap('hi THOMAS')",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-string.html"
        ]
    },
    {
        "type": "function",
        "keyword": "left(str text, n int)",
        "tree": "(func_application (func_name left) ( ))",
        "description": "Return first n characters in the string. When n is negative, return all but last |n| characters.",
        "detail": "[DESCRIPTION]: Return first n characters in the string. When n is negative, return all but last |n| characters.<sep>[EXAMPLE]: left('abcde', 2)<sep>[RESULT]: ab<sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "left('abcde', 2)",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-string.html"
        ]
    },
    {
        "type": "function",
        "keyword": "length(string)",
        "tree": "(func_application (func_name (builtin_function_name length)) ( ))",
        "description": "Number of characters in string",
        "detail": "[DESCRIPTION]: Number of characters in string<sep>[EXAMPLE]: length('jose')<sep>[RESULT]: 4<sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "length('jose')",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-string.html"
        ]
    },
    {
        "type": "function",
        "keyword": "length(string bytea, encoding name )",
        "tree": "(func_application (func_name (builtin_function_name length)) ( ))",
        "description": "Number of characters in string in the given encoding. The string must be valid in this encoding.",
        "detail": "[DESCRIPTION]: Number of characters in string in the given encoding. The string must be valid in this encoding.<sep>[EXAMPLE]: length('jose', 'UTF8')<sep>[RESULT]: 4<sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "length('jose', 'UTF8')",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-string.html"
        ]
    },
    {
        "type": "function",
        "keyword": "lpad(string text, length int [, fill text])",
        "tree": "(func_application (func_name (builtin_function_name lpad)) ( ))",
        "description": "Fill up the string to length length by prepending the characters fill (a space by default). If the string is already longer than length then it is truncated (on the right).",
        "detail": "[DESCRIPTION]: Fill up the string to length length by prepending the characters fill (a space by default). If the string is already longer than length then it is truncated (on the right).<sep>[EXAMPLE]: lpad('hi', 5, 'xy')<sep>[RESULT]: xyxhi<sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "lpad('hi', 5, 'xy')",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-string.html"
        ]
    },
    {
        "type": "function",
        "keyword": "ltrim(string text [, characters text])",
        "tree": "(func_application (func_name (builtin_function_name ltrim)) ( ))",
        "description": "Remove the longest string containing only characters from characters (a space by default) from the start of string",
        "detail": "[DESCRIPTION]: Remove the longest string containing only characters from characters (a space by default) from the start of string<sep>[EXAMPLE]: ltrim('zzzytest', 'xyz')<sep>[RESULT]: test<sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "ltrim('zzzytest', 'xyz')",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-string.html"
        ]
    },
    {
        "type": "function",
        "keyword": "md5(string)",
        "tree": "(func_application (func_name (builtin_function_name md5)) ( ))",
        "description": "Calculates the MD5 hash of string, returning the result in hexadecimal",
        "detail": "[DESCRIPTION]: Calculates the MD5 hash of string, returning the result in hexadecimal<sep>[EXAMPLE]: md5('abc')<sep>[RESULT]: 900150983cd24fb0 d6963f7d28e17f72<sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "md5('abc')",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-string.html"
        ]
    },
    {
        "type": "function",
        "keyword": "parse_ident(qualified_identifier text [, strictmode boolean DEFAULT true ] )",
        "tree": "(func_application (func_name (builtin_function_name parse_ident)) ( ))",
        "description": "Split qualified_identifier into an array of identifiers, removing any quoting of individual identifiers. By default, extra characters after the last identifier are considered an error; but if the second parameter is false, then such extra characters are ignored. (This behavior is useful for parsing names for objects like functions.) Note that this function does not truncate over-length identifiers. If you want truncation you can cast the result to name[].",
        "detail": "[DESCRIPTION]: Split qualified_identifier into an array of identifiers, removing any quoting of individual identifiers. By default, extra characters after the last identifier are considered an error; but if the second parameter is false, then such extra characters are ignored. (This behavior is useful for parsing names for objects like functions.) Note that this function does not truncate over-length identifiers. If you want truncation you can cast the result to name[].<sep>[EXAMPLE]: parse_ident('\"SomeSchema\".someTable')<sep>[RESULT]: {SomeSchema,sometable}<sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "parse_ident('\"SomeSchema\".someTable')",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-string.html"
        ]
    },
    {
        "type": "function",
        "keyword": "pg_client_encoding()",
        "tree": "(func_application (func_name (builtin_function_name pg_client_encoding)) ( ))",
        "description": "Current client encoding name",
        "detail": "[DESCRIPTION]: Current client encoding name<sep>[EXAMPLE]: pg_client_encoding()<sep>[RESULT]: SQL_ASCII<sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "pg_client_encoding()",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-string.html"
        ]
    },
    {
        "type": "function",
        "keyword": "quote_ident(string text)",
        "tree": "(func_application (func_name (builtin_function_name quote_ident)) ( ))",
        "description": "Return the given string suitably quoted to be used as an identifier in an SQL statement string. Quotes are added only if necessary (i.e., if the string contains non-identifier characters or would be case-folded). Embedded quotes are properly doubled. See also Example\u00a042.1.",
        "detail": "[DESCRIPTION]: Return the given string suitably quoted to be used as an identifier in an SQL statement string. Quotes are added only if necessary (i.e., if the string contains non-identifier characters or would be case-folded). Embedded quotes are properly doubled. See also Example\u00a042.1.<sep>[EXAMPLE]: quote_ident('Foo bar')<sep>[RESULT]: \"Foo bar\"<sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "quote_ident('Foo bar')",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-string.html"
        ]
    },
    {
        "type": "function",
        "keyword": "quote_literal(string text)",
        "tree": "(func_application (func_name (builtin_function_name quote_literal)) ( ))",
        "description": "Return the given string suitably quoted to be used as a string literal in an SQL statement string. Embedded single-quotes and backslashes are properly doubled. Note that quote_literal returns null on null input; if the argument might be null, quote_nullable is often more suitable. See also Example\u00a042.1.",
        "detail": "[DESCRIPTION]: Return the given string suitably quoted to be used as a string literal in an SQL statement string. Embedded single-quotes and backslashes are properly doubled. Note that quote_literal returns null on null input; if the argument might be null, quote_nullable is often more suitable. See also Example\u00a042.1.<sep>[EXAMPLE]: quote_literal(E'O\\'Reilly')<sep>[RESULT]: 'O''Reilly'<sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "quote_literal(E'O\\'Reilly')",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-string.html"
        ]
    },
    {
        "type": "function",
        "keyword": "quote_literal(value anyelement)",
        "tree": "(func_application (func_name (builtin_function_name quote_literal)) ( ))",
        "description": "Coerce the given value to text and then quote it as a literal. Embedded single-quotes and backslashes are properly doubled.",
        "detail": "[DESCRIPTION]: Coerce the given value to text and then quote it as a literal. Embedded single-quotes and backslashes are properly doubled.<sep>[EXAMPLE]: quote_literal(42.5)<sep>[RESULT]: '42.5'<sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "quote_literal(42.5)",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-string.html"
        ]
    },
    {
        "type": "function",
        "keyword": "quote_nullable(string text)",
        "tree": "(func_application (func_name (builtin_function_name quote_nullable)) ( ))",
        "description": "Return the given string suitably quoted to be used as a string literal in an SQL statement string; or, if the argument is null, return NULL. Embedded single-quotes and backslashes are properly doubled. See also Example\u00a042.1.",
        "detail": "[DESCRIPTION]: Return the given string suitably quoted to be used as a string literal in an SQL statement string; or, if the argument is null, return NULL. Embedded single-quotes and backslashes are properly doubled. See also Example\u00a042.1.<sep>[EXAMPLE]: quote_nullable(NULL)<sep>[RESULT]: NULL<sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "quote_nullable(NULL)",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-string.html"
        ]
    },
    {
        "type": "function",
        "keyword": "quote_nullable(value anyelement)",
        "tree": "(func_application (func_name (builtin_function_name quote_nullable)) ( ))",
        "description": "Coerce the given value to text and then quote it as a literal; or, if the argument is null, return NULL. Embedded single-quotes and backslashes are properly doubled.",
        "detail": "[DESCRIPTION]: Coerce the given value to text and then quote it as a literal; or, if the argument is null, return NULL. Embedded single-quotes and backslashes are properly doubled.<sep>[EXAMPLE]: quote_nullable(42.5)<sep>[RESULT]: '42.5'<sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "quote_nullable(42.5)",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-string.html"
        ]
    },
    {
        "type": "function",
        "keyword": "regexp_match(string text, pattern text [, flags text])",
        "tree": "(func_application (func_name (builtin_function_name regexp_match)) ( ))",
        "description": "Return captured substring(s) resulting from the first match of a POSIX regular expression to the string. See Section\u00a09.7.3 for more information.",
        "detail": "[DESCRIPTION]: Return captured substring(s) resulting from the first match of a POSIX regular expression to the string. See Section\u00a09.7.3 for more information.<sep>[EXAMPLE]: regexp_match('foobarbequebaz', '(bar)(beque)')<sep>[RESULT]: {bar,beque}<sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "regexp_match('foobarbequebaz', '(bar)(beque)')",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-string.html"
        ]
    },
    {
        "type": "function",
        "keyword": "regexp_matches(string text, pattern text [, flags text])",
        "tree": "(func_application (func_name (builtin_function_name regexp_matches)) ( ))",
        "description": "Return captured substring(s) resulting from matching a POSIX regular expression to the string. See Section\u00a09.7.3 for more information.",
        "detail": "[DESCRIPTION]: Return captured substring(s) resulting from matching a POSIX regular expression to the string. See Section\u00a09.7.3 for more information.<sep>[EXAMPLE]: regexp_matches('foobarbequebaz', 'ba.', 'g')<sep>[RESULT]: {bar}\n{baz}(2 rows)<sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "regexp_matches('foobarbequebaz', 'ba.', 'g')",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-string.html"
        ]
    },
    {
        "type": "function",
        "keyword": "regexp_replace(string text, pattern text, replacement text [, flags text])",
        "tree": "(func_application (func_name (builtin_function_name regexp_replace)) ( ))",
        "description": "Replace substring(s) matching a POSIX regular expression. See Section\u00a09.7.3 for more information.",
        "detail": "[DESCRIPTION]: Replace substring(s) matching a POSIX regular expression. See Section\u00a09.7.3 for more information.<sep>[EXAMPLE]: regexp_replace('Thomas', '.[mN]a.', 'M')<sep>[RESULT]: ThM<sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "regexp_replace('Thomas', '.[mN]a.', 'M')",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-string.html"
        ]
    },
    {
        "type": "function",
        "keyword": "regexp_split_to_array(string text, pattern text [, flags text ])",
        "tree": "(func_application (func_name (builtin_function_name regexp_split_to_array)) ( ))",
        "description": "Split string using a POSIX regular expression as the delimiter. See Section\u00a09.7.3 for more information.",
        "detail": "[DESCRIPTION]: Split string using a POSIX regular expression as the delimiter. See Section\u00a09.7.3 for more information.<sep>[EXAMPLE]: regexp_split_to_array('hello world', '\\s+')<sep>[RESULT]: {hello,world}<sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "regexp_split_to_array('hello world', '\\s+')",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-string.html"
        ]
    },
    {
        "type": "function",
        "keyword": "regexp_split_to_table(string text, pattern text [, flags text])",
        "tree": "(func_application (func_name (builtin_function_name regexp_split_to_table)) ( ))",
        "description": "Split string using a POSIX regular expression as the delimiter. See Section\u00a09.7.3 for more information.",
        "detail": "[DESCRIPTION]: Split string using a POSIX regular expression as the delimiter. See Section\u00a09.7.3 for more information.<sep>[EXAMPLE]: regexp_split_to_table('hello world', '\\s+')<sep>[RESULT]: hello\nworld(2 rows)<sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "regexp_split_to_table('hello world', '\\s+')",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-string.html"
        ]
    },
    {
        "type": "function",
        "keyword": "repeat(string text, number int)",
        "tree": "(func_application (func_name (builtin_function_name repeat)) ( ))",
        "description": "Repeat string the specified number of times",
        "detail": "[DESCRIPTION]: Repeat string the specified number of times<sep>[EXAMPLE]: repeat('Pg', 4)<sep>[RESULT]: PgPgPgPg<sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "repeat('Pg', 4)",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-string.html"
        ]
    },
    {
        "type": "function",
        "keyword": "replace(string text, from text, to text)",
        "tree": "(func_application (func_name (builtin_function_name replace)) ( ))",
        "description": "Replace all occurrences in string of substring from with substring to",
        "detail": "[DESCRIPTION]: Replace all occurrences in string of substring from with substring to<sep>[EXAMPLE]: replace('abcdefabcdef', 'cd', 'XX')<sep>[RESULT]: abXXefabXXef<sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "replace('abcdefabcdef', 'cd', 'XX')",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-string.html"
        ]
    },
    {
        "type": "function",
        "keyword": "reverse(str)",
        "tree": "(func_application (func_name (builtin_function_name reverse)) ( ))",
        "description": "Return reversed string.",
        "detail": "[DESCRIPTION]: Return reversed string.<sep>[EXAMPLE]: reverse('abcde')<sep>[RESULT]: edcba<sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "reverse('abcde')",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-string.html"
        ]
    },
    {
        "type": "function",
        "keyword": "right(str text, n int)",
        "tree": "(func_application (func_name right) ( ))",
        "description": "Return last n characters in the string. When n is negative, return all but first |n| characters.",
        "detail": "[DESCRIPTION]: Return last n characters in the string. When n is negative, return all but first |n| characters.<sep>[EXAMPLE]: right('abcde', 2)<sep>[RESULT]: de<sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "right('abcde', 2)",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-string.html"
        ]
    },
    {
        "type": "function",
        "keyword": "rpad(string text, length int [, fill text])",
        "tree": "(func_application (func_name (builtin_function_name rpad)) ( ))",
        "description": "Fill up the string to length length by appending the characters fill (a space by default). If the string is already longer than length then it is truncated.",
        "detail": "[DESCRIPTION]: Fill up the string to length length by appending the characters fill (a space by default). If the string is already longer than length then it is truncated.<sep>[EXAMPLE]: rpad('hi', 5, 'xy')<sep>[RESULT]: hixyx<sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "rpad('hi', 5, 'xy')",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-string.html"
        ]
    },
    {
        "type": "function",
        "keyword": "rtrim(string text [, characters text])",
        "tree": "(func_application (func_name (builtin_function_name rtrim)) ( ))",
        "description": "Remove the longest string containing only characters from characters (a space by default) from the end of string",
        "detail": "[DESCRIPTION]: Remove the longest string containing only characters from characters (a space by default) from the end of string<sep>[EXAMPLE]: rtrim('testxxzx', 'xyz')<sep>[RESULT]: test<sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "rtrim('testxxzx', 'xyz')",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-string.html"
        ]
    },
    {
        "type": "function",
        "keyword": "split_part(string text, delimiter text, field int)",
        "tree": "(func_application (func_name (builtin_function_name split_part)) ( ))",
        "description": "Split string on delimiter and return the given field (counting from one)",
        "detail": "[DESCRIPTION]: Split string on delimiter and return the given field (counting from one)<sep>[EXAMPLE]: split_part('abc~@~def~@~ghi', '~@~', 2)<sep>[RESULT]: def<sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "split_part('abc~@~def~@~ghi', '~@~', 2)",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-string.html"
        ]
    },
    {
        "type": "function",
        "keyword": "strpos(string, substring)",
        "tree": "(func_application (func_name (builtin_function_name strpos)) ( ))",
        "description": "Location of specified substring (same as position(substring in string), but note the reversed argument order)",
        "detail": "[DESCRIPTION]: Location of specified substring (same as position(substring in string), but note the reversed argument order)<sep>[EXAMPLE]: strpos('high', 'ig')<sep>[RESULT]: 2<sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "strpos('high', 'ig')",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-string.html"
        ]
    },
    {
        "type": "function",
        "keyword": "substr(string, from [, count])",
        "tree": "(func_application (func_name (builtin_function_name substr)) ( ))",
        "description": "Extract substring (same as substring(string from from for count))",
        "detail": "[DESCRIPTION]: Extract substring (same as substring(string from from for count))<sep>[EXAMPLE]: substr('alphabet', 3, 2)<sep>[RESULT]: ph<sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "substr('alphabet', 3, 2)",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-string.html"
        ]
    },
    {
        "type": "function",
        "keyword": "starts_with(string, prefix)",
        "tree": "(func_application (func_name (builtin_function_name starts_with)) ( ))",
        "description": "Returns true if string starts with prefix.",
        "detail": "[DESCRIPTION]: Returns true if string starts with prefix.<sep>[EXAMPLE]: starts_with('alphabet', 'alph')<sep>[RESULT]: t<sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "starts_with('alphabet', 'alph')",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-string.html"
        ]
    },
    {
        "type": "function",
        "keyword": "to_ascii(string text [, encoding text])",
        "tree": "(func_application (func_name (builtin_function_name to_ascii)) ( ))",
        "description": "Convert string to ASCII from another encoding (only supports conversion from LATIN1, LATIN2, LATIN9, and WIN1250 encodings)",
        "detail": "[DESCRIPTION]: Convert string to ASCII from another encoding (only supports conversion from LATIN1, LATIN2, LATIN9, and WIN1250 encodings)<sep>[EXAMPLE]: to_ascii('Karel')<sep>[RESULT]: Karel<sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "to_ascii('Karel')",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-string.html"
        ]
    },
    {
        "type": "function",
        "keyword": "to_hex(number int or bigint)",
        "tree": "(func_application (func_name (builtin_function_name to_hex)) ( ))",
        "description": "Convert number to its equivalent hexadecimal representation",
        "detail": "[DESCRIPTION]: Convert number to its equivalent hexadecimal representation<sep>[EXAMPLE]: to_hex(2147483647)<sep>[RESULT]: 7fffffff<sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "to_hex(2147483647)",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-string.html"
        ]
    },
    {
        "type": "function",
        "keyword": "translate(string text, from text, to text)",
        "tree": "(func_application (func_name (builtin_function_name translate)) ( ))",
        "description": "Any character in string that matches a character in the from set is replaced by the corresponding character in the to set. If from is longer than to, occurrences of the extra characters in from are removed.",
        "detail": "[DESCRIPTION]: Any character in string that matches a character in the from set is replaced by the corresponding character in the to set. If from is longer than to, occurrences of the extra characters in from are removed.<sep>[EXAMPLE]: translate('12345', '143', 'ax')<sep>[RESULT]: a2x5<sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "translate('12345', '143', 'ax')",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-string.html"
        ]
    },
    {
        "type": "function",
        "keyword": "array_agg(expression)",
        "tree": "(func_application (func_name (type_function_name (identifier array_agg))) ( ))",
        "description": "input values, including nulls, concatenated into an array",
        "detail": "[DESCRIPTION]: input values, including nulls, concatenated into an array<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-aggregate.html"
        ]
    },
    {
        "type": "function",
        "keyword": "array_agg(expression)",
        "tree": "(func_application (func_name (type_function_name (identifier array_agg))) ( ))",
        "description": "input arrays concatenated into array of one higher dimension (inputs must all have same dimensionality, and cannot be empty or null)",
        "detail": "[DESCRIPTION]: input arrays concatenated into array of one higher dimension (inputs must all have same dimensionality, and cannot be empty or null)<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-aggregate.html"
        ]
    },
    {
        "type": "function",
        "keyword": "avg(expression)",
        "tree": "(func_application (func_name (type_function_name (identifier avg))) ( ))",
        "description": "the average (arithmetic mean) of all non-null input values",
        "detail": "[DESCRIPTION]: the average (arithmetic mean) of all non-null input values<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-aggregate.html"
        ]
    },
    {
        "type": "function",
        "keyword": "bit_and(expression)",
        "tree": "(func_application (func_name (type_function_name (identifier bit_and))) ( ))",
        "description": "the bitwise AND of all non-null input values, or null if none",
        "detail": "[DESCRIPTION]: the bitwise AND of all non-null input values, or null if none<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-aggregate.html"
        ]
    },
    {
        "type": "function",
        "keyword": "bit_or(expression)",
        "tree": "(func_application (func_name (type_function_name (identifier bit_or))) ( ))",
        "description": "the bitwise OR of all non-null input values, or null if none",
        "detail": "[DESCRIPTION]: the bitwise OR of all non-null input values, or null if none<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-aggregate.html"
        ]
    },
    {
        "type": "function",
        "keyword": "bool_and(expression)",
        "tree": "(func_application (func_name (type_function_name (identifier bool_and))) ( ))",
        "description": "true if all input values are true, otherwise false",
        "detail": "[DESCRIPTION]: true if all input values are true, otherwise false<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-aggregate.html"
        ]
    },
    {
        "type": "function",
        "keyword": "bool_or(expression)",
        "tree": "(func_application (func_name (type_function_name (identifier bool_or))) ( ))",
        "description": "true if at least one input value is true, otherwise false",
        "detail": "[DESCRIPTION]: true if at least one input value is true, otherwise false<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-aggregate.html"
        ]
    },
    {
        "type": "function",
        "keyword": "count(*)",
        "tree": "(func_application (func_name (type_function_name (identifier count))) ( ))",
        "description": "number of input rows",
        "detail": "[DESCRIPTION]: number of input rows<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-aggregate.html"
        ]
    },
    {
        "type": "function",
        "keyword": "count(expression)",
        "tree": "(func_application (func_name (type_function_name (identifier count))) ( ))",
        "description": "number of input rows for which the value of expression is not null",
        "detail": "[DESCRIPTION]: number of input rows for which the value of expression is not null<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-aggregate.html"
        ]
    },
    {
        "type": "function",
        "keyword": "every(expression)",
        "tree": "(func_application (func_name (type_function_name (identifier every))) ( ))",
        "description": "equivalent to bool_and",
        "detail": "[DESCRIPTION]: equivalent to bool_and<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-aggregate.html"
        ]
    },
    {
        "type": "function",
        "keyword": "json_agg(expression)",
        "tree": "(func_application (func_name (type_function_name (identifier json_agg))) ( ))",
        "description": "aggregates values, including nulls, as a JSON array",
        "detail": "[DESCRIPTION]: aggregates values, including nulls, as a JSON array<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-aggregate.html"
        ]
    },
    {
        "type": "function",
        "keyword": "jsonb_agg(expression)",
        "tree": "(func_application (func_name (type_function_name (identifier jsonb_agg))) ( ))",
        "description": "aggregates values, including nulls, as a JSON array",
        "detail": "[DESCRIPTION]: aggregates values, including nulls, as a JSON array<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-aggregate.html"
        ]
    },
    {
        "type": "function",
        "keyword": "json_object_agg(name, value)",
        "tree": "(func_application (func_name (type_function_name (identifier json_object_agg))) ( ))",
        "description": "aggregates name/value pairs as a JSON object; values can be null, but not names",
        "detail": "[DESCRIPTION]: aggregates name/value pairs as a JSON object; values can be null, but not names<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-aggregate.html"
        ]
    },
    {
        "type": "function",
        "keyword": "jsonb_object_agg(name, value)",
        "tree": "(func_application (func_name (type_function_name (identifier jsonb_object_agg))) ( ))",
        "description": "aggregates name/value pairs as a JSON object; values can be null, but not names",
        "detail": "[DESCRIPTION]: aggregates name/value pairs as a JSON object; values can be null, but not names<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-aggregate.html"
        ]
    },
    {
        "type": "function",
        "keyword": "max(expression)",
        "tree": "(func_application (func_name (type_function_name (identifier max))) ( ))",
        "description": "maximum value of expression across all non-null input values",
        "detail": "[DESCRIPTION]: maximum value of expression across all non-null input values<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-aggregate.html"
        ]
    },
    {
        "type": "function",
        "keyword": "min(expression)",
        "tree": "(func_application (func_name (type_function_name (identifier min))) ( ))",
        "description": "minimum value of expression across all non-null input values",
        "detail": "[DESCRIPTION]: minimum value of expression across all non-null input values<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-aggregate.html"
        ]
    },
    {
        "type": "function",
        "keyword": "string_agg(expression, delimiter)",
        "tree": "(func_application (func_name (type_function_name (identifier string_agg))) ( ))",
        "description": "non-null input values concatenated into a string, separated by delimiter",
        "detail": "[DESCRIPTION]: non-null input values concatenated into a string, separated by delimiter<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-aggregate.html"
        ]
    },
    {
        "type": "function",
        "keyword": "sum(expression)",
        "tree": "(func_application (func_name (type_function_name (identifier sum))) ( ))",
        "description": "sum of expression across all non-null input values",
        "detail": "[DESCRIPTION]: sum of expression across all non-null input values<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-aggregate.html"
        ]
    },
    {
        "type": "function",
        "keyword": "xmlagg(expression)",
        "tree": "(func_application (func_name (builtin_function_name xmlagg)) ( ))",
        "description": "concatenation of non-null XML values (see also Section\u00a09.14.1.7)",
        "detail": "[DESCRIPTION]: concatenation of non-null XML values (see also Section\u00a09.14.1.7)<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-aggregate.html"
        ]
    },
    {
        "type": "function",
        "keyword": "corr(Y, X)",
        "tree": "(func_application (func_name (type_function_name (identifier corr))) ( ))",
        "description": "correlation coefficient",
        "detail": "[DESCRIPTION]: correlation coefficient<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-aggregate.html"
        ]
    },
    {
        "type": "function",
        "keyword": "covar_pop(Y, X)",
        "tree": "(func_application (func_name (type_function_name (identifier covar_pop))) ( ))",
        "description": "population covariance",
        "detail": "[DESCRIPTION]: population covariance<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-aggregate.html"
        ]
    },
    {
        "type": "function",
        "keyword": "covar_samp(Y, X)",
        "tree": "(func_application (func_name (type_function_name (identifier covar_samp))) ( ))",
        "description": "sample covariance",
        "detail": "[DESCRIPTION]: sample covariance<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-aggregate.html"
        ]
    },
    {
        "type": "function",
        "keyword": "regr_avgx(Y, X)",
        "tree": "(func_application (func_name (type_function_name (identifier regr_avgx))) ( ))",
        "description": "average of the independent variable (sum(X)/N)",
        "detail": "[DESCRIPTION]: average of the independent variable (sum(X)/N)<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-aggregate.html"
        ]
    },
    {
        "type": "function",
        "keyword": "regr_avgy(Y, X)",
        "tree": "(func_application (func_name (type_function_name (identifier regr_avgy))) ( ))",
        "description": "average of the dependent variable (sum(Y)/N)",
        "detail": "[DESCRIPTION]: average of the dependent variable (sum(Y)/N)<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-aggregate.html"
        ]
    },
    {
        "type": "function",
        "keyword": "regr_count(Y, X)",
        "tree": "(func_application (func_name (type_function_name (identifier regr_count))) ( ))",
        "description": "number of input rows in which both expressions are nonnull",
        "detail": "[DESCRIPTION]: number of input rows in which both expressions are nonnull<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-aggregate.html"
        ]
    },
    {
        "type": "function",
        "keyword": "regr_intercept(Y, X)",
        "tree": "(func_application (func_name (type_function_name (identifier regr_intercept))) ( ))",
        "description": "y-intercept of the least-squares-fit linear equation determined by the (X, Y) pairs",
        "detail": "[DESCRIPTION]: y-intercept of the least-squares-fit linear equation determined by the (X, Y) pairs<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-aggregate.html"
        ]
    },
    {
        "type": "function",
        "keyword": "regr_r2(Y, X)",
        "tree": "(func_application (func_name (type_function_name (identifier regr_r2))) ( ))",
        "description": "square of the correlation coefficient",
        "detail": "[DESCRIPTION]: square of the correlation coefficient<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-aggregate.html"
        ]
    },
    {
        "type": "function",
        "keyword": "regr_slope(Y, X)",
        "tree": "(func_application (func_name (type_function_name (identifier regr_slope))) ( ))",
        "description": "slope of the least-squares-fit linear equation determined by the (X, Y) pairs",
        "detail": "[DESCRIPTION]: slope of the least-squares-fit linear equation determined by the (X, Y) pairs<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-aggregate.html"
        ]
    },
    {
        "type": "function",
        "keyword": "regr_sxx(Y, X)",
        "tree": "(func_application (func_name (type_function_name (identifier regr_sxx))) ( ))",
        "description": "sum(X^2) - sum(X)^2/N (\u201csum of squares\u201d of the independent variable)",
        "detail": "[DESCRIPTION]: sum(X^2) - sum(X)^2/N (\u201csum of squares\u201d of the independent variable)<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-aggregate.html"
        ]
    },
    {
        "type": "function",
        "keyword": "regr_sxy(Y, X)",
        "tree": "(func_application (func_name (type_function_name (identifier regr_sxy))) ( ))",
        "description": "sum(X*Y) - sum(X) * sum(Y)/N (\u201csum of products\u201d of independent times dependent variable)",
        "detail": "[DESCRIPTION]: sum(X*Y) - sum(X) * sum(Y)/N (\u201csum of products\u201d of independent times dependent variable)<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-aggregate.html"
        ]
    },
    {
        "type": "function",
        "keyword": "regr_syy(Y, X)",
        "tree": "(func_application (func_name (type_function_name (identifier regr_syy))) ( ))",
        "description": "sum(Y^2) - sum(Y)^2/N (\u201csum of squares\u201d of the dependent variable)",
        "detail": "[DESCRIPTION]: sum(Y^2) - sum(Y)^2/N (\u201csum of squares\u201d of the dependent variable)<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-aggregate.html"
        ]
    },
    {
        "type": "function",
        "keyword": "stddev(expression)",
        "tree": "(func_application (func_name (type_function_name (identifier stddev))) ( ))",
        "description": "historical alias for stddev_samp",
        "detail": "[DESCRIPTION]: historical alias for stddev_samp<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-aggregate.html"
        ]
    },
    {
        "type": "function",
        "keyword": "stddev_pop(expression)",
        "tree": "(func_application (func_name (type_function_name (identifier stddev_pop))) ( ))",
        "description": "population standard deviation of the input values",
        "detail": "[DESCRIPTION]: population standard deviation of the input values<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-aggregate.html"
        ]
    },
    {
        "type": "function",
        "keyword": "stddev_samp(expression)",
        "tree": "(func_application (func_name (type_function_name (identifier stddev_samp))) ( ))",
        "description": "sample standard deviation of the input values",
        "detail": "[DESCRIPTION]: sample standard deviation of the input values<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-aggregate.html"
        ]
    },
    {
        "type": "function",
        "keyword": "variance(expression)",
        "tree": "(func_application (func_name (type_function_name (identifier variance))) ( ))",
        "description": "historical alias for var_samp",
        "detail": "[DESCRIPTION]: historical alias for var_samp<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-aggregate.html"
        ]
    },
    {
        "type": "function",
        "keyword": "var_pop(expression)",
        "tree": "(func_application (func_name (type_function_name (identifier var_pop))) ( ))",
        "description": "population variance of the input values (square of the population standard deviation)",
        "detail": "[DESCRIPTION]: population variance of the input values (square of the population standard deviation)<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-aggregate.html"
        ]
    },
    {
        "type": "function",
        "keyword": "var_samp(expression)",
        "tree": "(func_application (func_name (type_function_name (identifier var_samp))) ( ))",
        "description": "sample variance of the input values (square of the sample standard deviation)",
        "detail": "[DESCRIPTION]: sample variance of the input values (square of the sample standard deviation)<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-aggregate.html"
        ]
    },
    {
        "type": "function",
        "keyword": "mode() WITHIN GROUP (ORDER BY sort_expression)",
        "tree": "(func_application (func_name (type_function_name (unreserved_keyword mode))) ( ))",
        "description": "returns the most frequent input value (arbitrarily choosing the first one if there are multiple equally-frequent results)",
        "detail": "[DESCRIPTION]: returns the most frequent input value (arbitrarily choosing the first one if there are multiple equally-frequent results)<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-aggregate.html"
        ]
    },
    {
        "type": "function",
        "keyword": "percentile_cont(fraction) WITHIN GROUP (ORDER BY sort_expression)",
        "tree": "(func_application (func_name (type_function_name (identifier percentile_cont))) ( ))",
        "description": "continuous percentile: returns a value corresponding to the specified fraction in the ordering, interpolating between adjacent input items if needed",
        "detail": "[DESCRIPTION]: continuous percentile: returns a value corresponding to the specified fraction in the ordering, interpolating between adjacent input items if needed<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-aggregate.html"
        ]
    },
    {
        "type": "function",
        "keyword": "percentile_cont(fractions) WITHIN GROUP (ORDER BY sort_expression)",
        "tree": "(func_application (func_name (type_function_name (identifier percentile_cont))) ( ))",
        "description": "multiple continuous percentile: returns an array of results matching the shape of the fractions parameter, with each non-null element replaced by the value corresponding to that percentile",
        "detail": "[DESCRIPTION]: multiple continuous percentile: returns an array of results matching the shape of the fractions parameter, with each non-null element replaced by the value corresponding to that percentile<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-aggregate.html"
        ]
    },
    {
        "type": "function",
        "keyword": "percentile_disc(fraction) WITHIN GROUP (ORDER BY sort_expression)",
        "tree": "(func_application (func_name (type_function_name (identifier percentile_disc))) ( ))",
        "description": "discrete percentile: returns the first input value whose position in the ordering equals or exceeds the specified fraction",
        "detail": "[DESCRIPTION]: discrete percentile: returns the first input value whose position in the ordering equals or exceeds the specified fraction<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-aggregate.html"
        ]
    },
    {
        "type": "function",
        "keyword": "percentile_disc(fractions) WITHIN GROUP (ORDER BY sort_expression)",
        "tree": "(func_application (func_name (type_function_name (identifier percentile_disc))) ( ))",
        "description": "multiple discrete percentile: returns an array of results matching the shape of the fractions parameter, with each non-null element replaced by the input value corresponding to that percentile",
        "detail": "[DESCRIPTION]: multiple discrete percentile: returns an array of results matching the shape of the fractions parameter, with each non-null element replaced by the input value corresponding to that percentile<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-aggregate.html"
        ]
    },
    {
        "type": "function",
        "keyword": "percent_rank(args) WITHIN GROUP (ORDER BY sorted_args)",
        "tree": "(func_application (func_name (type_function_name (identifier rank))) ( ))",
        "description": "relative rank of the hypothetical row, ranging from 0 to 1",
        "detail": "[DESCRIPTION]: relative rank of the hypothetical row, ranging from 0 to 1<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-aggregate.html"
        ]
    },
    {
        "type": "function",
        "keyword": "dense_rank(args) WITHIN GROUP (ORDER BY sorted_args)",
        "tree": "(func_application (func_name (type_function_name (identifier dense_rank))) ( ))",
        "description": "rank of the hypothetical row, without gaps",
        "detail": "[DESCRIPTION]: rank of the hypothetical row, without gaps<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-aggregate.html"
        ]
    },
    {
        "type": "function",
        "keyword": "percent_rank(args) WITHIN GROUP (ORDER BY sorted_args)",
        "tree": "(func_application (func_name (type_function_name (identifier percent_rank))) ( ))",
        "description": "relative rank of the hypothetical row, ranging from 0 to 1",
        "detail": "[DESCRIPTION]: relative rank of the hypothetical row, ranging from 0 to 1<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-aggregate.html"
        ]
    },
    {
        "type": "function",
        "keyword": "cume_dist(args) WITHIN GROUP (ORDER BY sorted_args)",
        "tree": "(func_application (func_name (type_function_name (identifier cume_dist))) ( ))",
        "description": "relative rank of the hypothetical row, ranging from 1/N to 1",
        "detail": "[DESCRIPTION]: relative rank of the hypothetical row, ranging from 1/N to 1<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-aggregate.html"
        ]
    },
    {
        "type": "function",
        "keyword": "current_catalog",
        "tree": "(func_expr_common_subexpr current_catalog)",
        "description": "name of current database (called \u201ccatalog\u201d in the SQL standard)",
        "detail": "[DESCRIPTION]: name of current database (called \u201ccatalog\u201d in the SQL standard)<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-info.html"
        ]
    },
    {
        "type": "function",
        "keyword": "current_database()",
        "tree": "(func_application (func_name (type_function_name (identifier current_database))) ( ))",
        "description": "name of current database",
        "detail": "[DESCRIPTION]: name of current database<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-info.html"
        ]
    },
    {
        "type": "function",
        "keyword": "current_query()",
        "tree": "(func_application (func_name (type_function_name (identifier current_query))) ( ))",
        "description": "text of the currently executing query, as submitted by the client (might contain more than one statement)",
        "detail": "[DESCRIPTION]: text of the currently executing query, as submitted by the client (might contain more than one statement)<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-info.html"
        ]
    },
    {
        "type": "function",
        "keyword": "current_role",
        "tree": "(func_expr_common_subexpr current_role)",
        "description": "equivalent to current_user",
        "detail": "[DESCRIPTION]: equivalent to current_user<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-info.html"
        ]
    },
    {
        "type": "function",
        "keyword": "current_schemas(boolean)",
        "tree": "(func_application (func_name (type_function_name (identifier current_schemas))) ( ))",
        "description": "names of schemas in search path, optionally including implicit schemas",
        "detail": "[DESCRIPTION]: names of schemas in search path, optionally including implicit schemas<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-info.html"
        ]
    },
    {
        "type": "function",
        "keyword": "current_user",
        "tree": "(func_expr_common_subexpr current_user)",
        "description": "user name of current execution context",
        "detail": "[DESCRIPTION]: user name of current execution context<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-info.html"
        ]
    },
    {
        "type": "function",
        "keyword": "inet_client_addr()",
        "tree": "(func_application (func_name (type_function_name (identifier inet_client_addr))) ( ))",
        "description": "address of the remote connection",
        "detail": "[DESCRIPTION]: address of the remote connection<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-info.html"
        ]
    },
    {
        "type": "function",
        "keyword": "inet_client_port()",
        "tree": "(func_application (func_name (type_function_name (identifier inet_client_port))) ( ))",
        "description": "port of the remote connection",
        "detail": "[DESCRIPTION]: port of the remote connection<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-info.html"
        ]
    },
    {
        "type": "function",
        "keyword": "inet_server_addr()",
        "tree": "(func_application (func_name (type_function_name (identifier inet_server_addr))) ( ))",
        "description": "address of the local connection",
        "detail": "[DESCRIPTION]: address of the local connection<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-info.html"
        ]
    },
    {
        "type": "function",
        "keyword": "inet_server_port()",
        "tree": "(func_application (func_name (type_function_name (identifier inet_server_port))) ( ))",
        "description": "port of the local connection",
        "detail": "[DESCRIPTION]: port of the local connection<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-info.html"
        ]
    },
    {
        "type": "function",
        "keyword": "pg_backend_pid()",
        "tree": "(func_application (func_name (type_function_name (identifier pg_backend_pid))) ( ))",
        "description": "Process ID of the server process attached to the current session",
        "detail": "[DESCRIPTION]: Process ID of the server process attached to the current session<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-info.html"
        ]
    },
    {
        "type": "function",
        "keyword": "pg_blocking_pids(int)",
        "tree": "(func_application (func_name (type_function_name (identifier pg_blocking_pids))) ( ))",
        "description": "Process ID(s) that are blocking specified server process ID from acquiring a lock",
        "detail": "[DESCRIPTION]: Process ID(s) that are blocking specified server process ID from acquiring a lock<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-info.html"
        ]
    },
    {
        "type": "function",
        "keyword": "pg_conf_load_time()",
        "tree": "(func_application (func_name (type_function_name (identifier pg_conf_load_time))) ( ))",
        "description": "configuration load time",
        "detail": "[DESCRIPTION]: configuration load time<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-info.html"
        ]
    },
    {
        "type": "function",
        "keyword": "pg_current_logfile([text])",
        "tree": "(func_application (func_name (type_function_name (identifier pg_current_logfile))) ( ))",
        "description": "Primary log file name, or log in the requested format, currently in use by the logging collector",
        "detail": "[DESCRIPTION]: Primary log file name, or log in the requested format, currently in use by the logging collector<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-info.html"
        ]
    },
    {
        "type": "function",
        "keyword": "pg_my_temp_schema()",
        "tree": "(func_application (func_name (type_function_name (identifier pg_my_temp_schema))) ( ))",
        "description": "OID of session's temporary schema, or 0 if none",
        "detail": "[DESCRIPTION]: OID of session's temporary schema, or 0 if none<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-info.html"
        ]
    },
    {
        "type": "function",
        "keyword": "pg_is_other_temp_schema(oid)",
        "tree": "(func_application (func_name (type_function_name (identifier pg_is_other_temp_schema))) ( ))",
        "description": "is schema another session's temporary schema?",
        "detail": "[DESCRIPTION]: is schema another session's temporary schema?<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-info.html"
        ]
    },
    {
        "type": "function",
        "keyword": "pg_jit_available()",
        "tree": "(func_application (func_name (type_function_name (identifier pg_jit_available))) ( ))",
        "description": "is a JIT compiler extension available (see Chapter\u00a031) and the jit configuration parameter set to on.",
        "detail": "[DESCRIPTION]: is a JIT compiler extension available (see Chapter\u00a031) and the jit configuration parameter set to on.<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-info.html"
        ]
    },
    {
        "type": "function",
        "keyword": "pg_listening_channels()",
        "tree": "(func_application (func_name (type_function_name (identifier pg_listening_channels))) ( ))",
        "description": "channel names that the session is currently listening on",
        "detail": "[DESCRIPTION]: channel names that the session is currently listening on<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-info.html"
        ]
    },
    {
        "type": "function",
        "keyword": "pg_notification_queue_usage()",
        "tree": "(func_application (func_name (type_function_name (identifier pg_notification_queue_usage))) ( ))",
        "description": "fraction of the asynchronous notification queue currently occupied (0-1)",
        "detail": "[DESCRIPTION]: fraction of the asynchronous notification queue currently occupied (0-1)<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-info.html"
        ]
    },
    {
        "type": "function",
        "keyword": "pg_postmaster_start_time()",
        "tree": "(func_application (func_name (type_function_name (identifier pg_postmaster_start_time))) ( ))",
        "description": "server start time",
        "detail": "[DESCRIPTION]: server start time<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-info.html"
        ]
    },
    {
        "type": "function",
        "keyword": "pg_safe_snapshot_blocking_pids(int)",
        "tree": "(func_application (func_name (type_function_name (identifier pg_safe_snapshot_blocking_pids))) ( ))",
        "description": "Process ID(s) that are blocking specified server process ID from acquiring a safe snapshot",
        "detail": "[DESCRIPTION]: Process ID(s) that are blocking specified server process ID from acquiring a safe snapshot<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-info.html"
        ]
    },
    {
        "type": "function",
        "keyword": "pg_trigger_depth()",
        "tree": "(func_application (func_name (type_function_name (identifier pg_trigger_depth))) ( ))",
        "description": "current nesting level of PostgreSQL triggers (0 if not called, directly or indirectly, from inside a trigger)",
        "detail": "[DESCRIPTION]: current nesting level of PostgreSQL triggers (0 if not called, directly or indirectly, from inside a trigger)<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-info.html"
        ]
    },
    {
        "type": "function",
        "keyword": "session_user",
        "tree": "(func_expr_common_subexpr session_user)",
        "description": "session user name",
        "detail": "[DESCRIPTION]: session user name<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-info.html"
        ]
    },
    {
        "type": "function",
        "keyword": "pg_get_userbyid(role_oid)",
        "tree": "(func_expr_common_subexpr user)",
        "description": "get role name with given OID",
        "detail": "[DESCRIPTION]: get role name with given OID<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-info.html"
        ]
    },
    {
        "type": "function",
        "keyword": "version()",
        "tree": "(func_application (func_name (type_function_name (unreserved_keyword version))) ( ))",
        "description": "PostgreSQL version information. See also server_version_num for a machine-readable version.",
        "detail": "[DESCRIPTION]: PostgreSQL version information. See also server_version_num for a machine-readable version.<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-info.html"
        ]
    },
    {
        "type": "function",
        "keyword": "has_any_column_privilege(user, table, privilege)",
        "tree": "(func_application (func_name (type_function_name (identifier has_any_column_privilege))) ( ))",
        "description": "does user have privilege for any column of table",
        "detail": "[DESCRIPTION]: does user have privilege for any column of table<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-info.html"
        ]
    },
    {
        "type": "function",
        "keyword": "has_any_column_privilege(table, privilege)",
        "tree": "(func_application (func_name (type_function_name (identifier has_any_column_privilege))) ( ))",
        "description": "does current user have privilege for any column of table",
        "detail": "[DESCRIPTION]: does current user have privilege for any column of table<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-info.html"
        ]
    },
    {
        "type": "function",
        "keyword": "has_column_privilege(user, table, column, privilege)",
        "tree": "(func_application (func_name (type_function_name (identifier has_column_privilege))) ( ))",
        "description": "does user have privilege for column",
        "detail": "[DESCRIPTION]: does user have privilege for column<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-info.html"
        ]
    },
    {
        "type": "function",
        "keyword": "has_column_privilege(table, column, privilege)",
        "tree": "(func_application (func_name (type_function_name (identifier has_column_privilege))) ( ))",
        "description": "does current user have privilege for column",
        "detail": "[DESCRIPTION]: does current user have privilege for column<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-info.html"
        ]
    },
    {
        "type": "function",
        "keyword": "has_database_privilege(user, database, privilege)",
        "tree": "(func_application (func_name (type_function_name (identifier has_database_privilege))) ( ))",
        "description": "does user have privilege for database",
        "detail": "[DESCRIPTION]: does user have privilege for database<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-info.html"
        ]
    },
    {
        "type": "function",
        "keyword": "has_database_privilege(database, privilege)",
        "tree": "(func_application (func_name (type_function_name (identifier has_database_privilege))) ( ))",
        "description": "does current user have privilege for database",
        "detail": "[DESCRIPTION]: does current user have privilege for database<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-info.html"
        ]
    },
    {
        "type": "function",
        "keyword": "has_foreign_data_wrapper_privilege(user, fdw, privilege)",
        "tree": "(func_application (func_name (type_function_name (identifier has_foreign_data_wrapper_privilege))) ( ))",
        "description": "does user have privilege for foreign-data wrapper",
        "detail": "[DESCRIPTION]: does user have privilege for foreign-data wrapper<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-info.html"
        ]
    },
    {
        "type": "function",
        "keyword": "has_foreign_data_wrapper_privilege(fdw, privilege)",
        "tree": "(func_application (func_name (type_function_name (identifier has_foreign_data_wrapper_privilege))) ( ))",
        "description": "does current user have privilege for foreign-data wrapper",
        "detail": "[DESCRIPTION]: does current user have privilege for foreign-data wrapper<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-info.html"
        ]
    },
    {
        "type": "function",
        "keyword": "has_function_privilege(user, function, privilege)",
        "tree": "(func_application (func_name (type_function_name (identifier has_function_privilege))) ( ))",
        "description": "does user have privilege for function",
        "detail": "[DESCRIPTION]: does user have privilege for function<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-info.html"
        ]
    },
    {
        "type": "function",
        "keyword": "has_function_privilege(function, privilege)",
        "tree": "(func_application (func_name (type_function_name (identifier has_function_privilege))) ( ))",
        "description": "does current user have privilege for function",
        "detail": "[DESCRIPTION]: does current user have privilege for function<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-info.html"
        ]
    },
    {
        "type": "function",
        "keyword": "has_language_privilege(user, language, privilege)",
        "tree": "(func_application (func_name (type_function_name (identifier has_language_privilege))) ( ))",
        "description": "does user have privilege for language",
        "detail": "[DESCRIPTION]: does user have privilege for language<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-info.html"
        ]
    },
    {
        "type": "function",
        "keyword": "has_language_privilege(language, privilege)",
        "tree": "(func_application (func_name (type_function_name (identifier has_language_privilege))) ( ))",
        "description": "does current user have privilege for language",
        "detail": "[DESCRIPTION]: does current user have privilege for language<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-info.html"
        ]
    },
    {
        "type": "function",
        "keyword": "has_schema_privilege(user, schema, privilege)",
        "tree": "(func_application (func_name (type_function_name (identifier has_schema_privilege))) ( ))",
        "description": "does user have privilege for schema",
        "detail": "[DESCRIPTION]: does user have privilege for schema<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-info.html"
        ]
    },
    {
        "type": "function",
        "keyword": "has_schema_privilege(schema, privilege)",
        "tree": "(func_application (func_name (type_function_name (identifier has_schema_privilege))) ( ))",
        "description": "does current user have privilege for schema",
        "detail": "[DESCRIPTION]: does current user have privilege for schema<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-info.html"
        ]
    },
    {
        "type": "function",
        "keyword": "has_sequence_privilege(user, sequence, privilege)",
        "tree": "(func_application (func_name (type_function_name (identifier has_sequence_privilege))) ( ))",
        "description": "does user have privilege for sequence",
        "detail": "[DESCRIPTION]: does user have privilege for sequence<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-info.html"
        ]
    },
    {
        "type": "function",
        "keyword": "has_sequence_privilege(sequence, privilege)",
        "tree": "(func_application (func_name (type_function_name (identifier has_sequence_privilege))) ( ))",
        "description": "does current user have privilege for sequence",
        "detail": "[DESCRIPTION]: does current user have privilege for sequence<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-info.html"
        ]
    },
    {
        "type": "function",
        "keyword": "has_server_privilege(user, server, privilege)",
        "tree": "(func_application (func_name (type_function_name (identifier has_server_privilege))) ( ))",
        "description": "does user have privilege for foreign server",
        "detail": "[DESCRIPTION]: does user have privilege for foreign server<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-info.html"
        ]
    },
    {
        "type": "function",
        "keyword": "has_server_privilege(server, privilege)",
        "tree": "(func_application (func_name (type_function_name (identifier has_server_privilege))) ( ))",
        "description": "does current user have privilege for foreign server",
        "detail": "[DESCRIPTION]: does current user have privilege for foreign server<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-info.html"
        ]
    },
    {
        "type": "function",
        "keyword": "has_table_privilege(user, table, privilege)",
        "tree": "(func_application (func_name (type_function_name (identifier has_table_privilege))) ( ))",
        "description": "does user have privilege for table",
        "detail": "[DESCRIPTION]: does user have privilege for table<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-info.html"
        ]
    },
    {
        "type": "function",
        "keyword": "has_table_privilege(table, privilege)",
        "tree": "(func_application (func_name (type_function_name (identifier has_table_privilege))) ( ))",
        "description": "does current user have privilege for table",
        "detail": "[DESCRIPTION]: does current user have privilege for table<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-info.html"
        ]
    },
    {
        "type": "function",
        "keyword": "has_tablespace_privilege(user, tablespace, privilege)",
        "tree": "(func_application (func_name (type_function_name (identifier has_tablespace_privilege))) ( ))",
        "description": "does user have privilege for tablespace",
        "detail": "[DESCRIPTION]: does user have privilege for tablespace<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-info.html"
        ]
    },
    {
        "type": "function",
        "keyword": "has_tablespace_privilege(tablespace, privilege)",
        "tree": "(func_application (func_name (type_function_name (identifier has_tablespace_privilege))) ( ))",
        "description": "does current user have privilege for tablespace",
        "detail": "[DESCRIPTION]: does current user have privilege for tablespace<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-info.html"
        ]
    },
    {
        "type": "function",
        "keyword": "has_type_privilege(user, type, privilege)",
        "tree": "(func_application (func_name (type_function_name (identifier has_type_privilege))) ( ))",
        "description": "does user have privilege for type",
        "detail": "[DESCRIPTION]: does user have privilege for type<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-info.html"
        ]
    },
    {
        "type": "function",
        "keyword": "has_type_privilege(type, privilege)",
        "tree": "(func_application (func_name (type_function_name (identifier has_type_privilege))) ( ))",
        "description": "does current user have privilege for type",
        "detail": "[DESCRIPTION]: does current user have privilege for type<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-info.html"
        ]
    },
    {
        "type": "function",
        "keyword": "pg_has_role(user, role, privilege)",
        "tree": "(func_application (func_name (type_function_name (identifier pg_has_role))) ( ))",
        "description": "does user have privilege for role",
        "detail": "[DESCRIPTION]: does user have privilege for role<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-info.html"
        ]
    },
    {
        "type": "function",
        "keyword": "pg_has_role(role, privilege)",
        "tree": "(func_application (func_name (type_function_name (identifier pg_has_role))) ( ))",
        "description": "does current user have privilege for role",
        "detail": "[DESCRIPTION]: does current user have privilege for role<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-info.html"
        ]
    },
    {
        "type": "function",
        "keyword": "row_security_active(table)",
        "tree": "(func_application (func_name (type_function_name (identifier row_security_active))) ( ))",
        "description": "does current user have row level security active for table",
        "detail": "[DESCRIPTION]: does current user have row level security active for table<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-info.html"
        ]
    },
    {
        "type": "function",
        "keyword": "acldefault(type, ownerId)",
        "tree": "(func_application (func_name (type_function_name (identifier acldefault))) ( ))",
        "description": "get the default access privileges for an object belonging to ownerId",
        "detail": "[DESCRIPTION]: get the default access privileges for an object belonging to ownerId<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-info.html"
        ]
    },
    {
        "type": "function",
        "keyword": "aclexplode(aclitem[])",
        "tree": "(func_application (func_name (type_function_name (identifier aclexplode))) ( ))",
        "description": "get aclitem array as tuples",
        "detail": "[DESCRIPTION]: get aclitem array as tuples<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-info.html"
        ]
    },
    {
        "type": "function",
        "keyword": "makeaclitem(grantee, grantor, privilege, grantable)",
        "tree": "(func_application (func_name (type_function_name (identifier makeaclitem))) ( ))",
        "description": "build an aclitem from input",
        "detail": "[DESCRIPTION]: build an aclitem from input<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-info.html"
        ]
    },
    {
        "type": "function",
        "keyword": "pg_collation_is_visible(collation_oid)",
        "tree": "(func_application (func_name (type_function_name (identifier pg_collation_is_visible))) ( ))",
        "description": "is collation visible in search path",
        "detail": "[DESCRIPTION]: is collation visible in search path<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-info.html"
        ]
    },
    {
        "type": "function",
        "keyword": "pg_conversion_is_visible(conversion_oid)",
        "tree": "(func_application (func_name (type_function_name (identifier pg_conversion_is_visible))) ( ))",
        "description": "is conversion visible in search path",
        "detail": "[DESCRIPTION]: is conversion visible in search path<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-info.html"
        ]
    },
    {
        "type": "function",
        "keyword": "pg_function_is_visible(function_oid)",
        "tree": "(func_application (func_name (type_function_name (identifier pg_function_is_visible))) ( ))",
        "description": "is function visible in search path",
        "detail": "[DESCRIPTION]: is function visible in search path<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-info.html"
        ]
    },
    {
        "type": "function",
        "keyword": "pg_opclass_is_visible(opclass_oid)",
        "tree": "(func_application (func_name (type_function_name (identifier pg_opclass_is_visible))) ( ))",
        "description": "is operator class visible in search path",
        "detail": "[DESCRIPTION]: is operator class visible in search path<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-info.html"
        ]
    },
    {
        "type": "function",
        "keyword": "pg_operator_is_visible(operator_oid)",
        "tree": "(func_application (func_name (type_function_name (identifier pg_operator_is_visible))) ( ))",
        "description": "is operator visible in search path",
        "detail": "[DESCRIPTION]: is operator visible in search path<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-info.html"
        ]
    },
    {
        "type": "function",
        "keyword": "pg_opfamily_is_visible(opclass_oid)",
        "tree": "(func_application (func_name (type_function_name (identifier pg_opfamily_is_visible))) ( ))",
        "description": "is operator family visible in search path",
        "detail": "[DESCRIPTION]: is operator family visible in search path<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-info.html"
        ]
    },
    {
        "type": "function",
        "keyword": "pg_statistics_obj_is_visible(stat_oid)",
        "tree": "(func_application (func_name (type_function_name (identifier pg_statistics_obj_is_visible))) ( ))",
        "description": "is statistics object visible in search path",
        "detail": "[DESCRIPTION]: is statistics object visible in search path<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-info.html"
        ]
    },
    {
        "type": "function",
        "keyword": "pg_table_is_visible(table_oid)",
        "tree": "(func_application (func_name (type_function_name (identifier pg_table_is_visible))) ( ))",
        "description": "is table visible in search path",
        "detail": "[DESCRIPTION]: is table visible in search path<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-info.html"
        ]
    },
    {
        "type": "function",
        "keyword": "pg_ts_config_is_visible(config_oid)",
        "tree": "(func_application (func_name (type_function_name (identifier pg_ts_config_is_visible))) ( ))",
        "description": "is text search configuration visible in search path",
        "detail": "[DESCRIPTION]: is text search configuration visible in search path<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-info.html"
        ]
    },
    {
        "type": "function",
        "keyword": "pg_ts_dict_is_visible(dict_oid)",
        "tree": "(func_application (func_name (type_function_name (identifier pg_ts_dict_is_visible))) ( ))",
        "description": "is text search dictionary visible in search path",
        "detail": "[DESCRIPTION]: is text search dictionary visible in search path<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-info.html"
        ]
    },
    {
        "type": "function",
        "keyword": "pg_ts_parser_is_visible(parser_oid)",
        "tree": "(func_application (func_name (type_function_name (identifier pg_ts_parser_is_visible))) ( ))",
        "description": "is text search parser visible in search path",
        "detail": "[DESCRIPTION]: is text search parser visible in search path<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-info.html"
        ]
    },
    {
        "type": "function",
        "keyword": "pg_ts_template_is_visible(template_oid)",
        "tree": "(func_application (func_name (type_function_name (identifier pg_ts_template_is_visible))) ( ))",
        "description": "is text search template visible in search path",
        "detail": "[DESCRIPTION]: is text search template visible in search path<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-info.html"
        ]
    },
    {
        "type": "function",
        "keyword": "pg_type_is_visible(type_oid)",
        "tree": "(func_application (func_name (type_function_name (identifier pg_type_is_visible))) ( ))",
        "description": "is type (or domain) visible in search path",
        "detail": "[DESCRIPTION]: is type (or domain) visible in search path<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-info.html"
        ]
    },
    {
        "type": "function",
        "keyword": "format_type(type_oid, typemod)",
        "tree": "(func_application (func_name (type_function_name (identifier format_type))) ( ))",
        "description": "get SQL name of a data type",
        "detail": "[DESCRIPTION]: get SQL name of a data type<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-info.html"
        ]
    },
    {
        "type": "function",
        "keyword": "pg_get_constraintdef(constraint_oid)",
        "tree": "(func_application (func_name (type_function_name (identifier pg_get_constraintdef))) ( ))",
        "description": "get definition of a constraint",
        "detail": "[DESCRIPTION]: get definition of a constraint<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-info.html"
        ]
    },
    {
        "type": "function",
        "keyword": "pg_get_constraintdef(constraint_oid, pretty_bool)",
        "tree": "(func_application (func_name (type_function_name (identifier pg_get_constraintdef))) ( ))",
        "description": "get definition of a constraint",
        "detail": "[DESCRIPTION]: get definition of a constraint<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-info.html"
        ]
    },
    {
        "type": "function",
        "keyword": "pg_get_expr(pg_node_tree, relation_oid)",
        "tree": "(func_application (func_name (type_function_name (identifier pg_get_expr))) ( ))",
        "description": "decompile internal form of an expression, assuming that any Vars in it refer to the relation indicated by the second parameter",
        "detail": "[DESCRIPTION]: decompile internal form of an expression, assuming that any Vars in it refer to the relation indicated by the second parameter<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-info.html"
        ]
    },
    {
        "type": "function",
        "keyword": "pg_get_expr(pg_node_tree, relation_oid, pretty_bool)",
        "tree": "(func_application (func_name (type_function_name (identifier pg_get_expr))) ( ))",
        "description": "decompile internal form of an expression, assuming that any Vars in it refer to the relation indicated by the second parameter",
        "detail": "[DESCRIPTION]: decompile internal form of an expression, assuming that any Vars in it refer to the relation indicated by the second parameter<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-info.html"
        ]
    },
    {
        "type": "function",
        "keyword": "pg_get_functiondef(func_oid)",
        "tree": "(func_application (func_name (type_function_name (identifier pg_get_functiondef))) ( ))",
        "description": "get definition of a function or procedure",
        "detail": "[DESCRIPTION]: get definition of a function or procedure<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-info.html"
        ]
    },
    {
        "type": "function",
        "keyword": "pg_get_function_arguments(func_oid)",
        "tree": "(func_application (func_name (type_function_name (identifier pg_get_function_arguments))) ( ))",
        "description": "get argument list of function's or procedure's definition (with default values)",
        "detail": "[DESCRIPTION]: get argument list of function's or procedure's definition (with default values)<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-info.html"
        ]
    },
    {
        "type": "function",
        "keyword": "pg_get_function_identity_arguments(func_oid)",
        "tree": "(func_application (func_name (type_function_name (identifier pg_get_function_identity_arguments))) ( ))",
        "description": "get argument list to identify a function or procedure (without default values)",
        "detail": "[DESCRIPTION]: get argument list to identify a function or procedure (without default values)<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-info.html"
        ]
    },
    {
        "type": "function",
        "keyword": "pg_get_function_result(func_oid)",
        "tree": "(func_application (func_name (type_function_name (identifier pg_get_function_result))) ( ))",
        "description": "get RETURNS clause for function (returns null for a procedure)",
        "detail": "[DESCRIPTION]: get RETURNS clause for function (returns null for a procedure)<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-info.html"
        ]
    },
    {
        "type": "function",
        "keyword": "pg_get_indexdef(index_oid)",
        "tree": "(func_application (func_name (type_function_name (identifier pg_get_indexdef))) ( ))",
        "description": "get CREATE INDEX command for index",
        "detail": "[DESCRIPTION]: get CREATE INDEX command for index<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-info.html"
        ]
    },
    {
        "type": "function",
        "keyword": "pg_get_indexdef(index_oid, column_no, pretty_bool)",
        "tree": "(func_application (func_name (type_function_name (identifier pg_get_indexdef))) ( ))",
        "description": "get CREATE INDEX command for index, or definition of just one index column when column_no is not zero",
        "detail": "[DESCRIPTION]: get CREATE INDEX command for index, or definition of just one index column when column_no is not zero<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-info.html"
        ]
    },
    {
        "type": "function",
        "keyword": "pg_get_keywords()",
        "tree": "(func_application (func_name (type_function_name (identifier pg_get_keywords))) ( ))",
        "description": "get list of SQL keywords and their categories",
        "detail": "[DESCRIPTION]: get list of SQL keywords and their categories<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-info.html"
        ]
    },
    {
        "type": "function",
        "keyword": "pg_get_ruledef(rule_oid)",
        "tree": "(func_application (func_name (type_function_name (identifier pg_get_ruledef))) ( ))",
        "description": "get CREATE RULE command for rule",
        "detail": "[DESCRIPTION]: get CREATE RULE command for rule<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-info.html"
        ]
    },
    {
        "type": "function",
        "keyword": "pg_get_ruledef(rule_oid, pretty_bool)",
        "tree": "(func_application (func_name (type_function_name (identifier pg_get_ruledef))) ( ))",
        "description": "get CREATE RULE command for rule",
        "detail": "[DESCRIPTION]: get CREATE RULE command for rule<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-info.html"
        ]
    },
    {
        "type": "function",
        "keyword": "pg_get_serial_sequence(table_name, column_name)",
        "tree": "(func_application (func_name (type_function_name (identifier pg_get_serial_sequence))) ( ))",
        "description": "get name of the sequence that a serial or identity column uses",
        "detail": "[DESCRIPTION]: get name of the sequence that a serial or identity column uses<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-info.html"
        ]
    },
    {
        "type": "function",
        "keyword": "pg_get_statisticsobjdef(statobj_oid)",
        "tree": "(func_application (func_name (type_function_name (identifier pg_get_statisticsobjdef))) ( ))",
        "description": "get CREATE STATISTICS command for extended statistics object",
        "detail": "[DESCRIPTION]: get CREATE STATISTICS command for extended statistics object<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-info.html"
        ]
    },
    {
        "type": "function",
        "keyword": "pg_get_triggerdef(trigger_oid)",
        "tree": "(func_application (func_name (type_function_name (identifier pg_get_triggerdef))) ( ))",
        "description": "get CREATE [ CONSTRAINT ] TRIGGER command for trigger",
        "detail": "[DESCRIPTION]: get CREATE [ CONSTRAINT ] TRIGGER command for trigger<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-info.html"
        ]
    },
    {
        "type": "function",
        "keyword": "pg_get_triggerdef(trigger_oid, pretty_bool)",
        "tree": "(func_application (func_name (type_function_name (identifier pg_get_triggerdef))) ( ))",
        "description": "get CREATE [ CONSTRAINT ] TRIGGER command for trigger",
        "detail": "[DESCRIPTION]: get CREATE [ CONSTRAINT ] TRIGGER command for trigger<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-info.html"
        ]
    },
    {
        "type": "function",
        "keyword": "pg_get_userbyid(role_oid)",
        "tree": "(func_application (func_name (type_function_name (identifier pg_get_userbyid))) ( ))",
        "description": "get role name with given OID",
        "detail": "[DESCRIPTION]: get role name with given OID<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-info.html"
        ]
    },
    {
        "type": "function",
        "keyword": "pg_get_viewdef(view_name)",
        "tree": "(func_application (func_name (type_function_name (identifier pg_get_viewdef))) ( ))",
        "description": "get underlying SELECT command for view or materialized view (deprecated)",
        "detail": "[DESCRIPTION]: get underlying SELECT command for view or materialized view (deprecated)<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-info.html"
        ]
    },
    {
        "type": "function",
        "keyword": "pg_get_viewdef(view_name, pretty_bool)",
        "tree": "(func_application (func_name (type_function_name (identifier pg_get_viewdef))) ( ))",
        "description": "get underlying SELECT command for view or materialized view (deprecated)",
        "detail": "[DESCRIPTION]: get underlying SELECT command for view or materialized view (deprecated)<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-info.html"
        ]
    },
    {
        "type": "function",
        "keyword": "pg_get_viewdef(view_oid)",
        "tree": "(func_application (func_name (type_function_name (identifier pg_get_viewdef))) ( ))",
        "description": "get underlying SELECT command for view or materialized view",
        "detail": "[DESCRIPTION]: get underlying SELECT command for view or materialized view<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-info.html"
        ]
    },
    {
        "type": "function",
        "keyword": "pg_get_viewdef(view_oid, pretty_bool)",
        "tree": "(func_application (func_name (type_function_name (identifier pg_get_viewdef))) ( ))",
        "description": "get underlying SELECT command for view or materialized view",
        "detail": "[DESCRIPTION]: get underlying SELECT command for view or materialized view<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-info.html"
        ]
    },
    {
        "type": "function",
        "keyword": "pg_get_viewdef(view_oid, wrap_column_int)",
        "tree": "(func_application (func_name (type_function_name (identifier pg_get_viewdef))) ( ))",
        "description": "get underlying SELECT command for view or materialized view; lines with fields are wrapped to specified number of columns, pretty-printing is implied",
        "detail": "[DESCRIPTION]: get underlying SELECT command for view or materialized view; lines with fields are wrapped to specified number of columns, pretty-printing is implied<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-info.html"
        ]
    },
    {
        "type": "function",
        "keyword": "pg_index_column_has_property(index_oid, column_no, prop_name)",
        "tree": "(func_application (func_name (type_function_name (identifier pg_index_column_has_property))) ( ))",
        "description": "test whether an index column has a specified property",
        "detail": "[DESCRIPTION]: test whether an index column has a specified property<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-info.html"
        ]
    },
    {
        "type": "function",
        "keyword": "pg_index_has_property(index_oid, prop_name)",
        "tree": "(func_application (func_name (type_function_name (identifier pg_index_has_property))) ( ))",
        "description": "test whether an index has a specified property",
        "detail": "[DESCRIPTION]: test whether an index has a specified property<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-info.html"
        ]
    },
    {
        "type": "function",
        "keyword": "pg_indexam_has_property(am_oid, prop_name)",
        "tree": "(func_application (func_name (type_function_name (identifier pg_indexam_has_property))) ( ))",
        "description": "test whether an index access method has a specified property",
        "detail": "[DESCRIPTION]: test whether an index access method has a specified property<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-info.html"
        ]
    },
    {
        "type": "function",
        "keyword": "pg_options_to_table(reloptions)",
        "tree": "(func_application (func_name (type_function_name (identifier pg_options_to_table))) ( ))",
        "description": "get the set of storage option name/value pairs",
        "detail": "[DESCRIPTION]: get the set of storage option name/value pairs<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-info.html"
        ]
    },
    {
        "type": "function",
        "keyword": "CAST()",
        "tree": "(func_expr_common_subexpr CAST ( ))",
        "description": "A type cast specifies a conversion from one data type to another. PostgreSQL accepts two equivalent\nsyntaxes for type casts:\nCAST ( expression AS type )\nexpression::type\nThe CAST syntax conforms to SQL; the syntax with :: is historical PostgreSQL usage.\nWhen a cast is applied to a value expression of a known type, it represents a run-time type conversion.\nThe cast will succeed only if a suitable type conversion operation has been defined. Notice that this\nis subtly different from the use of casts with constants, as shown in Section 4.1.2.7. A cast applied\nto an unadorned string literal represents the initial assignment of a type to a literal constant value,\nand so it will succeed for any type (if the contents of the string literal are acceptable input syntax for\nthe data type).",
        "detail": "[DESCRIPTION]: A type cast specifies a conversion from one data type to another. PostgreSQL accepts two equivalent\nsyntaxes for type casts:\nCAST ( expression AS type )\nexpression::type\nThe CAST syntax conforms to SQL; the syntax with :: is historical PostgreSQL usage.\nWhen a cast is applied to a value expression of a known type, it represents a run-time type conversion.\nThe cast will succeed only if a suitable type conversion operation has been defined. Notice that this\nis subtly different from the use of casts with constants, as shown in Section 4.1.2.7. A cast applied\nto an unadorned string literal represents the initial assignment of a type to a literal constant value,\nand so it will succeed for any type (if the contents of the string literal are acceptable input syntax for\nthe data type).<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            ""
        ]
    },
    {
        "type": "function",
        "keyword": "pg_tablespace_databases(tablespace_oid)",
        "tree": "(func_application (func_name (type_function_name (identifier pg_tablespace_databases))) ( ))",
        "description": "get the set of database OIDs that have objects in the tablespace",
        "detail": "[DESCRIPTION]: get the set of database OIDs that have objects in the tablespace<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-info.html"
        ]
    },
    {
        "type": "function",
        "keyword": "pg_tablespace_location(tablespace_oid)",
        "tree": "(func_application (func_name (type_function_name (identifier pg_tablespace_location))) ( ))",
        "description": "get the path in the file system that this tablespace is located in",
        "detail": "[DESCRIPTION]: get the path in the file system that this tablespace is located in<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-info.html"
        ]
    },
    {
        "type": "function",
        "keyword": "pg_typeof(any)",
        "tree": "(func_application (func_name (type_function_name (identifier pg_typeof))) ( ))",
        "description": "get the data type of any value",
        "detail": "[DESCRIPTION]: get the data type of any value<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-info.html"
        ]
    },
    {
        "type": "function",
        "keyword": "to_regclass(rel_name)",
        "tree": "(func_application (func_name (type_function_name (identifier to_regclass))) ( ))",
        "description": "get the OID of the named relation",
        "detail": "[DESCRIPTION]: get the OID of the named relation<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-info.html"
        ]
    },
    {
        "type": "function",
        "keyword": "to_regproc(func_name)",
        "tree": "(func_application (func_name (type_function_name (identifier to_regproc))) ( ))",
        "description": "get the OID of the named function",
        "detail": "[DESCRIPTION]: get the OID of the named function<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-info.html"
        ]
    },
    {
        "type": "function",
        "keyword": "to_regprocedure(func_name)",
        "tree": "(func_application (func_name (type_function_name (identifier to_regprocedure))) ( ))",
        "description": "get the OID of the named function",
        "detail": "[DESCRIPTION]: get the OID of the named function<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-info.html"
        ]
    },
    {
        "type": "function",
        "keyword": "to_regoper(operator_name)",
        "tree": "(func_application (func_name (type_function_name (identifier to_regoper))) ( ))",
        "description": "get the OID of the named operator",
        "detail": "[DESCRIPTION]: get the OID of the named operator<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-info.html"
        ]
    },
    {
        "type": "function",
        "keyword": "to_regoperator(operator_name)",
        "tree": "(func_application (func_name (type_function_name (identifier to_regoperator))) ( ))",
        "description": "get the OID of the named operator",
        "detail": "[DESCRIPTION]: get the OID of the named operator<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-info.html"
        ]
    },
    {
        "type": "function",
        "keyword": "to_regtype(type_name)",
        "tree": "(func_application (func_name (type_function_name (identifier to_regtype))) ( ))",
        "description": "get the OID of the named type",
        "detail": "[DESCRIPTION]: get the OID of the named type<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-info.html"
        ]
    },
    {
        "type": "function",
        "keyword": "to_regnamespace(schema_name)",
        "tree": "(func_application (func_name (type_function_name (identifier to_regnamespace))) ( ))",
        "description": "get the OID of the named schema",
        "detail": "[DESCRIPTION]: get the OID of the named schema<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-info.html"
        ]
    },
    {
        "type": "function",
        "keyword": "to_regrole(role_name)",
        "tree": "(func_application (func_name (type_function_name (identifier to_regrole))) ( ))",
        "description": "get the OID of the named role",
        "detail": "[DESCRIPTION]: get the OID of the named role<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-info.html"
        ]
    },
    {
        "type": "function",
        "keyword": "pg_describe_object(classid oid, objid oid, objsubid integer)",
        "tree": "(func_application (func_name (type_function_name (identifier pg_describe_object))) ( ))",
        "description": "get description of a database object",
        "detail": "[DESCRIPTION]: get description of a database object<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-info.html"
        ]
    },
    {
        "type": "function",
        "keyword": "pg_identify_object(classid oid, objid oid, objsubid integer)",
        "tree": "(func_application (func_name (type_function_name (identifier pg_identify_object))) ( ))",
        "description": "get identity of a database object",
        "detail": "[DESCRIPTION]: get identity of a database object<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-info.html"
        ]
    },
    {
        "type": "function",
        "keyword": "pg_identify_object_as_address(classid oid, objid oid, objsubid integer)",
        "tree": "(func_application (func_name (type_function_name (identifier pg_identify_object_as_address))) ( ))",
        "description": "get external representation of a database object's address",
        "detail": "[DESCRIPTION]: get external representation of a database object's address<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-info.html"
        ]
    },
    {
        "type": "function",
        "keyword": "pg_get_object_address(type text, object_names text[], object_args text[])",
        "tree": "(func_application (func_name (type_function_name (identifier pg_get_object_address))) ( ))",
        "description": "get address of a database object from its external representation",
        "detail": "[DESCRIPTION]: get address of a database object from its external representation<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-info.html"
        ]
    },
    {
        "type": "function",
        "keyword": "col_description(table_oid, column_number)",
        "tree": "(func_application (func_name (type_function_name (identifier col_description))) ( ))",
        "description": "get comment for a table column",
        "detail": "[DESCRIPTION]: get comment for a table column<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-info.html"
        ]
    },
    {
        "type": "function",
        "keyword": "obj_description(object_oid, catalog_name)",
        "tree": "(func_application (func_name (type_function_name (identifier obj_description))) ( ))",
        "description": "get comment for a database object",
        "detail": "[DESCRIPTION]: get comment for a database object<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-info.html"
        ]
    },
    {
        "type": "function",
        "keyword": "obj_description(object_oid)",
        "tree": "(func_application (func_name (type_function_name (identifier obj_description))) ( ))",
        "description": "get comment for a database object (deprecated)",
        "detail": "[DESCRIPTION]: get comment for a database object (deprecated)<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-info.html"
        ]
    },
    {
        "type": "function",
        "keyword": "shobj_description(object_oid, catalog_name)",
        "tree": "(func_application (func_name (type_function_name (identifier shobj_description))) ( ))",
        "description": "get comment for a shared database object",
        "detail": "[DESCRIPTION]: get comment for a shared database object<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-info.html"
        ]
    },
    {
        "type": "function",
        "keyword": "txid_current()",
        "tree": "(func_application (func_name (type_function_name (identifier txid_current))) ( ))",
        "description": "get current transaction ID, assigning a new one if the current transaction does not have one",
        "detail": "[DESCRIPTION]: get current transaction ID, assigning a new one if the current transaction does not have one<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-info.html"
        ]
    },
    {
        "type": "function",
        "keyword": "txid_current_if_assigned()",
        "tree": "(func_application (func_name (type_function_name (identifier txid_current_if_assigned))) ( ))",
        "description": "same as txid_current() but returns null instead of assigning a new transaction ID if none is already assigned",
        "detail": "[DESCRIPTION]: same as txid_current() but returns null instead of assigning a new transaction ID if none is already assigned<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-info.html"
        ]
    },
    {
        "type": "function",
        "keyword": "txid_current_snapshot()",
        "tree": "(func_application (func_name (type_function_name (identifier txid_current_snapshot))) ( ))",
        "description": "get current snapshot",
        "detail": "[DESCRIPTION]: get current snapshot<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-info.html"
        ]
    },
    {
        "type": "function",
        "keyword": "txid_snapshot_xip(txid_snapshot)",
        "tree": "(func_application (func_name (type_function_name (identifier txid_snapshot_xip))) ( ))",
        "description": "get in-progress transaction IDs in snapshot",
        "detail": "[DESCRIPTION]: get in-progress transaction IDs in snapshot<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-info.html"
        ]
    },
    {
        "type": "function",
        "keyword": "txid_snapshot_xmax(txid_snapshot)",
        "tree": "(func_application (func_name (type_function_name (identifier txid_snapshot_xmax))) ( ))",
        "description": "get xmax of snapshot",
        "detail": "[DESCRIPTION]: get xmax of snapshot<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-info.html"
        ]
    },
    {
        "type": "function",
        "keyword": "txid_snapshot_xmin(txid_snapshot)",
        "tree": "(func_application (func_name (type_function_name (identifier txid_snapshot_xmin))) ( ))",
        "description": "get xmin of snapshot",
        "detail": "[DESCRIPTION]: get xmin of snapshot<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-info.html"
        ]
    },
    {
        "type": "function",
        "keyword": "txid_visible_in_snapshot(bigint, txid_snapshot)",
        "tree": "(func_application (func_name (type_function_name (identifier txid_visible_in_snapshot))) ( ))",
        "description": "is transaction ID visible in snapshot? (do not use with subtransaction ids)",
        "detail": "[DESCRIPTION]: is transaction ID visible in snapshot? (do not use with subtransaction ids)<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-info.html"
        ]
    },
    {
        "type": "function",
        "keyword": "txid_status(bigint)",
        "tree": "(func_application (func_name (type_function_name (identifier txid_status))) ( ))",
        "description": "report the status of the given transaction: committed, aborted, in progress, or null if the transaction ID is too old",
        "detail": "[DESCRIPTION]: report the status of the given transaction: committed, aborted, in progress, or null if the transaction ID is too old<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-info.html"
        ]
    },
    {
        "type": "function",
        "keyword": "pg_xact_commit_timestamp(xid)",
        "tree": "(func_application (func_name (type_function_name (identifier pg_xact_commit_timestamp))) ( ))",
        "description": "get commit timestamp of a transaction",
        "detail": "[DESCRIPTION]: get commit timestamp of a transaction<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-info.html"
        ]
    },
    {
        "type": "function",
        "keyword": "pg_last_committed_xact()",
        "tree": "(func_application (func_name (type_function_name (identifier pg_last_committed_xact))) ( ))",
        "description": "get transaction ID and commit timestamp of latest committed transaction",
        "detail": "[DESCRIPTION]: get transaction ID and commit timestamp of latest committed transaction<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-info.html"
        ]
    },
    {
        "type": "function",
        "keyword": "pg_control_checkpoint()",
        "tree": "(func_application (func_name (type_function_name (identifier pg_control_checkpoint))) ( ))",
        "description": "Returns information about current checkpoint state.",
        "detail": "[DESCRIPTION]: Returns information about current checkpoint state.<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-info.html"
        ]
    },
    {
        "type": "function",
        "keyword": "pg_control_system()",
        "tree": "(func_application (func_name (type_function_name (identifier pg_control_system))) ( ))",
        "description": "Returns information about current control file state.",
        "detail": "[DESCRIPTION]: Returns information about current control file state.<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-info.html"
        ]
    },
    {
        "type": "function",
        "keyword": "pg_control_init()",
        "tree": "(func_application (func_name (type_function_name (identifier pg_control_init))) ( ))",
        "description": "Returns information about cluster initialization state.",
        "detail": "[DESCRIPTION]: Returns information about cluster initialization state.<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-info.html"
        ]
    },
    {
        "type": "function",
        "keyword": "pg_control_recovery()",
        "tree": "(func_application (func_name (type_function_name (identifier pg_control_recovery))) ( ))",
        "description": "Returns information about recovery state.",
        "detail": "[DESCRIPTION]: Returns information about recovery state.<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-info.html"
        ]
    },
    {
        "type": "function",
        "keyword": "row_number()",
        "tree": "(func_application (func_name (type_function_name (identifier row_number))) ( ))",
        "description": "number of the current row within its partition, counting from 1",
        "detail": "[DESCRIPTION]: number of the current row within its partition, counting from 1<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-window.html"
        ]
    },
    {
        "type": "function",
        "keyword": "percent_rank()",
        "tree": "(func_application (func_name (type_function_name (identifier rank))) ( ))",
        "description": "relative rank of the current row: (rank - 1) / (total partition rows - 1)",
        "detail": "[DESCRIPTION]: relative rank of the current row: (rank - 1) / (total partition rows - 1)<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-window.html"
        ]
    },
    {
        "type": "function",
        "keyword": "dense_rank()",
        "tree": "(func_application (func_name (type_function_name (identifier dense_rank))) ( ))",
        "description": "rank of the current row without gaps; this function counts peer groups",
        "detail": "[DESCRIPTION]: rank of the current row without gaps; this function counts peer groups<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-window.html"
        ]
    },
    {
        "type": "function",
        "keyword": "percent_rank()",
        "tree": "(func_application (func_name (type_function_name (identifier percent_rank))) ( ))",
        "description": "relative rank of the current row: (rank - 1) / (total partition rows - 1)",
        "detail": "[DESCRIPTION]: relative rank of the current row: (rank - 1) / (total partition rows - 1)<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-window.html"
        ]
    },
    {
        "type": "function",
        "keyword": "cume_dist()",
        "tree": "(func_application (func_name (type_function_name (identifier cume_dist))) ( ))",
        "description": "cumulative distribution: (number of partition rows preceding or peer with current row) / total partition rows",
        "detail": "[DESCRIPTION]: cumulative distribution: (number of partition rows preceding or peer with current row) / total partition rows<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-window.html"
        ]
    },
    {
        "type": "function",
        "keyword": "ntile(num_buckets integer)",
        "tree": "(func_application (func_name (type_function_name (identifier ntile))) ( ))",
        "description": "integer ranging from 1 to the argument value, dividing the partition as equally as possible",
        "detail": "[DESCRIPTION]: integer ranging from 1 to the argument value, dividing the partition as equally as possible<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-window.html"
        ]
    },
    {
        "type": "function",
        "keyword": "lag(value anyelement [, offset integer [, default anyelement ]])",
        "tree": "(func_application (func_name (type_function_name (identifier lag))) ( ))",
        "description": "returns value evaluated at the row that is offset rows before the current row within the partition; if there is no such row, instead return default (which must be of the same type as value). Both offset and default are evaluated with respect to the current row. If omitted, offset defaults to 1 and default to null",
        "detail": "[DESCRIPTION]: returns value evaluated at the row that is offset rows before the current row within the partition; if there is no such row, instead return default (which must be of the same type as value). Both offset and default are evaluated with respect to the current row. If omitted, offset defaults to 1 and default to null<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-window.html"
        ]
    },
    {
        "type": "function",
        "keyword": "lead(value anyelement [, offset integer [, default anyelement ]])",
        "tree": "(func_application (func_name (type_function_name (identifier lead))) ( ))",
        "description": "returns value evaluated at the row that is offset rows after the current row within the partition; if there is no such row, instead return default (which must be of the same type as value). Both offset and default are evaluated with respect to the current row. If omitted, offset defaults to 1 and default to null",
        "detail": "[DESCRIPTION]: returns value evaluated at the row that is offset rows after the current row within the partition; if there is no such row, instead return default (which must be of the same type as value). Both offset and default are evaluated with respect to the current row. If omitted, offset defaults to 1 and default to null<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-window.html"
        ]
    },
    {
        "type": "function",
        "keyword": "first_value(value any)",
        "tree": "(func_application (func_name (type_function_name (identifier first_value))) ( ))",
        "description": "returns value evaluated at the row that is the first row of the window frame",
        "detail": "[DESCRIPTION]: returns value evaluated at the row that is the first row of the window frame<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-window.html"
        ]
    },
    {
        "type": "function",
        "keyword": "last_value(value any)",
        "tree": "(func_application (func_name (type_function_name (identifier last_value))) ( ))",
        "description": "returns value evaluated at the row that is the last row of the window frame",
        "detail": "[DESCRIPTION]: returns value evaluated at the row that is the last row of the window frame<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-window.html"
        ]
    },
    {
        "type": "function",
        "keyword": "nth_value(value any, nth integer)",
        "tree": "(func_application (func_name (type_function_name (identifier nth_value))) ( ))",
        "description": "returns value evaluated at the row that is the nth row of the window frame (counting from 1); null if no such row",
        "detail": "[DESCRIPTION]: returns value evaluated at the row that is the nth row of the window frame (counting from 1); null if no such row<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-window.html"
        ]
    },
    {
        "type": "function",
        "keyword": "current_setting(setting_name[,missing_ok])",
        "tree": "(func_application (func_name (type_function_name (identifier current_setting))) ( ))",
        "description": "get current value of setting",
        "detail": "[DESCRIPTION]: get current value of setting<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-admin.html"
        ]
    },
    {
        "type": "function",
        "keyword": "set_config(setting_name,new_value,is_local)",
        "tree": "(func_application (func_name (type_function_name (identifier set_config))) ( ))",
        "description": "set parameter and return new value",
        "detail": "[DESCRIPTION]: set parameter and return new value<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-admin.html"
        ]
    },
    {
        "type": "function",
        "keyword": "pg_cancel_backend(pidint)",
        "tree": "(func_application (func_name (type_function_name (identifier pg_cancel_backend))) ( ))",
        "description": "Cancel a backend's current query. This is also allowed if the calling role is a member of the role whose backend is being canceled or the calling role has been granted pg_signal_backend, however only superusers can cancel superuser backends.",
        "detail": "[DESCRIPTION]: Cancel a backend's current query. This is also allowed if the calling role is a member of the role whose backend is being canceled or the calling role has been granted pg_signal_backend, however only superusers can cancel superuser backends.<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-admin.html"
        ]
    },
    {
        "type": "function",
        "keyword": "pg_reload_conf()",
        "tree": "(func_application (func_name (type_function_name (identifier pg_reload_conf))) ( ))",
        "description": "Cause server processes to reload their configuration files",
        "detail": "[DESCRIPTION]: Cause server processes to reload their configuration files<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-admin.html"
        ]
    },
    {
        "type": "function",
        "keyword": "pg_rotate_logfile()",
        "tree": "(func_application (func_name (type_function_name (identifier pg_rotate_logfile))) ( ))",
        "description": "Rotate server's log file",
        "detail": "[DESCRIPTION]: Rotate server's log file<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-admin.html"
        ]
    },
    {
        "type": "function",
        "keyword": "pg_terminate_backend(pidint)",
        "tree": "(func_application (func_name (type_function_name (identifier pg_terminate_backend))) ( ))",
        "description": "Terminate a backend. This is also allowed if the calling role is a member of the role whose backend is being terminated or the calling role has been granted pg_signal_backend, however only superusers can terminate superuser backends.",
        "detail": "[DESCRIPTION]: Terminate a backend. This is also allowed if the calling role is a member of the role whose backend is being terminated or the calling role has been granted pg_signal_backend, however only superusers can terminate superuser backends.<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-admin.html"
        ]
    },
    {
        "type": "function",
        "keyword": "pg_create_restore_point(nametext)",
        "tree": "(func_application (func_name (type_function_name (identifier pg_create_restore_point))) ( ))",
        "description": "Create a named point for performing restore (restricted to superusers by default, but other users can be granted EXECUTE to run the function)",
        "detail": "[DESCRIPTION]: Create a named point for performing restore (restricted to superusers by default, but other users can be granted EXECUTE to run the function)<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-admin.html"
        ]
    },
    {
        "type": "function",
        "keyword": "pg_current_wal_flush_lsn()",
        "tree": "(func_application (func_name (type_function_name (identifier pg_current_wal_flush_lsn))) ( ))",
        "description": "Get current write-ahead log flush location",
        "detail": "[DESCRIPTION]: Get current write-ahead log flush location<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-admin.html"
        ]
    },
    {
        "type": "function",
        "keyword": "pg_current_wal_insert_lsn()",
        "tree": "(func_application (func_name (type_function_name (identifier pg_current_wal_insert_lsn))) ( ))",
        "description": "Get current write-ahead log insert location",
        "detail": "[DESCRIPTION]: Get current write-ahead log insert location<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-admin.html"
        ]
    },
    {
        "type": "function",
        "keyword": "pg_current_wal_lsn()",
        "tree": "(func_application (func_name (type_function_name (identifier pg_current_wal_lsn))) ( ))",
        "description": "Get current write-ahead log write location",
        "detail": "[DESCRIPTION]: Get current write-ahead log write location<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-admin.html"
        ]
    },
    {
        "type": "function",
        "keyword": "pg_start_backup(labeltext[,fastboolean[,exclusiveboolean]])",
        "tree": "(func_application (func_name (type_function_name (identifier pg_start_backup))) ( ))",
        "description": "Prepare for performing on-line backup (restricted to superusers by default, but other users can be granted EXECUTE to run the function)",
        "detail": "[DESCRIPTION]: Prepare for performing on-line backup (restricted to superusers by default, but other users can be granted EXECUTE to run the function)<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-admin.html"
        ]
    },
    {
        "type": "function",
        "keyword": "pg_stop_backup()",
        "tree": "(func_application (func_name (type_function_name (identifier pg_stop_backup))) ( ))",
        "description": "Finish performing exclusive on-line backup (restricted to superusers by default, but other users can be granted EXECUTE to run the function)",
        "detail": "[DESCRIPTION]: Finish performing exclusive on-line backup (restricted to superusers by default, but other users can be granted EXECUTE to run the function)<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-admin.html"
        ]
    },
    {
        "type": "function",
        "keyword": "pg_stop_backup(exclusiveboolean[,wait_for_archiveboolean])",
        "tree": "(func_application (func_name (type_function_name (identifier pg_stop_backup))) ( ))",
        "description": "Finish performing exclusive or non-exclusive on-line backup (restricted to superusers by default, but other users can be granted EXECUTE to run the function)",
        "detail": "[DESCRIPTION]: Finish performing exclusive or non-exclusive on-line backup (restricted to superusers by default, but other users can be granted EXECUTE to run the function)<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-admin.html"
        ]
    },
    {
        "type": "function",
        "keyword": "pg_is_in_backup()",
        "tree": "(func_application (func_name (type_function_name (identifier pg_is_in_backup))) ( ))",
        "description": "True if an on-line exclusive backup is still in progress.",
        "detail": "[DESCRIPTION]: True if an on-line exclusive backup is still in progress.<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-admin.html"
        ]
    },
    {
        "type": "function",
        "keyword": "pg_backup_start_time()",
        "tree": "(func_application (func_name (type_function_name (identifier pg_backup_start_time))) ( ))",
        "description": "Get start time of an on-line exclusive backup in progress.",
        "detail": "[DESCRIPTION]: Get start time of an on-line exclusive backup in progress.<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-admin.html"
        ]
    },
    {
        "type": "function",
        "keyword": "pg_switch_wal()",
        "tree": "(func_application (func_name (type_function_name (identifier pg_switch_wal))) ( ))",
        "description": "Force switch to a new write-ahead log file (restricted to superusers by default, but other users can be granted EXECUTE to run the function)",
        "detail": "[DESCRIPTION]: Force switch to a new write-ahead log file (restricted to superusers by default, but other users can be granted EXECUTE to run the function)<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-admin.html"
        ]
    },
    {
        "type": "function",
        "keyword": "pg_walfile_name(lsnpg_lsn)",
        "tree": "(func_application (func_name (type_function_name (identifier pg_walfile_name))) ( ))",
        "description": "Convert write-ahead log location to file name",
        "detail": "[DESCRIPTION]: Convert write-ahead log location to file name<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-admin.html"
        ]
    },
    {
        "type": "function",
        "keyword": "pg_walfile_name_offset(lsnpg_lsn)",
        "tree": "(func_application (func_name (type_function_name (identifier pg_walfile_name_offset))) ( ))",
        "description": "Convert write-ahead log location to file name and decimal byte offset within file",
        "detail": "[DESCRIPTION]: Convert write-ahead log location to file name and decimal byte offset within file<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-admin.html"
        ]
    },
    {
        "type": "function",
        "keyword": "pg_wal_lsn_diff(lsnpg_lsn,lsnpg_lsn)",
        "tree": "(func_application (func_name (type_function_name (identifier pg_wal_lsn_diff))) ( ))",
        "description": "Calculate the difference between two write-ahead log locations",
        "detail": "[DESCRIPTION]: Calculate the difference between two write-ahead log locations<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-admin.html"
        ]
    },
    {
        "type": "function",
        "keyword": "pg_is_in_recovery()",
        "tree": "(func_application (func_name (type_function_name (identifier pg_is_in_recovery))) ( ))",
        "description": "True if recovery is still in progress.",
        "detail": "[DESCRIPTION]: True if recovery is still in progress.<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-admin.html"
        ]
    },
    {
        "type": "function",
        "keyword": "pg_last_wal_receive_lsn()",
        "tree": "(func_application (func_name (type_function_name (identifier pg_last_wal_receive_lsn))) ( ))",
        "description": "Get last write-ahead log location received and synced to disk by streaming replication. While streaming replication is in progress this will increase monotonically. If recovery has completed this will remain static at the value of the last WAL record received and synced to disk during recovery. If streaming replication is disabled, or if it has not yet started, the function returns NULL.",
        "detail": "[DESCRIPTION]: Get last write-ahead log location received and synced to disk by streaming replication. While streaming replication is in progress this will increase monotonically. If recovery has completed this will remain static at the value of the last WAL record received and synced to disk during recovery. If streaming replication is disabled, or if it has not yet started, the function returns NULL.<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-admin.html"
        ]
    },
    {
        "type": "function",
        "keyword": "pg_last_wal_replay_lsn()",
        "tree": "(func_application (func_name (type_function_name (identifier pg_last_wal_replay_lsn))) ( ))",
        "description": "Get last write-ahead log location replayed during recovery. If recovery is still in progress this will increase monotonically. If recovery has completed then this value will remain static at the value of the last WAL record applied during that recovery. When the server has been started normally without recovery the function returns NULL.",
        "detail": "[DESCRIPTION]: Get last write-ahead log location replayed during recovery. If recovery is still in progress this will increase monotonically. If recovery has completed then this value will remain static at the value of the last WAL record applied during that recovery. When the server has been started normally without recovery the function returns NULL.<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-admin.html"
        ]
    },
    {
        "type": "function",
        "keyword": "pg_last_xact_replay_timestamp()",
        "tree": "(func_application (func_name (type_function_name (identifier pg_last_xact_replay_timestamp))) ( ))",
        "description": "Get time stamp of last transaction replayed during recovery. This is the time at which the commit or abort WAL record for that transaction was generated on the primary. If no transactions have been replayed during recovery, this function returns NULL. Otherwise, if recovery is still in progress this will increase monotonically. If recovery has completed then this value will remain static at the value of the last transaction applied during that recovery. When the server has been started normally without recovery the function returns NULL.",
        "detail": "[DESCRIPTION]: Get time stamp of last transaction replayed during recovery. This is the time at which the commit or abort WAL record for that transaction was generated on the primary. If no transactions have been replayed during recovery, this function returns NULL. Otherwise, if recovery is still in progress this will increase monotonically. If recovery has completed then this value will remain static at the value of the last transaction applied during that recovery. When the server has been started normally without recovery the function returns NULL.<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-admin.html"
        ]
    },
    {
        "type": "function",
        "keyword": "pg_is_wal_replay_paused()",
        "tree": "(func_application (func_name (type_function_name (identifier pg_is_wal_replay_paused))) ( ))",
        "description": "True if recovery is paused.",
        "detail": "[DESCRIPTION]: True if recovery is paused.<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-admin.html"
        ]
    },
    {
        "type": "function",
        "keyword": "pg_promote(waitbooleanDEFAULT true,wait_secondsintegerDEFAULT 60)",
        "tree": "(func_application (func_name (type_function_name (identifier pg_promote))) ( ))",
        "description": "Promotes a physical standby server. With wait set to true (the default), the function waits until promotion is completed or wait_seconds seconds have passed, and returns true if promotion is successful and false otherwise. If wait is set to false, the function returns true immediately after sending SIGUSR1 to the postmaster to trigger the promotion. This function is restricted to superusers by default, but other users can be granted EXECUTE to run the function.",
        "detail": "[DESCRIPTION]: Promotes a physical standby server. With wait set to true (the default), the function waits until promotion is completed or wait_seconds seconds have passed, and returns true if promotion is successful and false otherwise. If wait is set to false, the function returns true immediately after sending SIGUSR1 to the postmaster to trigger the promotion. This function is restricted to superusers by default, but other users can be granted EXECUTE to run the function.<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-admin.html"
        ]
    },
    {
        "type": "function",
        "keyword": "pg_wal_replay_pause()",
        "tree": "(func_application (func_name (type_function_name (identifier pg_wal_replay_pause))) ( ))",
        "description": "Pauses recovery immediately (restricted to superusers by default, but other users can be granted EXECUTE to run the function).",
        "detail": "[DESCRIPTION]: Pauses recovery immediately (restricted to superusers by default, but other users can be granted EXECUTE to run the function).<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-admin.html"
        ]
    },
    {
        "type": "function",
        "keyword": "pg_wal_replay_resume()",
        "tree": "(func_application (func_name (type_function_name (identifier pg_wal_replay_resume))) ( ))",
        "description": "Restarts recovery if it was paused (restricted to superusers by default, but other users can be granted EXECUTE to run the function).",
        "detail": "[DESCRIPTION]: Restarts recovery if it was paused (restricted to superusers by default, but other users can be granted EXECUTE to run the function).<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-admin.html"
        ]
    },
    {
        "type": "function",
        "keyword": "pg_export_snapshot()",
        "tree": "(func_application (func_name (type_function_name (identifier pg_export_snapshot))) ( ))",
        "description": "Save the current snapshot and return its identifier",
        "detail": "[DESCRIPTION]: Save the current snapshot and return its identifier<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-admin.html"
        ]
    },
    {
        "type": "function",
        "keyword": "pg_create_physical_replication_slot(slot_name name [, immediately_reserve boolean, temporary boolean])",
        "tree": "(func_application (func_name (type_function_name (identifier pg_create_physical_replication_slot))) ( ))",
        "description": "Creates a new physical replication slot named slot_name. The optional second parameter, when true, specifies that the LSN for this replication slot be reserved immediately; otherwise the LSN is reserved on first connection from a streaming replication client. Streaming changes from a physical slot is only possible with the streaming-replication protocol \u2014 see Section\u00a052.4. The optional third parameter, temporary, when set to true, specifies that the slot should not be permanently stored to disk and is only meant for use by current session. Temporary slots are also released upon any error. This function corresponds to the replication protocol command CREATE_REPLICATION_SLOT ... PHYSICAL.",
        "detail": "[DESCRIPTION]: Creates a new physical replication slot named slot_name. The optional second parameter, when true, specifies that the LSN for this replication slot be reserved immediately; otherwise the LSN is reserved on first connection from a streaming replication client. Streaming changes from a physical slot is only possible with the streaming-replication protocol \u2014 see Section\u00a052.4. The optional third parameter, temporary, when set to true, specifies that the slot should not be permanently stored to disk and is only meant for use by current session. Temporary slots are also released upon any error. This function corresponds to the replication protocol command CREATE_REPLICATION_SLOT ... PHYSICAL.<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-admin.html"
        ]
    },
    {
        "type": "function",
        "keyword": "pg_drop_replication_slot(slot_name name)",
        "tree": "(func_application (func_name (type_function_name (identifier pg_drop_replication_slot))) ( ))",
        "description": "Drops the physical or logical replication slot named slot_name. Same as replication protocol command DROP_REPLICATION_SLOT. For logical slots, this must be called when connected to the same database the slot was created on.",
        "detail": "[DESCRIPTION]: Drops the physical or logical replication slot named slot_name. Same as replication protocol command DROP_REPLICATION_SLOT. For logical slots, this must be called when connected to the same database the slot was created on.<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-admin.html"
        ]
    },
    {
        "type": "function",
        "keyword": "pg_create_logical_replication_slot(slot_name name, plugin name [, temporary boolean])",
        "tree": "(func_application (func_name (type_function_name (identifier pg_create_logical_replication_slot))) ( ))",
        "description": "Creates a new logical (decoding) replication slot named slot_name using the output plugin plugin. The optional third parameter, temporary, when set to true, specifies that the slot should not be permanently stored to disk and is only meant for use by current session. Temporary slots are also released upon any error. A call to this function has the same effect as the replication protocol command CREATE_REPLICATION_SLOT ... LOGICAL.",
        "detail": "[DESCRIPTION]: Creates a new logical (decoding) replication slot named slot_name using the output plugin plugin. The optional third parameter, temporary, when set to true, specifies that the slot should not be permanently stored to disk and is only meant for use by current session. Temporary slots are also released upon any error. A call to this function has the same effect as the replication protocol command CREATE_REPLICATION_SLOT ... LOGICAL.<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-admin.html"
        ]
    },
    {
        "type": "function",
        "keyword": "pg_copy_physical_replication_slot(src_slot_name name, dst_slot_name name [, temporary boolean])",
        "tree": "(func_application (func_name (type_function_name (identifier pg_copy_physical_replication_slot))) ( ))",
        "description": "Copies an existing physical replication slot named src_slot_name to a physical replication slot named dst_slot_name. The copied physical slot starts to reserve WAL from the same LSN as the source slot. temporary is optional. If temporary is omitted, the same value as the source slot is used.",
        "detail": "[DESCRIPTION]: Copies an existing physical replication slot named src_slot_name to a physical replication slot named dst_slot_name. The copied physical slot starts to reserve WAL from the same LSN as the source slot. temporary is optional. If temporary is omitted, the same value as the source slot is used.<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-admin.html"
        ]
    },
    {
        "type": "function",
        "keyword": "pg_copy_logical_replication_slot(src_slot_name name, dst_slot_name name [, temporary boolean [, plugin name]])",
        "tree": "(func_application (func_name (type_function_name (identifier pg_copy_logical_replication_slot))) ( ))",
        "description": "Copies an existing logical replication slot named src_slot_name to a logical replication slot named dst_slot_name while changing the output plugin and persistence. The copied logical slot starts from the same LSN as the source logical slot. Both temporary and plugin are optional. If temporary or plugin are omitted, the same values as the source logical slot are used.",
        "detail": "[DESCRIPTION]: Copies an existing logical replication slot named src_slot_name to a logical replication slot named dst_slot_name while changing the output plugin and persistence. The copied logical slot starts from the same LSN as the source logical slot. Both temporary and plugin are optional. If temporary or plugin are omitted, the same values as the source logical slot are used.<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-admin.html"
        ]
    },
    {
        "type": "function",
        "keyword": "pg_logical_slot_get_changes(slot_name name, upto_lsn pg_lsn, upto_nchanges int, VARIADIC options text[])",
        "tree": "(func_application (func_name (type_function_name (identifier pg_logical_slot_get_changes))) ( ))",
        "description": "Returns changes in the slot slot_name, starting from the point at which since changes have been consumed last. If upto_lsn and upto_nchanges are NULL, logical decoding will continue until end of WAL. If upto_lsn is non-NULL, decoding will include only those transactions which commit prior to the specified LSN. If upto_nchanges is non-NULL, decoding will stop when the number of rows produced by decoding exceeds the specified value. Note, however, that the actual number of rows returned may be larger, since this limit is only checked after adding the rows produced when decoding each new transaction commit.",
        "detail": "[DESCRIPTION]: Returns changes in the slot slot_name, starting from the point at which since changes have been consumed last. If upto_lsn and upto_nchanges are NULL, logical decoding will continue until end of WAL. If upto_lsn is non-NULL, decoding will include only those transactions which commit prior to the specified LSN. If upto_nchanges is non-NULL, decoding will stop when the number of rows produced by decoding exceeds the specified value. Note, however, that the actual number of rows returned may be larger, since this limit is only checked after adding the rows produced when decoding each new transaction commit.<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-admin.html"
        ]
    },
    {
        "type": "function",
        "keyword": "pg_logical_slot_peek_changes(slot_name name, upto_lsn pg_lsn, upto_nchanges int, VARIADIC options text[])",
        "tree": "(func_application (func_name (type_function_name (identifier pg_logical_slot_peek_changes))) ( ))",
        "description": "Behaves just like the pg_logical_slot_get_changes() function, except that changes are not consumed; that is, they will be returned again on future calls.",
        "detail": "[DESCRIPTION]: Behaves just like the pg_logical_slot_get_changes() function, except that changes are not consumed; that is, they will be returned again on future calls.<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-admin.html"
        ]
    },
    {
        "type": "function",
        "keyword": "pg_logical_slot_get_binary_changes(slot_name name, upto_lsn pg_lsn, upto_nchanges int, VARIADIC options text[])",
        "tree": "(func_application (func_name (type_function_name (identifier pg_logical_slot_get_binary_changes))) ( ))",
        "description": "Behaves just like the pg_logical_slot_get_changes() function, except that changes are returned as bytea.",
        "detail": "[DESCRIPTION]: Behaves just like the pg_logical_slot_get_changes() function, except that changes are returned as bytea.<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-admin.html"
        ]
    },
    {
        "type": "function",
        "keyword": "pg_logical_slot_peek_binary_changes(slot_name name, upto_lsn pg_lsn, upto_nchanges int, VARIADIC options text[])",
        "tree": "(func_application (func_name (type_function_name (identifier pg_logical_slot_peek_binary_changes))) ( ))",
        "description": "Behaves just like the pg_logical_slot_get_changes() function, except that changes are returned as bytea and that changes are not consumed; that is, they will be returned again on future calls.",
        "detail": "[DESCRIPTION]: Behaves just like the pg_logical_slot_get_changes() function, except that changes are returned as bytea and that changes are not consumed; that is, they will be returned again on future calls.<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-admin.html"
        ]
    },
    {
        "type": "function",
        "keyword": "pg_replication_slot_advance(slot_name name, upto_lsn pg_lsn)",
        "tree": "(func_application (func_name (type_function_name (identifier pg_replication_slot_advance))) ( ))",
        "description": "Advances the current confirmed position of a replication slot named slot_name. The slot will not be moved backwards, and it will not be moved beyond the current insert location. Returns the name of the slot and the real position to which it was advanced to. The information of the updated slot is written out at the follow-up checkpoint if any advancing is done. In the event of a crash, the slot may return to an earlier position.",
        "detail": "[DESCRIPTION]: Advances the current confirmed position of a replication slot named slot_name. The slot will not be moved backwards, and it will not be moved beyond the current insert location. Returns the name of the slot and the real position to which it was advanced to. The information of the updated slot is written out at the follow-up checkpoint if any advancing is done. In the event of a crash, the slot may return to an earlier position.<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-admin.html"
        ]
    },
    {
        "type": "function",
        "keyword": "pg_replication_origin_create(node_name text)",
        "tree": "(func_application (func_name (type_function_name (identifier pg_replication_origin_create))) ( ))",
        "description": "Create a replication origin with the given external name, and return the internal id assigned to it.",
        "detail": "[DESCRIPTION]: Create a replication origin with the given external name, and return the internal id assigned to it.<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-admin.html"
        ]
    },
    {
        "type": "function",
        "keyword": "pg_replication_origin_drop(node_name text)",
        "tree": "(func_application (func_name (type_function_name (identifier pg_replication_origin_drop))) ( ))",
        "description": "Delete a previously created replication origin, including any associated replay progress.",
        "detail": "[DESCRIPTION]: Delete a previously created replication origin, including any associated replay progress.<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-admin.html"
        ]
    },
    {
        "type": "function",
        "keyword": "pg_replication_origin_oid(node_name text)",
        "tree": "(func_application (func_name (type_function_name (identifier pg_replication_origin_oid))) ( ))",
        "description": "Lookup a replication origin by name and return the internal ID. If no such replication origin is found, NULL is returned.",
        "detail": "[DESCRIPTION]: Lookup a replication origin by name and return the internal ID. If no such replication origin is found, NULL is returned.<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-admin.html"
        ]
    },
    {
        "type": "function",
        "keyword": "pg_replication_origin_session_setup(node_name text)",
        "tree": "(func_application (func_name (type_function_name (identifier pg_replication_origin_session_setup))) ( ))",
        "description": "Mark the current session as replaying from the given origin, allowing replay progress to be tracked. Use pg_replication_origin_session_reset to revert. Can only be used if no previous origin is configured.",
        "detail": "[DESCRIPTION]: Mark the current session as replaying from the given origin, allowing replay progress to be tracked. Use pg_replication_origin_session_reset to revert. Can only be used if no previous origin is configured.<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-admin.html"
        ]
    },
    {
        "type": "function",
        "keyword": "pg_replication_origin_session_reset()",
        "tree": "(func_application (func_name (type_function_name (identifier pg_replication_origin_session_reset))) ( ))",
        "description": "Cancel the effects of pg_replication_origin_session_setup().",
        "detail": "[DESCRIPTION]: Cancel the effects of pg_replication_origin_session_setup().<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-admin.html"
        ]
    },
    {
        "type": "function",
        "keyword": "pg_replication_origin_session_is_setup()",
        "tree": "(func_application (func_name (type_function_name (identifier pg_replication_origin_session_is_setup))) ( ))",
        "description": "Has a replication origin been configured in the current session?",
        "detail": "[DESCRIPTION]: Has a replication origin been configured in the current session?<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-admin.html"
        ]
    },
    {
        "type": "function",
        "keyword": "pg_replication_origin_session_progress(flush bool)",
        "tree": "(func_application (func_name (type_function_name (identifier pg_replication_origin_session_progress))) ( ))",
        "description": "Return the replay location for the replication origin configured in the current session. The parameter flush determines whether the corresponding local transaction will be guaranteed to have been flushed to disk or not.",
        "detail": "[DESCRIPTION]: Return the replay location for the replication origin configured in the current session. The parameter flush determines whether the corresponding local transaction will be guaranteed to have been flushed to disk or not.<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-admin.html"
        ]
    },
    {
        "type": "function",
        "keyword": "pg_replication_origin_xact_setup(origin_lsn pg_lsn, origin_timestamp timestamptz)",
        "tree": "(func_application (func_name (type_function_name (identifier pg_replication_origin_xact_setup))) ( ))",
        "description": "Mark the current transaction as replaying a transaction that has committed at the given LSN and timestamp. Can only be called when a replication origin has previously been configured using pg_replication_origin_session_setup().",
        "detail": "[DESCRIPTION]: Mark the current transaction as replaying a transaction that has committed at the given LSN and timestamp. Can only be called when a replication origin has previously been configured using pg_replication_origin_session_setup().<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-admin.html"
        ]
    },
    {
        "type": "function",
        "keyword": "pg_replication_origin_xact_reset()",
        "tree": "(func_application (func_name (type_function_name (identifier pg_replication_origin_xact_reset))) ( ))",
        "description": "Cancel the effects of pg_replication_origin_xact_setup().",
        "detail": "[DESCRIPTION]: Cancel the effects of pg_replication_origin_xact_setup().<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-admin.html"
        ]
    },
    {
        "type": "function",
        "keyword": "pg_replication_origin_advance(node_name text, lsn pg_lsn)",
        "tree": "(func_application (func_name (type_function_name (identifier pg_replication_origin_advance))) ( ))",
        "description": "Set replication progress for the given node to the given location. This primarily is useful for setting up the initial location or a new location after configuration changes and similar. Be aware that careless use of this function can lead to inconsistently replicated data.",
        "detail": "[DESCRIPTION]: Set replication progress for the given node to the given location. This primarily is useful for setting up the initial location or a new location after configuration changes and similar. Be aware that careless use of this function can lead to inconsistently replicated data.<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-admin.html"
        ]
    },
    {
        "type": "function",
        "keyword": "pg_replication_origin_progress(node_name text, flush bool)",
        "tree": "(func_application (func_name (type_function_name (identifier pg_replication_origin_progress))) ( ))",
        "description": "Return the replay location for the given replication origin. The parameter flush determines whether the corresponding local transaction will be guaranteed to have been flushed to disk or not.",
        "detail": "[DESCRIPTION]: Return the replay location for the given replication origin. The parameter flush determines whether the corresponding local transaction will be guaranteed to have been flushed to disk or not.<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-admin.html"
        ]
    },
    {
        "type": "function",
        "keyword": "pg_logical_emit_message(transactional bool, prefix text, content text)",
        "tree": "(func_application (func_name (type_function_name (identifier pg_logical_emit_message))) ( ))",
        "description": "Emit text logical decoding message. This can be used to pass generic messages to logical decoding plugins through WAL. The parameter transactional specifies if the message should be part of current transaction or if it should be written immediately and decoded as soon as the logical decoding reads the record. The prefix is textual prefix used by the logical decoding plugins to easily recognize interesting messages for them. The content is the text of the message.",
        "detail": "[DESCRIPTION]: Emit text logical decoding message. This can be used to pass generic messages to logical decoding plugins through WAL. The parameter transactional specifies if the message should be part of current transaction or if it should be written immediately and decoded as soon as the logical decoding reads the record. The prefix is textual prefix used by the logical decoding plugins to easily recognize interesting messages for them. The content is the text of the message.<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-admin.html"
        ]
    },
    {
        "type": "function",
        "keyword": "pg_logical_emit_message(transactional bool, prefix text, content bytea)",
        "tree": "(func_application (func_name (type_function_name (identifier pg_logical_emit_message))) ( ))",
        "description": "Emit binary logical decoding message. This can be used to pass generic messages to logical decoding plugins through WAL. The parameter transactional specifies if the message should be part of current transaction or if it should be written immediately and decoded as soon as the logical decoding reads the record. The prefix is textual prefix used by the logical decoding plugins to easily recognize interesting messages for them. The content is the binary content of the message.",
        "detail": "[DESCRIPTION]: Emit binary logical decoding message. This can be used to pass generic messages to logical decoding plugins through WAL. The parameter transactional specifies if the message should be part of current transaction or if it should be written immediately and decoded as soon as the logical decoding reads the record. The prefix is textual prefix used by the logical decoding plugins to easily recognize interesting messages for them. The content is the binary content of the message.<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-admin.html"
        ]
    },
    {
        "type": "function",
        "keyword": "pg_column_size(any)",
        "tree": "(func_application (func_name (type_function_name (identifier pg_column_size))) ( ))",
        "description": "Number of bytes used to store a particular value (possibly compressed)",
        "detail": "[DESCRIPTION]: Number of bytes used to store a particular value (possibly compressed)<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-admin.html"
        ]
    },
    {
        "type": "function",
        "keyword": "pg_database_size(oid)",
        "tree": "(func_application (func_name (type_function_name (identifier pg_database_size))) ( ))",
        "description": "Disk space used by the database with the specified OID",
        "detail": "[DESCRIPTION]: Disk space used by the database with the specified OID<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-admin.html"
        ]
    },
    {
        "type": "function",
        "keyword": "pg_database_size(name)",
        "tree": "(func_application (func_name (type_function_name (identifier pg_database_size))) ( ))",
        "description": "Disk space used by the database with the specified name",
        "detail": "[DESCRIPTION]: Disk space used by the database with the specified name<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-admin.html"
        ]
    },
    {
        "type": "function",
        "keyword": "pg_indexes_size(regclass)",
        "tree": "(func_application (func_name (type_function_name (identifier pg_indexes_size))) ( ))",
        "description": "Total disk space used by indexes attached to the specified table",
        "detail": "[DESCRIPTION]: Total disk space used by indexes attached to the specified table<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-admin.html"
        ]
    },
    {
        "type": "function",
        "keyword": "pg_relation_size(relationregclass,forktext)",
        "tree": "(func_application (func_name (type_function_name (identifier pg_relation_size))) ( ))",
        "description": "Disk space used by the specified fork ('main', 'fsm', 'vm', or 'init') of the specified table or index",
        "detail": "[DESCRIPTION]: Disk space used by the specified fork ('main', 'fsm', 'vm', or 'init') of the specified table or index<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-admin.html"
        ]
    },
    {
        "type": "function",
        "keyword": "pg_relation_size(relationregclass)",
        "tree": "(func_application (func_name (type_function_name (identifier pg_relation_size))) ( ))",
        "description": "Shorthand for pg_relation_size(..., 'main')",
        "detail": "[DESCRIPTION]: Shorthand for pg_relation_size(..., 'main')<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-admin.html"
        ]
    },
    {
        "type": "function",
        "keyword": "pg_size_bytes(text)",
        "tree": "(func_application (func_name (type_function_name (identifier pg_size_bytes))) ( ))",
        "description": "Converts a size in human-readable format with size units into bytes",
        "detail": "[DESCRIPTION]: Converts a size in human-readable format with size units into bytes<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-admin.html"
        ]
    },
    {
        "type": "function",
        "keyword": "pg_size_pretty(bigint)",
        "tree": "(func_application (func_name (type_function_name (identifier pg_size_pretty))) ( ))",
        "description": "Converts a size in bytes expressed as a 64-bit integer into a human-readable format with size units",
        "detail": "[DESCRIPTION]: Converts a size in bytes expressed as a 64-bit integer into a human-readable format with size units<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-admin.html"
        ]
    },
    {
        "type": "function",
        "keyword": "pg_size_pretty(numeric)",
        "tree": "(func_application (func_name (type_function_name (identifier pg_size_pretty))) ( ))",
        "description": "Converts a size in bytes expressed as a numeric value into a human-readable format with size units",
        "detail": "[DESCRIPTION]: Converts a size in bytes expressed as a numeric value into a human-readable format with size units<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-admin.html"
        ]
    },
    {
        "type": "function",
        "keyword": "pg_table_size(regclass)",
        "tree": "(func_application (func_name (type_function_name (identifier pg_table_size))) ( ))",
        "description": "Disk space used by the specified table, excluding indexes (but including TOAST, free space map, and visibility map)",
        "detail": "[DESCRIPTION]: Disk space used by the specified table, excluding indexes (but including TOAST, free space map, and visibility map)<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-admin.html"
        ]
    },
    {
        "type": "function",
        "keyword": "pg_tablespace_size(oid)",
        "tree": "(func_application (func_name (type_function_name (identifier pg_tablespace_size))) ( ))",
        "description": "Disk space used by the tablespace with the specified OID",
        "detail": "[DESCRIPTION]: Disk space used by the tablespace with the specified OID<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-admin.html"
        ]
    },
    {
        "type": "function",
        "keyword": "pg_tablespace_size(name)",
        "tree": "(func_application (func_name (type_function_name (identifier pg_tablespace_size))) ( ))",
        "description": "Disk space used by the tablespace with the specified name",
        "detail": "[DESCRIPTION]: Disk space used by the tablespace with the specified name<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-admin.html"
        ]
    },
    {
        "type": "function",
        "keyword": "pg_total_relation_size(regclass)",
        "tree": "(func_application (func_name (type_function_name (identifier pg_total_relation_size))) ( ))",
        "description": "Total disk space used by the specified table, including all indexes and TOAST data",
        "detail": "[DESCRIPTION]: Total disk space used by the specified table, including all indexes and TOAST data<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-admin.html"
        ]
    },
    {
        "type": "function",
        "keyword": "pg_relation_filenode(relationregclass)",
        "tree": "(func_application (func_name (type_function_name (identifier pg_relation_filenode))) ( ))",
        "description": "Filenode number of the specified relation",
        "detail": "[DESCRIPTION]: Filenode number of the specified relation<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-admin.html"
        ]
    },
    {
        "type": "function",
        "keyword": "pg_relation_filepath(relationregclass)",
        "tree": "(func_application (func_name (type_function_name (identifier pg_relation_filepath))) ( ))",
        "description": "File path name of the specified relation",
        "detail": "[DESCRIPTION]: File path name of the specified relation<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-admin.html"
        ]
    },
    {
        "type": "function",
        "keyword": "pg_filenode_relation(tablespaceoid,filenodeoid)",
        "tree": "(func_application (func_name (type_function_name (identifier pg_filenode_relation))) ( ))",
        "description": "Find the relation associated with a given tablespace and filenode",
        "detail": "[DESCRIPTION]: Find the relation associated with a given tablespace and filenode<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-admin.html"
        ]
    },
    {
        "type": "function",
        "keyword": "pg_collation_actual_version(oid)",
        "tree": "(func_application (func_name (type_function_name (identifier pg_collation_actual_version))) ( ))",
        "description": "Return actual version of collation from operating system",
        "detail": "[DESCRIPTION]: Return actual version of collation from operating system<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-admin.html"
        ]
    },
    {
        "type": "function",
        "keyword": "pg_import_system_collations(schemaregnamespace)",
        "tree": "(func_application (func_name (type_function_name (identifier pg_import_system_collations))) ( ))",
        "description": "Import operating system collations",
        "detail": "[DESCRIPTION]: Import operating system collations<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-admin.html"
        ]
    },
    {
        "type": "function",
        "keyword": "pg_partition_tree(regclass)",
        "tree": "(func_application (func_name (type_function_name (identifier pg_partition_tree))) ( ))",
        "description": "List information about tables or indexes in a partition tree for a given partitioned table or partitioned index, with one row for each partition. Information provided includes the name of the partition, the name of its immediate parent, a boolean value telling if the partition is a leaf, and an integer telling its level in the hierarchy. The value of level begins at 0 for the input table or index in its role as the root of the partition tree, 1 for its partitions, 2 for their partitions, and so on.",
        "detail": "[DESCRIPTION]: List information about tables or indexes in a partition tree for a given partitioned table or partitioned index, with one row for each partition. Information provided includes the name of the partition, the name of its immediate parent, a boolean value telling if the partition is a leaf, and an integer telling its level in the hierarchy. The value of level begins at 0 for the input table or index in its role as the root of the partition tree, 1 for its partitions, 2 for their partitions, and so on.<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-admin.html"
        ]
    },
    {
        "type": "function",
        "keyword": "pg_partition_ancestors(regclass)",
        "tree": "(func_application (func_name (type_function_name (identifier pg_partition_ancestors))) ( ))",
        "description": "List the ancestor relations of the given partition, including the partition itself.",
        "detail": "[DESCRIPTION]: List the ancestor relations of the given partition, including the partition itself.<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-admin.html"
        ]
    },
    {
        "type": "function",
        "keyword": "pg_partition_root(regclass)",
        "tree": "(func_application (func_name (type_function_name (identifier pg_partition_root))) ( ))",
        "description": "Return the top-most parent of a partition tree to which the given relation belongs.",
        "detail": "[DESCRIPTION]: Return the top-most parent of a partition tree to which the given relation belongs.<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-admin.html"
        ]
    },
    {
        "type": "function",
        "keyword": "brin_summarize_new_values(index regclass)",
        "tree": "(func_application (func_name (type_function_name (identifier brin_summarize_new_values))) ( ))",
        "description": "summarize page ranges not already summarized",
        "detail": "[DESCRIPTION]: summarize page ranges not already summarized<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-admin.html"
        ]
    },
    {
        "type": "function",
        "keyword": "brin_summarize_range(index regclass,blockNumber bigint)",
        "tree": "(func_application (func_name (type_function_name (identifier brin_summarize_range))) ( ))",
        "description": "summarize the page range covering the given block, if not already summarized",
        "detail": "[DESCRIPTION]: summarize the page range covering the given block, if not already summarized<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-admin.html"
        ]
    },
    {
        "type": "function",
        "keyword": "brin_desummarize_range(index regclass,blockNumber bigint)",
        "tree": "(func_application (func_name (type_function_name (identifier brin_desummarize_range))) ( ))",
        "description": "de-summarize the page range covering the given block, if summarized",
        "detail": "[DESCRIPTION]: de-summarize the page range covering the given block, if summarized<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-admin.html"
        ]
    },
    {
        "type": "function",
        "keyword": "gin_clean_pending_list(indexregclass)",
        "tree": "(func_application (func_name (type_function_name (identifier gin_clean_pending_list))) ( ))",
        "description": "move GIN pending list entries into main index structure",
        "detail": "[DESCRIPTION]: move GIN pending list entries into main index structure<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-admin.html"
        ]
    },
    {
        "type": "function",
        "keyword": "pg_ls_dir(dirnametext[,missing_okboolean,include_dot_dirsboolean])",
        "tree": "(func_application (func_name (type_function_name (identifier pg_ls_dir))) ( ))",
        "description": "List the contents of a directory. Restricted to superusers by default, but other users can be granted EXECUTE to run the function.",
        "detail": "[DESCRIPTION]: List the contents of a directory. Restricted to superusers by default, but other users can be granted EXECUTE to run the function.<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-admin.html"
        ]
    },
    {
        "type": "function",
        "keyword": "pg_ls_logdir()",
        "tree": "(func_application (func_name (type_function_name (identifier pg_ls_logdir))) ( ))",
        "description": "List the name, size, and last modification time of files in the log directory. Access is granted to members of the pg_monitor role and may be granted to other non-superuser roles.",
        "detail": "[DESCRIPTION]: List the name, size, and last modification time of files in the log directory. Access is granted to members of the pg_monitor role and may be granted to other non-superuser roles.<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-admin.html"
        ]
    },
    {
        "type": "function",
        "keyword": "pg_ls_waldir()",
        "tree": "(func_application (func_name (type_function_name (identifier pg_ls_waldir))) ( ))",
        "description": "List the name, size, and last modification time of files in the WAL directory. Access is granted to members of the pg_monitor role and may be granted to other non-superuser roles.",
        "detail": "[DESCRIPTION]: List the name, size, and last modification time of files in the WAL directory. Access is granted to members of the pg_monitor role and may be granted to other non-superuser roles.<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-admin.html"
        ]
    },
    {
        "type": "function",
        "keyword": "pg_ls_archive_statusdir()",
        "tree": "(func_application (func_name (type_function_name (identifier pg_ls_archive_statusdir))) ( ))",
        "description": "List the name, size, and last modification time of files in the WAL archive status directory. Access is granted to members of the pg_monitor role and may be granted to other non-superuser roles.",
        "detail": "[DESCRIPTION]: List the name, size, and last modification time of files in the WAL archive status directory. Access is granted to members of the pg_monitor role and may be granted to other non-superuser roles.<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-admin.html"
        ]
    },
    {
        "type": "function",
        "keyword": "pg_ls_tmpdir([tablespaceoid])",
        "tree": "(func_application (func_name (type_function_name (identifier pg_ls_tmpdir))) ( ))",
        "description": "List the name, size, and last modification time of files in the temporary directory for tablespace. If tablespace is not provided, the pg_default tablespace is used. Access is granted to members of the pg_monitor role and may be granted to other non-superuser roles.",
        "detail": "[DESCRIPTION]: List the name, size, and last modification time of files in the temporary directory for tablespace. If tablespace is not provided, the pg_default tablespace is used. Access is granted to members of the pg_monitor role and may be granted to other non-superuser roles.<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-admin.html"
        ]
    },
    {
        "type": "function",
        "keyword": "pg_read_file(filenametext[,offsetbigint,lengthbigint[,missing_okboolean] ])",
        "tree": "(func_application (func_name (type_function_name (identifier pg_read_file))) ( ))",
        "description": "Return the contents of a text file. Restricted to superusers by default, but other users can be granted EXECUTE to run the function.",
        "detail": "[DESCRIPTION]: Return the contents of a text file. Restricted to superusers by default, but other users can be granted EXECUTE to run the function.<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-admin.html"
        ]
    },
    {
        "type": "function",
        "keyword": "pg_read_binary_file(filenametext[,offsetbigint,lengthbigint[,missing_okboolean] ])",
        "tree": "(func_application (func_name (type_function_name (identifier pg_read_binary_file))) ( ))",
        "description": "Return the contents of a file. Restricted to superusers by default, but other users can be granted EXECUTE to run the function.",
        "detail": "[DESCRIPTION]: Return the contents of a file. Restricted to superusers by default, but other users can be granted EXECUTE to run the function.<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-admin.html"
        ]
    },
    {
        "type": "function",
        "keyword": "pg_stat_file(filenametext[,missing_okboolean])",
        "tree": "(func_application (func_name (type_function_name (identifier pg_stat_file))) ( ))",
        "description": "Return information about a file. Restricted to superusers by default, but other users can be granted EXECUTE to run the function.",
        "detail": "[DESCRIPTION]: Return information about a file. Restricted to superusers by default, but other users can be granted EXECUTE to run the function.<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-admin.html"
        ]
    },
    {
        "type": "function",
        "keyword": "pg_advisory_lock(key bigint)",
        "tree": "(func_application (func_name (type_function_name (identifier pg_advisory_lock))) ( ))",
        "description": "Obtain exclusive session level advisory lock",
        "detail": "[DESCRIPTION]: Obtain exclusive session level advisory lock<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-admin.html"
        ]
    },
    {
        "type": "function",
        "keyword": "pg_advisory_lock(key1 int, key2 int)",
        "tree": "(func_application (func_name (type_function_name (identifier pg_advisory_lock))) ( ))",
        "description": "Obtain exclusive session level advisory lock",
        "detail": "[DESCRIPTION]: Obtain exclusive session level advisory lock<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-admin.html"
        ]
    },
    {
        "type": "function",
        "keyword": "pg_advisory_lock_shared(key bigint)",
        "tree": "(func_application (func_name (type_function_name (identifier pg_advisory_lock_shared))) ( ))",
        "description": "Obtain shared session level advisory lock",
        "detail": "[DESCRIPTION]: Obtain shared session level advisory lock<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-admin.html"
        ]
    },
    {
        "type": "function",
        "keyword": "pg_advisory_lock_shared(key1 int, key2 int)",
        "tree": "(func_application (func_name (type_function_name (identifier pg_advisory_lock_shared))) ( ))",
        "description": "Obtain shared session level advisory lock",
        "detail": "[DESCRIPTION]: Obtain shared session level advisory lock<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-admin.html"
        ]
    },
    {
        "type": "function",
        "keyword": "pg_advisory_unlock(key bigint)",
        "tree": "(func_application (func_name (type_function_name (identifier pg_advisory_unlock))) ( ))",
        "description": "Release an exclusive session level advisory lock",
        "detail": "[DESCRIPTION]: Release an exclusive session level advisory lock<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-admin.html"
        ]
    },
    {
        "type": "function",
        "keyword": "pg_advisory_unlock(key1 int, key2 int)",
        "tree": "(func_application (func_name (type_function_name (identifier pg_advisory_unlock))) ( ))",
        "description": "Release an exclusive session level advisory lock",
        "detail": "[DESCRIPTION]: Release an exclusive session level advisory lock<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-admin.html"
        ]
    },
    {
        "type": "function",
        "keyword": "pg_advisory_unlock_all()",
        "tree": "(func_application (func_name (type_function_name (identifier pg_advisory_unlock_all))) ( ))",
        "description": "Release all session level advisory locks held by the current session",
        "detail": "[DESCRIPTION]: Release all session level advisory locks held by the current session<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-admin.html"
        ]
    },
    {
        "type": "function",
        "keyword": "pg_advisory_unlock_shared(key bigint)",
        "tree": "(func_application (func_name (type_function_name (identifier pg_advisory_unlock_shared))) ( ))",
        "description": "Release a shared session level advisory lock",
        "detail": "[DESCRIPTION]: Release a shared session level advisory lock<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-admin.html"
        ]
    },
    {
        "type": "function",
        "keyword": "pg_advisory_unlock_shared(key1 int, key2 int)",
        "tree": "(func_application (func_name (type_function_name (identifier pg_advisory_unlock_shared))) ( ))",
        "description": "Release a shared session level advisory lock",
        "detail": "[DESCRIPTION]: Release a shared session level advisory lock<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-admin.html"
        ]
    },
    {
        "type": "function",
        "keyword": "pg_advisory_xact_lock(key bigint)",
        "tree": "(func_application (func_name (type_function_name (identifier pg_advisory_xact_lock))) ( ))",
        "description": "Obtain exclusive transaction level advisory lock",
        "detail": "[DESCRIPTION]: Obtain exclusive transaction level advisory lock<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-admin.html"
        ]
    },
    {
        "type": "function",
        "keyword": "pg_advisory_xact_lock(key1 int, key2 int)",
        "tree": "(func_application (func_name (type_function_name (identifier pg_advisory_xact_lock))) ( ))",
        "description": "Obtain exclusive transaction level advisory lock",
        "detail": "[DESCRIPTION]: Obtain exclusive transaction level advisory lock<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-admin.html"
        ]
    },
    {
        "type": "function",
        "keyword": "pg_advisory_xact_lock_shared(key bigint)",
        "tree": "(func_application (func_name (type_function_name (identifier pg_advisory_xact_lock_shared))) ( ))",
        "description": "Obtain shared transaction level advisory lock",
        "detail": "[DESCRIPTION]: Obtain shared transaction level advisory lock<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-admin.html"
        ]
    },
    {
        "type": "function",
        "keyword": "pg_advisory_xact_lock_shared(key1 int, key2 int)",
        "tree": "(func_application (func_name (type_function_name (identifier pg_advisory_xact_lock_shared))) ( ))",
        "description": "Obtain shared transaction level advisory lock",
        "detail": "[DESCRIPTION]: Obtain shared transaction level advisory lock<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-admin.html"
        ]
    },
    {
        "type": "function",
        "keyword": "pg_try_advisory_lock(key bigint)",
        "tree": "(func_application (func_name (type_function_name (identifier pg_try_advisory_lock))) ( ))",
        "description": "Obtain exclusive session level advisory lock if available",
        "detail": "[DESCRIPTION]: Obtain exclusive session level advisory lock if available<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-admin.html"
        ]
    },
    {
        "type": "function",
        "keyword": "pg_try_advisory_lock(key1 int, key2 int)",
        "tree": "(func_application (func_name (type_function_name (identifier pg_try_advisory_lock))) ( ))",
        "description": "Obtain exclusive session level advisory lock if available",
        "detail": "[DESCRIPTION]: Obtain exclusive session level advisory lock if available<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-admin.html"
        ]
    },
    {
        "type": "function",
        "keyword": "pg_try_advisory_lock_shared(key bigint)",
        "tree": "(func_application (func_name (type_function_name (identifier pg_try_advisory_lock_shared))) ( ))",
        "description": "Obtain shared session level advisory lock if available",
        "detail": "[DESCRIPTION]: Obtain shared session level advisory lock if available<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-admin.html"
        ]
    },
    {
        "type": "function",
        "keyword": "pg_try_advisory_lock_shared(key1 int, key2 int)",
        "tree": "(func_application (func_name (type_function_name (identifier pg_try_advisory_lock_shared))) ( ))",
        "description": "Obtain shared session level advisory lock if available",
        "detail": "[DESCRIPTION]: Obtain shared session level advisory lock if available<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-admin.html"
        ]
    },
    {
        "type": "function",
        "keyword": "pg_try_advisory_xact_lock(key bigint)",
        "tree": "(func_application (func_name (type_function_name (identifier pg_try_advisory_xact_lock))) ( ))",
        "description": "Obtain exclusive transaction level advisory lock if available",
        "detail": "[DESCRIPTION]: Obtain exclusive transaction level advisory lock if available<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-admin.html"
        ]
    },
    {
        "type": "function",
        "keyword": "pg_try_advisory_xact_lock(key1 int, key2 int)",
        "tree": "(func_application (func_name (type_function_name (identifier pg_try_advisory_xact_lock))) ( ))",
        "description": "Obtain exclusive transaction level advisory lock if available",
        "detail": "[DESCRIPTION]: Obtain exclusive transaction level advisory lock if available<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-admin.html"
        ]
    },
    {
        "type": "function",
        "keyword": "pg_try_advisory_xact_lock_shared(key bigint)",
        "tree": "(func_application (func_name (type_function_name (identifier pg_try_advisory_xact_lock_shared))) ( ))",
        "description": "Obtain shared transaction level advisory lock if available",
        "detail": "[DESCRIPTION]: Obtain shared transaction level advisory lock if available<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-admin.html"
        ]
    },
    {
        "type": "function",
        "keyword": "pg_try_advisory_xact_lock_shared(key1 int, key2 int)",
        "tree": "(func_application (func_name (type_function_name (identifier pg_try_advisory_xact_lock_shared))) ( ))",
        "description": "Obtain shared transaction level advisory lock if available",
        "detail": "[DESCRIPTION]: Obtain shared transaction level advisory lock if available<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-admin.html"
        ]
    },
    {
        "type": "function",
        "keyword": "pg_event_trigger_table_rewrite_oid()",
        "tree": "(func_application (func_name (type_function_name (identifier pg_event_trigger_table_rewrite_oid))) ( ))",
        "description": "The OID of the table about to be rewritten.",
        "detail": "[DESCRIPTION]: The OID of the table about to be rewritten.<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-event-triggers.html"
        ]
    },
    {
        "type": "function",
        "keyword": "pg_event_trigger_table_rewrite_reason()",
        "tree": "(func_application (func_name (type_function_name (identifier pg_event_trigger_table_rewrite_reason))) ( ))",
        "description": "The reason code(s) explaining the reason for rewriting. The exact meaning of the codes is release dependent.",
        "detail": "[DESCRIPTION]: The reason code(s) explaining the reason for rewriting. The exact meaning of the codes is release dependent.<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-event-triggers.html"
        ]
    },
    {
        "type": "function",
        "keyword": "age(timestamp, timestamp)",
        "tree": "(func_application (func_name (builtin_function_name age)) ( ))",
        "description": "Subtract arguments, producing a \u201csymbolic\u201d result that uses years and months, rather than just days",
        "detail": "[DESCRIPTION]: Subtract arguments, producing a \u201csymbolic\u201d result that uses years and months, rather than just days<sep>[EXAMPLE]: age(timestamp '2001-04-10', timestamp '1957-06-13')<sep>[RESULT]: 43 years 9 mons 27 days<sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "age(timestamp '2001-04-10', timestamp '1957-06-13')",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-datetime.html"
        ]
    },
    {
        "type": "function",
        "keyword": "age(timestamp)",
        "tree": "(func_application (func_name (builtin_function_name age)) ( ))",
        "description": "Subtract from current_date (at midnight)",
        "detail": "[DESCRIPTION]: Subtract from current_date (at midnight)<sep>[EXAMPLE]: age(timestamp '1957-06-13')<sep>[RESULT]: 43 years 8 mons 3 days<sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "age(timestamp '1957-06-13')",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-datetime.html"
        ]
    },
    {
        "type": "function",
        "keyword": "clock_timestamp()",
        "tree": "(func_application (func_name (builtin_function_name clock_timestamp)) ( ))",
        "description": "Current date and time (changes during statement execution); see Section\u00a09.9.4",
        "detail": "[DESCRIPTION]: Current date and time (changes during statement execution); see Section\u00a09.9.4<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-datetime.html"
        ]
    },
    {
        "type": "function",
        "keyword": "current_date",
        "tree": "(func_expr_common_subexpr current_date)",
        "description": "Current date; see Section\u00a09.9.4",
        "detail": "[DESCRIPTION]: Current date; see Section\u00a09.9.4<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-datetime.html"
        ]
    },
    {
        "type": "function",
        "keyword": "current_time",
        "tree": "(func_expr_common_subexpr current_time)",
        "description": "Current time of day; see Section\u00a09.9.4",
        "detail": "[DESCRIPTION]: Current time of day; see Section\u00a09.9.4<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-datetime.html"
        ]
    },
    {
        "type": "function",
        "keyword": "current_timestamp",
        "tree": "(func_expr_common_subexpr current_timestamp)",
        "description": "Current date and time (start of current transaction); see Section\u00a09.9.4",
        "detail": "[DESCRIPTION]: Current date and time (start of current transaction); see Section\u00a09.9.4<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-datetime.html"
        ]
    },
    {
        "type": "function",
        "keyword": "date_part(text, timestamp)",
        "tree": "(func_application (func_name (builtin_function_name date_part)) ( ))",
        "description": "Get subfield (equivalent to extract); see Section\u00a09.9.1",
        "detail": "[DESCRIPTION]: Get subfield (equivalent to extract); see Section\u00a09.9.1<sep>[EXAMPLE]: date_part('hour', timestamp '2001-02-16 20:38:40')<sep>[RESULT]: 20<sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "date_part('hour', timestamp '2001-02-16 20:38:40')",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-datetime.html"
        ]
    },
    {
        "type": "function",
        "keyword": "date_part(text, interval)",
        "tree": "(func_application (func_name (builtin_function_name date_part)) ( ))",
        "description": "Get subfield (equivalent to extract); see Section\u00a09.9.1",
        "detail": "[DESCRIPTION]: Get subfield (equivalent to extract); see Section\u00a09.9.1<sep>[EXAMPLE]: date_part('month', interval '2 years 3 months')<sep>[RESULT]: 3<sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "date_part('month', interval '2 years 3 months')",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-datetime.html"
        ]
    },
    {
        "type": "function",
        "keyword": "date_trunc(text, timestamp)",
        "tree": "(func_application (func_name (builtin_function_name date_trunc)) ( ))",
        "description": "Truncate to specified precision; see Section\u00a09.9.2",
        "detail": "[DESCRIPTION]: Truncate to specified precision; see Section\u00a09.9.2<sep>[EXAMPLE]: date_trunc('hour', timestamp '2001-02-16 20:38:40')<sep>[RESULT]: 2001-02-16 20:00:00<sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "date_trunc('hour', timestamp '2001-02-16 20:38:40')",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-datetime.html"
        ]
    },
    {
        "type": "function",
        "keyword": "date_trunc(text, timestamp with time zone, text)",
        "tree": "(func_application (func_name (builtin_function_name date_trunc)) ( ))",
        "description": "Truncate to specified precision in the specified time zone; see Section\u00a09.9.2",
        "detail": "[DESCRIPTION]: Truncate to specified precision in the specified time zone; see Section\u00a09.9.2<sep>[EXAMPLE]: date_trunc('day', timestamptz '2001-02-16 20:38:40+00', 'Australia/Sydney')<sep>[RESULT]: 2001-02-16 13:00:00+00<sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "date_trunc('day', timestamptz '2001-02-16 20:38:40+00', 'Australia/Sydney')",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-datetime.html"
        ]
    },
    {
        "type": "function",
        "keyword": "date_trunc(text, interval)",
        "tree": "(func_application (func_name (builtin_function_name date_trunc)) ( ))",
        "description": "Truncate to specified precision; see Section\u00a09.9.2",
        "detail": "[DESCRIPTION]: Truncate to specified precision; see Section\u00a09.9.2<sep>[EXAMPLE]: date_trunc('hour', interval '2 days 3 hours 40 minutes')<sep>[RESULT]: 2 days 03:00:00<sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "date_trunc('hour', interval '2 days 3 hours 40 minutes')",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-datetime.html"
        ]
    },
    {
        "type": "function",
        "keyword": "extract(field from interval)",
        "tree": "(func_expr_common_subexpr extract ( ))",
        "description": "Get subfield; see Section\u00a09.9.1",
        "detail": "[DESCRIPTION]: Get subfield; see Section\u00a09.9.1<sep>[EXAMPLE]: extract(month from interval '2 years 3 months')<sep>[RESULT]: 3<sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "extract(month from interval '2 years 3 months')",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-datetime.html"
        ]
    },
    {
        "type": "function",
        "keyword": "isfinite(date)",
        "tree": "(func_application (func_name (builtin_function_name isfinite)) ( ))",
        "description": "Test for finite date (not +/-infinity)",
        "detail": "[DESCRIPTION]: Test for finite date (not +/-infinity)<sep>[EXAMPLE]: isfinite(date '2001-02-16')<sep>[RESULT]: true<sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "isfinite(date '2001-02-16')",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-datetime.html"
        ]
    },
    {
        "type": "function",
        "keyword": "isfinite(timestamp)",
        "tree": "(func_application (func_name (builtin_function_name isfinite)) ( ))",
        "description": "Test for finite time stamp (not +/-infinity)",
        "detail": "[DESCRIPTION]: Test for finite time stamp (not +/-infinity)<sep>[EXAMPLE]: isfinite(timestamp '2001-02-16 21:28:30')<sep>[RESULT]: true<sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "isfinite(timestamp '2001-02-16 21:28:30')",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-datetime.html"
        ]
    },
    {
        "type": "function",
        "keyword": "isfinite(interval)",
        "tree": "(func_application (func_name (builtin_function_name isfinite)) ( ))",
        "description": "Test for finite interval",
        "detail": "[DESCRIPTION]: Test for finite interval<sep>[EXAMPLE]: isfinite(interval '4 hours')<sep>[RESULT]: true<sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "isfinite(interval '4 hours')",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-datetime.html"
        ]
    },
    {
        "type": "function",
        "keyword": "justify_days(interval)",
        "tree": "(func_application (func_name (builtin_function_name justify_days)) ( ))",
        "description": "Adjust interval so 30-day time periods are represented as months",
        "detail": "[DESCRIPTION]: Adjust interval so 30-day time periods are represented as months<sep>[EXAMPLE]: justify_days(interval '35 days')<sep>[RESULT]: 1 mon 5 days<sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "justify_days(interval '35 days')",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-datetime.html"
        ]
    },
    {
        "type": "function",
        "keyword": "justify_hours(interval)",
        "tree": "(func_application (func_name (builtin_function_name justify_hours)) ( ))",
        "description": "Adjust interval so 24-hour time periods are represented as days",
        "detail": "[DESCRIPTION]: Adjust interval so 24-hour time periods are represented as days<sep>[EXAMPLE]: justify_hours(interval '27 hours')<sep>[RESULT]: 1 day 03:00:00<sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "justify_hours(interval '27 hours')",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-datetime.html"
        ]
    },
    {
        "type": "function",
        "keyword": "justify_interval(interval)",
        "tree": "(func_application (func_name (builtin_function_name justify_interval)) ( ))",
        "description": "Adjust interval using justify_days and justify_hours, with additional sign adjustments",
        "detail": "[DESCRIPTION]: Adjust interval using justify_days and justify_hours, with additional sign adjustments<sep>[EXAMPLE]: justify_interval(interval '1 mon -1 hour')<sep>[RESULT]: 29 days 23:00:00<sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "justify_interval(interval '1 mon -1 hour')",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-datetime.html"
        ]
    },
    {
        "type": "function",
        "keyword": "localtime",
        "tree": "(func_expr_common_subexpr localtime)",
        "description": "Current time of day; see Section\u00a09.9.4",
        "detail": "[DESCRIPTION]: Current time of day; see Section\u00a09.9.4<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-datetime.html"
        ]
    },
    {
        "type": "function",
        "keyword": "localtimestamp",
        "tree": "(func_expr_common_subexpr localtimestamp)",
        "description": "Current date and time (start of current transaction); see Section\u00a09.9.4",
        "detail": "[DESCRIPTION]: Current date and time (start of current transaction); see Section\u00a09.9.4<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-datetime.html"
        ]
    },
    {
        "type": "function",
        "keyword": "make_date(year int, month int, day int)",
        "tree": "(func_application (func_name (builtin_function_name make_date)) ( ))",
        "description": "Create date from year, month and day fields",
        "detail": "[DESCRIPTION]: Create date from year, month and day fields<sep>[EXAMPLE]: make_date(2013, 7, 15)<sep>[RESULT]: 2013-07-15<sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "make_date(2013, 7, 15)",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-datetime.html"
        ]
    },
    {
        "type": "function",
        "keyword": "make_interval(years int DEFAULT 0, months int DEFAULT 0, weeks int DEFAULT 0, days int DEFAULT 0, hours int DEFAULT 0, mins int DEFAULT 0, secs double precision DEFAULT 0.0)",
        "tree": "(func_application (func_name (builtin_function_name make_interval)) ( ))",
        "description": "Create interval from years, months, weeks, days, hours, minutes and seconds fields",
        "detail": "[DESCRIPTION]: Create interval from years, months, weeks, days, hours, minutes and seconds fields<sep>[EXAMPLE]: make_interval(days => 10)<sep>[RESULT]: 10 days<sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "make_interval(days => 10)",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-datetime.html"
        ]
    },
    {
        "type": "function",
        "keyword": "make_time(hour int, min int, sec double precision)",
        "tree": "(func_application (func_name (builtin_function_name make_time)) ( ))",
        "description": "Create time from hour, minute and seconds fields",
        "detail": "[DESCRIPTION]: Create time from hour, minute and seconds fields<sep>[EXAMPLE]: make_time(8, 15, 23.5)<sep>[RESULT]: 08:15:23.5<sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "make_time(8, 15, 23.5)",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-datetime.html"
        ]
    },
    {
        "type": "function",
        "keyword": "make_timestamp(year int, month int, day int, hour int, min int, sec double precision)",
        "tree": "(func_application (func_name (builtin_function_name make_timestamp)) ( ))",
        "description": "Create timestamp from year, month, day, hour, minute and seconds fields",
        "detail": "[DESCRIPTION]: Create timestamp from year, month, day, hour, minute and seconds fields<sep>[EXAMPLE]: make_timestamp(2013, 7, 15, 8, 15, 23.5)<sep>[RESULT]: 2013-07-15 08:15:23.5<sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "make_timestamp(2013, 7, 15, 8, 15, 23.5)",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-datetime.html"
        ]
    },
    {
        "type": "function",
        "keyword": "make_timestamptz(year int, month int, day int, hour int, min int, sec double precision, [ timezone text ])",
        "tree": "(func_application (func_name (builtin_function_name make_timestamptz)) ( ))",
        "description": "Create timestamp with time zone from year, month, day, hour, minute and seconds fields; if timezone is not specified, the current time zone is used",
        "detail": "[DESCRIPTION]: Create timestamp with time zone from year, month, day, hour, minute and seconds fields; if timezone is not specified, the current time zone is used<sep>[EXAMPLE]: make_timestamptz(2013, 7, 15, 8, 15, 23.5)<sep>[RESULT]: 2013-07-15 08:15:23.5+01<sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "make_timestamptz(2013, 7, 15, 8, 15, 23.5)",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-datetime.html"
        ]
    },
    {
        "type": "function",
        "keyword": "now()",
        "tree": "(func_application (func_name (builtin_function_name now)) ( ))",
        "description": "Current date and time (start of current transaction); see Section\u00a09.9.4",
        "detail": "[DESCRIPTION]: Current date and time (start of current transaction); see Section\u00a09.9.4<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-datetime.html"
        ]
    },
    {
        "type": "function",
        "keyword": "statement_timestamp()",
        "tree": "(func_application (func_name (builtin_function_name statement_timestamp)) ( ))",
        "description": "Current date and time (start of current statement); see Section\u00a09.9.4",
        "detail": "[DESCRIPTION]: Current date and time (start of current statement); see Section\u00a09.9.4<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-datetime.html"
        ]
    },
    {
        "type": "function",
        "keyword": "timeofday()",
        "tree": "(func_application (func_name (builtin_function_name timeofday)) ( ))",
        "description": "Current date and time (like clock_timestamp, but as a text string); see Section\u00a09.9.4",
        "detail": "[DESCRIPTION]: Current date and time (like clock_timestamp, but as a text string); see Section\u00a09.9.4<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-datetime.html"
        ]
    },
    {
        "type": "function",
        "keyword": "transaction_timestamp()",
        "tree": "(func_application (func_name (builtin_function_name transaction_timestamp)) ( ))",
        "description": "Current date and time (start of current transaction); see Section\u00a09.9.4",
        "detail": "[DESCRIPTION]: Current date and time (start of current transaction); see Section\u00a09.9.4<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-datetime.html"
        ]
    },
    {
        "type": "function",
        "keyword": "to_timestamp(double precision)",
        "tree": "(func_application (func_name (builtin_function_name to_timestamp)) ( ))",
        "description": "Convert Unix epoch (seconds since 1970-01-01 00:00:00+00) to timestamp",
        "detail": "[DESCRIPTION]: Convert Unix epoch (seconds since 1970-01-01 00:00:00+00) to timestamp<sep>[EXAMPLE]: to_timestamp(1284352323)<sep>[RESULT]: 2010-09-13 04:32:03+00<sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "to_timestamp(1284352323)",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-datetime.html"
        ]
    },
    {
        "type": "function",
        "keyword": "abs(x)",
        "tree": "(func_application (func_name (builtin_function_name abs)) ( ))",
        "description": "absolute value",
        "detail": "[DESCRIPTION]: absolute value<sep>[EXAMPLE]: abs(-17.4)<sep>[RESULT]: 17.4<sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "abs(-17.4)",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-math.html"
        ]
    },
    {
        "type": "function",
        "keyword": "cbrt(dp)",
        "tree": "(func_application (func_name (builtin_function_name cbrt)) ( ))",
        "description": "cube root",
        "detail": "[DESCRIPTION]: cube root<sep>[EXAMPLE]: cbrt(27.0)<sep>[RESULT]: 3<sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "cbrt(27.0)",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-math.html"
        ]
    },
    {
        "type": "function",
        "keyword": "ceil(dp or numeric)",
        "tree": "(func_application (func_name (builtin_function_name ceil)) ( ))",
        "description": "nearest integer greater than or equal to argument",
        "detail": "[DESCRIPTION]: nearest integer greater than or equal to argument<sep>[EXAMPLE]: ceil(-42.8)<sep>[RESULT]: -42<sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "ceil(-42.8)",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-math.html"
        ]
    },
    {
        "type": "function",
        "keyword": "ceiling(dp or numeric)",
        "tree": "(func_application (func_name (builtin_function_name ceiling)) ( ))",
        "description": "nearest integer greater than or equal to argument (same as ceil)",
        "detail": "[DESCRIPTION]: nearest integer greater than or equal to argument (same as ceil)<sep>[EXAMPLE]: ceiling(-95.3)<sep>[RESULT]: -95<sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "ceiling(-95.3)",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-math.html"
        ]
    },
    {
        "type": "function",
        "keyword": "degrees(dp)",
        "tree": "(func_application (func_name (builtin_function_name degrees)) ( ))",
        "description": "radians to degrees",
        "detail": "[DESCRIPTION]: radians to degrees<sep>[EXAMPLE]: degrees(0.5)<sep>[RESULT]: 28.6478897565412<sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "degrees(0.5)",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-math.html"
        ]
    },
    {
        "type": "function",
        "keyword": "div(y numeric, x numeric)",
        "tree": "(func_application (func_name (builtin_function_name div)) ( ))",
        "description": "integer quotient of y/x",
        "detail": "[DESCRIPTION]: integer quotient of y/x<sep>[EXAMPLE]: div(9,4)<sep>[RESULT]: 2<sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "div(9,4)",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-math.html"
        ]
    },
    {
        "type": "function",
        "keyword": "exp(dp or numeric)",
        "tree": "(func_application (func_name (builtin_function_name exp)) ( ))",
        "description": "exponential",
        "detail": "[DESCRIPTION]: exponential<sep>[EXAMPLE]: exp(1.0)<sep>[RESULT]: 2.71828182845905<sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "exp(1.0)",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-math.html"
        ]
    },
    {
        "type": "function",
        "keyword": "factorial(bigint)",
        "tree": "(func_application (func_name (builtin_function_name factorial)) ( ))",
        "description": "factorial",
        "detail": "[DESCRIPTION]: factorial<sep>[EXAMPLE]: factorial(5)<sep>[RESULT]: 120<sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "factorial(5)",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-math.html"
        ]
    },
    {
        "type": "function",
        "keyword": "floor(dp or numeric)",
        "tree": "(func_application (func_name (builtin_function_name floor)) ( ))",
        "description": "nearest integer less than or equal to argument",
        "detail": "[DESCRIPTION]: nearest integer less than or equal to argument<sep>[EXAMPLE]: floor(-42.8)<sep>[RESULT]: -43<sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "floor(-42.8)",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-math.html"
        ]
    },
    {
        "type": "function",
        "keyword": "ln(dp or numeric)",
        "tree": "(func_application (func_name (builtin_function_name ln)) ( ))",
        "description": "natural logarithm",
        "detail": "[DESCRIPTION]: natural logarithm<sep>[EXAMPLE]: ln(2.0)<sep>[RESULT]: 0.693147180559945<sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "ln(2.0)",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-math.html"
        ]
    },
    {
        "type": "function",
        "keyword": "log(dp or numeric)",
        "tree": "(func_application (func_name (builtin_function_name log)) ( ))",
        "description": "base 10 logarithm",
        "detail": "[DESCRIPTION]: base 10 logarithm<sep>[EXAMPLE]: log(100.0)<sep>[RESULT]: 2<sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "log(100.0)",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-math.html"
        ]
    },
    {
        "type": "function",
        "keyword": "log10(dp or numeric)",
        "tree": "(func_application (func_name (builtin_function_name log10)) ( ))",
        "description": "base 10 logarithm",
        "detail": "[DESCRIPTION]: base 10 logarithm<sep>[EXAMPLE]: log10(100.0)<sep>[RESULT]: 2<sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "log10(100.0)",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-math.html"
        ]
    },
    {
        "type": "function",
        "keyword": "log(b numeric, x numeric)",
        "tree": "(func_application (func_name (builtin_function_name log)) ( ))",
        "description": "logarithm to base b",
        "detail": "[DESCRIPTION]: logarithm to base b<sep>[EXAMPLE]: log(2.0, 64.0)<sep>[RESULT]: 6.0000000000<sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "log(2.0, 64.0)",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-math.html"
        ]
    },
    {
        "type": "function",
        "keyword": "mod(y, x)",
        "tree": "(func_application (func_name (builtin_function_name mod)) ( ))",
        "description": "remainder of y/x",
        "detail": "[DESCRIPTION]: remainder of y/x<sep>[EXAMPLE]: mod(9,4)<sep>[RESULT]: 1<sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "mod(9,4)",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-math.html"
        ]
    },
    {
        "type": "function",
        "keyword": "pi()",
        "tree": "(func_application (func_name (builtin_function_name pi)) ( ))",
        "description": "\u201c\u03c0\u201d constant",
        "detail": "[DESCRIPTION]: \u201c\u03c0\u201d constant<sep>[EXAMPLE]: pi()<sep>[RESULT]: 3.14159265358979<sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "pi()",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-math.html"
        ]
    },
    {
        "type": "function",
        "keyword": "power(a dp, b dp)",
        "tree": "(func_application (func_name (builtin_function_name power)) ( ))",
        "description": "a raised to the power of b",
        "detail": "[DESCRIPTION]: a raised to the power of b<sep>[EXAMPLE]: power(9.0, 3.0)<sep>[RESULT]: 729<sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "power(9.0, 3.0)",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-math.html"
        ]
    },
    {
        "type": "function",
        "keyword": "power(a numeric, b numeric)",
        "tree": "(func_application (func_name (builtin_function_name power)) ( ))",
        "description": "a raised to the power of b",
        "detail": "[DESCRIPTION]: a raised to the power of b<sep>[EXAMPLE]: power(9.0, 3.0)<sep>[RESULT]: 729<sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "power(9.0, 3.0)",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-math.html"
        ]
    },
    {
        "type": "function",
        "keyword": "radians(dp)",
        "tree": "(func_application (func_name (builtin_function_name radians)) ( ))",
        "description": "degrees to radians",
        "detail": "[DESCRIPTION]: degrees to radians<sep>[EXAMPLE]: radians(45.0)<sep>[RESULT]: 0.785398163397448<sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "radians(45.0)",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-math.html"
        ]
    },
    {
        "type": "function",
        "keyword": "round(dp or numeric)",
        "tree": "(func_application (func_name (builtin_function_name round)) ( ))",
        "description": "round to nearest integer",
        "detail": "[DESCRIPTION]: round to nearest integer<sep>[EXAMPLE]: round(42.4)<sep>[RESULT]: 42<sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "round(42.4)",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-math.html"
        ]
    },
    {
        "type": "function",
        "keyword": "round(v numeric, s int)",
        "tree": "(func_application (func_name (builtin_function_name round)) ( ))",
        "description": "round to s decimal places",
        "detail": "[DESCRIPTION]: round to s decimal places<sep>[EXAMPLE]: round(42.4382, 2)<sep>[RESULT]: 42.44<sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "round(42.4382, 2)",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-math.html"
        ]
    },
    {
        "type": "function",
        "keyword": "scale(numeric)",
        "tree": "(func_application (func_name (builtin_function_name scale)) ( ))",
        "description": "scale of the argument (the number of decimal digits in the fractional part)",
        "detail": "[DESCRIPTION]: scale of the argument (the number of decimal digits in the fractional part)<sep>[EXAMPLE]: scale(8.41)<sep>[RESULT]: 2<sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "scale(8.41)",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-math.html"
        ]
    },
    {
        "type": "function",
        "keyword": "sign(dp or numeric)",
        "tree": "(func_application (func_name (builtin_function_name sign)) ( ))",
        "description": "sign of the argument (-1, 0, +1)",
        "detail": "[DESCRIPTION]: sign of the argument (-1, 0, +1)<sep>[EXAMPLE]: sign(-8.4)<sep>[RESULT]: -1<sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "sign(-8.4)",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-math.html"
        ]
    },
    {
        "type": "function",
        "keyword": "sqrt(dp or numeric)",
        "tree": "(func_application (func_name (builtin_function_name sqrt)) ( ))",
        "description": "square root",
        "detail": "[DESCRIPTION]: square root<sep>[EXAMPLE]: sqrt(2.0)<sep>[RESULT]: 1.4142135623731<sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "sqrt(2.0)",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-math.html"
        ]
    },
    {
        "type": "function",
        "keyword": "trunc(dp or numeric)",
        "tree": "(func_application (func_name (builtin_function_name trunc)) ( ))",
        "description": "truncate toward zero",
        "detail": "[DESCRIPTION]: truncate toward zero<sep>[EXAMPLE]: trunc(42.8)<sep>[RESULT]: 42<sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "trunc(42.8)",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-math.html"
        ]
    },
    {
        "type": "function",
        "keyword": "trunc(v numeric, s int)",
        "tree": "(func_application (func_name (builtin_function_name trunc)) ( ))",
        "description": "truncate to s decimal places",
        "detail": "[DESCRIPTION]: truncate to s decimal places<sep>[EXAMPLE]: trunc(42.4382, 2)<sep>[RESULT]: 42.43<sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "trunc(42.4382, 2)",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-math.html"
        ]
    },
    {
        "type": "function",
        "keyword": "width_bucket(operand dp, b1 dp, b2 dp, count int)",
        "tree": "(func_application (func_name (builtin_function_name width_bucket)) ( ))",
        "description": "return the bucket number to which operand would be assigned in a histogram having count equal-width buckets spanning the range b1 to b2; returns 0 or count+1 for an input outside the range",
        "detail": "[DESCRIPTION]: return the bucket number to which operand would be assigned in a histogram having count equal-width buckets spanning the range b1 to b2; returns 0 or count+1 for an input outside the range<sep>[EXAMPLE]: width_bucket(5.35, 0.024, 10.06, 5)<sep>[RESULT]: 3<sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "width_bucket(5.35, 0.024, 10.06, 5)",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-math.html"
        ]
    },
    {
        "type": "function",
        "keyword": "width_bucket(operand numeric, b1 numeric, b2 numeric, count int)",
        "tree": "(func_application (func_name (builtin_function_name width_bucket)) ( ))",
        "description": "return the bucket number to which operand would be assigned in a histogram having count equal-width buckets spanning the range b1 to b2; returns 0 or count+1 for an input outside the range",
        "detail": "[DESCRIPTION]: return the bucket number to which operand would be assigned in a histogram having count equal-width buckets spanning the range b1 to b2; returns 0 or count+1 for an input outside the range<sep>[EXAMPLE]: width_bucket(5.35, 0.024, 10.06, 5)<sep>[RESULT]: 3<sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "width_bucket(5.35, 0.024, 10.06, 5)",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-math.html"
        ]
    },
    {
        "type": "function",
        "keyword": "width_bucket(operand anyelement, thresholds anyarray)",
        "tree": "(func_application (func_name (builtin_function_name width_bucket)) ( ))",
        "description": "return the bucket number to which operand would be assigned given an array listing the lower bounds of the buckets; returns 0 for an input less than the first lower bound; the thresholds array must be sorted, smallest first, or unexpected results will be obtained",
        "detail": "[DESCRIPTION]: return the bucket number to which operand would be assigned given an array listing the lower bounds of the buckets; returns 0 for an input less than the first lower bound; the thresholds array must be sorted, smallest first, or unexpected results will be obtained<sep>[EXAMPLE]: width_bucket(now(), array['yesterday', 'today', 'tomorrow']::timestamptz[])<sep>[RESULT]: 2<sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "width_bucket(now(), array['yesterday', 'today', 'tomorrow']::timestamptz[])",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-math.html"
        ]
    },
    {
        "type": "function",
        "keyword": "random()",
        "tree": "(func_application (func_name (builtin_function_name random)) ( ))",
        "description": "random value in the range 0.0 <= x < 1.0",
        "detail": "[DESCRIPTION]: random value in the range 0.0 <= x < 1.0<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-math.html"
        ]
    },
    {
        "type": "function",
        "keyword": "setseed(dp)",
        "tree": "(func_application (func_name (builtin_function_name setseed)) ( ))",
        "description": "set seed for subsequent random() calls (value between -1.0 and 1.0, inclusive)",
        "detail": "[DESCRIPTION]: set seed for subsequent random() calls (value between -1.0 and 1.0, inclusive)<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-math.html"
        ]
    },
    {
        "type": "function",
        "keyword": "acos(x)",
        "tree": "(func_application (func_name (builtin_function_name acos)) ( ))",
        "description": "inverse cosine",
        "detail": "[DESCRIPTION]: inverse cosine<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-math.html"
        ]
    },
    {
        "type": "function",
        "keyword": "asin(x)",
        "tree": "(func_application (func_name (builtin_function_name asin)) ( ))",
        "description": "inverse sine",
        "detail": "[DESCRIPTION]: inverse sine<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-math.html"
        ]
    },
    {
        "type": "function",
        "keyword": "atan(x)",
        "tree": "(func_application (func_name (builtin_function_name atan)) ( ))",
        "description": "inverse tangent",
        "detail": "[DESCRIPTION]: inverse tangent<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-math.html"
        ]
    },
    {
        "type": "function",
        "keyword": "atan2(y,x)",
        "tree": "(func_application (func_name (builtin_function_name atan2)) ( ))",
        "description": "inverse tangent ofy/x",
        "detail": "[DESCRIPTION]: inverse tangent ofy/x<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-math.html"
        ]
    },
    {
        "type": "function",
        "keyword": "cos(x)",
        "tree": "(func_application (func_name (builtin_function_name cos)) ( ))",
        "description": "cosine",
        "detail": "[DESCRIPTION]: cosine<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-math.html"
        ]
    },
    {
        "type": "function",
        "keyword": "cot(x)",
        "tree": "(func_application (func_name (builtin_function_name cot)) ( ))",
        "description": "cotangent",
        "detail": "[DESCRIPTION]: cotangent<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-math.html"
        ]
    },
    {
        "type": "function",
        "keyword": "sin(x)",
        "tree": "(func_application (func_name (builtin_function_name sin)) ( ))",
        "description": "sine",
        "detail": "[DESCRIPTION]: sine<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-math.html"
        ]
    },
    {
        "type": "function",
        "keyword": "tan(x)",
        "tree": "(func_application (func_name (builtin_function_name tan)) ( ))",
        "description": "tangent",
        "detail": "[DESCRIPTION]: tangent<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-math.html"
        ]
    },
    {
        "type": "function",
        "keyword": "acosd(x)",
        "tree": "(func_application (func_name (builtin_function_name acosd)) ( ))",
        "description": "inverse cosine",
        "detail": "[DESCRIPTION]: inverse cosine<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-math.html"
        ]
    },
    {
        "type": "function",
        "keyword": "asind(x)",
        "tree": "(func_application (func_name (builtin_function_name asind)) ( ))",
        "description": "inverse sine",
        "detail": "[DESCRIPTION]: inverse sine<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-math.html"
        ]
    },
    {
        "type": "function",
        "keyword": "atand(x)",
        "tree": "(func_application (func_name (builtin_function_name atand)) ( ))",
        "description": "inverse tangent",
        "detail": "[DESCRIPTION]: inverse tangent<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-math.html"
        ]
    },
    {
        "type": "function",
        "keyword": "atan2d(y,x)",
        "tree": "(func_application (func_name (builtin_function_name atan2d)) ( ))",
        "description": "inverse tangent ofy/x",
        "detail": "[DESCRIPTION]: inverse tangent ofy/x<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-math.html"
        ]
    },
    {
        "type": "function",
        "keyword": "cosd(x)",
        "tree": "(func_application (func_name (builtin_function_name cosd)) ( ))",
        "description": "cosine",
        "detail": "[DESCRIPTION]: cosine<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-math.html"
        ]
    },
    {
        "type": "function",
        "keyword": "cotd(x)",
        "tree": "(func_application (func_name (builtin_function_name cotd)) ( ))",
        "description": "cotangent",
        "detail": "[DESCRIPTION]: cotangent<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-math.html"
        ]
    },
    {
        "type": "function",
        "keyword": "sind(x)",
        "tree": "(func_application (func_name (builtin_function_name sind)) ( ))",
        "description": "sine",
        "detail": "[DESCRIPTION]: sine<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-math.html"
        ]
    },
    {
        "type": "function",
        "keyword": "tand(x)",
        "tree": "(func_application (func_name (builtin_function_name tand)) ( ))",
        "description": "tangent",
        "detail": "[DESCRIPTION]: tangent<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-math.html"
        ]
    },
    {
        "type": "function",
        "keyword": "sinh(x)",
        "tree": "(func_application (func_name (builtin_function_name sinh)) ( ))",
        "description": "hyperbolic sine",
        "detail": "[DESCRIPTION]: hyperbolic sine<sep>[EXAMPLE]: sinh(0)<sep>[RESULT]: 0<sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "sinh(0)",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-math.html"
        ]
    },
    {
        "type": "function",
        "keyword": "cosh(x)",
        "tree": "(func_application (func_name (builtin_function_name cosh)) ( ))",
        "description": "hyperbolic cosine",
        "detail": "[DESCRIPTION]: hyperbolic cosine<sep>[EXAMPLE]: cosh(0)<sep>[RESULT]: 1<sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "cosh(0)",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-math.html"
        ]
    },
    {
        "type": "function",
        "keyword": "tanh(x)",
        "tree": "(func_application (func_name (builtin_function_name tanh)) ( ))",
        "description": "hyperbolic tangent",
        "detail": "[DESCRIPTION]: hyperbolic tangent<sep>[EXAMPLE]: tanh(0)<sep>[RESULT]: 0<sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "tanh(0)",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-math.html"
        ]
    },
    {
        "type": "function",
        "keyword": "asinh(x)",
        "tree": "(func_application (func_name (builtin_function_name asinh)) ( ))",
        "description": "inverse hyperbolic sine",
        "detail": "[DESCRIPTION]: inverse hyperbolic sine<sep>[EXAMPLE]: asinh(0)<sep>[RESULT]: 0<sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "asinh(0)",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-math.html"
        ]
    },
    {
        "type": "function",
        "keyword": "acosh(x)",
        "tree": "(func_application (func_name (builtin_function_name acosh)) ( ))",
        "description": "inverse hyperbolic cosine",
        "detail": "[DESCRIPTION]: inverse hyperbolic cosine<sep>[EXAMPLE]: acosh(1)<sep>[RESULT]: 0<sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "acosh(1)",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-math.html"
        ]
    },
    {
        "type": "function",
        "keyword": "atanh(x)",
        "tree": "(func_application (func_name (builtin_function_name atanh)) ( ))",
        "description": "inverse hyperbolic tangent",
        "detail": "[DESCRIPTION]: inverse hyperbolic tangent<sep>[EXAMPLE]: atanh(0)<sep>[RESULT]: 0<sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "atanh(0)",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-math.html"
        ]
    },
    {
        "type": "function",
        "keyword": "generate_series(start, stop)",
        "tree": "(func_application (func_name (type_function_name (identifier generate_series))) ( ))",
        "description": "Generate a series of values, from start to stop with a step size of one",
        "detail": "[DESCRIPTION]: Generate a series of values, from start to stop with a step size of one<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-srf.html"
        ]
    },
    {
        "type": "function",
        "keyword": "generate_series(start, stop, step)",
        "tree": "(func_application (func_name (type_function_name (identifier generate_series))) ( ))",
        "description": "Generate a series of values, from start to stop with a step size of step",
        "detail": "[DESCRIPTION]: Generate a series of values, from start to stop with a step size of step<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-srf.html"
        ]
    },
    {
        "type": "function",
        "keyword": "generate_series(start, stop, step interval)",
        "tree": "(func_application (func_name (type_function_name (identifier generate_series))) ( ))",
        "description": "Generate a series of values, from start to stop with a step size of step",
        "detail": "[DESCRIPTION]: Generate a series of values, from start to stop with a step size of step<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-srf.html"
        ]
    },
    {
        "type": "function",
        "keyword": "generate_subscripts(array anyarray, dim int)",
        "tree": "(func_application (func_name (type_function_name (identifier generate_subscripts))) ( ))",
        "description": "Generate a series comprising the given array's subscripts.",
        "detail": "[DESCRIPTION]: Generate a series comprising the given array's subscripts.<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-srf.html"
        ]
    },
    {
        "type": "function",
        "keyword": "generate_subscripts(array anyarray, dim int, reverse boolean)",
        "tree": "(func_application (func_name (type_function_name (identifier generate_subscripts))) ( ))",
        "description": "Generate a series comprising the given array's subscripts. When reverse is true, the series is returned in reverse order.",
        "detail": "[DESCRIPTION]: Generate a series comprising the given array's subscripts. When reverse is true, the series is returned in reverse order.<sep>[EXAMPLE]: <sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-srf.html"
        ]
    },
    {
        "type": "function",
        "keyword": "area(object)",
        "tree": "(func_application (func_name (type_function_name (identifier area))) ( ))",
        "description": "area",
        "detail": "[DESCRIPTION]: area<sep>[EXAMPLE]: area(box '((0,0),(1,1))')<sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "area(box '((0,0),(1,1))')",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-geometry.html"
        ]
    },
    {
        "type": "function",
        "keyword": "center(object)",
        "tree": "(func_application (func_name (type_function_name (identifier center))) ( ))",
        "description": "center",
        "detail": "[DESCRIPTION]: center<sep>[EXAMPLE]: center(box '((0,0),(1,2))')<sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "center(box '((0,0),(1,2))')",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-geometry.html"
        ]
    },
    {
        "type": "function",
        "keyword": "diameter(circle)",
        "tree": "(func_application (func_name (type_function_name (identifier diameter))) ( ))",
        "description": "diameter of circle",
        "detail": "[DESCRIPTION]: diameter of circle<sep>[EXAMPLE]: diameter(circle '((0,0),2.0)')<sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "diameter(circle '((0,0),2.0)')",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-geometry.html"
        ]
    },
    {
        "type": "function",
        "keyword": "height(box)",
        "tree": "(func_application (func_name (type_function_name (identifier height))) ( ))",
        "description": "vertical size of box",
        "detail": "[DESCRIPTION]: vertical size of box<sep>[EXAMPLE]: height(box '((0,0),(1,1))')<sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "height(box '((0,0),(1,1))')",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-geometry.html"
        ]
    },
    {
        "type": "function",
        "keyword": "isclosed(path)",
        "tree": "(func_application (func_name (type_function_name (identifier isclosed))) ( ))",
        "description": "a closed path?",
        "detail": "[DESCRIPTION]: a closed path?<sep>[EXAMPLE]: isclosed(path '((0,0),(1,1),(2,0))')<sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "isclosed(path '((0,0),(1,1),(2,0))')",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-geometry.html"
        ]
    },
    {
        "type": "function",
        "keyword": "isopen(path)",
        "tree": "(func_application (func_name (type_function_name (identifier isopen))) ( ))",
        "description": "an open path?",
        "detail": "[DESCRIPTION]: an open path?<sep>[EXAMPLE]: isopen(path '[(0,0),(1,1),(2,0)]')<sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "isopen(path '[(0,0),(1,1),(2,0)]')",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-geometry.html"
        ]
    },
    {
        "type": "function",
        "keyword": "length(object)",
        "tree": "(func_application (func_name (builtin_function_name length)) ( ))",
        "description": "length",
        "detail": "[DESCRIPTION]: length<sep>[EXAMPLE]: length(path '((-1,0),(1,0))')<sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "length(path '((-1,0),(1,0))')",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-geometry.html"
        ]
    },
    {
        "type": "function",
        "keyword": "npoints(path)",
        "tree": "(func_application (func_name (type_function_name (identifier npoints))) ( ))",
        "description": "number of points",
        "detail": "[DESCRIPTION]: number of points<sep>[EXAMPLE]: npoints(path '[(0,0),(1,1),(2,0)]')<sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "npoints(path '[(0,0),(1,1),(2,0)]')",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-geometry.html"
        ]
    },
    {
        "type": "function",
        "keyword": "npoints(polygon)",
        "tree": "(func_application (func_name (type_function_name (identifier npoints))) ( ))",
        "description": "number of points",
        "detail": "[DESCRIPTION]: number of points<sep>[EXAMPLE]: npoints(polygon '((1,1),(0,0))')<sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "npoints(polygon '((1,1),(0,0))')",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-geometry.html"
        ]
    },
    {
        "type": "function",
        "keyword": "pclose(path)",
        "tree": "(func_application (func_name (type_function_name (identifier pclose))) ( ))",
        "description": "convert path to closed",
        "detail": "[DESCRIPTION]: convert path to closed<sep>[EXAMPLE]: pclose(path '[(0,0),(1,1),(2,0)]')<sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "pclose(path '[(0,0),(1,1),(2,0)]')",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-geometry.html"
        ]
    },
    {
        "type": "function",
        "keyword": "popen(path)",
        "tree": "(func_application (func_name (type_function_name (identifier popen))) ( ))",
        "description": "convert path to open",
        "detail": "[DESCRIPTION]: convert path to open<sep>[EXAMPLE]: popen(path '((0,0),(1,1),(2,0))')<sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "popen(path '((0,0),(1,1),(2,0))')",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-geometry.html"
        ]
    },
    {
        "type": "function",
        "keyword": "radius(circle)",
        "tree": "(func_application (func_name (type_function_name (identifier radius))) ( ))",
        "description": "radius of circle",
        "detail": "[DESCRIPTION]: radius of circle<sep>[EXAMPLE]: radius(circle '((0,0),2.0)')<sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "radius(circle '((0,0),2.0)')",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-geometry.html"
        ]
    },
    {
        "type": "function",
        "keyword": "width(box)",
        "tree": "(func_application (func_name (type_function_name (identifier width))) ( ))",
        "description": "horizontal size of box",
        "detail": "[DESCRIPTION]: horizontal size of box<sep>[EXAMPLE]: width(box '((0,0),(1,1))')<sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "width(box '((0,0),(1,1))')",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-geometry.html"
        ]
    },
    {
        "type": "function",
        "keyword": "box(circle)",
        "tree": "(func_application (func_name (type_function_name (identifier box))) ( ))",
        "description": "circle to box",
        "detail": "[DESCRIPTION]: circle to box<sep>[EXAMPLE]: box(circle '((0,0),2.0)')<sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "box(circle '((0,0),2.0)')",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-geometry.html"
        ]
    },
    {
        "type": "function",
        "keyword": "box(point)",
        "tree": "(func_application (func_name (type_function_name (identifier box))) ( ))",
        "description": "point to empty box",
        "detail": "[DESCRIPTION]: point to empty box<sep>[EXAMPLE]: box(point '(0,0)')<sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "box(point '(0,0)')",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-geometry.html"
        ]
    },
    {
        "type": "function",
        "keyword": "box(point, point)",
        "tree": "(func_application (func_name (type_function_name (identifier box))) ( ))",
        "description": "points to box",
        "detail": "[DESCRIPTION]: points to box<sep>[EXAMPLE]: box(point '(0,0)', point '(1,1)')<sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "box(point '(0,0)', point '(1,1)')",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-geometry.html"
        ]
    },
    {
        "type": "function",
        "keyword": "box(polygon)",
        "tree": "(func_application (func_name (type_function_name (identifier box))) ( ))",
        "description": "polygon to box",
        "detail": "[DESCRIPTION]: polygon to box<sep>[EXAMPLE]: box(polygon '((0,0),(1,1),(2,0))')<sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "box(polygon '((0,0),(1,1),(2,0))')",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-geometry.html"
        ]
    },
    {
        "type": "function",
        "keyword": "bound_box(box, box)",
        "tree": "(func_application (func_name (type_function_name (identifier bound_box))) ( ))",
        "description": "boxes to bounding box",
        "detail": "[DESCRIPTION]: boxes to bounding box<sep>[EXAMPLE]: bound_box(box '((0,0),(1,1))', box '((3,3),(4,4))')<sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "bound_box(box '((0,0),(1,1))', box '((3,3),(4,4))')",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-geometry.html"
        ]
    },
    {
        "type": "function",
        "keyword": "circle(box)",
        "tree": "(func_application (func_name (type_function_name (identifier circle))) ( ))",
        "description": "box to circle",
        "detail": "[DESCRIPTION]: box to circle<sep>[EXAMPLE]: circle(box '((0,0),(1,1))')<sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "circle(box '((0,0),(1,1))')",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-geometry.html"
        ]
    },
    {
        "type": "function",
        "keyword": "circle(point, double precision)",
        "tree": "(func_application (func_name (type_function_name (identifier circle))) ( ))",
        "description": "center and radius to circle",
        "detail": "[DESCRIPTION]: center and radius to circle<sep>[EXAMPLE]: circle(point '(0,0)', 2.0)<sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "circle(point '(0,0)', 2.0)",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-geometry.html"
        ]
    },
    {
        "type": "function",
        "keyword": "circle(polygon)",
        "tree": "(func_application (func_name (type_function_name (identifier circle))) ( ))",
        "description": "polygon to circle",
        "detail": "[DESCRIPTION]: polygon to circle<sep>[EXAMPLE]: circle(polygon '((0,0),(1,1),(2,0))')<sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "circle(polygon '((0,0),(1,1),(2,0))')",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-geometry.html"
        ]
    },
    {
        "type": "function",
        "keyword": "line(point, point)",
        "tree": "(func_application (func_name (type_function_name (identifier line))) ( ))",
        "description": "points to line",
        "detail": "[DESCRIPTION]: points to line<sep>[EXAMPLE]: line(point '(-1,0)', point '(1,0)')<sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "line(point '(-1,0)', point '(1,0)')",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-geometry.html"
        ]
    },
    {
        "type": "function",
        "keyword": "lseg(box)",
        "tree": "(func_application (func_name (type_function_name (identifier lseg))) ( ))",
        "description": "box diagonal to line segment",
        "detail": "[DESCRIPTION]: box diagonal to line segment<sep>[EXAMPLE]: lseg(box '((-1,0),(1,0))')<sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "lseg(box '((-1,0),(1,0))')",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-geometry.html"
        ]
    },
    {
        "type": "function",
        "keyword": "lseg(point, point)",
        "tree": "(func_application (func_name (type_function_name (identifier lseg))) ( ))",
        "description": "points to line segment",
        "detail": "[DESCRIPTION]: points to line segment<sep>[EXAMPLE]: lseg(point '(-1,0)', point '(1,0)')<sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "lseg(point '(-1,0)', point '(1,0)')",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-geometry.html"
        ]
    },
    {
        "type": "function",
        "keyword": "path(polygon)",
        "tree": "(func_application (func_name (type_function_name (identifier path))) ( ))",
        "description": "polygon to path",
        "detail": "[DESCRIPTION]: polygon to path<sep>[EXAMPLE]: path(polygon '((0,0),(1,1),(2,0))')<sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "path(polygon '((0,0),(1,1),(2,0))')",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-geometry.html"
        ]
    },
    {
        "type": "function",
        "keyword": "point(double precision, double precision)",
        "tree": "(func_application (func_name (type_function_name (identifier point))) ( ))",
        "description": "construct point",
        "detail": "[DESCRIPTION]: construct point<sep>[EXAMPLE]: point(23.4, -44.5)<sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "point(23.4, -44.5)",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-geometry.html"
        ]
    },
    {
        "type": "function",
        "keyword": "point(box)",
        "tree": "(func_application (func_name (type_function_name (identifier point))) ( ))",
        "description": "center of box",
        "detail": "[DESCRIPTION]: center of box<sep>[EXAMPLE]: point(box '((-1,0),(1,0))')<sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "point(box '((-1,0),(1,0))')",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-geometry.html"
        ]
    },
    {
        "type": "function",
        "keyword": "point(circle)",
        "tree": "(func_application (func_name (type_function_name (identifier point))) ( ))",
        "description": "center of circle",
        "detail": "[DESCRIPTION]: center of circle<sep>[EXAMPLE]: point(circle '((0,0),2.0)')<sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "point(circle '((0,0),2.0)')",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-geometry.html"
        ]
    },
    {
        "type": "function",
        "keyword": "point(lseg)",
        "tree": "(func_application (func_name (type_function_name (identifier point))) ( ))",
        "description": "center of line segment",
        "detail": "[DESCRIPTION]: center of line segment<sep>[EXAMPLE]: point(lseg '((-1,0),(1,0))')<sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "point(lseg '((-1,0),(1,0))')",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-geometry.html"
        ]
    },
    {
        "type": "function",
        "keyword": "point(polygon)",
        "tree": "(func_application (func_name (type_function_name (identifier point))) ( ))",
        "description": "center of polygon",
        "detail": "[DESCRIPTION]: center of polygon<sep>[EXAMPLE]: point(polygon '((0,0),(1,1),(2,0))')<sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "point(polygon '((0,0),(1,1),(2,0))')",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-geometry.html"
        ]
    },
    {
        "type": "function",
        "keyword": "polygon(box)",
        "tree": "(func_application (func_name (type_function_name (identifier polygon))) ( ))",
        "description": "box to 4-point polygon",
        "detail": "[DESCRIPTION]: box to 4-point polygon<sep>[EXAMPLE]: polygon(box '((0,0),(1,1))')<sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "polygon(box '((0,0),(1,1))')",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-geometry.html"
        ]
    },
    {
        "type": "function",
        "keyword": "polygon(circle)",
        "tree": "(func_application (func_name (type_function_name (identifier polygon))) ( ))",
        "description": "circle to 12-point polygon",
        "detail": "[DESCRIPTION]: circle to 12-point polygon<sep>[EXAMPLE]: polygon(circle '((0,0),2.0)')<sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "polygon(circle '((0,0),2.0)')",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-geometry.html"
        ]
    },
    {
        "type": "function",
        "keyword": "polygon(npts, circle)",
        "tree": "(func_application (func_name (type_function_name (identifier polygon))) ( ))",
        "description": "circle to npts-point polygon",
        "detail": "[DESCRIPTION]: circle to npts-point polygon<sep>[EXAMPLE]: polygon(12, circle '((0,0),2.0)')<sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "polygon(12, circle '((0,0),2.0)')",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-geometry.html"
        ]
    },
    {
        "type": "function",
        "keyword": "polygon(path)",
        "tree": "(func_application (func_name (type_function_name (identifier polygon))) ( ))",
        "description": "path to polygon",
        "detail": "[DESCRIPTION]: path to polygon<sep>[EXAMPLE]: polygon(path '((0,0),(1,1),(2,0))')<sep>[RESULT]: <sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "polygon(path '((0,0),(1,1),(2,0))')",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-geometry.html"
        ]
    },
    {
        "type": "function",
        "keyword": "octet_length(string)",
        "tree": "(func_application (func_name (builtin_function_name octet_length)) ( ))",
        "description": "Number of bytes in string",
        "detail": "[DESCRIPTION]: Number of bytes in string<sep>[EXAMPLE]: octet_length('jose')<sep>[RESULT]: 4<sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "octet_length('jose')",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-string.html"
        ]
    },
    {
        "type": "function",
        "keyword": "trim([both] bytes from string)",
        "tree": "(func_expr_common_subexpr trim ( ))",
        "description": "Remove the longest string containing only bytes appearing in bytes from the start and end of string",
        "detail": "[DESCRIPTION]: Remove the longest string containing only bytes appearing in bytes from the start and end of string<sep>[EXAMPLE]: trim('\\000\\001'::bytea from '\\000Tom\\001'::bytea)<sep>[RESULT]: Tom<sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "trim('\\000\\001'::bytea from '\\000Tom\\001'::bytea)",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-binarystring.html"
        ]
    },
    {
        "type": "function",
        "keyword": "btrim(string bytea, bytes bytea)",
        "tree": "(func_application (func_name (builtin_function_name btrim)) ( ))",
        "description": "Remove the longest string containing only bytes appearing in bytes from the start and end of string",
        "detail": "[DESCRIPTION]: Remove the longest string containing only bytes appearing in bytes from the start and end of string<sep>[EXAMPLE]: btrim('\\000trim\\001'::bytea, '\\000\\001'::bytea)<sep>[RESULT]: trim<sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "btrim('\\000trim\\001'::bytea, '\\000\\001'::bytea)",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-binarystring.html"
        ]
    },
    {
        "type": "function",
        "keyword": "decode(string text, format text)",
        "tree": "(func_application (func_name (type_function_name (identifier decode))) ( ))",
        "description": "Decode binary data from textual representation in string. Options for format are same as in encode.",
        "detail": "[DESCRIPTION]: Decode binary data from textual representation in string. Options for format are same as in encode.<sep>[EXAMPLE]: decode('MTIzAAE=', 'base64')<sep>[RESULT]: \\x3132330001<sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "decode('MTIzAAE=', 'base64')",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-string.html"
        ]
    },
    {
        "type": "function",
        "keyword": "encode(data bytea, format text)",
        "tree": "(func_application (func_name (type_function_name (identifier encode))) ( ))",
        "description": "Encode binary data into a textual representation. Supported formats are: base64, hex, escape. escape converts zero bytes and high-bit-set bytes to octal sequences (\\nnn) and doubles backslashes.",
        "detail": "[DESCRIPTION]: Encode binary data into a textual representation. Supported formats are: base64, hex, escape. escape converts zero bytes and high-bit-set bytes to octal sequences (\\nnn) and doubles backslashes.<sep>[EXAMPLE]: encode('123\\000\\001', 'base64')<sep>[RESULT]: MTIzAAE=<sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "encode('123\\000\\001', 'base64')",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-string.html"
        ]
    },
    {
        "type": "function",
        "keyword": "get_bit(string, offset)",
        "tree": "(func_application (func_name (type_function_name (identifier get_bit))) ( ))",
        "description": "Extract bit from string",
        "detail": "[DESCRIPTION]: Extract bit from string<sep>[EXAMPLE]: get_bit('Th\\000omas'::bytea, 45)<sep>[RESULT]: 1<sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "get_bit('Th\\000omas'::bytea, 45)",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-binarystring.html"
        ]
    },
    {
        "type": "function",
        "keyword": "get_byte(string, offset)",
        "tree": "(func_application (func_name (type_function_name (identifier get_byte))) ( ))",
        "description": "Extract byte from string",
        "detail": "[DESCRIPTION]: Extract byte from string<sep>[EXAMPLE]: get_byte('Th\\000omas'::bytea, 4)<sep>[RESULT]: 109<sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "get_byte('Th\\000omas'::bytea, 4)",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-binarystring.html"
        ]
    },
    {
        "type": "function",
        "keyword": "length(string)",
        "tree": "(func_application (func_name (builtin_function_name length)) ( ))",
        "description": "Number of characters in string",
        "detail": "[DESCRIPTION]: Number of characters in string<sep>[EXAMPLE]: length('jose')<sep>[RESULT]: 4<sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "length('jose')",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-string.html"
        ]
    },
    {
        "type": "function",
        "keyword": "set_bit(string, offset, newvalue)",
        "tree": "(func_application (func_name (type_function_name (identifier set_bit))) ( ))",
        "description": "Set bit in string",
        "detail": "[DESCRIPTION]: Set bit in string<sep>[EXAMPLE]: set_bit('Th\\000omas'::bytea, 45, 0)<sep>[RESULT]: Th\\000omAs<sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "set_bit('Th\\000omas'::bytea, 45, 0)",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-binarystring.html"
        ]
    },
    {
        "type": "function",
        "keyword": "set_byte(string, offset, newvalue)",
        "tree": "(func_application (func_name (type_function_name (identifier set_byte))) ( ))",
        "description": "Set byte in string",
        "detail": "[DESCRIPTION]: Set byte in string<sep>[EXAMPLE]: set_byte('Th\\000omas'::bytea, 4, 64)<sep>[RESULT]: Th\\000o@as<sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "set_byte('Th\\000omas'::bytea, 4, 64)",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-binarystring.html"
        ]
    },
    {
        "type": "function",
        "keyword": "sha224(bytea)",
        "tree": "(func_application (func_name (type_function_name (identifier sha224))) ( ))",
        "description": "SHA-224 hash",
        "detail": "[DESCRIPTION]: SHA-224 hash<sep>[EXAMPLE]: sha224('abc')<sep>[RESULT]: \\x23097d223405d8228642a477bda2\u200b55b32aadbce4bda0b3f7e36c9da7<sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "sha224('abc')",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-binarystring.html"
        ]
    },
    {
        "type": "function",
        "keyword": "sha256(bytea)",
        "tree": "(func_application (func_name (type_function_name (identifier sha256))) ( ))",
        "description": "SHA-256 hash",
        "detail": "[DESCRIPTION]: SHA-256 hash<sep>[EXAMPLE]: sha256('abc')<sep>[RESULT]: \\xba7816bf8f01cfea414140de5dae2223\u200bb00361a396177a9cb410ff61f20015ad<sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "sha256('abc')",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-binarystring.html"
        ]
    },
    {
        "type": "function",
        "keyword": "sha384(bytea)",
        "tree": "(func_application (func_name (type_function_name (identifier sha384))) ( ))",
        "description": "SHA-384 hash",
        "detail": "[DESCRIPTION]: SHA-384 hash<sep>[EXAMPLE]: sha384('abc')<sep>[RESULT]: \\xcb00753f45a35e8bb5a03d699ac65007\u200b272c32ab0eded1631a8b605a43ff5bed\u200b8086072ba1e7cc2358baeca134c825a7<sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "sha384('abc')",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-binarystring.html"
        ]
    },
    {
        "type": "function",
        "keyword": "sha512(bytea)",
        "tree": "(func_application (func_name (type_function_name (identifier sha512))) ( ))",
        "description": "SHA-512 hash",
        "detail": "[DESCRIPTION]: SHA-512 hash<sep>[EXAMPLE]: sha512('abc')<sep>[RESULT]: \\xddaf35a193617abacc417349ae204131\u200b12e6fa4e89a97ea20a9eeee64b55d39a\u200b2192992a274fc1a836ba3c23a3feebbd\u200b454d4423643ce80e2a9ac94fa54ca49f<sep>[EXAMPLE QUERY]: <sep>[EXAMPLE RESULT]: <sep>[COMPENSATE]: ",
        "example": [
            "sha512('abc')",
            ""
        ],
        "link": [
            "https://www.postgresql.org/docs/12/functions-binarystring.html"
        ]
    }
]