[
    {
        "Type": "VARCHAR2 (size [BYTE |CHAR ])",
        "used_type": [
            "VARCHAR2"
        ],
        "Description": "Variable-length character string having maximum length<code>size</code>bytes or characters. Maximum<code>size</code>is 4000 bytes or characters, and minimum is 1 byte or 1 character. You must specify<code>size</code>for<code>VARCHAR2</code>.<code>BYTE</code>indicates that the column will have byte length semantics.<code>CHAR</code>indicates that the column will have character semantics.",
        "Tree": [
            "(native_datatype_element VARCHAR2)"
        ]
    },
    {
        "Type": "NVARCHAR2 (size )",
        "used_type": [
            "NVARCHAR2"
        ],
        "Description": "Variable-length Unicode character string having maximum length<code>size</code>characters. The number of bytes can be up to two times<code>size</code>for<code>AL16UTF16</code>encoding and three times<code>size</code>for<code>UTF8</code>encoding. Maximum<code>size</code>is determined by the national character set definition, with an upper limit of 4000 bytes. You must specify<code>size</code>for<code>NVARCHAR2</code>.",
        "Tree": [
            "(native_datatype_element NVARCHAR2)"
        ]
    },
    {
        "Type": "NUMBER [ (p [,s ]) ]",
        "used_type": [
            "NUMBER"
        ],
        "Description": "Number having precision<code>p</code>and scale<code>s</code>. The precision<code>p</code>can range from 1 to 38. The scale<code>s</code>can range from -84 to 127. Both precision and scale are in decimal digits. A<code>NUMBER</code>value requires from 1 to 22 bytes.",
        "Tree": [
            "(native_datatype_element NUMBER)"
        ]
    },
    {
        "Type": "FLOAT [(p )]",
        "used_type": [
            "FLOAT"
        ],
        "Description": "A subtype of the<code>NUMBER</code>Type having precision<code>p</code>. A<code>FLOAT</code>value is represented internally as<code>NUMBER</code>. The precision<code>p</code>can range from 1 to 126 binary digits. A<code>FLOAT</code>value requires from 1 to 22 bytes.",
        "Tree": [
            "(native_datatype_element FLOAT)"
        ]
    },
    {
        "Type": "LONG",
        "used_type": [
            "LONG"
        ],
        "Description": "Character data of variable length up to 2 gigabytes, or 231-1 bytes. Provided for backward compatibility.",
        "Tree": [
            "(native_datatype_element LONG)"
        ]
    },
    {
        "Type": "DATE",
        "used_type": [
            "DATE"
        ],
        "Description": "Valid date range from January 1, 4712 BC, to December 31, 9999 AD. The default format is determined explicitly by the<code>NLS_DATE_FORMAT</code>parameter or implicitly by the<code>NLS_TERRITORY</code>parameter. The size is fixed at 7 bytes. This Type contains the datetime fields<code>YEAR</code>,<code>MONTH</code>,<code>DAY</code>,<code>HOUR</code>,<code>MINUTE</code>, and<code>SECOND</code>. It does not have fractional seconds or a time zone.",
        "Tree": [
            "(native_datatype_element DATE)"
        ]
    },
    {
        "Type": "BINARY_FLOAT",
        "used_type": [
            "BINARY_FLOAT"
        ],
        "Description": "32-bit floating point number. This Type requires 4 bytes.",
        "Tree": [
            "(native_datatype_element BINARY_FLOAT)"
        ]
    },
    {
        "Type": "BINARY_DOUBLE",
        "used_type": [
            "BINARY_DOUBLE"
        ],
        "Description": "64-bit floating point number. This Type requires 8 bytes.",
        "Tree": [
            "(native_datatype_element BINARY_DOUBLE)"
        ]
    },
    {
        "Type": "TIMESTAMP [(fractional_seconds_precision )]",
        "used_type": [
            "TIMESTAMP"
        ],
        "Description": "Year, month, and day values of date, as well as hour, minute, and second values of time, where<code>fractional_seconds_precision</code>is the number of digits in the fractional part of the<code>SECOND</code>datetime field. Accepted values of<code>fractional_seconds_precision</code>are 0 to 9. The default is 6. The default format is determined explicitly by the<code>NLS_TIMESTAMP_FORMAT</code>parameter or implicitly by the<code>NLS_TERRITORY</code>parameter. The size is 7 or 11 bytes, depending on the precision. This Type contains the datetime fields<code>YEAR</code>,<code>MONTH</code>,<code>DAY</code>,<code>HOUR</code>,<code>MINUTE</code>, and<code>SECOND</code>. It contains fractional seconds but does not have a time zone.",
        "Tree": [
            "(native_datatype_element TIMESTAMP)"
        ]
    },
    {
        "Type": "TIMESTAMP [(fractional_seconds_precision )]WITH TIME ZONE ",
        "used_type": [
            "TIMESTAMP WITH TIME ZONE"
        ],
        "Description": "All values of<code>TIMESTAMP</code>as well as time zone displacement value, where<code>fractional_seconds_precision</code>is the number of digits in the fractional part of the<code>SECOND</code>datetime field. Accepted values are 0 to 9. The default is 6. The default format is determined explicitly by the<code>NLS_TIMESTAMP_FORMAT</code>parameter or implicitly by the<code>NLS_TERRITORY</code>parameter. The size is fixed at 13 bytes. This Type contains the datetime fields<code>YEAR</code>,<code>MONTH</code>,<code>DAY</code>,<code>HOUR</code>,<code>MINUTE</code>,<code>SECOND</code>,<code>TIMEZONE_HOUR</code>, and<code>TIMEZONE_MINUTE</code>. It has fractional seconds and an explicit time zone.",
        "Tree": [
            "(datatype (native_datatype_element TIMESTAMP) WITH TIME ZONE)"
        ]
    },
    {
        "Type": "TIMESTAMP [(fractional_seconds_precision )]WITH LOCAL TIME ZONE ",
        "used_type": [
            "TIMESTAMP WITH LOCAL TIME ZONE"
        ],
        "Description": "All values of<code>TIMESTAMP</code><code>WITH</code><code>TIME</code><code>ZONE</code>, with the following exceptions:Data is normalized to the database time zone when it is stored in the database.When the data is retrieved, users see the data in the session time zone.The default format is determined explicitly by the<code>NLS_TIMESTAMP_FORMAT</code>parameter or implicitly by the<code>NLS_TERRITORY</code>parameter. The size is 7 or 11 bytes, depending on the precision.",
        "Tree": [
            "(datatype (native_datatype_element TIMESTAMP) WITH LOCAL TIME ZONE)"
        ]
    },
    {
        "Type": "INTERVAL YEAR [(year_precision )]TO MONTH",
        "used_type": [
            "INTERVAL YEAR TO MONTH"
        ],
        "Description": "Stores a period of time in years and months, where<code>year_precision</code>is the number of digits in the<code>YEAR</code>datetime field. Accepted values are 0 to 9. The default is 2. The size is fixed at 5 bytes.",
        "Tree": [
            "(datatype INTERVAL YEAR TO MONTH)"
        ]
    },
    {
        "Type": "INTERVAL DAY [(day_precision )]TO SECOND [(fractional_seconds_precision )]",
        "used_type": [
            "INTERVAL DAY TO SECOND"
        ],
        "Description": "Stores a period of time in days, hours, minutes, and seconds, where<code>day_precision</code>is the maximum number of digits in the<code>DAY</code>datetime field. Accepted values are 0 to 9. The default is 2.<code>fractional_seconds_precision</code>is the number of digits in the fractional part of the<code>SECOND</code>field. Accepted values are 0 to 9. The default is 6.The size is fixed at 11 bytes.",
        "Tree": [
            "(datatype INTERVAL DAY TO SECOND)"
        ]
    },
    {
        "Type": "RAW (size )",
        "used_type": [
            "RAW"
        ],
        "Description": "Raw binary data of length<code>size</code>bytes. Maximum<code>size</code>is 2000 bytes. You must specify<code>size</code>for a<code>RAW</code>value.",
        "Tree": [
            "(native_datatype_element RAW)"
        ]
    },
    {
        "Type": "LONG RAW",
        "used_type": [
            "LONG RAW"
        ],
        "Description": "Raw binary data of variable length up to 2 gigabytes.",
        "Tree": [
            "(native_datatype_element LONG RAW)"
        ]
    },
    {
        "Type": "ROWID",
        "used_type": [
            "ROWID"
        ],
        "Description": "Base 64 string representing the unique address of a row in its table. This Type is primarily for values returned by the<code>ROWID</code>pseudocolumn.",
        "Tree": [
            "(native_datatype_element ROWID)"
        ]
    },
    {
        "Type": "UROWID [(size )]",
        "used_type": [
            "UROWID"
        ],
        "Description": "Base 64 string representing the logical address of a row of an index-organized table. The optional<code>size</code>is the size of a column of type<code>UROWID</code>. The maximum size and default is 4000 bytes.",
        "Tree": [
            "(native_datatype_element UROWID)"
        ]
    },
    {
        "Type": "CHAR [(size [BYTE |CHAR ])]",
        "used_type": [
            "CHAR"
        ],
        "Description": "Fixed-length character data of length<code>size</code>bytes or characters. Maximum<code>size</code>is 2000 bytes or characters. Default and minimum<code>size</code>is 1 byte.<code>BYTE</code>and<code>CHAR</code>have the same semantics as for<code>VARCHAR2</code>.",
        "Tree": [
            "(native_datatype_element CHAR)"
        ]
    },
    {
        "Type": "NCHAR [(size )]",
        "used_type": [
            "NCHAR"
        ],
        "Description": "Fixed-length character data of length<code>size</code>characters. The number of bytes can be up to two times<code>size</code>for<code>AL16UTF16</code>encoding and three times<code>size</code>for<code>UTF8</code>encoding. Maximum<code>size</code>is determined by the national character set definition, with an upper limit of 2000 bytes. Default and minimum<code>size</code>is 1 character.",
        "Tree": [
            "(native_datatype_element NCHAR)"
        ]
    },
    {
        "Type": "CLOB",
        "used_type": [
            "CLOB"
        ],
        "Description": "A character large object containing single-byte or multibyte characters. Both fixed-width and variable-width character sets are supported, both using the database character set. Maximum size is (4 gigabytes - 1) * (database block size).",
        "Tree": [
            "(native_datatype_element CLOB)"
        ]
    },
    {
        "Type": "NCLOB",
        "used_type": [
            "NCLOB"
        ],
        "Description": "A character large object containing Unicode characters. Both fixed-width and variable-width character sets are supported, both using the database national character set. Maximum size is (4 gigabytes - 1) * (database block size). Stores national character set data.",
        "Tree": [
            "(native_datatype_element NCLOB)"
        ]
    },
    {
        "Type": "BLOB",
        "used_type": [
            "BLOB"
        ],
        "Description": "A binary large object. Maximum size is (4 gigabytes - 1) * (database block size).",
        "Tree": [
            "(native_datatype_element BLOB)"
        ]
    },
    {
        "Type": "BFILE",
        "used_type": [
            "BFILE"
        ],
        "Description": "Contains a locator to a large binary file stored outside the database. Enables byte stream I/O access to external LOBs residing on the database server. Maximum size is 4 gigabytes.",
        "Tree": [
            "(native_datatype_element BFILE)"
        ]
    }
]