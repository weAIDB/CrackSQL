[
    {
        "Name": "ABS",
        "Tree": "(functionCall (scalarFunctionName (functionNameBase ABS)) ( ))",
        "Description": [
            "Return the absolute value"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/mathematical-functions.html#function_abs"
        ],
        "Detail": "<link><code>ABS( X )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/mathematical-functions.html#function_abs</link>\nReturns the absolute value of <code>X</code> , or <code>NULL</code> if <code>X</code> is <code>NULL</code> .\nThe result type is derived from the argument type. An implication of this is that <link><code>ABS(-9223372036854775808)</code>&LINK&https://dev.mysql.com/doc/refman/8.4/mathematical-functions.html#function_abs</link> produces an error because the result cannot be stored in a signed <code>BIGINT</code> value.\nThis function is safe to use with <link><code>BIGINT</code>&LINK&https://dev.mysql.com/doc/refman/8.4/integer-types.html</link> values.",
        "Demo": [
            "mysql> SELECT ABS(2);\n-> 2\nmysql> SELECT ABS(-32);\n-> 32"
        ]
    },
    {
        "Name": "ACOS",
        "Tree": "(functionCall (scalarFunctionName (functionNameBase ACOS)) ( ))",
        "Description": [
            "Return the arc cosine"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/mathematical-functions.html#function_acos"
        ],
        "Detail": "<link><code>ACOS( X )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/mathematical-functions.html#function_acos</link>\nReturns the arc cosine of <code>X</code> , that is, the value whose cosine is <code>X</code> . Returns <code>NULL</code> if <code>X</code> is not in the range <code>-1</code> to <code>1</code> , or if <code>X</code> is <code>NULL</code> .",
        "Demo": [
            "mysql> SELECT ACOS(1);\n-> 0\nmysql> SELECT ACOS(1.0001);\n-> NULL\nmysql> SELECT ACOS(0);\n-> 1.5707963267949"
        ]
    },
    {
        "Name": "ADDDATE",
        "Tree": "(functionCall (scalarFunctionName (functionNameBase ADDDATE)) ( ))",
        "Description": [
            "Add time values (intervals) to a date value"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html#function_adddate"
        ],
        "Detail": "<link><code>ADDDATE( date ,INTERVAL expr unit )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/date-and-time-functions.html#function_adddate</link> , <link><code>ADDDATE( date , days )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/date-and-time-functions.html#function_adddate</link>\nWhen invoked with the <code>INTERVAL</code> form of the second argument, <link><code>ADDDATE()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/date-and-time-functions.html#function_adddate</link> is a synonym for <link><code>DATE_ADD()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/date-and-time-functions.html#function_date-add</link> . The related function <link><code>SUBDATE()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/date-and-time-functions.html#function_subdate</link> is a synonym for <link><code>DATE_SUB()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/date-and-time-functions.html#function_date-sub</link> . For information on the <code>INTERVAL</code> <code>unit</code> argument, see <link>Temporal Intervals&LINK&https://dev.mysql.com/doc/refman/8.4/expressions.html#temporal-intervals</link> .\nWhen invoked with the <code>days</code> form of the second argument, MySQL treats it as an integer number of days to be added to <code>expr</code> .\nThis function returns <code>NULL</code> if <code>date</code> or <code>days</code> is <code>NULL</code> .",
        "Demo": [
            "mysql> SELECT DATE_ADD('2008-01-02', INTERVAL 31 DAY);\n-> '2008-02-02'\nmysql> SELECT ADDDATE('2008-01-02', INTERVAL 31 DAY);\n-> '2008-02-02'",
            "mysql> SELECT ADDDATE('2008-01-02', 31);\n-> '2008-02-02'"
        ]
    },
    {
        "Name": "ADDTIME",
        "Tree": "(functionCall (scalarFunctionName (functionNameBase ADDTIME)) ( ))",
        "Description": [
            "Add time"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html#function_addtime"
        ],
        "Detail": "<link><code>ADDTIME( expr1 , expr2 )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/date-and-time-functions.html#function_addtime</link>\n<link><code>ADDTIME()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/date-and-time-functions.html#function_addtime</link> adds <code>expr2</code> to <code>expr1</code> and returns the result. <code>expr1</code> is a time or datetime expression, and <code>expr2</code> is a time expression. Returns <code>NULL</code> if <code>expr1</code> or <code>expr2</code> is <code>NULL</code> .\nThe return type of this function and of the <link><code>SUBTIME()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/date-and-time-functions.html#function_subtime</link> function is determined as follows:\nIf the first argument is a dynamic parameter (such as in a prepared statement), the return type is <code>TIME</code> .\nOtherwise, the resolved type of the function is derived from the resolved type of the first argument.",
        "Demo": [
            "mysql> SELECT ADDTIME('2007-12-31 23:59:59.999999', '1 1:1:1.000002');\n-> '2008-01-02 01:01:01.000001'\nmysql> SELECT ADDTIME('01:00:00.999999', '02:00:00.999998');\n-> '03:00:01.999997'"
        ]
    },
    {
        "Name": "AES_DECRYPT",
        "Tree": "(functionCall (scalarFunctionName (functionNameBase AES_DECRYPT)) ( ))",
        "Description": [
            "Decrypt using AES"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/encryption-functions.html#function_aes-decrypt"
        ],
        "Detail": "<link><code>AES_DECRYPT( crypt_str , key_str [, init_vector ][, kdf_name ][, salt ][, info | iterations ])</code>&LINK&https://dev.mysql.com/doc/refman/8.4/encryption-functions.html#function_aes-decrypt</link>\nThis function decrypts data using the official AES (Advanced Encryption Standard) algorithm. For more information, see the description of <link><code>AES_ENCRYPT()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/encryption-functions.html#function_aes-encrypt</link> .\nStatements that use <link><code>AES_DECRYPT()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/encryption-functions.html#function_aes-decrypt</link> are unsafe for statement-based replication.",
        "Demo": []
    },
    {
        "Name": "AES_ENCRYPT",
        "Tree": "(functionCall (scalarFunctionName (functionNameBase AES_ENCRYPT)) ( ))",
        "Description": [
            "Encrypt using AES"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/encryption-functions.html#function_aes-encrypt"
        ],
        "Detail": "<link><code>AES_ENCRYPT( str , key_str [, init_vector ][, kdf_name ][, salt ][, info | iterations ])</code>&LINK&https://dev.mysql.com/doc/refman/8.4/encryption-functions.html#function_aes-encrypt</link>\n<link><code>AES_ENCRYPT()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/encryption-functions.html#function_aes-encrypt</link> and <link><code>AES_DECRYPT()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/encryption-functions.html#function_aes-decrypt</link> implement encryption and decryption of data using the official AES (Advanced Encryption Standard) algorithm, previously known as \" Rijndael. \" The AES standard permits various key lengths. By default these functions implement AES with a 128-bit key length. Key lengths of 196 or 256 bits can be used, as described later. The key length is a trade off between performance and security.\n<link><code>AES_ENCRYPT()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/encryption-functions.html#function_aes-encrypt</link> encrypts the string <code>str</code> using the key string <code>key_str</code> , and returns a binary string containing the encrypted output. <link><code>AES_DECRYPT()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/encryption-functions.html#function_aes-decrypt</link> decrypts the encrypted string <code>crypt_str</code> using the key string <code>key_str</code> , and returns the original (binary) string in hexadecimal format. (To obtain the string as plaintext, cast the result to <code>CHAR</code> . Alternatively, start the <link>mysql&LINK&https://dev.mysql.com/doc/refman/8.4/mysql.html</link> client with <link><code>--skip-binary-as-hex</code>&LINK&https://dev.mysql.com/doc/refman/8.4/mysql-command-options.html#option_mysql_binary-as-hex</link> to cause all binary values to be displayed as text.) If either function argument is <code>NULL</code> , the function returns <code>NULL</code> . If <link><code>AES_DECRYPT()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/encryption-functions.html#function_aes-decrypt</link> detects invalid data or incorrect padding, it returns <code>NULL</code> . However, it is possible for <link><code>AES_DECRYPT()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/encryption-functions.html#function_aes-decrypt</link> to return a non- <code>NULL</code> value (possibly garbage) if the input data or the key is invalid.\nThese functions support the use of a key derivation function (KDF) to create a cryptographically strong secret key from the information passed in <code>key_str</code> . The derived key is used to encrypt and decrypt the data, and it remains in the MySQL Server instance and is not accessible to users. Using a KDF is highly recommended, as it provides better security than specifying your own premade key or deriving it by a simpler method as you use the function. The functions support HKDF (available from OpenSSL 1.1.0), for which you can specify an optional salt and context-specific information to include in the keying material, and PBKDF2 (available from OpenSSL 1.0.2), for which you can specify an optional salt and set the number of iterations used to produce the key.\n<link><code>AES_ENCRYPT()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/encryption-functions.html#function_aes-encrypt</link> and <link><code>AES_DECRYPT()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/encryption-functions.html#function_aes-decrypt</link> permit control of the block encryption mode. The <link><code>block_encryption_mode</code>&LINK&https://dev.mysql.com/doc/refman/8.4/server-system-variables.html#sysvar_block_encryption_mode</link> system variable controls the mode for block-based encryption algorithms. Its default value is <code>aes-128-ecb</code> , which signifies encryption using a key length of 128 bits and ECB mode. For a description of the permitted values of this variable, see <link>Section 7.1.8, \"Server System Variables\"&LINK&https://dev.mysql.com/doc/refman/8.4/server-system-variables.html</link> . The optional <code>init_vector</code> argument is used to provide an initialization vector for block encryption modes that require it.\nStatements that use <link><code>AES_ENCRYPT()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/encryption-functions.html#function_aes-encrypt</link> or <link><code>AES_DECRYPT()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/encryption-functions.html#function_aes-decrypt</link> are unsafe for statement-based replication.\nIf <link><code>AES_ENCRYPT()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/encryption-functions.html#function_aes-encrypt</link> is invoked from within the <link>mysql&LINK&https://dev.mysql.com/doc/refman/8.4/mysql.html</link> client, binary strings display using hexadecimal notation, depending on the value of the <link><code>--binary-as-hex</code>&LINK&https://dev.mysql.com/doc/refman/8.4/mysql-command-options.html#option_mysql_binary-as-hex</link> . For more information about that option, see <link>Section 6.5.1, \"mysql \u2014 The MySQL Command-Line Client\"&LINK&https://dev.mysql.com/doc/refman/8.4/mysql.html</link> .\nThe arguments for the <link><code>AES_ENCRYPT()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/encryption-functions.html#function_aes-encrypt</link> and <link><code>AES_DECRYPT()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/encryption-functions.html#function_aes-decrypt</link> functions are as follows:\n<code>str</code>\nThe string for <link><code>AES_ENCRYPT()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/encryption-functions.html#function_aes-encrypt</link> to encrypt using the key string <code>key_str</code> , or the key derived from it by the specified KDF. The string can be any length. Padding is automatically added to <code>str</code> so it is a multiple of a block as required by block-based algorithms such as AES. This padding is automatically removed by the <link><code>AES_DECRYPT()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/encryption-functions.html#function_aes-decrypt</link> function.\n<code>crypt_str</code>\nThe encrypted string for <link><code>AES_DECRYPT()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/encryption-functions.html#function_aes-decrypt</link> to decrypt using the key string <code>key_str</code> , or the key derived from it by the specified KDF. The string can be any length. The length of <code>crypt_str</code> can be calculated from the length of the original string using this formula:\n<code>key_str</code>\nThe encryption key, or the input keying material that is used as the basis for deriving a key using a key derivation function (KDF). For the same instance of data, use the same value of <code>key_str</code> for encryption with <link><code>AES_ENCRYPT()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/encryption-functions.html#function_aes-encrypt</link> and decryption with <link><code>AES_DECRYPT()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/encryption-functions.html#function_aes-decrypt</link> .\nIf you are using a KDF, <code>key_str</code> can be any arbitrary information such as a password or passphrase. In the further arguments for the function, you specify the KDF name, then add further options to increase the security as appropriate for the KDF.\nWhen you use a KDF, the function creates a cryptographically strong secret key from the information passed in <code>key_str</code> and any salt or additional information that you provide in the other arguments. The derived key is used to encrypt and decrypt the data, and it remains in the MySQL Server instance and is not accessible to users. Using a KDF is highly recommended, as it provides better security than specifying your own premade key or deriving it by a simpler method as you use the function.\nIf you are not using a KDF, for a key length of 128 bits, the most secure way to pass a key to the <code>key_str</code> argument is to create a truly random 128-bit value and pass it as a binary value. For example:\nA passphrase can be used to generate an AES key by hashing the passphrase. For example:\nIf you exceed the maximum key length of 128 bits, a warning is returned. If you are not using a KDF, do not pass a password or passphrase directly to <code>key_str</code> , hash it first. Previous versions of this documentation suggested the former approach, but it is no longer recommended as the examples shown here are more secure.\n<code>init_vector</code>\nAn initialization vector, for block encryption modes that require it. The <link><code>block_encryption_mode</code>&LINK&https://dev.mysql.com/doc/refman/8.4/server-system-variables.html#sysvar_block_encryption_mode</link> system variable controls the mode. For the same instance of data, use the same value of <code>init_vector</code> for encryption with <link><code>AES_ENCRYPT()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/encryption-functions.html#function_aes-encrypt</link> and decryption with <link><code>AES_DECRYPT()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/encryption-functions.html#function_aes-decrypt</link> .\nNote\nIf you are using a KDF, you must specify an initialization vector or a null string for this argument, in order to access the later arguments to define the KDF.\nFor modes that require an initialization vector, it must be 16 bytes or longer (bytes in excess of 16 are ignored). An error occurs if <code>init_vector</code> is missing. For modes that do not require an initialization vector, it is ignored and a warning is generated if <code>init_vector</code> is specified, unless you are using a KDF.\nThe default value for the <link><code>block_encryption_mode</code>&LINK&https://dev.mysql.com/doc/refman/8.4/server-system-variables.html#sysvar_block_encryption_mode</link> system variable is <code>aes-128-ecb</code> , or ECB mode, which does not require an initialization vector. The alternative permitted block encryption modes CBC, CFB1, CFB8, CFB128, and OFB all require an initialization vector.\nA random string of bytes to use for the initialization vector can be produced by calling <link><code>RANDOM_BYTES(16)</code>&LINK&https://dev.mysql.com/doc/refman/8.4/encryption-functions.html#function_random-bytes</link> .\n<code>kdf_name</code>\nThe name of the key derivation function (KDF) to create a key from the input keying material passed in <code>key_str</code> , and other arguments as appropriate for the KDF. Optional.\nFor the same instance of data, use the same value of <code>kdf_name</code> for encryption with <link><code>AES_ENCRYPT()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/encryption-functions.html#function_aes-encrypt</link> and decryption with <link><code>AES_DECRYPT()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/encryption-functions.html#function_aes-decrypt</link> . When you specify <code>kdf_name</code> , you must specify <code>init_vector</code> , using either a valid initialization vector, or a null string if the encryption mode does not require an initialization vector.\nThe following values are supported:\n<code>hkdf</code>\nHKDF, which is available from OpenSSL 1.1.0. HKDF extracts a pseudorandom key from the keying material then expands it into additional keys. With HKDF, you can specify an optional salt ( <code>salt</code> ) and context-specific information such as application details ( <code>info</code> ) to include in the keying material.\n<code>pbkdf2_hmac</code>\nPBKDF2, which is available from OpenSSL 1.0.2. PBKDF2 applies a pseudorandom function to the keying material, and repeats this process a large number of times to produce the key. With PBKDF2, you can specify an optional salt ( <code>salt</code> ) to include in the keying material, and set the number of iterations used to produce the key ( <code>iterations</code> ).\nIn this example, HKDF is specified as the key derivation function, and a salt and context information are provided. The argument for the initialization vector is included but is the empty string:\nIn this example, PBKDF2 is specified as the key derivation function, a salt is provided, and the number of iterations is doubled from the recommended minimum:\n<code>salt</code>\nA salt to be passed to the key derivation function (KDF). Optional. Both HKDF and PBKDF2 can use salts, and their use is recommended to help prevent attacks based on dictionaries of common passwords or rainbow tables.\nA salt consists of random data, which for security must be different for each encryption operation. A random string of bytes to use for the salt can be produced by calling <link><code>RANDOM_BYTES()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/encryption-functions.html#function_random-bytes</link> . This example produces a 64-bit salt:\nFor the same instance of data, use the same value of <code>salt</code> for encryption with <link><code>AES_ENCRYPT()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/encryption-functions.html#function_aes-encrypt</link> and decryption with <link><code>AES_DECRYPT()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/encryption-functions.html#function_aes-decrypt</link> . The salt can safely be stored along with the encrypted data.\n<code>info</code>\nContext-specific information for HKDF to include in the keying material, such as information about the application. Optional; available when you specify <code>hkdf</code> as the KDF name. HKDF adds this information to the keying material specified in <code>key_str</code> and the salt specified in <code>salt</code> to produce the key.\nFor the same instance of data, use the same value of <code>info</code> for encryption with <link><code>AES_ENCRYPT()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/encryption-functions.html#function_aes-encrypt</link> and decryption with <link><code>AES_DECRYPT()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/encryption-functions.html#function_aes-decrypt</link> .\n<code>iterations</code>\nThe iteration count for PBKDF2 to use when producing the key. Optional; available when you specify <code>pbkdf2_hmac</code> as the KDF name. A higher count gives greater resistance to brute-force attacks because it has a greater computational cost for the attacker, but the same is necessarily true for the key derivation process. The default if you do not specify this argument is 1000, which is the minimum recommended by the OpenSSL standard.\nFor the same instance of data, use the same value of <code>iterations</code> for encryption with <link><code>AES_ENCRYPT()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/encryption-functions.html#function_aes-encrypt</link> and decryption with <link><code>AES_DECRYPT()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/encryption-functions.html#function_aes-decrypt</link> .",
        "Demo": [
            "INSERT INTO t\nVALUES (1,AES_ENCRYPT('text',UNHEX('F3229A0B371ED2D9441B830D21A390C3')));",
            "INSERT INTO t\nVALUES (1,AES_ENCRYPT('text', UNHEX(SHA2('My secret passphrase',512))));",
            "SELECT AES_ENCRYPT('mytext','mykeystring', '', 'hkdf', 'salt', 'info');",
            "SELECT AES_ENCRYPT('mytext','mykeystring', '', 'pbkdf2_hmac','salt', '2000');",
            "mysql> SET block_encryption_mode = 'aes-256-cbc';\nmysql> SET @key_str = SHA2('My secret passphrase',512);\nmysql> SET @init_vector = RANDOM_BYTES(16);\nmysql> SET @crypt_str = AES_ENCRYPT('text',@key_str,@init_vector);\nmysql> SELECT CAST(AES_DECRYPT(@crypt_str,@key_str,@init_vector) AS CHAR);\n+-------------------------------------------------------------+\n| CAST(AES_DECRYPT(@crypt_str,@key_str,@init_vector) AS CHAR) |\n+-------------------------------------------------------------+\n| text |\n+-------------------------------------------------------------+"
        ]
    },
    {
        "Name": "ANY_VALUE",
        "Tree": "(functionCall (fullId (uid (simpleId ANY_VALUE))) ( ))",
        "Description": [
            "Suppress ONLY_FULL_GROUP_BY value rejection"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/miscellaneous-functions.html#function_any-value"
        ],
        "Detail": "<link><code>ANY_VALUE( arg )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/miscellaneous-functions.html#function_any-value</link>\nThis function is useful for <code>GROUP BY</code> queries when the <link><code>ONLY_FULL_GROUP_BY</code>&LINK&https://dev.mysql.com/doc/refman/8.4/sql-mode.html#sqlmode_only_full_group_by</link> SQL mode is enabled, for cases when MySQL rejects a query that you know is valid for reasons that MySQL cannot determine. The function return value and type are the same as the return value and type of its argument, but the function result is not checked for the <link><code>ONLY_FULL_GROUP_BY</code>&LINK&https://dev.mysql.com/doc/refman/8.4/sql-mode.html#sqlmode_only_full_group_by</link> SQL mode.\nFor example, if <code>name</code> is a nonindexed column, the following query fails with <link><code>ONLY_FULL_GROUP_BY</code>&LINK&https://dev.mysql.com/doc/refman/8.4/sql-mode.html#sqlmode_only_full_group_by</link> enabled:\nThe failure occurs because <code>address</code> is a nonaggregated column that is neither named among <code>GROUP BY</code> columns nor functionally dependent on them. As a result, the <code>address</code> value for rows within each <code>name</code> group is nondeterministic. There are multiple ways to cause MySQL to accept the query:\nAlter the table to make <code>name</code> a primary key or a unique <code>NOT NULL</code> column. This enables MySQL to determine that <code>address</code> is functionally dependent on <code>name</code> ; that is, <code>address</code> is uniquely determined by <code>name</code> . (This technique is inapplicable if <code>NULL</code> must be permitted as a valid <code>name</code> value.)\nUse <link><code>ANY_VALUE()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/miscellaneous-functions.html#function_any-value</link> to refer to <code>address</code> :\nIn this case, MySQL ignores the nondeterminism of <code>address</code> values within each <code>name</code> group and accepts the query. This may be useful if you simply do not care which value of a nonaggregated column is chosen for each group. <link><code>ANY_VALUE()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/miscellaneous-functions.html#function_any-value</link> is not an aggregate function, unlike functions such as <link><code>SUM()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/aggregate-functions.html#function_sum</link> or <link><code>COUNT()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/aggregate-functions.html#function_count</link> . It simply acts to suppress the test for nondeterminism.\nDisable <link><code>ONLY_FULL_GROUP_BY</code>&LINK&https://dev.mysql.com/doc/refman/8.4/sql-mode.html#sqlmode_only_full_group_by</link> . This is equivalent to using <link><code>ANY_VALUE()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/miscellaneous-functions.html#function_any-value</link> with <link><code>ONLY_FULL_GROUP_BY</code>&LINK&https://dev.mysql.com/doc/refman/8.4/sql-mode.html#sqlmode_only_full_group_by</link> enabled, as described in the previous item.\n<link><code>ANY_VALUE()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/miscellaneous-functions.html#function_any-value</link> is also useful if functional dependence exists between columns but MySQL cannot determine it. The following query is valid because <code>age</code> is functionally dependent on the grouping column <code>age-1</code> , but MySQL cannot tell that and rejects the query with <link><code>ONLY_FULL_GROUP_BY</code>&LINK&https://dev.mysql.com/doc/refman/8.4/sql-mode.html#sqlmode_only_full_group_by</link> enabled:\nTo cause MySQL to accept the query, use <link><code>ANY_VALUE()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/miscellaneous-functions.html#function_any-value</link> :\n<link><code>ANY_VALUE()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/miscellaneous-functions.html#function_any-value</link> can be used for queries that refer to aggregate functions in the absence of a <code>GROUP BY</code> clause:\nWithout <code>GROUP BY</code> , there is a single group and it is nondeterministic which <code>name</code> value to choose for the group. <link><code>ANY_VALUE()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/miscellaneous-functions.html#function_any-value</link> tells MySQL to accept the query:\nIt may be that, due to some property of a given data set, you know that a selected nonaggregated column is effectively functionally dependent on a <code>GROUP BY</code> column. For example, an application may enforce uniqueness of one column with respect to another. In this case, using <link><code>ANY_VALUE()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/miscellaneous-functions.html#function_any-value</link> for the effectively functionally dependent column may make sense.\nFor additional discussion, see <link>Section 14.19.3, \"MySQL Handling of GROUP BY\"&LINK&https://dev.mysql.com/doc/refman/8.4/group-by-handling.html</link> .",
        "Demo": [
            "SELECT name, ANY_VALUE(address), MAX(age) FROM t GROUP BY name;",
            "SELECT ANY_VALUE(age) FROM t GROUP BY age-1;",
            "SELECT ANY_VALUE(name), MAX(age) FROM t;"
        ]
    },
    {
        "Name": "ASCII",
        "Tree": "(functionCall (scalarFunctionName ASCII) ( ))",
        "Description": [
            "Return numeric value of left-most character"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/string-functions.html#function_ascii"
        ],
        "Detail": "<link><code>ASCII( str )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/string-functions.html#function_ascii</link>\nReturns the numeric value of the leftmost character of the string <code>str</code> . Returns <code>0</code> if <code>str</code> is the empty string. Returns <code>NULL</code> if <code>str</code> is <code>NULL</code> . <link><code>ASCII()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/string-functions.html#function_ascii</link> works for 8-bit characters.\nSee also the <link><code>ORD()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/string-functions.html#function_ord</link> function.",
        "Demo": [
            "mysql> SELECT ASCII('2');\n-> 50\nmysql> SELECT ASCII(2);\n-> 50\nmysql> SELECT ASCII('dx');\n-> 100"
        ]
    },
    {
        "Name": "ASIN",
        "Tree": "(functionCall (scalarFunctionName (functionNameBase ASIN)) ( ))",
        "Description": [
            "Return the arc sine"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/mathematical-functions.html#function_asin"
        ],
        "Detail": "<link><code>ASIN( X )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/mathematical-functions.html#function_asin</link>\nReturns the arc sine of <code>X</code> , that is, the value whose sine is <code>X</code> . Returns <code>NULL</code> if <code>X</code> is not in the range <code>-1</code> to <code>1</code> , or if <code>X</code> is <code>NULL</code> .",
        "Demo": [
            "mysql> SELECT ASIN(0.2);\n-> 0.20135792079033\nmysql> SELECT ASIN('foo');\n+-------------+\n| ASIN('foo') |\n+-------------+\n| 0 |\n+-------------+\n1 row in set, 1 warning (0.00 sec)\nmysql> SHOW WARNINGS;\n+---------+------+-----------------------------------------+\n| Level | Code | Message |\n+---------+------+-----------------------------------------+\n| Warning | 1292 | Truncated incorrect DOUBLE value: 'foo' |\n+---------+------+-----------------------------------------+"
        ]
    },
    {
        "Name": "asynchronous_connection_failover_add_managed",
        "Tree": "(functionCall (fullId (uid (simpleId asynchronous_connection_failover_add_managed))) ( ))",
        "Description": [
            "Add group member source server configuration information to a\n      replication channel source list"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/replication-functions-async-failover.html#function_asynchronous-connection-failover-add-managed"
        ],
        "Detail": "<link><code>asynchronous_connection_failover_add_managed()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/replication-functions-async-failover.html#function_asynchronous-connection-failover-add-managed</link>\nAdd configuration information for a replication source server that is part of a managed group (a Group Replication group member) to the source list for a replication channel. You only need to add one group member. The replica automatically adds the rest from the current group membership, then keeps the source list updated in line with membership change.\nSyntax:\nArguments:\n<code>channel</code> : The replication channel for which this replication source server is part of the source list.\n<code>managed_type</code> : The type of managed service that the asynchronous connection failover mechanism must provide for this server. The only value currently accepted is <code>GroupReplication</code> .\n<code>managed_name</code> : The identifier for the managed group that the server is a part of. For the <code>GroupReplication</code> managed service, the identifier is the value of the <link><code>group_replication_group_name</code>&LINK&https://dev.mysql.com/doc/refman/8.4/group-replication-system-variables.html#sysvar_group_replication_group_name</link> system variable.\n<code>host</code> : The host name for this replication source server.\n<code>port</code> : The port number for this replication source server.\n<code>network_namespace</code> : The network namespace for this replication source server. Specify an empty string, as this parameter is reserved for future use.\n<code>primary_weight</code> : The priority of this replication source server in the replication channel's source list when it is acting as the primary for the managed group. The weight is from 1 to 100, with 100 being the highest. For the primary, 80 is a suitable weight. The asynchronous connection failover mechanism activates if the currently connected source is not the highest weighted in the group. Assuming that you set up the managed group to give a higher weight to a primary and a lower weight to a secondary, when the primary changes, its weight increases, and the replica changes over the connection to it.\n<code>secondary_weight</code> : The priority of this replication source server in the replication channel's source list when it is acting as a secondary in the managed group. The weight is from 1 to 100, with 100 being the highest. For a secondary, 60 is a suitable weight.\nReturn value:\nA string containing the result of the operation, for example whether it was successful or not.\nExample:\nFor more information, see <link>Section 19.4.9, \"Switching Sources and Replicas with Asynchronous Connection Failover\"&LINK&https://dev.mysql.com/doc/refman/8.4/replication-asynchronous-connection-failover.html</link> .",
        "Demo": [
            "asynchronous_connection_failover_add_managed(channel, managed_type, managed_name, host, port, network_namespace, primary_weight, secondary_weight)",
            "SELECT asynchronous_connection_failover_add_managed('channel2', 'GroupReplication', 'aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa', '127.0.0.1', 3310, '', 80, 60);\n+----------------------------------------------------------------------------------------------------------------------------------------------------+\n| asynchronous_connection_failover_add_source('channel2', 'GroupReplication', 'aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa', '127.0.0.1', 3310, '', 80, 60) |\n+----------------------------------------------------------------------------------------------------------------------------------------------------+\n| Source managed configuration details successfully inserted. |\n+----------------------------------------------------------------------------------------------------------------------------------------------------+"
        ]
    },
    {
        "Name": "asynchronous_connection_failover_add_source",
        "Tree": "(functionCall (fullId (uid (simpleId asynchronous_connection_failover_add_source))) ( ))",
        "Description": [
            "Add source server configuration information server to a\n      replication channel source list"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/replication-functions-async-failover.html#function_asynchronous-connection-failover-add-source"
        ],
        "Detail": "<link><code>asynchronous_connection_failover_add_source()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/replication-functions-async-failover.html#function_asynchronous-connection-failover-add-source</link>\nAdd configuration information for a replication source server to the source list for a replication channel.\nSyntax:\nArguments:\n<code>channel</code> : The replication channel for which this replication source server is part of the source list.\n<code>host</code> : The host name for this replication source server.\n<code>port</code> : The port number for this replication source server.\n<code>network_namespace</code> : The network namespace for this replication source server. Specify an empty string, as this parameter is reserved for future use.\n<code>weight</code> : The priority of this replication source server in the replication channel's source list. The priority is from 1 to 100, with 100 being the highest, and 50 being the default. When the asynchronous connection failover mechanism activates, the source with the highest priority setting among the alternative sources listed in the source list for the channel is chosen for the first connection attempt. If this attempt does not work, the replica tries with all the listed sources in descending order of priority, then starts again from the highest priority source. If multiple sources have the same priority, the replica orders them randomly. The asynchronous connection failover mechanism activates if the source currently connected is not the highest weighted in the group.\nReturn value:\nA string containing the result of the operation, for example whether it was successful or not.\nExample:\nFor more information, see <link>Section 19.4.9, \"Switching Sources and Replicas with Asynchronous Connection Failover\"&LINK&https://dev.mysql.com/doc/refman/8.4/replication-asynchronous-connection-failover.html</link> .",
        "Demo": [
            "asynchronous_connection_failover_add_source(channel, host, port, network_namespace, weight)",
            "SELECT asynchronous_connection_failover_add_source('channel2', '127.0.0.1', 3310, '', 80);\n+-------------------------------------------------------------------------------------------------+\n| asynchronous_connection_failover_add_source('channel2', '127.0.0.1', 3310, '', 80) |\n+-------------------------------------------------------------------------------------------------+\n| Source configuration details successfully inserted. |\n+-------------------------------------------------------------------------------------------------+"
        ]
    },
    {
        "Name": "asynchronous_connection_failover_delete_managed",
        "Tree": "(functionCall (fullId (uid (simpleId asynchronous_connection_failover_delete_managed))) ( ))",
        "Description": [
            "Remove a managed group from a replication channel source list"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/replication-functions-async-failover.html#function_asynchronous-connection-failover-delete-managed"
        ],
        "Detail": "<link><code>asynchronous_connection_failover_delete_managed()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/replication-functions-async-failover.html#function_asynchronous-connection-failover-delete-managed</link>\nRemove an entire managed group from the source list for a replication channel. When you use this function, all the replication source servers defined in the managed group are removed from the channel's source list.\nSyntax:\nArguments:\n<code>channel</code> : The replication channel for which this replication source server was part of the source list.\n<code>managed_name</code> : The identifier for the managed group that the server is a part of. For the <code>GroupReplication</code> managed service, the identifier is the value of the <link><code>group_replication_group_name</code>&LINK&https://dev.mysql.com/doc/refman/8.4/group-replication-system-variables.html#sysvar_group_replication_group_name</link> system variable.\nReturn value:\nA string containing the result of the operation, for example whether it was successful or not.\nExample:\nFor more information, see <link>Section 19.4.9, \"Switching Sources and Replicas with Asynchronous Connection Failover\"&LINK&https://dev.mysql.com/doc/refman/8.4/replication-asynchronous-connection-failover.html</link> .",
        "Demo": [
            "asynchronous_connection_failover_delete_managed(channel, managed_name)",
            "SELECT asynchronous_connection_failover_delete_managed('channel2', 'aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa');\n+-----------------------------------------------------------------------------------------------------+\n| asynchronous_connection_failover_delete_managed('channel2', 'aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa') |\n+-----------------------------------------------------------------------------------------------------+\n| Source managed configuration details successfully deleted. |\n+-----------------------------------------------------------------------------------------------------+"
        ]
    },
    {
        "Name": "asynchronous_connection_failover_delete_source",
        "Tree": "(functionCall (fullId (uid (simpleId asynchronous_connection_failover_delete_source))) ( ))",
        "Description": [
            "Remove a source server from a replication channel source list"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/replication-functions-async-failover.html#function_asynchronous-connection-failover-delete-source"
        ],
        "Detail": "<link><code>asynchronous_connection_failover_delete_source()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/replication-functions-async-failover.html#function_asynchronous-connection-failover-delete-source</link>\nRemove configuration information for a replication source server from the source list for a replication channel.\nSyntax:\nArguments:\n<code>channel</code> : The replication channel for which this replication source server was part of the source list.\n<code>host</code> : The host name for this replication source server.\n<code>port</code> : The port number for this replication source server.\n<code>network_namespace</code> : The network namespace for this replication source server. Specify an empty string, as this parameter is reserved for future use.\nReturn value:\nA string containing the result of the operation, for example whether it was successful or not.\nExample:\nFor more information, see <link>Section 19.4.9, \"Switching Sources and Replicas with Asynchronous Connection Failover\"&LINK&https://dev.mysql.com/doc/refman/8.4/replication-asynchronous-connection-failover.html</link> .",
        "Demo": [
            "asynchronous_connection_failover_delete_source(channel, host, port, network_namespace)",
            "SELECT asynchronous_connection_failover_delete_source('channel2', '127.0.0.1', 3310, '');\n+------------------------------------------------------------------------------------------------+\n| asynchronous_connection_failover_delete_source('channel2', '127.0.0.1', 3310, '') |\n+------------------------------------------------------------------------------------------------+\n| Source configuration details successfully deleted. |\n+------------------------------------------------------------------------------------------------+"
        ]
    },
    {
        "Name": "asynchronous_connection_failover_reset",
        "Tree": "(functionCall (fullId (uid (simpleId asynchronous_connection_failover_reset))) ( ))",
        "Description": [
            "Remove all settings relating to group replication asynchronous\n      failover"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/replication-functions-async-failover.html#function_asynchronous-connection-failover-reset"
        ],
        "Detail": "<link><code>asynchronous_connection_failover_reset()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/replication-functions-async-failover.html#function_asynchronous-connection-failover-reset</link>\nRemove all settings relating to the asynchronous connection failover mechanism. The function clears the Performance Schema tables <link><code>replication_asynchronous_connection_failover</code>&LINK&https://dev.mysql.com/doc/refman/8.4/performance-schema-replication-asynchronous-connection-failover-table.html</link> and <link><code>replication_asynchronous_connection_failover_managed</code>&LINK&https://dev.mysql.com/doc/refman/8.4/performance-schema-replication-asynchronous-connection-failover-managed-table.html</link> .\n<link><code>asynchronous_connection_failover_reset()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/replication-functions-async-failover.html#function_asynchronous-connection-failover-reset</link> can be used only on a server that is not currently part of a group, and that does not have any replication channels running. You can use this function to clean up a server that is no longer being used in a managed group.\nSyntax:\nArguments:\nNone.\nReturn value:\nA string containing the result of the operation, for example whether it was successful or not.\nExample:\nFor more information, see <link>Section 19.4.9, \"Switching Sources and Replicas with Asynchronous Connection Failover\"&LINK&https://dev.mysql.com/doc/refman/8.4/replication-asynchronous-connection-failover.html</link> .",
        "Demo": [
            "STRING asynchronous_connection_failover_reset()",
            "mysql> SELECT asynchronous_connection_failover_reset();\n+-------------------------------------------------------------------------+\n| asynchronous_connection_failover_reset() |\n+-------------------------------------------------------------------------+\n| The UDF asynchronous_connection_failover_reset() executed successfully. |\n+-------------------------------------------------------------------------+\n1 row in set (0.00 sec)"
        ]
    },
    {
        "Name": "ATAN",
        "Tree": "(functionCall (scalarFunctionName (functionNameBase ATAN)) ( ))",
        "Description": [
            "Return the arc tangent"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/mathematical-functions.html#function_atan"
        ],
        "Detail": "<link><code>ATAN( Y , X )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/mathematical-functions.html#function_atan2</link> , <link><code>ATAN2( Y , X )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/mathematical-functions.html#function_atan2</link>\nReturns the arc tangent of the two variables <code>X</code> and <code>Y</code> . It is similar to calculating the arc tangent of <code>Y / X</code> , except that the signs of both arguments are used to determine the quadrant of the result. Returns <code>NULL</code> if <code>X</code> or <code>Y</code> is <code>NULL</code> .",
        "Demo": [
            "mysql> SELECT ATAN(-2,2);\n-> -0.78539816339745\nmysql> SELECT ATAN2(PI(),0);\n-> 1.5707963267949"
        ]
    },
    {
        "Name": "ATAN2",
        "Tree": "(functionCall (scalarFunctionName (functionNameBase ATAN2)) ( ))",
        "Description": [
            "Return the arc tangent of the two arguments"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/mathematical-functions.html#function_atan2"
        ],
        "Detail": "<link><code>ATAN( Y , X )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/mathematical-functions.html#function_atan2</link> , <link><code>ATAN2( Y , X )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/mathematical-functions.html#function_atan2</link>\nReturns the arc tangent of the two variables <code>X</code> and <code>Y</code> . It is similar to calculating the arc tangent of <code>Y / X</code> , except that the signs of both arguments are used to determine the quadrant of the result. Returns <code>NULL</code> if <code>X</code> or <code>Y</code> is <code>NULL</code> .",
        "Demo": [
            "mysql> SELECT ATAN(-2,2);\n-> -0.78539816339745\nmysql> SELECT ATAN2(PI(),0);\n-> 1.5707963267949"
        ]
    },
    {
        "Name": "ATAN",
        "Tree": "(functionCall (scalarFunctionName (functionNameBase ATAN)) ( (functionArgs ,) ))",
        "Description": [
            "Return the arc tangent of the two arguments"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/mathematical-functions.html#function_atan2"
        ],
        "Detail": "<link><code>ATAN( Y , X )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/mathematical-functions.html#function_atan2</link> , <link><code>ATAN2( Y , X )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/mathematical-functions.html#function_atan2</link>\nReturns the arc tangent of the two variables <code>X</code> and <code>Y</code> . It is similar to calculating the arc tangent of <code>Y / X</code> , except that the signs of both arguments are used to determine the quadrant of the result. Returns <code>NULL</code> if <code>X</code> or <code>Y</code> is <code>NULL</code> .",
        "Demo": [
            "mysql> SELECT ATAN(-2,2);\n-> -0.78539816339745\nmysql> SELECT ATAN2(PI(),0);\n-> 1.5707963267949"
        ]
    },
    {
        "Name": "AVG",
        "Tree": "(functionCall (aggregateWindowedFunction AVG ( )))",
        "Description": [
            "Return the average value of the argument"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/aggregate-functions.html#function_avg"
        ],
        "Detail": "<link><code>AVG([DISTINCT] expr ) [ over_clause ]</code>&LINK&https://dev.mysql.com/doc/refman/8.4/aggregate-functions.html#function_avg</link>\nReturns the average value of <code>expr</code> . The <code>DISTINCT</code> option can be used to return the average of the distinct values of <code>expr</code> .\nIf there are no matching rows, <link><code>AVG()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/aggregate-functions.html#function_avg</link> returns <code>NULL</code> . The function also returns <code>NULL</code> if <code>expr</code> is <code>NULL</code> .\nThis function executes as a window function if <code>over_clause</code> is present. <code>over_clause</code> is as described in <link>Section 14.20.2, \"Window Function Concepts and Syntax\"&LINK&https://dev.mysql.com/doc/refman/8.4/window-functions-usage.html</link> ; it cannot be used with <code>DISTINCT</code> .",
        "Demo": [
            "mysql> SELECT student_name, AVG(test_score)\nFROM student\nGROUP BY student_name;"
        ]
    },
    {
        "Name": "BENCHMARK",
        "Tree": "(functionCall (scalarFunctionName (functionNameBase BENCHMARK)) ( ))",
        "Description": [
            "Repeatedly execute an expression"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/information-functions.html#function_benchmark"
        ],
        "Detail": "<link><code>BENCHMARK( count , expr )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/information-functions.html#function_benchmark</link>\nThe <link><code>BENCHMARK()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/information-functions.html#function_benchmark</link> function executes the expression <code>expr</code> repeatedly <code>count</code> times. It may be used to time how quickly MySQL processes the expression. The result value is <code>0</code> , or <code>NULL</code> for inappropriate arguments such as a <code>NULL</code> or negative repeat count.\nThe intended use is from within the <link>mysql&LINK&https://dev.mysql.com/doc/refman/8.4/mysql.html</link> client, which reports query execution times:\nThe time reported is elapsed time on the client end, not CPU time on the server end. It is advisable to execute <link><code>BENCHMARK()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/information-functions.html#function_benchmark</link> several times, and to interpret the result with regard to how heavily loaded the server machine is.\n<link><code>BENCHMARK()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/information-functions.html#function_benchmark</link> is intended for measuring the runtime performance of scalar expressions, which has some significant implications for the way that you use it and interpret the results:\nOnly scalar expressions can be used. Although the expression can be a subquery, it must return a single column and at most a single row. For example, <link><code>BENCHMARK(10, (SELECT * FROM t))</code>&LINK&https://dev.mysql.com/doc/refman/8.4/information-functions.html#function_benchmark</link> fails if the table <code>t</code> has more than one column or more than one row.\nExecuting a <code>SELECT expr</code> statement <code>N</code> times differs from executing <code>SELECT BENCHMARK( N , expr )</code> in terms of the amount of overhead involved. The two have very different execution profiles and you should not expect them to take the same amount of time. The former involves the parser, optimizer, table locking, and runtime evaluation <code>N</code> times each. The latter involves only runtime evaluation <code>N</code> times, and all the other components just once. Memory structures already allocated are reused, and runtime optimizations such as local caching of results already evaluated for aggregate functions can alter the results. Use of <link><code>BENCHMARK()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/information-functions.html#function_benchmark</link> thus measures performance of the runtime component by giving more weight to that component and removing the \" noise \" introduced by the network, parser, optimizer, and so forth.",
        "Demo": [
            "mysql> SELECT BENCHMARK(1000000,AES_ENCRYPT('hello','goodbye'));\n+---------------------------------------------------+\n| BENCHMARK(1000000,AES_ENCRYPT('hello','goodbye')) |\n+---------------------------------------------------+\n| 0 |\n+---------------------------------------------------+\n1 row in set (4.74 sec)"
        ]
    },
    {
        "Name": "BIN",
        "Tree": "(functionCall (scalarFunctionName (functionNameBase BIN)) ( ))",
        "Description": [
            "Return a string containing binary representation of a number"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/string-functions.html#function_bin"
        ],
        "Detail": "<link><code>BIN( N )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/string-functions.html#function_bin</link>\nReturns a string representation of the binary value of <code>N</code> , where <code>N</code> is a longlong ( <link><code>BIGINT</code>&LINK&https://dev.mysql.com/doc/refman/8.4/integer-types.html</link> ) number. This is equivalent to <link><code>CONV( N ,10,2)</code>&LINK&https://dev.mysql.com/doc/refman/8.4/mathematical-functions.html#function_conv</link> . Returns <code>NULL</code> if <code>N</code> is <code>NULL</code> .",
        "Demo": [
            "mysql> SELECT BIN(12);\n-> '1100'"
        ]
    },
    {
        "Name": "BIN_TO_UUID",
        "Tree": "(functionCall (fullId (uid (simpleId BIN_TO_UUID))) ( ))",
        "Description": [
            "Convert binary UUID to string"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/miscellaneous-functions.html#function_bin-to-uuid"
        ],
        "Detail": "<link><code>BIN_TO_UUID( binary_uuid )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/miscellaneous-functions.html#function_bin-to-uuid</link> , <link><code>BIN_TO_UUID( binary_uuid , swap_flag )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/miscellaneous-functions.html#function_bin-to-uuid</link>\n<link><code>BIN_TO_UUID()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/miscellaneous-functions.html#function_bin-to-uuid</link> is the inverse of <link><code>UUID_TO_BIN()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/miscellaneous-functions.html#function_uuid-to-bin</link> . It converts a binary UUID to a string UUID and returns the result. The binary value should be a UUID as a <link><code>VARBINARY(16)</code>&LINK&https://dev.mysql.com/doc/refman/8.4/binary-varbinary.html</link> value. The return value is a string of five hexadecimal numbers separated by dashes. (For details about this format, see the <link><code>UUID()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/miscellaneous-functions.html#function_uuid</link> function description.) If the UUID argument is <code>NULL</code> , the return value is <code>NULL</code> . If any argument is invalid, an error occurs.\n<link><code>BIN_TO_UUID()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/miscellaneous-functions.html#function_bin-to-uuid</link> takes one or two arguments:\nThe one-argument form takes a binary UUID value. The UUID value is assumed not to have its time-low and time-high parts swapped. The string result is in the same order as the binary argument.\nThe two-argument form takes a binary UUID value and a swap-flag value:\nIf <code>swap_flag</code> is 0, the two-argument form is equivalent to the one-argument form. The string result is in the same order as the binary argument.\nIf <code>swap_flag</code> is 1, the UUID value is assumed to have its time-low and time-high parts swapped. These parts are swapped back to their original position in the result value.\nFor usage examples and information about time-part swapping, see the <link><code>UUID_TO_BIN()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/miscellaneous-functions.html#function_uuid-to-bin</link> function description.",
        "Demo": []
    },
    {
        "Name": "BIT_AND",
        "Tree": "(functionCall (aggregateWindowedFunction BIT_AND ( )))",
        "Description": [
            "Return bitwise AND"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/aggregate-functions.html#function_bit-and"
        ],
        "Detail": "<link><code>BIT_AND( expr ) [ over_clause ]</code>&LINK&https://dev.mysql.com/doc/refman/8.4/aggregate-functions.html#function_bit-and</link>\nReturns the bitwise <code>AND</code> of all bits in <code>expr</code> .\nThe result type depends on whether the function argument values are evaluated as binary strings or numbers:\nBinary-string evaluation occurs when the argument values have a binary string type, and the argument is not a hexadecimal literal, bit literal, or <code>NULL</code> literal. Numeric evaluation occurs otherwise, with argument value conversion to unsigned 64-bit integers as necessary.\nBinary-string evaluation produces a binary string of the same length as the argument values. If argument values have unequal lengths, an <link><code>ER_INVALID_BITWISE_OPERANDS_SIZE</code>&LINK&https://dev.mysql.com/doc/mysql-errors/8.4/en/server-error-reference.html#error_er_invalid_bitwise_operands_size</link> error occurs. If the argument size exceeds 511 bytes, an <link><code>ER_INVALID_BITWISE_AGGREGATE_OPERANDS_SIZE</code>&LINK&https://dev.mysql.com/doc/mysql-errors/8.4/en/server-error-reference.html#error_er_invalid_bitwise_aggregate_operands_size</link> error occurs. Numeric evaluation produces an unsigned 64-bit integer.\nIf there are no matching rows, <link><code>BIT_AND()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/aggregate-functions.html#function_bit-and</link> returns a neutral value (all bits set to 1) having the same length as the argument values.\n<code>NULL</code> values do not affect the result unless all values are <code>NULL</code> . In that case, the result is a neutral value having the same length as the argument values.\nFor more information discussion about argument evaluation and result types, see the introductory discussion in <link>Section 14.12, \"Bit Functions and Operators\"&LINK&https://dev.mysql.com/doc/refman/8.4/bit-functions.html</link> .\nIf <link><code>BIT_AND()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/aggregate-functions.html#function_bit-and</link> is invoked from within the <link>mysql&LINK&https://dev.mysql.com/doc/refman/8.4/mysql.html</link> client, binary string results display using hexadecimal notation, depending on the value of the <link><code>--binary-as-hex</code>&LINK&https://dev.mysql.com/doc/refman/8.4/mysql-command-options.html#option_mysql_binary-as-hex</link> . For more information about that option, see <link>Section 6.5.1, \"mysql \u2014 The MySQL Command-Line Client\"&LINK&https://dev.mysql.com/doc/refman/8.4/mysql.html</link> .\nThis function executes as a window function if <code>over_clause</code> is present. <code>over_clause</code> is as described in <link>Section 14.20.2, \"Window Function Concepts and Syntax\"&LINK&https://dev.mysql.com/doc/refman/8.4/window-functions-usage.html</link> .",
        "Demo": []
    },
    {
        "Name": "BIT_COUNT",
        "Tree": "(functionCall (scalarFunctionName (functionNameBase BIT_COUNT)) ( ))",
        "Description": [
            "Return the number of bits that are set"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/bit-functions.html#function_bit-count"
        ],
        "Detail": "<link><code>BIT_COUNT( N )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/bit-functions.html#function_bit-count</link>\nReturns the number of bits that are set in the argument <code>N</code> as an unsigned 64-bit integer, or <code>NULL</code> if the argument is <code>NULL</code> .",
        "Demo": [
            "mysql> SELECT BIT_COUNT(64), BIT_COUNT(BINARY 64);\n-> 1, 7\nmysql> SELECT BIT_COUNT('64'), BIT_COUNT(_binary '64');\n-> 1, 7\nmysql> SELECT BIT_COUNT(X'40'), BIT_COUNT(_binary X'40');\n-> 1, 1"
        ]
    },
    {
        "Name": "BIT_LENGTH",
        "Tree": "(functionCall (scalarFunctionName (functionNameBase BIT_LENGTH)) ( ))",
        "Description": [
            "Return length of argument in bits"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/string-functions.html#function_bit-length"
        ],
        "Detail": "<link><code>BIT_LENGTH( str )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/string-functions.html#function_bit-length</link>\nReturns the length of the string <code>str</code> in bits. Returns <code>NULL</code> if <code>str</code> is <code>NULL</code> .",
        "Demo": [
            "mysql> SELECT BIT_LENGTH('text');\n-> 32"
        ]
    },
    {
        "Name": "BIT_OR",
        "Tree": "(functionCall (aggregateWindowedFunction BIT_OR ( )))",
        "Description": [
            "Return bitwise OR"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/aggregate-functions.html#function_bit-or"
        ],
        "Detail": "<link><code>BIT_OR( expr ) [ over_clause ]</code>&LINK&https://dev.mysql.com/doc/refman/8.4/aggregate-functions.html#function_bit-or</link>\nReturns the bitwise <code>OR</code> of all bits in <code>expr</code> .\nThe result type depends on whether the function argument values are evaluated as binary strings or numbers:\nBinary-string evaluation occurs when the argument values have a binary string type, and the argument is not a hexadecimal literal, bit literal, or <code>NULL</code> literal. Numeric evaluation occurs otherwise, with argument value conversion to unsigned 64-bit integers as necessary.\nBinary-string evaluation produces a binary string of the same length as the argument values. If argument values have unequal lengths, an <link><code>ER_INVALID_BITWISE_OPERANDS_SIZE</code>&LINK&https://dev.mysql.com/doc/mysql-errors/8.4/en/server-error-reference.html#error_er_invalid_bitwise_operands_size</link> error occurs. If the argument size exceeds 511 bytes, an <link><code>ER_INVALID_BITWISE_AGGREGATE_OPERANDS_SIZE</code>&LINK&https://dev.mysql.com/doc/mysql-errors/8.4/en/server-error-reference.html#error_er_invalid_bitwise_aggregate_operands_size</link> error occurs. Numeric evaluation produces an unsigned 64-bit integer.\nIf there are no matching rows, <link><code>BIT_OR()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/aggregate-functions.html#function_bit-or</link> returns a neutral value (all bits set to 0) having the same length as the argument values.\n<code>NULL</code> values do not affect the result unless all values are <code>NULL</code> . In that case, the result is a neutral value having the same length as the argument values.\nFor more information discussion about argument evaluation and result types, see the introductory discussion in <link>Section 14.12, \"Bit Functions and Operators\"&LINK&https://dev.mysql.com/doc/refman/8.4/bit-functions.html</link> .\nIf <link><code>BIT_OR()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/aggregate-functions.html#function_bit-or</link> is invoked from within the <link>mysql&LINK&https://dev.mysql.com/doc/refman/8.4/mysql.html</link> client, binary string results display using hexadecimal notation, depending on the value of the <link><code>--binary-as-hex</code>&LINK&https://dev.mysql.com/doc/refman/8.4/mysql-command-options.html#option_mysql_binary-as-hex</link> . For more information about that option, see <link>Section 6.5.1, \"mysql \u2014 The MySQL Command-Line Client\"&LINK&https://dev.mysql.com/doc/refman/8.4/mysql.html</link> .\nThis function executes as a window function if <code>over_clause</code> is present. <code>over_clause</code> is as described in <link>Section 14.20.2, \"Window Function Concepts and Syntax\"&LINK&https://dev.mysql.com/doc/refman/8.4/window-functions-usage.html</link> .",
        "Demo": []
    },
    {
        "Name": "BIT_XOR",
        "Tree": "(functionCall (aggregateWindowedFunction BIT_XOR ( )))",
        "Description": [
            "Return bitwise XOR"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/aggregate-functions.html#function_bit-xor"
        ],
        "Detail": "<link><code>BIT_XOR( expr ) [ over_clause ]</code>&LINK&https://dev.mysql.com/doc/refman/8.4/aggregate-functions.html#function_bit-xor</link>\nReturns the bitwise <link><code>XOR</code>&LINK&https://dev.mysql.com/doc/refman/8.4/logical-operators.html#operator_xor</link> of all bits in <code>expr</code> .\nThe result type depends on whether the function argument values are evaluated as binary strings or numbers:\nBinary-string evaluation occurs when the argument values have a binary string type, and the argument is not a hexadecimal literal, bit literal, or <code>NULL</code> literal. Numeric evaluation occurs otherwise, with argument value conversion to unsigned 64-bit integers as necessary.\nBinary-string evaluation produces a binary string of the same length as the argument values. If argument values have unequal lengths, an <link><code>ER_INVALID_BITWISE_OPERANDS_SIZE</code>&LINK&https://dev.mysql.com/doc/mysql-errors/8.4/en/server-error-reference.html#error_er_invalid_bitwise_operands_size</link> error occurs. If the argument size exceeds 511 bytes, an <link><code>ER_INVALID_BITWISE_AGGREGATE_OPERANDS_SIZE</code>&LINK&https://dev.mysql.com/doc/mysql-errors/8.4/en/server-error-reference.html#error_er_invalid_bitwise_aggregate_operands_size</link> error occurs. Numeric evaluation produces an unsigned 64-bit integer.\nIf there are no matching rows, <link><code>BIT_XOR()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/aggregate-functions.html#function_bit-xor</link> returns a neutral value (all bits set to 0) having the same length as the argument values.\n<code>NULL</code> values do not affect the result unless all values are <code>NULL</code> . In that case, the result is a neutral value having the same length as the argument values.\nFor more information discussion about argument evaluation and result types, see the introductory discussion in <link>Section 14.12, \"Bit Functions and Operators\"&LINK&https://dev.mysql.com/doc/refman/8.4/bit-functions.html</link> .\nIf <link><code>BIT_XOR()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/aggregate-functions.html#function_bit-xor</link> is invoked from within the <link>mysql&LINK&https://dev.mysql.com/doc/refman/8.4/mysql.html</link> client, binary string results display using hexadecimal notation, depending on the value of the <link><code>--binary-as-hex</code>&LINK&https://dev.mysql.com/doc/refman/8.4/mysql-command-options.html#option_mysql_binary-as-hex</link> . For more information about that option, see <link>Section 6.5.1, \"mysql \u2014 The MySQL Command-Line Client\"&LINK&https://dev.mysql.com/doc/refman/8.4/mysql.html</link> .\nThis function executes as a window function if <code>over_clause</code> is present. <code>over_clause</code> is as described in <link>Section 14.20.2, \"Window Function Concepts and Syntax\"&LINK&https://dev.mysql.com/doc/refman/8.4/window-functions-usage.html</link> .",
        "Demo": []
    },
    {
        "Name": "CAN_ACCESS_COLUMN",
        "Tree": "(functionCall (fullId (uid (simpleId CAN_ACCESS_COLUMN))) ( ))",
        "Description": [
            "Internal use only"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/internal-functions.html#function_can-access-column"
        ],
        "Detail": "<link><code>CAN_ACCESS_COLUMN( ARGS )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/internal-functions.html#function_can-access-column</link>",
        "Demo": []
    },
    {
        "Name": "CAN_ACCESS_DATABASE",
        "Tree": "(functionCall (fullId (uid (simpleId CAN_ACCESS_DATABASE))) ( ))",
        "Description": [
            "Internal use only"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/internal-functions.html#function_can-access-database"
        ],
        "Detail": "<link><code>CAN_ACCESS_DATABASE( ARGS )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/internal-functions.html#function_can-access-database</link>",
        "Demo": []
    },
    {
        "Name": "CAN_ACCESS_TABLE",
        "Tree": "(functionCall (fullId (uid (simpleId CAN_ACCESS_TABLE))) ( ))",
        "Description": [
            "Internal use only"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/internal-functions.html#function_can-access-table"
        ],
        "Detail": "<link><code>CAN_ACCESS_TABLE( ARGS )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/internal-functions.html#function_can-access-table</link>",
        "Demo": []
    },
    {
        "Name": "CAN_ACCESS_USER",
        "Tree": "(functionCall (fullId (uid (simpleId CAN_ACCESS_USER))) ( ))",
        "Description": [
            "Internal use only"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/internal-functions.html#function_can-access-user"
        ],
        "Detail": "<link><code>CAN_ACCESS_USER( ARGS )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/internal-functions.html#function_can-access-user</link>",
        "Demo": []
    },
    {
        "Name": "CAN_ACCESS_VIEW",
        "Tree": "(functionCall (fullId (uid (simpleId CAN_ACCESS_VIEW))) ( ))",
        "Description": [
            "Internal use only"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/internal-functions.html#function_can-access-view"
        ],
        "Detail": "<link><code>CAN_ACCESS_VIEW( ARGS )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/internal-functions.html#function_can-access-view</link>",
        "Demo": []
    },
    {
        "Name": "CEIL",
        "Tree": "(functionCall (scalarFunctionName (functionNameBase CEIL)) ( ))",
        "Description": [
            "Return the smallest integer value not less than the argument"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/mathematical-functions.html#function_ceil"
        ],
        "Detail": "<link><code>CEIL( X )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/mathematical-functions.html#function_ceil</link>\n<link><code>CEIL()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/mathematical-functions.html#function_ceil</link> is a synonym for <link><code>CEILING()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/mathematical-functions.html#function_ceiling</link> .",
        "Demo": []
    },
    {
        "Name": "CEILING",
        "Tree": "(functionCall (scalarFunctionName (functionNameBase CEILING)) ( ))",
        "Description": [
            "Return the smallest integer value not less than the argument"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/mathematical-functions.html#function_ceiling"
        ],
        "Detail": "<link><code>CEILING( X )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/mathematical-functions.html#function_ceiling</link>\nReturns the smallest integer value not less than <code>X</code> . Returns <code>NULL</code> if <code>X</code> is <code>NULL</code> .\nFor exact-value numeric arguments, the return value has an exact-value numeric type. For string or floating-point arguments, the return value has a floating-point type.",
        "Demo": [
            "mysql> SELECT CEILING(1.23);\n-> 2\nmysql> SELECT CEILING(-1.23);\n-> -1"
        ]
    },
    {
        "Name": "CHAR",
        "Tree": "(functionCall (specificFunction CHAR ( )))",
        "Description": [
            "Return the character for each integer passed"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/string-functions.html#function_char"
        ],
        "Detail": "<link><code>CHAR( N ,... [USING charset_name ])</code>&LINK&https://dev.mysql.com/doc/refman/8.4/string-functions.html#function_char</link>\n<link><code>CHAR()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/string-functions.html#function_char</link> interprets each argument <code>N</code> as an integer and returns a string consisting of the characters given by the code values of those integers. <code>NULL</code> values are skipped.\nBy default, <link><code>CHAR()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/string-functions.html#function_char</link> returns a binary string. To produce a string in a given character set, use the optional <code>USING</code> clause:\nIf <code>USING</code> is given and the result string is illegal for the given character set, a warning is issued. Also, if strict SQL mode is enabled, the result from <link><code>CHAR()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/string-functions.html#function_char</link> becomes <code>NULL</code> .\nIf <link><code>CHAR()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/string-functions.html#function_char</link> is invoked from within the <link>mysql&LINK&https://dev.mysql.com/doc/refman/8.4/mysql.html</link> client, binary strings display using hexadecimal notation, depending on the value of the <link><code>--binary-as-hex</code>&LINK&https://dev.mysql.com/doc/refman/8.4/mysql-command-options.html#option_mysql_binary-as-hex</link> . For more information about that option, see <link>Section 6.5.1, \"mysql \u2014 The MySQL Command-Line Client\"&LINK&https://dev.mysql.com/doc/refman/8.4/mysql.html</link> .\n<link><code>CHAR()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/string-functions.html#function_char</link> arguments larger than 255 are converted into multiple result bytes. For example, <link><code>CHAR(256)</code>&LINK&https://dev.mysql.com/doc/refman/8.4/string-functions.html#function_char</link> is equivalent to <link><code>CHAR(1,0)</code>&LINK&https://dev.mysql.com/doc/refman/8.4/string-functions.html#function_char</link> , and <link><code>CHAR(256*256)</code>&LINK&https://dev.mysql.com/doc/refman/8.4/string-functions.html#function_char</link> is equivalent to <link><code>CHAR(1,0,0)</code>&LINK&https://dev.mysql.com/doc/refman/8.4/string-functions.html#function_char</link> :",
        "Demo": [
            "mysql> SELECT CHAR(77,121,83,81,'76');\n+--------------------------------------------------+\n| CHAR(77,121,83,81,'76') |\n+--------------------------------------------------+\n| 0x4D7953514C |\n+--------------------------------------------------+\n1 row in set (0.00 sec)\nmysql> SELECT CHAR(77,77.3,'77.3');\n+--------------------------------------------+\n| CHAR(77,77.3,'77.3') |\n+--------------------------------------------+\n| 0x4D4D4D |\n+--------------------------------------------+\n1 row in set (0.00 sec)",
            "mysql> SELECT CHAR(77,121,83,81,'76' USING utf8mb4);\n+---------------------------------------+\n| CHAR(77,121,83,81,'76' USING utf8mb4) |\n+---------------------------------------+\n| MySQL |\n+---------------------------------------+\n1 row in set (0.00 sec)\nmysql> SELECT CHAR(77,77.3,'77.3' USING utf8mb4);\n+------------------------------------+\n| CHAR(77,77.3,'77.3' USING utf8mb4) |\n+------------------------------------+\n| MMM |\n+------------------------------------+\n1 row in set, 1 warning (0.00 sec)\nmysql> SHOW WARNINGS;\n+---------+------+-------------------------------------------+\n| Level | Code | Message |\n+---------+------+-------------------------------------------+\n| Warning | 1292 | Truncated incorrect INTEGER value: '77.3' |\n+---------+------+-------------------------------------------+\n1 row in set (0.00 sec)",
            "mysql> SELECT HEX(CHAR(1,0)), HEX(CHAR(256));\n+----------------+----------------+\n| HEX(CHAR(1,0)) | HEX(CHAR(256)) |\n+----------------+----------------+\n| 0100 | 0100 |\n+----------------+----------------+\n1 row in set (0.00 sec)\nmysql> SELECT HEX(CHAR(1,0,0)), HEX(CHAR(256*256));\n+------------------+--------------------+\n| HEX(CHAR(1,0,0)) | HEX(CHAR(256*256)) |\n+------------------+--------------------+\n| 010000 | 010000 |\n+------------------+--------------------+\n1 row in set (0.00 sec)"
        ]
    },
    {
        "Name": "CHAR_LENGTH",
        "Tree": "(functionCall (scalarFunctionName (functionNameBase CHAR_LENGTH)) ( ))",
        "Description": [
            "Return number of characters in argument"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/string-functions.html#function_char-length"
        ],
        "Detail": "<link><code>CHAR_LENGTH( str )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/string-functions.html#function_char-length</link>\nReturns the length of the string <code>str</code> , measured in code points. A multibyte character counts as a single code point. This means that, for a string containing two 3-byte characters, <link><code>LENGTH()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/string-functions.html#function_length</link> returns <code>6</code> , whereas <link><code>CHAR_LENGTH()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/string-functions.html#function_char-length</link> returns <code>2</code> , as shown here:\n<code>CHAR_LENGTH()</code> returns <code>NULL</code> if <code>str</code> is <code>NULL</code> .",
        "Demo": [
            "mysql> SET @dolphin:='\u6d77\u8c5a';\nQuery OK, 0 rows affected (0.01 sec)\nmysql> SELECT LENGTH(@dolphin), CHAR_LENGTH(@dolphin);\n+------------------+-----------------------+\n| LENGTH(@dolphin) | CHAR_LENGTH(@dolphin) |\n+------------------+-----------------------+\n| 6 | 2 |\n+------------------+-----------------------+\n1 row in set (0.00 sec)"
        ]
    },
    {
        "Name": "CHARACTER_LENGTH",
        "Tree": "(functionCall (scalarFunctionName (functionNameBase CHARACTER_LENGTH)) ( ))",
        "Description": [
            "Synonym for CHAR_LENGTH()"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/string-functions.html#function_character-length"
        ],
        "Detail": "<link><code>CHARACTER_LENGTH( str )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/string-functions.html#function_character-length</link>\n<link><code>CHARACTER_LENGTH()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/string-functions.html#function_character-length</link> is a synonym for <link><code>CHAR_LENGTH()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/string-functions.html#function_char-length</link> .",
        "Demo": []
    },
    {
        "Name": "CHARSET",
        "Tree": "(functionCall (scalarFunctionName (functionNameBase CHARSET)) ( ))",
        "Description": [
            "Return the character set of the argument"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/information-functions.html#function_charset"
        ],
        "Detail": "<link><code>CHARSET( str )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/information-functions.html#function_charset</link>\nReturns the character set of the string argument, or <code>NULL</code> if the argument is <code>NULL</code> .",
        "Demo": [
            "mysql> SELECT CHARSET('abc');\n-> 'utf8mb3'\nmysql> SELECT CHARSET(CONVERT('abc' USING latin1));\n-> 'latin1'\nmysql> SELECT CHARSET(USER());\n-> 'utf8mb3'"
        ]
    },
    {
        "Name": "COALESCE",
        "Tree": "(functionCall (fullId (uid (simpleId (keywordsCanBeId COALESCE)))) ( ))",
        "Description": [
            "Return the first non-NULL argument"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/comparison-operators.html#function_coalesce"
        ],
        "Detail": "<link><code>COALESCE( value ,...)</code>&LINK&https://dev.mysql.com/doc/refman/8.4/comparison-operators.html#function_coalesce</link>\nReturns the first non- <code>NULL</code> value in the list, or <code>NULL</code> if there are no non- <code>NULL</code> values.\nThe return type of <link><code>COALESCE()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/comparison-operators.html#function_coalesce</link> is the aggregated type of the argument types.",
        "Demo": [
            "mysql> SELECT COALESCE(NULL,1);\n-> 1\nmysql> SELECT COALESCE(NULL,NULL,NULL);\n-> NULL"
        ]
    },
    {
        "Name": "COERCIBILITY",
        "Tree": "(functionCall (scalarFunctionName (functionNameBase COERCIBILITY)) ( ))",
        "Description": [
            "Return the collation coercibility value of the string argument"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/information-functions.html#function_coercibility"
        ],
        "Detail": "<link><code>COERCIBILITY( str )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/information-functions.html#function_coercibility</link>\nReturns the collation coercibility value of the string argument.\nThe return values have the meanings shown in the following table. Lower values have higher precedence.\n<table><thead><tr><th>Coercibility</th>\n<th>Meaning</th>\n<th>Example</th></tr></thead>\n<tbody><tr><th><code>0</code></th>\n<td>Explicit collation</td>\n<td>Value with\n<code>COLLATE</code>\nclause</td></tr>\n<tr><th><code>1</code></th>\n<td>No collation</td>\n<td>Concatenation of strings with different collations</td></tr>\n<tr><th><code>2</code></th>\n<td>Implicit collation</td>\n<td>Column value, stored routine parameter or local variable</td></tr>\n<tr><th><code>3</code></th>\n<td>System constant</td>\n<td><link><code>USER()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/information-functions.html#function_user</link>\nreturn value</td></tr>\n<tr><th><code>4</code></th>\n<td>Coercible</td>\n<td>Literal string</td></tr>\n<tr><th><code>5</code></th>\n<td>Numeric</td>\n<td>Numeric or temporal value</td></tr>\n<tr><th><code>6</code></th>\n<td>Ignorable</td>\n<td><code>NULL</code>\nor an expression derived from\n<code>NULL</code></td></tr></tbody></table>\nFor more information, see <link>Section 12.8.4, \"Collation Coercibility in Expressions\"&LINK&https://dev.mysql.com/doc/refman/8.4/charset-collation-coercibility.html</link> .",
        "Demo": [
            "mysql> SELECT COERCIBILITY('abc' COLLATE utf8mb4_swedish_ci);\n-> 0\nmysql> SELECT COERCIBILITY(USER());\n-> 3\nmysql> SELECT COERCIBILITY('abc');\n-> 4\nmysql> SELECT COERCIBILITY(1000);\n-> 5"
        ]
    },
    {
        "Name": "COLLATION",
        "Tree": "(functionCall (scalarFunctionName (functionNameBase COLLATION)) ( ))",
        "Description": [
            "Return the collation of the string argument"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/information-functions.html#function_collation"
        ],
        "Detail": "<link><code>COLLATION( str )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/information-functions.html#function_collation</link>\nReturns the collation of the string argument.",
        "Demo": [
            "mysql> SELECT COLLATION('abc');\n-> 'utf8mb4_0900_ai_ci'\nmysql> SELECT COLLATION(_utf8mb4'abc');\n-> 'utf8mb4_0900_ai_ci'\nmysql> SELECT COLLATION(_latin1'abc');\n-> 'latin1_swedish_ci'"
        ]
    },
    {
        "Name": "COMPRESS",
        "Tree": "(functionCall (scalarFunctionName (functionNameBase COMPRESS)) ( ))",
        "Description": [
            "Return result as a binary string"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/encryption-functions.html#function_compress"
        ],
        "Detail": "<link><code>COMPRESS( string_to_compress )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/encryption-functions.html#function_compress</link>\nCompresses a string and returns the result as a binary string. This function requires MySQL to have been compiled with a compression library such as <code>zlib</code> . Otherwise, the return value is always <code>NULL</code> . The return value is also <code>NULL</code> if <code>string_to_compress</code> is <code>NULL</code> . The compressed string can be uncompressed with <link><code>UNCOMPRESS()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/encryption-functions.html#function_uncompress</link> .\nThe compressed string contents are stored the following way:\nEmpty strings are stored as empty strings.\nNonempty strings are stored as a 4-byte length of the uncompressed string (low byte first), followed by the compressed string. If the string ends with space, an extra <code>.</code> character is added to avoid problems with endspace trimming should the result be stored in a <link><code>CHAR</code>&LINK&https://dev.mysql.com/doc/refman/8.4/char.html</link> or <link><code>VARCHAR</code>&LINK&https://dev.mysql.com/doc/refman/8.4/char.html</link> column. (However, use of nonbinary string data types such as <link><code>CHAR</code>&LINK&https://dev.mysql.com/doc/refman/8.4/char.html</link> or <link><code>VARCHAR</code>&LINK&https://dev.mysql.com/doc/refman/8.4/char.html</link> to store compressed strings is not recommended anyway because character set conversion may occur. Use a <link><code>VARBINARY</code>&LINK&https://dev.mysql.com/doc/refman/8.4/binary-varbinary.html</link> or <link><code>BLOB</code>&LINK&https://dev.mysql.com/doc/refman/8.4/blob.html</link> binary string column instead.)\nIf <link><code>COMPRESS()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/encryption-functions.html#function_compress</link> is invoked from within the <link>mysql&LINK&https://dev.mysql.com/doc/refman/8.4/mysql.html</link> client, binary strings display using hexadecimal notation, depending on the value of the <link><code>--binary-as-hex</code>&LINK&https://dev.mysql.com/doc/refman/8.4/mysql-command-options.html#option_mysql_binary-as-hex</link> . For more information about that option, see <link>Section 6.5.1, \"mysql \u2014 The MySQL Command-Line Client\"&LINK&https://dev.mysql.com/doc/refman/8.4/mysql.html</link> .",
        "Demo": [
            "mysql> SELECT LENGTH(COMPRESS(REPEAT('a',1000)));\n-> 21\nmysql> SELECT LENGTH(COMPRESS(''));\n-> 0\nmysql> SELECT LENGTH(COMPRESS('a'));\n-> 13\nmysql> SELECT LENGTH(COMPRESS(REPEAT('a',16)));\n-> 15"
        ]
    },
    {
        "Name": "CONCAT",
        "Tree": "(functionCall (scalarFunctionName (functionNameBase CONCAT)) ( ))",
        "Description": [
            "Return concatenated string"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/string-functions.html#function_concat"
        ],
        "Detail": "<link><code>CONCAT( str1 , str2 ,...)</code>&LINK&https://dev.mysql.com/doc/refman/8.4/string-functions.html#function_concat</link>\nReturns the string that results from concatenating the arguments. May have one or more arguments. If all arguments are nonbinary strings, the result is a nonbinary string. If the arguments include any binary strings, the result is a binary string. A numeric argument is converted to its equivalent nonbinary string form.\n<link><code>CONCAT()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/string-functions.html#function_concat</link> returns <code>NULL</code> if any argument is <code>NULL</code> .\nFor quoted strings, concatenation can be performed by placing the strings next to each other:\nIf <link><code>CONCAT()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/string-functions.html#function_concat</link> is invoked from within the <link>mysql&LINK&https://dev.mysql.com/doc/refman/8.4/mysql.html</link> client, binary string results display using hexadecimal notation, depending on the value of the <link><code>--binary-as-hex</code>&LINK&https://dev.mysql.com/doc/refman/8.4/mysql-command-options.html#option_mysql_binary-as-hex</link> . For more information about that option, see <link>Section 6.5.1, \"mysql \u2014 The MySQL Command-Line Client\"&LINK&https://dev.mysql.com/doc/refman/8.4/mysql.html</link> .",
        "Demo": [
            "mysql> SELECT CONCAT('My', 'S', 'QL');\n-> 'MySQL'\nmysql> SELECT CONCAT('My', NULL, 'QL');\n-> NULL\nmysql> SELECT CONCAT(14.3);\n-> '14.3'"
        ]
    },
    {
        "Name": "CONCAT_WS",
        "Tree": "(functionCall (scalarFunctionName (functionNameBase CONCAT_WS)) ( ))",
        "Description": [
            "Return concatenate with separator"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/string-functions.html#function_concat-ws"
        ],
        "Detail": "<link><code>CONCAT_WS( separator , str1 , str2 ,...)</code>&LINK&https://dev.mysql.com/doc/refman/8.4/string-functions.html#function_concat-ws</link>\n<link><code>CONCAT_WS()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/string-functions.html#function_concat-ws</link> stands for Concatenate With Separator and is a special form of <link><code>CONCAT()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/string-functions.html#function_concat</link> . The first argument is the separator for the rest of the arguments. The separator is added between the strings to be concatenated. The separator can be a string, as can the rest of the arguments. If the separator is <code>NULL</code> , the result is <code>NULL</code> .\n<link><code>CONCAT_WS()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/string-functions.html#function_concat-ws</link> does not skip empty strings. However, it does skip any <code>NULL</code> values after the separator argument.",
        "Demo": [
            "mysql> SELECT CONCAT_WS(',', 'First name', 'Second name', 'Last Name');\n-> 'First name,Second name,Last Name'\nmysql> SELECT CONCAT_WS(',', 'First name', NULL, 'Last Name');\n-> 'First name,Last Name'"
        ]
    },
    {
        "Name": "CONNECTION_ID",
        "Tree": "(functionCall (scalarFunctionName (functionNameBase CONNECTION_ID)) ( ))",
        "Description": [
            "Return the connection ID (thread ID) for the connection"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/information-functions.html#function_connection-id"
        ],
        "Detail": "<link><code>CONNECTION_ID()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/information-functions.html#function_connection-id</link>\nReturns the connection ID (thread ID) for the connection. Every connection has an ID that is unique among the set of currently connected clients.\nThe value returned by <link><code>CONNECTION_ID()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/information-functions.html#function_connection-id</link> is the same type of value as displayed in the <code>ID</code> column of the Information Schema <link><code>PROCESSLIST</code>&LINK&https://dev.mysql.com/doc/refman/8.4/information-schema-processlist-table.html</link> table, the <code>Id</code> column of <link><code>SHOW PROCESSLIST</code>&LINK&https://dev.mysql.com/doc/refman/8.4/show-processlist.html</link> output, and the <code>PROCESSLIST_ID</code> column of the Performance Schema <link><code>threads</code>&LINK&https://dev.mysql.com/doc/refman/8.4/performance-schema-threads-table.html</link> table.\nWarning\nChanging the session value of the <link><code>pseudo_thread_id</code>&LINK&https://dev.mysql.com/doc/refman/8.4/server-system-variables.html#sysvar_pseudo_thread_id</link> system variable changes the value returned by the <link><code>CONNECTION_ID()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/information-functions.html#function_connection-id</link> function.",
        "Demo": [
            "mysql> SELECT CONNECTION_ID();\n-> 23786"
        ]
    },
    {
        "Name": "CONV",
        "Tree": "(functionCall (scalarFunctionName (functionNameBase CONV)) ( ))",
        "Description": [
            "Convert numbers between different number bases"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/mathematical-functions.html#function_conv"
        ],
        "Detail": "<link><code>CONV( N , from_base , to_base )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/mathematical-functions.html#function_conv</link>\nConverts numbers between different number bases. Returns a string representation of the number <code>N</code> , converted from base <code>from_base</code> to base <code>to_base</code> . Returns <code>NULL</code> if any argument is <code>NULL</code> . The argument <code>N</code> is interpreted as an integer, but may be specified as an integer or a string. The minimum base is <code>2</code> and the maximum base is <code>36</code> . If <code>from_base</code> is a negative number, <code>N</code> is regarded as a signed number. Otherwise, <code>N</code> is treated as unsigned. <link><code>CONV()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/mathematical-functions.html#function_conv</link> works with 64-bit precision.\n<code>CONV()</code> returns <code>NULL</code> if any of its arguments are <code>NULL</code> .",
        "Demo": [
            "mysql> SELECT CONV('a',16,2);\n-> '1010'\nmysql> SELECT CONV('6E',18,8);\n-> '172'\nmysql> SELECT CONV(-17,10,-18);\n-> '-H'\nmysql> SELECT CONV(10+'10'+'10'+X'0a',10,10);\n-> '40'"
        ]
    },
    {
        "Name": "CONVERT_TZ",
        "Tree": "(functionCall (scalarFunctionName (functionNameBase CONVERT_TZ)) ( ))",
        "Description": [
            "Convert from one time zone to another"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html#function_convert-tz"
        ],
        "Detail": "<link><code>CONVERT_TZ( dt , from_tz , to_tz )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/date-and-time-functions.html#function_convert-tz</link>\n<link><code>CONVERT_TZ()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/date-and-time-functions.html#function_convert-tz</link> converts a datetime value <code>dt</code> from the time zone given by <code>from_tz</code> to the time zone given by <code>to_tz</code> and returns the resulting value. Time zones are specified as described in <link>Section 7.1.15, \"MySQL Server Time Zone Support\"&LINK&https://dev.mysql.com/doc/refman/8.4/time-zone-support.html</link> . This function returns <code>NULL</code> if any of the arguments are invalid, or if any of them are <code>NULL</code> .\nOn 32-bit platforms, the supported range of values for this function is the same as for the <link><code>TIMESTAMP</code>&LINK&https://dev.mysql.com/doc/refman/8.4/datetime.html</link> type (see <link>Section 13.2.1, \"Date and Time Data Type Syntax\"&LINK&https://dev.mysql.com/doc/refman/8.4/date-and-time-type-syntax.html</link> , for range information). On 64-bit platforms, the maximum supported value is <code>'3001-01-18 23:59:59.999999'</code> UTC.\nRegardless of platform or MySQL version, if the value falls out of the supported range when converted from <code>from_tz</code> to UTC, no conversion occurs.\nNote\nTo use named time zones such as <code>'MET'</code> or <code>'Europe/Amsterdam'</code> , the time zone tables must be properly set up. For instructions, see <link>Section 7.1.15, \"MySQL Server Time Zone Support\"&LINK&https://dev.mysql.com/doc/refman/8.4/time-zone-support.html</link> .",
        "Demo": [
            "mysql> SELECT CONVERT_TZ('2004-01-01 12:00:00','GMT','MET');\n-> '2004-01-01 13:00:00'\nmysql> SELECT CONVERT_TZ('2004-01-01 12:00:00','+00:00','+10:00');\n-> '2004-01-01 22:00:00'"
        ]
    },
    {
        "Name": "COS",
        "Tree": "(functionCall (scalarFunctionName (functionNameBase COS)) ( ))",
        "Description": [
            "Return the cosine"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/mathematical-functions.html#function_cos"
        ],
        "Detail": "<link><code>COS( X )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/mathematical-functions.html#function_cos</link>\nReturns the cosine of <code>X</code> , where <code>X</code> is given in radians. Returns <code>NULL</code> if <code>X</code> is <code>NULL</code> .",
        "Demo": [
            "mysql> SELECT COS(PI());\n-> -1"
        ]
    },
    {
        "Name": "COT",
        "Tree": "(functionCall (scalarFunctionName (functionNameBase COT)) ( ))",
        "Description": [
            "Return the cotangent"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/mathematical-functions.html#function_cot"
        ],
        "Detail": "<link><code>COT( X )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/mathematical-functions.html#function_cot</link>\nReturns the cotangent of <code>X</code> . Returns <code>NULL</code> if <code>X</code> is <code>NULL</code> .",
        "Demo": [
            "mysql> SELECT COT(12);\n-> -1.5726734063977\nmysql> SELECT COT(0);\n-> out-of-range error"
        ]
    },
    {
        "Name": "COUNT",
        "Tree": "(functionCall (aggregateWindowedFunction COUNT ( )))",
        "Description": [
            "Return a count of the number of rows returned"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/aggregate-functions.html#function_count"
        ],
        "Detail": "<link><code>COUNT( expr ) [ over_clause ]</code>&LINK&https://dev.mysql.com/doc/refman/8.4/aggregate-functions.html#function_count</link>\nReturns a count of the number of non- <code>NULL</code> values of <code>expr</code> in the rows retrieved by a <link><code>SELECT</code>&LINK&https://dev.mysql.com/doc/refman/8.4/select.html</link> statement. The result is a <link><code>BIGINT</code>&LINK&https://dev.mysql.com/doc/refman/8.4/integer-types.html</link> value.\nIf there are no matching rows, <link><code>COUNT()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/aggregate-functions.html#function_count</link> returns <code>0</code> . <code>COUNT(NULL)</code> returns 0.\nThis function executes as a window function if <code>over_clause</code> is present. <code>over_clause</code> is as described in <link>Section 14.20.2, \"Window Function Concepts and Syntax\"&LINK&https://dev.mysql.com/doc/refman/8.4/window-functions-usage.html</link> .\n<link><code>COUNT(*)</code>&LINK&https://dev.mysql.com/doc/refman/8.4/aggregate-functions.html#function_count</link> is somewhat different in that it returns a count of the number of rows retrieved, whether or not they contain <code>NULL</code> values.\nFor transactional storage engines such as <code>InnoDB</code> , storing an exact row count is problematic. Multiple transactions may be occurring at the same time, each of which may affect the count.\n<code>InnoDB</code> does not keep an internal count of rows in a table because concurrent transactions might \" see \" different numbers of rows at the same time. Consequently, <code>SELECT COUNT(*)</code> statements only count rows visible to the current transaction.\n<code>SELECT COUNT(*) FROM tbl_name</code> query performance for <code>InnoDB</code> tables is optimized for single-threaded workloads if there are no extra clauses such as <code>WHERE</code> or <code>GROUP BY</code> .\n<code>InnoDB</code> processes <code>SELECT COUNT(*)</code> statements by traversing the smallest available secondary index unless an index or optimizer hint directs the optimizer to use a different index. If a secondary index is not present, <code>InnoDB</code> processes <code>SELECT COUNT(*)</code> statements by scanning the clustered index.\nProcessing of <code>SELECT COUNT(*)</code> statements takes some time if index records are not entirely in the buffer pool. For a faster count, create a counter table and let your application update it according to the inserts and deletes it does. However, this method may not scale well in situations where thousands of concurrent transactions are initiating updates to the same counter table. If an approximate row count is sufficient, use <link><code>SHOW TABLE STATUS</code>&LINK&https://dev.mysql.com/doc/refman/8.4/show-table-status.html</link> .\n<code>InnoDB</code> handles <code>SELECT COUNT(*)</code> and <code>SELECT COUNT(1)</code> operations in the same way. There is no performance difference.\nFor <code>MyISAM</code> tables, <link><code>COUNT(*)</code>&LINK&https://dev.mysql.com/doc/refman/8.4/aggregate-functions.html#function_count</link> is optimized to return very quickly if the <link><code>SELECT</code>&LINK&https://dev.mysql.com/doc/refman/8.4/select.html</link> retrieves from one table, no other columns are retrieved, and there is no <code>WHERE</code> clause. For example:\nThis optimization only applies to <code>MyISAM</code> tables, because an exact row count is stored for this storage engine and can be accessed very quickly. <code>COUNT(1)</code> is only subject to the same optimization if the first column is defined as <code>NOT NULL</code> .",
        "Demo": [
            "mysql> SELECT student.student_name,COUNT(*)\nFROM student,course\nWHERE student.student_id=course.student_id\nGROUP BY student_name;",
            "mysql> SELECT COUNT(*) FROM student;"
        ]
    },
    {
        "Name": "CRC32",
        "Tree": "(functionCall (scalarFunctionName (functionNameBase CRC32)) ( ))",
        "Description": [
            "Compute a cyclic redundancy check value"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/mathematical-functions.html#function_crc32"
        ],
        "Detail": "<link><code>CRC32( expr )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/mathematical-functions.html#function_crc32</link>\nComputes a cyclic redundancy check value and returns a 32-bit unsigned value. The result is <code>NULL</code> if the argument is <code>NULL</code> . The argument is expected to be a string and (if possible) is treated as one if it is not.",
        "Demo": [
            "mysql> SELECT CRC32('MySQL');\n-> 3259397556\nmysql> SELECT CRC32('mysql');\n-> 2501908538"
        ]
    },
    {
        "Name": "CUME_DIST",
        "Tree": "(functionCall (scalarFunctionName (functionNameBase CUME_DIST)) ( ))",
        "Description": [
            "Cumulative distribution value"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/window-function-descriptions.html#function_cume-dist"
        ],
        "Detail": "<link><code>CUME_DIST()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/window-function-descriptions.html#function_cume-dist</link> <code>over_clause</code>\nReturns the cumulative distribution of a value within a group of values; that is, the percentage of partition values less than or equal to the value in the current row. This represents the number of rows preceding or peer with the current row in the window ordering of the window partition divided by the total number of rows in the window partition. Return values range from 0 to 1.\nThis function should be used with <code>ORDER BY</code> to sort partition rows into the desired order. Without <code>ORDER BY</code> , all rows are peers and have value <code>N</code> / <code>N</code> = 1, where <code>N</code> is the partition size.\n<code>over_clause</code> is as described in <link>Section 14.20.2, \"Window Function Concepts and Syntax\"&LINK&https://dev.mysql.com/doc/refman/8.4/window-functions-usage.html</link> .\nThe following query shows, for the set of values in the <code>val</code> column, the <code>CUME_DIST()</code> value for each row, as well as the percentage rank value returned by the similar <code>PERCENT_RANK()</code> function. For reference, the query also displays row numbers using <link><code>ROW_NUMBER()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/window-function-descriptions.html#function_row-number</link> :",
        "Demo": [
            "mysql> SELECT\nval,\nROW_NUMBER() OVER w AS 'row_number',\nCUME_DIST() OVER w AS 'cume_dist',\nPERCENT_RANK() OVER w AS 'percent_rank'\nFROM numbers\nWINDOW w AS (ORDER BY val);\n+------+------------+--------------------+--------------+\n| val | row_number | cume_dist | percent_rank |\n+------+------------+--------------------+--------------+\n| 1 | 1 | 0.2222222222222222 | 0 |\n| 1 | 2 | 0.2222222222222222 | 0 |\n| 2 | 3 | 0.3333333333333333 | 0.25 |\n| 3 | 4 | 0.6666666666666666 | 0.375 |\n| 3 | 5 | 0.6666666666666666 | 0.375 |\n| 3 | 6 | 0.6666666666666666 | 0.375 |\n| 4 | 7 | 0.8888888888888888 | 0.75 |\n| 4 | 8 | 0.8888888888888888 | 0.75 |\n| 5 | 9 | 1 | 1 |\n+------+------------+--------------------+--------------+"
        ]
    },
    {
        "Name": "CURDATE",
        "Tree": "(functionCall (scalarFunctionName CURDATE) ( ))",
        "Description": [
            "Return the current date"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html#function_curdate"
        ],
        "Detail": "<link><code>CURDATE()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/date-and-time-functions.html#function_curdate</link>\nReturns the current date as a value in <code>' YYYY-MM-DD '</code> or <code>YYYYMMDD</code> format, depending on whether the function is used in string or numeric context.",
        "Demo": [
            "mysql> SELECT CURDATE();\n-> '2008-06-13'\nmysql> SELECT CURDATE() + 0;\n-> 20080613"
        ]
    },
    {
        "Name": "CURRENT_DATE",
        "Tree": "(functionCall (scalarFunctionName CURRENT_DATE) ( ))",
        "Description": [
            "Synonyms for CURDATE()"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html#function_current-date"
        ],
        "Detail": "<link><code>CURRENT_DATE</code>&LINK&https://dev.mysql.com/doc/refman/8.4/date-and-time-functions.html#function_current-date</link> , <link><code>CURRENT_DATE()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/date-and-time-functions.html#function_current-date</link>\n<link><code>CURRENT_DATE</code>&LINK&https://dev.mysql.com/doc/refman/8.4/date-and-time-functions.html#function_current-date</link> and <link><code>CURRENT_DATE()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/date-and-time-functions.html#function_current-date</link> are synonyms for <link><code>CURDATE()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/date-and-time-functions.html#function_curdate</link> .",
        "Demo": []
    },
    {
        "Name": "CURRENT_TIME",
        "Tree": "(functionCall (scalarFunctionName CURRENT_TIME) ( ))",
        "Description": [
            "Synonyms for CURTIME()"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html#function_current-time"
        ],
        "Detail": "<link><code>CURRENT_TIME</code>&LINK&https://dev.mysql.com/doc/refman/8.4/date-and-time-functions.html#function_current-time</link> , <link><code>CURRENT_TIME([ fsp ])</code>&LINK&https://dev.mysql.com/doc/refman/8.4/date-and-time-functions.html#function_current-time</link>\n<link><code>CURRENT_TIME</code>&LINK&https://dev.mysql.com/doc/refman/8.4/date-and-time-functions.html#function_current-time</link> and <link><code>CURRENT_TIME()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/date-and-time-functions.html#function_current-time</link> are synonyms for <link><code>CURTIME()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/date-and-time-functions.html#function_curtime</link> .",
        "Demo": []
    },
    {
        "Name": "CURRENT_TIMESTAMP",
        "Tree": "(functionCall (scalarFunctionName CURRENT_TIMESTAMP) ( ))",
        "Description": [
            "Synonyms for NOW()"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html#function_current-timestamp"
        ],
        "Detail": "<link><code>CURRENT_TIMESTAMP</code>&LINK&https://dev.mysql.com/doc/refman/8.4/date-and-time-functions.html#function_current-timestamp</link> , <link><code>CURRENT_TIMESTAMP([ fsp ])</code>&LINK&https://dev.mysql.com/doc/refman/8.4/date-and-time-functions.html#function_current-timestamp</link>\n<link><code>CURRENT_TIMESTAMP</code>&LINK&https://dev.mysql.com/doc/refman/8.4/date-and-time-functions.html#function_current-timestamp</link> and <link><code>CURRENT_TIMESTAMP()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/date-and-time-functions.html#function_current-timestamp</link> are synonyms for <link><code>NOW()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/date-and-time-functions.html#function_now</link> .",
        "Demo": []
    },
    {
        "Name": "CURRENT_USER",
        "Tree": "(functionCall (fullId (uid (simpleId (keywordsCanBeId CURRENT_USER)))) ( ))",
        "Description": [
            "The authenticated user name and host name"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/information-functions.html#function_current-user"
        ],
        "Detail": "<link><code>CURRENT_USER</code>&LINK&https://dev.mysql.com/doc/refman/8.4/information-functions.html#function_current-user</link> , <link><code>CURRENT_USER()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/information-functions.html#function_current-user</link>\nReturns the user name and host name combination for the MySQL account that the server used to authenticate the current client. This account determines your access privileges. The return value is a string in the <code>utf8mb3</code> character set.\nThe value of <link><code>CURRENT_USER()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/information-functions.html#function_current-user</link> can differ from the value of <link><code>USER()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/information-functions.html#function_user</link> .\nThe example illustrates that although the client specified a user name of <code>davida</code> (as indicated by the value of the <link><code>USER()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/information-functions.html#function_user</link> function), the server authenticated the client using an anonymous user account (as seen by the empty user name part of the <link><code>CURRENT_USER()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/information-functions.html#function_current-user</link> value). One way this might occur is that there is no account listed in the grant tables for <code>davida</code> .\nWithin a stored program or view, <link><code>CURRENT_USER()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/information-functions.html#function_current-user</link> returns the account for the user who defined the object (as given by its <code>DEFINER</code> value) unless defined with the <code>SQL SECURITY INVOKER</code> characteristic. In the latter case, <link><code>CURRENT_USER()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/information-functions.html#function_current-user</link> returns the object's invoker.\nTriggers and events have no option to define the <code>SQL SECURITY</code> characteristic, so for these objects, <link><code>CURRENT_USER()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/information-functions.html#function_current-user</link> returns the account for the user who defined the object. To return the invoker, use <link><code>USER()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/information-functions.html#function_user</link> or <link><code>SESSION_USER()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/information-functions.html#function_session-user</link> .\nThe following statements support use of the <link><code>CURRENT_USER()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/information-functions.html#function_current-user</link> function to take the place of the name of (and, possibly, a host for) an affected user or a definer; in such cases, <link><code>CURRENT_USER()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/information-functions.html#function_current-user</link> is expanded where and as needed:\n<link><code>DROP USER</code>&LINK&https://dev.mysql.com/doc/refman/8.4/drop-user.html</link>\n<link><code>RENAME USER</code>&LINK&https://dev.mysql.com/doc/refman/8.4/rename-user.html</link>\n<link><code>GRANT</code>&LINK&https://dev.mysql.com/doc/refman/8.4/grant.html</link>\n<link><code>REVOKE</code>&LINK&https://dev.mysql.com/doc/refman/8.4/revoke.html</link>\n<link><code>CREATE FUNCTION</code>&LINK&https://dev.mysql.com/doc/refman/8.4/create-function.html</link>\n<link><code>CREATE PROCEDURE</code>&LINK&https://dev.mysql.com/doc/refman/8.4/create-procedure.html</link>\n<link><code>CREATE TRIGGER</code>&LINK&https://dev.mysql.com/doc/refman/8.4/create-trigger.html</link>\n<link><code>CREATE EVENT</code>&LINK&https://dev.mysql.com/doc/refman/8.4/create-event.html</link>\n<link><code>CREATE VIEW</code>&LINK&https://dev.mysql.com/doc/refman/8.4/create-view.html</link>\n<link><code>ALTER EVENT</code>&LINK&https://dev.mysql.com/doc/refman/8.4/alter-event.html</link>\n<link><code>ALTER VIEW</code>&LINK&https://dev.mysql.com/doc/refman/8.4/alter-view.html</link>\n<link><code>SET PASSWORD</code>&LINK&https://dev.mysql.com/doc/refman/8.4/set-password.html</link>\nFor information about the implications that this expansion of <link><code>CURRENT_USER()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/information-functions.html#function_current-user</link> has for replication, see <link>Section 19.5.1.8, \"Replication of CURRENT_USER()\"&LINK&https://dev.mysql.com/doc/refman/8.4/replication-features-current-user.html</link> .\nThis function can be used for the default value of a <link><code>VARCHAR</code>&LINK&https://dev.mysql.com/doc/refman/8.4/char.html</link> or <link><code>TEXT</code>&LINK&https://dev.mysql.com/doc/refman/8.4/blob.html</link> column, as shown in the following <link><code>CREATE TABLE</code>&LINK&https://dev.mysql.com/doc/refman/8.4/create-table.html</link> statement:",
        "Demo": [
            "mysql> SELECT USER();\n-> 'davida@localhost'\nmysql> SELECT * FROM mysql.user;\nERROR 1044: Access denied for user ''@'localhost' to\ndatabase 'mysql'\nmysql> SELECT CURRENT_USER();\n-> '@localhost'",
            "CREATE TABLE t (c VARCHAR(288) DEFAULT (CURRENT_USER()));"
        ]
    },
    {
        "Name": "CURTIME",
        "Tree": "(functionCall (scalarFunctionName CURTIME) ( ))",
        "Description": [
            "Return the current time"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html#function_curtime"
        ],
        "Detail": "<link><code>CURTIME([ fsp ])</code>&LINK&https://dev.mysql.com/doc/refman/8.4/date-and-time-functions.html#function_curtime</link>\nReturns the current time as a value in <code>'hh:mm:ss'</code> or <code>hhmmss</code> format, depending on whether the function is used in string or numeric context. The value is expressed in the session time zone.\nIf the <code>fsp</code> argument is given to specify a fractional seconds precision from 0 to 6, the return value includes a fractional seconds part of that many digits.",
        "Demo": [
            "mysql> SELECT CURTIME();\n+-----------+\n| CURTIME() |\n+-----------+\n| 19:25:37 |\n+-----------+\nmysql> SELECT CURTIME() + 0;\n+---------------+\n| CURTIME() + 0 |\n+---------------+\n| 192537 |\n+---------------+\nmysql> SELECT CURTIME(3);\n+--------------+\n| CURTIME(3) |\n+--------------+\n| 19:25:37.840 |\n+--------------+"
        ]
    },
    {
        "Name": "DATABASE",
        "Tree": "(functionCall (scalarFunctionName (functionNameBase DATABASE)) ( ))",
        "Description": [
            "Return the default (current) database name"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/information-functions.html#function_database"
        ],
        "Detail": "<link><code>DATABASE()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/information-functions.html#function_database</link>\nReturns the default (current) database name as a string in the <code>utf8mb3</code> character set. If there is no default database, <link><code>DATABASE()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/information-functions.html#function_database</link> returns <code>NULL</code> . Within a stored routine, the default database is the database that the routine is associated with, which is not necessarily the same as the database that is the default in the calling context.\nIf there is no default database, <link><code>DATABASE()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/information-functions.html#function_database</link> returns <code>NULL</code> .",
        "Demo": [
            "mysql> SELECT DATABASE();\n-> 'test'"
        ]
    },
    {
        "Name": "DATE",
        "Tree": "(functionCall (scalarFunctionName (functionNameBase DATE)) ( ))",
        "Description": [
            "Extract the date part of a date or datetime expression"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html#function_date"
        ],
        "Detail": "<link><code>DATE( expr )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/date-and-time-functions.html#function_date</link>\nExtracts the date part of the date or datetime expression <code>expr</code> . Returns <code>NULL</code> if <code>expr</code> is <code>NULL</code> .",
        "Demo": [
            "mysql> SELECT DATE('2003-12-31 01:02:03');\n-> '2003-12-31'"
        ]
    },
    {
        "Name": "DATE_ADD",
        "Tree": "(functionCall (scalarFunctionName DATE_ADD) ( ))",
        "Description": [
            "Add time values (intervals) to a date value"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html#function_date-add"
        ],
        "Detail": "<link><code>DATE_ADD( date ,INTERVAL expr unit )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/date-and-time-functions.html#function_date-add</link> , <link><code>DATE_SUB( date ,INTERVAL expr unit )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/date-and-time-functions.html#function_date-sub</link>\nThese functions perform date arithmetic. The <code>date</code> argument specifies the starting date or datetime value. <code>expr</code> is an expression specifying the interval value to be added or subtracted from the starting date. <code>expr</code> is evaluated as a string; it may start with a <code>-</code> for negative intervals. <code>unit</code> is a keyword indicating the units in which the expression should be interpreted.\nFor more information about temporal interval syntax, including a full list of <code>unit</code> specifiers, the expected form of the <code>expr</code> argument for each <code>unit</code> value, and rules for operand interpretation in temporal arithmetic, see <link>Temporal Intervals&LINK&https://dev.mysql.com/doc/refman/8.4/expressions.html#temporal-intervals</link> .\nThe return value depends on the arguments:\nIf <code>date</code> is <code>NULL</code> , the function returns <code>NULL</code> .\n<link><code>DATE</code>&LINK&https://dev.mysql.com/doc/refman/8.4/datetime.html</link> if the <code>date</code> argument is a <link><code>DATE</code>&LINK&https://dev.mysql.com/doc/refman/8.4/datetime.html</link> value and your calculations involve only <code>YEAR</code> , <code>MONTH</code> , and <code>DAY</code> parts (that is, no time parts).\n<link><code>TIME</code>&LINK&https://dev.mysql.com/doc/refman/8.4/time.html</link> if the <code>date</code> argument is a <code>TIME</code> value and the calculations involve only <code>HOURS</code> , <code>MINUTES</code> , and <code>SECONDS</code> parts (that is, no date parts).\n<link><code>DATETIME</code>&LINK&https://dev.mysql.com/doc/refman/8.4/datetime.html</link> if the first argument is a <link><code>DATETIME</code>&LINK&https://dev.mysql.com/doc/refman/8.4/datetime.html</link> (or <link><code>TIMESTAMP</code>&LINK&https://dev.mysql.com/doc/refman/8.4/datetime.html</link> ) value, or if the first argument is a <link><code>DATE</code>&LINK&https://dev.mysql.com/doc/refman/8.4/datetime.html</link> and the <code>unit</code> value uses <code>HOURS</code> , <code>MINUTES</code> , or <code>SECONDS</code> , or if the first argument is of type <link><code>TIME</code>&LINK&https://dev.mysql.com/doc/refman/8.4/time.html</link> and the <code>unit</code> value uses <code>YEAR</code> , <code>MONTH</code> , or <code>DAY</code> .\nIf the first argument is a dynamic parameter (for example, of a prepared statement), its resolved type is <code>DATE</code> if the second argument is an interval that contains some combination of <code>YEAR</code> , <code>MONTH</code> , or <code>DAY</code> values only; otherwise, its type is <code>DATETIME</code> .\nString otherwise (type <link><code>VARCHAR</code>&LINK&https://dev.mysql.com/doc/refman/8.4/char.html</link> ).\nTo ensure that the result is <link><code>DATETIME</code>&LINK&https://dev.mysql.com/doc/refman/8.4/datetime.html</link> , you can use <link><code>CAST()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/cast-functions.html#function_cast</link> to convert the first argument to <link><code>DATETIME</code>&LINK&https://dev.mysql.com/doc/refman/8.4/datetime.html</link> .\nWhen adding a <code>MONTH</code> interval to a <code>DATE</code> or <code>DATETIME</code> value, and the resulting date includes a day that does not exist in the given month, the day is adjusted to the last day of the month, as shown here:",
        "Demo": [
            "mysql> SELECT DATE_ADD('2018-05-01',INTERVAL 1 DAY);\n-> '2018-05-02'\nmysql> SELECT DATE_SUB('2018-05-01',INTERVAL 1 YEAR);\n-> '2017-05-01'\nmysql> SELECT DATE_ADD('2020-12-31 23:59:59',\n-> INTERVAL 1 SECOND);\n-> '2021-01-01 00:00:00'\nmysql> SELECT DATE_ADD('2018-12-31 23:59:59',\n-> INTERVAL 1 DAY);\n-> '2019-01-01 23:59:59'\nmysql> SELECT DATE_ADD('2100-12-31 23:59:59',\n-> INTERVAL '1:1' MINUTE_SECOND);\n-> '2101-01-01 00:01:00'\nmysql> SELECT DATE_SUB('2025-01-01 00:00:00',\n-> INTERVAL '1 1:1:1' DAY_SECOND);\n-> '2024-12-30 22:58:59'\nmysql> SELECT DATE_ADD('1900-01-01 00:00:00',\n-> INTERVAL '-1 10' DAY_HOUR);\n-> '1899-12-30 14:00:00'\nmysql> SELECT DATE_SUB('1998-01-02', INTERVAL 31 DAY);\n-> '1997-12-02'\nmysql> SELECT DATE_ADD('1992-12-31 23:59:59.000002',\n-> INTERVAL '1.999999' SECOND_MICROSECOND);\n-> '1993-01-01 00:00:01.000001'",
            "mysql> SELECT DATE_ADD('2024-03-30', INTERVAL 1 MONTH) AS d1,\n> DATE_ADD('2024-03-31', INTERVAL 1 MONTH) AS d2;\n+------------+------------+\n| d1 | d2 |\n+------------+------------+\n| 2024-04-30 | 2024-04-30 |\n+------------+------------+\n1 row in set (0.00 sec)"
        ]
    },
    {
        "Name": "DATE_FORMAT",
        "Tree": "(functionCall (scalarFunctionName (functionNameBase DATE_FORMAT)) ( ))",
        "Description": [
            "Format date as specified"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html#function_date-format"
        ],
        "Detail": "<link><code>DATE_FORMAT( date , format )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/date-and-time-functions.html#function_date-format</link>\nFormats the <code>date</code> value according to the <code>format</code> string. If either argument is <code>NULL</code> , the function returns <code>NULL</code> .\nThe specifiers shown in the following table may be used in the <code>format</code> string. The <code>%</code> character is required before format specifier characters. The specifiers apply to other functions as well: <link><code>STR_TO_DATE()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/date-and-time-functions.html#function_str-to-date</link> , <link><code>TIME_FORMAT()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/date-and-time-functions.html#function_time-format</link> , <link><code>UNIX_TIMESTAMP()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/date-and-time-functions.html#function_unix-timestamp</link> .\n<table><thead><tr><th>Specifier</th>\n<th>Description</th></tr></thead>\n<tbody><tr><td><code>%a</code></td>\n<td>Abbreviated weekday name\n(\n<code>Sun</code>\n..\n<code>Sat</code>\n)</td></tr>\n<tr><td><code>%b</code></td>\n<td>Abbreviated month name (\n<code>Jan</code>\n..\n<code>Dec</code>\n)</td></tr>\n<tr><td><code>%c</code></td>\n<td>Month, numeric (\n<code>0</code>\n..\n<code>12</code>\n)</td></tr>\n<tr><td><code>%D</code></td>\n<td>Day of the month with English suffix (\n<code>0th</code>\n,\n<code>1st</code>\n,\n<code>2nd</code>\n,\n<code>3rd</code>\n, \u2026)</td></tr>\n<tr><td><code>%d</code></td>\n<td>Day of the month, numeric (\n<code>00</code>\n..\n<code>31</code>\n)</td></tr>\n<tr><td><code>%e</code></td>\n<td>Day of the month, numeric (\n<code>0</code>\n..\n<code>31</code>\n)</td></tr>\n<tr><td><code>%f</code></td>\n<td>Microseconds (\n<code>000000</code>\n..\n<code>999999</code>\n)</td></tr>\n<tr><td><code>%H</code></td>\n<td>Hour (\n<code>00</code>\n..\n<code>23</code>\n)</td></tr>\n<tr><td><code>%h</code></td>\n<td>Hour (\n<code>01</code>\n..\n<code>12</code>\n)</td></tr>\n<tr><td><code>%I</code></td>\n<td>Hour (\n<code>01</code>\n..\n<code>12</code>\n)</td></tr>\n<tr><td><code>%i</code></td>\n<td>Minutes, numeric (\n<code>00</code>\n..\n<code>59</code>\n)</td></tr>\n<tr><td><code>%j</code></td>\n<td>Day of year (\n<code>001</code>\n..\n<code>366</code>\n)</td></tr>\n<tr><td><code>%k</code></td>\n<td>Hour (\n<code>0</code>\n..\n<code>23</code>\n)</td></tr>\n<tr><td><code>%l</code></td>\n<td>Hour (\n<code>1</code>\n..\n<code>12</code>\n)</td></tr>\n<tr><td><code>%M</code></td>\n<td>Month name (\n<code>January</code>\n..\n<code>December</code>\n)</td></tr>\n<tr><td><code>%m</code></td>\n<td>Month, numeric (\n<code>00</code>\n..\n<code>12</code>\n)</td></tr>\n<tr><td><code>%p</code></td>\n<td><code>AM</code>\nor\n<code>PM</code></td></tr>\n<tr><td><code>%r</code></td>\n<td>Time, 12-hour (\n<code>hh:mm:ss</code>\nfollowed by\n<code>AM</code>\nor\n<code>PM</code>\n)</td></tr>\n<tr><td><code>%S</code></td>\n<td>Seconds (\n<code>00</code>\n..\n<code>59</code>\n)</td></tr>\n<tr><td><code>%s</code></td>\n<td>Seconds (\n<code>00</code>\n..\n<code>59</code>\n)</td></tr>\n<tr><td><code>%T</code></td>\n<td>Time, 24-hour (\n<code>hh:mm:ss</code>\n)</td></tr>\n<tr><td><code>%U</code></td>\n<td>Week (\n<code>00</code>\n..\n<code>53</code>\n), where Sunday is the\nfirst day of the week;\n<link><code>WEEK()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/date-and-time-functions.html#function_week</link>\nmode 0</td></tr>\n<tr><td><code>%u</code></td>\n<td>Week (\n<code>00</code>\n..\n<code>53</code>\n), where Monday is the\nfirst day of the week;\n<link><code>WEEK()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/date-and-time-functions.html#function_week</link>\nmode 1</td></tr>\n<tr><td><code>%V</code></td>\n<td>Week (\n<code>01</code>\n..\n<code>53</code>\n), where Sunday is the\nfirst day of the week;\n<link><code>WEEK()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/date-and-time-functions.html#function_week</link>\nmode 2; used with\n<code>%X</code></td></tr>\n<tr><td><code>%v</code></td>\n<td>Week (\n<code>01</code>\n..\n<code>53</code>\n), where Monday is the\nfirst day of the week;\n<link><code>WEEK()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/date-and-time-functions.html#function_week</link>\nmode 3; used with\n<code>%x</code></td></tr>\n<tr><td><code>%W</code></td>\n<td>Weekday name (\n<code>Sunday</code>\n..\n<code>Saturday</code>\n)</td></tr>\n<tr><td><code>%w</code></td>\n<td>Day of the week\n(\n<code>0</code>\n=Sunday..\n<code>6</code>\n=Saturday)</td></tr>\n<tr><td><code>%X</code></td>\n<td>Year for the week where Sunday is the first day of the week, numeric,\nfour digits; used with\n<code>%V</code></td></tr>\n<tr><td><code>%x</code></td>\n<td>Year for the week, where Monday is the first day of the week, numeric,\nfour digits; used with\n<code>%v</code></td></tr>\n<tr><td><code>%Y</code></td>\n<td>Year, numeric, four digits</td></tr>\n<tr><td><code>%y</code></td>\n<td>Year, numeric (two digits)</td></tr>\n<tr><td><code>%%</code></td>\n<td>A literal\n<code>%</code>\ncharacter</td></tr>\n<tr><td><code>% x</code></td>\n<td><code>x</code>\n, for any\n\"\n<code>x</code>\n\"\nnot listed\nabove</td></tr></tbody></table>\nRanges for the month and day specifiers begin with zero due to the fact that MySQL permits the storing of incomplete dates such as <code>'2014-00-00'</code> .\nThe language used for day and month names and abbreviations is controlled by the value of the <link><code>lc_time_names</code>&LINK&https://dev.mysql.com/doc/refman/8.4/server-system-variables.html#sysvar_lc_time_names</link> system variable ( <link>Section 12.16, \"MySQL Server Locale Support\"&LINK&https://dev.mysql.com/doc/refman/8.4/locale-support.html</link> ).\nFor the <code>%U</code> , <code>%u</code> , <code>%V</code> , and <code>%v</code> specifiers, see the description of the <link><code>WEEK()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/date-and-time-functions.html#function_week</link> function for information about the mode values. The mode affects how week numbering occurs.\n<link><code>DATE_FORMAT()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/date-and-time-functions.html#function_date-format</link> returns a string with a character set and collation given by <link><code>character_set_connection</code>&LINK&https://dev.mysql.com/doc/refman/8.4/server-system-variables.html#sysvar_character_set_connection</link> and <link><code>collation_connection</code>&LINK&https://dev.mysql.com/doc/refman/8.4/server-system-variables.html#sysvar_collation_connection</link> so that it can return month and weekday names containing non-ASCII characters.",
        "Demo": [
            "mysql> SELECT DATE_FORMAT('2009-10-04 22:23:00', '%W %M %Y');\n-> 'Sunday October 2009'\nmysql> SELECT DATE_FORMAT('2007-10-04 22:23:00', '%H:%i:%s');\n-> '22:23:00'\nmysql> SELECT DATE_FORMAT('1900-10-04 22:23:00',\n-> '%D %y %a %d %m %b %j');\n-> '4th 00 Thu 04 10 Oct 277'\nmysql> SELECT DATE_FORMAT('1997-10-04 22:23:00',\n-> '%H %k %I %r %T %S %w');\n-> '22 22 10 10:23:00 PM 22:23:00 00 6'\nmysql> SELECT DATE_FORMAT('1999-01-01', '%X %V');\n-> '1998 52'\nmysql> SELECT DATE_FORMAT('2006-06-00', '%d');\n-> '00'"
        ]
    },
    {
        "Name": "DATE_SUB",
        "Tree": "(functionCall (scalarFunctionName DATE_SUB) ( ))",
        "Description": [
            "Subtract a time value (interval) from a date"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html#function_date-sub"
        ],
        "Detail": "<link><code>DATE_SUB( date ,INTERVAL expr unit )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/date-and-time-functions.html#function_date-sub</link>\nSee the description for <link><code>DATE_ADD()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/date-and-time-functions.html#function_date-add</link> .",
        "Demo": []
    },
    {
        "Name": "DATEDIFF",
        "Tree": "(functionCall (scalarFunctionName (functionNameBase DATEDIFF)) ( ))",
        "Description": [
            "Subtract two dates"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html#function_datediff"
        ],
        "Detail": "<link><code>DATEDIFF( expr1 , expr2 )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/date-and-time-functions.html#function_datediff</link>\n<link><code>DATEDIFF()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/date-and-time-functions.html#function_datediff</link> returns <code>expr1</code> \u2212 <code>expr2</code> expressed as a value in days from one date to the other. <code>expr1</code> and <code>expr2</code> are date or date-and-time expressions. Only the date parts of the values are used in the calculation.\nThis function returns <code>NULL</code> if <code>expr1</code> or <code>expr2</code> is <code>NULL</code> .",
        "Demo": [
            "mysql> SELECT DATEDIFF('2007-12-31 23:59:59','2007-12-30');\n-> 1\nmysql> SELECT DATEDIFF('2010-11-30 23:59:59','2010-12-31');\n-> -31"
        ]
    },
    {
        "Name": "DAY",
        "Tree": "(functionCall (scalarFunctionName (functionNameBase DAY)) ( ))",
        "Description": [
            "Synonym for DAYOFMONTH()"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html#function_day"
        ],
        "Detail": "<link><code>DAY( date )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/date-and-time-functions.html#function_day</link>\n<link><code>DAY()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/date-and-time-functions.html#function_day</link> is a synonym for <link><code>DAYOFMONTH()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/date-and-time-functions.html#function_dayofmonth</link> .",
        "Demo": []
    },
    {
        "Name": "DAYNAME",
        "Tree": "(functionCall (scalarFunctionName (functionNameBase DAYNAME)) ( ))",
        "Description": [
            "Return the name of the weekday"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html#function_dayname"
        ],
        "Detail": "<link><code>DAYNAME( date )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/date-and-time-functions.html#function_dayname</link>\nReturns the name of the weekday for <code>date</code> . The language used for the name is controlled by the value of the <link><code>lc_time_names</code>&LINK&https://dev.mysql.com/doc/refman/8.4/server-system-variables.html#sysvar_lc_time_names</link> system variable (see <link>Section 12.16, \"MySQL Server Locale Support\"&LINK&https://dev.mysql.com/doc/refman/8.4/locale-support.html</link> ). Returns <code>NULL</code> if <code>date</code> is <code>NULL</code> .",
        "Demo": [
            "mysql> SELECT DAYNAME('2007-02-03');\n-> 'Saturday'"
        ]
    },
    {
        "Name": "DAYOFMONTH",
        "Tree": "(functionCall (scalarFunctionName (functionNameBase DAYOFMONTH)) ( ))",
        "Description": [
            "Return the day of the month (0-31)"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html#function_dayofmonth"
        ],
        "Detail": "<link><code>DAYOFMONTH( date )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/date-and-time-functions.html#function_dayofmonth</link>\nReturns the day of the month for <code>date</code> , in the range <code>1</code> to <code>31</code> , or <code>0</code> for dates such as <code>'0000-00-00'</code> or <code>'2008-00-00'</code> that have a zero day part. Returns <code>NULL</code> if <code>date</code> is <code>NULL</code> .",
        "Demo": [
            "mysql> SELECT DAYOFMONTH('2007-02-03');\n-> 3"
        ]
    },
    {
        "Name": "DAYOFWEEK",
        "Tree": "(functionCall (scalarFunctionName (functionNameBase DAYOFWEEK)) ( ))",
        "Description": [
            "Return the weekday index of the argument"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html#function_dayofweek"
        ],
        "Detail": "<link><code>DAYOFWEEK( date )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/date-and-time-functions.html#function_dayofweek</link>\nReturns the weekday index for <code>date</code> ( <code>1</code> = Sunday, <code>2</code> = Monday, \u2026, <code>7</code> = Saturday). These index values correspond to the ODBC standard. Returns <code>NULL</code> if <code>date</code> is <code>NULL</code> .",
        "Demo": [
            "mysql> SELECT DAYOFWEEK('2007-02-03');\n-> 7"
        ]
    },
    {
        "Name": "DAYOFYEAR",
        "Tree": "(functionCall (scalarFunctionName (functionNameBase DAYOFYEAR)) ( ))",
        "Description": [
            "Return the day of the year (1-366)"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html#function_dayofyear"
        ],
        "Detail": "<link><code>DAYOFYEAR( date )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/date-and-time-functions.html#function_dayofyear</link>\nReturns the day of the year for <code>date</code> , in the range <code>1</code> to <code>366</code> . Returns <code>NULL</code> if <code>date</code> is <code>NULL</code> .",
        "Demo": [
            "mysql> SELECT DAYOFYEAR('2007-02-03');\n-> 34"
        ]
    },
    {
        "Name": "DEFAULT",
        "Tree": "(functionCall (fullId (uid (simpleId (keywordsCanBeId DEFAULT)))) ( ))",
        "Description": [
            "Return the default value for a table column"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/miscellaneous-functions.html#function_default"
        ],
        "Detail": "<link><code>DEFAULT( col_name )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/miscellaneous-functions.html#function_default</link>\nReturns the default value for a table column. An error results if the column has no default value.\nThe use of <link><code>DEFAULT( col_name )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/miscellaneous-functions.html#function_default</link> to specify the default value for a named column is permitted only for columns that have a literal default value, not for columns that have an expression default value.",
        "Demo": [
            "mysql> UPDATE t SET i = DEFAULT(i)+1 WHERE id < 100;"
        ]
    },
    {
        "Name": "DEGREES",
        "Tree": "(functionCall (scalarFunctionName (functionNameBase DEGREES)) ( ))",
        "Description": [
            "Convert radians to degrees"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/mathematical-functions.html#function_degrees"
        ],
        "Detail": "<link><code>DEGREES( X )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/mathematical-functions.html#function_degrees</link>\nReturns the argument <code>X</code> , converted from radians to degrees. Returns <code>NULL</code> if <code>X</code> is <code>NULL</code> .",
        "Demo": [
            "mysql> SELECT DEGREES(PI());\n-> 180\nmysql> SELECT DEGREES(PI() / 2);\n-> 90"
        ]
    },
    {
        "Name": "DENSE_RANK",
        "Tree": "(functionCall (scalarFunctionName (functionNameBase DENSE_RANK)) ( ))",
        "Description": [
            "Rank of current row within its partition, without gaps"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/window-function-descriptions.html#function_dense-rank"
        ],
        "Detail": "<link><code>DENSE_RANK()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/window-function-descriptions.html#function_dense-rank</link> <code>over_clause</code>\nReturns the rank of the current row within its partition, without gaps. Peers are considered ties and receive the same rank. This function assigns consecutive ranks to peer groups; the result is that groups of size greater than one do not produce noncontiguous rank numbers. For an example, see the <link><code>RANK()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/window-function-descriptions.html#function_rank</link> function description.\nThis function should be used with <code>ORDER BY</code> to sort partition rows into the desired order. Without <code>ORDER BY</code> , all rows are peers.\n<code>over_clause</code> is as described in <link>Section 14.20.2, \"Window Function Concepts and Syntax\"&LINK&https://dev.mysql.com/doc/refman/8.4/window-functions-usage.html</link> .",
        "Demo": []
    },
    {
        "Name": "ELT",
        "Tree": "(functionCall (scalarFunctionName (functionNameBase ELT)) ( ))",
        "Description": [
            "Return string at index number"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/string-functions.html#function_elt"
        ],
        "Detail": "<link><code>ELT( N , str1 , str2 , str3 ,...)</code>&LINK&https://dev.mysql.com/doc/refman/8.4/string-functions.html#function_elt</link>\n<link><code>ELT()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/string-functions.html#function_elt</link> returns the <code>N</code> th element of the list of strings: <code>str1</code> if <code>N</code> = <code>1</code> , <code>str2</code> if <code>N</code> = <code>2</code> , and so on. Returns <code>NULL</code> if <code>N</code> is less than <code>1</code> , greater than the number of arguments, or <code>NULL</code> . <link><code>ELT()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/string-functions.html#function_elt</link> is the complement of <link><code>FIELD()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/string-functions.html#function_field</link> .",
        "Demo": [
            "mysql> SELECT ELT(1, 'Aa', 'Bb', 'Cc', 'Dd');\n-> 'Aa'\nmysql> SELECT ELT(4, 'Aa', 'Bb', 'Cc', 'Dd');\n-> 'Dd'"
        ]
    },
    {
        "Name": "EXP",
        "Tree": "(functionCall (scalarFunctionName (functionNameBase EXP)) ( ))",
        "Description": [
            "Raise to the power of"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/mathematical-functions.html#function_exp"
        ],
        "Detail": "<link><code>EXP( X )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/mathematical-functions.html#function_exp</link>\nReturns the value of e (the base of natural logarithms) raised to the power of <code>X</code> . The inverse of this function is <link><code>LOG()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/mathematical-functions.html#function_log</link> (using a single argument only) or <link><code>LN()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/mathematical-functions.html#function_ln</link> .\nIf <code>X</code> is <code>NULL</code> , this function returns <code>NULL</code> .",
        "Demo": [
            "mysql> SELECT EXP(2);\n-> 7.3890560989307\nmysql> SELECT EXP(-2);\n-> 0.13533528323661\nmysql> SELECT EXP(0);\n-> 1"
        ]
    },
    {
        "Name": "EXPORT_SET",
        "Tree": "(functionCall (scalarFunctionName (functionNameBase EXPORT_SET)) ( ))",
        "Description": [
            "Return a string such that for every bit set in the value bits, you\n      get an on string and for every unset bit, you get an off string"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/string-functions.html#function_export-set"
        ],
        "Detail": "<link><code>EXPORT_SET( bits , on , off [, separator [, number_of_bits ]])</code>&LINK&https://dev.mysql.com/doc/refman/8.4/string-functions.html#function_export-set</link>\nReturns a string such that for every bit set in the value <code>bits</code> , you get an <code>on</code> string and for every bit not set in the value, you get an <code>off</code> string. Bits in <code>bits</code> are examined from right to left (from low-order to high-order bits). Strings are added to the result from left to right, separated by the <code>separator</code> string (the default being the comma character <code>,</code> ). The number of bits examined is given by <code>number_of_bits</code> , which has a default of 64 if not specified. <code>number_of_bits</code> is silently clipped to 64 if larger than 64. It is treated as an unsigned integer, so a value of \u22121 is effectively the same as 64.",
        "Demo": [
            "mysql> SELECT EXPORT_SET(5,'Y','N',',',4);\n-> 'Y,N,Y,N'\nmysql> SELECT EXPORT_SET(6,'1','0',',',10);\n-> '0,1,1,0,0,0,0,0,0,0'"
        ]
    },
    {
        "Name": "EXTRACT",
        "Tree": "(functionCall (specificFunction EXTRACT ( )))",
        "Description": [
            "Extract part of a date"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html#function_extract"
        ],
        "Detail": "EXTRACT( unit FROM date ) The EXTRACT() function uses the same kinds of unit specifiers as DATE_ADD() or DATE_SUB() , but extracts parts from the date rather than performing date arithmetic. For information on the unit argument, see Temporal Intervals . Returns NULL if date is NULL . mysql> SELECT EXTRACT(YEAR FROM '2019-07-02'); -> 2019 mysql> SELECT EXTRACT(YEAR_MONTH FROM '2019-07-02 01:02:03'); -> 201907 mysql> SELECT EXTRACT(DAY_MINUTE FROM '2019-07-02 01:02:03'); -> 20102 mysql> SELECT EXTRACT(MICROSECOND -> FROM '2003-01-02 10:30:00.000123'); -> 123",
        "Demo": [
            "SELECT EXTRACT(MICROSECOND FROM '2003-01-02 10:30:00.000123');"
        ]
    },
    {
        "Name": "ExtractValue",
        "Tree": "(functionCall (scalarFunctionName (functionNameBase ExtractValue)) ( ))",
        "Description": [
            "Extract a value from an XML string using XPath notation"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/xml-functions.html#function_extractvalue"
        ],
        "Detail": "<link><code>ExtractValue( xml_frag , xpath_expr )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/xml-functions.html#function_extractvalue</link>\n<link><code>ExtractValue()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/xml-functions.html#function_extractvalue</link> takes two string arguments, a fragment of XML markup <code>xml_frag</code> and an XPath expression <code>xpath_expr</code> (also known as a locator ); it returns the text ( <code>CDATA</code> ) of the first text node which is a child of the element or elements matched by the XPath expression.\nUsing this function is the equivalent of performing a match using the <code>xpath_expr</code> after appending <code>/text()</code> . In other words, <link><code>ExtractValue('<a><b>Sakila</b></a>', '/a/b')</code>&LINK&https://dev.mysql.com/doc/refman/8.4/xml-functions.html#function_extractvalue</link> and <link><code>ExtractValue('<a><b>Sakila</b></a>', '/a/b/text()')</code>&LINK&https://dev.mysql.com/doc/refman/8.4/xml-functions.html#function_extractvalue</link> produce the same result. If <code>xml_frag</code> or <code>xpath_expr</code> is <code>NULL</code> , the function returns <code>NULL</code> .\nIf multiple matches are found, the content of the first child text node of each matching element is returned (in the order matched) as a single, space-delimited string.\nIf no matching text node is found for the expression (including the implicit <code>/text()</code> )\u2014for whatever reason, as long as <code>xpath_expr</code> is valid, and <code>xml_frag</code> consists of elements which are properly nested and closed\u2014an empty string is returned. No distinction is made between a match on an empty element and no match at all. This is by design.\nIf you need to determine whether no matching element was found in <code>xml_frag</code> or such an element was found but contained no child text nodes, you should test the result of an expression that uses the XPath <code>count()</code> function. For example, both of these statements return an empty string, as shown here:\nHowever, you can determine whether there was actually a matching element using the following:\nImportant\n<link><code>ExtractValue()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/xml-functions.html#function_extractvalue</link> returns only <code>CDATA</code> , and does not return any tags that might be contained within a matching tag, nor any of their content (see the result returned as <code>val1</code> in the following example).\nThis function uses the current SQL collation for making comparisons with <code>contains()</code> , performing the same collation aggregation as other string functions (such as <link><code>CONCAT()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/string-functions.html#function_concat</link> ), in taking into account the collation coercibility of their arguments; see <link>Section 12.8.4, \"Collation Coercibility in Expressions\"&LINK&https://dev.mysql.com/doc/refman/8.4/charset-collation-coercibility.html</link> , for an explanation of the rules governing this behavior.\n(Previously, binary\u2014that is, case-sensitive\u2014comparison was always used.)\n<code>NULL</code> is returned if <code>xml_frag</code> contains elements which are not properly nested or closed, and a warning is generated, as shown in this example:",
        "Demo": [
            "mysql> SELECT ExtractValue('<a><b/></a>', '/a/b');\n+-------------------------------------+\n| ExtractValue('<a><b/></a>', '/a/b') |\n+-------------------------------------+\n| |\n+-------------------------------------+\n1 row in set (0.00 sec)\nmysql> SELECT ExtractValue('<a><c/></a>', '/a/b');\n+-------------------------------------+\n| ExtractValue('<a><c/></a>', '/a/b') |\n+-------------------------------------+\n| |\n+-------------------------------------+\n1 row in set (0.00 sec)",
            "mysql> SELECT ExtractValue('<a><b/></a>', 'count(/a/b)');\n+-------------------------------------+\n| ExtractValue('<a><b/></a>', 'count(/a/b)') |\n+-------------------------------------+\n| 1 |\n+-------------------------------------+\n1 row in set (0.00 sec)\nmysql> SELECT ExtractValue('<a><c/></a>', 'count(/a/b)');\n+-------------------------------------+\n| ExtractValue('<a><c/></a>', 'count(/a/b)') |\n+-------------------------------------+\n| 0 |\n+-------------------------------------+\n1 row in set (0.01 sec)",
            "mysql> SELECT\n-> ExtractValue('<a>ccc<b>ddd</b></a>', '/a') AS val1,\n-> ExtractValue('<a>ccc<b>ddd</b></a>', '/a/b') AS val2,\n-> ExtractValue('<a>ccc<b>ddd</b></a>', '//b') AS val3,\n-> ExtractValue('<a>ccc<b>ddd</b></a>', '/b') AS val4,\n-> ExtractValue('<a>ccc<b>ddd</b><b>eee</b></a>', '//b') AS val5;\n+------+------+------+------+---------+\n| val1 | val2 | val3 | val4 | val5 |\n+------+------+------+------+---------+\n| ccc | ddd | ddd | | ddd eee |\n+------+------+------+------+---------+",
            "mysql> SELECT ExtractValue('<a>c</a><b', '//a');\n+-----------------------------------+\n| ExtractValue('<a>c</a><b', '//a') |\n+-----------------------------------+\n| NULL |\n+-----------------------------------+\n1 row in set, 1 warning (0.00 sec)\nmysql> SHOW WARNINGS\\G\n*************************** 1. row ***************************\nLevel: Warning\nCode: 1525\nMessage: Incorrect XML value: 'parse error at line 1 pos 11:\nEND-OF-INPUT unexpected ('>' wanted)'\n1 row in set (0.00 sec)\nmysql> SELECT ExtractValue('<a>c</a><b/>', '//a');\n+-------------------------------------+\n| ExtractValue('<a>c</a><b/>', '//a') |\n+-------------------------------------+\n| c |\n+-------------------------------------+\n1 row in set (0.00 sec)"
        ]
    },
    {
        "Name": "FIELD",
        "Tree": "(functionCall (scalarFunctionName (functionNameBase FIELD)) ( ))",
        "Description": [
            "Index (position) of first argument in subsequent arguments"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/string-functions.html#function_field"
        ],
        "Detail": "<link><code>FIELD( str , str1 , str2 , str3 ,...)</code>&LINK&https://dev.mysql.com/doc/refman/8.4/string-functions.html#function_field</link>\nReturns the index (position) of <code>str</code> in the <code>str1</code> , <code>str2</code> , <code>str3</code> , <code>...</code> list. Returns <code>0</code> if <code>str</code> is not found.\nIf all arguments to <link><code>FIELD()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/string-functions.html#function_field</link> are strings, all arguments are compared as strings. If all arguments are numbers, they are compared as numbers. Otherwise, the arguments are compared as double.\nIf <code>str</code> is <code>NULL</code> , the return value is <code>0</code> because <code>NULL</code> fails equality comparison with any value. <link><code>FIELD()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/string-functions.html#function_field</link> is the complement of <link><code>ELT()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/string-functions.html#function_elt</link> .",
        "Demo": [
            "mysql> SELECT FIELD('Bb', 'Aa', 'Bb', 'Cc', 'Dd', 'Ff');\n-> 2\nmysql> SELECT FIELD('Gg', 'Aa', 'Bb', 'Cc', 'Dd', 'Ff');\n-> 0"
        ]
    },
    {
        "Name": "FIND_IN_SET",
        "Tree": "(functionCall (scalarFunctionName (functionNameBase FIND_IN_SET)) ( ))",
        "Description": [
            "Index (position) of first argument within second argument"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/string-functions.html#function_find-in-set"
        ],
        "Detail": "<link><code>FIND_IN_SET( str , strlist )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/string-functions.html#function_find-in-set</link>\nReturns a value in the range of 1 to <code>N</code> if the string <code>str</code> is in the string list <code>strlist</code> consisting of <code>N</code> substrings. A string list is a string composed of substrings separated by <code>,</code> characters. If the first argument is a constant string and the second is a column of type <link><code>SET</code>&LINK&https://dev.mysql.com/doc/refman/8.4/set.html</link> , the <link><code>FIND_IN_SET()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/string-functions.html#function_find-in-set</link> function is optimized to use bit arithmetic. Returns <code>0</code> if <code>str</code> is not in <code>strlist</code> or if <code>strlist</code> is the empty string. Returns <code>NULL</code> if either argument is <code>NULL</code> . This function does not work properly if the first argument contains a comma ( <code>,</code> ) character.",
        "Demo": [
            "mysql> SELECT FIND_IN_SET('b','a,b,c,d');\n-> 2"
        ]
    },
    {
        "Name": "FIRST_VALUE",
        "Tree": "(functionCall (scalarFunctionName (functionNameBase FIRST_VALUE)) ( ))",
        "Description": [
            "Value of argument from first row of window frame"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/window-function-descriptions.html#function_first-value"
        ],
        "Detail": "<link><code>FIRST_VALUE( expr )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/window-function-descriptions.html#function_first-value</link> [ <code>null_treatment</code> ] <code>over_clause</code>\nReturns the value of <code>expr</code> from the first row of the window frame.\n<code>over_clause</code> is as described in <link>Section 14.20.2, \"Window Function Concepts and Syntax\"&LINK&https://dev.mysql.com/doc/refman/8.4/window-functions-usage.html</link> . <code>null_treatment</code> is as described in the section introduction.\nThe following query demonstrates <link><code>FIRST_VALUE()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/window-function-descriptions.html#function_first-value</link> , <link><code>LAST_VALUE()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/window-function-descriptions.html#function_last-value</link> , and two instances of <link><code>NTH_VALUE()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/window-function-descriptions.html#function_nth-value</link> :\nEach function uses the rows in the current frame, which, per the window definition shown, extends from the first partition row to the current row. For the <link><code>NTH_VALUE()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/window-function-descriptions.html#function_nth-value</link> calls, the current frame does not always include the requested row; in such cases, the return value is <code>NULL</code> .",
        "Demo": [
            "mysql> SELECT\ntime, subject, val,\nFIRST_VALUE(val) OVER w AS 'first',\nLAST_VALUE(val) OVER w AS 'last',\nNTH_VALUE(val, 2) OVER w AS 'second',\nNTH_VALUE(val, 4) OVER w AS 'fourth'\nFROM observations\nWINDOW w AS (PARTITION BY subject ORDER BY time\nROWS UNBOUNDED PRECEDING);\n+----------+---------+------+-------+------+--------+--------+\n| time | subject | val | first | last | second | fourth |\n+----------+---------+------+-------+------+--------+--------+\n| 07:00:00 | st113 | 10 | 10 | 10 | NULL | NULL |\n| 07:15:00 | st113 | 9 | 10 | 9 | 9 | NULL |\n| 07:30:00 | st113 | 25 | 10 | 25 | 9 | NULL |\n| 07:45:00 | st113 | 20 | 10 | 20 | 9 | 20 |\n| 07:00:00 | xh458 | 0 | 0 | 0 | NULL | NULL |\n| 07:15:00 | xh458 | 10 | 0 | 10 | 10 | NULL |\n| 07:30:00 | xh458 | 5 | 0 | 5 | 10 | NULL |\n| 07:45:00 | xh458 | 30 | 0 | 30 | 10 | 30 |\n| 08:00:00 | xh458 | 25 | 0 | 25 | 10 | 30 |\n+----------+---------+------+-------+------+--------+--------+"
        ]
    },
    {
        "Name": "FLOOR",
        "Tree": "(functionCall (scalarFunctionName (functionNameBase FLOOR)) ( ))",
        "Description": [
            "Return the largest integer value not greater than the argument"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/mathematical-functions.html#function_floor"
        ],
        "Detail": "<link><code>FLOOR( X )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/mathematical-functions.html#function_floor</link>\nReturns the largest integer value not greater than <code>X</code> . Returns <code>NULL</code> if <code>X</code> is <code>NULL</code> .\nFor exact-value numeric arguments, the return value has an exact-value numeric type. For string or floating-point arguments, the return value has a floating-point type.",
        "Demo": [
            "mysql> SELECT FLOOR(1.23), FLOOR(-1.23);\n-> 1, -2"
        ]
    },
    {
        "Name": "FORMAT",
        "Tree": "(functionCall (scalarFunctionName (functionNameBase FORMAT)) ( ))",
        "Description": [
            "Return a number formatted to specified number of decimal places"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/string-functions.html#function_format"
        ],
        "Detail": "<link><code>FORMAT( X , D [, locale ])</code>&LINK&https://dev.mysql.com/doc/refman/8.4/string-functions.html#function_format</link>\nFormats the number <code>X</code> to a format like <code>'#,###,###.##'</code> , rounded to <code>D</code> decimal places, and returns the result as a string. If <code>D</code> is <code>0</code> , the result has no decimal point or fractional part. If <code>X</code> or <code>D</code> is <code>NULL</code> , the function returns <code>NULL</code> .\nThe optional third parameter enables a locale to be specified to be used for the result number's decimal point, thousands separator, and grouping between separators. Permissible locale values are the same as the legal values for the <link><code>lc_time_names</code>&LINK&https://dev.mysql.com/doc/refman/8.4/server-system-variables.html#sysvar_lc_time_names</link> system variable (see <link>Section 12.16, \"MySQL Server Locale Support\"&LINK&https://dev.mysql.com/doc/refman/8.4/locale-support.html</link> ). If the locale is <code>NULL</code> or not specified, the default locale is <code>'en_US'</code> .",
        "Demo": [
            "mysql> SELECT FORMAT(12332.123456, 4);\n-> '12,332.1235'\nmysql> SELECT FORMAT(12332.1,4);\n-> '12,332.1000'\nmysql> SELECT FORMAT(12332.2,0);\n-> '12,332'\nmysql> SELECT FORMAT(12332.2,2,'de_DE');\n-> '12.332,20'"
        ]
    },
    {
        "Name": "FORMAT_BYTES",
        "Tree": "(functionCall (fullId (uid (simpleId FORMAT_BYTES))) ( ))",
        "Description": [
            "Convert byte count to value with units"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/performance-schema-functions.html#function_format-bytes"
        ],
        "Detail": "<link><code>FORMAT_BYTES( count )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/performance-schema-functions.html#function_format-bytes</link>\nGiven a numeric byte count, converts it to human-readable format and returns a string consisting of a value and a units indicator. The string contains the number of bytes rounded to 2 decimal places and a minimum of 3 significant digits. Numbers less than 1024 bytes are represented as whole numbers and are not rounded. Returns <code>NULL</code> if <code>count</code> is <code>NULL</code> .\nThe units indicator depends on the size of the byte-count argument as shown in the following table.\n<table><thead><tr><th>Argument Value</th>\n<th>Result Units</th>\n<th>Result Units Indicator</th></tr></thead>\n<tbody><tr><th>Up to 1023</th>\n<td>bytes</td>\n<td>bytes</td></tr>\n<tr><th>Up to 1024\n2\n\u2212 1</th>\n<td>kibibytes</td>\n<td>KiB</td></tr>\n<tr><th>Up to 1024\n3\n\u2212 1</th>\n<td>mebibytes</td>\n<td>MiB</td></tr>\n<tr><th>Up to 1024\n4\n\u2212 1</th>\n<td>gibibytes</td>\n<td>GiB</td></tr>\n<tr><th>Up to 1024\n5\n\u2212 1</th>\n<td>tebibytes</td>\n<td>TiB</td></tr>\n<tr><th>Up to 1024\n6\n\u2212 1</th>\n<td>pebibytes</td>\n<td>PiB</td></tr>\n<tr><th>1024\n6\nand up</th>\n<td>exbibytes</td>\n<td>EiB</td></tr></tbody></table>\n<link><code>FORMAT_BYTES()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/performance-schema-functions.html#function_format-bytes</link> may be used instead of the <code>sys</code> schema <link><code>format_bytes()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/sys-format-bytes.html</link> function, keeping in mind this difference:\n<link><code>FORMAT_BYTES()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/performance-schema-functions.html#function_format-bytes</link> uses the <code>EiB</code> units indicator. <link><code>sys.format_bytes()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/sys-format-bytes.html</link> does not.",
        "Demo": [
            "mysql> SELECT FORMAT_BYTES(512), FORMAT_BYTES(18446644073709551615);\n+-------------------+------------------------------------+\n| FORMAT_BYTES(512) | FORMAT_BYTES(18446644073709551615) |\n+-------------------+------------------------------------+\n| 512 bytes | 16.00 EiB |\n+-------------------+------------------------------------+"
        ]
    },
    {
        "Name": "FORMAT_PICO_TIME",
        "Tree": "(functionCall (fullId (uid (simpleId FORMAT_PICO_TIME))) ( ))",
        "Description": [
            "Convert time in picoseconds to value with units"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/performance-schema-functions.html#function_format-pico-time"
        ],
        "Detail": "<link><code>FORMAT_PICO_TIME( time_val )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/performance-schema-functions.html#function_format-pico-time</link>\nGiven a numeric Performance Schema latency or wait time in picoseconds, converts it to human-readable format and returns a string consisting of a value and a units indicator. The string contains the decimal time rounded to 2 decimal places and a minimum of 3 significant digits. Times under 1 nanosecond are represented as whole numbers and are not rounded.\nIf <code>time_val</code> is <code>NULL</code> , this function returns <code>NULL</code> .\nThe units indicator depends on the size of the time-value argument as shown in the following table.\n<table><thead><tr><th>Argument Value</th>\n<th>Result Units</th>\n<th>Result Units Indicator</th></tr></thead>\n<tbody><tr><th>Up to 10\n3\n\u2212 1</th>\n<td>picoseconds</td>\n<td>ps</td></tr>\n<tr><th>Up to 10\n6\n\u2212 1</th>\n<td>nanoseconds</td>\n<td>ns</td></tr>\n<tr><th>Up to 10\n9\n\u2212 1</th>\n<td>microseconds</td>\n<td>us</td></tr>\n<tr><th>Up to 10\n12\n\u2212 1</th>\n<td>milliseconds</td>\n<td>ms</td></tr>\n<tr><th>Up to 60\u00d710\n12\n\u2212 1</th>\n<td>seconds</td>\n<td>s</td></tr>\n<tr><th>Up to 3.6\u00d710\n15\n\u2212 1</th>\n<td>minutes</td>\n<td>min</td></tr>\n<tr><th>Up to 8.64\u00d710\n16\n\u2212 1</th>\n<td>hours</td>\n<td>h</td></tr>\n<tr><th>8.64\u00d710\n16\nand up</th>\n<td>days</td>\n<td>d</td></tr></tbody></table>\n<link><code>FORMAT_PICO_TIME()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/performance-schema-functions.html#function_format-pico-time</link> may be used instead of the <code>sys</code> schema <link><code>format_time()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/sys-format-time.html</link> function, keeping in mind these differences:\nTo indicate minutes, <link><code>sys.format_time()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/sys-format-time.html</link> uses the <code>m</code> units indicator, whereas <link><code>FORMAT_PICO_TIME()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/performance-schema-functions.html#function_format-pico-time</link> uses <code>min</code> .\n<link><code>sys.format_time()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/sys-format-time.html</link> uses the <code>w</code> (weeks) units indicator. <link><code>FORMAT_PICO_TIME()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/performance-schema-functions.html#function_format-pico-time</link> does not.",
        "Demo": [
            "mysql> SELECT FORMAT_PICO_TIME(3501), FORMAT_PICO_TIME(188732396662000);\n+------------------------+-----------------------------------+\n| FORMAT_PICO_TIME(3501) | FORMAT_PICO_TIME(188732396662000) |\n+------------------------+-----------------------------------+\n| 3.50 ns | 3.15 min |\n+------------------------+-----------------------------------+"
        ]
    },
    {
        "Name": "FOUND_ROWS",
        "Tree": "(functionCall (scalarFunctionName (functionNameBase FOUND_ROWS)) ( ))",
        "Description": [
            "For a SELECT with a LIMIT clause, the number of rows that would be\n      returned were there no LIMIT clause"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/information-functions.html#function_found-rows"
        ],
        "Detail": "<link><code>FOUND_ROWS()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/information-functions.html#function_found-rows</link>\nNote\nThe <code>SQL_CALC_FOUND_ROWS</code> query modifier and accompanying <link><code>FOUND_ROWS()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/information-functions.html#function_found-rows</link> function are deprecated; expect them to be removed in a future version of MySQL. Execute the query with <code>LIMIT</code> , and then a second query with <link><code>COUNT(*)</code>&LINK&https://dev.mysql.com/doc/refman/8.4/aggregate-functions.html#function_count</link> and without <code>LIMIT</code> to determine whether there are additional rows. For example, instead of these queries:\nUse these queries instead:\n<link><code>COUNT(*)</code>&LINK&https://dev.mysql.com/doc/refman/8.4/aggregate-functions.html#function_count</link> is subject to certain optimizations. <code>SQL_CALC_FOUND_ROWS</code> causes some optimizations to be disabled.\nA <link><code>SELECT</code>&LINK&https://dev.mysql.com/doc/refman/8.4/select.html</link> statement may include a <code>LIMIT</code> clause to restrict the number of rows the server returns to the client. In some cases, it is desirable to know how many rows the statement would have returned without the <code>LIMIT</code> , but without running the statement again. To obtain this row count, include an <code>SQL_CALC_FOUND_ROWS</code> option in the <link><code>SELECT</code>&LINK&https://dev.mysql.com/doc/refman/8.4/select.html</link> statement, and then invoke <link><code>FOUND_ROWS()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/information-functions.html#function_found-rows</link> afterward:\nThe second <link><code>SELECT</code>&LINK&https://dev.mysql.com/doc/refman/8.4/select.html</link> returns a number indicating how many rows the first <link><code>SELECT</code>&LINK&https://dev.mysql.com/doc/refman/8.4/select.html</link> would have returned had it been written without the <code>LIMIT</code> clause.\nIn the absence of the <code>SQL_CALC_FOUND_ROWS</code> option in the most recent successful <link><code>SELECT</code>&LINK&https://dev.mysql.com/doc/refman/8.4/select.html</link> statement, <link><code>FOUND_ROWS()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/information-functions.html#function_found-rows</link> returns the number of rows in the result set returned by that statement. If the statement includes a <code>LIMIT</code> clause, <link><code>FOUND_ROWS()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/information-functions.html#function_found-rows</link> returns the number of rows up to the limit. For example, <link><code>FOUND_ROWS()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/information-functions.html#function_found-rows</link> returns 10 or 60, respectively, if the statement includes <code>LIMIT 10</code> or <code>LIMIT 50, 10</code> .\nThe row count available through <link><code>FOUND_ROWS()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/information-functions.html#function_found-rows</link> is transient and not intended to be available past the statement following the <code>SELECT SQL_CALC_FOUND_ROWS</code> statement. If you need to refer to the value later, save it:\nIf you are using <code>SELECT SQL_CALC_FOUND_ROWS</code> , MySQL must calculate how many rows are in the full result set. However, this is faster than running the query again without <code>LIMIT</code> , because the result set need not be sent to the client.\n<code>SQL_CALC_FOUND_ROWS</code> and <link><code>FOUND_ROWS()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/information-functions.html#function_found-rows</link> can be useful in situations when you want to restrict the number of rows that a query returns, but also determine the number of rows in the full result set without running the query again. An example is a Web script that presents a paged display containing links to the pages that show other sections of a search result. Using <link><code>FOUND_ROWS()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/information-functions.html#function_found-rows</link> enables you to determine how many other pages are needed for the rest of the result.\nThe use of <code>SQL_CALC_FOUND_ROWS</code> and <link><code>FOUND_ROWS()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/information-functions.html#function_found-rows</link> is more complex for <link><code>UNION</code>&LINK&https://dev.mysql.com/doc/refman/8.4/union.html</link> statements than for simple <link><code>SELECT</code>&LINK&https://dev.mysql.com/doc/refman/8.4/select.html</link> statements, because <code>LIMIT</code> may occur at multiple places in a <link><code>UNION</code>&LINK&https://dev.mysql.com/doc/refman/8.4/union.html</link> . It may be applied to individual <link><code>SELECT</code>&LINK&https://dev.mysql.com/doc/refman/8.4/select.html</link> statements in the <link><code>UNION</code>&LINK&https://dev.mysql.com/doc/refman/8.4/union.html</link> , or global to the <link><code>UNION</code>&LINK&https://dev.mysql.com/doc/refman/8.4/union.html</link> result as a whole.\nThe intent of <code>SQL_CALC_FOUND_ROWS</code> for <link><code>UNION</code>&LINK&https://dev.mysql.com/doc/refman/8.4/union.html</link> is that it should return the row count that would be returned without a global <code>LIMIT</code> . The conditions for use of <code>SQL_CALC_FOUND_ROWS</code> with <link><code>UNION</code>&LINK&https://dev.mysql.com/doc/refman/8.4/union.html</link> are:\nThe <code>SQL_CALC_FOUND_ROWS</code> keyword must appear in the first <link><code>SELECT</code>&LINK&https://dev.mysql.com/doc/refman/8.4/select.html</link> of the <link><code>UNION</code>&LINK&https://dev.mysql.com/doc/refman/8.4/union.html</link> .\nThe value of <link><code>FOUND_ROWS()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/information-functions.html#function_found-rows</link> is exact only if <link><code>UNION ALL</code>&LINK&https://dev.mysql.com/doc/refman/8.4/union.html</link> is used. If <link><code>UNION</code>&LINK&https://dev.mysql.com/doc/refman/8.4/union.html</link> without <code>ALL</code> is used, duplicate removal occurs and the value of <link><code>FOUND_ROWS()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/information-functions.html#function_found-rows</link> is only approximate.\nIf no <code>LIMIT</code> is present in the <link><code>UNION</code>&LINK&https://dev.mysql.com/doc/refman/8.4/union.html</link> , <code>SQL_CALC_FOUND_ROWS</code> is ignored and returns the number of rows in the temporary table that is created to process the <link><code>UNION</code>&LINK&https://dev.mysql.com/doc/refman/8.4/union.html</link> .\nBeyond the cases described here, the behavior of <link><code>FOUND_ROWS()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/information-functions.html#function_found-rows</link> is undefined (for example, its value following a <link><code>SELECT</code>&LINK&https://dev.mysql.com/doc/refman/8.4/select.html</link> statement that fails with an error).\nImportant\n<link><code>FOUND_ROWS()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/information-functions.html#function_found-rows</link> is not replicated reliably using statement-based replication. This function is automatically replicated using row-based replication.",
        "Demo": [
            "SELECT SQL_CALC_FOUND_ROWS * FROM tbl_name WHERE id > 100 LIMIT 10;\nSELECT FOUND_ROWS();",
            "mysql> SELECT SQL_CALC_FOUND_ROWS * FROM tbl_name\n-> WHERE id > 100 LIMIT 10;\nmysql> SELECT FOUND_ROWS();",
            "mysql> SELECT SQL_CALC_FOUND_ROWS * FROM ... ;\nmysql> SET @rows = FOUND_ROWS();"
        ]
    },
    {
        "Name": "FROM_DAYS",
        "Tree": "(functionCall (scalarFunctionName (functionNameBase FROM_DAYS)) ( ))",
        "Description": [
            "Convert a day number to a date"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html#function_from-days"
        ],
        "Detail": "<link><code>FROM_DAYS( N )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/date-and-time-functions.html#function_from-days</link>\nGiven a day number <code>N</code> , returns a <link><code>DATE</code>&LINK&https://dev.mysql.com/doc/refman/8.4/datetime.html</link> value. Returns <code>NULL</code> if <code>N</code> is <code>NULL</code> .\nUse <link><code>FROM_DAYS()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/date-and-time-functions.html#function_from-days</link> with caution on old dates. It is not intended for use with values that precede the advent of the Gregorian calendar (1582). See <link>Section 13.2.7, \"What Calendar Is Used By MySQL?\"&LINK&https://dev.mysql.com/doc/refman/8.4/mysql-calendar.html</link> .",
        "Demo": [
            "mysql> SELECT FROM_DAYS(730669);\n-> '2000-07-03'"
        ]
    },
    {
        "Name": "FROM_UNIXTIME",
        "Tree": "(functionCall (scalarFunctionName (functionNameBase FROM_UNIXTIME)) ( ))",
        "Description": [
            "Format Unix timestamp as a date"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html#function_from-unixtime"
        ],
        "Detail": "<link><code>FROM_UNIXTIME( unix_timestamp [, format ])</code>&LINK&https://dev.mysql.com/doc/refman/8.4/date-and-time-functions.html#function_from-unixtime</link>\nReturns a representation of <code>unix_timestamp</code> as a datetime or character string value. The value returned is expressed using the session time zone. (Clients can set the session time zone as described in <link>Section 7.1.15, \"MySQL Server Time Zone Support\"&LINK&https://dev.mysql.com/doc/refman/8.4/time-zone-support.html</link> .) <code>unix_timestamp</code> is an internal timestamp value representing seconds since <code>'1970-01-01 00:00:00'</code> UTC, such as produced by the <link><code>UNIX_TIMESTAMP()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/date-and-time-functions.html#function_unix-timestamp</link> function.\nIf <code>format</code> is omitted, this function returns a <link><code>DATETIME</code>&LINK&https://dev.mysql.com/doc/refman/8.4/datetime.html</link> value.\nIf <code>unix_timestamp</code> or <code>format</code> is <code>NULL</code> , this function returns <code>NULL</code> .\nIf <code>unix_timestamp</code> is an integer, the fractional seconds precision of the <code>DATETIME</code> is zero. When <code>unix_timestamp</code> is a decimal value, the fractional seconds precision of the <code>DATETIME</code> is the same as the precision of the decimal value, up to a maximum of 6. When <code>unix_timestamp</code> is a floating point number, the fractional seconds precision of the datetime is 6.\nOn 32-bit platforms, the maximum useful value for <code>unix_timestamp</code> is 2147483647.999999, which returns <code>'2038-01-19 03:14:07.999999'</code> UTC. On 64-bit platforms, the effective maximum is 32536771199.999999, which returns <code>'3001-01-18 23:59:59.999999'</code> UTC. Regardless of platform or version, a greater value for <code>unix_timestamp</code> than the effective maximum returns <code>0</code> .\n<code>format</code> is used to format the result in the same way as the format string used for the <link><code>DATE_FORMAT()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/date-and-time-functions.html#function_date-format</link> function. If <code>format</code> is supplied, the value returned is a <link><code>VARCHAR</code>&LINK&https://dev.mysql.com/doc/refman/8.4/char.html</link> .\nNote\nIf you use <link><code>UNIX_TIMESTAMP()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/date-and-time-functions.html#function_unix-timestamp</link> and <link><code>FROM_UNIXTIME()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/date-and-time-functions.html#function_from-unixtime</link> to convert between values in a non-UTC time zone and Unix timestamp values, the conversion is lossy because the mapping is not one-to-one in both directions. For details, see the description of the <link><code>UNIX_TIMESTAMP()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/date-and-time-functions.html#function_unix-timestamp</link> function.",
        "Demo": [
            "mysql> SELECT FROM_UNIXTIME(1447430881);\n-> '2015-11-13 10:08:01'\nmysql> SELECT FROM_UNIXTIME(1447430881) + 0;\n-> 20151113100801\nmysql> SELECT FROM_UNIXTIME(1447430881,\n-> '%Y %D %M %h:%i:%s %x');\n-> '2015 13th November 10:08:01 2015'"
        ]
    },
    {
        "Name": "GeometryCollection",
        "Tree": "(functionCall (scalarFunctionName (functionNameBase GeometryCollection)) ( ))",
        "Description": [
            "Construct geometry collection from geometries"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/gis-mysql-specific-functions.html#function_geometrycollection"
        ],
        "Detail": "<link><code>GeometryCollection( g [, g ] ...)</code>&LINK&https://dev.mysql.com/doc/refman/8.4/gis-mysql-specific-functions.html#function_geometrycollection</link>\nConstructs a <code>GeomCollection</code> value from the geometry arguments.\n<link><code>GeometryCollection()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/gis-mysql-specific-functions.html#function_geometrycollection</link> returns all the proper geometries contained in the arguments even if a nonsupported geometry is present.\n<link><code>GeometryCollection()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/gis-mysql-specific-functions.html#function_geometrycollection</link> with no arguments is permitted as a way to create an empty geometry. Also, functions such as <link><code>ST_GeomFromText()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/gis-wkt-functions.html#function_st-geomfromtext</link> that accept WKT geometry collection arguments understand both OpenGIS <code>'GEOMETRYCOLLECTION EMPTY'</code> standard syntax and MySQL <code>'GEOMETRYCOLLECTION()'</code> nonstandard syntax.\n<link><code>GeomCollection()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/gis-mysql-specific-functions.html#function_geomcollection</link> and <link><code>GeometryCollection()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/gis-mysql-specific-functions.html#function_geometrycollection</link> are synonymous, with <link><code>GeomCollection()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/gis-mysql-specific-functions.html#function_geomcollection</link> the preferred function.",
        "Demo": []
    },
    {
        "Name": "GET_DD_COLUMN_PRIVILEGES",
        "Tree": "(functionCall (fullId (uid (simpleId GET_DD_COLUMN_PRIVILEGES))) ( ))",
        "Description": [
            "Internal use only"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/internal-functions.html#function_get-dd-column-privileges"
        ],
        "Detail": "<link><code>GET_DD_COLUMN_PRIVILEGES( ARGS )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/internal-functions.html#function_get-dd-column-privileges</link>",
        "Demo": []
    },
    {
        "Name": "GET_DD_CREATE_OPTIONS",
        "Tree": "(functionCall (fullId (uid (simpleId GET_DD_CREATE_OPTIONS))) ( ))",
        "Description": [
            "Internal use only"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/internal-functions.html#function_get-dd-create-options"
        ],
        "Detail": "<link><code>GET_DD_CREATE_OPTIONS( ARGS )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/internal-functions.html#function_get-dd-create-options</link>",
        "Demo": []
    },
    {
        "Name": "GET_DD_INDEX_SUB_PART_LENGTH",
        "Tree": "(functionCall (fullId (uid (simpleId GET_DD_INDEX_SUB_PART_LENGTH))) ( ))",
        "Description": [
            "Internal use only"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/internal-functions.html#function_get-dd-index-sub-part-length"
        ],
        "Detail": "<link><code>GET_DD_INDEX_SUB_PART_LENGTH( ARGS )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/internal-functions.html#function_get-dd-index-sub-part-length</link>",
        "Demo": []
    },
    {
        "Name": "GET_FORMAT",
        "Tree": "(functionCall (scalarFunctionName (functionNameBase GET_FORMAT)) ( ))",
        "Description": [
            "Return a date format string"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html#function_get-format"
        ],
        "Detail": "<link><code>GET_FORMAT({DATE|TIME|DATETIME}, {'EUR'|'USA'|'JIS'|'ISO'|'INTERNAL'})</code>&LINK&https://dev.mysql.com/doc/refman/8.4/date-and-time-functions.html#function_get-format</link>\nReturns a format string. This function is useful in combination with the <link><code>DATE_FORMAT()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/date-and-time-functions.html#function_date-format</link> and the <link><code>STR_TO_DATE()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/date-and-time-functions.html#function_str-to-date</link> functions.\nIf <code>format</code> is <code>NULL</code> , this function returns <code>NULL</code> .\nThe possible values for the first and second arguments result in several possible format strings (for the specifiers used, see the table in the <link><code>DATE_FORMAT()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/date-and-time-functions.html#function_date-format</link> function description). ISO format refers to ISO 9075, not ISO 8601.\n<table><thead><tr><th>Function Call</th>\n<th>Result</th></tr></thead>\n<tbody><tr><td><link><code>GET_FORMAT(DATE,'USA')</code>&LINK&https://dev.mysql.com/doc/refman/8.4/date-and-time-functions.html#function_get-format</link></td>\n<td><code>'%m.%d.%Y'</code></td></tr>\n<tr><td><link><code>GET_FORMAT(DATE,'JIS')</code>&LINK&https://dev.mysql.com/doc/refman/8.4/date-and-time-functions.html#function_get-format</link></td>\n<td><code>'%Y-%m-%d'</code></td></tr>\n<tr><td><link><code>GET_FORMAT(DATE,'ISO')</code>&LINK&https://dev.mysql.com/doc/refman/8.4/date-and-time-functions.html#function_get-format</link></td>\n<td><code>'%Y-%m-%d'</code></td></tr>\n<tr><td><link><code>GET_FORMAT(DATE,'EUR')</code>&LINK&https://dev.mysql.com/doc/refman/8.4/date-and-time-functions.html#function_get-format</link></td>\n<td><code>'%d.%m.%Y'</code></td></tr>\n<tr><td><link><code>GET_FORMAT(DATE,'INTERNAL')</code>&LINK&https://dev.mysql.com/doc/refman/8.4/date-and-time-functions.html#function_get-format</link></td>\n<td><code>'%Y%m%d'</code></td></tr>\n<tr><td><link><code>GET_FORMAT(DATETIME,'USA')</code>&LINK&https://dev.mysql.com/doc/refman/8.4/date-and-time-functions.html#function_get-format</link></td>\n<td><code>'%Y-%m-%d %H.%i.%s'</code></td></tr>\n<tr><td><link><code>GET_FORMAT(DATETIME,'JIS')</code>&LINK&https://dev.mysql.com/doc/refman/8.4/date-and-time-functions.html#function_get-format</link></td>\n<td><code>'%Y-%m-%d %H:%i:%s'</code></td></tr>\n<tr><td><link><code>GET_FORMAT(DATETIME,'ISO')</code>&LINK&https://dev.mysql.com/doc/refman/8.4/date-and-time-functions.html#function_get-format</link></td>\n<td><code>'%Y-%m-%d %H:%i:%s'</code></td></tr>\n<tr><td><link><code>GET_FORMAT(DATETIME,'EUR')</code>&LINK&https://dev.mysql.com/doc/refman/8.4/date-and-time-functions.html#function_get-format</link></td>\n<td><code>'%Y-%m-%d %H.%i.%s'</code></td></tr>\n<tr><td><link><code>GET_FORMAT(DATETIME,'INTERNAL')</code>&LINK&https://dev.mysql.com/doc/refman/8.4/date-and-time-functions.html#function_get-format</link></td>\n<td><code>'%Y%m%d%H%i%s'</code></td></tr>\n<tr><td><link><code>GET_FORMAT(TIME,'USA')</code>&LINK&https://dev.mysql.com/doc/refman/8.4/date-and-time-functions.html#function_get-format</link></td>\n<td><code>'%h:%i:%s %p'</code></td></tr>\n<tr><td><link><code>GET_FORMAT(TIME,'JIS')</code>&LINK&https://dev.mysql.com/doc/refman/8.4/date-and-time-functions.html#function_get-format</link></td>\n<td><code>'%H:%i:%s'</code></td></tr>\n<tr><td><link><code>GET_FORMAT(TIME,'ISO')</code>&LINK&https://dev.mysql.com/doc/refman/8.4/date-and-time-functions.html#function_get-format</link></td>\n<td><code>'%H:%i:%s'</code></td></tr>\n<tr><td><link><code>GET_FORMAT(TIME,'EUR')</code>&LINK&https://dev.mysql.com/doc/refman/8.4/date-and-time-functions.html#function_get-format</link></td>\n<td><code>'%H.%i.%s'</code></td></tr>\n<tr><td><link><code>GET_FORMAT(TIME,'INTERNAL')</code>&LINK&https://dev.mysql.com/doc/refman/8.4/date-and-time-functions.html#function_get-format</link></td>\n<td><code>'%H%i%s'</code></td></tr></tbody></table>\n<link><code>TIMESTAMP</code>&LINK&https://dev.mysql.com/doc/refman/8.4/datetime.html</link> can also be used as the first argument to <link><code>GET_FORMAT()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/date-and-time-functions.html#function_get-format</link> , in which case the function returns the same values as for <link><code>DATETIME</code>&LINK&https://dev.mysql.com/doc/refman/8.4/datetime.html</link> .",
        "Demo": [
            "mysql> SELECT DATE_FORMAT('2003-10-03',GET_FORMAT(DATE,'EUR'));\n-> '03.10.2003'\nmysql> SELECT STR_TO_DATE('10.31.2003',GET_FORMAT(DATE,'USA'));\n-> '2003-10-31'"
        ]
    },
    {
        "Name": "GET_LOCK",
        "Tree": "(functionCall (scalarFunctionName (functionNameBase GET_LOCK)) ( ))",
        "Description": [
            "Get a named lock"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/locking-functions.html#function_get-lock"
        ],
        "Detail": "<link><code>GET_LOCK( str , timeout )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/locking-functions.html#function_get-lock</link>\nTries to obtain a lock with a name given by the string <code>str</code> , using a timeout of <code>timeout</code> seconds. A negative <code>timeout</code> value means infinite timeout. The lock is exclusive. While held by one session, other sessions cannot obtain a lock of the same name.\nReturns <code>1</code> if the lock was obtained successfully, <code>0</code> if the attempt timed out (for example, because another client has previously locked the name), or <code>NULL</code> if an error occurred (such as running out of memory or the thread was killed with <link>mysqladmin kill&LINK&https://dev.mysql.com/doc/refman/8.4/mysqladmin.html</link> ).\nA lock obtained with <link><code>GET_LOCK()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/locking-functions.html#function_get-lock</link> is released explicitly by executing <link><code>RELEASE_LOCK()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/locking-functions.html#function_release-lock</link> or implicitly when your session terminates (either normally or abnormally). Locks obtained with <link><code>GET_LOCK()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/locking-functions.html#function_get-lock</link> are not released when transactions commit or roll back.\n<link><code>GET_LOCK()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/locking-functions.html#function_get-lock</link> is implemented using the metadata locking (MDL) subsystem. Multiple simultaneous locks can be acquired and <link><code>GET_LOCK()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/locking-functions.html#function_get-lock</link> does not release any existing locks. For example, suppose that you execute these statements:\nThe second <link><code>GET_LOCK()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/locking-functions.html#function_get-lock</link> acquires a second lock and both <link><code>RELEASE_LOCK()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/locking-functions.html#function_release-lock</link> calls return 1 (success).\nIt is even possible for a given session to acquire multiple locks for the same name. Other sessions cannot acquire a lock with that name until the acquiring session releases all its locks for the name.\nUniquely named locks acquired with <link><code>GET_LOCK()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/locking-functions.html#function_get-lock</link> appear in the Performance Schema <link><code>metadata_locks</code>&LINK&https://dev.mysql.com/doc/refman/8.4/performance-schema-metadata-locks-table.html</link> table. The <code>OBJECT_TYPE</code> column says <code>USER LEVEL LOCK</code> and the <code>OBJECT_NAME</code> column indicates the lock name. In the case that multiple locks are acquired for the same name, only the first lock for the name registers a row in the <link><code>metadata_locks</code>&LINK&https://dev.mysql.com/doc/refman/8.4/performance-schema-metadata-locks-table.html</link> table. Subsequent locks for the name increment a counter in the lock but do not acquire additional metadata locks. The <link><code>metadata_locks</code>&LINK&https://dev.mysql.com/doc/refman/8.4/performance-schema-metadata-locks-table.html</link> row for the lock is deleted when the last lock instance on the name is released.\nThe capability of acquiring multiple locks means there is the possibility of deadlock among clients. When this happens, the server chooses a caller and terminates its lock-acquisition request with an <link><code>ER_USER_LOCK_DEADLOCK</code>&LINK&https://dev.mysql.com/doc/mysql-errors/8.4/en/server-error-reference.html#error_er_user_lock_deadlock</link> error. This error does not cause transactions to roll back.\nMySQL enforces a maximum length on lock names of 64 characters.\n<link><code>GET_LOCK()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/locking-functions.html#function_get-lock</link> can be used to implement application locks or to simulate record locks. Names are locked on a server-wide basis. If a name has been locked within one session, <link><code>GET_LOCK()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/locking-functions.html#function_get-lock</link> blocks any request by another session for a lock with the same name. This enables clients that agree on a given lock name to use the name to perform cooperative advisory locking. But be aware that it also enables a client that is not among the set of cooperating clients to lock a name, either inadvertently or deliberately, and thus prevent any of the cooperating clients from locking that name. One way to reduce the likelihood of this is to use lock names that are database-specific or application-specific. For example, use lock names of the form <code>db_name.str</code> or <code>app_name.str</code> .\nIf multiple clients are waiting for a lock, the order in which they acquire it is undefined. Applications should not assume that clients acquire the lock in the same order that they issued the lock requests.\n<link><code>GET_LOCK()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/locking-functions.html#function_get-lock</link> is unsafe for statement-based replication. A warning is logged if you use this function when <link><code>binlog_format</code>&LINK&https://dev.mysql.com/doc/refman/8.4/replication-options-binary-log.html#sysvar_binlog_format</link> is set to <code>STATEMENT</code> .\nSince <code>GET_LOCK()</code> establishes a lock only on a single <link>mysqld&LINK&https://dev.mysql.com/doc/refman/8.4/mysqld.html</link> , it is not suitable for use with NDB Cluster, which has no way of enforcing an SQL lock across multiple MySQL servers. See <link>Section 25.2.7.10, \"Limitations Relating to Multiple NDB Cluster Nodes\"&LINK&https://dev.mysql.com/doc/refman/8.4/mysql-cluster-limitations-multiple-nodes.html</link> , for more information.\nCaution\nWith the capability of acquiring multiple named locks, it is possible for a single statement to acquire a large number of locks. For example:\nThese types of statements may have certain adverse effects. For example, if the statement fails part way through and rolls back, locks acquired up to the point of failure still exist. If the intent is for there to be a correspondence between rows inserted and locks acquired, that intent is not satisfied. Also, if it is important that locks are granted in a certain order, be aware that result set order may differ depending on which execution plan the optimizer chooses. For these reasons, it may be best to limit applications to a single lock-acquisition call per statement.\nA different locking interface is available as either a plugin service or a set of loadable functions. This interface provides lock namespaces and distinct read and write locks, unlike the interface provided by <link><code>GET_LOCK()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/locking-functions.html#function_get-lock</link> and related functions. For details, see <link>Section 7.6.9.1, \"The Locking Service\"&LINK&https://dev.mysql.com/doc/refman/8.4/locking-service.html</link> .",
        "Demo": [
            "SELECT GET_LOCK('lock1',10);\nSELECT GET_LOCK('lock2',10);\nSELECT RELEASE_LOCK('lock2');\nSELECT RELEASE_LOCK('lock1');",
            "INSERT INTO ... SELECT GET_LOCK(t1.col_name) FROM t1;"
        ]
    },
    {
        "Name": "GREATEST",
        "Tree": "(functionCall (scalarFunctionName (functionNameBase GREATEST)) ( ))",
        "Description": [
            "Return the largest argument"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/comparison-operators.html#function_greatest"
        ],
        "Detail": "<link><code>GREATEST( value1 , value2 ,...)</code>&LINK&https://dev.mysql.com/doc/refman/8.4/comparison-operators.html#function_greatest</link>\nWith two or more arguments, returns the largest (maximum-valued) argument. The arguments are compared using the same rules as for <link><code>LEAST()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/comparison-operators.html#function_least</link> .\n<link><code>GREATEST()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/comparison-operators.html#function_greatest</link> returns <code>NULL</code> if any argument is <code>NULL</code> .",
        "Demo": [
            "mysql> SELECT GREATEST(2,0);\n-> 2\nmysql> SELECT GREATEST(34.0,3.0,5.0,767.0);\n-> 767.0\nmysql> SELECT GREATEST('B','A','C');\n-> 'C'"
        ]
    },
    {
        "Name": "GROUP_CONCAT",
        "Tree": "(functionCall (aggregateWindowedFunction GROUP_CONCAT ( )))",
        "Description": [
            "Return a concatenated string"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/aggregate-functions.html#function_group-concat"
        ],
        "Detail": "<link><code>GROUP_CONCAT( expr )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/aggregate-functions.html#function_group-concat</link>\nThis function returns a string result with the concatenated non- <code>NULL</code> values from a group. It returns <code>NULL</code> if there are no non- <code>NULL</code> values. The full syntax is as follows:\nOr:\nIn MySQL, you can get the concatenated values of expression combinations. To eliminate duplicate values, use the <code>DISTINCT</code> clause. To sort values in the result, use the <code>ORDER BY</code> clause. To sort in reverse order, add the <code>DESC</code> (descending) keyword to the name of the column you are sorting by in the <code>ORDER BY</code> clause. The default is ascending order; this may be specified explicitly using the <code>ASC</code> keyword. The default separator between values in a group is comma ( <code>,</code> ). To specify a separator explicitly, use <code>SEPARATOR</code> followed by the string literal value that should be inserted between group values. To eliminate the separator altogether, specify <code>SEPARATOR ''</code> .\nThe result is truncated to the maximum length that is given by the <link><code>group_concat_max_len</code>&LINK&https://dev.mysql.com/doc/refman/8.4/server-system-variables.html#sysvar_group_concat_max_len</link> system variable, which has a default value of 1024. The value can be set higher, although the effective maximum length of the return value is constrained by the value of <link><code>max_allowed_packet</code>&LINK&https://dev.mysql.com/doc/refman/8.4/server-system-variables.html#sysvar_max_allowed_packet</link> . The syntax to change the value of <link><code>group_concat_max_len</code>&LINK&https://dev.mysql.com/doc/refman/8.4/server-system-variables.html#sysvar_group_concat_max_len</link> at runtime is as follows, where <code>val</code> is an unsigned integer:\nThe return value is a nonbinary or binary string, depending on whether the arguments are nonbinary or binary strings. The result type is <link><code>TEXT</code>&LINK&https://dev.mysql.com/doc/refman/8.4/blob.html</link> or <link><code>BLOB</code>&LINK&https://dev.mysql.com/doc/refman/8.4/blob.html</link> unless <link><code>group_concat_max_len</code>&LINK&https://dev.mysql.com/doc/refman/8.4/server-system-variables.html#sysvar_group_concat_max_len</link> is less than or equal to 512, in which case the result type is <link><code>VARCHAR</code>&LINK&https://dev.mysql.com/doc/refman/8.4/char.html</link> or <link><code>VARBINARY</code>&LINK&https://dev.mysql.com/doc/refman/8.4/binary-varbinary.html</link> .\nIf <link><code>GROUP_CONCAT()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/aggregate-functions.html#function_group-concat</link> is invoked from within the <link>mysql&LINK&https://dev.mysql.com/doc/refman/8.4/mysql.html</link> client, binary string results display using hexadecimal notation, depending on the value of the <link><code>--binary-as-hex</code>&LINK&https://dev.mysql.com/doc/refman/8.4/mysql-command-options.html#option_mysql_binary-as-hex</link> . For more information about that option, see <link>Section 6.5.1, \"mysql \u2014 The MySQL Command-Line Client\"&LINK&https://dev.mysql.com/doc/refman/8.4/mysql.html</link> .\nSee also <link><code>CONCAT()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/string-functions.html#function_concat</link> and <link><code>CONCAT_WS()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/string-functions.html#function_concat-ws</link> : <link>Section 14.8, \"String Functions and Operators\"&LINK&https://dev.mysql.com/doc/refman/8.4/string-functions.html</link> .",
        "Demo": [
            "GROUP_CONCAT([DISTINCT] expr [,expr ...]\n[ORDER BY {unsigned_integer | col_name | expr}\n[ASC | DESC] [,col_name ...]]\n[SEPARATOR str_val])",
            "mysql> SELECT student_name,\nGROUP_CONCAT(test_score)\nFROM student\nGROUP BY student_name;",
            "mysql> SELECT student_name,\nGROUP_CONCAT(DISTINCT test_score\nORDER BY test_score DESC SEPARATOR ' ')\nFROM student\nGROUP BY student_name;"
        ]
    },
    {
        "Name": "group_replication_disable_member_action",
        "Tree": "(functionCall (fullId (uid (simpleId group_replication_disable_member_action))) ( ))",
        "Description": [
            "Disable member action for event specified"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/group-replication-functions-for-member-actions.html#function_group-replication-disable-member-action"
        ],
        "Detail": "<link><code>group_replication_disable_member_action()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/group-replication-functions-for-member-actions.html#function_group-replication-disable-member-action</link>\nDisable a member action so that the member does not take it in the specified situation. If the server where you use the function is part of a group, it must be the current primary in a group in single-primary mode, and it must be part of the majority. The changed setting is propagated to other group members and joining members, so they will all act in the same way when they are in the specified situation, and you only need to use the function on the primary.\nSyntax:\nArguments:\n<code>name</code> : The name of the member action to disable.\n<code>event</code> : The event that triggers the member action.\nReturn value:\nA string containing the result of the operation, for example whether it was successful or not.\nExample:\nFor more information, see <link>Section 20.5.1.5, \"Configuring Member Actions\"&LINK&https://dev.mysql.com/doc/refman/8.4/group-replication-member-actions.html</link> .",
        "Demo": [
            "STRING group_replication_disable_member_action(name, event)",
            "SELECT group_replication_disable_member_action(\"mysql_disable_super_read_only_if_primary\", \"AFTER_PRIMARY_ELECTION\");"
        ]
    },
    {
        "Name": "group_replication_enable_member_action",
        "Tree": "(functionCall (fullId (uid (simpleId group_replication_enable_member_action))) ( ))",
        "Description": [
            "Enable member action for event specified"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/group-replication-functions-for-member-actions.html#function_group-replication-enable-member-action"
        ],
        "Detail": "<link><code>group_replication_enable_member_action()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/group-replication-functions-for-member-actions.html#function_group-replication-enable-member-action</link>\nEnable a member action for the member to take in the specified situation. If the server where you use the function is part of a group, it must be the current primary in a group in single-primary mode, and it must be part of the majority. The changed setting is propagated to other group members and joining members, so they will all act in the same way when they are in the specified situation, and you only need to use the function on the primary.\nSyntax:\nArguments:\n<code>name</code> : The name of the member action to enable.\n<code>event</code> : The event that triggers the member action.\nReturn value:\nA string containing the result of the operation, for example whether it was successful or not.\nExample:\nFor more information, see <link>Section 20.5.1.5, \"Configuring Member Actions\"&LINK&https://dev.mysql.com/doc/refman/8.4/group-replication-member-actions.html</link> .",
        "Demo": [
            "STRING group_replication_enable_member_action(name, event)",
            "SELECT group_replication_enable_member_action(\"mysql_disable_super_read_only_if_primary\", \"AFTER_PRIMARY_ELECTION\");"
        ]
    },
    {
        "Name": "group_replication_get_communication_protocol",
        "Tree": "(functionCall (fullId (uid (simpleId group_replication_get_communication_protocol))) ( ))",
        "Description": [
            "Get version of group replication communication protocol currently\n      in use"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/group-replication-functions-for-communication-protocol.html#function_group-replication-get-communication-protocol"
        ],
        "Detail": "<link><code>group_replication_get_communication_protocol()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/group-replication-functions-for-communication-protocol.html#function_group-replication-get-communication-protocol</link>\nInspect the Group Replication communication protocol version that is currently in use for a group.\nSyntax:\nThis function has no parameters.\nReturn value:\nThe oldest MySQL Server version that can join this group and use the group's communication protocol. Note that the <link><code>group_replication_get_communication_protocol()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/group-replication-functions-for-communication-protocol.html#function_group-replication-get-communication-protocol</link> function returns the minimum MySQL version that the group supports, which might differ from the version number that was passed to <link><code>group_replication_set_communication_protocol()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/group-replication-functions-for-communication-protocol.html#function_group-replication-set-communication-protocol</link> , and from the MySQL Server version that is installed on the member where you use the function.\nIf the protocol cannot be inspected because this server instance does not belong to a replication group, an error is returned as a string.\nExample:\nFor more information, see <link>Section 20.5.1.4, \"Setting a Group's Communication Protocol Version\"&LINK&https://dev.mysql.com/doc/refman/8.4/group-replication-communication-protocol.html</link> .",
        "Demo": [
            "STRING group_replication_get_communication_protocol()",
            "SELECT group_replication_get_communication_protocol();\n+------------------------------------------------+\n| group_replication_get_communication_protocol() |\n+------------------------------------------------+\n| 8.4.2 |\n+------------------------------------------------+"
        ]
    },
    {
        "Name": "group_replication_get_write_concurrency",
        "Tree": "(functionCall (fullId (uid (simpleId group_replication_get_write_concurrency))) ( ))",
        "Description": [
            "Get maximum number of consensus instances currently set for group"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/group-replication-functions-for-maximum-consensus.html#function_group-replication-get-write-concurrency"
        ],
        "Detail": "<link><code>group_replication_get_write_concurrency()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/group-replication-functions-for-maximum-consensus.html#function_group-replication-get-write-concurrency</link>\nCheck the maximum number of consensus instances that a group can execute in parallel.\nSyntax:\nThis function has no parameters.\nReturn value:\nThe maximum number of consensus instances currently set for the group.\nExample:\nFor more information, see <link>Section 20.5.1.3, \"Using Group Replication Group Write Consensus\"&LINK&https://dev.mysql.com/doc/refman/8.4/group-replication-group-write-consensus.html</link> .",
        "Demo": [
            "INT group_replication_get_write_concurrency()",
            "SELECT group_replication_get_write_concurrency()"
        ]
    },
    {
        "Name": "group_replication_reset_member_actions",
        "Tree": "(functionCall (fullId (uid (simpleId group_replication_reset_member_actions))) ( ))",
        "Description": [
            "Reset all member actions to defaults and configuration version\n      number to 1"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/group-replication-functions-for-member-actions.html#function_group-replication-reset-member-actions"
        ],
        "Detail": "<link><code>group_replication_reset_member_actions()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/group-replication-functions-for-member-actions.html#function_group-replication-reset-member-actions</link>\nReset the member actions configuration to the default settings, and reset its version number to 1.\nThe <link><code>group_replication_reset_member_actions()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/group-replication-functions-for-member-actions.html#function_group-replication-reset-member-actions</link> function can only be used on a server that is not currently part of a group. The server must be writeable (with the <link><code>read_only</code>&LINK&https://dev.mysql.com/doc/refman/8.4/server-system-variables.html#sysvar_read_only</link> system variable set to <code>OFF</code> ) and have the Group Replication plugin installed. You can use this function to remove the member actions configuration that a server used when it was part of a group, if you intend to use it as a standalone server with no member actions or different member actions.\nSyntax:\nArguments:\nNone.\nReturn value:\nA string containing the result of the operation, for example whether it was successful or not.\nExample:\nFor more information, see <link>Section 20.5.1.5, \"Configuring Member Actions\"&LINK&https://dev.mysql.com/doc/refman/8.4/group-replication-member-actions.html</link> .",
        "Demo": [
            "STRING group_replication_reset_member_actions()",
            "SELECT group_replication_reset_member_actions();"
        ]
    },
    {
        "Name": "group_replication_set_as_primary",
        "Tree": "(functionCall (fullId (uid (simpleId group_replication_set_as_primary))) ( ))",
        "Description": [
            "Make a specific group member the primary"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/group-replication-functions-for-new-primary.html#function_group-replication-set-as-primary"
        ],
        "Detail": "<link><code>group_replication_set_as_primary()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/group-replication-functions-for-new-primary.html#function_group-replication-set-as-primary</link>\nAppoints a specific member of the group as the new primary, overriding any election process.\nSyntax:\nArguments:\n<code>member_uuid</code> : A string containing the UUID of the member of the group that you want to become the new primary.\n<code>timeout</code> : An integer specifying a timeout in seconds for transactions that are running on the existing primary when you use the function. You can set a timeout from 0 seconds (immediately) up to 3600 seconds (60 minutes). When you set a timeout, new transactions cannot start on the primary from that point on. There is no default setting for the timeout, so if you do not set it, there is no upper limit to the wait time, and new transactions can start during that time.\nReturn value:\nA string containing the result of the operation, for example whether it was successful or not.\nExample:\nThis function waits for all ongoing transactions and DML operations to finish before electing the new primary. In MySQL 8.4, it also waits for the completion of any ongoing DDL statements such as <link><code>ALTER TABLE</code>&LINK&https://dev.mysql.com/doc/refman/8.4/alter-table.html</link> . Operations that are considered DDL statements for this purpose are listed here:\n<link><code>ALTER DATABASE</code>&LINK&https://dev.mysql.com/doc/refman/8.4/alter-database.html</link>\n<link><code>ALTER FUNCTION</code>&LINK&https://dev.mysql.com/doc/refman/8.4/alter-function.html</link>\n<link><code>ALTER INSTANCE</code>&LINK&https://dev.mysql.com/doc/refman/8.4/alter-instance.html</link>\n<link><code>ALTER PROCEDURE</code>&LINK&https://dev.mysql.com/doc/refman/8.4/alter-procedure.html</link>\n<link><code>ALTER SERVER</code>&LINK&https://dev.mysql.com/doc/refman/8.4/alter-server.html</link>\n<code>ALTER TABLE</code>\n<link><code>ALTER TABLESPACE</code>&LINK&https://dev.mysql.com/doc/refman/8.4/alter-tablespace.html</link>\n<link><code>ALTER USER</code>&LINK&https://dev.mysql.com/doc/refman/8.4/alter-user.html</link>\n<link><code>ALTER VIEW</code>&LINK&https://dev.mysql.com/doc/refman/8.4/alter-view.html</link>\n<link><code>ANALYZE TABLE</code>&LINK&https://dev.mysql.com/doc/refman/8.4/analyze-table.html</link>\n<link><code>CACHE INDEX</code>&LINK&https://dev.mysql.com/doc/refman/8.4/cache-index.html</link>\n<link><code>CHECK TABLE</code>&LINK&https://dev.mysql.com/doc/refman/8.4/check-table.html</link>\n<link><code>CREATE DATABASE</code>&LINK&https://dev.mysql.com/doc/refman/8.4/create-database.html</link>\n<link><code>CREATE FUNCTION</code>&LINK&https://dev.mysql.com/doc/refman/8.4/create-function.html</link>\n<link><code>CREATE INDEX</code>&LINK&https://dev.mysql.com/doc/refman/8.4/create-index.html</link>\n<link><code>CREATE ROLE</code>&LINK&https://dev.mysql.com/doc/refman/8.4/create-role.html</link>\n<link><code>CREATE PROCEDURE</code>&LINK&https://dev.mysql.com/doc/refman/8.4/create-procedure.html</link>\n<link><code>CREATE SERVER</code>&LINK&https://dev.mysql.com/doc/refman/8.4/create-server.html</link>\n<link><code>CREATE SPATIAL REFERENCE SYSTEM</code>&LINK&https://dev.mysql.com/doc/refman/8.4/create-spatial-reference-system.html</link>\n<link><code>CREATE TABLE</code>&LINK&https://dev.mysql.com/doc/refman/8.4/create-table.html</link>\n<link><code>CREATE TABLESPACE</code>&LINK&https://dev.mysql.com/doc/refman/8.4/create-tablespace.html</link>\n<link><code>CREATE TRIGGER</code>&LINK&https://dev.mysql.com/doc/refman/8.4/create-trigger.html</link>\n<link><code>CREATE USER</code>&LINK&https://dev.mysql.com/doc/refman/8.4/create-user.html</link>\n<link><code>CREATE VIEW</code>&LINK&https://dev.mysql.com/doc/refman/8.4/create-view.html</link>\n<link><code>DROP DATABASE</code>&LINK&https://dev.mysql.com/doc/refman/8.4/drop-database.html</link>\n<link><code>DROP FUNCTION</code>&LINK&https://dev.mysql.com/doc/refman/8.4/drop-function.html</link>\n<link><code>DROP INDEX</code>&LINK&https://dev.mysql.com/doc/refman/8.4/drop-index.html</link>\n<link><code>DROP PROCEDURE</code>&LINK&https://dev.mysql.com/doc/refman/8.4/drop-procedure.html</link>\n<link><code>DROP ROLE</code>&LINK&https://dev.mysql.com/doc/refman/8.4/drop-role.html</link>\n<link><code>DROP SERVER</code>&LINK&https://dev.mysql.com/doc/refman/8.4/drop-server.html</link>\n<link><code>DROP SPATIAL REFERENCE SYSTEM</code>&LINK&https://dev.mysql.com/doc/refman/8.4/drop-spatial-reference-system.html</link>\n<link><code>DROP TABLE</code>&LINK&https://dev.mysql.com/doc/refman/8.4/drop-table.html</link>\n<link><code>DROP TABLESPACE</code>&LINK&https://dev.mysql.com/doc/refman/8.4/drop-tablespace.html</link>\n<link><code>DROP TRIGGER</code>&LINK&https://dev.mysql.com/doc/refman/8.4/drop-trigger.html</link>\n<link><code>DROP USER</code>&LINK&https://dev.mysql.com/doc/refman/8.4/drop-user.html</link>\n<link><code>DROP VIEW</code>&LINK&https://dev.mysql.com/doc/refman/8.4/drop-view.html</link>\n<link><code>GRANT</code>&LINK&https://dev.mysql.com/doc/refman/8.4/grant.html</link>\n<link><code>LOAD INDEX</code>&LINK&https://dev.mysql.com/doc/refman/8.4/load-index.html</link>\n<link><code>OPTIMIZE TABLE</code>&LINK&https://dev.mysql.com/doc/refman/8.4/optimize-table.html</link>\n<link><code>RENAME TABLE</code>&LINK&https://dev.mysql.com/doc/refman/8.4/rename-table.html</link>\n<link><code>REPAIR TABLE</code>&LINK&https://dev.mysql.com/doc/refman/8.4/repair-table.html</link>\n<link><code>REVOKE</code>&LINK&https://dev.mysql.com/doc/refman/8.4/revoke.html</link>\n<link><code>TRUNCATE TABLE</code>&LINK&https://dev.mysql.com/doc/refman/8.4/truncate-table.html</link>\nThis also includes any open cursors (see <link>Section 15.6.6, \"Cursors\"&LINK&https://dev.mysql.com/doc/refman/8.4/cursors.html</link> ).\nFor more information, see <link>Section 20.5.1.1, \"Changing the Primary\"&LINK&https://dev.mysql.com/doc/refman/8.4/group-replication-change-primary.html</link> .",
        "Demo": [
            "STRING group_replication_set_as_primary(member_uuid[, timeout])",
            "SELECT group_replication_set_as_primary(\u201800371d66-3c45-11ea-804b-080027337932\u2019, 300);"
        ]
    },
    {
        "Name": "group_replication_set_communication_protocol",
        "Tree": "(functionCall (fullId (uid (simpleId group_replication_set_communication_protocol))) ( ))",
        "Description": [
            "Set version for group replication communication protocol to use"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/group-replication-functions-for-communication-protocol.html#function_group-replication-set-communication-protocol"
        ],
        "Detail": "<link><code>group_replication_set_communication_protocol()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/group-replication-functions-for-communication-protocol.html#function_group-replication-set-communication-protocol</link>\nDowngrade the Group Replication communication protocol version of a group so that members at earlier releases can join, or upgrade the Group Replication communication protocol version of a group after upgrading MySQL Server on all members. The <link><code>GROUP_REPLICATION_ADMIN</code>&LINK&https://dev.mysql.com/doc/refman/8.4/privileges-provided.html#priv_group-replication-admin</link> privilege is required to use this function, and all existing group members must be online when you issue the statement, with no loss of majority.\nNote\nFor MySQL InnoDB cluster, the communication protocol version is managed automatically whenever the cluster topology is changed using AdminAPI operations. You do not have to use these functions yourself for an InnoDB cluster.\nSyntax:\nArguments:\n<code>version</code> : For a downgrade, specify the MySQL Server version of the prospective group member that has the oldest installed server version. In this case, the command makes the group fall back to a communication protocol compatible with that server version if possible. The minimum server version that you can specify is MySQL 5.7.14. For an upgrade, specify the new MySQL Server version to which the existing group members have been upgraded.\nReturn value:\nA string containing the result of the operation, for example whether it was successful or not.\nExample:\nFor more information, see <link>Section 20.5.1.4, \"Setting a Group's Communication Protocol Version\"&LINK&https://dev.mysql.com/doc/refman/8.4/group-replication-communication-protocol.html</link> .",
        "Demo": [
            "STRING group_replication_set_communication_protocol(version)",
            "SELECT group_replication_set_communication_protocol(\"5.7.25\");"
        ]
    },
    {
        "Name": "group_replication_set_write_concurrency",
        "Tree": "(functionCall (fullId (uid (simpleId group_replication_set_write_concurrency))) ( ))",
        "Description": [
            "Set maximum number of consensus instances that can be executed in\n      parallel"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/group-replication-functions-for-maximum-consensus.html#function_group-replication-set-write-concurrency"
        ],
        "Detail": "<link><code>group_replication_set_write_concurrency()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/group-replication-functions-for-maximum-consensus.html#function_group-replication-set-write-concurrency</link>\nConfigures the maximum number of consensus instances that a group can execute in parallel. The <link><code>GROUP_REPLICATION_ADMIN</code>&LINK&https://dev.mysql.com/doc/refman/8.4/privileges-provided.html#priv_group-replication-admin</link> privilege is required to use this function.\nSyntax:\nArguments:\n<code>members</code> : Sets the maximum number of consensus instances that a group can execute in parallel. Default value is 10, valid values are integers in the range of 10 to 200.\nReturn value:\nAny resulting error as a string.\nExample:\nFor more information, see <link>Section 20.5.1.3, \"Using Group Replication Group Write Consensus\"&LINK&https://dev.mysql.com/doc/refman/8.4/group-replication-group-write-consensus.html</link> .",
        "Demo": [
            "STRING group_replication_set_write_concurrency(instances)",
            "SELECT group_replication_set_write_concurrency(instances);"
        ]
    },
    {
        "Name": "group_replication_switch_to_multi_primary_mode",
        "Tree": "(functionCall (fullId (uid (simpleId group_replication_switch_to_multi_primary_mode))) ( ))",
        "Description": [
            "Changes the mode of a group running in single-primary mode to\n      multi-primary mode"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/group-replication-functions-for-mode.html#function_group-replication-switch-to-multi-primary-mode"
        ],
        "Detail": "<link><code>group_replication_switch_to_multi_primary_mode()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/group-replication-functions-for-mode.html#function_group-replication-switch-to-multi-primary-mode</link>\nChanges a group running in single-primary mode to multi-primary mode. Must be issued on a member of a replication group running in single-primary mode.\nSyntax:\nThis function has no parameters.\nReturn value:\nA string containing the result of the operation, for example whether it was successful or not.\nExample:\nAll members which belong to the group become primaries.\nFor more information, see <link>Section 20.5.1.2, \"Changing the Group Mode\"&LINK&https://dev.mysql.com/doc/refman/8.4/group-replication-changing-group-mode.html</link>",
        "Demo": [
            "STRING group_replication_switch_to_multi_primary_mode()",
            "SELECT group_replication_switch_to_multi_primary_mode()"
        ]
    },
    {
        "Name": "group_replication_switch_to_single_primary_mode",
        "Tree": "(functionCall (fullId (uid (simpleId group_replication_switch_to_single_primary_mode))) ( ))",
        "Description": [
            "Changes the mode of a group running in multi-primary mode to\n      single-primary mode"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/group-replication-functions-for-mode.html#function_group-replication-switch-to-single-primary-mode"
        ],
        "Detail": "<link><code>group_replication_switch_to_single_primary_mode()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/group-replication-functions-for-mode.html#function_group-replication-switch-to-single-primary-mode</link>\nChanges a group running in multi-primary mode to single-primary mode, without the need to stop Group Replication. Must be issued on a member of a replication group running in multi-primary mode. When you change to single-primary mode, strict consistency checks are also disabled on all group members, as required in single-primary mode ( <link><code>group_replication_enforce_update_everywhere_checks=OFF</code>&LINK&https://dev.mysql.com/doc/refman/8.4/group-replication-system-variables.html#sysvar_group_replication_enforce_update_everywhere_checks</link> ).\nSyntax:\nArguments:\n<code>str</code> : A string containing the UUID of a member of the group which should become the new single primary. Other members of the group become secondaries.\nReturn value:\nA string containing the result of the operation, for example whether it was successful or not.\nExample:\nFor more information, see <link>Section 20.5.1.2, \"Changing the Group Mode\"&LINK&https://dev.mysql.com/doc/refman/8.4/group-replication-changing-group-mode.html</link>",
        "Demo": [
            "STRING group_replication_switch_to_single_primary_mode([str])",
            "SELECT group_replication_switch_to_single_primary_mode(member_uuid);"
        ]
    },
    {
        "Name": "GROUPING",
        "Tree": "(functionCall (fullId (uid (simpleId GROUPING))) ( ))",
        "Description": [
            "Distinguish super-aggregate ROLLUP rows from regular rows"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/miscellaneous-functions.html#function_grouping"
        ],
        "Detail": "<link><code>GROUPING( expr [, expr ] ...)</code>&LINK&https://dev.mysql.com/doc/refman/8.4/miscellaneous-functions.html#function_grouping</link>\nFor <code>GROUP BY</code> queries that include a <code>WITH ROLLUP</code> modifier, the <code>ROLLUP</code> operation produces super-aggregate output rows where <code>NULL</code> represents the set of all values. The <link><code>GROUPING()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/miscellaneous-functions.html#function_grouping</link> function enables you to distinguish <code>NULL</code> values for super-aggregate rows from <code>NULL</code> values in regular grouped rows.\n<link><code>GROUPING()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/miscellaneous-functions.html#function_grouping</link> is permitted in the select list, <code>HAVING</code> clause, and <code>ORDER BY</code> clause.\nEach argument to <link><code>GROUPING()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/miscellaneous-functions.html#function_grouping</link> must be an expression that exactly matches an expression in the <code>GROUP BY</code> clause. The expression cannot be a positional specifier. For each expression, <link><code>GROUPING()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/miscellaneous-functions.html#function_grouping</link> produces 1 if the expression value in the current row is a <code>NULL</code> representing a super-aggregate value. Otherwise, <link><code>GROUPING()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/miscellaneous-functions.html#function_grouping</link> produces 0, indicating that the expression value is a <code>NULL</code> for a regular result row or is not <code>NULL</code> .\nSuppose that table <code>t1</code> contains these rows, where <code>NULL</code> indicates something like \" other \" or \" unknown \" :\nA summary of the table without <code>WITH ROLLUP</code> looks like this:\nThe result contains <code>NULL</code> values, but those do not represent super-aggregate rows because the query does not include <code>WITH ROLLUP</code> .\nAdding <code>WITH ROLLUP</code> produces super-aggregate summary rows containing additional <code>NULL</code> values. However, without comparing this result to the previous one, it is not easy to see which <code>NULL</code> values occur in super-aggregate rows and which occur in regular grouped rows:\nTo distinguish <code>NULL</code> values in super-aggregate rows from those in regular grouped rows, use <link><code>GROUPING()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/miscellaneous-functions.html#function_grouping</link> , which returns 1 only for super-aggregate <code>NULL</code> values:\nCommon uses for <link><code>GROUPING()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/miscellaneous-functions.html#function_grouping</link> :\nSubstitute a label for super-aggregate <code>NULL</code> values:\nReturn only super-aggregate lines by filtering out the regular grouped lines:\n<link><code>GROUPING()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/miscellaneous-functions.html#function_grouping</link> permits multiple expression arguments. In this case, the <link><code>GROUPING()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/miscellaneous-functions.html#function_grouping</link> return value represents a bitmask combined from the results for each expression, where the lowest-order bit corresponds to the result for the rightmost expression. For example, with three expression arguments, <link><code>GROUPING( expr1 , expr2 , expr3 )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/miscellaneous-functions.html#function_grouping</link> is evaluated like this:\nThe following query shows how <link><code>GROUPING()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/miscellaneous-functions.html#function_grouping</link> results for single arguments combine for a multiple-argument call to produce a bitmask value:\nWith multiple expression arguments, the <link><code>GROUPING()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/miscellaneous-functions.html#function_grouping</link> return value is nonzero if any expression represents a super-aggregate value. Multiple-argument <link><code>GROUPING()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/miscellaneous-functions.html#function_grouping</link> syntax thus provides a simpler way to write the earlier query that returned only super-aggregate rows, by using a single multiple-argument <link><code>GROUPING()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/miscellaneous-functions.html#function_grouping</link> call rather than multiple single-argument calls:\nUse of <link><code>GROUPING()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/miscellaneous-functions.html#function_grouping</link> is subject to these limitations:\nDo not use subquery <code>GROUP BY</code> expressions as <link><code>GROUPING()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/miscellaneous-functions.html#function_grouping</link> arguments because matching might fail. For example, matching fails for this query:\n<code>GROUP BY</code> literal expressions should not be used within a <code>HAVING</code> clause as <link><code>GROUPING()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/miscellaneous-functions.html#function_grouping</link> arguments. Due to differences between when the optimizer evaluates <code>GROUP BY</code> and <code>HAVING</code> , matching may succeed but <link><code>GROUPING()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/miscellaneous-functions.html#function_grouping</link> evaluation does not produce the expected result. Consider this query:\n<link><code>GROUPING()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/miscellaneous-functions.html#function_grouping</link> is evaluated earlier for the literal constant expression than for the <code>HAVING</code> clause as a whole and returns 0. To check whether a query such as this is affected, use <link><code>EXPLAIN</code>&LINK&https://dev.mysql.com/doc/refman/8.4/explain.html</link> and look for <code>Impossible having</code> in the <code>Extra</code> column.\nFor more information about <code>WITH ROLLUP</code> and <link><code>GROUPING()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/miscellaneous-functions.html#function_grouping</link> , see <link>Section 14.19.2, \"GROUP BY Modifiers\"&LINK&https://dev.mysql.com/doc/refman/8.4/group-by-modifiers.html</link> .",
        "Demo": [
            "mysql> SELECT\nname, size, SUM(quantity) AS quantity,\nGROUPING(name) AS grp_name,\nGROUPING(size) AS grp_size\nFROM t1\nGROUP BY name, size WITH ROLLUP;\n+------+-------+----------+----------+----------+\n| name | size | quantity | grp_name | grp_size |\n+------+-------+----------+----------+----------+\n| ball | NULL | 5 | 0 | 0 |\n| ball | large | 20 | 0 | 0 |\n| ball | small | 10 | 0 | 0 |\n| ball | NULL | 35 | 0 | 1 |\n| hoop | NULL | 3 | 0 | 0 |\n| hoop | large | 5 | 0 | 0 |\n| hoop | small | 15 | 0 | 0 |\n| hoop | NULL | 23 | 0 | 1 |\n| NULL | NULL | 58 | 1 | 1 |\n+------+-------+----------+----------+----------+",
            "mysql> SELECT\nIF(GROUPING(name) = 1, 'All items', name) AS name,\nIF(GROUPING(size) = 1, 'All sizes', size) AS size,\nSUM(quantity) AS quantity\nFROM t1\nGROUP BY name, size WITH ROLLUP;\n+-----------+-----------+----------+\n| name | size | quantity |\n+-----------+-----------+----------+\n| ball | NULL | 5 |\n| ball | large | 20 |\n| ball | small | 10 |\n| ball | All sizes | 35 |\n| hoop | NULL | 3 |\n| hoop | large | 5 |\n| hoop | small | 15 |\n| hoop | All sizes | 23 |\n| All items | All sizes | 58 |\n+-----------+-----------+----------+",
            "mysql> SELECT name, size, SUM(quantity) AS quantity\nFROM t1\nGROUP BY name, size WITH ROLLUP\nHAVING GROUPING(name) = 1 OR GROUPING(size) = 1;\n+------+------+----------+\n| name | size | quantity |\n+------+------+----------+\n| ball | NULL | 35 |\n| hoop | NULL | 23 |\n| NULL | NULL | 58 |\n+------+------+----------+",
            "result for GROUPING(expr3)\n+ result for GROUPING(expr2) << 1\n+ result for GROUPING(expr1) << 2",
            "mysql> SELECT\nname, size, SUM(quantity) AS quantity,\nGROUPING(name) AS grp_name,\nGROUPING(size) AS grp_size,\nGROUPING(name, size) AS grp_all\nFROM t1\nGROUP BY name, size WITH ROLLUP;\n+------+-------+----------+----------+----------+---------+\n| name | size | quantity | grp_name | grp_size | grp_all |\n+------+-------+----------+----------+----------+---------+\n| ball | NULL | 5 | 0 | 0 | 0 |\n| ball | large | 20 | 0 | 0 | 0 |\n| ball | small | 10 | 0 | 0 | 0 |\n| ball | NULL | 35 | 0 | 1 | 1 |\n| hoop | NULL | 3 | 0 | 0 | 0 |\n| hoop | large | 5 | 0 | 0 | 0 |\n| hoop | small | 15 | 0 | 0 | 0 |\n| hoop | NULL | 23 | 0 | 1 | 1 |\n| NULL | NULL | 58 | 1 | 1 | 3 |\n+------+-------+----------+----------+----------+---------+",
            "mysql> SELECT name, size, SUM(quantity) AS quantity\nFROM t1\nGROUP BY name, size WITH ROLLUP\nHAVING GROUPING(name, size) <> 0;\n+------+------+----------+\n| name | size | quantity |\n+------+------+----------+\n| ball | NULL | 35 |\n| hoop | NULL | 23 |\n| NULL | NULL | 58 |\n+------+------+----------+",
            "mysql> SELECT GROUPING((SELECT MAX(name) FROM t1))\nFROM t1\nGROUP BY (SELECT MAX(name) FROM t1) WITH ROLLUP;\nERROR 3580 (HY000): Argument #1 of GROUPING function is not in GROUP BY",
            "SELECT a AS f1, 'w' AS f2\nFROM t\nGROUP BY f1, f2 WITH ROLLUP\nHAVING GROUPING(f2) = 1;"
        ]
    },
    {
        "Name": "HEX",
        "Tree": "(functionCall (scalarFunctionName (functionNameBase HEX)) ( ))",
        "Description": [
            "Hexadecimal representation of decimal or string value"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/string-functions.html#function_hex"
        ],
        "Detail": "<link><code>HEX( str )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/string-functions.html#function_hex</link> , <link><code>HEX( N )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/string-functions.html#function_hex</link>\nFor a string argument <code>str</code> , <link><code>HEX()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/string-functions.html#function_hex</link> returns a hexadecimal string representation of <code>str</code> where each byte of each character in <code>str</code> is converted to two hexadecimal digits. (Multibyte characters therefore become more than two digits.) The inverse of this operation is performed by the <link><code>UNHEX()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/string-functions.html#function_unhex</link> function.\nFor a numeric argument <code>N</code> , <link><code>HEX()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/string-functions.html#function_hex</link> returns a hexadecimal string representation of the value of <code>N</code> treated as a longlong ( <link><code>BIGINT</code>&LINK&https://dev.mysql.com/doc/refman/8.4/integer-types.html</link> ) number. This is equivalent to <link><code>CONV( N ,10,16)</code>&LINK&https://dev.mysql.com/doc/refman/8.4/mathematical-functions.html#function_conv</link> . The inverse of this operation is performed by <link><code>CONV(HEX( N ),16,10)</code>&LINK&https://dev.mysql.com/doc/refman/8.4/mathematical-functions.html#function_conv</link> .\nFor a <code>NULL</code> argument, this function returns <code>NULL</code> .",
        "Demo": [
            "mysql> SELECT X'616263', HEX('abc'), UNHEX(HEX('abc'));\n-> 'abc', 616263, 'abc'\nmysql> SELECT HEX(255), CONV(HEX(255),16,10);\n-> 'FF', 255"
        ]
    },
    {
        "Name": "HOUR",
        "Tree": "(functionCall (scalarFunctionName (functionNameBase HOUR)) ( ))",
        "Description": [
            "Extract the hour"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html#function_hour"
        ],
        "Detail": "<link><code>HOUR( time )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/date-and-time-functions.html#function_hour</link>\nReturns the hour for <code>time</code> . The range of the return value is <code>0</code> to <code>23</code> for time-of-day values. However, the range of <link><code>TIME</code>&LINK&https://dev.mysql.com/doc/refman/8.4/time.html</link> values actually is much larger, so <code>HOUR</code> can return values greater than <code>23</code> . Returns <code>NULL</code> if <code>time</code> is <code>NULL</code> .",
        "Demo": [
            "mysql> SELECT HOUR('10:05:03');\n-> 10\nmysql> SELECT HOUR('272:59:59');\n-> 272"
        ]
    },
    {
        "Name": "ICU_VERSION",
        "Tree": "(functionCall (fullId (uid (simpleId ICU_VERSION))) ( ))",
        "Description": [
            "ICU library version"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/information-functions.html#function_icu-version"
        ],
        "Detail": "<link><code>ICU_VERSION()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/information-functions.html#function_icu-version</link>\nThe version of the International Components for Unicode (ICU) library used to support regular expression operations (see <link>Section 14.8.2, \"Regular Expressions\"&LINK&https://dev.mysql.com/doc/refman/8.4/regexp.html</link> ). This function is primarily intended for use in test cases.",
        "Demo": []
    },
    {
        "Name": "IF",
        "Tree": "(functionCall (scalarFunctionName IF) ( ))",
        "Description": [
            "If/else construct"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/flow-control-functions.html#function_if"
        ],
        "Detail": "<link><code>IF( expr1 , expr2 , expr3 )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/flow-control-functions.html#function_if</link>\nIf <code>expr1</code> is <code>TRUE</code> ( <code>expr1 <> 0</code> and <code>expr1 IS NOT NULL</code> ), <link><code>IF()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/flow-control-functions.html#function_if</link> returns <code>expr2</code> . Otherwise, it returns <code>expr3</code> .\nNote\nThere is also an <link><code>IF</code>&LINK&https://dev.mysql.com/doc/refman/8.4/if.html</link> statement , which differs from the <link><code>IF()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/flow-control-functions.html#function_if</link> function described here. See <link>Section 15.6.5.2, \"IF Statement\"&LINK&https://dev.mysql.com/doc/refman/8.4/if.html</link> .\nIf only one of <code>expr2</code> or <code>expr3</code> is explicitly <code>NULL</code> , the result type of the <link><code>IF()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/flow-control-functions.html#function_if</link> function is the type of the non- <code>NULL</code> expression.\nThe default return type of <link><code>IF()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/flow-control-functions.html#function_if</link> (which may matter when it is stored into a temporary table) is calculated as follows:\nIf <code>expr2</code> or <code>expr3</code> produce a string, the result is a string.\nIf <code>expr2</code> and <code>expr3</code> are both strings, the result is case-sensitive if either string is case-sensitive.\nIf <code>expr2</code> or <code>expr3</code> produce a floating-point value, the result is a floating-point value.\nIf <code>expr2</code> or <code>expr3</code> produce an integer, the result is an integer.",
        "Demo": [
            "mysql> SELECT IF(1>2,2,3);\n-> 3\nmysql> SELECT IF(1<2,'yes','no');\n-> 'yes'\nmysql> SELECT IF(STRCMP('test','test1'),'no','yes');\n-> 'no'"
        ]
    },
    {
        "Name": "IFNULL",
        "Tree": "(functionCall (scalarFunctionName (functionNameBase IFNULL)) ( ))",
        "Description": [
            "Null if/else construct"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/flow-control-functions.html#function_ifnull"
        ],
        "Detail": "<link><code>IFNULL( expr1 , expr2 )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/flow-control-functions.html#function_ifnull</link>\nIf <code>expr1</code> is not <code>NULL</code> , <link><code>IFNULL()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/flow-control-functions.html#function_ifnull</link> returns <code>expr1</code> ; otherwise it returns <code>expr2</code> .\nThe default return type of <link><code>IFNULL( expr1 , expr2 )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/flow-control-functions.html#function_ifnull</link> is the more \" general \" of the two expressions, in the order <code>STRING</code> , <code>REAL</code> , or <code>INTEGER</code> . Consider the case of a table based on expressions or where MySQL must internally store a value returned by <link><code>IFNULL()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/flow-control-functions.html#function_ifnull</link> in a temporary table:\nIn this example, the type of the <code>test</code> column is <link><code>VARBINARY(4)</code>&LINK&https://dev.mysql.com/doc/refman/8.4/binary-varbinary.html</link> (a string type).",
        "Demo": [
            "mysql> SELECT IFNULL(1,0);\n-> 1\nmysql> SELECT IFNULL(NULL,10);\n-> 10\nmysql> SELECT IFNULL(1/0,10);\n-> 10\nmysql> SELECT IFNULL(1/0,'yes');\n-> 'yes'",
            "mysql> CREATE TABLE tmp SELECT IFNULL(1,'test') AS test;\nmysql> DESCRIBE tmp;\n+-------+--------------+------+-----+---------+-------+\n| Field | Type | Null | Key | Default | Extra |\n+-------+--------------+------+-----+---------+-------+\n| test | varbinary(4) | NO | | | |\n+-------+--------------+------+-----+---------+-------+"
        ]
    },
    {
        "Name": "INET_ATON",
        "Tree": "(functionCall (scalarFunctionName (functionNameBase INET_ATON)) ( ))",
        "Description": [
            "Return the numeric value of an IP address"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/miscellaneous-functions.html#function_inet-aton"
        ],
        "Detail": "<link><code>INET_ATON( expr )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/miscellaneous-functions.html#function_inet-aton</link>\nGiven the dotted-quad representation of an IPv4 network address as a string, returns an integer that represents the numeric value of the address in network byte order (big endian). <link><code>INET_ATON()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/miscellaneous-functions.html#function_inet-aton</link> returns <code>NULL</code> if it does not understand its argument, or if <code>expr</code> is <code>NULL</code> .\nFor this example, the return value is calculated as 10\u00d7256 3 + 0\u00d7256 2 + 5\u00d7256 + 9.\n<link><code>INET_ATON()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/miscellaneous-functions.html#function_inet-aton</link> may or may not return a non- <code>NULL</code> result for short-form IP addresses (such as <code>'127.1'</code> as a representation of <code>'127.0.0.1'</code> ). Because of this, <link><code>INET_ATON()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/miscellaneous-functions.html#function_inet-aton</link> a should not be used for such addresses.\nNote\nTo store values generated by <link><code>INET_ATON()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/miscellaneous-functions.html#function_inet-aton</link> , use an <code>INT UNSIGNED</code> column rather than <link><code>INT</code>&LINK&https://dev.mysql.com/doc/refman/8.4/integer-types.html</link> , which is signed. If you use a signed column, values corresponding to IP addresses for which the first octet is greater than 127 cannot be stored correctly. See <link>Section 13.1.7, \"Out-of-Range and Overflow Handling\"&LINK&https://dev.mysql.com/doc/refman/8.4/out-of-range-and-overflow.html</link> .",
        "Demo": [
            "mysql> SELECT INET_ATON('10.0.5.9');\n-> 167773449"
        ]
    },
    {
        "Name": "INET_NTOA",
        "Tree": "(functionCall (scalarFunctionName (functionNameBase INET_NTOA)) ( ))",
        "Description": [
            "Return the IP address from a numeric value"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/miscellaneous-functions.html#function_inet-ntoa"
        ],
        "Detail": "<link><code>INET_NTOA( expr )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/miscellaneous-functions.html#function_inet-ntoa</link>\nGiven a numeric IPv4 network address in network byte order, returns the dotted-quad string representation of the address as a string in the connection character set. <link><code>INET_NTOA()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/miscellaneous-functions.html#function_inet-ntoa</link> returns <code>NULL</code> if it does not understand its argument.",
        "Demo": [
            "mysql> SELECT INET_NTOA(167773449);\n-> '10.0.5.9'"
        ]
    },
    {
        "Name": "INSERT",
        "Tree": "(functionCall (scalarFunctionName INSERT) ( ))",
        "Description": [
            "Insert substring at specified position up to specified number of\n      characters"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/string-functions.html#function_insert"
        ],
        "Detail": "<link><code>INSERT( str , pos , len , newstr )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/string-functions.html#function_insert</link>\nReturns the string <code>str</code> , with the substring beginning at position <code>pos</code> and <code>len</code> characters long replaced by the string <code>newstr</code> . Returns the original string if <code>pos</code> is not within the length of the string. Replaces the rest of the string from position <code>pos</code> if <code>len</code> is not within the length of the rest of the string. Returns <code>NULL</code> if any argument is <code>NULL</code> .\nThis function is multibyte safe.",
        "Demo": [
            "mysql> SELECT INSERT('Quadratic', 3, 4, 'What');\n-> 'QuWhattic'\nmysql> SELECT INSERT('Quadratic', -1, 4, 'What');\n-> 'Quadratic'\nmysql> SELECT INSERT('Quadratic', 3, 100, 'What');\n-> 'QuWhat'"
        ]
    },
    {
        "Name": "INSTR",
        "Tree": "(functionCall (scalarFunctionName (functionNameBase INSTR)) ( ))",
        "Description": [
            "Return the index of the first occurrence of substring"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/string-functions.html#function_instr"
        ],
        "Detail": "<link><code>INSTR( str , substr )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/string-functions.html#function_instr</link>\nReturns the position of the first occurrence of substring <code>substr</code> in string <code>str</code> . This is the same as the two-argument form of <link><code>LOCATE()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/string-functions.html#function_locate</link> , except that the order of the arguments is reversed.\nThis function is multibyte safe, and is case-sensitive only if at least one argument is a binary string. If either argument is <code>NULL</code> , this functions returns <code>NULL</code> .",
        "Demo": [
            "mysql> SELECT INSTR('foobarbar', 'bar');\n-> 4\nmysql> SELECT INSTR('xbar', 'foobar');\n-> 0"
        ]
    },
    {
        "Name": "INTERNAL_AUTO_INCREMENT",
        "Tree": "(functionCall (fullId (uid (simpleId INTERNAL_AUTO_INCREMENT))) ( ))",
        "Description": [
            "Internal use only"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/internal-functions.html#function_internal-auto-increment"
        ],
        "Detail": "<link><code>INTERNAL_AUTO_INCREMENT( ARGS )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/internal-functions.html#function_internal-auto-increment</link>",
        "Demo": []
    },
    {
        "Name": "INTERNAL_AVG_ROW_LENGTH",
        "Tree": "(functionCall (fullId (uid (simpleId INTERNAL_AVG_ROW_LENGTH))) ( ))",
        "Description": [
            "Internal use only"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/internal-functions.html#function_internal-avg-row-length"
        ],
        "Detail": "<link><code>INTERNAL_AVG_ROW_LENGTH( ARGS )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/internal-functions.html#function_internal-avg-row-length</link>",
        "Demo": []
    },
    {
        "Name": "INTERNAL_CHECK_TIME",
        "Tree": "(functionCall (fullId (uid (simpleId INTERNAL_CHECK_TIME))) ( ))",
        "Description": [
            "Internal use only"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/internal-functions.html#function_internal-check-time"
        ],
        "Detail": "<link><code>INTERNAL_CHECK_TIME( ARGS )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/internal-functions.html#function_internal-check-time</link>",
        "Demo": []
    },
    {
        "Name": "INTERNAL_CHECKSUM",
        "Tree": "(functionCall (fullId (uid (simpleId INTERNAL_CHECKSUM))) ( ))",
        "Description": [
            "Internal use only"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/internal-functions.html#function_internal-checksum"
        ],
        "Detail": "<link><code>INTERNAL_CHECKSUM( ARGS )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/internal-functions.html#function_internal-checksum</link>",
        "Demo": []
    },
    {
        "Name": "INTERNAL_DATA_FREE",
        "Tree": "(functionCall (fullId (uid (simpleId INTERNAL_DATA_FREE))) ( ))",
        "Description": [
            "Internal use only"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/internal-functions.html#function_internal-data-free"
        ],
        "Detail": "<link><code>INTERNAL_DATA_FREE( ARGS )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/internal-functions.html#function_internal-data-free</link>",
        "Demo": []
    },
    {
        "Name": "INTERNAL_DATA_LENGTH",
        "Tree": "(functionCall (fullId (uid (simpleId INTERNAL_DATA_LENGTH))) ( ))",
        "Description": [
            "Internal use only"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/internal-functions.html#function_internal-data-length"
        ],
        "Detail": "<link><code>INTERNAL_DATA_LENGTH( ARGS )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/internal-functions.html#function_internal-data-length</link>",
        "Demo": []
    },
    {
        "Name": "INTERNAL_DD_CHAR_LENGTH",
        "Tree": "(functionCall (fullId (uid (simpleId INTERNAL_DD_CHAR_LENGTH))) ( ))",
        "Description": [
            "Internal use only"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/internal-functions.html#function_internal-dd-char-length"
        ],
        "Detail": "<link><code>INTERNAL_DD_CHAR_LENGTH( ARGS )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/internal-functions.html#function_internal-dd-char-length</link>",
        "Demo": []
    },
    {
        "Name": "INTERNAL_GET_COMMENT_OR_ERROR",
        "Tree": "(functionCall (fullId (uid (simpleId INTERNAL_GET_COMMENT_OR_ERROR))) ( ))",
        "Description": [
            "Internal use only"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/internal-functions.html#function_internal-get-comment-or-error"
        ],
        "Detail": "<link><code>INTERNAL_GET_COMMENT_OR_ERROR( ARGS )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/internal-functions.html#function_internal-get-comment-or-error</link>",
        "Demo": []
    },
    {
        "Name": "INTERNAL_GET_ENABLED_ROLE_JSON",
        "Tree": "(functionCall (fullId (uid (simpleId INTERNAL_GET_ENABLED_ROLE_JSON))) ( ))",
        "Description": [
            "Internal use only"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/internal-functions.html#function_internal-get-enabled-role-json"
        ],
        "Detail": "<link><code>INTERNAL_GET_ENABLED_ROLE_JSON( ARGS )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/internal-functions.html#function_internal-get-enabled-role-json</link>",
        "Demo": []
    },
    {
        "Name": "INTERNAL_GET_HOSTNAME",
        "Tree": "(functionCall (fullId (uid (simpleId INTERNAL_GET_HOSTNAME))) ( ))",
        "Description": [
            "Internal use only"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/internal-functions.html#function_internal-get-hostname"
        ],
        "Detail": "<link><code>INTERNAL_GET_HOSTNAME( ARGS )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/internal-functions.html#function_internal-get-hostname</link>",
        "Demo": []
    },
    {
        "Name": "INTERNAL_GET_USERNAME",
        "Tree": "(functionCall (fullId (uid (simpleId INTERNAL_GET_USERNAME))) ( ))",
        "Description": [
            "Internal use only"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/internal-functions.html#function_internal-get-username"
        ],
        "Detail": "<link><code>INTERNAL_GET_USERNAME( ARGS )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/internal-functions.html#function_internal-get-username</link>",
        "Demo": []
    },
    {
        "Name": "INTERNAL_GET_VIEW_WARNING_OR_ERROR",
        "Tree": "(functionCall (fullId (uid (simpleId INTERNAL_GET_VIEW_WARNING_OR_ERROR))) ( ))",
        "Description": [
            "Internal use only"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/internal-functions.html#function_internal-get-view-warning-or-error"
        ],
        "Detail": "<link><code>INTERNAL_GET_VIEW_WARNING_OR_ERROR( ARGS )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/internal-functions.html#function_internal-get-view-warning-or-error</link>",
        "Demo": []
    },
    {
        "Name": "INTERNAL_INDEX_COLUMN_CARDINALITY",
        "Tree": "(functionCall (fullId (uid (simpleId INTERNAL_INDEX_COLUMN_CARDINALITY))) ( ))",
        "Description": [
            "Internal use only"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/internal-functions.html#function_internal-index-column-cardinality"
        ],
        "Detail": "<link><code>INTERNAL_INDEX_COLUMN_CARDINALITY( ARGS )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/internal-functions.html#function_internal-index-column-cardinality</link>",
        "Demo": []
    },
    {
        "Name": "INTERNAL_INDEX_LENGTH",
        "Tree": "(functionCall (fullId (uid (simpleId INTERNAL_INDEX_LENGTH))) ( ))",
        "Description": [
            "Internal use only"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/internal-functions.html#function_internal-index-length"
        ],
        "Detail": "<link><code>INTERNAL_INDEX_LENGTH( ARGS )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/internal-functions.html#function_internal-index-length</link>",
        "Demo": []
    },
    {
        "Name": "INTERNAL_IS_ENABLED_ROLE",
        "Tree": "(functionCall (fullId (uid (simpleId INTERNAL_IS_ENABLED_ROLE))) ( ))",
        "Description": [
            "Internal use only"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/internal-functions.html#function_internal-is-enabled-role"
        ],
        "Detail": "<link><code>INTERNAL_IS_ENABLED_ROLE( ARGS )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/internal-functions.html#function_internal-is-enabled-role</link>",
        "Demo": []
    },
    {
        "Name": "INTERNAL_IS_MANDATORY_ROLE",
        "Tree": "(functionCall (fullId (uid (simpleId INTERNAL_IS_MANDATORY_ROLE))) ( ))",
        "Description": [
            "Internal use only"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/internal-functions.html#function_internal-is-mandatory-role"
        ],
        "Detail": "<link><code>INTERNAL_IS_MANDATORY_ROLE( ARGS )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/internal-functions.html#function_internal-is-mandatory-role</link>",
        "Demo": []
    },
    {
        "Name": "INTERNAL_KEYS_DISABLED",
        "Tree": "(functionCall (fullId (uid (simpleId INTERNAL_KEYS_DISABLED))) ( ))",
        "Description": [
            "Internal use only"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/internal-functions.html#function_internal-keys-disabled"
        ],
        "Detail": "<link><code>INTERNAL_KEYS_DISABLED( ARGS )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/internal-functions.html#function_internal-keys-disabled</link>",
        "Demo": []
    },
    {
        "Name": "INTERNAL_MAX_DATA_LENGTH",
        "Tree": "(functionCall (fullId (uid (simpleId INTERNAL_MAX_DATA_LENGTH))) ( ))",
        "Description": [
            "Internal use only"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/internal-functions.html#function_internal-max-data-length"
        ],
        "Detail": "<link><code>INTERNAL_MAX_DATA_LENGTH( ARGS )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/internal-functions.html#function_internal-max-data-length</link>",
        "Demo": []
    },
    {
        "Name": "INTERNAL_TABLE_ROWS",
        "Tree": "(functionCall (fullId (uid (simpleId INTERNAL_TABLE_ROWS))) ( ))",
        "Description": [
            "Internal use only"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/internal-functions.html#function_internal-table-rows"
        ],
        "Detail": "<link><code>INTERNAL_TABLE_ROWS( ARGS )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/internal-functions.html#function_internal-table-rows</link>",
        "Demo": []
    },
    {
        "Name": "INTERNAL_UPDATE_TIME",
        "Tree": "(functionCall (fullId (uid (simpleId INTERNAL_UPDATE_TIME))) ( ))",
        "Description": [
            "Internal use only"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/internal-functions.html#function_internal-update-time"
        ],
        "Detail": "<link><code>INTERNAL_UPDATE_TIME( ARGS )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/internal-functions.html#function_internal-update-time</link>",
        "Demo": []
    },
    {
        "Name": "IS_FREE_LOCK",
        "Tree": "(functionCall (scalarFunctionName (functionNameBase IS_FREE_LOCK)) ( ))",
        "Description": [
            "Whether the named lock is free"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/locking-functions.html#function_is-free-lock"
        ],
        "Detail": "<link><code>IS_FREE_LOCK( str )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/locking-functions.html#function_is-free-lock</link>\nChecks whether the lock named <code>str</code> is free to use (that is, not locked). Returns <code>1</code> if the lock is free (no one is using the lock), <code>0</code> if the lock is in use, and <code>NULL</code> if an error occurs (such as an incorrect argument).\nThis function is unsafe for statement-based replication. A warning is logged if you use this function when <link><code>binlog_format</code>&LINK&https://dev.mysql.com/doc/refman/8.4/replication-options-binary-log.html#sysvar_binlog_format</link> is set to <code>STATEMENT</code> .",
        "Demo": []
    },
    {
        "Name": "IS_USED_LOCK",
        "Tree": "(functionCall (scalarFunctionName (functionNameBase IS_USED_LOCK)) ( ))",
        "Description": [
            "Whether the named lock is in use; return connection identifier if\n      true"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/locking-functions.html#function_is-used-lock"
        ],
        "Detail": "<link><code>IS_USED_LOCK( str )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/locking-functions.html#function_is-used-lock</link>\nChecks whether the lock named <code>str</code> is in use (that is, locked). If so, it returns the connection identifier of the client session that holds the lock. Otherwise, it returns <code>NULL</code> .\nThis function is unsafe for statement-based replication. A warning is logged if you use this function when <link><code>binlog_format</code>&LINK&https://dev.mysql.com/doc/refman/8.4/replication-options-binary-log.html#sysvar_binlog_format</link> is set to <code>STATEMENT</code> .",
        "Demo": []
    },
    {
        "Name": "IS_UUID",
        "Tree": "(functionCall (fullId (uid (simpleId IS_UUID))) ( ))",
        "Description": [
            "Whether argument is a valid UUID"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/miscellaneous-functions.html#function_is-uuid"
        ],
        "Detail": "<link><code>IS_UUID( string_uuid )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/miscellaneous-functions.html#function_is-uuid</link>\nReturns 1 if the argument is a valid string-format UUID, 0 if the argument is not a valid UUID, and <code>NULL</code> if the argument is <code>NULL</code> .\n\" Valid \" means that the value is in a format that can be parsed. That is, it has the correct length and contains only the permitted characters (hexadecimal digits in any lettercase and, optionally, dashes and curly braces). This format is most common:\nThese other formats are also permitted:\nFor the meanings of fields within the value, see the <link><code>UUID()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/miscellaneous-functions.html#function_uuid</link> function description.",
        "Demo": [
            "mysql> SELECT IS_UUID('6ccd780c-baba-1026-9564-5b8c656024db');\n+-------------------------------------------------+\n| IS_UUID('6ccd780c-baba-1026-9564-5b8c656024db') |\n+-------------------------------------------------+\n| 1 |\n+-------------------------------------------------+\nmysql> SELECT IS_UUID('6CCD780C-BABA-1026-9564-5B8C656024DB');\n+-------------------------------------------------+\n| IS_UUID('6CCD780C-BABA-1026-9564-5B8C656024DB') |\n+-------------------------------------------------+\n| 1 |\n+-------------------------------------------------+\nmysql> SELECT IS_UUID('6ccd780cbaba102695645b8c656024db');\n+---------------------------------------------+\n| IS_UUID('6ccd780cbaba102695645b8c656024db') |\n+---------------------------------------------+\n| 1 |\n+---------------------------------------------+\nmysql> SELECT IS_UUID('{6ccd780c-baba-1026-9564-5b8c656024db}');\n+---------------------------------------------------+\n| IS_UUID('{6ccd780c-baba-1026-9564-5b8c656024db}') |\n+---------------------------------------------------+\n| 1 |\n+---------------------------------------------------+\nmysql> SELECT IS_UUID('6ccd780c-baba-1026-9564-5b8c6560');\n+---------------------------------------------+\n| IS_UUID('6ccd780c-baba-1026-9564-5b8c6560') |\n+---------------------------------------------+\n| 0 |\n+---------------------------------------------+\nmysql> SELECT IS_UUID(RAND());\n+-----------------+\n| IS_UUID(RAND()) |\n+-----------------+\n| 0 |\n+-----------------+"
        ]
    },
    {
        "Name": "ISNULL",
        "Tree": "(functionCall (scalarFunctionName (functionNameBase ISNULL)) ( ))",
        "Description": [
            "Test whether the argument is NULL"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/comparison-operators.html#function_isnull"
        ],
        "Detail": "<link><code>ISNULL( expr )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/comparison-operators.html#function_isnull</link>\nIf <code>expr</code> is <code>NULL</code> , <link><code>ISNULL()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/comparison-operators.html#function_isnull</link> returns <code>1</code> , otherwise it returns <code>0</code> .\n<link><code>ISNULL()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/comparison-operators.html#function_isnull</link> can be used instead of <link><code>=</code>&LINK&https://dev.mysql.com/doc/refman/8.4/comparison-operators.html#operator_equal</link> to test whether a value is <code>NULL</code> . (Comparing a value to <code>NULL</code> using <link><code>=</code>&LINK&https://dev.mysql.com/doc/refman/8.4/comparison-operators.html#operator_equal</link> always yields <code>NULL</code> .)\nThe <link><code>ISNULL()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/comparison-operators.html#function_isnull</link> function shares some special behaviors with the <link><code>IS NULL</code>&LINK&https://dev.mysql.com/doc/refman/8.4/comparison-operators.html#operator_is-null</link> comparison operator. See the description of <link><code>IS NULL</code>&LINK&https://dev.mysql.com/doc/refman/8.4/comparison-operators.html#operator_is-null</link> .",
        "Demo": [
            "mysql> SELECT ISNULL(1+1);\n-> 0\nmysql> SELECT ISNULL(1/0);\n-> 1"
        ]
    },
    {
        "Name": "JSON_ARRAY",
        "Tree": "(functionCall (scalarFunctionName (functionNameBase JSON_ARRAY)) ( ))",
        "Description": [
            "Create JSON array"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/json-creation-functions.html#function_json-array"
        ],
        "Detail": "<link><code>JSON_ARRAY([ val [, val ] ...])</code>&LINK&https://dev.mysql.com/doc/refman/8.4/json-creation-functions.html#function_json-array</link>\nEvaluates a (possibly empty) list of values and returns a JSON array containing those values.",
        "Demo": [
            "mysql> SELECT JSON_ARRAY(1, \"abc\", NULL, TRUE, CURTIME());\n+---------------------------------------------+\n| JSON_ARRAY(1, \"abc\", NULL, TRUE, CURTIME()) |\n+---------------------------------------------+\n| [1, \"abc\", null, true, \"11:30:24.000000\"] |\n+---------------------------------------------+"
        ]
    },
    {
        "Name": "JSON_ARRAY_APPEND",
        "Tree": "(functionCall (scalarFunctionName (functionNameBase JSON_ARRAY_APPEND)) ( ))",
        "Description": [
            "Append data to JSON document"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/json-modification-functions.html#function_json-array-append"
        ],
        "Detail": "<link><code>JSON_ARRAY_APPEND( json_doc , path , val [, path , val ] ...)</code>&LINK&https://dev.mysql.com/doc/refman/8.4/json-modification-functions.html#function_json-array-append</link>\nAppends values to the end of the indicated arrays within a JSON document and returns the result. Returns <code>NULL</code> if any argument is <code>NULL</code> . An error occurs if the <code>json_doc</code> argument is not a valid JSON document or any <code>path</code> argument is not a valid path expression or contains a <code>*</code> or <code>**</code> wildcard.\nThe path-value pairs are evaluated left to right. The document produced by evaluating one pair becomes the new value against which the next pair is evaluated.\nIf a path selects a scalar or object value, that value is autowrapped within an array and the new value is added to that array. Pairs for which the path does not identify any value in the JSON document are ignored.",
        "Demo": [
            "mysql> SET @j = '[\"a\", [\"b\", \"c\"], \"d\"]';\nmysql> SELECT JSON_ARRAY_APPEND(@j, '$[1]', 1);\n+----------------------------------+\n| JSON_ARRAY_APPEND(@j, '$[1]', 1) |\n+----------------------------------+\n| [\"a\", [\"b\", \"c\", 1], \"d\"] |\n+----------------------------------+\nmysql> SELECT JSON_ARRAY_APPEND(@j, '$[0]', 2);\n+----------------------------------+\n| JSON_ARRAY_APPEND(@j, '$[0]', 2) |\n+----------------------------------+\n| [[\"a\", 2], [\"b\", \"c\"], \"d\"] |\n+----------------------------------+\nmysql> SELECT JSON_ARRAY_APPEND(@j, '$[1][0]', 3);\n+-------------------------------------+\n| JSON_ARRAY_APPEND(@j, '$[1][0]', 3) |\n+-------------------------------------+\n| [\"a\", [[\"b\", 3], \"c\"], \"d\"] |\n+-------------------------------------+\nmysql> SET @j = '{\"a\": 1, \"b\": [2, 3], \"c\": 4}';\nmysql> SELECT JSON_ARRAY_APPEND(@j, '$.b', 'x');\n+------------------------------------+\n| JSON_ARRAY_APPEND(@j, '$.b', 'x') |\n+------------------------------------+\n| {\"a\": 1, \"b\": [2, 3, \"x\"], \"c\": 4} |\n+------------------------------------+\nmysql> SELECT JSON_ARRAY_APPEND(@j, '$.c', 'y');\n+--------------------------------------+\n| JSON_ARRAY_APPEND(@j, '$.c', 'y') |\n+--------------------------------------+\n| {\"a\": 1, \"b\": [2, 3], \"c\": [4, \"y\"]} |\n+--------------------------------------+\nmysql> SET @j = '{\"a\": 1}';\nmysql> SELECT JSON_ARRAY_APPEND(@j, '$', 'z');\n+---------------------------------+\n| JSON_ARRAY_APPEND(@j, '$', 'z') |\n+---------------------------------+\n| [{\"a\": 1}, \"z\"] |\n+---------------------------------+"
        ]
    },
    {
        "Name": "JSON_ARRAY_INSERT",
        "Tree": "(functionCall (scalarFunctionName (functionNameBase JSON_ARRAY_INSERT)) ( ))",
        "Description": [
            "Insert into JSON array"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/json-modification-functions.html#function_json-array-insert"
        ],
        "Detail": "<link><code>JSON_ARRAY_INSERT( json_doc , path , val [, path , val ] ...)</code>&LINK&https://dev.mysql.com/doc/refman/8.4/json-modification-functions.html#function_json-array-insert</link>\nUpdates a JSON document, inserting into an array within the document and returning the modified document. Returns <code>NULL</code> if any argument is <code>NULL</code> . An error occurs if the <code>json_doc</code> argument is not a valid JSON document or any <code>path</code> argument is not a valid path expression or contains a <code>*</code> or <code>**</code> wildcard or does not end with an array element identifier.\nThe path-value pairs are evaluated left to right. The document produced by evaluating one pair becomes the new value against which the next pair is evaluated.\nPairs for which the path does not identify any array in the JSON document are ignored. If a path identifies an array element, the corresponding value is inserted at that element position, shifting any following values to the right. If a path identifies an array position past the end of an array, the value is inserted at the end of the array.\nEarlier modifications affect the positions of the following elements in the array, so subsequent paths in the same <link><code>JSON_ARRAY_INSERT()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/json-modification-functions.html#function_json-array-insert</link> call should take this into account. In the final example, the second path inserts nothing because the path no longer matches anything after the first insert.",
        "Demo": [
            "mysql> SET @j = '[\"a\", {\"b\": [1, 2]}, [3, 4]]';\nmysql> SELECT JSON_ARRAY_INSERT(@j, '$[1]', 'x');\n+------------------------------------+\n| JSON_ARRAY_INSERT(@j, '$[1]', 'x') |\n+------------------------------------+\n| [\"a\", \"x\", {\"b\": [1, 2]}, [3, 4]] |\n+------------------------------------+\nmysql> SELECT JSON_ARRAY_INSERT(@j, '$[100]', 'x');\n+--------------------------------------+\n| JSON_ARRAY_INSERT(@j, '$[100]', 'x') |\n+--------------------------------------+\n| [\"a\", {\"b\": [1, 2]}, [3, 4], \"x\"] |\n+--------------------------------------+\nmysql> SELECT JSON_ARRAY_INSERT(@j, '$[1].b[0]', 'x');\n+-----------------------------------------+\n| JSON_ARRAY_INSERT(@j, '$[1].b[0]', 'x') |\n+-----------------------------------------+\n| [\"a\", {\"b\": [\"x\", 1, 2]}, [3, 4]] |\n+-----------------------------------------+\nmysql> SELECT JSON_ARRAY_INSERT(@j, '$[2][1]', 'y');\n+---------------------------------------+\n| JSON_ARRAY_INSERT(@j, '$[2][1]', 'y') |\n+---------------------------------------+\n| [\"a\", {\"b\": [1, 2]}, [3, \"y\", 4]] |\n+---------------------------------------+\nmysql> SELECT JSON_ARRAY_INSERT(@j, '$[0]', 'x', '$[2][1]', 'y');\n+----------------------------------------------------+\n| JSON_ARRAY_INSERT(@j, '$[0]', 'x', '$[2][1]', 'y') |\n+----------------------------------------------------+\n| [\"x\", \"a\", {\"b\": [1, 2]}, [3, 4]] |\n+----------------------------------------------------+"
        ]
    },
    {
        "Name": "JSON_ARRAYAGG",
        "Tree": "(functionCall (scalarFunctionName (functionNameBase JSON_ARRAYAGG)) ( ))",
        "Description": [
            "Return result set as a single JSON array"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/aggregate-functions.html#function_json-arrayagg"
        ],
        "Detail": "<link><code>JSON_ARRAYAGG( col_or_expr ) [ over_clause ]</code>&LINK&https://dev.mysql.com/doc/refman/8.4/aggregate-functions.html#function_json-arrayagg</link>\nAggregates a result set as a single <link><code>JSON</code>&LINK&https://dev.mysql.com/doc/refman/8.4/json.html</link> array whose elements consist of the rows. The order of elements in this array is undefined. The function acts on a column or an expression that evaluates to a single value. Returns <code>NULL</code> if the result contains no rows, or in the event of an error. If <code>col_or_expr</code> is <code>NULL</code> , the function returns an array of JSON <code>[null]</code> elements.\nThis function executes as a window function if <code>over_clause</code> is present. <code>over_clause</code> is as described in <link>Section 14.20.2, \"Window Function Concepts and Syntax\"&LINK&https://dev.mysql.com/doc/refman/8.4/window-functions-usage.html</link> .",
        "Demo": [
            "mysql> SELECT o_id, attribute, value FROM t3;\n+------+-----------+-------+\n| o_id | attribute | value |\n+------+-----------+-------+\n| 2 | color | red |\n| 2 | fabric | silk |\n| 3 | color | green |\n| 3 | shape | square|\n+------+-----------+-------+\n4 rows in set (0.00 sec)\nmysql> SELECT o_id, JSON_ARRAYAGG(attribute) AS attributes\n-> FROM t3 GROUP BY o_id;\n+------+---------------------+\n| o_id | attributes |\n+------+---------------------+\n| 2 | [\"color\", \"fabric\"] |\n| 3 | [\"color\", \"shape\"] |\n+------+---------------------+\n2 rows in set (0.00 sec)"
        ]
    },
    {
        "Name": "JSON_CONTAINS",
        "Tree": "(functionCall (scalarFunctionName (functionNameBase JSON_CONTAINS)) ( ))",
        "Description": [
            "Whether JSON document contains specific object at path"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/json-search-functions.html#function_json-contains"
        ],
        "Detail": "<link><code>JSON_CONTAINS( target , candidate [, path ])</code>&LINK&https://dev.mysql.com/doc/refman/8.4/json-search-functions.html#function_json-contains</link>\nIndicates by returning 1 or 0 whether a given <code>candidate</code> JSON document is contained within a <code>target</code> JSON document, or\u2014if a <code>path</code> argument was supplied\u2014whether the candidate is found at a specific path within the target. Returns <code>NULL</code> if any argument is <code>NULL</code> , or if the path argument does not identify a section of the target document. An error occurs if <code>target</code> or <code>candidate</code> is not a valid JSON document, or if the <code>path</code> argument is not a valid path expression or contains a <code>*</code> or <code>**</code> wildcard.\nTo check only whether any data exists at the path, use <link><code>JSON_CONTAINS_PATH()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/json-search-functions.html#function_json-contains-path</link> instead.\nThe following rules define containment:\nA candidate scalar is contained in a target scalar if and only if they are comparable and are equal. Two scalar values are comparable if they have the same <link><code>JSON_TYPE()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/json-attribute-functions.html#function_json-type</link> types, with the exception that values of types <code>INTEGER</code> and <code>DECIMAL</code> are also comparable to each other.\nA candidate array is contained in a target array if and only if every element in the candidate is contained in some element of the target.\nA candidate nonarray is contained in a target array if and only if the candidate is contained in some element of the target.\nA candidate object is contained in a target object if and only if for each key in the candidate there is a key with the same name in the target and the value associated with the candidate key is contained in the value associated with the target key.\nOtherwise, the candidate value is not contained in the target document.\nQueries using <code>JSON_CONTAINS()</code> on <link><code>InnoDB</code>&LINK&https://dev.mysql.com/doc/refman/8.4/innodb-storage-engine.html</link> tables can be optimized using multi-valued indexes; see <link>Multi-Valued Indexes&LINK&https://dev.mysql.com/doc/refman/8.4/create-index.html#create-index-multi-valued</link> , for more information.",
        "Demo": [
            "mysql> SET @j = '{\"a\": 1, \"b\": 2, \"c\": {\"d\": 4}}';\nmysql> SET @j2 = '1';\nmysql> SELECT JSON_CONTAINS(@j, @j2, '$.a');\n+-------------------------------+\n| JSON_CONTAINS(@j, @j2, '$.a') |\n+-------------------------------+\n| 1 |\n+-------------------------------+\nmysql> SELECT JSON_CONTAINS(@j, @j2, '$.b');\n+-------------------------------+\n| JSON_CONTAINS(@j, @j2, '$.b') |\n+-------------------------------+\n| 0 |\n+-------------------------------+\nmysql> SET @j2 = '{\"d\": 4}';\nmysql> SELECT JSON_CONTAINS(@j, @j2, '$.a');\n+-------------------------------+\n| JSON_CONTAINS(@j, @j2, '$.a') |\n+-------------------------------+\n| 0 |\n+-------------------------------+\nmysql> SELECT JSON_CONTAINS(@j, @j2, '$.c');\n+-------------------------------+\n| JSON_CONTAINS(@j, @j2, '$.c') |\n+-------------------------------+\n| 1 |\n+-------------------------------+"
        ]
    },
    {
        "Name": "JSON_CONTAINS_PATH",
        "Tree": "(functionCall (scalarFunctionName (functionNameBase JSON_CONTAINS_PATH)) ( ))",
        "Description": [
            "Whether JSON document contains any data at path"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/json-search-functions.html#function_json-contains-path"
        ],
        "Detail": "<link><code>JSON_CONTAINS_PATH( json_doc , one_or_all , path [, path ] ...)</code>&LINK&https://dev.mysql.com/doc/refman/8.4/json-search-functions.html#function_json-contains-path</link>\nReturns 0 or 1 to indicate whether a JSON document contains data at a given path or paths. Returns <code>NULL</code> if any argument is <code>NULL</code> . An error occurs if the <code>json_doc</code> argument is not a valid JSON document, any <code>path</code> argument is not a valid path expression, or <code>one_or_all</code> is not <code>'one'</code> or <code>'all'</code> .\nTo check for a specific value at a path, use <link><code>JSON_CONTAINS()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/json-search-functions.html#function_json-contains</link> instead.\nThe return value is 0 if no specified path exists within the document. Otherwise, the return value depends on the <code>one_or_all</code> argument:\n<code>'one'</code> : 1 if at least one path exists within the document, 0 otherwise.\n<code>'all'</code> : 1 if all paths exist within the document, 0 otherwise.",
        "Demo": [
            "mysql> SET @j = '{\"a\": 1, \"b\": 2, \"c\": {\"d\": 4}}';\nmysql> SELECT JSON_CONTAINS_PATH(@j, 'one', '$.a', '$.e');\n+---------------------------------------------+\n| JSON_CONTAINS_PATH(@j, 'one', '$.a', '$.e') |\n+---------------------------------------------+\n| 1 |\n+---------------------------------------------+\nmysql> SELECT JSON_CONTAINS_PATH(@j, 'all', '$.a', '$.e');\n+---------------------------------------------+\n| JSON_CONTAINS_PATH(@j, 'all', '$.a', '$.e') |\n+---------------------------------------------+\n| 0 |\n+---------------------------------------------+\nmysql> SELECT JSON_CONTAINS_PATH(@j, 'one', '$.c.d');\n+----------------------------------------+\n| JSON_CONTAINS_PATH(@j, 'one', '$.c.d') |\n+----------------------------------------+\n| 1 |\n+----------------------------------------+\nmysql> SELECT JSON_CONTAINS_PATH(@j, 'one', '$.a.d');\n+----------------------------------------+\n| JSON_CONTAINS_PATH(@j, 'one', '$.a.d') |\n+----------------------------------------+\n| 0 |\n+----------------------------------------+"
        ]
    },
    {
        "Name": "JSON_DEPTH",
        "Tree": "(functionCall (scalarFunctionName (functionNameBase JSON_DEPTH)) ( ))",
        "Description": [
            "Maximum depth of JSON document"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/json-attribute-functions.html#function_json-depth"
        ],
        "Detail": "<link><code>JSON_DEPTH( json_doc )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/json-attribute-functions.html#function_json-depth</link>\nReturns the maximum depth of a JSON document. Returns <code>NULL</code> if the argument is <code>NULL</code> . An error occurs if the argument is not a valid JSON document.\nAn empty array, empty object, or scalar value has depth 1. A nonempty array containing only elements of depth 1 or nonempty object containing only member values of depth 1 has depth 2. Otherwise, a JSON document has depth greater than 2.",
        "Demo": [
            "mysql> SELECT JSON_DEPTH('{}'), JSON_DEPTH('[]'), JSON_DEPTH('true');\n+------------------+------------------+--------------------+\n| JSON_DEPTH('{}') | JSON_DEPTH('[]') | JSON_DEPTH('true') |\n+------------------+------------------+--------------------+\n| 1 | 1 | 1 |\n+------------------+------------------+--------------------+\nmysql> SELECT JSON_DEPTH('[10, 20]'), JSON_DEPTH('[[], {}]');\n+------------------------+------------------------+\n| JSON_DEPTH('[10, 20]') | JSON_DEPTH('[[], {}]') |\n+------------------------+------------------------+\n| 2 | 2 |\n+------------------------+------------------------+\nmysql> SELECT JSON_DEPTH('[10, {\"a\": 20}]');\n+-------------------------------+\n| JSON_DEPTH('[10, {\"a\": 20}]') |\n+-------------------------------+\n| 3 |\n+-------------------------------+"
        ]
    },
    {
        "Name": "JSON_EXTRACT",
        "Tree": "(functionCall (scalarFunctionName (functionNameBase JSON_EXTRACT)) ( ))",
        "Description": [
            "Return data from JSON document"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/json-search-functions.html#function_json-extract"
        ],
        "Detail": "<link><code>JSON_EXTRACT( json_doc , path [, path ] ...)</code>&LINK&https://dev.mysql.com/doc/refman/8.4/json-search-functions.html#function_json-extract</link>\nReturns data from a JSON document, selected from the parts of the document matched by the <code>path</code> arguments. Returns <code>NULL</code> if any argument is <code>NULL</code> or no paths locate a value in the document. An error occurs if the <code>json_doc</code> argument is not a valid JSON document or any <code>path</code> argument is not a valid path expression.\nThe return value consists of all values matched by the <code>path</code> arguments. If it is possible that those arguments could return multiple values, the matched values are autowrapped as an array, in the order corresponding to the paths that produced them. Otherwise, the return value is the single matched value.\nMySQL supports the <link><code>-></code>&LINK&https://dev.mysql.com/doc/refman/8.4/json-search-functions.html#operator_json-column-path</link> operator as shorthand for this function as used with 2 arguments where the left hand side is a <link><code>JSON</code>&LINK&https://dev.mysql.com/doc/refman/8.4/json.html</link> column identifier (not an expression) and the right hand side is the JSON path to be matched within the column.",
        "Demo": [
            "mysql> SELECT JSON_EXTRACT('[10, 20, [30, 40]]', '$[1]');\n+--------------------------------------------+\n| JSON_EXTRACT('[10, 20, [30, 40]]', '$[1]') |\n+--------------------------------------------+\n| 20 |\n+--------------------------------------------+\nmysql> SELECT JSON_EXTRACT('[10, 20, [30, 40]]', '$[1]', '$[0]');\n+----------------------------------------------------+\n| JSON_EXTRACT('[10, 20, [30, 40]]', '$[1]', '$[0]') |\n+----------------------------------------------------+\n| [20, 10] |\n+----------------------------------------------------+\nmysql> SELECT JSON_EXTRACT('[10, 20, [30, 40]]', '$[2][*]');\n+-----------------------------------------------+\n| JSON_EXTRACT('[10, 20, [30, 40]]', '$[2][*]') |\n+-----------------------------------------------+\n| [30, 40] |\n+-----------------------------------------------+"
        ]
    },
    {
        "Name": "JSON_INSERT",
        "Tree": "(functionCall (scalarFunctionName (functionNameBase JSON_INSERT)) ( ))",
        "Description": [
            "Insert data into JSON document"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/json-modification-functions.html#function_json-insert"
        ],
        "Detail": "<link><code>JSON_INSERT( json_doc , path , val [, path , val ] ...)</code>&LINK&https://dev.mysql.com/doc/refman/8.4/json-modification-functions.html#function_json-insert</link>\nInserts data into a JSON document and returns the result. Returns <code>NULL</code> if any argument is <code>NULL</code> . An error occurs if the <code>json_doc</code> argument is not a valid JSON document or any <code>path</code> argument is not a valid path expression or contains a <code>*</code> or <code>**</code> wildcard.\nThe path-value pairs are evaluated left to right. The document produced by evaluating one pair becomes the new value against which the next pair is evaluated.\nA path-value pair for an existing path in the document is ignored and does not overwrite the existing document value. A path-value pair for a nonexisting path in the document adds the value to the document if the path identifies one of these types of values:\nA member not present in an existing object. The member is added to the object and associated with the new value.\nA position past the end of an existing array. The array is extended with the new value. If the existing value is not an array, it is autowrapped as an array, then extended with the new value.\nOtherwise, a path-value pair for a nonexisting path in the document is ignored and has no effect.\nFor a comparison of <link><code>JSON_INSERT()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/json-modification-functions.html#function_json-insert</link> , <link><code>JSON_REPLACE()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/json-modification-functions.html#function_json-replace</link> , and <link><code>JSON_SET()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/json-modification-functions.html#function_json-set</link> , see the discussion of <link><code>JSON_SET()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/json-modification-functions.html#function_json-set</link> .\nThe third and final value listed in the result is a quoted string and not an array like the second one (which is not quoted in the output); no casting of values to the JSON type is performed. To insert the array as an array, you must perform such casts explicitly, as shown here:",
        "Demo": [
            "mysql> SET @j = '{ \"a\": 1, \"b\": [2, 3]}';\nmysql> SELECT JSON_INSERT(@j, '$.a', 10, '$.c', '[true, false]');\n+----------------------------------------------------+\n| JSON_INSERT(@j, '$.a', 10, '$.c', '[true, false]') |\n+----------------------------------------------------+\n| {\"a\": 1, \"b\": [2, 3], \"c\": \"[true, false]\"} |\n+----------------------------------------------------+",
            "mysql> SELECT JSON_INSERT(@j, '$.a', 10, '$.c', CAST('[true, false]' AS JSON));\n+------------------------------------------------------------------+\n| JSON_INSERT(@j, '$.a', 10, '$.c', CAST('[true, false]' AS JSON)) |\n+------------------------------------------------------------------+\n| {\"a\": 1, \"b\": [2, 3], \"c\": [true, false]} |\n+------------------------------------------------------------------+\n1 row in set (0.00 sec)"
        ]
    },
    {
        "Name": "JSON_KEYS",
        "Tree": "(functionCall (scalarFunctionName (functionNameBase JSON_KEYS)) ( ))",
        "Description": [
            "Array of keys from JSON document"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/json-search-functions.html#function_json-keys"
        ],
        "Detail": "<link><code>JSON_KEYS( json_doc [, path ])</code>&LINK&https://dev.mysql.com/doc/refman/8.4/json-search-functions.html#function_json-keys</link>\nReturns the keys from the top-level value of a JSON object as a JSON array, or, if a <code>path</code> argument is given, the top-level keys from the selected path. Returns <code>NULL</code> if any argument is <code>NULL</code> , the <code>json_doc</code> argument is not an object, or <code>path</code> , if given, does not locate an object. An error occurs if the <code>json_doc</code> argument is not a valid JSON document or the <code>path</code> argument is not a valid path expression or contains a <code>*</code> or <code>**</code> wildcard.\nThe result array is empty if the selected object is empty. If the top-level value has nested subobjects, the return value does not include keys from those subobjects.",
        "Demo": [
            "mysql> SELECT JSON_KEYS('{\"a\": 1, \"b\": {\"c\": 30}}');\n+---------------------------------------+\n| JSON_KEYS('{\"a\": 1, \"b\": {\"c\": 30}}') |\n+---------------------------------------+\n| [\"a\", \"b\"] |\n+---------------------------------------+\nmysql> SELECT JSON_KEYS('{\"a\": 1, \"b\": {\"c\": 30}}', '$.b');\n+----------------------------------------------+\n| JSON_KEYS('{\"a\": 1, \"b\": {\"c\": 30}}', '$.b') |\n+----------------------------------------------+\n| [\"c\"] |\n+----------------------------------------------+"
        ]
    },
    {
        "Name": "JSON_LENGTH",
        "Tree": "(functionCall (scalarFunctionName (functionNameBase JSON_LENGTH)) ( ))",
        "Description": [
            "Number of elements in JSON document"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/json-attribute-functions.html#function_json-length"
        ],
        "Detail": "<link><code>JSON_LENGTH( json_doc [, path ])</code>&LINK&https://dev.mysql.com/doc/refman/8.4/json-attribute-functions.html#function_json-length</link>\nReturns the length of a JSON document, or, if a <code>path</code> argument is given, the length of the value within the document identified by the path. Returns <code>NULL</code> if any argument is <code>NULL</code> or the <code>path</code> argument does not identify a value in the document. An error occurs if the <code>json_doc</code> argument is not a valid JSON document or the <code>path</code> argument is not a valid path expression.\nThe length of a document is determined as follows:\nThe length of a scalar is 1.\nThe length of an array is the number of array elements.\nThe length of an object is the number of object members.\nThe length does not count the length of nested arrays or objects.",
        "Demo": [
            "mysql> SELECT JSON_LENGTH('[1, 2, {\"a\": 3}]');\n+---------------------------------+\n| JSON_LENGTH('[1, 2, {\"a\": 3}]') |\n+---------------------------------+\n| 3 |\n+---------------------------------+\nmysql> SELECT JSON_LENGTH('{\"a\": 1, \"b\": {\"c\": 30}}');\n+-----------------------------------------+\n| JSON_LENGTH('{\"a\": 1, \"b\": {\"c\": 30}}') |\n+-----------------------------------------+\n| 2 |\n+-----------------------------------------+\nmysql> SELECT JSON_LENGTH('{\"a\": 1, \"b\": {\"c\": 30}}', '$.b');\n+------------------------------------------------+\n| JSON_LENGTH('{\"a\": 1, \"b\": {\"c\": 30}}', '$.b') |\n+------------------------------------------------+\n| 1 |\n+------------------------------------------------+"
        ]
    },
    {
        "Name": "JSON_MERGE",
        "Tree": "(functionCall (scalarFunctionName (functionNameBase JSON_MERGE)) ( ))",
        "Description": [
            "Merge JSON documents, preserving duplicate keys. Deprecated\n      synonym for JSON_MERGE_PRESERVE()"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/json-modification-functions.html#function_json-merge"
        ],
        "Detail": "<link><code>JSON_MERGE( json_doc , json_doc [, json_doc ] ...)</code>&LINK&https://dev.mysql.com/doc/refman/8.4/json-modification-functions.html#function_json-merge</link>\nDeprecated synonym for <code>JSON_MERGE_PRESERVE()</code> .",
        "Demo": []
    },
    {
        "Name": "JSON_MERGE_PATCH",
        "Tree": "(functionCall (scalarFunctionName (functionNameBase JSON_MERGE_PATCH)) ( ))",
        "Description": [
            "Merge JSON documents, replacing values of duplicate keys"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/json-modification-functions.html#function_json-merge-patch"
        ],
        "Detail": "<link><code>JSON_MERGE_PATCH( json_doc , json_doc [, json_doc ] ...)</code>&LINK&https://dev.mysql.com/doc/refman/8.4/json-modification-functions.html#function_json-merge-patch</link>\nPerforms an <link>RFC 7396&LINK&https://tools.ietf.org/html/rfc7396</link> compliant merge of two or more JSON documents and returns the merged result, without preserving members having duplicate keys. Raises an error if at least one of the documents passed as arguments to this function is not valid.\nNote\nFor an explanation and example of the differences between this function and <code>JSON_MERGE_PRESERVE()</code> , see <link>JSON_MERGE_PATCH() compared with JSON_MERGE_PRESERVE()&LINK&https://dev.mysql.com/doc/refman/8.4/json-modification-functions.html#json-merge-patch-json-merge-preserve-compared</link> .\n<code>JSON_MERGE_PATCH()</code> performs a merge as follows:\nIf the first argument is not an object, the result of the merge is the same as if an empty object had been merged with the second argument.\nIf the second argument is not an object, the result of the merge is the second argument.\nIf both arguments are objects, the result of the merge is an object with the following members:\nAll members of the first object which do not have a corresponding member with the same key in the second object.\nAll members of the second object which do not have a corresponding key in the first object, and whose value is not the JSON <code>null</code> literal.\nAll members with a key that exists in both the first and the second object, and whose value in the second object is not the JSON <code>null</code> literal. The values of these members are the results of recursively merging the value in the first object with the value in the second object.\nFor additional information, see <link>Normalization, Merging, and Autowrapping of JSON Values&LINK&https://dev.mysql.com/doc/refman/8.4/json.html#json-normalization</link> .\nYou can use this function to remove a member by specifying <code>null</code> as the value of the same member in the second argument, as shown here:\nThis example shows that the function operates in a recursive fashion; that is, values of members are not limited to scalars, but rather can themselves be JSON documents:\nJSON_MERGE_PATCH() compared with JSON_MERGE_PRESERVE(). The behavior of <code>JSON_MERGE_PATCH()</code> is the same as that of <link><code>JSON_MERGE_PRESERVE()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/json-modification-functions.html#function_json-merge-preserve</link> , with the following two exceptions:\n<code>JSON_MERGE_PATCH()</code> removes any member in the first object with a matching key in the second object, provided that the value associated with the key in the second object is not JSON <code>null</code> .\nIf the second object has a member with a key matching a member in the first object, <code>JSON_MERGE_PATCH()</code> replaces the value in the first object with the value in the second object, whereas <code>JSON_MERGE_PRESERVE()</code> appends the second value to the first value.\nThis example compares the results of merging the same 3 JSON objects, each having a matching key <code>\"a\"</code> , with each of these two functions:",
        "Demo": [
            "mysql> SELECT JSON_MERGE_PATCH('[1, 2]', '[true, false]');\n+---------------------------------------------+\n| JSON_MERGE_PATCH('[1, 2]', '[true, false]') |\n+---------------------------------------------+\n| [true, false] |\n+---------------------------------------------+\nmysql> SELECT JSON_MERGE_PATCH('{\"name\": \"x\"}', '{\"id\": 47}');\n+-------------------------------------------------+\n| JSON_MERGE_PATCH('{\"name\": \"x\"}', '{\"id\": 47}') |\n+-------------------------------------------------+\n| {\"id\": 47, \"name\": \"x\"} |\n+-------------------------------------------------+\nmysql> SELECT JSON_MERGE_PATCH('1', 'true');\n+-------------------------------+\n| JSON_MERGE_PATCH('1', 'true') |\n+-------------------------------+\n| true |\n+-------------------------------+\nmysql> SELECT JSON_MERGE_PATCH('[1, 2]', '{\"id\": 47}');\n+------------------------------------------+\n| JSON_MERGE_PATCH('[1, 2]', '{\"id\": 47}') |\n+------------------------------------------+\n| {\"id\": 47} |\n+------------------------------------------+\nmysql> SELECT JSON_MERGE_PATCH('{ \"a\": 1, \"b\":2 }',\n> '{ \"a\": 3, \"c\":4 }');\n+-----------------------------------------------------------+\n| JSON_MERGE_PATCH('{ \"a\": 1, \"b\":2 }','{ \"a\": 3, \"c\":4 }') |\n+-----------------------------------------------------------+\n| {\"a\": 3, \"b\": 2, \"c\": 4} |\n+-----------------------------------------------------------+\nmysql> SELECT JSON_MERGE_PATCH('{ \"a\": 1, \"b\":2 }','{ \"a\": 3, \"c\":4 }',\n> '{ \"a\": 5, \"d\":6 }');\n+-------------------------------------------------------------------------------+\n| JSON_MERGE_PATCH('{ \"a\": 1, \"b\":2 }','{ \"a\": 3, \"c\":4 }','{ \"a\": 5, \"d\":6 }') |\n+-------------------------------------------------------------------------------+\n| {\"a\": 5, \"b\": 2, \"c\": 4, \"d\": 6} |\n+-------------------------------------------------------------------------------+",
            "mysql> SELECT JSON_MERGE_PATCH('{\"a\":1, \"b\":2}', '{\"b\":null}');\n+--------------------------------------------------+\n| JSON_MERGE_PATCH('{\"a\":1, \"b\":2}', '{\"b\":null}') |\n+--------------------------------------------------+\n| {\"a\": 1} |\n+--------------------------------------------------+",
            "mysql> SELECT JSON_MERGE_PATCH('{\"a\":{\"x\":1}}', '{\"a\":{\"y\":2}}');\n+----------------------------------------------------+\n| JSON_MERGE_PATCH('{\"a\":{\"x\":1}}', '{\"a\":{\"y\":2}}') |\n+----------------------------------------------------+\n| {\"a\": {\"x\": 1, \"y\": 2}} |\n+----------------------------------------------------+",
            "mysql> SET @x = '{ \"a\": 1, \"b\": 2 }',\n> @y = '{ \"a\": 3, \"c\": 4 }',\n> @z = '{ \"a\": 5, \"d\": 6 }';\nmysql> SELECT JSON_MERGE_PATCH(@x, @y, @z) AS Patch,\n-> JSON_MERGE_PRESERVE(@x, @y, @z) AS Preserve\\G\n*************************** 1. row ***************************\nPatch: {\"a\": 5, \"b\": 2, \"c\": 4, \"d\": 6}\nPreserve: {\"a\": [1, 3, 5], \"b\": 2, \"c\": 4, \"d\": 6}"
        ]
    },
    {
        "Name": "JSON_MERGE_PRESERVE",
        "Tree": "(functionCall (scalarFunctionName (functionNameBase JSON_MERGE_PRESERVE)) ( ))",
        "Description": [
            "Merge JSON documents, preserving duplicate keys"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/json-modification-functions.html#function_json-merge-preserve"
        ],
        "Detail": "<link><code>JSON_MERGE_PRESERVE( json_doc , json_doc [, json_doc ] ...)</code>&LINK&https://dev.mysql.com/doc/refman/8.4/json-modification-functions.html#function_json-merge-preserve</link>\nMerges two or more JSON documents and returns the merged result. Returns <code>NULL</code> if any argument is <code>NULL</code> . An error occurs if any argument is not a valid JSON document.\nMerging takes place according to the following rules. For additional information, see <link>Normalization, Merging, and Autowrapping of JSON Values&LINK&https://dev.mysql.com/doc/refman/8.4/json.html#json-normalization</link> .\nAdjacent arrays are merged to a single array.\nAdjacent objects are merged to a single object.\nA scalar value is autowrapped as an array and merged as an array.\nAn adjacent array and object are merged by autowrapping the object as an array and merging the two arrays.\nThis function is similar to but differs from <link><code>JSON_MERGE_PATCH()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/json-modification-functions.html#function_json-merge-patch</link> in significant respects; see <link>JSON_MERGE_PATCH() compared with JSON_MERGE_PRESERVE()&LINK&https://dev.mysql.com/doc/refman/8.4/json-modification-functions.html#json-merge-patch-json-merge-preserve-compared</link> , for more information.",
        "Demo": [
            "mysql> SELECT JSON_MERGE_PRESERVE('[1, 2]', '[true, false]');\n+------------------------------------------------+\n| JSON_MERGE_PRESERVE('[1, 2]', '[true, false]') |\n+------------------------------------------------+\n| [1, 2, true, false] |\n+------------------------------------------------+\nmysql> SELECT JSON_MERGE_PRESERVE('{\"name\": \"x\"}', '{\"id\": 47}');\n+----------------------------------------------------+\n| JSON_MERGE_PRESERVE('{\"name\": \"x\"}', '{\"id\": 47}') |\n+----------------------------------------------------+\n| {\"id\": 47, \"name\": \"x\"} |\n+----------------------------------------------------+\nmysql> SELECT JSON_MERGE_PRESERVE('1', 'true');\n+----------------------------------+\n| JSON_MERGE_PRESERVE('1', 'true') |\n+----------------------------------+\n| [1, true] |\n+----------------------------------+\nmysql> SELECT JSON_MERGE_PRESERVE('[1, 2]', '{\"id\": 47}');\n+---------------------------------------------+\n| JSON_MERGE_PRESERVE('[1, 2]', '{\"id\": 47}') |\n+---------------------------------------------+\n| [1, 2, {\"id\": 47}] |\n+---------------------------------------------+\nmysql> SELECT JSON_MERGE_PRESERVE('{ \"a\": 1, \"b\": 2 }',\n> '{ \"a\": 3, \"c\": 4 }');\n+--------------------------------------------------------------+\n| JSON_MERGE_PRESERVE('{ \"a\": 1, \"b\": 2 }','{ \"a\": 3, \"c\":4 }') |\n+--------------------------------------------------------------+\n| {\"a\": [1, 3], \"b\": 2, \"c\": 4} |\n+--------------------------------------------------------------+\nmysql> SELECT JSON_MERGE_PRESERVE('{ \"a\": 1, \"b\": 2 }','{ \"a\": 3, \"c\": 4 }',\n> '{ \"a\": 5, \"d\": 6 }');\n+----------------------------------------------------------------------------------+\n| JSON_MERGE_PRESERVE('{ \"a\": 1, \"b\": 2 }','{ \"a\": 3, \"c\": 4 }','{ \"a\": 5, \"d\": 6 }') |\n+----------------------------------------------------------------------------------+\n| {\"a\": [1, 3, 5], \"b\": 2, \"c\": 4, \"d\": 6} |\n+----------------------------------------------------------------------------------+"
        ]
    },
    {
        "Name": "JSON_OBJECT",
        "Tree": "(functionCall (scalarFunctionName (functionNameBase JSON_OBJECT)) ( ))",
        "Description": [
            "Create JSON object"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/json-creation-functions.html#function_json-object"
        ],
        "Detail": "<link><code>JSON_OBJECT([ key , val [, key , val ] ...])</code>&LINK&https://dev.mysql.com/doc/refman/8.4/json-creation-functions.html#function_json-object</link>\nEvaluates a (possibly empty) list of key-value pairs and returns a JSON object containing those pairs. An error occurs if any key name is <code>NULL</code> or the number of arguments is odd.",
        "Demo": [
            "mysql> SELECT JSON_OBJECT('id', 87, 'name', 'carrot');\n+-----------------------------------------+\n| JSON_OBJECT('id', 87, 'name', 'carrot') |\n+-----------------------------------------+\n| {\"id\": 87, \"name\": \"carrot\"} |\n+-----------------------------------------+"
        ]
    },
    {
        "Name": "JSON_OBJECTAGG",
        "Tree": "(functionCall (scalarFunctionName (functionNameBase JSON_OBJECTAGG)) ( ))",
        "Description": [
            "Return result set as a single JSON object"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/aggregate-functions.html#function_json-objectagg"
        ],
        "Detail": "<link><code>JSON_OBJECTAGG( key , value ) [ over_clause ]</code>&LINK&https://dev.mysql.com/doc/refman/8.4/aggregate-functions.html#function_json-objectagg</link>\nTakes two column names or expressions as arguments, the first of these being used as a key and the second as a value, and returns a JSON object containing key-value pairs. Returns <code>NULL</code> if the result contains no rows, or in the event of an error. An error occurs if any key name is <code>NULL</code> or the number of arguments is not equal to 2.\nThis function executes as a window function if <code>over_clause</code> is present. <code>over_clause</code> is as described in <link>Section 14.20.2, \"Window Function Concepts and Syntax\"&LINK&https://dev.mysql.com/doc/refman/8.4/window-functions-usage.html</link> .\nDuplicate key handling. When the result of this function is normalized, values having duplicate keys are discarded. In keeping with the MySQL <link><code>JSON</code>&LINK&https://dev.mysql.com/doc/refman/8.4/json.html</link> data type specification that does not permit duplicate keys, only the last value encountered is used with that key in the returned object ( \" last duplicate key wins \" ). This means that the result of using this function on columns from a <code>SELECT</code> can depend on the order in which the rows are returned, which is not guaranteed.\nWhen used as a window function, if there are duplicate keys within a frame, only the last value for the key is present in the result. The value for the key from the last row in the frame is deterministic if the <code>ORDER BY</code> specification guarantees that the values have a specific order. If not, the resulting value of the key is nondeterministic.\nConsider the following:\nThe key chosen from the last query is nondeterministic. If the query does not use <code>GROUP BY</code> (which usually imposes its own ordering regardless) and you prefer a particular key ordering, you can invoke <code>JSON_OBJECTAGG()</code> as a window function by including an <code>OVER</code> clause with an <code>ORDER BY</code> specification to impose a particular order on frame rows. The following examples show what happens with and without <code>ORDER BY</code> for a few different frame specifications.\nWithout <code>ORDER BY</code> , the frame is the entire partition:\nWith <code>ORDER BY</code> , where the frame is the default of <code>RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW</code> (in both ascending and descending order):\nWith <code>ORDER BY</code> and an explicit frame of the entire partition:\nTo return a particular key value (such as the smallest or largest), include a <code>LIMIT</code> clause in the appropriate query. For example:\nSee <link>Normalization, Merging, and Autowrapping of JSON Values&LINK&https://dev.mysql.com/doc/refman/8.4/json.html#json-normalization</link> , for additional information and examples.",
        "Demo": [
            "mysql> SELECT o_id, attribute, value FROM t3;\n+------+-----------+-------+\n| o_id | attribute | value |\n+------+-----------+-------+\n| 2 | color | red |\n| 2 | fabric | silk |\n| 3 | color | green |\n| 3 | shape | square|\n+------+-----------+-------+\n4 rows in set (0.00 sec)\nmysql> SELECT o_id, JSON_OBJECTAGG(attribute, value)\n-> FROM t3 GROUP BY o_id;\n+------+---------------------------------------+\n| o_id | JSON_OBJECTAGG(attribute, value) |\n+------+---------------------------------------+\n| 2 | {\"color\": \"red\", \"fabric\": \"silk\"} |\n| 3 | {\"color\": \"green\", \"shape\": \"square\"} |\n+------+---------------------------------------+\n2 rows in set (0.00 sec)",
            "mysql> CREATE TABLE t(c VARCHAR(10), i INT);\nQuery OK, 0 rows affected (0.33 sec)\nmysql> INSERT INTO t VALUES ('key', 3), ('key', 4), ('key', 5);\nQuery OK, 3 rows affected (0.10 sec)\nRecords: 3 Duplicates: 0 Warnings: 0\nmysql> SELECT c, i FROM t;\n+------+------+\n| c | i |\n+------+------+\n| key | 3 |\n| key | 4 |\n| key | 5 |\n+------+------+\n3 rows in set (0.00 sec)\nmysql> SELECT JSON_OBJECTAGG(c, i) FROM t;\n+----------------------+\n| JSON_OBJECTAGG(c, i) |\n+----------------------+\n| {\"key\": 5} |\n+----------------------+\n1 row in set (0.00 sec)\nmysql> DELETE FROM t;\nQuery OK, 3 rows affected (0.08 sec)\nmysql> INSERT INTO t VALUES ('key', 3), ('key', 5), ('key', 4);\nQuery OK, 3 rows affected (0.06 sec)\nRecords: 3 Duplicates: 0 Warnings: 0\nmysql> SELECT c, i FROM t;\n+------+------+\n| c | i |\n+------+------+\n| key | 3 |\n| key | 5 |\n| key | 4 |\n+------+------+\n3 rows in set (0.00 sec)\nmysql> SELECT JSON_OBJECTAGG(c, i) FROM t;\n+----------------------+\n| JSON_OBJECTAGG(c, i) |\n+----------------------+\n| {\"key\": 4} |\n+----------------------+\n1 row in set (0.00 sec)",
            "mysql> SELECT JSON_OBJECTAGG(c, i)\nOVER () AS json_object FROM t;\n+-------------+\n| json_object |\n+-------------+\n| {\"key\": 4} |\n| {\"key\": 4} |\n| {\"key\": 4} |\n+-------------+",
            "mysql> SELECT JSON_OBJECTAGG(c, i)\nOVER (ORDER BY i) AS json_object FROM t;\n+-------------+\n| json_object |\n+-------------+\n| {\"key\": 3} |\n| {\"key\": 4} |\n| {\"key\": 5} |\n+-------------+\nmysql> SELECT JSON_OBJECTAGG(c, i)\nOVER (ORDER BY i DESC) AS json_object FROM t;\n+-------------+\n| json_object |\n+-------------+\n| {\"key\": 5} |\n| {\"key\": 4} |\n| {\"key\": 3} |\n+-------------+",
            "mysql> SELECT JSON_OBJECTAGG(c, i)\nOVER (ORDER BY i\nROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)\nAS json_object\nFROM t;\n+-------------+\n| json_object |\n+-------------+\n| {\"key\": 5} |\n| {\"key\": 5} |\n| {\"key\": 5} |\n+-------------+",
            "mysql> SELECT JSON_OBJECTAGG(c, i)\nOVER (ORDER BY i) AS json_object FROM t LIMIT 1;\n+-------------+\n| json_object |\n+-------------+\n| {\"key\": 3} |\n+-------------+\nmysql> SELECT JSON_OBJECTAGG(c, i)\nOVER (ORDER BY i DESC) AS json_object FROM t LIMIT 1;\n+-------------+\n| json_object |\n+-------------+\n| {\"key\": 5} |\n+-------------+"
        ]
    },
    {
        "Name": "JSON_OVERLAPS",
        "Tree": "(functionCall (scalarFunctionName (functionNameBase JSON_OVERLAPS)) ( ))",
        "Description": [
            "Compares two JSON documents, returns TRUE (1) if these have any\n      key-value pairs or array elements in common, otherwise FALSE (0)"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/json-search-functions.html#function_json-overlaps"
        ],
        "Detail": "<link><code>JSON_OVERLAPS( json_doc1 , json_doc2 )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/json-search-functions.html#function_json-overlaps</link>\nCompares two JSON documents. Returns true (1) if the two document have any key-value pairs or array elements in common. If both arguments are scalars, the function performs a simple equality test. If either argument is <code>NULL</code> , the function returns <code>NULL</code> .\nThis function serves as counterpart to <link><code>JSON_CONTAINS()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/json-search-functions.html#function_json-contains</link> , which requires all elements of the array searched for to be present in the array searched in. Thus, <code>JSON_CONTAINS()</code> performs an <code>AND</code> operation on search keys, while <code>JSON_OVERLAPS()</code> performs an <code>OR</code> operation.\nQueries on JSON columns of <link><code>InnoDB</code>&LINK&https://dev.mysql.com/doc/refman/8.4/innodb-storage-engine.html</link> tables using <code>JSON_OVERLAPS()</code> in the <code>WHERE</code> clause can be optimized using multi-valued indexes. <link>Multi-Valued Indexes&LINK&https://dev.mysql.com/doc/refman/8.4/create-index.html#create-index-multi-valued</link> , provides detailed information and examples.\nWhen comparing two arrays, <code>JSON_OVERLAPS()</code> returns true if they share one or more array elements in common, and false if they do not:\nPartial matches are treated as no match, as shown here:\nWhen comparing objects, the result is true if they have at least one key-value pair in common.\nIf two scalars are used as the arguments to the function, <code>JSON_OVERLAPS()</code> performs a simple test for equality:\nWhen comparing a scalar with an array, <code>JSON_OVERLAPS()</code> attempts to treat the scalar as an array element. In this example, the second argument <code>6</code> is interpreted as <code>[6]</code> , as shown here:\nThe function does not perform type conversions:",
        "Demo": [
            "mysql> SELECT JSON_OVERLAPS(\"[1,3,5,7]\", \"[2,5,7]\");\n+---------------------------------------+\n| JSON_OVERLAPS(\"[1,3,5,7]\", \"[2,5,7]\") |\n+---------------------------------------+\n| 1 |\n+---------------------------------------+\n1 row in set (0.00 sec)\nmysql> SELECT JSON_OVERLAPS(\"[1,3,5,7]\", \"[2,6,7]\");\n+---------------------------------------+\n| JSON_OVERLAPS(\"[1,3,5,7]\", \"[2,6,7]\") |\n+---------------------------------------+\n| 1 |\n+---------------------------------------+\n1 row in set (0.00 sec)\nmysql> SELECT JSON_OVERLAPS(\"[1,3,5,7]\", \"[2,6,8]\");\n+---------------------------------------+\n| JSON_OVERLAPS(\"[1,3,5,7]\", \"[2,6,8]\") |\n+---------------------------------------+\n| 0 |\n+---------------------------------------+\n1 row in set (0.00 sec)",
            "mysql> SELECT JSON_OVERLAPS('[[1,2],[3,4],5]', '[1,[2,3],[4,5]]');\n+-----------------------------------------------------+\n| JSON_OVERLAPS('[[1,2],[3,4],5]', '[1,[2,3],[4,5]]') |\n+-----------------------------------------------------+\n| 0 |\n+-----------------------------------------------------+\n1 row in set (0.00 sec)",
            "mysql> SELECT JSON_OVERLAPS('{\"a\":1,\"b\":10,\"d\":10}', '{\"c\":1,\"e\":10,\"f\":1,\"d\":10}');\n+-----------------------------------------------------------------------+\n| JSON_OVERLAPS('{\"a\":1,\"b\":10,\"d\":10}', '{\"c\":1,\"e\":10,\"f\":1,\"d\":10}') |\n+-----------------------------------------------------------------------+\n| 1 |\n+-----------------------------------------------------------------------+\n1 row in set (0.00 sec)\nmysql> SELECT JSON_OVERLAPS('{\"a\":1,\"b\":10,\"d\":10}', '{\"a\":5,\"e\":10,\"f\":1,\"d\":20}');\n+-----------------------------------------------------------------------+\n| JSON_OVERLAPS('{\"a\":1,\"b\":10,\"d\":10}', '{\"a\":5,\"e\":10,\"f\":1,\"d\":20}') |\n+-----------------------------------------------------------------------+\n| 0 |\n+-----------------------------------------------------------------------+\n1 row in set (0.00 sec)",
            "mysql> SELECT JSON_OVERLAPS('5', '5');\n+-------------------------+\n| JSON_OVERLAPS('5', '5') |\n+-------------------------+\n| 1 |\n+-------------------------+\n1 row in set (0.00 sec)\nmysql> SELECT JSON_OVERLAPS('5', '6');\n+-------------------------+\n| JSON_OVERLAPS('5', '6') |\n+-------------------------+\n| 0 |\n+-------------------------+\n1 row in set (0.00 sec)",
            "mysql> SELECT JSON_OVERLAPS('[4,5,6,7]', '6');\n+---------------------------------+\n| JSON_OVERLAPS('[4,5,6,7]', '6') |\n+---------------------------------+\n| 1 |\n+---------------------------------+\n1 row in set (0.00 sec)",
            "mysql> SELECT JSON_OVERLAPS('[4,5,\"6\",7]', '6');\n+-----------------------------------+\n| JSON_OVERLAPS('[4,5,\"6\",7]', '6') |\n+-----------------------------------+\n| 0 |\n+-----------------------------------+\n1 row in set (0.00 sec)\nmysql> SELECT JSON_OVERLAPS('[4,5,6,7]', '\"6\"');\n+-----------------------------------+\n| JSON_OVERLAPS('[4,5,6,7]', '\"6\"') |\n+-----------------------------------+\n| 0 |\n+-----------------------------------+\n1 row in set (0.00 sec)"
        ]
    },
    {
        "Name": "JSON_PRETTY",
        "Tree": "(functionCall (scalarFunctionName (functionNameBase JSON_PRETTY)) ( ))",
        "Description": [
            "Print a JSON document in human-readable format"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/json-utility-functions.html#function_json-pretty"
        ],
        "Detail": "<link><code>JSON_PRETTY( json_val )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/json-utility-functions.html#function_json-pretty</link>\nProvides pretty-printing of JSON values similar to that implemented in PHP and by other languages and database systems. The value supplied must be a JSON value or a valid string representation of a JSON value. Extraneous whitespaces and newlines present in this value have no effect on the output. For a <code>NULL</code> value, the function returns <code>NULL</code> . If the value is not a JSON document, or if it cannot be parsed as one, the function fails with an error.\nFormatting of the output from this function adheres to the following rules:\nEach array element or object member appears on a separate line, indented by one additional level as compared to its parent.\nEach level of indentation adds two leading spaces.\nA comma separating individual array elements or object members is printed before the newline that separates the two elements or members.\nThe key and the value of an object member are separated by a colon followed by a space (' <code>:</code> ').\nAn empty object or array is printed on a single line. No space is printed between the opening and closing brace.\nSpecial characters in string scalars and key names are escaped employing the same rules used by the <link><code>JSON_QUOTE()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/json-creation-functions.html#function_json-quote</link> function.",
        "Demo": [
            "mysql> SELECT JSON_PRETTY('123'); # scalar\n+--------------------+\n| JSON_PRETTY('123') |\n+--------------------+\n| 123 |\n+--------------------+\nmysql> SELECT JSON_PRETTY(\"[1,3,5]\"); # array\n+------------------------+\n| JSON_PRETTY(\"[1,3,5]\") |\n+------------------------+\n| [\n1,\n3,\n5\n] |\n+------------------------+\nmysql> SELECT JSON_PRETTY('{\"a\":\"10\",\"b\":\"15\",\"x\":\"25\"}'); # object\n+---------------------------------------------+\n| JSON_PRETTY('{\"a\":\"10\",\"b\":\"15\",\"x\":\"25\"}') |\n+---------------------------------------------+\n| {\n\"a\": \"10\",\n\"b\": \"15\",\n\"x\": \"25\"\n} |\n+---------------------------------------------+\nmysql> SELECT JSON_PRETTY('[\"a\",1,{\"key1\":\n'> \"value1\"},\"5\", \"77\" ,\n'> {\"key2\":[\"value3\",\"valueX\",\n'> \"valueY\"]},\"j\", \"2\" ]')\\G # nested arrays and objects\n*************************** 1. row ***************************\nJSON_PRETTY('[\"a\",1,{\"key1\":\n\"value1\"},\"5\", \"77\" ,\n{\"key2\":[\"value3\",\"valuex\",\n\"valuey\"]},\"j\", \"2\" ]'): [\n\"a\",\n1,\n{\n\"key1\": \"value1\"\n},\n\"5\",\n\"77\",\n{\n\"key2\": [\n\"value3\",\n\"valuex\",\n\"valuey\"\n]\n},\n\"j\",\n\"2\"\n]"
        ]
    },
    {
        "Name": "JSON_QUOTE",
        "Tree": "(functionCall (scalarFunctionName (functionNameBase JSON_QUOTE)) ( ))",
        "Description": [
            "Quote JSON document"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/json-creation-functions.html#function_json-quote"
        ],
        "Detail": "<link><code>JSON_QUOTE( string )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/json-creation-functions.html#function_json-quote</link>\nQuotes a string as a JSON value by wrapping it with double quote characters and escaping interior quote and other characters, then returning the result as a <code>utf8mb4</code> string. Returns <code>NULL</code> if the argument is <code>NULL</code> .\nThis function is typically used to produce a valid JSON string literal for inclusion within a JSON document.\nCertain special characters are escaped with backslashes per the escape sequences shown in <link>Table 14.23, \"JSON_UNQUOTE() Special Character Escape Sequences\"&LINK&https://dev.mysql.com/doc/refman/8.4/json-modification-functions.html#json-unquote-character-escape-sequences</link> .",
        "Demo": [
            "mysql> SELECT JSON_QUOTE('null'), JSON_QUOTE('\"null\"');\n+--------------------+----------------------+\n| JSON_QUOTE('null') | JSON_QUOTE('\"null\"') |\n+--------------------+----------------------+\n| \"null\" | \"\\\"null\\\"\" |\n+--------------------+----------------------+\nmysql> SELECT JSON_QUOTE('[1, 2, 3]');\n+-------------------------+\n| JSON_QUOTE('[1, 2, 3]') |\n+-------------------------+\n| \"[1, 2, 3]\" |\n+-------------------------+"
        ]
    },
    {
        "Name": "JSON_REMOVE",
        "Tree": "(functionCall (scalarFunctionName (functionNameBase JSON_REMOVE)) ( ))",
        "Description": [
            "Remove data from JSON document"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/json-modification-functions.html#function_json-remove"
        ],
        "Detail": "<link><code>JSON_REMOVE( json_doc , path [, path ] ...)</code>&LINK&https://dev.mysql.com/doc/refman/8.4/json-modification-functions.html#function_json-remove</link>\nRemoves data from a JSON document and returns the result. Returns <code>NULL</code> if any argument is <code>NULL</code> . An error occurs if the <code>json_doc</code> argument is not a valid JSON document or any <code>path</code> argument is not a valid path expression or is <code>$</code> or contains a <code>*</code> or <code>**</code> wildcard.\nThe <code>path</code> arguments are evaluated left to right. The document produced by evaluating one path becomes the new value against which the next path is evaluated.\nIt is not an error if the element to be removed does not exist in the document; in that case, the path does not affect the document.",
        "Demo": [
            "mysql> SET @j = '[\"a\", [\"b\", \"c\"], \"d\"]';\nmysql> SELECT JSON_REMOVE(@j, '$[1]');\n+-------------------------+\n| JSON_REMOVE(@j, '$[1]') |\n+-------------------------+\n| [\"a\", \"d\"] |\n+-------------------------+"
        ]
    },
    {
        "Name": "JSON_REPLACE",
        "Tree": "(functionCall (scalarFunctionName (functionNameBase JSON_REPLACE)) ( ))",
        "Description": [
            "Replace values in JSON document"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/json-modification-functions.html#function_json-replace"
        ],
        "Detail": "<link><code>JSON_REPLACE( json_doc , path , val [, path , val ] ...)</code>&LINK&https://dev.mysql.com/doc/refman/8.4/json-modification-functions.html#function_json-replace</link>\nReplaces existing values in a JSON document and returns the result. Returns <code>NULL</code> if any argument is <code>NULL</code> . An error occurs if the <code>json_doc</code> argument is not a valid JSON document or any <code>path</code> argument is not a valid path expression or contains a <code>*</code> or <code>**</code> wildcard.\nThe path-value pairs are evaluated left to right. The document produced by evaluating one pair becomes the new value against which the next pair is evaluated.\nA path-value pair for an existing path in the document overwrites the existing document value with the new value. A path-value pair for a nonexisting path in the document is ignored and has no effect.\nThe optimizer can perform a partial, in-place update of a <code>JSON</code> column instead of removing the old document and writing the new document in its entirety to the column. This optimization can be performed for an update statement that uses the <link><code>JSON_REPLACE()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/json-modification-functions.html#function_json-replace</link> function and meets the conditions outlined in <link>Partial Updates of JSON Values&LINK&https://dev.mysql.com/doc/refman/8.4/json.html#json-partial-updates</link> .\nFor a comparison of <link><code>JSON_INSERT()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/json-modification-functions.html#function_json-insert</link> , <link><code>JSON_REPLACE()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/json-modification-functions.html#function_json-replace</link> , and <link><code>JSON_SET()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/json-modification-functions.html#function_json-set</link> , see the discussion of <link><code>JSON_SET()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/json-modification-functions.html#function_json-set</link> .",
        "Demo": [
            "mysql> SET @j = '{ \"a\": 1, \"b\": [2, 3]}';\nmysql> SELECT JSON_REPLACE(@j, '$.a', 10, '$.c', '[true, false]');\n+-----------------------------------------------------+\n| JSON_REPLACE(@j, '$.a', 10, '$.c', '[true, false]') |\n+-----------------------------------------------------+\n| {\"a\": 10, \"b\": [2, 3]} |\n+-----------------------------------------------------+"
        ]
    },
    {
        "Name": "JSON_SCHEMA_VALID",
        "Tree": "(functionCall (scalarFunctionName (functionNameBase JSON_SCHEMA_VALID)) ( ))",
        "Description": [
            "Validate JSON document against JSON schema; returns TRUE/1 if\n      document validates against schema, or FALSE/0 if it does not"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/json-validation-functions.html#function_json-schema-valid"
        ],
        "Detail": "<link><code>JSON_SCHEMA_VALID( schema , document )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/json-validation-functions.html#function_json-schema-valid</link>\nValidates a JSON <code>document</code> against a JSON <code>schema</code> . Both <code>schema</code> and <code>document</code> are required. The schema must be a valid JSON object; the document must be a valid JSON document. Provided that these conditions are met: If the document validates against the schema, the function returns true (1); otherwise, it returns false (0).\nIn this example, we set a user variable <code>@schema</code> to the value of a JSON schema for geographical coordinates, and another one <code>@document</code> to the value of a JSON document containing one such coordinate. We then verify that <code>@document</code> validates according to <code>@schema</code> by using them as the arguments to <code>JSON_SCHEMA_VALID()</code> :\nSince <code>@schema</code> contains the <code>required</code> attribute, we can set <code>@document</code> to a value that is otherwise valid but does not contain the required properties, then test it against <code>@schema</code> , like this:\nIf we now set the value of <code>@schema</code> to the same JSON schema but without the <code>required</code> attribute, <code>@document</code> validates because it is a valid JSON object, even though it contains no properties, as shown here:\nJSON_SCHEMA_VALID() and CHECK constraints. <code>JSON_SCHEMA_VALID()</code> can also be used to enforce <code>CHECK</code> constraints.\nConsider the table <code>geo</code> created as shown here, with a JSON column <code>coordinate</code> representing a point of latitude and longitude on a map, governed by the JSON schema used as an argument in a <code>JSON_SCHEMA_VALID()</code> call which is passed as the expression for a <code>CHECK</code> constraint on this table:\nNote\nBecause a MySQL <code>CHECK</code> constraint cannot contain references to variables, you must pass the JSON schema to <code>JSON_SCHEMA_VALID()</code> inline when using it to specify such a constraint for a table.\nWe assign JSON values representing coordinates to three variables, as shown here:\nThe first of these values is valid, as can be seen in the following <link><code>INSERT</code>&LINK&https://dev.mysql.com/doc/refman/8.4/insert.html</link> statement:\nThe second JSON value is invalid and so fails the constraint, as shown here:\nYou can obtain precise information about the nature of the failure\u2014in this case, that the <code>latitude</code> value exceeds the maximum defined in the schema\u2014by issuing a <link><code>SHOW WARNINGS</code>&LINK&https://dev.mysql.com/doc/refman/8.4/show-warnings.html</link> statement:\nThe third coordinate value defined above is also invalid, since it is missing the required <code>latitude</code> property. As before, you can see this by attempting to insert the value into the <code>geo</code> table, then issuing <code>SHOW WARNINGS</code> afterwards:\nSee <link>Section 15.1.20.6, \"CHECK Constraints\"&LINK&https://dev.mysql.com/doc/refman/8.4/create-table-check-constraints.html</link> , for more information.\nJSON Schema has support for specifying regular expression patterns for strings, but the implementation used by MySQL silently ignores invalid patterns. This means that <code>JSON_SCHEMA_VALID()</code> can return true even when a regular expression pattern is invalid, as shown here:",
        "Demo": [
            "mysql> SET @schema = '{\n'> \"id\": \"http://json-schema.org/geo\",\n'> \"$schema\": \"http://json-schema.org/draft-04/schema#\",\n'> \"description\": \"A geographical coordinate\",\n'> \"type\": \"object\",\n'> \"properties\": {\n'> \"latitude\": {\n'> \"type\": \"number\",\n'> \"minimum\": -90,\n'> \"maximum\": 90\n'> },\n'> \"longitude\": {\n'> \"type\": \"number\",\n'> \"minimum\": -180,\n'> \"maximum\": 180\n'> }\n'> },\n'> \"required\": [\"latitude\", \"longitude\"]\n'>}';\nQuery OK, 0 rows affected (0.01 sec)\nmysql> SET @document = '{\n'> \"latitude\": 63.444697,\n'> \"longitude\": 10.445118\n'>}';\nQuery OK, 0 rows affected (0.00 sec)\nmysql> SELECT JSON_SCHEMA_VALID(@schema, @document);\n+---------------------------------------+\n| JSON_SCHEMA_VALID(@schema, @document) |\n+---------------------------------------+\n| 1 |\n+---------------------------------------+\n1 row in set (0.00 sec)",
            "mysql> SET @document = '{}';\nQuery OK, 0 rows affected (0.00 sec)\nmysql> SELECT JSON_SCHEMA_VALID(@schema, @document);\n+---------------------------------------+\n| JSON_SCHEMA_VALID(@schema, @document) |\n+---------------------------------------+\n| 0 |\n+---------------------------------------+\n1 row in set (0.00 sec)",
            "mysql> SET @schema = '{\n'> \"id\": \"http://json-schema.org/geo\",\n'> \"$schema\": \"http://json-schema.org/draft-04/schema#\",\n'> \"description\": \"A geographical coordinate\",\n'> \"type\": \"object\",\n'> \"properties\": {\n'> \"latitude\": {\n'> \"type\": \"number\",\n'> \"minimum\": -90,\n'> \"maximum\": 90\n'> },\n'> \"longitude\": {\n'> \"type\": \"number\",\n'> \"minimum\": -180,\n'> \"maximum\": 180\n'> }\n'> }\n'>}';\nQuery OK, 0 rows affected (0.00 sec)\nmysql> SELECT JSON_SCHEMA_VALID(@schema, @document);\n+---------------------------------------+\n| JSON_SCHEMA_VALID(@schema, @document) |\n+---------------------------------------+\n| 1 |\n+---------------------------------------+\n1 row in set (0.00 sec)",
            "mysql> CREATE TABLE geo (\n-> coordinate JSON,\n-> CHECK(\n-> JSON_SCHEMA_VALID(\n-> '{\n'> \"type\":\"object\",\n'> \"properties\":{\n'> \"latitude\":{\"type\":\"number\", \"minimum\":-90, \"maximum\":90},\n'> \"longitude\":{\"type\":\"number\", \"minimum\":-180, \"maximum\":180}\n'> },\n'> \"required\": [\"latitude\", \"longitude\"]\n'> }',\n-> coordinate\n-> )\n-> )\n-> );\nQuery OK, 0 rows affected (0.45 sec)",
            "mysql> SELECT JSON_SCHEMA_VALID('{\"type\":\"string\",\"pattern\":\"(\"}', '\"abc\"');\n+---------------------------------------------------------------+\n| JSON_SCHEMA_VALID('{\"type\":\"string\",\"pattern\":\"(\"}', '\"abc\"') |\n+---------------------------------------------------------------+\n| 1 |\n+---------------------------------------------------------------+\n1 row in set (0.04 sec)"
        ]
    },
    {
        "Name": "JSON_SCHEMA_VALIDATION_REPORT",
        "Tree": "(functionCall (scalarFunctionName (functionNameBase JSON_SCHEMA_VALIDATION_REPORT)) ( ))",
        "Description": [
            "Validate JSON document against JSON schema; returns report in JSON\n      format on outcome on validation including success or failure and\n      reasons for failure"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/json-validation-functions.html#function_json-schema-validation-report"
        ],
        "Detail": "<link><code>JSON_SCHEMA_VALIDATION_REPORT( schema , document )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/json-validation-functions.html#function_json-schema-validation-report</link>\nValidates a JSON <code>document</code> against a JSON <code>schema</code> . Both <code>schema</code> and <code>document</code> are required. As with JSON_VALID_SCHEMA(), the schema must be a valid JSON object, and the document must be a valid JSON document. Provided that these conditions are met, the function returns a report, as a JSON document, on the outcome of the validation. If the JSON document is considered valid according to the JSON Schema, the function returns a JSON object with one property <code>valid</code> having the value \"true\". If the JSON document fails validation, the function returns a JSON object which includes the properties listed here:\n<code>valid</code> : Always \"false\" for a failed schema validation\n<code>reason</code> : A human-readable string containing the reason for the failure\n<code>schema-location</code> : A JSON pointer URI fragment identifier indicating where in the JSON schema the validation failed (see Note following this list)\n<code>document-location</code> : A JSON pointer URI fragment identifier indicating where in the JSON document the validation failed (see Note following this list)\n<code>schema-failed-keyword</code> : A string containing the name of the keyword or property in the JSON schema that was violated\nNote\nJSON pointer URI fragment identifiers are defined in <link>RFC 6901 - JavaScript Object Notation (JSON) Pointer&LINK&https://tools.ietf.org/html/rfc6901#page-5</link> . (These are not the same as the JSON path notation used by <link><code>JSON_EXTRACT()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/json-search-functions.html#function_json-extract</link> and other MySQL JSON functions.) In this notation, <code>#</code> represents the entire document, and <code>#/myprop</code> represents the portion of the document included in the top-level property named <code>myprop</code> . See the specification just cited and the examples shown later in this section for more information.\nIn this example, we set a user variable <code>@schema</code> to the value of a JSON schema for geographical coordinates, and another one <code>@document</code> to the value of a JSON document containing one such coordinate. We then verify that <code>@document</code> validates according to <code>@schema</code> by using them as the arguments to <code>JSON_SCHEMA_VALIDATION_REORT()</code> :\nNow we set <code>@document</code> such that it specifies an illegal value for one of its properties, like this:\nValidation of <code>@document</code> now fails when tested with <code>JSON_SCHEMA_VALIDATION_REPORT()</code> . The output from the function call contains detailed information about the failure (with the function wrapped by <link><code>JSON_PRETTY()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/json-utility-functions.html#function_json-pretty</link> to provide better formatting), as shown here:\nSince <code>@schema</code> contains the <code>required</code> attribute, we can set <code>@document</code> to a value that is otherwise valid but does not contain the required properties, then test it against <code>@schema</code> . The output of <code>JSON_SCHEMA_VALIDATION_REPORT()</code> shows that validation fails due to lack of a required element, like this:\nIf we now set the value of <code>@schema</code> to the same JSON schema but without the <code>required</code> attribute, <code>@document</code> validates because it is a valid JSON object, even though it contains no properties, as shown here:",
        "Demo": [
            "mysql> SET @schema = '{\n'> \"id\": \"http://json-schema.org/geo\",\n'> \"$schema\": \"http://json-schema.org/draft-04/schema#\",\n'> \"description\": \"A geographical coordinate\",\n'> \"type\": \"object\",\n'> \"properties\": {\n'> \"latitude\": {\n'> \"type\": \"number\",\n'> \"minimum\": -90,\n'> \"maximum\": 90\n'> },\n'> \"longitude\": {\n'> \"type\": \"number\",\n'> \"minimum\": -180,\n'> \"maximum\": 180\n'> }\n'> },\n'> \"required\": [\"latitude\", \"longitude\"]\n'>}';\nQuery OK, 0 rows affected (0.01 sec)\nmysql> SET @document = '{\n'> \"latitude\": 63.444697,\n'> \"longitude\": 10.445118\n'>}';\nQuery OK, 0 rows affected (0.00 sec)\nmysql> SELECT JSON_SCHEMA_VALIDATION_REPORT(@schema, @document);\n+---------------------------------------------------+\n| JSON_SCHEMA_VALIDATION_REPORT(@schema, @document) |\n+---------------------------------------------------+\n| {\"valid\": true} |\n+---------------------------------------------------+\n1 row in set (0.00 sec)",
            "mysql> SELECT JSON_PRETTY(JSON_SCHEMA_VALIDATION_REPORT(@schema, @document))\\G\n*************************** 1. row ***************************\nJSON_PRETTY(JSON_SCHEMA_VALIDATION_REPORT(@schema, @document)): {\n\"valid\": false,\n\"reason\": \"The JSON document location '#/longitude' failed requirement 'maximum' at JSON Schema location '#/properties/longitude'\",\n\"schema-location\": \"#/properties/longitude\",\n\"document-location\": \"#/longitude\",\n\"schema-failed-keyword\": \"maximum\"\n}\n1 row in set (0.00 sec)",
            "mysql> SET @document = '{}';\nQuery OK, 0 rows affected (0.00 sec)\nmysql> SELECT JSON_PRETTY(JSON_SCHEMA_VALIDATION_REPORT(@schema, @document))\\G\n*************************** 1. row ***************************\nJSON_PRETTY(JSON_SCHEMA_VALIDATION_REPORT(@schema, @document)): {\n\"valid\": false,\n\"reason\": \"The JSON document location '#' failed requirement 'required' at JSON Schema location '#'\",\n\"schema-location\": \"#\",\n\"document-location\": \"#\",\n\"schema-failed-keyword\": \"required\"\n}\n1 row in set (0.00 sec)",
            "mysql> SET @schema = '{\n'> \"id\": \"http://json-schema.org/geo\",\n'> \"$schema\": \"http://json-schema.org/draft-04/schema#\",\n'> \"description\": \"A geographical coordinate\",\n'> \"type\": \"object\",\n'> \"properties\": {\n'> \"latitude\": {\n'> \"type\": \"number\",\n'> \"minimum\": -90,\n'> \"maximum\": 90\n'> },\n'> \"longitude\": {\n'> \"type\": \"number\",\n'> \"minimum\": -180,\n'> \"maximum\": 180\n'> }\n'> }\n'>}';\nQuery OK, 0 rows affected (0.00 sec)\nmysql> SELECT JSON_SCHEMA_VALIDATION_REPORT(@schema, @document);\n+---------------------------------------------------+\n| JSON_SCHEMA_VALIDATION_REPORT(@schema, @document) |\n+---------------------------------------------------+\n| {\"valid\": true} |\n+---------------------------------------------------+\n1 row in set (0.00 sec)"
        ]
    },
    {
        "Name": "JSON_SEARCH",
        "Tree": "(functionCall (scalarFunctionName (functionNameBase JSON_SEARCH)) ( ))",
        "Description": [
            "Path to value within JSON document"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/json-search-functions.html#function_json-search"
        ],
        "Detail": "<link><code>JSON_SEARCH( json_doc , one_or_all , search_str [, escape_char [, path ] ...])</code>&LINK&https://dev.mysql.com/doc/refman/8.4/json-search-functions.html#function_json-search</link>\nReturns the path to the given string within a JSON document. Returns <code>NULL</code> if any of the <code>json_doc</code> , <code>search_str</code> , or <code>path</code> arguments are <code>NULL</code> ; no <code>path</code> exists within the document; or <code>search_str</code> is not found. An error occurs if the <code>json_doc</code> argument is not a valid JSON document, any <code>path</code> argument is not a valid path expression, <code>one_or_all</code> is not <code>'one'</code> or <code>'all'</code> , or <code>escape_char</code> is not a constant expression.\nThe <code>one_or_all</code> argument affects the search as follows:\n<code>'one'</code> : The search terminates after the first match and returns one path string. It is undefined which match is considered first.\n<code>'all'</code> : The search returns all matching path strings such that no duplicate paths are included. If there are multiple strings, they are autowrapped as an array. The order of the array elements is undefined.\nWithin the <code>search_str</code> search string argument, the <code>%</code> and <code>_</code> characters work as for the <link><code>LIKE</code>&LINK&https://dev.mysql.com/doc/refman/8.4/string-comparison-functions.html#operator_like</link> operator: <code>%</code> matches any number of characters (including zero characters), and <code>_</code> matches exactly one character.\nTo specify a literal <code>%</code> or <code>_</code> character in the search string, precede it by the escape character. The default is <code>\\</code> if the <code>escape_char</code> argument is missing or <code>NULL</code> . Otherwise, <code>escape_char</code> must be a constant that is empty or one character.\nFor more information about matching and escape character behavior, see the description of <link><code>LIKE</code>&LINK&https://dev.mysql.com/doc/refman/8.4/string-comparison-functions.html#operator_like</link> in <link>Section 14.8.1, \"String Comparison Functions and Operators\"&LINK&https://dev.mysql.com/doc/refman/8.4/string-comparison-functions.html</link> . For escape character handling, a difference from the <link><code>LIKE</code>&LINK&https://dev.mysql.com/doc/refman/8.4/string-comparison-functions.html#operator_like</link> behavior is that the escape character for <link><code>JSON_SEARCH()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/json-search-functions.html#function_json-search</link> must evaluate to a constant at compile time, not just at execution time. For example, if <link><code>JSON_SEARCH()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/json-search-functions.html#function_json-search</link> is used in a prepared statement and the <code>escape_char</code> argument is supplied using a <code>?</code> parameter, the parameter value might be constant at execution time, but is not at compile time.\nFor more information about the JSON path syntax supported by MySQL, including rules governing the wildcard operators <code>*</code> and <code>**</code> , see <link>JSON Path Syntax&LINK&https://dev.mysql.com/doc/refman/8.4/json.html#json-path-syntax</link> .",
        "Demo": [
            "mysql> SET @j = '[\"abc\", [{\"k\": \"10\"}, \"def\"], {\"x\":\"abc\"}, {\"y\":\"bcd\"}]';\nmysql> SELECT JSON_SEARCH(@j, 'one', 'abc');\n+-------------------------------+\n| JSON_SEARCH(@j, 'one', 'abc') |\n+-------------------------------+\n| \"$[0]\" |\n+-------------------------------+\nmysql> SELECT JSON_SEARCH(@j, 'all', 'abc');\n+-------------------------------+\n| JSON_SEARCH(@j, 'all', 'abc') |\n+-------------------------------+\n| [\"$[0]\", \"$[2].x\"] |\n+-------------------------------+\nmysql> SELECT JSON_SEARCH(@j, 'all', 'ghi');\n+-------------------------------+\n| JSON_SEARCH(@j, 'all', 'ghi') |\n+-------------------------------+\n| NULL |\n+-------------------------------+\nmysql> SELECT JSON_SEARCH(@j, 'all', '10');\n+------------------------------+\n| JSON_SEARCH(@j, 'all', '10') |\n+------------------------------+\n| \"$[1][0].k\" |\n+------------------------------+\nmysql> SELECT JSON_SEARCH(@j, 'all', '10', NULL, '$');\n+-----------------------------------------+\n| JSON_SEARCH(@j, 'all', '10', NULL, '$') |\n+-----------------------------------------+\n| \"$[1][0].k\" |\n+-----------------------------------------+\nmysql> SELECT JSON_SEARCH(@j, 'all', '10', NULL, '$[*]');\n+--------------------------------------------+\n| JSON_SEARCH(@j, 'all', '10', NULL, '$[*]') |\n+--------------------------------------------+\n| \"$[1][0].k\" |\n+--------------------------------------------+\nmysql> SELECT JSON_SEARCH(@j, 'all', '10', NULL, '$**.k');\n+---------------------------------------------+\n| JSON_SEARCH(@j, 'all', '10', NULL, '$**.k') |\n+---------------------------------------------+\n| \"$[1][0].k\" |\n+---------------------------------------------+\nmysql> SELECT JSON_SEARCH(@j, 'all', '10', NULL, '$[*][0].k');\n+-------------------------------------------------+\n| JSON_SEARCH(@j, 'all', '10', NULL, '$[*][0].k') |\n+-------------------------------------------------+\n| \"$[1][0].k\" |\n+-------------------------------------------------+\nmysql> SELECT JSON_SEARCH(@j, 'all', '10', NULL, '$[1]');\n+--------------------------------------------+\n| JSON_SEARCH(@j, 'all', '10', NULL, '$[1]') |\n+--------------------------------------------+\n| \"$[1][0].k\" |\n+--------------------------------------------+\nmysql> SELECT JSON_SEARCH(@j, 'all', '10', NULL, '$[1][0]');\n+-----------------------------------------------+\n| JSON_SEARCH(@j, 'all', '10', NULL, '$[1][0]') |\n+-----------------------------------------------+\n| \"$[1][0].k\" |\n+-----------------------------------------------+\nmysql> SELECT JSON_SEARCH(@j, 'all', 'abc', NULL, '$[2]');\n+---------------------------------------------+\n| JSON_SEARCH(@j, 'all', 'abc', NULL, '$[2]') |\n+---------------------------------------------+\n| \"$[2].x\" |\n+---------------------------------------------+\nmysql> SELECT JSON_SEARCH(@j, 'all', '%a%');\n+-------------------------------+\n| JSON_SEARCH(@j, 'all', '%a%') |\n+-------------------------------+\n| [\"$[0]\", \"$[2].x\"] |\n+-------------------------------+\nmysql> SELECT JSON_SEARCH(@j, 'all', '%b%');\n+-------------------------------+\n| JSON_SEARCH(@j, 'all', '%b%') |\n+-------------------------------+\n| [\"$[0]\", \"$[2].x\", \"$[3].y\"] |\n+-------------------------------+\nmysql> SELECT JSON_SEARCH(@j, 'all', '%b%', NULL, '$[0]');\n+---------------------------------------------+\n| JSON_SEARCH(@j, 'all', '%b%', NULL, '$[0]') |\n+---------------------------------------------+\n| \"$[0]\" |\n+---------------------------------------------+\nmysql> SELECT JSON_SEARCH(@j, 'all', '%b%', NULL, '$[2]');\n+---------------------------------------------+\n| JSON_SEARCH(@j, 'all', '%b%', NULL, '$[2]') |\n+---------------------------------------------+\n| \"$[2].x\" |\n+---------------------------------------------+\nmysql> SELECT JSON_SEARCH(@j, 'all', '%b%', NULL, '$[1]');\n+---------------------------------------------+\n| JSON_SEARCH(@j, 'all', '%b%', NULL, '$[1]') |\n+---------------------------------------------+\n| NULL |\n+---------------------------------------------+\nmysql> SELECT JSON_SEARCH(@j, 'all', '%b%', '', '$[1]');\n+-------------------------------------------+\n| JSON_SEARCH(@j, 'all', '%b%', '', '$[1]') |\n+-------------------------------------------+\n| NULL |\n+-------------------------------------------+\nmysql> SELECT JSON_SEARCH(@j, 'all', '%b%', '', '$[3]');\n+-------------------------------------------+\n| JSON_SEARCH(@j, 'all', '%b%', '', '$[3]') |\n+-------------------------------------------+\n| \"$[3].y\" |\n+-------------------------------------------+"
        ]
    },
    {
        "Name": "JSON_SET",
        "Tree": "(functionCall (scalarFunctionName (functionNameBase JSON_SET)) ( ))",
        "Description": [
            "Insert data into JSON document"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/json-modification-functions.html#function_json-set"
        ],
        "Detail": "<link><code>JSON_SET( json_doc , path , val [, path , val ] ...)</code>&LINK&https://dev.mysql.com/doc/refman/8.4/json-modification-functions.html#function_json-set</link>\nInserts or updates data in a JSON document and returns the result. Returns <code>NULL</code> if <code>json_doc</code> or <code>path</code> is <code>NULL</code> , or if <code>path</code> , when given, does not locate an object. Otherwise, an error occurs if the <code>json_doc</code> argument is not a valid JSON document or any <code>path</code> argument is not a valid path expression or contains a <code>*</code> or <code>**</code> wildcard.\nThe path-value pairs are evaluated left to right. The document produced by evaluating one pair becomes the new value against which the next pair is evaluated.\nA path-value pair for an existing path in the document overwrites the existing document value with the new value. A path-value pair for a nonexisting path in the document adds the value to the document if the path identifies one of these types of values:\nA member not present in an existing object. The member is added to the object and associated with the new value.\nA position past the end of an existing array. The array is extended with the new value. If the existing value is not an array, it is autowrapped as an array, then extended with the new value.\nOtherwise, a path-value pair for a nonexisting path in the document is ignored and has no effect.\nThe optimizer can perform a partial, in-place update of a <code>JSON</code> column instead of removing the old document and writing the new document in its entirety to the column. This optimization can be performed for an update statement that uses the <link><code>JSON_SET()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/json-modification-functions.html#function_json-set</link> function and meets the conditions outlined in <link>Partial Updates of JSON Values&LINK&https://dev.mysql.com/doc/refman/8.4/json.html#json-partial-updates</link> .\nThe <link><code>JSON_SET()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/json-modification-functions.html#function_json-set</link> , <link><code>JSON_INSERT()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/json-modification-functions.html#function_json-insert</link> , and <link><code>JSON_REPLACE()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/json-modification-functions.html#function_json-replace</link> functions are related:\n<link><code>JSON_SET()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/json-modification-functions.html#function_json-set</link> replaces existing values and adds nonexisting values.\n<link><code>JSON_INSERT()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/json-modification-functions.html#function_json-insert</link> inserts values without replacing existing values.\n<link><code>JSON_REPLACE()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/json-modification-functions.html#function_json-replace</link> replaces only existing values.\nThe following examples illustrate these differences, using one path that does exist in the document ( <code>$.a</code> ) and another that does not exist ( <code>$.c</code> ):",
        "Demo": [
            "mysql> SET @j = '{ \"a\": 1, \"b\": [2, 3]}';\nmysql> SELECT JSON_SET(@j, '$.a', 10, '$.c', '[true, false]');\n+-------------------------------------------------+\n| JSON_SET(@j, '$.a', 10, '$.c', '[true, false]') |\n+-------------------------------------------------+\n| {\"a\": 10, \"b\": [2, 3], \"c\": \"[true, false]\"} |\n+-------------------------------------------------+\nmysql> SELECT JSON_INSERT(@j, '$.a', 10, '$.c', '[true, false]');\n+----------------------------------------------------+\n| JSON_INSERT(@j, '$.a', 10, '$.c', '[true, false]') |\n+----------------------------------------------------+\n| {\"a\": 1, \"b\": [2, 3], \"c\": \"[true, false]\"} |\n+----------------------------------------------------+\nmysql> SELECT JSON_REPLACE(@j, '$.a', 10, '$.c', '[true, false]');\n+-----------------------------------------------------+\n| JSON_REPLACE(@j, '$.a', 10, '$.c', '[true, false]') |\n+-----------------------------------------------------+\n| {\"a\": 10, \"b\": [2, 3]} |\n+-----------------------------------------------------+"
        ]
    },
    {
        "Name": "JSON_STORAGE_FREE",
        "Tree": "(functionCall (scalarFunctionName (functionNameBase JSON_STORAGE_FREE)) ( ))",
        "Description": [
            "Freed space within binary representation of JSON column value\n      following partial update"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/json-utility-functions.html#function_json-storage-free"
        ],
        "Detail": "<link><code>JSON_STORAGE_FREE( json_val )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/json-utility-functions.html#function_json-storage-free</link>\nFor a <link><code>JSON</code>&LINK&https://dev.mysql.com/doc/refman/8.4/json.html</link> column value, this function shows how much storage space was freed in its binary representation after it was updated in place using <link><code>JSON_SET()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/json-modification-functions.html#function_json-set</link> , <link><code>JSON_REPLACE()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/json-modification-functions.html#function_json-replace</link> , or <link><code>JSON_REMOVE()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/json-modification-functions.html#function_json-remove</link> . The argument can also be a valid JSON document or a string which can be parsed as one\u2014either as a literal value or as the value of a user variable\u2014in which case the function returns 0. It returns a positive, nonzero value if the argument is a <code>JSON</code> column value which has been updated as described previously, such that its binary representation takes up less space than it did prior to the update. For a <code>JSON</code> column which has been updated such that its binary representation is the same as or larger than before, or if the update was not able to take advantage of a partial update, it returns 0; it returns <code>NULL</code> if the argument is <code>NULL</code> .\nIf <code>json_val</code> is not <code>NULL</code> , and neither is a valid JSON document nor can be successfully parsed as one, an error results.\nIn this example, we create a table containing a <code>JSON</code> column, then insert a row containing a JSON object:\nNow we update the column value using <code>JSON_SET()</code> such that a partial update can be performed; in this case, we replace the value pointed to by the <code>c</code> key (the array <code>[true, false]</code> ) with one that takes up less space (the integer <code>1</code> ):\nThe effects of successive partial updates on this free space are cumulative, as shown in this example using <code>JSON_SET()</code> to reduce the space taken up by the value having key <code>b</code> (and making no other changes):\nUpdating the column without using <code>JSON_SET()</code> , <code>JSON_REPLACE()</code> , or <code>JSON_REMOVE()</code> means that the optimizer cannot perform the update in place; in this case, <code>JSON_STORAGE_FREE()</code> returns 0, as shown here:\nPartial updates of JSON documents can be performed only on column values. For a user variable that stores a JSON value, the value is always completely replaced, even when the update is performed using <code>JSON_SET()</code> :\nFor a JSON literal, this function always returns 0:",
        "Demo": [
            "mysql> UPDATE jtable\n-> SET jcol = JSON_SET(jcol, \"$.a\", 10, \"$.b\", \"wxyz\", \"$.c\", 1);\nQuery OK, 1 row affected (0.03 sec)\nRows matched: 1 Changed: 1 Warnings: 0\nmysql> SELECT * FROM jtable;\n+--------------------------------+\n| jcol |\n+--------------------------------+\n| {\"a\": 10, \"b\": \"wxyz\", \"c\": 1} |\n+--------------------------------+\n1 row in set (0.00 sec)\nmysql> SELECT JSON_STORAGE_FREE(jcol) FROM jtable;\n+-------------------------+\n| JSON_STORAGE_FREE(jcol) |\n+-------------------------+\n| 14 |\n+-------------------------+\n1 row in set (0.00 sec)",
            "mysql> UPDATE jtable\n-> SET jcol = JSON_SET(jcol, \"$.a\", 10, \"$.b\", \"wx\", \"$.c\", 1);\nQuery OK, 1 row affected (0.03 sec)\nRows matched: 1 Changed: 1 Warnings: 0\nmysql> SELECT JSON_STORAGE_FREE(jcol) FROM jtable;\n+-------------------------+\n| JSON_STORAGE_FREE(jcol) |\n+-------------------------+\n| 16 |\n+-------------------------+\n1 row in set (0.00 sec)",
            "mysql> UPDATE jtable SET jcol = '{\"a\": 10, \"b\": 1}';\nQuery OK, 1 row affected (0.05 sec)\nRows matched: 1 Changed: 1 Warnings: 0\nmysql> SELECT JSON_STORAGE_FREE(jcol) FROM jtable;\n+-------------------------+\n| JSON_STORAGE_FREE(jcol) |\n+-------------------------+\n| 0 |\n+-------------------------+\n1 row in set (0.00 sec)",
            "mysql> SET @j = '{\"a\": 10, \"b\": \"wxyz\", \"c\": \"[true, false]\"}';\nQuery OK, 0 rows affected (0.00 sec)\nmysql> SET @j = JSON_SET(@j, '$.a', 10, '$.b', 'wxyz', '$.c', '1');\nQuery OK, 0 rows affected (0.00 sec)\nmysql> SELECT @j, JSON_STORAGE_FREE(@j) AS Free;\n+----------------------------------+------+\n| @j | Free |\n+----------------------------------+------+\n| {\"a\": 10, \"b\": \"wxyz\", \"c\": \"1\"} | 0 |\n+----------------------------------+------+\n1 row in set (0.00 sec)",
            "mysql> SELECT JSON_STORAGE_FREE('{\"a\": 10, \"b\": \"wxyz\", \"c\": \"1\"}') AS Free;\n+------+\n| Free |\n+------+\n| 0 |\n+------+\n1 row in set (0.00 sec)"
        ]
    },
    {
        "Name": "JSON_STORAGE_SIZE",
        "Tree": "(functionCall (scalarFunctionName (functionNameBase JSON_STORAGE_SIZE)) ( ))",
        "Description": [
            "Space used for storage of binary representation of a JSON document"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/json-utility-functions.html#function_json-storage-size"
        ],
        "Detail": "<link><code>JSON_STORAGE_SIZE( json_val )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/json-utility-functions.html#function_json-storage-size</link>\nThis function returns the number of bytes used to store the binary representation of a JSON document. When the argument is a <code>JSON</code> column, this is the space used to store the JSON document as it was inserted into the column, prior to any partial updates that may have been performed on it afterwards. <code>json_val</code> must be a valid JSON document or a string which can be parsed as one. In the case where it is string, the function returns the amount of storage space in the JSON binary representation that is created by parsing the string as JSON and converting it to binary. It returns <code>NULL</code> if the argument is <code>NULL</code> .\nAn error results when <code>json_val</code> is not <code>NULL</code> , and is not\u2014or cannot be successfully parsed as\u2014a JSON document.\nTo illustrate this function's behavior when used with a <code>JSON</code> column as its argument, we create a table named <code>jtable</code> containing a <code>JSON</code> column <code>jcol</code> , insert a JSON value into the table, then obtain the storage space used by this column with <code>JSON_STORAGE_SIZE()</code> , as shown here:\nAccording to the output of <code>JSON_STORAGE_SIZE()</code> , the JSON document inserted into the column takes up 47 bytes. We also checked the amount of space freed by any previous partial updates of the column using <link><code>JSON_STORAGE_FREE()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/json-utility-functions.html#function_json-storage-free</link> ; since no updates have yet been performed, this is 0, as expected.\nNext we perform an <link><code>UPDATE</code>&LINK&https://dev.mysql.com/doc/refman/8.4/update.html</link> on the table that should result in a partial update of the document stored in <code>jcol</code> , and then test the result as shown here:\nThe value returned by <code>JSON_STORAGE_FREE()</code> in the previous query indicates that a partial update of the JSON document was performed, and that this freed 3 bytes of space used to store it. The result returned by <code>JSON_STORAGE_SIZE()</code> is unchanged by the partial update.\nPartial updates are supported for updates using <link><code>JSON_SET()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/json-modification-functions.html#function_json-set</link> , <link><code>JSON_REPLACE()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/json-modification-functions.html#function_json-replace</link> , or <link><code>JSON_REMOVE()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/json-modification-functions.html#function_json-remove</link> . The direct assignment of a value to a <code>JSON</code> column cannot be partially updated; following such an update, <code>JSON_STORAGE_SIZE()</code> always shows the storage used for the newly-set value:\nA JSON user variable cannot be partially updated. This means that this function always shows the space currently used to store a JSON document in a user variable:\nFor a JSON literal, this function always returns the current storage space used:",
        "Demo": [
            "mysql> CREATE TABLE jtable (jcol JSON);\nQuery OK, 0 rows affected (0.42 sec)\nmysql> INSERT INTO jtable VALUES\n-> ('{\"a\": 1000, \"b\": \"wxyz\", \"c\": \"[1, 3, 5, 7]\"}');\nQuery OK, 1 row affected (0.04 sec)\nmysql> SELECT\n-> jcol,\n-> JSON_STORAGE_SIZE(jcol) AS Size,\n-> JSON_STORAGE_FREE(jcol) AS Free\n-> FROM jtable;\n+-----------------------------------------------+------+------+\n| jcol | Size | Free |\n+-----------------------------------------------+------+------+\n| {\"a\": 1000, \"b\": \"wxyz\", \"c\": \"[1, 3, 5, 7]\"} | 47 | 0 |\n+-----------------------------------------------+------+------+\n1 row in set (0.00 sec)",
            "mysql> UPDATE jtable SET jcol =\n-> JSON_SET(jcol, \"$.b\", \"a\");\nQuery OK, 1 row affected (0.04 sec)\nRows matched: 1 Changed: 1 Warnings: 0\nmysql> SELECT\n-> jcol,\n-> JSON_STORAGE_SIZE(jcol) AS Size,\n-> JSON_STORAGE_FREE(jcol) AS Free\n-> FROM jtable;\n+--------------------------------------------+------+------+\n| jcol | Size | Free |\n+--------------------------------------------+------+------+\n| {\"a\": 1000, \"b\": \"a\", \"c\": \"[1, 3, 5, 7]\"} | 47 | 3 |\n+--------------------------------------------+------+------+\n1 row in set (0.00 sec)",
            "mysql> UPDATE jtable\nmysql> SET jcol = '{\"a\": 4.55, \"b\": \"wxyz\", \"c\": \"[true, false]\"}';\nQuery OK, 1 row affected (0.04 sec)\nRows matched: 1 Changed: 1 Warnings: 0\nmysql> SELECT\n-> jcol,\n-> JSON_STORAGE_SIZE(jcol) AS Size,\n-> JSON_STORAGE_FREE(jcol) AS Free\n-> FROM jtable;\n+------------------------------------------------+------+------+\n| jcol | Size | Free |\n+------------------------------------------------+------+------+\n| {\"a\": 4.55, \"b\": \"wxyz\", \"c\": \"[true, false]\"} | 56 | 0 |\n+------------------------------------------------+------+------+\n1 row in set (0.00 sec)",
            "mysql> SET @j = '[100, \"sakila\", [1, 3, 5], 425.05]';\nQuery OK, 0 rows affected (0.00 sec)\nmysql> SELECT @j, JSON_STORAGE_SIZE(@j) AS Size;\n+------------------------------------+------+\n| @j | Size |\n+------------------------------------+------+\n| [100, \"sakila\", [1, 3, 5], 425.05] | 45 |\n+------------------------------------+------+\n1 row in set (0.00 sec)\nmysql> SET @j = JSON_SET(@j, '$[1]', \"json\");\nQuery OK, 0 rows affected (0.00 sec)\nmysql> SELECT @j, JSON_STORAGE_SIZE(@j) AS Size;\n+----------------------------------+------+\n| @j | Size |\n+----------------------------------+------+\n| [100, \"json\", [1, 3, 5], 425.05] | 43 |\n+----------------------------------+------+\n1 row in set (0.00 sec)\nmysql> SET @j = JSON_SET(@j, '$[2][0]', JSON_ARRAY(10, 20, 30));\nQuery OK, 0 rows affected (0.00 sec)\nmysql> SELECT @j, JSON_STORAGE_SIZE(@j) AS Size;\n+---------------------------------------------+------+\n| @j | Size |\n+---------------------------------------------+------+\n| [100, \"json\", [[10, 20, 30], 3, 5], 425.05] | 56 |\n+---------------------------------------------+------+\n1 row in set (0.00 sec)",
            "mysql> SELECT\n-> JSON_STORAGE_SIZE('[100, \"sakila\", [1, 3, 5], 425.05]') AS A,\n-> JSON_STORAGE_SIZE('{\"a\": 1000, \"b\": \"a\", \"c\": \"[1, 3, 5, 7]\"}') AS B,\n-> JSON_STORAGE_SIZE('{\"a\": 1000, \"b\": \"wxyz\", \"c\": \"[1, 3, 5, 7]\"}') AS C,\n-> JSON_STORAGE_SIZE('[100, \"json\", [[10, 20, 30], 3, 5], 425.05]') AS D;\n+----+----+----+----+\n| A | B | C | D |\n+----+----+----+----+\n| 45 | 44 | 47 | 56 |\n+----+----+----+----+\n1 row in set (0.00 sec)"
        ]
    },
    {
        "Name": "JSON_TABLE",
        "Tree": "(functionCall (scalarFunctionName (functionNameBase JSON_TABLE)) ( ))",
        "Description": [
            "Return data from a JSON expression as a relational table"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/json-table-functions.html#function_json-table"
        ],
        "Detail": "<link><code>JSON_STORAGE_SIZE( json_val )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/json-utility-functions.html#function_json-storage-size</link>\nThis function returns the number of bytes used to store the binary representation of a JSON document. When the argument is a <code>JSON</code> column, this is the space used to store the JSON document as it was inserted into the column, prior to any partial updates that may have been performed on it afterwards. <code>json_val</code> must be a valid JSON document or a string which can be parsed as one. In the case where it is string, the function returns the amount of storage space in the JSON binary representation that is created by parsing the string as JSON and converting it to binary. It returns <code>NULL</code> if the argument is <code>NULL</code> .\nAn error results when <code>json_val</code> is not <code>NULL</code> , and is not\u2014or cannot be successfully parsed as\u2014a JSON document.\nTo illustrate this function's behavior when used with a <code>JSON</code> column as its argument, we create a table named <code>jtable</code> containing a <code>JSON</code> column <code>jcol</code> , insert a JSON value into the table, then obtain the storage space used by this column with <code>JSON_STORAGE_SIZE()</code> , as shown here:\nAccording to the output of <code>JSON_STORAGE_SIZE()</code> , the JSON document inserted into the column takes up 47 bytes. We also checked the amount of space freed by any previous partial updates of the column using <link><code>JSON_STORAGE_FREE()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/json-utility-functions.html#function_json-storage-free</link> ; since no updates have yet been performed, this is 0, as expected.\nNext we perform an <link><code>UPDATE</code>&LINK&https://dev.mysql.com/doc/refman/8.4/update.html</link> on the table that should result in a partial update of the document stored in <code>jcol</code> , and then test the result as shown here:\nThe value returned by <code>JSON_STORAGE_FREE()</code> in the previous query indicates that a partial update of the JSON document was performed, and that this freed 3 bytes of space used to store it. The result returned by <code>JSON_STORAGE_SIZE()</code> is unchanged by the partial update.\nPartial updates are supported for updates using <link><code>JSON_SET()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/json-modification-functions.html#function_json-set</link> , <link><code>JSON_REPLACE()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/json-modification-functions.html#function_json-replace</link> , or <link><code>JSON_REMOVE()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/json-modification-functions.html#function_json-remove</link> . The direct assignment of a value to a <code>JSON</code> column cannot be partially updated; following such an update, <code>JSON_STORAGE_SIZE()</code> always shows the storage used for the newly-set value:\nA JSON user variable cannot be partially updated. This means that this function always shows the space currently used to store a JSON document in a user variable:\nFor a JSON literal, this function always returns the current storage space used:",
        "Demo": []
    },
    {
        "Name": "JSON_TYPE",
        "Tree": "(functionCall (scalarFunctionName (functionNameBase JSON_TYPE)) ( ))",
        "Description": [
            "Type of JSON value"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/json-attribute-functions.html#function_json-type"
        ],
        "Detail": "<link><code>JSON_TYPE( json_val )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/json-attribute-functions.html#function_json-type</link>\nReturns a <code>utf8mb4</code> string indicating the type of a JSON value. This can be an object, an array, or a scalar type, as shown here:\n<link><code>JSON_TYPE()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/json-attribute-functions.html#function_json-type</link> returns <code>NULL</code> if the argument is <code>NULL</code> :\nAn error occurs if the argument is not a valid JSON value:\nFor a non- <code>NULL</code> , non-error result, the following list describes the possible <link><code>JSON_TYPE()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/json-attribute-functions.html#function_json-type</link> return values:\nPurely JSON types:\n<code>OBJECT</code> : JSON objects\n<code>ARRAY</code> : JSON arrays\n<code>BOOLEAN</code> : The JSON true and false literals\n<code>NULL</code> : The JSON null literal\nNumeric types:\n<code>INTEGER</code> : MySQL <link><code>TINYINT</code>&LINK&https://dev.mysql.com/doc/refman/8.4/integer-types.html</link> , <link><code>SMALLINT</code>&LINK&https://dev.mysql.com/doc/refman/8.4/integer-types.html</link> , <link><code>MEDIUMINT</code>&LINK&https://dev.mysql.com/doc/refman/8.4/integer-types.html</link> and <link><code>INT</code>&LINK&https://dev.mysql.com/doc/refman/8.4/integer-types.html</link> and <link><code>BIGINT</code>&LINK&https://dev.mysql.com/doc/refman/8.4/integer-types.html</link> scalars\n<code>DOUBLE</code> : MySQL <link><code>DOUBLE</code>&LINK&https://dev.mysql.com/doc/refman/8.4/floating-point-types.html</link> <link><code>FLOAT</code>&LINK&https://dev.mysql.com/doc/refman/8.4/floating-point-types.html</link> scalars\n<code>DECIMAL</code> : MySQL <link><code>DECIMAL</code>&LINK&https://dev.mysql.com/doc/refman/8.4/fixed-point-types.html</link> and <link><code>NUMERIC</code>&LINK&https://dev.mysql.com/doc/refman/8.4/fixed-point-types.html</link> scalars\nTemporal types:\n<code>DATETIME</code> : MySQL <link><code>DATETIME</code>&LINK&https://dev.mysql.com/doc/refman/8.4/datetime.html</link> and <link><code>TIMESTAMP</code>&LINK&https://dev.mysql.com/doc/refman/8.4/datetime.html</link> scalars\n<code>DATE</code> : MySQL <link><code>DATE</code>&LINK&https://dev.mysql.com/doc/refman/8.4/datetime.html</link> scalars\n<code>TIME</code> : MySQL <link><code>TIME</code>&LINK&https://dev.mysql.com/doc/refman/8.4/time.html</link> scalars\nString types:\n<code>STRING</code> : MySQL <code>utf8mb3</code> character type scalars: <link><code>CHAR</code>&LINK&https://dev.mysql.com/doc/refman/8.4/char.html</link> , <link><code>VARCHAR</code>&LINK&https://dev.mysql.com/doc/refman/8.4/char.html</link> , <link><code>TEXT</code>&LINK&https://dev.mysql.com/doc/refman/8.4/blob.html</link> , <link><code>ENUM</code>&LINK&https://dev.mysql.com/doc/refman/8.4/enum.html</link> , and <link><code>SET</code>&LINK&https://dev.mysql.com/doc/refman/8.4/set.html</link>\nBinary types:\n<code>BLOB</code> : MySQL binary type scalars including <link><code>BINARY</code>&LINK&https://dev.mysql.com/doc/refman/8.4/binary-varbinary.html</link> , <link><code>VARBINARY</code>&LINK&https://dev.mysql.com/doc/refman/8.4/binary-varbinary.html</link> , <link><code>BLOB</code>&LINK&https://dev.mysql.com/doc/refman/8.4/blob.html</link> , and <link><code>BIT</code>&LINK&https://dev.mysql.com/doc/refman/8.4/bit-type.html</link>\nAll other types:\n<code>OPAQUE</code> (raw bits)",
        "Demo": [
            "mysql> SET @j = '{\"a\": [10, true]}';\nmysql> SELECT JSON_TYPE(@j);\n+---------------+\n| JSON_TYPE(@j) |\n+---------------+\n| OBJECT |\n+---------------+\nmysql> SELECT JSON_TYPE(JSON_EXTRACT(@j, '$.a'));\n+------------------------------------+\n| JSON_TYPE(JSON_EXTRACT(@j, '$.a')) |\n+------------------------------------+\n| ARRAY |\n+------------------------------------+\nmysql> SELECT JSON_TYPE(JSON_EXTRACT(@j, '$.a[0]'));\n+---------------------------------------+\n| JSON_TYPE(JSON_EXTRACT(@j, '$.a[0]')) |\n+---------------------------------------+\n| INTEGER |\n+---------------------------------------+\nmysql> SELECT JSON_TYPE(JSON_EXTRACT(@j, '$.a[1]'));\n+---------------------------------------+\n| JSON_TYPE(JSON_EXTRACT(@j, '$.a[1]')) |\n+---------------------------------------+\n| BOOLEAN |\n+---------------------------------------+",
            "mysql> SELECT JSON_TYPE(NULL);\n+-----------------+\n| JSON_TYPE(NULL) |\n+-----------------+\n| NULL |\n+-----------------+",
            "mysql> SELECT JSON_TYPE(1);\nERROR 3146 (22032): Invalid data type for JSON data in argument 1\nto function json_type; a JSON string or JSON type is required."
        ]
    },
    {
        "Name": "JSON_UNQUOTE",
        "Tree": "(functionCall (scalarFunctionName (functionNameBase JSON_UNQUOTE)) ( ))",
        "Description": [
            "Unquote JSON value"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/json-modification-functions.html#function_json-unquote"
        ],
        "Detail": "<link><code>JSON_UNQUOTE( json_val )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/json-modification-functions.html#function_json-unquote</link>\nUnquotes JSON value and returns the result as a <code>utf8mb4</code> string. Returns <code>NULL</code> if the argument is <code>NULL</code> . An error occurs if the value starts and ends with double quotes but is not a valid JSON string literal.\nWithin a string, certain sequences have special meaning unless the <link><code>NO_BACKSLASH_ESCAPES</code>&LINK&https://dev.mysql.com/doc/refman/8.4/sql-mode.html#sqlmode_no_backslash_escapes</link> SQL mode is enabled. Each of these sequences begins with a backslash ( <code>\\</code> ), known as the escape character . MySQL recognizes the escape sequences shown in <link>Table 14.23, \"JSON_UNQUOTE() Special Character Escape Sequences\"&LINK&https://dev.mysql.com/doc/refman/8.4/json-modification-functions.html#json-unquote-character-escape-sequences</link> . For all other escape sequences, backslash is ignored. That is, the escaped character is interpreted as if it was not escaped. For example, <code>\\x</code> is just <code>x</code> . These sequences are case-sensitive. For example, <code>\\b</code> is interpreted as a backspace, but <code>\\B</code> is interpreted as <code>B</code> .\nTable 14.23 JSON_UNQUOTE() Special Character Escape Sequences\n<table><thead><tr><th>Escape Sequence</th>\n<th>Character Represented by Sequence</th></tr></thead>\n<tbody><tr><td><code>\\\"</code></td>\n<td>A double quote (\n<code>\"</code>\n) character</td></tr>\n<tr><td><code>\\b</code></td>\n<td>A backspace character</td></tr>\n<tr><td><code>\\f</code></td>\n<td>A formfeed character</td></tr>\n<tr><td><code>\\n</code></td>\n<td>A newline (linefeed) character</td></tr>\n<tr><td><code>\\r</code></td>\n<td>A carriage return character</td></tr>\n<tr><td><code>\\t</code></td>\n<td>A tab character</td></tr>\n<tr><td><code>\\\\</code></td>\n<td>A backslash (\n<code>\\</code>\n) character</td></tr>\n<tr><td><code>\\u XXXX</code></td>\n<td>UTF-8 bytes for Unicode value\n<code>XXXX</code></td></tr></tbody></table>\nTwo simple examples of the use of this function are shown here:\nThe following set of examples shows how <code>JSON_UNQUOTE</code> handles escapes with <link><code>NO_BACKSLASH_ESCAPES</code>&LINK&https://dev.mysql.com/doc/refman/8.4/sql-mode.html#sqlmode_no_backslash_escapes</link> disabled and enabled:",
        "Demo": [
            "mysql> SET @j = '\"abc\"';\nmysql> SELECT @j, JSON_UNQUOTE(@j);\n+-------+------------------+\n| @j | JSON_UNQUOTE(@j) |\n+-------+------------------+\n| \"abc\" | abc |\n+-------+------------------+\nmysql> SET @j = '[1, 2, 3]';\nmysql> SELECT @j, JSON_UNQUOTE(@j);\n+-----------+------------------+\n| @j | JSON_UNQUOTE(@j) |\n+-----------+------------------+\n| [1, 2, 3] | [1, 2, 3] |\n+-----------+------------------+",
            "mysql> SELECT @@sql_mode;\n+------------+\n| @@sql_mode |\n+------------+\n| |\n+------------+\nmysql> SELECT JSON_UNQUOTE('\"\\\\t\\\\u0032\"');\n+------------------------------+\n| JSON_UNQUOTE('\"\\\\t\\\\u0032\"') |\n+------------------------------+\n| 2 |\n+------------------------------+\nmysql> SET @@sql_mode = 'NO_BACKSLASH_ESCAPES';\nmysql> SELECT JSON_UNQUOTE('\"\\\\t\\\\u0032\"');\n+------------------------------+\n| JSON_UNQUOTE('\"\\\\t\\\\u0032\"') |\n+------------------------------+\n| \\t\\u0032 |\n+------------------------------+\nmysql> SELECT JSON_UNQUOTE('\"\\t\\u0032\"');\n+----------------------------+\n| JSON_UNQUOTE('\"\\t\\u0032\"') |\n+----------------------------+\n| 2 |\n+----------------------------+"
        ]
    },
    {
        "Name": "JSON_VALID",
        "Tree": "(functionCall (scalarFunctionName (functionNameBase JSON_VALID)) ( ))",
        "Description": [
            "Whether JSON value is valid"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/json-attribute-functions.html#function_json-valid"
        ],
        "Detail": "<link><code>JSON_VALID( val )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/json-attribute-functions.html#function_json-valid</link>\nReturns 0 or 1 to indicate whether a value is valid JSON. Returns <code>NULL</code> if the argument is <code>NULL</code> .",
        "Demo": [
            "mysql> SELECT JSON_VALID('{\"a\": 1}');\n+------------------------+\n| JSON_VALID('{\"a\": 1}') |\n+------------------------+\n| 1 |\n+------------------------+\nmysql> SELECT JSON_VALID('hello'), JSON_VALID('\"hello\"');\n+---------------------+-----------------------+\n| JSON_VALID('hello') | JSON_VALID('\"hello\"') |\n+---------------------+-----------------------+\n| 0 | 1 |\n+---------------------+-----------------------+"
        ]
    },
    {
        "Name": "JSON_VALUE",
        "Tree": "(functionCall (scalarFunctionName (functionNameBase JSON_VALUE)) ( ))",
        "Description": [
            "Extract value from JSON document at location pointed to by path\n      provided; return this value as VARCHAR(512) or specified type"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/json-search-functions.html#function_json-value"
        ],
        "Detail": "<link><code>JSON_VALUE( json_doc , path )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/json-search-functions.html#function_json-value</link>\nExtracts a value from a JSON document at the path given in the specified document, and returns the extracted value, optionally converting it to a desired type. The complete syntax is shown here:\n<code>json_doc</code> is a valid JSON document. If this is <code>NULL</code> , the function returns <code>NULL</code> .\n<code>path</code> is a JSON path pointing to a location in the document. This must be a string literal value.\n<code>type</code> is one of the following data types:\n<link><code>FLOAT</code>&LINK&https://dev.mysql.com/doc/refman/8.4/floating-point-types.html</link>\n<link><code>DOUBLE</code>&LINK&https://dev.mysql.com/doc/refman/8.4/floating-point-types.html</link>\n<link><code>DECIMAL</code>&LINK&https://dev.mysql.com/doc/refman/8.4/fixed-point-types.html</link>\n<code>SIGNED</code>\n<code>UNSIGNED</code>\n<link><code>DATE</code>&LINK&https://dev.mysql.com/doc/refman/8.4/datetime.html</link>\n<link><code>TIME</code>&LINK&https://dev.mysql.com/doc/refman/8.4/time.html</link>\n<link><code>DATETIME</code>&LINK&https://dev.mysql.com/doc/refman/8.4/datetime.html</link>\n<link><code>YEAR</code>&LINK&https://dev.mysql.com/doc/refman/8.4/year.html</link>\n<code>YEAR</code> values of one or two digits are not supported.\n<link><code>CHAR</code>&LINK&https://dev.mysql.com/doc/refman/8.4/char.html</link>\n<link><code>JSON</code>&LINK&https://dev.mysql.com/doc/refman/8.4/json.html</link>\nThe types just listed are the same as the (non-array) types supported by the <link><code>CAST()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/cast-functions.html#function_cast</link> function.\nIf not specified by a <code>RETURNING</code> clause, the <code>JSON_VALUE()</code> function's return type is <link><code>VARCHAR(512)</code>&LINK&https://dev.mysql.com/doc/refman/8.4/char.html</link> . When no character set is specified for the return type, <code>JSON_VALUE()</code> uses <code>utf8mb4</code> with the binary collation, which is case-sensitive; if <code>utf8mb4</code> is specified as the character set for the result, the server uses the default collation for this character set, which is not case-sensitive.\nWhen the data at the specified path consists of or resolves to a JSON null literal, the function returns SQL <code>NULL</code> .\n<code>on_empty</code> , if specified, determines how <code>JSON_VALUE()</code> behaves when no data is found at the path given; this clause takes one of the following values:\n<code>NULL ON EMPTY</code> : The function returns <code>NULL</code> ; this is the default <code>ON EMPTY</code> behavior.\n<code>DEFAULT value ON EMPTY</code> : the provided <code>value</code> is returned. The value's type must match that of the return type.\n<code>ERROR ON EMPTY</code> : The function throws an error.\nIf used, <code>on_error</code> takes one of the following values with the corresponding outcome when an error occurs, as listed here:\n<code>NULL ON ERROR</code> : <code>JSON_VALUE()</code> returns <code>NULL</code> ; this is the default behavior if no <code>ON ERROR</code> clause is used.\n<code>DEFAULT value ON ERROR</code> : This is the value returned; its value must match that of the return type.\n<code>ERROR ON ERROR</code> : An error is thrown.\n<code>ON EMPTY</code> , if used, must precede any <code>ON ERROR</code> clause. Specifying them in the wrong order results in a syntax error.\nError handling. In general, errors are handled by <code>JSON_VALUE()</code> as follows:\nAll JSON input (document and path) is checked for validity. If any of it is not valid, an SQL error is thrown without triggering the <code>ON ERROR</code> clause.\n<code>ON ERROR</code> is triggered whenever any of the following events occur:\nAttempting to extract an object or an array, such as that resulting from a path that resolves to multiple locations within the JSON document\nConversion errors, such as attempting to convert <code>'asdf'</code> to an <code>UNSIGNED</code> value\nTruncation of values\nA conversion error always triggers a warning even if <code>NULL ON ERROR</code> or <code>DEFAULT ... ON ERROR</code> is specified.\nThe <code>ON EMPTY</code> clause is triggered when the source JSON document ( <code>expr</code> ) contains no data at the specified location ( <code>path</code> ).\nExamples. Two simple examples are shown here:\nThe statement <code>SELECT JSON_VALUE( json_doc , path RETURNING type )</code> is equivalent to the following statement:\n<code>JSON_VALUE()</code> simplifies creating indexes on JSON columns by making it unnecessary in many cases to create a generated column and then an index on the generated column. You can do this when creating a table <code>t1</code> that has a <link><code>JSON</code>&LINK&https://dev.mysql.com/doc/refman/8.4/json.html</link> column by creating an index on an expression that uses <code>JSON_VALUE()</code> operating on that column (with a path that matches a value in that column), as shown here:\nThe following <link><code>EXPLAIN</code>&LINK&https://dev.mysql.com/doc/refman/8.4/explain.html</link> output shows that a query against <code>t1</code> employing the index expression in the <code>WHERE</code> clause uses the index thus created:\nThis achieves much the same effect as creating a table <code>t2</code> with an index on a generated column (see <link>Indexing a Generated Column to Provide a JSON Column Index&LINK&https://dev.mysql.com/doc/refman/8.4/create-table-secondary-indexes.html#json-column-indirect-index</link> ), like this one:\nThe <link><code>EXPLAIN</code>&LINK&https://dev.mysql.com/doc/refman/8.4/explain.html</link> output for a query against this table, referencing the generated column, shows that the index is used in the same way as for the previous query against table <code>t1</code> :\nFor information about using indexes on generated columns for indirect indexing of <link><code>JSON</code>&LINK&https://dev.mysql.com/doc/refman/8.4/json.html</link> columns, see <link>Indexing a Generated Column to Provide a JSON Column Index&LINK&https://dev.mysql.com/doc/refman/8.4/create-table-secondary-indexes.html#json-column-indirect-index</link> .",
        "Demo": [
            "JSON_VALUE(json_doc, path [RETURNING type] [on_empty] [on_error])\non_empty:\n{NULL | ERROR | DEFAULT value} ON EMPTY\non_error:\n{NULL | ERROR | DEFAULT value} ON ERROR",
            "mysql> SELECT JSON_VALUE('{\"fname\": \"Joe\", \"lname\": \"Palmer\"}', '$.fname');\n+--------------------------------------------------------------+\n| JSON_VALUE('{\"fname\": \"Joe\", \"lname\": \"Palmer\"}', '$.fname') |\n+--------------------------------------------------------------+\n| Joe |\n+--------------------------------------------------------------+\nmysql> SELECT JSON_VALUE('{\"item\": \"shoes\", \"price\": \"49.95\"}', '$.price'\n-> RETURNING DECIMAL(4,2)) AS price;\n+-------+\n| price |\n+-------+\n| 49.95 |\n+-------+",
            "CREATE TABLE t1(\nj JSON,\nINDEX i1 ( (JSON_VALUE(j, '$.id' RETURNING UNSIGNED)) )\n);",
            "mysql> EXPLAIN SELECT * FROM t1\n-> WHERE JSON_VALUE(j, '$.id' RETURNING UNSIGNED) = 123\\G\n*************************** 1. row ***************************\nid: 1\nselect_type: SIMPLE\ntable: t1\npartitions: NULL\ntype: ref\npossible_keys: i1\nkey: i1\nkey_len: 9\nref: const\nrows: 1\nfiltered: 100.00\nExtra: NULL"
        ]
    },
    {
        "Name": "LAG",
        "Tree": "(functionCall (scalarFunctionName (functionNameBase LAG)) ( ))",
        "Description": [
            "Value of argument from row lagging current row within partition"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/window-function-descriptions.html#function_lag"
        ],
        "Detail": "<link><code>LAG( expr [, N [, default ]])</code>&LINK&https://dev.mysql.com/doc/refman/8.4/window-function-descriptions.html#function_lag</link> [ <code>null_treatment</code> ] <code>over_clause</code>\nReturns the value of <code>expr</code> from the row that lags (precedes) the current row by <code>N</code> rows within its partition. If there is no such row, the return value is <code>default</code> . For example, if <code>N</code> is 3, the return value is <code>default</code> for the first three rows. If <code>N</code> or <code>default</code> are missing, the defaults are 1 and <code>NULL</code> , respectively.\n<code>N</code> must be a literal nonnegative integer. If <code>N</code> is 0, <code>expr</code> is evaluated for the current row.\n<code>N</code> cannot be <code>NULL</code> , and must be an integer in the range <code>0</code> to <code>2 63</code> , inclusive, in any of the following forms:\nan unsigned integer constant literal\na positional parameter marker ( <code>?</code> )\na user-defined variable\na local variable in a stored routine\n<code>over_clause</code> is as described in <link>Section 14.20.2, \"Window Function Concepts and Syntax\"&LINK&https://dev.mysql.com/doc/refman/8.4/window-functions-usage.html</link> . <code>null_treatment</code> is as described in the section introduction.\n<link><code>LAG()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/window-function-descriptions.html#function_lag</link> (and the similar <link><code>LEAD()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/window-function-descriptions.html#function_lead</link> function) are often used to compute differences between rows. The following query shows a set of time-ordered observations and, for each one, the <link><code>LAG()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/window-function-descriptions.html#function_lag</link> and <link><code>LEAD()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/window-function-descriptions.html#function_lead</link> values from the adjoining rows, as well as the differences between the current and adjoining rows:\nIn the example, the <link><code>LAG()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/window-function-descriptions.html#function_lag</link> and <link><code>LEAD()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/window-function-descriptions.html#function_lead</link> calls use the default <code>N</code> and <code>default</code> values of 1 and <code>NULL</code> , respectively.\nThe first row shows what happens when there is no previous row for <link><code>LAG()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/window-function-descriptions.html#function_lag</link> : The function returns the <code>default</code> value (in this case, <code>NULL</code> ). The last row shows the same thing when there is no next row for <link><code>LEAD()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/window-function-descriptions.html#function_lead</link> .\n<link><code>LAG()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/window-function-descriptions.html#function_lag</link> and <link><code>LEAD()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/window-function-descriptions.html#function_lead</link> also serve to compute sums rather than differences. Consider this data set, which contains the first few numbers of the Fibonacci series:\nThe following query shows the <link><code>LAG()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/window-function-descriptions.html#function_lag</link> and <link><code>LEAD()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/window-function-descriptions.html#function_lead</link> values for the rows adjacent to the current row. It also uses those functions to add to the current row value the values from the preceding and following rows. The effect is to generate the next number in the Fibonacci series, and the next number after that:\nOne way to generate the initial set of Fibonacci numbers is to use a recursive common table expression. For an example, see <link>Fibonacci Series Generation&LINK&https://dev.mysql.com/doc/refman/8.4/with.html#common-table-expressions-recursive-fibonacci-series</link> .\nYou cannot use a negative value for the rows argument of this function.",
        "Demo": [
            "mysql> SELECT\nt, val,\nLAG(val) OVER w AS 'lag',\nLEAD(val) OVER w AS 'lead',\nval - LAG(val) OVER w AS 'lag diff',\nval - LEAD(val) OVER w AS 'lead diff'\nFROM series\nWINDOW w AS (ORDER BY t);\n+----------+------+------+------+----------+-----------+\n| t | val | lag | lead | lag diff | lead diff |\n+----------+------+------+------+----------+-----------+\n| 12:00:00 | 100 | NULL | 125 | NULL | -25 |\n| 13:00:00 | 125 | 100 | 132 | 25 | -7 |\n| 14:00:00 | 132 | 125 | 145 | 7 | -13 |\n| 15:00:00 | 145 | 132 | 140 | 13 | 5 |\n| 16:00:00 | 140 | 145 | 150 | -5 | -10 |\n| 17:00:00 | 150 | 140 | 200 | 10 | -50 |\n| 18:00:00 | 200 | 150 | NULL | 50 | NULL |\n+----------+------+------+------+----------+-----------+",
            "mysql> SELECT\nn,\nLAG(n, 1, 0) OVER w AS 'lag',\nLEAD(n, 1, 0) OVER w AS 'lead',\nn + LAG(n, 1, 0) OVER w AS 'next_n',\nn + LEAD(n, 1, 0) OVER w AS 'next_next_n'\nFROM fib\nWINDOW w AS (ORDER BY n);\n+------+------+------+--------+-------------+\n| n | lag | lead | next_n | next_next_n |\n+------+------+------+--------+-------------+\n| 1 | 0 | 1 | 1 | 2 |\n| 1 | 1 | 2 | 2 | 3 |\n| 2 | 1 | 3 | 3 | 5 |\n| 3 | 2 | 5 | 5 | 8 |\n| 5 | 3 | 8 | 8 | 13 |\n| 8 | 5 | 0 | 13 | 8 |\n+------+------+------+--------+-------------+"
        ]
    },
    {
        "Name": "LAST_INSERT_ID",
        "Tree": "(functionCall (scalarFunctionName (functionNameBase LAST_INSERT_ID)) ( ))",
        "Description": [
            "Value of the AUTOINCREMENT column for the last INSERT"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/information-functions.html#function_last-insert-id"
        ],
        "Detail": "<link><code>LAST_INSERT_ID()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/information-functions.html#function_last-insert-id</link> , <link><code>LAST_INSERT_ID( expr )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/information-functions.html#function_last-insert-id</link>\nWith no argument, <link><code>LAST_INSERT_ID()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/information-functions.html#function_last-insert-id</link> returns a <code>BIGINT UNSIGNED</code> (64-bit) value representing the first automatically generated value successfully inserted for an <code>AUTO_INCREMENT</code> column as a result of the most recently executed <link><code>INSERT</code>&LINK&https://dev.mysql.com/doc/refman/8.4/insert.html</link> statement. The value of <link><code>LAST_INSERT_ID()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/information-functions.html#function_last-insert-id</link> remains unchanged if no rows are successfully inserted.\nWith an argument, <link><code>LAST_INSERT_ID()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/information-functions.html#function_last-insert-id</link> returns an unsigned integer, or <code>NULL</code> if the argument is <code>NULL</code> .\nFor example, after inserting a row that generates an <code>AUTO_INCREMENT</code> value, you can get the value like this:\nThe currently executing statement does not affect the value of <link><code>LAST_INSERT_ID()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/information-functions.html#function_last-insert-id</link> . Suppose that you generate an <code>AUTO_INCREMENT</code> value with one statement, and then refer to <link><code>LAST_INSERT_ID()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/information-functions.html#function_last-insert-id</link> in a multiple-row <link><code>INSERT</code>&LINK&https://dev.mysql.com/doc/refman/8.4/insert.html</link> statement that inserts rows into a table with its own <code>AUTO_INCREMENT</code> column. The value of <link><code>LAST_INSERT_ID()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/information-functions.html#function_last-insert-id</link> remains stable in the second statement; its value for the second and later rows is not affected by the earlier row insertions. (You should be aware that, if you mix references to <link><code>LAST_INSERT_ID()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/information-functions.html#function_last-insert-id</link> and <link><code>LAST_INSERT_ID( expr )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/information-functions.html#function_last-insert-id</link> , the effect is undefined.)\nIf the previous statement returned an error, the value of <link><code>LAST_INSERT_ID()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/information-functions.html#function_last-insert-id</link> is undefined. For transactional tables, if the statement is rolled back due to an error, the value of <link><code>LAST_INSERT_ID()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/information-functions.html#function_last-insert-id</link> is left undefined. For manual <link><code>ROLLBACK</code>&LINK&https://dev.mysql.com/doc/refman/8.4/commit.html</link> , the value of <link><code>LAST_INSERT_ID()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/information-functions.html#function_last-insert-id</link> is not restored to that before the transaction; it remains as it was at the point of the <link><code>ROLLBACK</code>&LINK&https://dev.mysql.com/doc/refman/8.4/commit.html</link> .\nWithin the body of a stored routine (procedure or function) or a trigger, the value of <link><code>LAST_INSERT_ID()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/information-functions.html#function_last-insert-id</link> changes the same way as for statements executed outside the body of these kinds of objects. The effect of a stored routine or trigger upon the value of <link><code>LAST_INSERT_ID()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/information-functions.html#function_last-insert-id</link> that is seen by following statements depends on the kind of routine:\nIf a stored procedure executes statements that change the value of <link><code>LAST_INSERT_ID()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/information-functions.html#function_last-insert-id</link> , the changed value is seen by statements that follow the procedure call.\nFor stored functions and triggers that change the value, the value is restored when the function or trigger ends, so statements coming after it do not see a changed value.\nThe ID that was generated is maintained in the server on a per-connection basis . This means that the value returned by the function to a given client is the first <code>AUTO_INCREMENT</code> value generated for most recent statement affecting an <code>AUTO_INCREMENT</code> column by that client . This value cannot be affected by other clients, even if they generate <code>AUTO_INCREMENT</code> values of their own. This behavior ensures that each client can retrieve its own ID without concern for the activity of other clients, and without the need for locks or transactions.\nThe value of <link><code>LAST_INSERT_ID()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/information-functions.html#function_last-insert-id</link> is not changed if you set the <code>AUTO_INCREMENT</code> column of a row to a non- \" magic \" value (that is, a value that is not <code>NULL</code> and not <code>0</code> ).\nImportant\nIf you insert multiple rows using a single <link><code>INSERT</code>&LINK&https://dev.mysql.com/doc/refman/8.4/insert.html</link> statement, <link><code>LAST_INSERT_ID()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/information-functions.html#function_last-insert-id</link> returns the value generated for the first inserted row only . The reason for this is to make it possible to reproduce easily the same <link><code>INSERT</code>&LINK&https://dev.mysql.com/doc/refman/8.4/insert.html</link> statement against some other server.\nFor example:\nAlthough the second <link><code>INSERT</code>&LINK&https://dev.mysql.com/doc/refman/8.4/insert.html</link> statement inserted three new rows into <code>t</code> , the ID generated for the first of these rows was <code>2</code> , and it is this value that is returned by <link><code>LAST_INSERT_ID()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/information-functions.html#function_last-insert-id</link> for the following <link><code>SELECT</code>&LINK&https://dev.mysql.com/doc/refman/8.4/select.html</link> statement.\nIf you use <link><code>INSERT IGNORE</code>&LINK&https://dev.mysql.com/doc/refman/8.4/insert.html</link> and the row is ignored, the <link><code>LAST_INSERT_ID()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/information-functions.html#function_last-insert-id</link> remains unchanged from the current value (or 0 is returned if the connection has not yet performed a successful <code>INSERT</code> ) and, for non-transactional tables, the <code>AUTO_INCREMENT</code> counter is not incremented. For <code>InnoDB</code> tables, the <code>AUTO_INCREMENT</code> counter is incremented if <link><code>innodb_autoinc_lock_mode</code>&LINK&https://dev.mysql.com/doc/refman/8.4/innodb-parameters.html#sysvar_innodb_autoinc_lock_mode</link> is set to <code>1</code> or <code>2</code> , as demonstrated in the following example:\nFor more information, see <link>Section 17.6.1.6, \"AUTO_INCREMENT Handling in InnoDB\"&LINK&https://dev.mysql.com/doc/refman/8.4/innodb-auto-increment-handling.html</link> .\nIf <code>expr</code> is given as an argument to <link><code>LAST_INSERT_ID()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/information-functions.html#function_last-insert-id</link> , the value of the argument is returned by the function and is remembered as the next value to be returned by <link><code>LAST_INSERT_ID()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/information-functions.html#function_last-insert-id</link> . This can be used to simulate sequences:\nCreate a table to hold the sequence counter and initialize it:\nUse the table to generate sequence numbers like this:\nThe <link><code>UPDATE</code>&LINK&https://dev.mysql.com/doc/refman/8.4/update.html</link> statement increments the sequence counter and causes the next call to <link><code>LAST_INSERT_ID()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/information-functions.html#function_last-insert-id</link> to return the updated value. The <link><code>SELECT</code>&LINK&https://dev.mysql.com/doc/refman/8.4/select.html</link> statement retrieves that value. The <link><code>mysql_insert_id()</code>&LINK&https://dev.mysql.com/doc/c-api/8.4/en/mysql-insert-id.html</link> C API function can also be used to get the value. See <link>mysql_insert_id()&LINK&https://dev.mysql.com/doc/c-api/8.4/en/mysql-insert-id.html</link> .\nYou can generate sequences without calling <link><code>LAST_INSERT_ID()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/information-functions.html#function_last-insert-id</link> , but the utility of using the function this way is that the ID value is maintained in the server as the last automatically generated value. It is multi-user safe because multiple clients can issue the <link><code>UPDATE</code>&LINK&https://dev.mysql.com/doc/refman/8.4/update.html</link> statement and get their own sequence value with the <link><code>SELECT</code>&LINK&https://dev.mysql.com/doc/refman/8.4/select.html</link> statement (or <link><code>mysql_insert_id()</code>&LINK&https://dev.mysql.com/doc/c-api/8.4/en/mysql-insert-id.html</link> ), without affecting or being affected by other clients that generate their own sequence values.\nNote that <link><code>mysql_insert_id()</code>&LINK&https://dev.mysql.com/doc/c-api/8.4/en/mysql-insert-id.html</link> is only updated after <link><code>INSERT</code>&LINK&https://dev.mysql.com/doc/refman/8.4/insert.html</link> and <link><code>UPDATE</code>&LINK&https://dev.mysql.com/doc/refman/8.4/update.html</link> statements, so you cannot use the C API function to retrieve the value for <link><code>LAST_INSERT_ID( expr )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/information-functions.html#function_last-insert-id</link> after executing other SQL statements like <link><code>SELECT</code>&LINK&https://dev.mysql.com/doc/refman/8.4/select.html</link> or <link><code>SET</code>&LINK&https://dev.mysql.com/doc/refman/8.4/set-variable.html</link> .",
        "Demo": [
            "mysql> SELECT LAST_INSERT_ID();\n-> 195",
            "mysql> USE test;\nmysql> CREATE TABLE t (\nid INT AUTO_INCREMENT NOT NULL PRIMARY KEY,\nname VARCHAR(10) NOT NULL\n);\nmysql> INSERT INTO t VALUES (NULL, 'Bob');\nmysql> SELECT * FROM t;\n+----+------+\n| id | name |\n+----+------+\n| 1 | Bob |\n+----+------+\nmysql> SELECT LAST_INSERT_ID();\n+------------------+\n| LAST_INSERT_ID() |\n+------------------+\n| 1 |\n+------------------+\nmysql> INSERT INTO t VALUES\n(NULL, 'Mary'), (NULL, 'Jane'), (NULL, 'Lisa');\nmysql> SELECT * FROM t;\n+----+------+\n| id | name |\n+----+------+\n| 1 | Bob |\n| 2 | Mary |\n| 3 | Jane |\n| 4 | Lisa |\n+----+------+\nmysql> SELECT LAST_INSERT_ID();\n+------------------+\n| LAST_INSERT_ID() |\n+------------------+\n| 2 |\n+------------------+",
            "mysql> USE test;\nmysql> SELECT @@innodb_autoinc_lock_mode;\n+----------------------------+\n| @@innodb_autoinc_lock_mode |\n+----------------------------+\n| 1 |\n+----------------------------+\nmysql> CREATE TABLE `t` (\n`id` INT(11) NOT NULL AUTO_INCREMENT,\n`val` INT(11) DEFAULT NULL,\nPRIMARY KEY (`id`),\nUNIQUE KEY `i1` (`val`)\n) ENGINE=InnoDB;\n# Insert two rows\nmysql> INSERT INTO t (val) VALUES (1),(2);\n# With auto_increment_offset=1, the inserted rows\n# result in an AUTO_INCREMENT value of 3\nmysql> SHOW CREATE TABLE t\\G\n*************************** 1. row ***************************\nTable: t\nCreate Table: CREATE TABLE `t` (\n`id` int(11) NOT NULL AUTO_INCREMENT,\n`val` int(11) DEFAULT NULL,\nPRIMARY KEY (`id`),\nUNIQUE KEY `i1` (`val`)\n) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci\n# LAST_INSERT_ID() returns the first automatically generated\n# value that is successfully inserted for the AUTO_INCREMENT column\nmysql> SELECT LAST_INSERT_ID();\n+------------------+\n| LAST_INSERT_ID() |\n+------------------+\n| 1 |\n+------------------+\n# The attempted insertion of duplicate rows fail but errors are ignored\nmysql> INSERT IGNORE INTO t (val) VALUES (1),(2);\nQuery OK, 0 rows affected (0.00 sec)\nRecords: 2 Duplicates: 2 Warnings: 0\n# With innodb_autoinc_lock_mode=1, the AUTO_INCREMENT counter\n# is incremented for the ignored rows\nmysql> SHOW CREATE TABLE t\\G\n*************************** 1. row ***************************\nTable: t\nCreate Table: CREATE TABLE `t` (\n`id` int(11) NOT NULL AUTO_INCREMENT,\n`val` int(11) DEFAULT NULL,\nPRIMARY KEY (`id`),\nUNIQUE KEY `i1` (`val`)\n) ENGINE=InnoDB AUTO_INCREMENT=5 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci\n# The LAST_INSERT_ID is unchanged because the previous insert was unsuccessful\nmysql> SELECT LAST_INSERT_ID();\n+------------------+\n| LAST_INSERT_ID() |\n+------------------+\n| 1 |\n+------------------+",
            "mysql> UPDATE sequence SET id=LAST_INSERT_ID(id+1);\nmysql> SELECT LAST_INSERT_ID();"
        ]
    },
    {
        "Name": "LAST_VALUE",
        "Tree": "(functionCall (scalarFunctionName (functionNameBase LAST_VALUE)) ( ))",
        "Description": [
            "Value of argument from last row of window frame"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/window-function-descriptions.html#function_last-value"
        ],
        "Detail": "<link><code>LAST_VALUE( expr )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/window-function-descriptions.html#function_last-value</link> [ <code>null_treatment</code> ] <code>over_clause</code>\nReturns the value of <code>expr</code> from the last row of the window frame.\n<code>over_clause</code> is as described in <link>Section 14.20.2, \"Window Function Concepts and Syntax\"&LINK&https://dev.mysql.com/doc/refman/8.4/window-functions-usage.html</link> . <code>null_treatment</code> is as described in the section introduction.\nFor an example, see the <link><code>FIRST_VALUE()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/window-function-descriptions.html#function_first-value</link> function description.",
        "Demo": []
    },
    {
        "Name": "LCASE",
        "Tree": "(functionCall (scalarFunctionName (functionNameBase LCASE)) ( ))",
        "Description": [
            "Synonym for LOWER()"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/string-functions.html#function_lcase"
        ],
        "Detail": "<link><code>LCASE( str )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/string-functions.html#function_lcase</link>\n<link><code>LCASE()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/string-functions.html#function_lcase</link> is a synonym for <link><code>LOWER()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/string-functions.html#function_lower</link> .\n<code>LCASE()</code> used in a view is rewritten as <code>LOWER()</code> when storing the view's definition. (Bug #12844279)",
        "Demo": []
    },
    {
        "Name": "LEAD",
        "Tree": "(functionCall (scalarFunctionName (functionNameBase LEAD)) ( ))",
        "Description": [
            "Value of argument from row leading current row within partition"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/window-function-descriptions.html#function_lead"
        ],
        "Detail": "<link><code>LEAD( expr [, N [, default ]])</code>&LINK&https://dev.mysql.com/doc/refman/8.4/window-function-descriptions.html#function_lead</link> [ <code>null_treatment</code> ] <code>over_clause</code>\nReturns the value of <code>expr</code> from the row that leads (follows) the current row by <code>N</code> rows within its partition. If there is no such row, the return value is <code>default</code> . For example, if <code>N</code> is 3, the return value is <code>default</code> for the last three rows. If <code>N</code> or <code>default</code> are missing, the defaults are 1 and <code>NULL</code> , respectively.\n<code>N</code> must be a literal nonnegative integer. If <code>N</code> is 0, <code>expr</code> is evaluated for the current row.\n<code>N</code> cannot be <code>NULL</code> , and must be an integer in the range <code>0</code> to <code>2 63</code> , inclusive, in any of the following forms:\nan unsigned integer constant literal\na positional parameter marker ( <code>?</code> )\na user-defined variable\na local variable in a stored routine\n<code>over_clause</code> is as described in <link>Section 14.20.2, \"Window Function Concepts and Syntax\"&LINK&https://dev.mysql.com/doc/refman/8.4/window-functions-usage.html</link> . <code>null_treatment</code> is as described in the section introduction.\nFor an example, see the <link><code>LAG()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/window-function-descriptions.html#function_lag</link> function description.\nUse of a negative value for the rows argument of this function is not permitted.",
        "Demo": []
    },
    {
        "Name": "LEAST",
        "Tree": "(functionCall (scalarFunctionName (functionNameBase LEAST)) ( ))",
        "Description": [
            "Return the smallest argument"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/comparison-operators.html#function_least"
        ],
        "Detail": "<link><code>LEAST( value1 , value2 ,...)</code>&LINK&https://dev.mysql.com/doc/refman/8.4/comparison-operators.html#function_least</link>\nWith two or more arguments, returns the smallest (minimum-valued) argument. The arguments are compared using the following rules:\nIf any argument is <code>NULL</code> , the result is <code>NULL</code> . No comparison is needed.\nIf all arguments are integer-valued, they are compared as integers.\nIf at least one argument is double precision, they are compared as double-precision values. Otherwise, if at least one argument is a <link><code>DECIMAL</code>&LINK&https://dev.mysql.com/doc/refman/8.4/fixed-point-types.html</link> value, they are compared as <link><code>DECIMAL</code>&LINK&https://dev.mysql.com/doc/refman/8.4/fixed-point-types.html</link> values.\nIf the arguments comprise a mix of numbers and strings, they are compared as strings.\nIf any argument is a nonbinary (character) string, the arguments are compared as nonbinary strings.\nIn all other cases, the arguments are compared as binary strings.\nThe return type of <link><code>LEAST()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/comparison-operators.html#function_least</link> is the aggregated type of the comparison argument types.",
        "Demo": [
            "mysql> SELECT LEAST(2,0);\n-> 0\nmysql> SELECT LEAST(34.0,3.0,5.0,767.0);\n-> 3.0\nmysql> SELECT LEAST('B','A','C');\n-> 'A'"
        ]
    },
    {
        "Name": "LEFT",
        "Tree": "(functionCall (scalarFunctionName (functionNameBase LEFT)) ( ))",
        "Description": [
            "Return the leftmost number of characters as specified"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/string-functions.html#function_left"
        ],
        "Detail": "<link><code>LEFT( str , len )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/string-functions.html#function_left</link>\nReturns the leftmost <code>len</code> characters from the string <code>str</code> , or <code>NULL</code> if any argument is <code>NULL</code> .\nThis function is multibyte safe.",
        "Demo": [
            "mysql> SELECT LEFT('foobarbar', 5);\n-> 'fooba'"
        ]
    },
    {
        "Name": "LENGTH",
        "Tree": "(functionCall (scalarFunctionName (functionNameBase LENGTH)) ( ))",
        "Description": [
            "Return the length of a string in bytes"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/string-functions.html#function_length"
        ],
        "Detail": "<link><code>LENGTH( str )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/string-functions.html#function_length</link>\nReturns the length of the string <code>str</code> , measured in bytes. A multibyte character counts as multiple bytes. This means that for a string containing five 2-byte characters, <link><code>LENGTH()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/string-functions.html#function_length</link> returns <code>10</code> , whereas <link><code>CHAR_LENGTH()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/string-functions.html#function_char-length</link> returns <code>5</code> . Returns <code>NULL</code> if <code>str</code> is <code>NULL</code> .\nNote\nThe <code>Length()</code> OpenGIS spatial function is named <link><code>ST_Length()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/gis-linestring-property-functions.html#function_st-length</link> in MySQL.",
        "Demo": [
            "mysql> SELECT LENGTH('text');\n-> 4"
        ]
    },
    {
        "Name": "LineString",
        "Tree": "(functionCall (scalarFunctionName (functionNameBase LineString)) ( ))",
        "Description": [
            "Construct LineString from Point values"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/gis-mysql-specific-functions.html#function_linestring"
        ],
        "Detail": "<link><code>LineString( pt [, pt ] ...)</code>&LINK&https://dev.mysql.com/doc/refman/8.4/gis-mysql-specific-functions.html#function_linestring</link>\nConstructs a <code>LineString</code> value from a number of <code>Point</code> or WKB <code>Point</code> arguments. If the number of arguments is less than two, the return value is <code>NULL</code> .",
        "Demo": []
    },
    {
        "Name": "LN",
        "Tree": "(functionCall (scalarFunctionName (functionNameBase LN)) ( ))",
        "Description": [
            "Return the natural logarithm of the argument"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/mathematical-functions.html#function_ln"
        ],
        "Detail": "<link><code>LN( X )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/mathematical-functions.html#function_ln</link>\nReturns the natural logarithm of <code>X</code> ; that is, the base- e logarithm of <code>X</code> . If <code>X</code> is less than or equal to 0.0E0, the function returns <code>NULL</code> and a warning \" Invalid argument for logarithm \" is reported. Returns <code>NULL</code> if <code>X</code> is <code>NULL</code> .\nThis function is synonymous with <link><code>LOG( X )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/mathematical-functions.html#function_log</link> . The inverse of this function is the <link><code>EXP()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/mathematical-functions.html#function_exp</link> function.",
        "Demo": [
            "mysql> SELECT LN(2);\n-> 0.69314718055995\nmysql> SELECT LN(-2);\n-> NULL"
        ]
    },
    {
        "Name": "LOAD_FILE",
        "Tree": "(functionCall (scalarFunctionName (functionNameBase LOAD_FILE)) ( ))",
        "Description": [
            "Load the named file"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/string-functions.html#function_load-file"
        ],
        "Detail": "<link><code>LOAD_FILE( file_name )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/string-functions.html#function_load-file</link>\nReads the file and returns the file contents as a string. To use this function, the file must be located on the server host, you must specify the full path name to the file, and you must have the <link><code>FILE</code>&LINK&https://dev.mysql.com/doc/refman/8.4/privileges-provided.html#priv_file</link> privilege. The file must be readable by the server and its size less than <link><code>max_allowed_packet</code>&LINK&https://dev.mysql.com/doc/refman/8.4/server-system-variables.html#sysvar_max_allowed_packet</link> bytes. If the <link><code>secure_file_priv</code>&LINK&https://dev.mysql.com/doc/refman/8.4/server-system-variables.html#sysvar_secure_file_priv</link> system variable is set to a nonempty directory name, the file to be loaded must be located in that directory.\nIf the file does not exist or cannot be read because one of the preceding conditions is not satisfied, the function returns <code>NULL</code> .\nThe <link><code>character_set_filesystem</code>&LINK&https://dev.mysql.com/doc/refman/8.4/server-system-variables.html#sysvar_character_set_filesystem</link> system variable controls interpretation of file names that are given as literal strings.",
        "Demo": [
            "mysql> UPDATE t\nSET blob_col=LOAD_FILE('/tmp/picture')\nWHERE id=1;"
        ]
    },
    {
        "Name": "LOCALTIME",
        "Tree": "(functionCall (scalarFunctionName LOCALTIME) ( ))",
        "Description": [
            "Synonym for NOW()"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html#function_localtime"
        ],
        "Detail": "<link><code>LOCALTIME</code>&LINK&https://dev.mysql.com/doc/refman/8.4/date-and-time-functions.html#function_localtime</link> , <link><code>LOCALTIME([ fsp ])</code>&LINK&https://dev.mysql.com/doc/refman/8.4/date-and-time-functions.html#function_localtime</link>\n<link><code>LOCALTIME</code>&LINK&https://dev.mysql.com/doc/refman/8.4/date-and-time-functions.html#function_localtime</link> and <link><code>LOCALTIME()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/date-and-time-functions.html#function_localtime</link> are synonyms for <link><code>NOW()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/date-and-time-functions.html#function_now</link> .",
        "Demo": []
    },
    {
        "Name": "LOCALTIMESTAMP",
        "Tree": "(functionCall (scalarFunctionName LOCALTIMESTAMP) ( ))",
        "Description": [
            "Synonym for NOW()"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html#function_localtimestamp"
        ],
        "Detail": "<link><code>LOCALTIMESTAMP</code>&LINK&https://dev.mysql.com/doc/refman/8.4/date-and-time-functions.html#function_localtimestamp</link> , <link><code>LOCALTIMESTAMP([ fsp ])</code>&LINK&https://dev.mysql.com/doc/refman/8.4/date-and-time-functions.html#function_localtimestamp</link>\n<link><code>LOCALTIMESTAMP</code>&LINK&https://dev.mysql.com/doc/refman/8.4/date-and-time-functions.html#function_localtimestamp</link> and <link><code>LOCALTIMESTAMP()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/date-and-time-functions.html#function_localtimestamp</link> are synonyms for <link><code>NOW()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/date-and-time-functions.html#function_now</link> .",
        "Demo": []
    },
    {
        "Name": "LOCATE",
        "Tree": "(functionCall (scalarFunctionName (functionNameBase LOCATE)) ( ))",
        "Description": [
            "Return the position of the first occurrence of substring"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/string-functions.html#function_locate"
        ],
        "Detail": "<link><code>LOCATE( substr , str )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/string-functions.html#function_locate</link> , <link><code>LOCATE( substr , str , pos )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/string-functions.html#function_locate</link>\nThe first syntax returns the position of the first occurrence of substring <code>substr</code> in string <code>str</code> . The second syntax returns the position of the first occurrence of substring <code>substr</code> in string <code>str</code> , starting at position <code>pos</code> . Returns <code>0</code> if <code>substr</code> is not in <code>str</code> . Returns <code>NULL</code> if any argument is <code>NULL</code> .\nThis function is multibyte safe, and is case-sensitive only if at least one argument is a binary string.",
        "Demo": [
            "mysql> SELECT LOCATE('bar', 'foobarbar');\n-> 4\nmysql> SELECT LOCATE('xbar', 'foobar');\n-> 0\nmysql> SELECT LOCATE('bar', 'foobarbar', 5);\n-> 7"
        ]
    },
    {
        "Name": "LOG",
        "Tree": "(functionCall (scalarFunctionName (functionNameBase LOG)) ( ))",
        "Description": [
            "Return the natural logarithm of the first argument"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/mathematical-functions.html#function_log"
        ],
        "Detail": "<link><code>LOG( X )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/mathematical-functions.html#function_log</link> , <link><code>LOG( B , X )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/mathematical-functions.html#function_log</link>\nIf called with one parameter, this function returns the natural logarithm of <code>X</code> . If <code>X</code> is less than or equal to 0.0E0, the function returns <code>NULL</code> and a warning \" Invalid argument for logarithm \" is reported. Returns <code>NULL</code> if <code>X</code> or <code>B</code> is <code>NULL</code> .\nThe inverse of this function (when called with a single argument) is the <link><code>EXP()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/mathematical-functions.html#function_exp</link> function.\nIf called with two parameters, this function returns the logarithm of <code>X</code> to the base <code>B</code> . If <code>X</code> is less than or equal to 0, or if <code>B</code> is less than or equal to 1, then <code>NULL</code> is returned.\n<link><code>LOG( B , X )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/mathematical-functions.html#function_log</link> is equivalent to <link><code>LOG( X ) / LOG( B )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/mathematical-functions.html#function_log</link> .",
        "Demo": [
            "mysql> SELECT LOG(2);\n-> 0.69314718055995\nmysql> SELECT LOG(-2);\n-> NULL",
            "mysql> SELECT LOG(2,65536);\n-> 16\nmysql> SELECT LOG(10,100);\n-> 2\nmysql> SELECT LOG(1,100);\n-> NULL"
        ]
    },
    {
        "Name": "LOG10",
        "Tree": "(functionCall (scalarFunctionName (functionNameBase LOG10)) ( ))",
        "Description": [
            "Return the base-10 logarithm of the argument"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/mathematical-functions.html#function_log10"
        ],
        "Detail": "<link><code>LOG10( X )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/mathematical-functions.html#function_log10</link>\nReturns the base-10 logarithm of <code>X</code> . If <code>X</code> is less than or equal to 0.0E0, the function returns <code>NULL</code> and a warning \" Invalid argument for logarithm \" is reported. Returns <code>NULL</code> if <code>X</code> is <code>NULL</code> .\n<link><code>LOG10( X )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/mathematical-functions.html#function_log10</link> is equivalent to <link><code>LOG(10, X )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/mathematical-functions.html#function_log</link> .",
        "Demo": [
            "mysql> SELECT LOG10(2);\n-> 0.30102999566398\nmysql> SELECT LOG10(100);\n-> 2\nmysql> SELECT LOG10(-100);\n-> NULL"
        ]
    },
    {
        "Name": "LOG2",
        "Tree": "(functionCall (scalarFunctionName (functionNameBase LOG2)) ( ))",
        "Description": [
            "Return the base-2 logarithm of the argument"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/mathematical-functions.html#function_log2"
        ],
        "Detail": "<link><code>LOG2( X )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/mathematical-functions.html#function_log2</link>\nReturns the base-2 logarithm of <code>X</code> . If <code>X</code> is less than or equal to 0.0E0, the function returns <code>NULL</code> and a warning \" Invalid argument for logarithm \" is reported. Returns <code>NULL</code> if <code>X</code> is <code>NULL</code> .\n<link><code>LOG2()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/mathematical-functions.html#function_log2</link> is useful for finding out how many bits a number requires for storage. This function is equivalent to the expression <link><code>LOG( X ) / LOG(2)</code>&LINK&https://dev.mysql.com/doc/refman/8.4/mathematical-functions.html#function_log</link> .",
        "Demo": [
            "mysql> SELECT LOG2(65536);\n-> 16\nmysql> SELECT LOG2(-100);\n-> NULL"
        ]
    },
    {
        "Name": "LOWER",
        "Tree": "(functionCall (scalarFunctionName (functionNameBase LOWER)) ( ))",
        "Description": [
            "Return the argument in lowercase"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/string-functions.html#function_lower"
        ],
        "Detail": "<link><code>LOWER( str )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/string-functions.html#function_lower</link>\nReturns the string <code>str</code> with all characters changed to lowercase according to the current character set mapping, or <code>NULL</code> if <code>str</code> is <code>NULL</code> . The default character set is <code>utf8mb4</code> .\n<link><code>LOWER()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/string-functions.html#function_lower</link> (and <link><code>UPPER()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/string-functions.html#function_upper</link> ) are ineffective when applied to binary strings ( <link><code>BINARY</code>&LINK&https://dev.mysql.com/doc/refman/8.4/binary-varbinary.html</link> , <link><code>VARBINARY</code>&LINK&https://dev.mysql.com/doc/refman/8.4/binary-varbinary.html</link> , <link><code>BLOB</code>&LINK&https://dev.mysql.com/doc/refman/8.4/blob.html</link> ). To perform lettercase conversion of a binary string, first convert it to a nonbinary string using a character set appropriate for the data stored in the string:\nFor collations of Unicode character sets, <link><code>LOWER()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/string-functions.html#function_lower</link> and <link><code>UPPER()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/string-functions.html#function_upper</link> work according to the Unicode Collation Algorithm (UCA) version in the collation name, if there is one, and UCA 4.0.0 if no version is specified. For example, <code>utf8mb4_0900_ai_ci</code> and <code>utf8mb3_unicode_520_ci</code> work according to UCA 9.0.0 and 5.2.0, respectively, whereas <code>utf8mb3_unicode_ci</code> works according to UCA 4.0.0. See <link>Section 12.10.1, \"Unicode Character Sets\"&LINK&https://dev.mysql.com/doc/refman/8.4/charset-unicode-sets.html</link> .\nThis function is multibyte safe.\n<code>LCASE()</code> used within views is rewritten as <code>LOWER()</code> .",
        "Demo": [
            "mysql> SELECT LOWER('QUADRATICALLY');\n-> 'quadratically'",
            "mysql> SET @str = BINARY 'New York';\nmysql> SELECT LOWER(@str), LOWER(CONVERT(@str USING utf8mb4));\n+-------------+------------------------------------+\n| LOWER(@str) | LOWER(CONVERT(@str USING utf8mb4)) |\n+-------------+------------------------------------+\n| New York | new york |\n+-------------+------------------------------------+"
        ]
    },
    {
        "Name": "LPAD",
        "Tree": "(functionCall (scalarFunctionName (functionNameBase LPAD)) ( ))",
        "Description": [
            "Return the string argument, left-padded with the specified string"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/string-functions.html#function_lpad"
        ],
        "Detail": "<link><code>LPAD( str , len , padstr )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/string-functions.html#function_lpad</link>\nReturns the string <code>str</code> , left-padded with the string <code>padstr</code> to a length of <code>len</code> characters. If <code>str</code> is longer than <code>len</code> , the return value is shortened to <code>len</code> characters.\nReturns <code>NULL</code> if any of its arguments are <code>NULL</code> .",
        "Demo": [
            "mysql> SELECT LPAD('hi',4,'??');\n-> '??hi'\nmysql> SELECT LPAD('hi',1,'??');\n-> 'h'"
        ]
    },
    {
        "Name": "LTRIM",
        "Tree": "(functionCall (scalarFunctionName (functionNameBase LTRIM)) ( ))",
        "Description": [
            "Remove leading spaces"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/string-functions.html#function_ltrim"
        ],
        "Detail": "<link><code>LTRIM( str )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/string-functions.html#function_ltrim</link>\nReturns the string <code>str</code> with leading space characters removed. Returns <code>NULL</code> if <code>str</code> is <code>NULL</code> .\nThis function is multibyte safe.",
        "Demo": [
            "mysql> SELECT LTRIM(' barbar');\n-> 'barbar'"
        ]
    },
    {
        "Name": "MAKE_SET",
        "Tree": "(functionCall (scalarFunctionName (functionNameBase MAKE_SET)) ( ))",
        "Description": [
            "Return a set of comma-separated strings that have the\n      corresponding bit in bits set"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/string-functions.html#function_make-set"
        ],
        "Detail": "<link><code>MAKE_SET( bits , str1 , str2 ,...)</code>&LINK&https://dev.mysql.com/doc/refman/8.4/string-functions.html#function_make-set</link>\nReturns a set value (a string containing substrings separated by <code>,</code> characters) consisting of the strings that have the corresponding bit in <code>bits</code> set. <code>str1</code> corresponds to bit 0, <code>str2</code> to bit 1, and so on. <code>NULL</code> values in <code>str1</code> , <code>str2</code> , <code>...</code> are not appended to the result.",
        "Demo": [
            "mysql> SELECT MAKE_SET(1,'a','b','c');\n-> 'a'\nmysql> SELECT MAKE_SET(1 | 4,'hello','nice','world');\n-> 'hello,world'\nmysql> SELECT MAKE_SET(1 | 4,'hello','nice',NULL,'world');\n-> 'hello'\nmysql> SELECT MAKE_SET(0,'a','b','c');\n-> ''"
        ]
    },
    {
        "Name": "MAKEDATE",
        "Tree": "(functionCall (scalarFunctionName (functionNameBase MAKEDATE)) ( ))",
        "Description": [
            "Create a date from the year and day of year"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html#function_makedate"
        ],
        "Detail": "<link><code>MAKEDATE( year , dayofyear )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/date-and-time-functions.html#function_makedate</link>\nReturns a date, given year and day-of-year values. <code>dayofyear</code> must be greater than 0 or the result is <code>NULL</code> . The result is also <code>NULL</code> if either argument is <code>NULL</code> .",
        "Demo": [
            "mysql> SELECT MAKEDATE(2011,31), MAKEDATE(2011,32);\n-> '2011-01-31', '2011-02-01'\nmysql> SELECT MAKEDATE(2011,365), MAKEDATE(2014,365);\n-> '2011-12-31', '2014-12-31'\nmysql> SELECT MAKEDATE(2011,0);\n-> NULL"
        ]
    },
    {
        "Name": "MAKETIME",
        "Tree": "(functionCall (scalarFunctionName (functionNameBase MAKETIME)) ( ))",
        "Description": [
            "Create time from hour, minute, second"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html#function_maketime"
        ],
        "Detail": "<link><code>MAKETIME( hour , minute , second )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/date-and-time-functions.html#function_maketime</link>\nReturns a time value calculated from the <code>hour</code> , <code>minute</code> , and <code>second</code> arguments. Returns <code>NULL</code> if any of its arguments are <code>NULL</code> .\nThe <code>second</code> argument can have a fractional part.",
        "Demo": [
            "mysql> SELECT MAKETIME(12,15,30);\n-> '12:15:30'"
        ]
    },
    {
        "Name": "MASTER_POS_WAIT",
        "Tree": "(functionCall (scalarFunctionName (functionNameBase MASTER_POS_WAIT)) ( ))",
        "Description": [
            "Block until the replica has read and applied all updates up to the\n      specified position"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/replication-functions-synchronization.html#function_master-pos-wait"
        ],
        "Detail": "<link><code>MASTER_POS_WAIT( log_name , log_pos [, timeout ][, channel ])</code>&LINK&https://dev.mysql.com/doc/refman/8.4/replication-functions-synchronization.html#function_master-pos-wait</link>\nDeprecated alias for <link><code>SOURCE_POS_WAIT()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/replication-functions-synchronization.html#function_source-pos-wait</link> .",
        "Demo": []
    },
    {
        "Name": "MAX",
        "Tree": "(functionCall (aggregateWindowedFunction MAX ( )))",
        "Description": [
            "Return the maximum value"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/aggregate-functions.html#function_max"
        ],
        "Detail": "<link><code>MAX([DISTINCT] expr ) [ over_clause ]</code>&LINK&https://dev.mysql.com/doc/refman/8.4/aggregate-functions.html#function_max</link>\nReturns the maximum value of <code>expr</code> . <link><code>MAX()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/aggregate-functions.html#function_max</link> may take a string argument; in such cases, it returns the maximum string value. See <link>Section 10.3.1, \"How MySQL Uses Indexes\"&LINK&https://dev.mysql.com/doc/refman/8.4/mysql-indexes.html</link> . The <code>DISTINCT</code> keyword can be used to find the maximum of the distinct values of <code>expr</code> , however, this produces the same result as omitting <code>DISTINCT</code> .\nIf there are no matching rows, or if <code>expr</code> is <code>NULL</code> , <link><code>MAX()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/aggregate-functions.html#function_max</link> returns <code>NULL</code> .\nThis function executes as a window function if <code>over_clause</code> is present. <code>over_clause</code> is as described in <link>Section 14.20.2, \"Window Function Concepts and Syntax\"&LINK&https://dev.mysql.com/doc/refman/8.4/window-functions-usage.html</link> ; it cannot be used with <code>DISTINCT</code> .\nFor <link><code>MAX()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/aggregate-functions.html#function_max</link> , MySQL currently compares <link><code>ENUM</code>&LINK&https://dev.mysql.com/doc/refman/8.4/enum.html</link> and <link><code>SET</code>&LINK&https://dev.mysql.com/doc/refman/8.4/set.html</link> columns by their string value rather than by the string's relative position in the set. This differs from how <code>ORDER BY</code> compares them.",
        "Demo": [
            "mysql> SELECT student_name, MIN(test_score), MAX(test_score)\nFROM student\nGROUP BY student_name;"
        ]
    },
    {
        "Name": "MBRContains",
        "Tree": "(functionCall (scalarFunctionName (functionNameBase MBRContains)) ( ))",
        "Description": [
            "Whether MBR of one geometry contains MBR of another"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/spatial-relation-functions-mbr.html#function_mbrcontains"
        ],
        "Detail": "<link><code>MBRContains( g1 , g2 )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/spatial-relation-functions-mbr.html#function_mbrcontains</link>\nReturns 1 or 0 to indicate whether the minimum bounding rectangle of <code>g1</code> contains the minimum bounding rectangle of <code>g2</code> . This tests the opposite relationship as <link><code>MBRWithin()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/spatial-relation-functions-mbr.html#function_mbrwithin</link> .\n<link><code>MBRContains()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/spatial-relation-functions-mbr.html#function_mbrcontains</link> handles its arguments as described in the introduction to this section.",
        "Demo": [
            "mysql> SET @g1 = ST_GeomFromText('Polygon((0 0,0 3,3 3,3 0,0 0))');\nmysql> SET @g2 = ST_GeomFromText('Point(1 1)');\nmysql> SELECT MBRContains(@g1,@g2), MBRWithin(@g2,@g1);\n+----------------------+--------------------+\n| MBRContains(@g1,@g2) | MBRWithin(@g2,@g1) |\n+----------------------+--------------------+\n| 1 | 1 |\n+----------------------+--------------------+"
        ]
    },
    {
        "Name": "MBRCoveredBy",
        "Tree": "(functionCall (fullId (uid (simpleId MBRCoveredBy))) ( ))",
        "Description": [
            "Whether one MBR is covered by another"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/spatial-relation-functions-mbr.html#function_mbrcoveredby"
        ],
        "Detail": "<link><code>MBRCoveredBy( g1 , g2 )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/spatial-relation-functions-mbr.html#function_mbrcoveredby</link>\nReturns 1 or 0 to indicate whether the minimum bounding rectangle of <code>g1</code> is covered by the minimum bounding rectangle of <code>g2</code> . This tests the opposite relationship as <link><code>MBRCovers()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/spatial-relation-functions-mbr.html#function_mbrcovers</link> .\n<link><code>MBRCoveredBy()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/spatial-relation-functions-mbr.html#function_mbrcoveredby</link> handles its arguments as described in the introduction to this section.",
        "Demo": []
    },
    {
        "Name": "MBRCovers",
        "Tree": "(functionCall (fullId (uid (simpleId MBRCovers))) ( ))",
        "Description": [
            "Whether one MBR covers another"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/spatial-relation-functions-mbr.html#function_mbrcovers"
        ],
        "Detail": "<link><code>MBRCovers( g1 , g2 )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/spatial-relation-functions-mbr.html#function_mbrcovers</link>\nReturns 1 or 0 to indicate whether the minimum bounding rectangle of <code>g1</code> covers the minimum bounding rectangle of <code>g2</code> . This tests the opposite relationship as <link><code>MBRCoveredBy()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/spatial-relation-functions-mbr.html#function_mbrcoveredby</link> . See the description of <link><code>MBRCoveredBy()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/spatial-relation-functions-mbr.html#function_mbrcoveredby</link> for examples.\n<link><code>MBRCovers()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/spatial-relation-functions-mbr.html#function_mbrcovers</link> handles its arguments as described in the introduction to this section.",
        "Demo": []
    },
    {
        "Name": "MBRDisjoint",
        "Tree": "(functionCall (scalarFunctionName (functionNameBase MBRDisjoint)) ( ))",
        "Description": [
            "Whether MBRs of two geometries are disjoint"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/spatial-relation-functions-mbr.html#function_mbrdisjoint"
        ],
        "Detail": "<link><code>MBRDisjoint( g1 , g2 )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/spatial-relation-functions-mbr.html#function_mbrdisjoint</link>\nReturns 1 or 0 to indicate whether the minimum bounding rectangles of the two geometries <code>g1</code> and <code>g2</code> are disjoint (do not intersect).\n<link><code>MBRDisjoint()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/spatial-relation-functions-mbr.html#function_mbrdisjoint</link> handles its arguments as described in the introduction to this section.",
        "Demo": []
    },
    {
        "Name": "MBREquals",
        "Tree": "(functionCall (fullId (uid (simpleId MBREquals))) ( ))",
        "Description": [
            "Whether MBRs of two geometries are equal"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/spatial-relation-functions-mbr.html#function_mbrequals"
        ],
        "Detail": "<link><code>MBREquals( g1 , g2 )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/spatial-relation-functions-mbr.html#function_mbrequals</link>\nReturns 1 or 0 to indicate whether the minimum bounding rectangles of the two geometries <code>g1</code> and <code>g2</code> are the same.\n<link><code>MBREquals()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/spatial-relation-functions-mbr.html#function_mbrequals</link> handles its arguments as described in the introduction to this section, except that it does not return <code>NULL</code> for empty geometry arguments.",
        "Demo": []
    },
    {
        "Name": "MBRIntersects",
        "Tree": "(functionCall (scalarFunctionName (functionNameBase MBRIntersects)) ( ))",
        "Description": [
            "Whether MBRs of two geometries intersect"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/spatial-relation-functions-mbr.html#function_mbrintersects"
        ],
        "Detail": "<link><code>MBRIntersects( g1 , g2 )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/spatial-relation-functions-mbr.html#function_mbrintersects</link>\nReturns 1 or 0 to indicate whether the minimum bounding rectangles of the two geometries <code>g1</code> and <code>g2</code> intersect.\n<link><code>MBRIntersects()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/spatial-relation-functions-mbr.html#function_mbrintersects</link> handles its arguments as described in the introduction to this section.",
        "Demo": []
    },
    {
        "Name": "MBROverlaps",
        "Tree": "(functionCall (scalarFunctionName (functionNameBase MBROverlaps)) ( ))",
        "Description": [
            "Whether MBRs of two geometries overlap"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/spatial-relation-functions-mbr.html#function_mbroverlaps"
        ],
        "Detail": "<link><code>MBROverlaps( g1 , g2 )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/spatial-relation-functions-mbr.html#function_mbroverlaps</link>\nTwo geometries spatially overlap if they intersect and their intersection results in a geometry of the same dimension but not equal to either of the given geometries.\nThis function returns 1 or 0 to indicate whether the minimum bounding rectangles of the two geometries <code>g1</code> and <code>g2</code> overlap.\n<link><code>MBROverlaps()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/spatial-relation-functions-mbr.html#function_mbroverlaps</link> handles its arguments as described in the introduction to this section.",
        "Demo": []
    },
    {
        "Name": "MBRTouches",
        "Tree": "(functionCall (scalarFunctionName (functionNameBase MBRTouches)) ( ))",
        "Description": [
            "Whether MBRs of two geometries touch"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/spatial-relation-functions-mbr.html#function_mbrtouches"
        ],
        "Detail": "<link><code>MBRTouches( g1 , g2 )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/spatial-relation-functions-mbr.html#function_mbrtouches</link>\nTwo geometries spatially touch if their interiors do not intersect, but the boundary of one of the geometries intersects either the boundary or the interior of the other.\nThis function returns 1 or 0 to indicate whether the minimum bounding rectangles of the two geometries <code>g1</code> and <code>g2</code> touch.\n<link><code>MBRTouches()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/spatial-relation-functions-mbr.html#function_mbrtouches</link> handles its arguments as described in the introduction to this section.",
        "Demo": []
    },
    {
        "Name": "MBRWithin",
        "Tree": "(functionCall (scalarFunctionName (functionNameBase MBRWithin)) ( ))",
        "Description": [
            "Whether MBR of one geometry is within MBR of another"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/spatial-relation-functions-mbr.html#function_mbrwithin"
        ],
        "Detail": "<link><code>MBRWithin( g1 , g2 )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/spatial-relation-functions-mbr.html#function_mbrwithin</link>\nReturns 1 or 0 to indicate whether the minimum bounding rectangle of <code>g1</code> is within the minimum bounding rectangle of <code>g2</code> . This tests the opposite relationship as <link><code>MBRContains()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/spatial-relation-functions-mbr.html#function_mbrcontains</link> .\n<link><code>MBRWithin()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/spatial-relation-functions-mbr.html#function_mbrwithin</link> handles its arguments as described in the introduction to this section.",
        "Demo": [
            "mysql> SET @g1 = ST_GeomFromText('Polygon((0 0,0 3,3 3,3 0,0 0))');\nmysql> SET @g2 = ST_GeomFromText('Polygon((0 0,0 5,5 5,5 0,0 0))');\nmysql> SELECT MBRWithin(@g1,@g2), MBRWithin(@g2,@g1);\n+--------------------+--------------------+\n| MBRWithin(@g1,@g2) | MBRWithin(@g2,@g1) |\n+--------------------+--------------------+\n| 1 | 0 |\n+--------------------+--------------------+"
        ]
    },
    {
        "Name": "MD5",
        "Tree": "(functionCall (scalarFunctionName (functionNameBase MD5)) ( ))",
        "Description": [
            "Calculate MD5 checksum"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/encryption-functions.html#function_md5"
        ],
        "Detail": "<link><code>MD5( str )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/encryption-functions.html#function_md5</link>\nCalculates an MD5 128-bit checksum for the string. The value is returned as a string of 32 hexadecimal digits, or <code>NULL</code> if the argument was <code>NULL</code> . The return value can, for example, be used as a hash key. See the notes at the beginning of this section about storing hash values efficiently.\nThe return value is a string in the connection character set.\nIf FIPS mode is enabled, <code>MD5()</code> returns <code>NULL</code> . See <link>Section 8.8, \"FIPS Support\"&LINK&https://dev.mysql.com/doc/refman/8.4/fips-mode.html</link> .\nThis is the \" RSA Data Security, Inc. MD5 Message-Digest Algorithm. \"\nSee the note regarding the MD5 algorithm at the beginning this section.",
        "Demo": [
            "mysql> SELECT MD5('testing');\n-> 'ae2b1fca515949e5d54fb22b8ed95575'"
        ]
    },
    {
        "Name": "MICROSECOND",
        "Tree": "(functionCall (scalarFunctionName (functionNameBase MICROSECOND)) ( ))",
        "Description": [
            "Return the microseconds from argument"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html#function_microsecond"
        ],
        "Detail": "<link><code>MICROSECOND( expr )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/date-and-time-functions.html#function_microsecond</link>\nReturns the microseconds from the time or datetime expression <code>expr</code> as a number in the range from <code>0</code> to <code>999999</code> . Returns <code>NULL</code> if <code>expr</code> is <code>NULL</code> .",
        "Demo": [
            "mysql> SELECT MICROSECOND('12:00:00.123456');\n-> 123456\nmysql> SELECT MICROSECOND('2019-12-31 23:59:59.000010');\n-> 10"
        ]
    },
    {
        "Name": "MID",
        "Tree": "(functionCall (scalarFunctionName MID) ( ))",
        "Description": [
            "Return a substring starting from the specified position"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/string-functions.html#function_mid"
        ],
        "Detail": "<link><code>MID( str , pos , len )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/string-functions.html#function_mid</link>\n<link><code>MID( str , pos , len )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/string-functions.html#function_mid</link> is a synonym for <link><code>SUBSTRING( str , pos , len )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/string-functions.html#function_substring</link> .",
        "Demo": []
    },
    {
        "Name": "MIN",
        "Tree": "(functionCall (aggregateWindowedFunction MIN ( )))",
        "Description": [
            "Return the minimum value"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/aggregate-functions.html#function_min"
        ],
        "Detail": "<link><code>MIN([DISTINCT] expr ) [ over_clause ]</code>&LINK&https://dev.mysql.com/doc/refman/8.4/aggregate-functions.html#function_min</link>\nReturns the minimum value of <code>expr</code> . <link><code>MIN()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/aggregate-functions.html#function_min</link> may take a string argument; in such cases, it returns the minimum string value. See <link>Section 10.3.1, \"How MySQL Uses Indexes\"&LINK&https://dev.mysql.com/doc/refman/8.4/mysql-indexes.html</link> . The <code>DISTINCT</code> keyword can be used to find the minimum of the distinct values of <code>expr</code> , however, this produces the same result as omitting <code>DISTINCT</code> .\nIf there are no matching rows, or if <code>expr</code> is <code>NULL</code> , <link><code>MIN()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/aggregate-functions.html#function_min</link> returns <code>NULL</code> .\nThis function executes as a window function if <code>over_clause</code> is present. <code>over_clause</code> is as described in <link>Section 14.20.2, \"Window Function Concepts and Syntax\"&LINK&https://dev.mysql.com/doc/refman/8.4/window-functions-usage.html</link> ; it cannot be used with <code>DISTINCT</code> .\nFor <link><code>MIN()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/aggregate-functions.html#function_min</link> , MySQL currently compares <link><code>ENUM</code>&LINK&https://dev.mysql.com/doc/refman/8.4/enum.html</link> and <link><code>SET</code>&LINK&https://dev.mysql.com/doc/refman/8.4/set.html</link> columns by their string value rather than by the string's relative position in the set. This differs from how <code>ORDER BY</code> compares them.",
        "Demo": [
            "mysql> SELECT student_name, MIN(test_score), MAX(test_score)\nFROM student\nGROUP BY student_name;"
        ]
    },
    {
        "Name": "MINUTE",
        "Tree": "(functionCall (scalarFunctionName (functionNameBase MINUTE)) ( ))",
        "Description": [
            "Return the minute from the argument"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html#function_minute"
        ],
        "Detail": "<link><code>MINUTE( time )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/date-and-time-functions.html#function_minute</link>\nReturns the minute for <code>time</code> , in the range <code>0</code> to <code>59</code> , or <code>NULL</code> if <code>time</code> is <code>NULL</code> .",
        "Demo": [
            "mysql> SELECT MINUTE('2008-02-03 10:05:03');\n-> 5"
        ]
    },
    {
        "Name": "MOD",
        "Tree": "(functionCall (scalarFunctionName (functionNameBase MOD)) ( ))",
        "Description": [
            "Return the remainder"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/mathematical-functions.html#function_mod"
        ],
        "Detail": "<link><code>MOD( N , M )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/mathematical-functions.html#function_mod</link> , <link><code>N % M</code>&LINK&https://dev.mysql.com/doc/refman/8.4/arithmetic-functions.html#operator_mod</link> , <link><code>N MOD M</code>&LINK&https://dev.mysql.com/doc/refman/8.4/arithmetic-functions.html#operator_mod</link>\nModulo operation. Returns the remainder of <code>N</code> divided by <code>M</code> . Returns <code>NULL</code> if <code>M</code> or <code>N</code> is <code>NULL</code> .\nThis function is safe to use with <link><code>BIGINT</code>&LINK&https://dev.mysql.com/doc/refman/8.4/integer-types.html</link> values.\n<link><code>MOD()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/mathematical-functions.html#function_mod</link> also works on values that have a fractional part and returns the exact remainder after division:\n<link><code>MOD( N ,0)</code>&LINK&https://dev.mysql.com/doc/refman/8.4/mathematical-functions.html#function_mod</link> returns <code>NULL</code> .",
        "Demo": [
            "mysql> SELECT MOD(234, 10);\n-> 4\nmysql> SELECT 253 % 7;\n-> 1\nmysql> SELECT MOD(29,9);\n-> 2\nmysql> SELECT 29 MOD 9;\n-> 2",
            "mysql> SELECT MOD(34.5,3);\n-> 1.5"
        ]
    },
    {
        "Name": "MONTH",
        "Tree": "(functionCall (scalarFunctionName (functionNameBase MONTH)) ( ))",
        "Description": [
            "Return the month from the date passed"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html#function_month"
        ],
        "Detail": "<link><code>MONTH( date )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/date-and-time-functions.html#function_month</link>\nReturns the month for <code>date</code> , in the range <code>1</code> to <code>12</code> for January to December, or <code>0</code> for dates such as <code>'0000-00-00'</code> or <code>'2008-00-00'</code> that have a zero month part. Returns <code>NULL</code> if <code>date</code> is <code>NULL</code> .",
        "Demo": [
            "mysql> SELECT MONTH('2008-02-03');\n-> 2"
        ]
    },
    {
        "Name": "MONTHNAME",
        "Tree": "(functionCall (scalarFunctionName (functionNameBase MONTHNAME)) ( ))",
        "Description": [
            "Return the name of the month"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html#function_monthname"
        ],
        "Detail": "<link><code>MONTHNAME( date )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/date-and-time-functions.html#function_monthname</link>\nReturns the full name of the month for <code>date</code> . The language used for the name is controlled by the value of the <link><code>lc_time_names</code>&LINK&https://dev.mysql.com/doc/refman/8.4/server-system-variables.html#sysvar_lc_time_names</link> system variable ( <link>Section 12.16, \"MySQL Server Locale Support\"&LINK&https://dev.mysql.com/doc/refman/8.4/locale-support.html</link> ). Returns <code>NULL</code> if <code>date</code> is <code>NULL</code> .",
        "Demo": [
            "mysql> SELECT MONTHNAME('2008-02-03');\n-> 'February'"
        ]
    },
    {
        "Name": "MultiLineString",
        "Tree": "(functionCall (scalarFunctionName (functionNameBase MultiLineString)) ( ))",
        "Description": [
            "Contruct MultiLineString from LineString values"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/gis-mysql-specific-functions.html#function_multilinestring"
        ],
        "Detail": "<link><code>MultiLineString( ls [, ls ] ...)</code>&LINK&https://dev.mysql.com/doc/refman/8.4/gis-mysql-specific-functions.html#function_multilinestring</link>\nConstructs a <code>MultiLineString</code> value using <code>LineString</code> or WKB <code>LineString</code> arguments.",
        "Demo": []
    },
    {
        "Name": "MultiPoint",
        "Tree": "(functionCall (scalarFunctionName (functionNameBase MultiPoint)) ( ))",
        "Description": [
            "Construct MultiPoint from Point values"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/gis-mysql-specific-functions.html#function_multipoint"
        ],
        "Detail": "<link><code>MultiPoint( pt [, pt2 ] ...)</code>&LINK&https://dev.mysql.com/doc/refman/8.4/gis-mysql-specific-functions.html#function_multipoint</link>\nConstructs a <code>MultiPoint</code> value using <code>Point</code> or WKB <code>Point</code> arguments.",
        "Demo": []
    },
    {
        "Name": "MultiPolygon",
        "Tree": "(functionCall (scalarFunctionName (functionNameBase MultiPolygon)) ( ))",
        "Description": [
            "Construct MultiPolygon from Polygon values"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/gis-mysql-specific-functions.html#function_multipolygon"
        ],
        "Detail": "<link><code>MultiPolygon( poly [, poly ] ...)</code>&LINK&https://dev.mysql.com/doc/refman/8.4/gis-mysql-specific-functions.html#function_multipolygon</link>\nConstructs a <code>MultiPolygon</code> value from a set of <code>Polygon</code> or WKB <code>Polygon</code> arguments.",
        "Demo": []
    },
    {
        "Name": "NAME_CONST",
        "Tree": "(functionCall (scalarFunctionName (functionNameBase NAME_CONST)) ( ))",
        "Description": [
            "Cause the column to have the given name"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/miscellaneous-functions.html#function_name-const"
        ],
        "Detail": "<link><code>NAME_CONST( name , value )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/miscellaneous-functions.html#function_name-const</link>\nReturns the given value. When used to produce a result set column, <link><code>NAME_CONST()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/miscellaneous-functions.html#function_name-const</link> causes the column to have the given name. The arguments should be constants.\nThis function is for internal use only. The server uses it when writing statements from stored programs that contain references to local program variables, as described in <link>Section 27.7, \"Stored Program Binary Logging\"&LINK&https://dev.mysql.com/doc/refman/8.4/stored-programs-logging.html</link> . You might see this function in the output from <link>mysqlbinlog&LINK&https://dev.mysql.com/doc/refman/8.4/mysqlbinlog.html</link> .\nFor your applications, you can obtain exactly the same result as in the example just shown by using simple aliasing, like this:\nSee <link>Section 15.2.13, \"SELECT Statement\"&LINK&https://dev.mysql.com/doc/refman/8.4/select.html</link> , for more information about column aliases.",
        "Demo": [
            "mysql> SELECT NAME_CONST('myname', 14);\n+--------+\n| myname |\n+--------+\n| 14 |\n+--------+"
        ]
    },
    {
        "Name": "NOW",
        "Tree": "(functionCall (scalarFunctionName NOW) ( ))",
        "Description": [
            "Return the current date and time"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html#function_now"
        ],
        "Detail": "<link><code>NOW([ fsp ])</code>&LINK&https://dev.mysql.com/doc/refman/8.4/date-and-time-functions.html#function_now</link>\nReturns the current date and time as a value in <code>' YYYY-MM-DD hh:mm:ss '</code> or <code>YYYYMMDDhhmmss</code> format, depending on whether the function is used in string or numeric context. The value is expressed in the session time zone.\nIf the <code>fsp</code> argument is given to specify a fractional seconds precision from 0 to 6, the return value includes a fractional seconds part of that many digits.\n<link><code>NOW()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/date-and-time-functions.html#function_now</link> returns a constant time that indicates the time at which the statement began to execute. (Within a stored function or trigger, <link><code>NOW()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/date-and-time-functions.html#function_now</link> returns the time at which the function or triggering statement began to execute.) This differs from the behavior for <link><code>SYSDATE()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/date-and-time-functions.html#function_sysdate</link> , which returns the exact time at which it executes.\nIn addition, the <code>SET TIMESTAMP</code> statement affects the value returned by <link><code>NOW()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/date-and-time-functions.html#function_now</link> but not by <link><code>SYSDATE()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/date-and-time-functions.html#function_sysdate</link> . This means that timestamp settings in the binary log have no effect on invocations of <link><code>SYSDATE()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/date-and-time-functions.html#function_sysdate</link> . Setting the timestamp to a nonzero value causes each subsequent invocation of <link><code>NOW()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/date-and-time-functions.html#function_now</link> to return that value. Setting the timestamp to zero cancels this effect so that <link><code>NOW()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/date-and-time-functions.html#function_now</link> once again returns the current date and time.\nSee the description for <link><code>SYSDATE()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/date-and-time-functions.html#function_sysdate</link> for additional information about the differences between the two functions.",
        "Demo": [
            "mysql> SELECT NOW();\n-> '2007-12-15 23:50:26'\nmysql> SELECT NOW() + 0;\n-> 20071215235026.000000",
            "mysql> SELECT NOW(), SLEEP(2), NOW();\n+---------------------+----------+---------------------+\n| NOW() | SLEEP(2) | NOW() |\n+---------------------+----------+---------------------+\n| 2006-04-12 13:47:36 | 0 | 2006-04-12 13:47:36 |\n+---------------------+----------+---------------------+\nmysql> SELECT SYSDATE(), SLEEP(2), SYSDATE();\n+---------------------+----------+---------------------+\n| SYSDATE() | SLEEP(2) | SYSDATE() |\n+---------------------+----------+---------------------+\n| 2006-04-12 13:47:44 | 0 | 2006-04-12 13:47:46 |\n+---------------------+----------+---------------------+"
        ]
    },
    {
        "Name": "NTH_VALUE",
        "Tree": "(functionCall (scalarFunctionName (functionNameBase NTH_VALUE)) ( ))",
        "Description": [
            "Value of argument from N-th row of window frame"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/window-function-descriptions.html#function_nth-value"
        ],
        "Detail": "<link><code>NTH_VALUE( expr , N )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/window-function-descriptions.html#function_nth-value</link> [ <code>from_first_last</code> ] [ <code>null_treatment</code> ] <code>over_clause</code>\nReturns the value of <code>expr</code> from the <code>N</code> -th row of the window frame. If there is no such row, the return value is <code>NULL</code> .\n<code>N</code> must be a literal positive integer.\n<code>from_first_last</code> is part of the SQL standard, but the MySQL implementation permits only <code>FROM FIRST</code> (which is also the default). This means that calculations begin at the first row of the window. <code>FROM LAST</code> is parsed, but produces an error. To obtain the same effect as <code>FROM LAST</code> (begin calculations at the last row of the window), use <code>ORDER BY</code> to sort in reverse order.\n<code>over_clause</code> is as described in <link>Section 14.20.2, \"Window Function Concepts and Syntax\"&LINK&https://dev.mysql.com/doc/refman/8.4/window-functions-usage.html</link> . <code>null_treatment</code> is as described in the section introduction.\nFor an example, see the <link><code>FIRST_VALUE()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/window-function-descriptions.html#function_first-value</link> function description.\nYou cannot use <code>NULL</code> for the row argument of this function.",
        "Demo": []
    },
    {
        "Name": "NTILE",
        "Tree": "(functionCall (scalarFunctionName (functionNameBase NTILE)) ( ))",
        "Description": [
            "Bucket number of current row within its partition."
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/window-function-descriptions.html#function_ntile"
        ],
        "Detail": "<link><code>NTILE( N )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/window-function-descriptions.html#function_ntile</link> <code>over_clause</code>\nDivides a partition into <code>N</code> groups (buckets), assigns each row in the partition its bucket number, and returns the bucket number of the current row within its partition. For example, if <code>N</code> is 4, <code>NTILE()</code> divides rows into four buckets. If <code>N</code> is 100, <code>NTILE()</code> divides rows into 100 buckets.\n<code>N</code> must be a literal positive integer. Bucket number return values range from 1 to <code>N</code> .\n<code>N</code> cannot be <code>NULL</code> , and must be an integer in the range <code>0</code> to <code>2 63</code> , inclusive, in any of the following forms:\nan unsigned integer constant literal\na positional parameter marker ( <code>?</code> )\na user-defined variable\na local variable in a stored routine\nThis function should be used with <code>ORDER BY</code> to sort partition rows into the desired order.\n<code>over_clause</code> is as described in <link>Section 14.20.2, \"Window Function Concepts and Syntax\"&LINK&https://dev.mysql.com/doc/refman/8.4/window-functions-usage.html</link> .\nThe following query shows, for the set of values in the <code>val</code> column, the percentile values resulting from dividing the rows into two or four groups. For reference, the query also displays row numbers using <link><code>ROW_NUMBER()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/window-function-descriptions.html#function_row-number</link> :\nThe construct <code>NTILE(NULL)</code> is not permitted.",
        "Demo": [
            "mysql> SELECT\nval,\nROW_NUMBER() OVER w AS 'row_number',\nNTILE(2) OVER w AS 'ntile2',\nNTILE(4) OVER w AS 'ntile4'\nFROM numbers\nWINDOW w AS (ORDER BY val);\n+------+------------+--------+--------+\n| val | row_number | ntile2 | ntile4 |\n+------+------------+--------+--------+\n| 1 | 1 | 1 | 1 |\n| 1 | 2 | 1 | 1 |\n| 2 | 3 | 1 | 1 |\n| 3 | 4 | 1 | 2 |\n| 3 | 5 | 1 | 2 |\n| 3 | 6 | 2 | 3 |\n| 4 | 7 | 2 | 3 |\n| 4 | 8 | 2 | 4 |\n| 5 | 9 | 2 | 4 |\n+------+------------+--------+--------+"
        ]
    },
    {
        "Name": "NULLIF",
        "Tree": "(functionCall (scalarFunctionName (functionNameBase NULLIF)) ( ))",
        "Description": [
            "Return NULL if expr1 = expr2"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/flow-control-functions.html#function_nullif"
        ],
        "Detail": "<link><code>NULLIF( expr1 , expr2 )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/flow-control-functions.html#function_nullif</link>\nReturns <code>NULL</code> if <code>expr1 = expr2</code> is true, otherwise returns <code>expr1</code> . This is the same as <link><code>CASE WHEN expr1 = expr2 THEN NULL ELSE expr1 END</code>&LINK&https://dev.mysql.com/doc/refman/8.4/flow-control-functions.html#operator_case</link> .\nThe return value has the same type as the first argument.\nNote\nMySQL evaluates <code>expr1</code> twice if the arguments are not equal.",
        "Demo": [
            "mysql> SELECT NULLIF(1,1);\n-> NULL\nmysql> SELECT NULLIF(1,2);\n-> 1"
        ]
    },
    {
        "Name": "OCT",
        "Tree": "(functionCall (scalarFunctionName (functionNameBase OCT)) ( ))",
        "Description": [
            "Return a string containing octal representation of a number"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/string-functions.html#function_oct"
        ],
        "Detail": "<link><code>OCT( N )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/string-functions.html#function_oct</link>\nReturns a string representation of the octal value of <code>N</code> , where <code>N</code> is a longlong ( <link><code>BIGINT</code>&LINK&https://dev.mysql.com/doc/refman/8.4/integer-types.html</link> ) number. This is equivalent to <link><code>CONV( N ,10,8)</code>&LINK&https://dev.mysql.com/doc/refman/8.4/mathematical-functions.html#function_conv</link> . Returns <code>NULL</code> if <code>N</code> is <code>NULL</code> .",
        "Demo": [
            "mysql> SELECT OCT(12);\n-> '14'"
        ]
    },
    {
        "Name": "OCTET_LENGTH",
        "Tree": "(functionCall (scalarFunctionName (functionNameBase OCTET_LENGTH)) ( ))",
        "Description": [
            "Synonym for LENGTH()"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/string-functions.html#function_octet-length"
        ],
        "Detail": "<link><code>OCTET_LENGTH( str )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/string-functions.html#function_octet-length</link>\n<link><code>OCTET_LENGTH()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/string-functions.html#function_octet-length</link> is a synonym for <link><code>LENGTH()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/string-functions.html#function_length</link> .",
        "Demo": []
    },
    {
        "Name": "ORD",
        "Tree": "(functionCall (scalarFunctionName (functionNameBase ORD)) ( ))",
        "Description": [
            "Return character code for leftmost character of the argument"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/string-functions.html#function_ord"
        ],
        "Detail": "<link><code>ORD( str )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/string-functions.html#function_ord</link>\nIf the leftmost character of the string <code>str</code> is a multibyte character, returns the code for that character, calculated from the numeric values of its constituent bytes using this formula:\nIf the leftmost character is not a multibyte character, <link><code>ORD()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/string-functions.html#function_ord</link> returns the same value as the <link><code>ASCII()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/string-functions.html#function_ascii</link> function. The function returns <code>NULL</code> if <code>str</code> is <code>NULL</code> .",
        "Demo": [
            "mysql> SELECT ORD('2');\n-> 50"
        ]
    },
    {
        "Name": "PERCENT_RANK",
        "Tree": "(functionCall (scalarFunctionName (functionNameBase PERCENT_RANK)) ( ))",
        "Description": [
            "Percentage rank value"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/window-function-descriptions.html#function_percent-rank"
        ],
        "Detail": "<link><code>PERCENT_RANK()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/window-function-descriptions.html#function_percent-rank</link> <code>over_clause</code>\nReturns the percentage of partition values less than the value in the current row, excluding the highest value. Return values range from 0 to 1 and represent the row relative rank, calculated as the result of this formula, where <code>rank</code> is the row rank and <code>rows</code> is the number of partition rows:\nThis function should be used with <code>ORDER BY</code> to sort partition rows into the desired order. Without <code>ORDER BY</code> , all rows are peers.\n<code>over_clause</code> is as described in <link>Section 14.20.2, \"Window Function Concepts and Syntax\"&LINK&https://dev.mysql.com/doc/refman/8.4/window-functions-usage.html</link> .\nFor an example, see the <link><code>CUME_DIST()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/window-function-descriptions.html#function_cume-dist</link> function description.",
        "Demo": []
    },
    {
        "Name": "PERIOD_ADD",
        "Tree": "(functionCall (scalarFunctionName (functionNameBase PERIOD_ADD)) ( ))",
        "Description": [
            "Add a period to a year-month"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html#function_period-add"
        ],
        "Detail": "<link><code>PERIOD_ADD( P , N )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/date-and-time-functions.html#function_period-add</link>\nAdds <code>N</code> months to period <code>P</code> (in the format <code>YYMM</code> or <code>YYYYMM</code> ). Returns a value in the format <code>YYYYMM</code> .\nNote\nThe period argument <code>P</code> is not a date value.\nThis function returns <code>NULL</code> if <code>P</code> or <code>N</code> is <code>NULL</code> .",
        "Demo": [
            "mysql> SELECT PERIOD_ADD(200801,2);\n-> 200803"
        ]
    },
    {
        "Name": "PERIOD_DIFF",
        "Tree": "(functionCall (scalarFunctionName (functionNameBase PERIOD_DIFF)) ( ))",
        "Description": [
            "Return the number of months between periods"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html#function_period-diff"
        ],
        "Detail": "<link><code>PERIOD_DIFF( P1 , P2 )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/date-and-time-functions.html#function_period-diff</link>\nReturns the number of months between periods <code>P1</code> and <code>P2</code> . <code>P1</code> and <code>P2</code> should be in the format <code>YYMM</code> or <code>YYYYMM</code> . Note that the period arguments <code>P1</code> and <code>P2</code> are not date values.\nThis function returns <code>NULL</code> if <code>P1</code> or <code>P2</code> is <code>NULL</code> .",
        "Demo": [
            "mysql> SELECT PERIOD_DIFF(200802,200703);\n-> 11"
        ]
    },
    {
        "Name": "PI",
        "Tree": "(functionCall (scalarFunctionName (functionNameBase PI)) ( ))",
        "Description": [
            "Return the value of pi"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/mathematical-functions.html#function_pi"
        ],
        "Detail": "<link><code>PI()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/mathematical-functions.html#function_pi</link>\nReturns the value of \u03c0 (pi). The default number of decimal places displayed is seven, but MySQL uses the full double-precision value internally.\nBecause the return value of this function is a double-precision value, its exact representation may vary between platforms or implementations. This also applies to any expressions making use of <code>PI()</code> . See <link>Section 13.1.4, \"Floating-Point Types (Approximate Value) - FLOAT, DOUBLE\"&LINK&https://dev.mysql.com/doc/refman/8.4/floating-point-types.html</link> .",
        "Demo": [
            "mysql> SELECT PI();\n-> 3.141593\nmysql> SELECT PI()+0.000000000000000000;\n-> 3.141592653589793000"
        ]
    },
    {
        "Name": "Point",
        "Tree": "(functionCall (scalarFunctionName (functionNameBase Point)) ( ))",
        "Description": [
            "Construct Point from coordinates"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/gis-mysql-specific-functions.html#function_point"
        ],
        "Detail": "<link><code>Point( x , y )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/gis-mysql-specific-functions.html#function_point</link>\nConstructs a <code>Point</code> using its coordinates.",
        "Demo": []
    },
    {
        "Name": "Polygon",
        "Tree": "(functionCall (scalarFunctionName (functionNameBase Polygon)) ( ))",
        "Description": [
            "Construct Polygon from LineString arguments"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/gis-mysql-specific-functions.html#function_polygon"
        ],
        "Detail": "<link><code>Polygon( ls [, ls ] ...)</code>&LINK&https://dev.mysql.com/doc/refman/8.4/gis-mysql-specific-functions.html#function_polygon</link>\nConstructs a <code>Polygon</code> value from a number of <code>LineString</code> or WKB <code>LineString</code> arguments. If any argument does not represent a <code>LinearRing</code> (that is, not a closed and simple <code>LineString</code> ), the return value is <code>NULL</code> .",
        "Demo": []
    },
    {
        "Name": "POSITION",
        "Tree": "(functionCall (scalarFunctionName (functionNameBase POSITION)) ( ))",
        "Description": [
            "Synonym for LOCATE()"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/string-functions.html#function_position"
        ],
        "Detail": "<link><code>POSITION( substr IN str )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/string-functions.html#function_position</link>\n<link><code>POSITION( substr IN str )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/string-functions.html#function_position</link> is a synonym for <link><code>LOCATE( substr , str )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/string-functions.html#function_locate</link> .",
        "Demo": []
    },
    {
        "Name": "POW",
        "Tree": "(functionCall (scalarFunctionName (functionNameBase POW)) ( ))",
        "Description": [
            "Return the argument raised to the specified power"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/mathematical-functions.html#function_pow"
        ],
        "Detail": "<link><code>POW( X , Y )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/mathematical-functions.html#function_pow</link>\nReturns the value of <code>X</code> raised to the power of <code>Y</code> . Returns <code>NULL</code> if <code>X</code> or <code>Y</code> is <code>NULL</code> .",
        "Demo": [
            "mysql> SELECT POW(2,2);\n-> 4\nmysql> SELECT POW(2,-2);\n-> 0.25"
        ]
    },
    {
        "Name": "POWER",
        "Tree": "(functionCall (scalarFunctionName (functionNameBase POWER)) ( ))",
        "Description": [
            "Return the argument raised to the specified power"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/mathematical-functions.html#function_power"
        ],
        "Detail": "<link><code>POWER( X , Y )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/mathematical-functions.html#function_power</link>\nThis is a synonym for <link><code>POW()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/mathematical-functions.html#function_pow</link> .",
        "Demo": []
    },
    {
        "Name": "PS_CURRENT_THREAD_ID",
        "Tree": "(functionCall (fullId (uid (simpleId PS_CURRENT_THREAD_ID))) ( ))",
        "Description": [
            "Performance Schema thread ID for current thread"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/performance-schema-functions.html#function_ps-current-thread-id"
        ],
        "Detail": "<link><code>PS_CURRENT_THREAD_ID()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/performance-schema-functions.html#function_ps-current-thread-id</link>\nReturns a <code>BIGINT UNSIGNED</code> value representing the Performance Schema thread ID assigned to the current connection.\nThe thread ID return value is a value of the type given in the <code>THREAD_ID</code> column of Performance Schema tables.\nPerformance Schema configuration affects <link><code>PS_CURRENT_THREAD_ID()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/performance-schema-functions.html#function_ps-current-thread-id</link> the same way as for <link><code>PS_THREAD_ID()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/performance-schema-functions.html#function_ps-thread-id</link> . For details, see the description of that function.\n<link><code>PS_CURRENT_THREAD_ID()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/performance-schema-functions.html#function_ps-current-thread-id</link> may be used as a shortcut for invoking the <code>sys</code> schema <link><code>ps_thread_id()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/sys-ps-thread-id.html</link> function with an argument of <code>NULL</code> or <link><code>CONNECTION_ID()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/information-functions.html#function_connection-id</link> .",
        "Demo": [
            "mysql> SELECT PS_CURRENT_THREAD_ID();\n+------------------------+\n| PS_CURRENT_THREAD_ID() |\n+------------------------+\n| 52 |\n+------------------------+\nmysql> SELECT PS_THREAD_ID(CONNECTION_ID());\n+-------------------------------+\n| PS_THREAD_ID(CONNECTION_ID()) |\n+-------------------------------+\n| 52 |\n+-------------------------------+"
        ]
    },
    {
        "Name": "PS_THREAD_ID",
        "Tree": "(functionCall (fullId (uid (simpleId PS_THREAD_ID))) ( ))",
        "Description": [
            "Performance Schema thread ID for given thread"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/performance-schema-functions.html#function_ps-thread-id"
        ],
        "Detail": "<link><code>PS_THREAD_ID( connection_id )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/performance-schema-functions.html#function_ps-thread-id</link>\nGiven a connection ID, returns a <code>BIGINT UNSIGNED</code> value representing the Performance Schema thread ID assigned to the connection ID, or <code>NULL</code> if no thread ID exists for the connection ID. The latter can occur for threads that are not instrumented, or if <code>connection_id</code> is <code>NULL</code> .\nThe connection ID argument is a value of the type given in the <code>PROCESSLIST_ID</code> column of the Performance Schema <link><code>threads</code>&LINK&https://dev.mysql.com/doc/refman/8.4/performance-schema-threads-table.html</link> table or the <code>Id</code> column of <link><code>SHOW PROCESSLIST</code>&LINK&https://dev.mysql.com/doc/refman/8.4/show-processlist.html</link> output.\nThe thread ID return value is a value of the type given in the <code>THREAD_ID</code> column of Performance Schema tables.\nPerformance Schema configuration affects <link><code>PS_THREAD_ID()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/performance-schema-functions.html#function_ps-thread-id</link> operation as follows. (These remarks also apply to <link><code>PS_CURRENT_THREAD_ID()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/performance-schema-functions.html#function_ps-current-thread-id</link> .)\nDisabling the <code>thread_instrumentation</code> consumer disables statistics from being collected and aggregated at the thread level, but has no effect on <link><code>PS_THREAD_ID()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/performance-schema-functions.html#function_ps-thread-id</link> .\nIf <link><code>performance_schema_max_thread_instances</code>&LINK&https://dev.mysql.com/doc/refman/8.4/performance-schema-system-variables.html#sysvar_performance_schema_max_thread_instances</link> is not 0, the Performance Schema allocates memory for thread statistics and assigns an internal ID to each thread for which instance memory is available. If there are threads for which instance memory is not available, <link><code>PS_THREAD_ID()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/performance-schema-functions.html#function_ps-thread-id</link> returns <code>NULL</code> ; in this case, <link><code>Performance_schema_thread_instances_lost</code>&LINK&https://dev.mysql.com/doc/refman/8.4/performance-schema-status-variables.html#statvar_Performance_schema_thread_instances_lost</link> is nonzero.\nIf <link><code>performance_schema_max_thread_instances</code>&LINK&https://dev.mysql.com/doc/refman/8.4/performance-schema-system-variables.html#sysvar_performance_schema_max_thread_instances</link> is 0, the Performance Schema allocates no thread memory and <link><code>PS_THREAD_ID()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/performance-schema-functions.html#function_ps-thread-id</link> returns <code>NULL</code> .\nIf the Performance Schema itself is disabled, <link><code>PS_THREAD_ID()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/performance-schema-functions.html#function_ps-thread-id</link> produces an error.\n<link><code>PS_THREAD_ID()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/performance-schema-functions.html#function_ps-thread-id</link> may be used instead of the <code>sys</code> schema <link><code>ps_thread_id()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/sys-ps-thread-id.html</link> function, keeping in mind this difference:\nWith an argument of <code>NULL</code> , <link><code>sys.ps_thread_id()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/sys-ps-thread-id.html</link> returns the thread ID for the current connection, whereas <link><code>PS_THREAD_ID()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/performance-schema-functions.html#function_ps-thread-id</link> returns <code>NULL</code> . To obtain the current connection thread ID, use <link><code>PS_CURRENT_THREAD_ID()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/performance-schema-functions.html#function_ps-current-thread-id</link> instead.",
        "Demo": [
            "mysql> SELECT PS_THREAD_ID(6);\n+-----------------+\n| PS_THREAD_ID(6) |\n+-----------------+\n| 45 |\n+-----------------+"
        ]
    },
    {
        "Name": "QUARTER",
        "Tree": "(functionCall (scalarFunctionName (functionNameBase QUARTER)) ( ))",
        "Description": [
            "Return the quarter from a date argument"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html#function_quarter"
        ],
        "Detail": "<link><code>QUARTER( date )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/date-and-time-functions.html#function_quarter</link>\nReturns the quarter of the year for <code>date</code> , in the range <code>1</code> to <code>4</code> , or <code>NULL</code> if <code>date</code> is <code>NULL</code> .",
        "Demo": [
            "mysql> SELECT QUARTER('2008-04-01');\n-> 2"
        ]
    },
    {
        "Name": "QUOTE",
        "Tree": "(functionCall (scalarFunctionName (functionNameBase QUOTE)) ( ))",
        "Description": [
            "Escape the argument for use in an SQL statement"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/string-functions.html#function_quote"
        ],
        "Detail": "<link><code>QUOTE( str )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/string-functions.html#function_quote</link>\nQuotes a string to produce a result that can be used as a properly escaped data value in an SQL statement. The string is returned enclosed by single quotation marks and with each instance of backslash ( <code>\\</code> ), single quote ( <code>'</code> ), ASCII <code>NUL</code> , and Control+Z preceded by a backslash. If the argument is <code>NULL</code> , the return value is the word \" NULL \" without enclosing single quotation marks.\nFor comparison, see the quoting rules for literal strings and within the C API in <link>Section 11.1.1, \"String Literals\"&LINK&https://dev.mysql.com/doc/refman/8.4/string-literals.html</link> , and <link>mysql_real_escape_string_quote()&LINK&https://dev.mysql.com/doc/c-api/8.4/en/mysql-real-escape-string-quote.html</link> .",
        "Demo": [
            "mysql> SELECT QUOTE('Don\\'t!');\n-> 'Don\\'t!'\nmysql> SELECT QUOTE(NULL);\n-> NULL"
        ]
    },
    {
        "Name": "RADIANS",
        "Tree": "(functionCall (scalarFunctionName (functionNameBase RADIANS)) ( ))",
        "Description": [
            "Return argument converted to radians"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/mathematical-functions.html#function_radians"
        ],
        "Detail": "<link><code>RADIANS( X )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/mathematical-functions.html#function_radians</link>\nReturns the argument <code>X</code> , converted from degrees to radians. (Note that \u03c0 radians equals 180 degrees.) Returns <code>NULL</code> if <code>X</code> is <code>NULL</code> .",
        "Demo": [
            "mysql> SELECT RADIANS(90);\n-> 1.5707963267949"
        ]
    },
    {
        "Name": "RAND",
        "Tree": "(functionCall (scalarFunctionName (functionNameBase RAND)) ( ))",
        "Description": [
            "Return a random floating-point value"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/mathematical-functions.html#function_rand"
        ],
        "Detail": "<link><code>RAND([ N ])</code>&LINK&https://dev.mysql.com/doc/refman/8.4/mathematical-functions.html#function_rand</link>\nReturns a random floating-point value <code>v</code> in the range <code>0</code> <= <code>v</code> < <code>1.0</code> . To obtain a random integer <code>R</code> in the range <code>i</code> <= <code>R</code> < <code>j</code> , use the expression <link><code>FLOOR( i + RAND() * ( j</code>&LINK&https://dev.mysql.com/doc/refman/8.4/mathematical-functions.html#function_floor</link> \u2212 <code>i ))</code> . For example, to obtain a random integer in the range the range <code>7</code> <= <code>R</code> < <code>12</code> , use the following statement:\nIf an integer argument <code>N</code> is specified, it is used as the seed value:\nWith a constant initializer argument, the seed is initialized once when the statement is prepared, prior to execution.\nWith a nonconstant initializer argument (such as a column name), the seed is initialized with the value for each invocation of <link><code>RAND()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/mathematical-functions.html#function_rand</link> .\nOne implication of this behavior is that for equal argument values, <link><code>RAND( N )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/mathematical-functions.html#function_rand</link> returns the same value each time, and thus produces a repeatable sequence of column values. In the following example, the sequence of values produced by <code>RAND(3)</code> is the same both places it occurs.\n<link><code>RAND()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/mathematical-functions.html#function_rand</link> in a <code>WHERE</code> clause is evaluated for every row (when selecting from one table) or combination of rows (when selecting from a multiple-table join). Thus, for optimizer purposes, <link><code>RAND()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/mathematical-functions.html#function_rand</link> is not a constant value and cannot be used for index optimizations. For more information, see <link>Section 10.2.1.20, \"Function Call Optimization\"&LINK&https://dev.mysql.com/doc/refman/8.4/function-optimization.html</link> .\nUse of a column with <link><code>RAND()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/mathematical-functions.html#function_rand</link> values in an <code>ORDER BY</code> or <code>GROUP BY</code> clause may yield unexpected results because for either clause a <link><code>RAND()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/mathematical-functions.html#function_rand</link> expression can be evaluated multiple times for the same row, each time returning a different result. If the goal is to retrieve rows in random order, you can use a statement like this:\nTo select a random sample from a set of rows, combine <code>ORDER BY RAND()</code> with <code>LIMIT</code> :\n<link><code>RAND()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/mathematical-functions.html#function_rand</link> is not meant to be a perfect random generator. It is a fast way to generate random numbers on demand that is portable between platforms for the same MySQL version.\nThis function is unsafe for statement-based replication. A warning is logged if you use this function when <link><code>binlog_format</code>&LINK&https://dev.mysql.com/doc/refman/8.4/replication-options-binary-log.html#sysvar_binlog_format</link> is set to <code>STATEMENT</code> .",
        "Demo": [
            "SELECT FLOOR(7 + (RAND() * 5));",
            "mysql> CREATE TABLE t (i INT);\nQuery OK, 0 rows affected (0.42 sec)\nmysql> INSERT INTO t VALUES(1),(2),(3);\nQuery OK, 3 rows affected (0.00 sec)\nRecords: 3 Duplicates: 0 Warnings: 0\nmysql> SELECT i, RAND() FROM t;\n+------+------------------+\n| i | RAND() |\n+------+------------------+\n| 1 | 0.61914388706828 |\n| 2 | 0.93845168309142 |\n| 3 | 0.83482678498591 |\n+------+------------------+\n3 rows in set (0.00 sec)\nmysql> SELECT i, RAND(3) FROM t;\n+------+------------------+\n| i | RAND(3) |\n+------+------------------+\n| 1 | 0.90576975597606 |\n| 2 | 0.37307905813035 |\n| 3 | 0.14808605345719 |\n+------+------------------+\n3 rows in set (0.00 sec)\nmysql> SELECT i, RAND() FROM t;\n+------+------------------+\n| i | RAND() |\n+------+------------------+\n| 1 | 0.35877890638893 |\n| 2 | 0.28941420772058 |\n| 3 | 0.37073435016976 |\n+------+------------------+\n3 rows in set (0.00 sec)\nmysql> SELECT i, RAND(3) FROM t;\n+------+------------------+\n| i | RAND(3) |\n+------+------------------+\n| 1 | 0.90576975597606 |\n| 2 | 0.37307905813035 |\n| 3 | 0.14808605345719 |\n+------+------------------+\n3 rows in set (0.01 sec)",
            "SELECT * FROM tbl_name ORDER BY RAND();",
            "SELECT * FROM table1, table2 WHERE a=b AND c<d ORDER BY RAND() LIMIT 1000;"
        ]
    },
    {
        "Name": "RANDOM_BYTES",
        "Tree": "(functionCall (scalarFunctionName (functionNameBase RANDOM_BYTES)) ( ))",
        "Description": [
            "Return a random byte vector"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/encryption-functions.html#function_random-bytes"
        ],
        "Detail": "<link><code>RANDOM_BYTES( len )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/encryption-functions.html#function_random-bytes</link>\nThis function returns a binary string of <code>len</code> random bytes generated using the random number generator of the SSL library. Permitted values of <code>len</code> range from 1 to 1024. For values outside that range, an error occurs. Returns <code>NULL</code> if <code>len</code> is <code>NULL</code> .\n<link><code>RANDOM_BYTES()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/encryption-functions.html#function_random-bytes</link> can be used to provide the initialization vector for the <link><code>AES_DECRYPT()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/encryption-functions.html#function_aes-decrypt</link> and <link><code>AES_ENCRYPT()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/encryption-functions.html#function_aes-encrypt</link> functions. For use in that context, <code>len</code> must be at least 16. Larger values are permitted, but bytes in excess of 16 are ignored.\n<link><code>RANDOM_BYTES()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/encryption-functions.html#function_random-bytes</link> generates a random value, which makes its result nondeterministic. Consequently, statements that use this function are unsafe for statement-based replication.\nIf <link><code>RANDOM_BYTES()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/encryption-functions.html#function_random-bytes</link> is invoked from within the <link>mysql&LINK&https://dev.mysql.com/doc/refman/8.4/mysql.html</link> client, binary strings display using hexadecimal notation, depending on the value of the <link><code>--binary-as-hex</code>&LINK&https://dev.mysql.com/doc/refman/8.4/mysql-command-options.html#option_mysql_binary-as-hex</link> . For more information about that option, see <link>Section 6.5.1, \"mysql \u2014 The MySQL Command-Line Client\"&LINK&https://dev.mysql.com/doc/refman/8.4/mysql.html</link> .",
        "Demo": []
    },
    {
        "Name": "RANK",
        "Tree": "(functionCall (scalarFunctionName (functionNameBase RANK)) ( ))",
        "Description": [
            "Rank of current row within its partition, with gaps"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/window-function-descriptions.html#function_rank"
        ],
        "Detail": "<link><code>RANK()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/window-function-descriptions.html#function_rank</link> <code>over_clause</code>\nReturns the rank of the current row within its partition, with gaps. Peers are considered ties and receive the same rank. This function does not assign consecutive ranks to peer groups if groups of size greater than one exist; the result is noncontiguous rank numbers.\nThis function should be used with <code>ORDER BY</code> to sort partition rows into the desired order. Without <code>ORDER BY</code> , all rows are peers.\n<code>over_clause</code> is as described in <link>Section 14.20.2, \"Window Function Concepts and Syntax\"&LINK&https://dev.mysql.com/doc/refman/8.4/window-functions-usage.html</link> .\nThe following query shows the difference between <link><code>RANK()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/window-function-descriptions.html#function_rank</link> , which produces ranks with gaps, and <link><code>DENSE_RANK()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/window-function-descriptions.html#function_dense-rank</link> , which produces ranks without gaps. The query shows rank values for each member of a set of values in the <code>val</code> column, which contains some duplicates. <link><code>RANK()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/window-function-descriptions.html#function_rank</link> assigns peers (the duplicates) the same rank value, and the next greater value has a rank higher by the number of peers minus one. <link><code>DENSE_RANK()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/window-function-descriptions.html#function_dense-rank</link> also assigns peers the same rank value, but the next higher value has a rank one greater. For reference, the query also displays row numbers using <link><code>ROW_NUMBER()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/window-function-descriptions.html#function_row-number</link> :",
        "Demo": [
            "mysql> SELECT\nval,\nROW_NUMBER() OVER w AS 'row_number',\nRANK() OVER w AS 'rank',\nDENSE_RANK() OVER w AS 'dense_rank'\nFROM numbers\nWINDOW w AS (ORDER BY val);\n+------+------------+------+------------+\n| val | row_number | rank | dense_rank |\n+------+------------+------+------------+\n| 1 | 1 | 1 | 1 |\n| 1 | 2 | 1 | 1 |\n| 2 | 3 | 3 | 2 |\n| 3 | 4 | 4 | 3 |\n| 3 | 5 | 4 | 3 |\n| 3 | 6 | 4 | 3 |\n| 4 | 7 | 7 | 4 |\n| 4 | 8 | 7 | 4 |\n| 5 | 9 | 9 | 5 |\n+------+------------+------+------------+"
        ]
    },
    {
        "Name": "REGEXP_INSTR",
        "Tree": "(functionCall (fullId (uid (simpleId REGEXP_INSTR))) ( ))",
        "Description": [
            "Starting index of substring matching regular expression"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/regexp.html#function_regexp-instr"
        ],
        "Detail": "<link><code>REGEXP_INSTR( expr , pat [, pos [, occurrence [, return_option [, match_type ]]]])</code>&LINK&https://dev.mysql.com/doc/refman/8.4/regexp.html#function_regexp-instr</link>\nReturns the starting index of the substring of the string <code>expr</code> that matches the regular expression specified by the pattern <code>pat</code> , 0 if there is no match. If <code>expr</code> or <code>pat</code> is <code>NULL</code> , the return value is <code>NULL</code> . Character indexes begin at 1.\n<link><code>REGEXP_INSTR()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/regexp.html#function_regexp-instr</link> takes these optional arguments:\n<code>pos</code> : The position in <code>expr</code> at which to start the search. If omitted, the default is 1.\n<code>occurrence</code> : Which occurrence of a match to search for. If omitted, the default is 1.\n<code>return_option</code> : Which type of position to return. If this value is 0, <link><code>REGEXP_INSTR()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/regexp.html#function_regexp-instr</link> returns the position of the matched substring's first character. If this value is 1, <link><code>REGEXP_INSTR()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/regexp.html#function_regexp-instr</link> returns the position following the matched substring. If omitted, the default is 0.\n<code>match_type</code> : A string that specifies how to perform matching. The meaning is as described for <link><code>REGEXP_LIKE()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/regexp.html#function_regexp-like</link> .\nFor additional information about how matching occurs, see the description for <link><code>REGEXP_LIKE()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/regexp.html#function_regexp-like</link> .",
        "Demo": [
            "mysql> SELECT REGEXP_INSTR('dog cat dog', 'dog');\n+------------------------------------+\n| REGEXP_INSTR('dog cat dog', 'dog') |\n+------------------------------------+\n| 1 |\n+------------------------------------+\nmysql> SELECT REGEXP_INSTR('dog cat dog', 'dog', 2);\n+---------------------------------------+\n| REGEXP_INSTR('dog cat dog', 'dog', 2) |\n+---------------------------------------+\n| 9 |\n+---------------------------------------+\nmysql> SELECT REGEXP_INSTR('aa aaa aaaa', 'a{2}');\n+-------------------------------------+\n| REGEXP_INSTR('aa aaa aaaa', 'a{2}') |\n+-------------------------------------+\n| 1 |\n+-------------------------------------+\nmysql> SELECT REGEXP_INSTR('aa aaa aaaa', 'a{4}');\n+-------------------------------------+\n| REGEXP_INSTR('aa aaa aaaa', 'a{4}') |\n+-------------------------------------+\n| 8 |\n+-------------------------------------+"
        ]
    },
    {
        "Name": "REGEXP_LIKE",
        "Tree": "(functionCall (fullId (uid (simpleId REGEXP_LIKE))) ( ))",
        "Description": [
            "Whether string matches regular expression"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/regexp.html#function_regexp-like"
        ],
        "Detail": "<link><code>REGEXP_LIKE( expr , pat [, match_type ])</code>&LINK&https://dev.mysql.com/doc/refman/8.4/regexp.html#function_regexp-like</link>\nReturns 1 if the string <code>expr</code> matches the regular expression specified by the pattern <code>pat</code> , 0 otherwise. If <code>expr</code> or <code>pat</code> is <code>NULL</code> , the return value is <code>NULL</code> .\nThe pattern can be an extended regular expression, the syntax for which is discussed in <link>Regular Expression Syntax&LINK&https://dev.mysql.com/doc/refman/8.4/regexp.html#regexp-syntax</link> . The pattern need not be a literal string. For example, it can be specified as a string expression or table column.\nThe optional <code>match_type</code> argument is a string that may contain any or all the following characters specifying how to perform matching:\n<code>c</code> : Case-sensitive matching.\n<code>i</code> : Case-insensitive matching.\n<code>m</code> : Multiple-line mode. Recognize line terminators within the string. The default behavior is to match line terminators only at the start and end of the string expression.\n<code>n</code> : The <code>.</code> character matches line terminators. The default is for <code>.</code> matching to stop at the end of a line.\n<code>u</code> : Unix-only line endings. Only the newline character is recognized as a line ending by the <code>.</code> , <code>^</code> , and <code>$</code> match operators.\nIf characters specifying contradictory options are specified within <code>match_type</code> , the rightmost one takes precedence.\nBy default, regular expression operations use the character set and collation of the <code>expr</code> and <code>pat</code> arguments when deciding the type of a character and performing the comparison. If the arguments have different character sets or collations, coercibility rules apply as described in <link>Section 12.8.4, \"Collation Coercibility in Expressions\"&LINK&https://dev.mysql.com/doc/refman/8.4/charset-collation-coercibility.html</link> . Arguments may be specified with explicit collation indicators to change comparison behavior.\n<code>match_type</code> may be specified with the <code>c</code> or <code>i</code> characters to override the default case sensitivity. Exception: If either argument is a binary string, the arguments are handled in case-sensitive fashion as binary strings, even if <code>match_type</code> contains the <code>i</code> character.\nNote\nMySQL uses C escape syntax in strings (for example, <code>\\n</code> to represent the newline character). If you want your <code>expr</code> or <code>pat</code> argument to contain a literal <code>\\</code> , you must double it. (Unless the <link><code>NO_BACKSLASH_ESCAPES</code>&LINK&https://dev.mysql.com/doc/refman/8.4/sql-mode.html#sqlmode_no_backslash_escapes</link> SQL mode is enabled, in which case no escape character is used.)",
        "Demo": [
            "mysql> SELECT REGEXP_LIKE('CamelCase', 'CAMELCASE');\n+---------------------------------------+\n| REGEXP_LIKE('CamelCase', 'CAMELCASE') |\n+---------------------------------------+\n| 1 |\n+---------------------------------------+\nmysql> SELECT REGEXP_LIKE('CamelCase', 'CAMELCASE' COLLATE utf8mb4_0900_as_cs);\n+------------------------------------------------------------------+\n| REGEXP_LIKE('CamelCase', 'CAMELCASE' COLLATE utf8mb4_0900_as_cs) |\n+------------------------------------------------------------------+\n| 0 |\n+------------------------------------------------------------------+",
            "mysql> SELECT REGEXP_LIKE('Michael!', '.*');\n+-------------------------------+\n| REGEXP_LIKE('Michael!', '.*') |\n+-------------------------------+\n| 1 |\n+-------------------------------+\nmysql> SELECT REGEXP_LIKE('new*\\n*line', 'new\\\\*.\\\\*line');\n+----------------------------------------------+\n| REGEXP_LIKE('new*\\n*line', 'new\\\\*.\\\\*line') |\n+----------------------------------------------+\n| 0 |\n+----------------------------------------------+\nmysql> SELECT REGEXP_LIKE('a', '^[a-d]');\n+----------------------------+\n| REGEXP_LIKE('a', '^[a-d]') |\n+----------------------------+\n| 1 |\n+----------------------------+",
            "mysql> SELECT REGEXP_LIKE('abc', 'ABC');\n+---------------------------+\n| REGEXP_LIKE('abc', 'ABC') |\n+---------------------------+\n| 1 |\n+---------------------------+\nmysql> SELECT REGEXP_LIKE('abc', 'ABC', 'c');\n+--------------------------------+\n| REGEXP_LIKE('abc', 'ABC', 'c') |\n+--------------------------------+\n| 0 |\n+--------------------------------+"
        ]
    },
    {
        "Name": "REGEXP_REPLACE",
        "Tree": "(functionCall (fullId (uid (simpleId REGEXP_REPLACE))) ( ))",
        "Description": [
            "Replace substrings matching regular expression"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/regexp.html#function_regexp-replace"
        ],
        "Detail": "<link><code>REGEXP_REPLACE( expr , pat , repl [, pos [, occurrence [, match_type ]]])</code>&LINK&https://dev.mysql.com/doc/refman/8.4/regexp.html#function_regexp-replace</link>\nReplaces occurrences in the string <code>expr</code> that match the regular expression specified by the pattern <code>pat</code> with the replacement string <code>repl</code> , and returns the resulting string. If <code>expr</code> , <code>pat</code> , or <code>repl</code> is <code>NULL</code> , the return value is <code>NULL</code> .\n<link><code>REGEXP_REPLACE()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/regexp.html#function_regexp-replace</link> takes these optional arguments:\n<code>pos</code> : The position in <code>expr</code> at which to start the search. If omitted, the default is 1.\n<code>occurrence</code> : Which occurrence of a match to replace. If omitted, the default is 0 (which means \" replace all occurrences \" ).\n<code>match_type</code> : A string that specifies how to perform matching. The meaning is as described for <link><code>REGEXP_LIKE()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/regexp.html#function_regexp-like</link> .\nThe result returned by this function uses the character set and collation of the expression searched for matches.\nFor additional information about how matching occurs, see the description for <link><code>REGEXP_LIKE()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/regexp.html#function_regexp-like</link> .",
        "Demo": [
            "mysql> SELECT REGEXP_REPLACE('a b c', 'b', 'X');\n+-----------------------------------+\n| REGEXP_REPLACE('a b c', 'b', 'X') |\n+-----------------------------------+\n| a X c |\n+-----------------------------------+\nmysql> SELECT REGEXP_REPLACE('abc def ghi', '[a-z]+', 'X', 1, 3);\n+----------------------------------------------------+\n| REGEXP_REPLACE('abc def ghi', '[a-z]+', 'X', 1, 3) |\n+----------------------------------------------------+\n| abc def X |\n+----------------------------------------------------+"
        ]
    },
    {
        "Name": "REGEXP_SUBSTR",
        "Tree": "(functionCall (fullId (uid (simpleId REGEXP_SUBSTR))) ( ))",
        "Description": [
            "Return substring matching regular expression"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/regexp.html#function_regexp-substr"
        ],
        "Detail": "<link><code>REGEXP_SUBSTR( expr , pat [, pos [, occurrence [, match_type ]]])</code>&LINK&https://dev.mysql.com/doc/refman/8.4/regexp.html#function_regexp-substr</link>\nReturns the substring of the string <code>expr</code> that matches the regular expression specified by the pattern <code>pat</code> , <code>NULL</code> if there is no match. If <code>expr</code> or <code>pat</code> is <code>NULL</code> , the return value is <code>NULL</code> .\n<link><code>REGEXP_SUBSTR()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/regexp.html#function_regexp-substr</link> takes these optional arguments:\n<code>pos</code> : The position in <code>expr</code> at which to start the search. If omitted, the default is 1.\n<code>occurrence</code> : Which occurrence of a match to search for. If omitted, the default is 1.\n<code>match_type</code> : A string that specifies how to perform matching. The meaning is as described for <link><code>REGEXP_LIKE()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/regexp.html#function_regexp-like</link> .\nThe result returned by this function uses the character set and collation of the expression searched for matches.\nFor additional information about how matching occurs, see the description for <link><code>REGEXP_LIKE()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/regexp.html#function_regexp-like</link> .",
        "Demo": [
            "mysql> SELECT REGEXP_SUBSTR('abc def ghi', '[a-z]+');\n+----------------------------------------+\n| REGEXP_SUBSTR('abc def ghi', '[a-z]+') |\n+----------------------------------------+\n| abc |\n+----------------------------------------+\nmysql> SELECT REGEXP_SUBSTR('abc def ghi', '[a-z]+', 1, 3);\n+----------------------------------------------+\n| REGEXP_SUBSTR('abc def ghi', '[a-z]+', 1, 3) |\n+----------------------------------------------+\n| ghi |\n+----------------------------------------------+"
        ]
    },
    {
        "Name": "RELEASE_ALL_LOCKS",
        "Tree": "(functionCall (fullId (uid (simpleId RELEASE_ALL_LOCKS))) ( ))",
        "Description": [
            "Release all current named locks"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/locking-functions.html#function_release-all-locks"
        ],
        "Detail": "<link><code>RELEASE_ALL_LOCKS()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/locking-functions.html#function_release-all-locks</link>\nReleases all named locks held by the current session and returns the number of locks released (0 if there were none)\nThis function is unsafe for statement-based replication. A warning is logged if you use this function when <link><code>binlog_format</code>&LINK&https://dev.mysql.com/doc/refman/8.4/replication-options-binary-log.html#sysvar_binlog_format</link> is set to <code>STATEMENT</code> .",
        "Demo": []
    },
    {
        "Name": "RELEASE_LOCK",
        "Tree": "(functionCall (scalarFunctionName (functionNameBase RELEASE_LOCK)) ( ))",
        "Description": [
            "Release the named lock"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/locking-functions.html#function_release-lock"
        ],
        "Detail": "<link><code>RELEASE_LOCK( str )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/locking-functions.html#function_release-lock</link>\nReleases the lock named by the string <code>str</code> that was obtained with <link><code>GET_LOCK()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/locking-functions.html#function_get-lock</link> . Returns <code>1</code> if the lock was released, <code>0</code> if the lock was not established by this thread (in which case the lock is not released), and <code>NULL</code> if the named lock did not exist. The lock does not exist if it was never obtained by a call to <link><code>GET_LOCK()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/locking-functions.html#function_get-lock</link> or if it has previously been released.\nThe <link><code>DO</code>&LINK&https://dev.mysql.com/doc/refman/8.4/do.html</link> statement is convenient to use with <link><code>RELEASE_LOCK()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/locking-functions.html#function_release-lock</link> . See <link>Section 15.2.3, \"DO Statement\"&LINK&https://dev.mysql.com/doc/refman/8.4/do.html</link> .\nThis function is unsafe for statement-based replication. A warning is logged if you use this function when <link><code>binlog_format</code>&LINK&https://dev.mysql.com/doc/refman/8.4/replication-options-binary-log.html#sysvar_binlog_format</link> is set to <code>STATEMENT</code> .",
        "Demo": []
    },
    {
        "Name": "REPEAT",
        "Tree": "(functionCall (scalarFunctionName REPEAT) ( ))",
        "Description": [
            "Repeat a string the specified number of times"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/string-functions.html#function_repeat"
        ],
        "Detail": "<link><code>REPEAT( str , count )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/string-functions.html#function_repeat</link>\nReturns a string consisting of the string <code>str</code> repeated <code>count</code> times. If <code>count</code> is less than 1, returns an empty string. Returns <code>NULL</code> if <code>str</code> or <code>count</code> is <code>NULL</code> .",
        "Demo": [
            "mysql> SELECT REPEAT('MySQL', 3);\n-> 'MySQLMySQLMySQL'"
        ]
    },
    {
        "Name": "REPLACE",
        "Tree": "(functionCall (scalarFunctionName REPLACE) ( ))",
        "Description": [
            "Replace occurrences of a specified string"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/string-functions.html#function_replace"
        ],
        "Detail": "<link><code>REPLACE( str , from_str , to_str )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/string-functions.html#function_replace</link>\nReturns the string <code>str</code> with all occurrences of the string <code>from_str</code> replaced by the string <code>to_str</code> . <link><code>REPLACE()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/string-functions.html#function_replace</link> performs a case-sensitive match when searching for <code>from_str</code> .\nThis function is multibyte safe. It returns <code>NULL</code> if any of its arguments are <code>NULL</code> .",
        "Demo": [
            "mysql> SELECT REPLACE('www.mysql.com', 'w', 'Ww');\n-> 'WwWwWw.mysql.com'"
        ]
    },
    {
        "Name": "REVERSE",
        "Tree": "(functionCall (scalarFunctionName (functionNameBase REVERSE)) ( ))",
        "Description": [
            "Reverse the characters in a string"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/string-functions.html#function_reverse"
        ],
        "Detail": "<link><code>REVERSE( str )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/string-functions.html#function_reverse</link>\nReturns the string <code>str</code> with the order of the characters reversed, or <code>NULL</code> if <code>str</code> is <code>NULL</code> .\nThis function is multibyte safe.",
        "Demo": [
            "mysql> SELECT REVERSE('abc');\n-> 'cba'"
        ]
    },
    {
        "Name": "RIGHT",
        "Tree": "(functionCall (scalarFunctionName (functionNameBase RIGHT)) ( ))",
        "Description": [
            "Return the specified rightmost number of characters"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/string-functions.html#function_right"
        ],
        "Detail": "<link><code>RIGHT( str , len )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/string-functions.html#function_right</link>\nReturns the rightmost <code>len</code> characters from the string <code>str</code> , or <code>NULL</code> if any argument is <code>NULL</code> .\nThis function is multibyte safe.",
        "Demo": [
            "mysql> SELECT RIGHT('foobarbar', 4);\n-> 'rbar'"
        ]
    },
    {
        "Name": "ROLES_GRAPHML",
        "Tree": "(functionCall (fullId (uid (simpleId ROLES_GRAPHML))) ( ))",
        "Description": [
            "Return a GraphML document representing memory role subgraphs"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/information-functions.html#function_roles-graphml"
        ],
        "Detail": "<link><code>ROLES_GRAPHML()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/information-functions.html#function_roles-graphml</link>\nReturns a <code>utf8mb3</code> string containing a GraphML document representing memory role subgraphs. The <link><code>ROLE_ADMIN</code>&LINK&https://dev.mysql.com/doc/refman/8.4/privileges-provided.html#priv_role-admin</link> privilege (or the deprecated <link><code>SUPER</code>&LINK&https://dev.mysql.com/doc/refman/8.4/privileges-provided.html#priv_super</link> privilege) is required to see content in the <code><graphml></code> element. Otherwise, the result shows only an empty element:",
        "Demo": [
            "mysql> SELECT ROLES_GRAPHML();\n+---------------------------------------------------+\n| ROLES_GRAPHML() |\n+---------------------------------------------------+\n| <?xml version=\"1.0\" encoding=\"UTF-8\"?><graphml /> |\n+---------------------------------------------------+"
        ]
    },
    {
        "Name": "ROUND",
        "Tree": "(functionCall (scalarFunctionName (functionNameBase ROUND)) ( ))",
        "Description": [
            "Round the argument"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/mathematical-functions.html#function_round"
        ],
        "Detail": "<link><code>ROUND( X )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/mathematical-functions.html#function_round</link> , <link><code>ROUND( X , D )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/mathematical-functions.html#function_round</link>\nRounds the argument <code>X</code> to <code>D</code> decimal places. The rounding algorithm depends on the data type of <code>X</code> . <code>D</code> defaults to 0 if not specified. <code>D</code> can be negative to cause <code>D</code> digits left of the decimal point of the value <code>X</code> to become zero. The maximum absolute value for <code>D</code> is 30; any digits in excess of 30 (or -30) are truncated. If <code>X</code> or <code>D</code> is <code>NULL</code> , the function returns <code>NULL</code> .\nThe return value has the same type as the first argument (assuming that it is integer, double, or decimal). This means that for an integer argument, the result is an integer (no decimal places):\n<link><code>ROUND()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/mathematical-functions.html#function_round</link> uses the following rules depending on the type of the first argument:\nFor exact-value numbers, <link><code>ROUND()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/mathematical-functions.html#function_round</link> uses the \" round half away from zero \" or \" round toward nearest \" rule: A value with a fractional part of .5 or greater is rounded up to the next integer if positive or down to the next integer if negative. (In other words, it is rounded away from zero.) A value with a fractional part less than .5 is rounded down to the next integer if positive or up to the next integer if negative.\nFor approximate-value numbers, the result depends on the C library. On many systems, this means that <link><code>ROUND()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/mathematical-functions.html#function_round</link> uses the \" round to nearest even \" rule: A value with a fractional part exactly halfway between two integers is rounded to the nearest even integer.\nThe following example shows how rounding differs for exact and approximate values:\nFor more information, see <link>Section 14.24, \"Precision Math\"&LINK&https://dev.mysql.com/doc/refman/8.4/precision-math.html</link> .\nThe data type returned by <code>ROUND()</code> (and <link><code>TRUNCATE()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/mathematical-functions.html#function_truncate</link> ) is determined according to the rules listed here:\nWhen the first argument is of any integer type, the return type is always <link><code>BIGINT</code>&LINK&https://dev.mysql.com/doc/refman/8.4/integer-types.html</link> .\nWhen the first argument is of any floating-point type or of any non-numeric type, the return type is always <link><code>DOUBLE</code>&LINK&https://dev.mysql.com/doc/refman/8.4/floating-point-types.html</link> .\nWhen the first argument is a <link><code>DECIMAL</code>&LINK&https://dev.mysql.com/doc/refman/8.4/fixed-point-types.html</link> value, the return type is also <code>DECIMAL</code> .\nThe type attributes for the return value are also copied from the first argument, except in the case of <code>DECIMAL</code> , when the second argument is a constant value.\nWhen the desired number of decimal places is less than the scale of the argument, the scale and the precision of the result are adjusted accordingly.\nIn addition, for <code>ROUND()</code> (but not for the <link><code>TRUNCATE()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/mathematical-functions.html#function_truncate</link> function), the precision is extended by one place to accommodate rounding that increases the number of significant digits. If the second argument is negative, the return type is adjusted such that its scale is 0, with a corresponding precision. For example, <code>ROUND(99.999, 2)</code> returns <code>100.00</code> \u2014the first argument is <code>DECIMAL(5, 3)</code> , and the return type is <code>DECIMAL(5, 2)</code> .\nIf the second argument is negative, the return type has scale 0 and a corresponding precision; <code>ROUND(99.999, -1)</code> returns <code>100</code> , which is <code>DECIMAL(3, 0)</code> .",
        "Demo": [
            "mysql> SELECT ROUND(-1.23);\n-> -1\nmysql> SELECT ROUND(-1.58);\n-> -2\nmysql> SELECT ROUND(1.58);\n-> 2\nmysql> SELECT ROUND(1.298, 1);\n-> 1.3\nmysql> SELECT ROUND(1.298, 0);\n-> 1\nmysql> SELECT ROUND(23.298, -1);\n-> 20\nmysql> SELECT ROUND(.12345678901234567890123456789012345, 35);\n-> 0.123456789012345678901234567890",
            "mysql> SELECT ROUND(150.000,2), ROUND(150,2);\n+------------------+--------------+\n| ROUND(150.000,2) | ROUND(150,2) |\n+------------------+--------------+\n| 150.00 | 150 |\n+------------------+--------------+",
            "mysql> SELECT ROUND(2.5), ROUND(25E-1);\n+------------+--------------+\n| ROUND(2.5) | ROUND(25E-1) |\n+------------+--------------+\n| 3 | 2 |\n+------------+--------------+"
        ]
    },
    {
        "Name": "ROW_COUNT",
        "Tree": "(functionCall (scalarFunctionName (functionNameBase ROW_COUNT)) ( ))",
        "Description": [
            "The number of rows updated"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/information-functions.html#function_row-count"
        ],
        "Detail": "<link><code>ROW_COUNT()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/information-functions.html#function_row-count</link>\n<code>ROW_COUNT()</code> returns a value as follows:\nDDL statements: 0. This applies to statements such as <link><code>CREATE TABLE</code>&LINK&https://dev.mysql.com/doc/refman/8.4/create-table.html</link> or <link><code>DROP TABLE</code>&LINK&https://dev.mysql.com/doc/refman/8.4/drop-table.html</link> .\nDML statements other than <link><code>SELECT</code>&LINK&https://dev.mysql.com/doc/refman/8.4/select.html</link> : The number of affected rows. This applies to statements such as <link><code>UPDATE</code>&LINK&https://dev.mysql.com/doc/refman/8.4/update.html</link> , <link><code>INSERT</code>&LINK&https://dev.mysql.com/doc/refman/8.4/insert.html</link> , or <link><code>DELETE</code>&LINK&https://dev.mysql.com/doc/refman/8.4/delete.html</link> (as before), but now also to statements such as <link><code>ALTER TABLE</code>&LINK&https://dev.mysql.com/doc/refman/8.4/alter-table.html</link> and <link><code>LOAD DATA</code>&LINK&https://dev.mysql.com/doc/refman/8.4/load-data.html</link> .\n<link><code>SELECT</code>&LINK&https://dev.mysql.com/doc/refman/8.4/select.html</link> : -1 if the statement returns a result set, or the number of rows \" affected \" if it does not. For example, for <code>SELECT * FROM t1</code> , <link><code>ROW_COUNT()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/information-functions.html#function_row-count</link> returns -1. For <code>SELECT * FROM t1 INTO OUTFILE ' file_name '</code> , <link><code>ROW_COUNT()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/information-functions.html#function_row-count</link> returns the number of rows written to the file.\n<link><code>SIGNAL</code>&LINK&https://dev.mysql.com/doc/refman/8.4/signal.html</link> statements: 0.\nFor <link><code>UPDATE</code>&LINK&https://dev.mysql.com/doc/refman/8.4/update.html</link> statements, the affected-rows value by default is the number of rows actually changed. If you specify the <code>CLIENT_FOUND_ROWS</code> flag to <link><code>mysql_real_connect()</code>&LINK&https://dev.mysql.com/doc/c-api/8.4/en/mysql-real-connect.html</link> when connecting to <link>mysqld&LINK&https://dev.mysql.com/doc/refman/8.4/mysqld.html</link> , the affected-rows value is the number of rows \" found \" ; that is, matched by the <code>WHERE</code> clause.\nFor <link><code>REPLACE</code>&LINK&https://dev.mysql.com/doc/refman/8.4/replace.html</link> statements, the affected-rows value is 2 if the new row replaced an old row, because in this case, one row was inserted after the duplicate was deleted.\nFor <link><code>INSERT ... ON DUPLICATE KEY UPDATE</code>&LINK&https://dev.mysql.com/doc/refman/8.4/insert-on-duplicate.html</link> statements, the affected-rows value per row is 1 if the row is inserted as a new row, 2 if an existing row is updated, and 0 if an existing row is set to its current values. If you specify the <code>CLIENT_FOUND_ROWS</code> flag, the affected-rows value is 1 (not 0) if an existing row is set to its current values.\nThe <link><code>ROW_COUNT()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/information-functions.html#function_row-count</link> value is similar to the value from the <link><code>mysql_affected_rows()</code>&LINK&https://dev.mysql.com/doc/c-api/8.4/en/mysql-affected-rows.html</link> C API function and the row count that the <link>mysql&LINK&https://dev.mysql.com/doc/refman/8.4/mysql.html</link> client displays following statement execution.\nImportant\n<link><code>ROW_COUNT()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/information-functions.html#function_row-count</link> is not replicated reliably using statement-based replication. This function is automatically replicated using row-based replication.",
        "Demo": [
            "mysql> INSERT INTO t VALUES(1),(2),(3);\nQuery OK, 3 rows affected (0.00 sec)\nRecords: 3 Duplicates: 0 Warnings: 0\nmysql> SELECT ROW_COUNT();\n+-------------+\n| ROW_COUNT() |\n+-------------+\n| 3 |\n+-------------+\n1 row in set (0.00 sec)\nmysql> DELETE FROM t WHERE i IN(1,2);\nQuery OK, 2 rows affected (0.00 sec)\nmysql> SELECT ROW_COUNT();\n+-------------+\n| ROW_COUNT() |\n+-------------+\n| 2 |\n+-------------+\n1 row in set (0.00 sec)"
        ]
    },
    {
        "Name": "ROW_NUMBER",
        "Tree": "(functionCall (scalarFunctionName (functionNameBase ROW_NUMBER)) ( ))",
        "Description": [
            "Number of current row within its partition"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/window-function-descriptions.html#function_row-number"
        ],
        "Detail": "<link><code>ROW_NUMBER()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/window-function-descriptions.html#function_row-number</link> <code>over_clause</code>\nReturns the number of the current row within its partition. Rows numbers range from 1 to the number of partition rows.\n<code>ORDER BY</code> affects the order in which rows are numbered. Without <code>ORDER BY</code> , row numbering is nondeterministic.\n<link><code>ROW_NUMBER()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/window-function-descriptions.html#function_row-number</link> assigns peers different row numbers. To assign peers the same value, use <link><code>RANK()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/window-function-descriptions.html#function_rank</link> or <link><code>DENSE_RANK()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/window-function-descriptions.html#function_dense-rank</link> . For an example, see the <link><code>RANK()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/window-function-descriptions.html#function_rank</link> function description.\n<code>over_clause</code> is as described in <link>Section 14.20.2, \"Window Function Concepts and Syntax\"&LINK&https://dev.mysql.com/doc/refman/8.4/window-functions-usage.html</link> .",
        "Demo": []
    },
    {
        "Name": "RPAD",
        "Tree": "(functionCall (scalarFunctionName (functionNameBase RPAD)) ( ))",
        "Description": [
            "Append string the specified number of times"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/string-functions.html#function_rpad"
        ],
        "Detail": "<link><code>RPAD( str , len , padstr )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/string-functions.html#function_rpad</link>\nReturns the string <code>str</code> , right-padded with the string <code>padstr</code> to a length of <code>len</code> characters. If <code>str</code> is longer than <code>len</code> , the return value is shortened to <code>len</code> characters. If <code>str</code> , <code>padstr</code> , or <code>len</code> is <code>NULL</code> , the function returns <code>NULL</code> .\nThis function is multibyte safe.",
        "Demo": [
            "mysql> SELECT RPAD('hi',5,'?');\n-> 'hi???'\nmysql> SELECT RPAD('hi',1,'?');\n-> 'h'"
        ]
    },
    {
        "Name": "RTRIM",
        "Tree": "(functionCall (scalarFunctionName (functionNameBase RTRIM)) ( ))",
        "Description": [
            "Remove trailing spaces"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/string-functions.html#function_rtrim"
        ],
        "Detail": "<link><code>RTRIM( str )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/string-functions.html#function_rtrim</link>\nReturns the string <code>str</code> with trailing space characters removed.\nThis function is multibyte safe, and returns <code>NULL</code> if <code>str</code> is <code>NULL</code> .",
        "Demo": [
            "mysql> SELECT RTRIM('barbar ');\n-> 'barbar'"
        ]
    },
    {
        "Name": "SCHEMA",
        "Tree": "(functionCall (scalarFunctionName (functionNameBase SCHEMA)) ( ))",
        "Description": [
            "Synonym for DATABASE()"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/information-functions.html#function_schema"
        ],
        "Detail": "<link><code>SCHEMA()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/information-functions.html#function_schema</link>\nThis function is a synonym for <link><code>DATABASE()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/information-functions.html#function_database</link> .",
        "Demo": []
    },
    {
        "Name": "SEC_TO_TIME",
        "Tree": "(functionCall (scalarFunctionName (functionNameBase SEC_TO_TIME)) ( ))",
        "Description": [
            "Converts seconds to 'hh:mm:ss' format"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html#function_sec-to-time"
        ],
        "Detail": "<link><code>SEC_TO_TIME( seconds )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/date-and-time-functions.html#function_sec-to-time</link>\nReturns the <code>seconds</code> argument, converted to hours, minutes, and seconds, as a <link><code>TIME</code>&LINK&https://dev.mysql.com/doc/refman/8.4/time.html</link> value. The range of the result is constrained to that of the <link><code>TIME</code>&LINK&https://dev.mysql.com/doc/refman/8.4/time.html</link> data type. A warning occurs if the argument corresponds to a value outside that range.\nThe function returns <code>NULL</code> if <code>seconds</code> is <code>NULL</code> .",
        "Demo": [
            "mysql> SELECT SEC_TO_TIME(2378);\n-> '00:39:38'\nmysql> SELECT SEC_TO_TIME(2378) + 0;\n-> 3938"
        ]
    },
    {
        "Name": "SECOND",
        "Tree": "(functionCall (scalarFunctionName (functionNameBase SECOND)) ( ))",
        "Description": [
            "Return the second (0-59)"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html#function_second"
        ],
        "Detail": "<link><code>SECOND( time )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/date-and-time-functions.html#function_second</link>\nReturns the second for <code>time</code> , in the range <code>0</code> to <code>59</code> , or <code>NULL</code> if <code>time</code> is <code>NULL</code> .",
        "Demo": [
            "mysql> SELECT SECOND('10:05:03');\n-> 3"
        ]
    },
    {
        "Name": "SESSION_USER",
        "Tree": "(functionCall (scalarFunctionName (functionNameBase SESSION_USER)) ( ))",
        "Description": [
            "Synonym for USER()"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/information-functions.html#function_session-user"
        ],
        "Detail": "<link><code>SESSION_USER()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/information-functions.html#function_session-user</link>\n<link><code>SESSION_USER()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/information-functions.html#function_session-user</link> is a synonym for <link><code>USER()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/information-functions.html#function_user</link> .\nLike <link><code>USER()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/information-functions.html#function_user</link> , this function can be used for the default value of a <link><code>VARCHAR</code>&LINK&https://dev.mysql.com/doc/refman/8.4/char.html</link> or <link><code>TEXT</code>&LINK&https://dev.mysql.com/doc/refman/8.4/blob.html</link> column, as shown in the following <link><code>CREATE TABLE</code>&LINK&https://dev.mysql.com/doc/refman/8.4/create-table.html</link> statement:",
        "Demo": [
            "CREATE TABLE t (c VARCHAR(288) DEFAULT (SESSION_USER()));"
        ]
    },
    {
        "Name": "SHA1",
        "Tree": "(functionCall (scalarFunctionName (functionNameBase SHA1)) ( ))",
        "Description": [
            "Calculate an SHA-1 160-bit checksum"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/encryption-functions.html#function_sha1"
        ],
        "Detail": "<link><code>SHA1( str )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/encryption-functions.html#function_sha1</link> , <link><code>SHA( str )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/encryption-functions.html#function_sha1</link>\nCalculates an SHA-1 160-bit checksum for the string, as described in RFC 3174 (Secure Hash Algorithm). The value is returned as a string of 40 hexadecimal digits, or <code>NULL</code> if the argument is <code>NULL</code> . One of the possible uses for this function is as a hash key. See the notes at the beginning of this section about storing hash values efficiently. <link><code>SHA()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/encryption-functions.html#function_sha1</link> is synonymous with <link><code>SHA1()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/encryption-functions.html#function_sha1</link> .\nThe return value is a string in the connection character set.\n<link><code>SHA1()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/encryption-functions.html#function_sha1</link> can be considered a cryptographically more secure equivalent of <link><code>MD5()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/encryption-functions.html#function_md5</link> . However, see the note regarding the MD5 and SHA-1 algorithms at the beginning this section.",
        "Demo": [
            "mysql> SELECT SHA1('abc');\n-> 'a9993e364706816aba3e25717850c26c9cd0d89d'"
        ]
    },
    {
        "Name": "SHA",
        "Tree": "(functionCall (scalarFunctionName (functionNameBase SHA)) ( ))",
        "Description": [
            "Calculate an SHA-1 160-bit checksum"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/encryption-functions.html#function_sha1"
        ],
        "Detail": "<link><code>SHA1( str )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/encryption-functions.html#function_sha1</link> , <link><code>SHA( str )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/encryption-functions.html#function_sha1</link>\nCalculates an SHA-1 160-bit checksum for the string, as described in RFC 3174 (Secure Hash Algorithm). The value is returned as a string of 40 hexadecimal digits, or <code>NULL</code> if the argument is <code>NULL</code> . One of the possible uses for this function is as a hash key. See the notes at the beginning of this section about storing hash values efficiently. <link><code>SHA()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/encryption-functions.html#function_sha1</link> is synonymous with <link><code>SHA1()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/encryption-functions.html#function_sha1</link> .\nThe return value is a string in the connection character set.\n<link><code>SHA1()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/encryption-functions.html#function_sha1</link> can be considered a cryptographically more secure equivalent of <link><code>MD5()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/encryption-functions.html#function_md5</link> . However, see the note regarding the MD5 and SHA-1 algorithms at the beginning this section.",
        "Demo": [
            "mysql> SELECT SHA1('abc');\n-> 'a9993e364706816aba3e25717850c26c9cd0d89d'"
        ]
    },
    {
        "Name": "SHA2",
        "Tree": "(functionCall (scalarFunctionName (functionNameBase SHA2)) ( ))",
        "Description": [
            "Calculate an SHA-2 checksum"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/encryption-functions.html#function_sha2"
        ],
        "Detail": "<link><code>SHA2( str , hash_length )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/encryption-functions.html#function_sha2</link>\nCalculates the SHA-2 family of hash functions (SHA-224, SHA-256, SHA-384, and SHA-512). The first argument is the plaintext string to be hashed. The second argument indicates the desired bit length of the result, which must have a value of 224, 256, 384, 512, or 0 (which is equivalent to 256). If either argument is <code>NULL</code> or the hash length is not one of the permitted values, the return value is <code>NULL</code> . Otherwise, the function result is a hash value containing the desired number of bits. See the notes at the beginning of this section about storing hash values efficiently.\nThe return value is a string in the connection character set.\nThis function works only if MySQL has been configured with SSL support. See <link>Section 8.3, \"Using Encrypted Connections\"&LINK&https://dev.mysql.com/doc/refman/8.4/encrypted-connections.html</link> .\n<link><code>SHA2()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/encryption-functions.html#function_sha2</link> can be considered cryptographically more secure than <link><code>MD5()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/encryption-functions.html#function_md5</link> or <link><code>SHA1()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/encryption-functions.html#function_sha1</link> .",
        "Demo": [
            "mysql> SELECT SHA2('abc', 224);\n-> '23097d223405d8228642a477bda255b32aadbce4bda0b3f7e36c9da7'"
        ]
    },
    {
        "Name": "SIGN",
        "Tree": "(functionCall (scalarFunctionName (functionNameBase SIGN)) ( ))",
        "Description": [
            "Return the sign of the argument"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/mathematical-functions.html#function_sign"
        ],
        "Detail": "<link><code>SIGN( X )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/mathematical-functions.html#function_sign</link>\nReturns the sign of the argument as <code>-1</code> , <code>0</code> , or <code>1</code> , depending on whether <code>X</code> is negative, zero, or positive. Returns <code>NULL</code> if <code>X</code> is <code>NULL</code> .",
        "Demo": [
            "mysql> SELECT SIGN(-32);\n-> -1\nmysql> SELECT SIGN(0);\n-> 0\nmysql> SELECT SIGN(234);\n-> 1"
        ]
    },
    {
        "Name": "SIN",
        "Tree": "(functionCall (scalarFunctionName (functionNameBase SIN)) ( ))",
        "Description": [
            "Return the sine of the argument"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/mathematical-functions.html#function_sin"
        ],
        "Detail": "<link><code>SIN( X )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/mathematical-functions.html#function_sin</link>\nReturns the sine of <code>X</code> , where <code>X</code> is given in radians. Returns <code>NULL</code> if <code>X</code> is <code>NULL</code> .",
        "Demo": [
            "mysql> SELECT SIN(PI());\n-> 1.2246063538224e-16\nmysql> SELECT ROUND(SIN(PI()));\n-> 0"
        ]
    },
    {
        "Name": "SLEEP",
        "Tree": "(functionCall (scalarFunctionName (functionNameBase SLEEP)) ( ))",
        "Description": [
            "Sleep for a number of seconds"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/miscellaneous-functions.html#function_sleep"
        ],
        "Detail": "<link><code>SLEEP( duration )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/miscellaneous-functions.html#function_sleep</link>\nSleeps (pauses) for the number of seconds given by the <code>duration</code> argument, then returns 0. The duration may have a fractional part. If the argument is <code>NULL</code> or negative, <link><code>SLEEP()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/miscellaneous-functions.html#function_sleep</link> produces a warning, or an error in strict SQL mode.\nWhen sleep returns normally (without interruption), it returns 0:\nWhen <link><code>SLEEP()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/miscellaneous-functions.html#function_sleep</link> is the only thing invoked by a query that is interrupted, it returns 1 and the query itself returns no error. This is true whether the query is killed or times out:\nThis statement is interrupted using <link><code>KILL QUERY</code>&LINK&https://dev.mysql.com/doc/refman/8.4/kill.html</link> from another session:\nThis statement is interrupted by timing out:\nWhen <link><code>SLEEP()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/miscellaneous-functions.html#function_sleep</link> is only part of a query that is interrupted, the query returns an error:\nThis statement is interrupted using <link><code>KILL QUERY</code>&LINK&https://dev.mysql.com/doc/refman/8.4/kill.html</link> from another session:\nThis statement is interrupted by timing out:\nThis function is unsafe for statement-based replication. A warning is logged if you use this function when <link><code>binlog_format</code>&LINK&https://dev.mysql.com/doc/refman/8.4/replication-options-binary-log.html#sysvar_binlog_format</link> is set to <code>STATEMENT</code> .",
        "Demo": [
            "mysql> SELECT SLEEP(1000);\n+-------------+\n| SLEEP(1000) |\n+-------------+\n| 0 |\n+-------------+",
            "mysql> SELECT SLEEP(1000);\n+-------------+\n| SLEEP(1000) |\n+-------------+\n| 1 |\n+-------------+",
            "mysql> SELECT /*+ MAX_EXECUTION_TIME(1) */ SLEEP(1000);\n+-------------+\n| SLEEP(1000) |\n+-------------+\n| 1 |\n+-------------+",
            "mysql> SELECT 1 FROM t1 WHERE SLEEP(1000);\nERROR 1317 (70100): Query execution was interrupted",
            "mysql> SELECT /*+ MAX_EXECUTION_TIME(1000) */ 1 FROM t1 WHERE SLEEP(1000);\nERROR 3024 (HY000): Query execution was interrupted, maximum statement\nexecution time exceeded"
        ]
    },
    {
        "Name": "SOUNDEX",
        "Tree": "(functionCall (scalarFunctionName (functionNameBase SOUNDEX)) ( ))",
        "Description": [
            "Return a soundex string"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/string-functions.html#function_soundex"
        ],
        "Detail": "<link><code>SOUNDEX( str )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/string-functions.html#function_soundex</link>\nReturns a soundex string from <code>str</code> , or <code>NULL</code> if <code>str</code> is <code>NULL</code> . Two strings that sound almost the same should have identical soundex strings. A standard soundex string is four characters long, but the <link><code>SOUNDEX()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/string-functions.html#function_soundex</link> function returns an arbitrarily long string. You can use <link><code>SUBSTRING()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/string-functions.html#function_substring</link> on the result to get a standard soundex string. All nonalphabetic characters in <code>str</code> are ignored. All international alphabetic characters outside the A-Z range are treated as vowels.\nImportant\nWhen using <link><code>SOUNDEX()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/string-functions.html#function_soundex</link> , you should be aware of the following limitations:\nThis function, as currently implemented, is intended to work well with strings that are in the English language only. Strings in other languages may not produce reliable results.\nThis function is not guaranteed to provide consistent results with strings that use multibyte character sets, including <code>utf-8</code> . See Bug #22638 for more information.\nNote\nThis function implements the original Soundex algorithm, not the more popular enhanced version (also described by D. Knuth). The difference is that original version discards vowels first and duplicates second, whereas the enhanced version discards duplicates first and vowels second.",
        "Demo": [
            "mysql> SELECT SOUNDEX('Hello');\n-> 'H400'\nmysql> SELECT SOUNDEX('Quadratically');\n-> 'Q36324'"
        ]
    },
    {
        "Name": "SOURCE_POS_WAIT",
        "Tree": "(functionCall (fullId (uid (simpleId SOURCE_POS_WAIT))) ( ))",
        "Description": [
            "Block until the replica has read and applied all updates up to the\n      specified position"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/replication-functions-synchronization.html#function_source-pos-wait"
        ],
        "Detail": "<link><code>SOURCE_POS_WAIT( log_name , log_pos [, timeout ][, channel ])</code>&LINK&https://dev.mysql.com/doc/refman/8.4/replication-functions-synchronization.html#function_source-pos-wait</link>\nThis function is for control of source-replica synchronization. It blocks until the replica has read and applied all updates up to the specified position in the source's binary log.\nThe return value is the number of log events the replica had to wait for to advance to the specified position. The function returns <code>NULL</code> if the replication SQL thread is not started, the replica's source information is not initialized, the arguments are incorrect, or an error occurs. It returns <code>-1</code> if the timeout has been exceeded. If the replication SQL thread stops while <link><code>SOURCE_POS_WAIT()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/replication-functions-synchronization.html#function_source-pos-wait</link> is waiting, the function returns <code>NULL</code> . If the replica is past the specified position, the function returns immediately.\nIf the binary log file position has been marked as invalid, the function waits until a valid file position is known. The binary log file position can be marked as invalid when the <link><code>CHANGE REPLICATION SOURCE TO</code>&LINK&https://dev.mysql.com/doc/refman/8.4/change-replication-source-to.html</link> option <code>GTID_ONLY</code> is set for the replication channel, and the server is restarted or replication is stopped. The file position becomes valid after a transaction is successfully applied past the given file position. If the applier does not reach the stated position, the function waits until the timeout. Use a <link><code>SHOW REPLICA STATUS</code>&LINK&https://dev.mysql.com/doc/refman/8.4/show-replica-status.html</link> statement to check if the binary log file position has been marked as invalid.\nOn a multithreaded replica, the function waits until expiry of the limit set by the <link><code>replica_checkpoint_group</code>&LINK&https://dev.mysql.com/doc/refman/8.4/replication-options-replica.html#sysvar_replica_checkpoint_group</link> or <link><code>replica_checkpoint_period</code>&LINK&https://dev.mysql.com/doc/refman/8.4/replication-options-replica.html#sysvar_replica_checkpoint_period</link> system variable, when the checkpoint operation is called to update the status of the replica. Depending on the setting for the system variables, the function might therefore return some time after the specified position was reached.\nIf binary log transaction compression is in use and the transaction payload at the specified position is compressed (as a <code>Transaction_payload_event</code> ), the function waits until the whole transaction has been read and applied, and the positions have updated.\nIf a <code>timeout</code> value is specified, <link><code>SOURCE_POS_WAIT()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/replication-functions-synchronization.html#function_source-pos-wait</link> stops waiting when <code>timeout</code> seconds have elapsed. <code>timeout</code> must be greater than or equal to 0. (When the server is running in strict SQL mode, a negative <code>timeout</code> value is immediately rejected with <link><code>ER_WRONG_ARGUMENTS</code>&LINK&https://dev.mysql.com/doc/mysql-errors/8.4/en/server-error-reference.html#error_er_wrong_arguments</link> ; otherwise the function returns <code>NULL</code> , and raises a warning.)\nThe optional <code>channel</code> value enables you to name which replication channel the function applies to. See <link>Section 19.2.2, \"Replication Channels\"&LINK&https://dev.mysql.com/doc/refman/8.4/replication-channels.html</link> for more information.\nThis function is unsafe for statement-based replication. A warning is logged if you use this function when <link><code>binlog_format</code>&LINK&https://dev.mysql.com/doc/refman/8.4/replication-options-binary-log.html#sysvar_binlog_format</link> is set to <code>STATEMENT</code> .",
        "Demo": []
    },
    {
        "Name": "SPACE",
        "Tree": "(functionCall (fullId (uid (simpleId SPACE))) ( ))",
        "Description": [
            "Return a string of the specified number of spaces"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/string-functions.html#function_space"
        ],
        "Detail": "<link><code>SPACE( N )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/string-functions.html#function_space</link>\nReturns a string consisting of <code>N</code> space characters, or <code>NULL</code> if <code>N</code> is <code>NULL</code> .",
        "Demo": [
            "mysql> SELECT SPACE(6);\n-> ' '"
        ]
    },
    {
        "Name": "SQRT",
        "Tree": "(functionCall (scalarFunctionName (functionNameBase SQRT)) ( ))",
        "Description": [
            "Return the square root of the argument"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/mathematical-functions.html#function_sqrt"
        ],
        "Detail": "<link><code>SQRT( X )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/mathematical-functions.html#function_sqrt</link>\nReturns the square root of a nonnegative number <code>X</code> . If <code>X</code> is <code>NULL</code> , the function returns <code>NULL</code> .",
        "Demo": [
            "mysql> SELECT SQRT(4);\n-> 2\nmysql> SELECT SQRT(20);\n-> 4.4721359549996\nmysql> SELECT SQRT(-16);\n-> NULL"
        ]
    },
    {
        "Name": "ST_Area",
        "Tree": "(functionCall (scalarFunctionName (functionNameBase ST_Area)) ( ))",
        "Description": [
            "Return Polygon or MultiPolygon area"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/gis-polygon-property-functions.html#function_st-area"
        ],
        "Detail": "<link><code>ST_Area({ poly | mpoly })</code>&LINK&https://dev.mysql.com/doc/refman/8.4/gis-polygon-property-functions.html#function_st-area</link>\nReturns a double-precision number indicating the area of the <code>Polygon</code> or <code>MultiPolygon</code> argument, as measured in its spatial reference system.\n<link><code>ST_Area()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/gis-polygon-property-functions.html#function_st-area</link> handles its arguments as described in the introduction to this section, with these exceptions:\nIf the geometry is geometrically invalid, either the result is an undefined area (that is, it can be any number), or an error occurs.\nIf the geometry is valid but is not a <code>Polygon</code> or <code>MultiPolygon</code> object, an <link><code>ER_UNEXPECTED_GEOMETRY_TYPE</code>&LINK&https://dev.mysql.com/doc/mysql-errors/8.4/en/server-error-reference.html#error_er_unexpected_geometry_type</link> error occurs.\nIf the geometry is a valid <code>Polygon</code> in a Cartesian SRS, the result is the Cartesian area of the polygon.\nIf the geometry is a valid <code>MultiPolygon</code> in a Cartesian SRS, the result is the sum of the Cartesian area of the polygons.\nIf the geometry is a valid <code>Polygon</code> in a geographic SRS, the result is the geodetic area of the polygon in that SRS, in square meters.\nIf the geometry is a valid <code>MultiPolygon</code> in a geographic SRS, the result is the sum of geodetic area of the polygons in that SRS, in square meters.\nIf an area computation results in <code>+inf</code> , an <link><code>ER_DATA_OUT_OF_RANGE</code>&LINK&https://dev.mysql.com/doc/mysql-errors/8.4/en/server-error-reference.html#error_er_data_out_of_range</link> error occurs.\nIf the geometry has a geographic SRS with a longitude or latitude that is out of range, an error occurs:\nIf a longitude value is not in the range (\u2212180, 180], an <link><code>ER_GEOMETRY_PARAM_LONGITUDE_OUT_OF_RANGE</code>&LINK&https://dev.mysql.com/doc/mysql-errors/8.4/en/server-error-reference.html#error_er_geometry_param_longitude_out_of_range</link> error occurs.\nIf a latitude value is not in the range [\u221290, 90], an <link><code>ER_GEOMETRY_PARAM_LATITUDE_OUT_OF_RANGE</code>&LINK&https://dev.mysql.com/doc/mysql-errors/8.4/en/server-error-reference.html#error_er_geometry_param_latitude_out_of_range</link> error occurs.\nRanges shown are in degrees. The exact range limits deviate slightly due to floating-point arithmetic.",
        "Demo": [
            "mysql> SET @poly =\n'Polygon((0 0,0 3,3 0,0 0),(1 1,1 2,2 1,1 1))';\nmysql> SELECT ST_Area(ST_GeomFromText(@poly));\n+---------------------------------+\n| ST_Area(ST_GeomFromText(@poly)) |\n+---------------------------------+\n| 4 |\n+---------------------------------+\nmysql> SET @mpoly =\n'MultiPolygon(((0 0,0 3,3 3,3 0,0 0),(1 1,1 2,2 2,2 1,1 1)))';\nmysql> SELECT ST_Area(ST_GeomFromText(@mpoly));\n+----------------------------------+\n| ST_Area(ST_GeomFromText(@mpoly)) |\n+----------------------------------+\n| 8 |\n+----------------------------------+"
        ]
    },
    {
        "Name": "ST_AsBinary",
        "Tree": "(functionCall (scalarFunctionName (functionNameBase ST_AsBinary)) ( ))",
        "Description": [
            "Convert from internal geometry format to WKB"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/gis-format-conversion-functions.html#function_st-asbinary"
        ],
        "Detail": "<link><code>ST_AsBinary( g [, options ])</code>&LINK&https://dev.mysql.com/doc/refman/8.4/gis-format-conversion-functions.html#function_st-asbinary</link> , <link><code>ST_AsWKB( g [, options ])</code>&LINK&https://dev.mysql.com/doc/refman/8.4/gis-format-conversion-functions.html#function_st-asbinary</link>\nConverts a value in internal geometry format to its WKB representation and returns the binary result.\nThe function return value has geographic coordinates (latitude, longitude) in the order specified by the spatial reference system that applies to the geometry argument. An optional <code>options</code> argument may be given to override the default axis order.\n<link><code>ST_AsBinary()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/gis-format-conversion-functions.html#function_st-asbinary</link> and <link><code>ST_AsWKB()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/gis-format-conversion-functions.html#function_st-asbinary</link> handle their arguments as described in the introduction to this section.",
        "Demo": []
    },
    {
        "Name": "ST_AsWKB",
        "Tree": "(functionCall (scalarFunctionName (functionNameBase ST_AsWKB)) ( ))",
        "Description": [
            "Convert from internal geometry format to WKB"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/gis-format-conversion-functions.html#function_st-asbinary"
        ],
        "Detail": "<link><code>ST_AsBinary( g [, options ])</code>&LINK&https://dev.mysql.com/doc/refman/8.4/gis-format-conversion-functions.html#function_st-asbinary</link> , <link><code>ST_AsWKB( g [, options ])</code>&LINK&https://dev.mysql.com/doc/refman/8.4/gis-format-conversion-functions.html#function_st-asbinary</link>\nConverts a value in internal geometry format to its WKB representation and returns the binary result.\nThe function return value has geographic coordinates (latitude, longitude) in the order specified by the spatial reference system that applies to the geometry argument. An optional <code>options</code> argument may be given to override the default axis order.\n<link><code>ST_AsBinary()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/gis-format-conversion-functions.html#function_st-asbinary</link> and <link><code>ST_AsWKB()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/gis-format-conversion-functions.html#function_st-asbinary</link> handle their arguments as described in the introduction to this section.",
        "Demo": [
            "mysql> SET @g = ST_LineFromText('LINESTRING(0 5,5 10,10 15)', 4326);\nmysql> SELECT ST_AsText(ST_GeomFromWKB(ST_AsWKB(@g)));\n+-----------------------------------------+\n| ST_AsText(ST_GeomFromWKB(ST_AsWKB(@g))) |\n+-----------------------------------------+\n| LINESTRING(5 0,10 5,15 10) |\n+-----------------------------------------+\nmysql> SELECT ST_AsText(ST_GeomFromWKB(ST_AsWKB(@g, 'axis-order=long-lat')));\n+----------------------------------------------------------------+\n| ST_AsText(ST_GeomFromWKB(ST_AsWKB(@g, 'axis-order=long-lat'))) |\n+----------------------------------------------------------------+\n| LINESTRING(0 5,5 10,10 15) |\n+----------------------------------------------------------------+\nmysql> SELECT ST_AsText(ST_GeomFromWKB(ST_AsWKB(@g, 'axis-order=lat-long')));\n+----------------------------------------------------------------+\n| ST_AsText(ST_GeomFromWKB(ST_AsWKB(@g, 'axis-order=lat-long'))) |\n+----------------------------------------------------------------+\n| LINESTRING(5 0,10 5,15 10) |\n+----------------------------------------------------------------+"
        ]
    },
    {
        "Name": "ST_AsGeoJSON",
        "Tree": "(functionCall (fullId (uid (simpleId ST_AsGeoJSON))) ( ))",
        "Description": [
            "Generate GeoJSON object from geometry"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/spatial-geojson-functions.html#function_st-asgeojson"
        ],
        "Detail": "<link><code>ST_AsGeoJSON( g [, max_dec_digits [, options ]])</code>&LINK&https://dev.mysql.com/doc/refman/8.4/spatial-geojson-functions.html#function_st-asgeojson</link>\nGenerates a GeoJSON object from the geometry <code>g</code> . The object string has the connection character set and collation.\nIf any argument is <code>NULL</code> , the return value is <code>NULL</code> . If any non- <code>NULL</code> argument is invalid, an error occurs.\n<code>max_dec_digits</code> , if specified, limits the number of decimal digits for coordinates and causes rounding of output. If not specified, this argument defaults to its maximum value of 2 32 \u2212 1. The minimum is 0.\n<code>options</code> , if specified, is a bitmask. The following table shows the permitted flag values. If the geometry argument has an SRID of 0, no CRS object is produced even for those flag values that request one.\n<table><thead><tr><th>Flag Value</th>\n<th>Meaning</th></tr></thead>\n<tbody><tr><td>0</td>\n<td>No options. This is the default if\n<code>options</code>\nis\nnot specified.</td></tr>\n<tr><td>1</td>\n<td>Add a bounding box to the output.</td></tr>\n<tr><td>2</td>\n<td>Add a short-format CRS URN to the output. The default format is a short\nformat\n(\n<code>EPSG: srid</code>\n).</td></tr>\n<tr><td>4</td>\n<td>Add a long-format CRS URN\n(\n<code>urn:ogc:def:crs:EPSG:: srid</code>\n).\nThis flag overrides flag 2. For example, option values\nof 5 and 7 mean the same (add a bounding box and a\nlong-format CRS URN).</td></tr></tbody></table>",
        "Demo": [
            "mysql> SELECT ST_AsGeoJSON(ST_GeomFromText('POINT(11.11111 12.22222)'),2);\n+-------------------------------------------------------------+\n| ST_AsGeoJSON(ST_GeomFromText('POINT(11.11111 12.22222)'),2) |\n+-------------------------------------------------------------+\n| {\"type\": \"Point\", \"coordinates\": [11.11, 12.22]} |\n+-------------------------------------------------------------+"
        ]
    },
    {
        "Name": "ST_AsText",
        "Tree": "(functionCall (scalarFunctionName (functionNameBase ST_AsText)) ( ))",
        "Description": [
            "Convert from internal geometry format to WKT"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/gis-format-conversion-functions.html#function_st-astext"
        ],
        "Detail": "<link><code>ST_AsText( g [, options ])</code>&LINK&https://dev.mysql.com/doc/refman/8.4/gis-format-conversion-functions.html#function_st-astext</link> , <link><code>ST_AsWKT( g [, options ])</code>&LINK&https://dev.mysql.com/doc/refman/8.4/gis-format-conversion-functions.html#function_st-astext</link>\nConverts a value in internal geometry format to its WKT representation and returns the string result.\nThe function return value has geographic coordinates (latitude, longitude) in the order specified by the spatial reference system that applies to the geometry argument. An optional <code>options</code> argument may be given to override the default axis order.\n<link><code>ST_AsText()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/gis-format-conversion-functions.html#function_st-astext</link> and <link><code>ST_AsWKT()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/gis-format-conversion-functions.html#function_st-astext</link> handle their arguments as described in the introduction to this section.\nOutput for <code>MultiPoint</code> values includes parentheses around each point. For example:",
        "Demo": [
            "mysql> SET @g = 'LineString(1 1,2 2,3 3)';\nmysql> SELECT ST_AsText(ST_GeomFromText(@g));\n+--------------------------------+\n| ST_AsText(ST_GeomFromText(@g)) |\n+--------------------------------+\n| LINESTRING(1 1,2 2,3 3) |\n+--------------------------------+",
            "mysql> SELECT ST_AsText(ST_GeomFromText(@mp));\n+---------------------------------+\n| ST_AsText(ST_GeomFromText(@mp)) |\n+---------------------------------+\n| MULTIPOINT((1 1),(2 2),(3 3)) |\n+---------------------------------+"
        ]
    },
    {
        "Name": "ST_AsWKT",
        "Tree": "(functionCall (scalarFunctionName (functionNameBase ST_AsWKT)) ( ))",
        "Description": [
            "Convert from internal geometry format to WKT"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/gis-format-conversion-functions.html#function_st-astext"
        ],
        "Detail": "<link><code>ST_AsText( g [, options ])</code>&LINK&https://dev.mysql.com/doc/refman/8.4/gis-format-conversion-functions.html#function_st-astext</link> , <link><code>ST_AsWKT( g [, options ])</code>&LINK&https://dev.mysql.com/doc/refman/8.4/gis-format-conversion-functions.html#function_st-astext</link>\nConverts a value in internal geometry format to its WKT representation and returns the string result.\nThe function return value has geographic coordinates (latitude, longitude) in the order specified by the spatial reference system that applies to the geometry argument. An optional <code>options</code> argument may be given to override the default axis order.\n<link><code>ST_AsText()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/gis-format-conversion-functions.html#function_st-astext</link> and <link><code>ST_AsWKT()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/gis-format-conversion-functions.html#function_st-astext</link> handle their arguments as described in the introduction to this section.\nOutput for <code>MultiPoint</code> values includes parentheses around each point. For example:",
        "Demo": []
    },
    {
        "Name": "ST_Buffer",
        "Tree": "(functionCall (scalarFunctionName (functionNameBase ST_Buffer)) ( ))",
        "Description": [
            "Return geometry of points within given distance from geometry"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/spatial-operator-functions.html#function_st-buffer"
        ],
        "Detail": "<link><code>ST_Buffer( g , d [, strategy1 [, strategy2 [, strategy3 ]]])</code>&LINK&https://dev.mysql.com/doc/refman/8.4/spatial-operator-functions.html#function_st-buffer</link>\nReturns a geometry that represents all points whose distance from the geometry value <code>g</code> is less than or equal to a distance of <code>d</code> . The result is in the same SRS as the geometry argument.\nIf the geometry argument is empty, <link><code>ST_Buffer()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/spatial-operator-functions.html#function_st-buffer</link> returns an empty geometry.\nIf the distance is 0, <link><code>ST_Buffer()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/spatial-operator-functions.html#function_st-buffer</link> returns the geometry argument unchanged:\nIf the geometry argument is in a Cartesian SRS:\n<link><code>ST_Buffer()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/spatial-operator-functions.html#function_st-buffer</link> supports negative distances for <code>Polygon</code> and <code>MultiPolygon</code> values, and for geometry collections containing <code>Polygon</code> or <code>MultiPolygon</code> values.\nIf the result is reduced so much that it disappears, the result is an empty geometry.\nAn <link><code>ER_WRONG_ARGUMENTS</code>&LINK&https://dev.mysql.com/doc/mysql-errors/8.4/en/server-error-reference.html#error_er_wrong_arguments</link> error occurs for <link><code>ST_Buffer()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/spatial-operator-functions.html#function_st-buffer</link> with a negative distance for <code>Point</code> , <code>MultiPoint</code> , <code>LineString</code> , and <code>MultiLineString</code> values, and for geometry collections not containing any <code>Polygon</code> or <code>MultiPolygon</code> values.\n<code>Point</code> geometries in a geographic SRS are permitted, subject to the following conditions:\nIf the distance is not negative and no strategies are specified, the function returns the geographic buffer of the <code>Point</code> in its SRS. The distance argument must be in the SRS distance unit (currently always meters).\nIf the distance is negative or any strategy (except <code>NULL</code> ) is specified, an <link><code>ER_WRONG_ARGUMENTS</code>&LINK&https://dev.mysql.com/doc/mysql-errors/8.4/en/server-error-reference.html#error_er_wrong_arguments</link> error occurs.\nFor non- <code>Point</code> geometries, an <link><code>ER_NOT_IMPLEMENTED_FOR_GEOGRAPHIC_SRS</code>&LINK&https://dev.mysql.com/doc/mysql-errors/8.4/en/server-error-reference.html#error_er_not_implemented_for_geographic_srs</link> error occurs.\n<link><code>ST_Buffer()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/spatial-operator-functions.html#function_st-buffer</link> permits up to three optional strategy arguments following the distance argument. Strategies influence buffer computation. These arguments are byte string values produced by the <link><code>ST_Buffer_Strategy()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/spatial-operator-functions.html#function_st-buffer-strategy</link> function, to be used for point, join, and end strategies:\nPoint strategies apply to <code>Point</code> and <code>MultiPoint</code> geometries. If no point strategy is specified, the default is <link><code>ST_Buffer_Strategy('point_circle', 32)</code>&LINK&https://dev.mysql.com/doc/refman/8.4/spatial-operator-functions.html#function_st-buffer-strategy</link> .\nJoin strategies apply to <code>LineString</code> , <code>MultiLineString</code> , <code>Polygon</code> , and <code>MultiPolygon</code> geometries. If no join strategy is specified, the default is <link><code>ST_Buffer_Strategy('join_round', 32)</code>&LINK&https://dev.mysql.com/doc/refman/8.4/spatial-operator-functions.html#function_st-buffer-strategy</link> .\nEnd strategies apply to <code>LineString</code> and <code>MultiLineString</code> geometries. If no end strategy is specified, the default is <link><code>ST_Buffer_Strategy('end_round', 32)</code>&LINK&https://dev.mysql.com/doc/refman/8.4/spatial-operator-functions.html#function_st-buffer-strategy</link> .\nUp to one strategy of each type may be specified, and they may be given in any order.\nIf the buffer strategies are invalid, an <link><code>ER_WRONG_ARGUMENTS</code>&LINK&https://dev.mysql.com/doc/mysql-errors/8.4/en/server-error-reference.html#error_er_wrong_arguments</link> error occurs. Strategies are invalid under any of these circumstances:\nMultiple strategies of a given type (point, join, or end) are specified.\nA value that is not a strategy (such as an arbitrary binary string or a number) is passed as a strategy.\nA <code>Point</code> strategy is passed and the geometry contains no <code>Point</code> or <code>MultiPoint</code> values.\nAn end or join strategy is passed and the geometry contains no <code>LineString</code> , <code>Polygon</code> , <code>MultiLinestring</code> or <code>MultiPolygon</code> values.",
        "Demo": [
            "mysql> SET @pt = ST_GeomFromText('POINT(0 0)');\nmysql> SELECT ST_AsText(ST_Buffer(@pt, 0));\n+------------------------------+\n| ST_AsText(ST_Buffer(@pt, 0)) |\n+------------------------------+\n| POINT(0 0) |\n+------------------------------+",
            "mysql> SET @pt = ST_GeomFromText('POINT(0 0)');\nmysql> SET @pt_strategy = ST_Buffer_Strategy('point_square');\nmysql> SELECT ST_AsText(ST_Buffer(@pt, 2, @pt_strategy));\n+--------------------------------------------+\n| ST_AsText(ST_Buffer(@pt, 2, @pt_strategy)) |\n+--------------------------------------------+\n| POLYGON((-2 -2,2 -2,2 2,-2 2,-2 -2)) |\n+--------------------------------------------+",
            "mysql> SET @ls = ST_GeomFromText('LINESTRING(0 0,0 5,5 5)');\nmysql> SET @end_strategy = ST_Buffer_Strategy('end_flat');\nmysql> SET @join_strategy = ST_Buffer_Strategy('join_round', 10);\nmysql> SELECT ST_AsText(ST_Buffer(@ls, 5, @end_strategy, @join_strategy))\n+---------------------------------------------------------------+\n| ST_AsText(ST_Buffer(@ls, 5, @end_strategy, @join_strategy)) |\n+---------------------------------------------------------------+\n| POLYGON((5 5,5 10,0 10,-3.5355339059327373 8.535533905932738, |\n| -5 5,-5 0,0 0,5 0,5 5)) |\n+---------------------------------------------------------------+"
        ]
    },
    {
        "Name": "ST_Buffer_Strategy",
        "Tree": "(functionCall (fullId (uid (simpleId ST_Buffer_Strategy))) ( ))",
        "Description": [
            "Produce strategy option for ST_Buffer()"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/spatial-operator-functions.html#function_st-buffer-strategy"
        ],
        "Detail": "<link><code>ST_Buffer_Strategy( strategy [, points_per_circle ])</code>&LINK&https://dev.mysql.com/doc/refman/8.4/spatial-operator-functions.html#function_st-buffer-strategy</link>\nThis function returns a strategy byte string for use with <link><code>ST_Buffer()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/spatial-operator-functions.html#function_st-buffer</link> to influence buffer computation.\nInformation about strategies is available at <link>Boost.org&LINK&http://www.boost.org</link> .\nThe first argument must be a string indicating a strategy option:\nFor point strategies, permitted values are <code>'point_circle'</code> and <code>'point_square'</code> .\nFor join strategies, permitted values are <code>'join_round'</code> and <code>'join_miter'</code> .\nFor end strategies, permitted values are <code>'end_round'</code> and <code>'end_flat'</code> .\nIf the first argument is <code>'point_circle'</code> , <code>'join_round'</code> , <code>'join_miter'</code> , or <code>'end_round'</code> , the <code>points_per_circle</code> argument must be given as a positive numeric value. The maximum <code>points_per_circle</code> value is the value of the <link><code>max_points_in_geometry</code>&LINK&https://dev.mysql.com/doc/refman/8.4/server-system-variables.html#sysvar_max_points_in_geometry</link> system variable.\nFor examples, see the description of <link><code>ST_Buffer()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/spatial-operator-functions.html#function_st-buffer</link> .\n<link><code>ST_Buffer_Strategy()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/spatial-operator-functions.html#function_st-buffer-strategy</link> handles its arguments as described in the introduction to this section, with these exceptions:\nIf any argument is invalid, an <link><code>ER_WRONG_ARGUMENTS</code>&LINK&https://dev.mysql.com/doc/mysql-errors/8.4/en/server-error-reference.html#error_er_wrong_arguments</link> error occurs.\nIf the first argument is <code>'point_square'</code> or <code>'end_flat'</code> , the <code>points_per_circle</code> argument must not be given or an <link><code>ER_WRONG_ARGUMENTS</code>&LINK&https://dev.mysql.com/doc/mysql-errors/8.4/en/server-error-reference.html#error_er_wrong_arguments</link> error occurs.",
        "Demo": []
    },
    {
        "Name": "ST_Centroid",
        "Tree": "(functionCall (scalarFunctionName (functionNameBase ST_Centroid)) ( ))",
        "Description": [
            "Return centroid as a point"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/gis-polygon-property-functions.html#function_st-centroid"
        ],
        "Detail": "<link><code>ST_Centroid({ poly | mpoly })</code>&LINK&https://dev.mysql.com/doc/refman/8.4/gis-polygon-property-functions.html#function_st-centroid</link>\nReturns the mathematical centroid for the <code>Polygon</code> or <code>MultiPolygon</code> argument as a <code>Point</code> . The result is not guaranteed to be on the <code>MultiPolygon</code> .\nThis function processes geometry collections by computing the centroid point for components of highest dimension in the collection. Such components are extracted and made into a single <code>MultiPolygon</code> , <code>MultiLineString</code> , or <code>MultiPoint</code> for centroid computation.\n<link><code>ST_Centroid()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/gis-polygon-property-functions.html#function_st-centroid</link> handles its arguments as described in the introduction to this section, with these exceptions:\nThe return value is <code>NULL</code> for the additional condition that the argument is an empty geometry collection.\nIf the geometry has an SRID value for a geographic spatial reference system (SRS), an <link><code>ER_NOT_IMPLEMENTED_FOR_GEOGRAPHIC_SRS</code>&LINK&https://dev.mysql.com/doc/mysql-errors/8.4/en/server-error-reference.html#error_er_not_implemented_for_geographic_srs</link> error occurs.",
        "Demo": [
            "mysql> SET @poly =\nST_GeomFromText('POLYGON((0 0,10 0,10 10,0 10,0 0),(5 5,7 5,7 7,5 7,5 5))');\nmysql> SELECT ST_GeometryType(@poly),ST_AsText(ST_Centroid(@poly));\n+------------------------+--------------------------------------------+\n| ST_GeometryType(@poly) | ST_AsText(ST_Centroid(@poly)) |\n+------------------------+--------------------------------------------+\n| POLYGON | POINT(4.958333333333333 4.958333333333333) |\n+------------------------+--------------------------------------------+"
        ]
    },
    {
        "Name": "ST_Collect",
        "Tree": "(functionCall (fullId (uid (simpleId ST_Collect))) ( ))",
        "Description": [
            "Aggregate spatial values into collection"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/spatial-aggregate-functions.html#function_st-collect"
        ],
        "Detail": "<link><code>ST_Collect([DISTINCT] g ) [ over_clause ]</code>&LINK&https://dev.mysql.com/doc/refman/8.4/spatial-aggregate-functions.html#function_st-collect</link>\nAggregates geometry values and returns a single geometry collection value. With the <code>DISTINCT</code> option, returns the aggregation of the distinct geometry arguments.\nAs with other aggregate functions, <code>GROUP BY</code> may be used to group arguments into subsets. <link><code>ST_Collect()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/spatial-aggregate-functions.html#function_st-collect</link> returns an aggregate value for each subset.\nThis function executes as a window function if <code>over_clause</code> is present. <code>over_clause</code> is as described in <link>Section 14.20.2, \"Window Function Concepts and Syntax\"&LINK&https://dev.mysql.com/doc/refman/8.4/window-functions-usage.html</link> . In contrast to most aggregate functions that support windowing, <link><code>ST_Collect()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/spatial-aggregate-functions.html#function_st-collect</link> permits use of <code>over_clause</code> together with <code>DISTINCT</code> .\n<link><code>ST_Collect()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/spatial-aggregate-functions.html#function_st-collect</link> handles its arguments as follows:\n<code>NULL</code> arguments are ignored.\nIf all arguments are <code>NULL</code> or the aggregate result is empty, the return value is <code>NULL</code> .\nIf any geometry argument is not a syntactically well-formed geometry, an <link><code>ER_GIS_INVALID_DATA</code>&LINK&https://dev.mysql.com/doc/mysql-errors/8.4/en/server-error-reference.html#error_er_gis_invalid_data</link> error occurs.\nIf any geometry argument is a syntactically well-formed geometry in an undefined spatial reference system (SRS), an <link><code>ER_SRS_NOT_FOUND</code>&LINK&https://dev.mysql.com/doc/mysql-errors/8.4/en/server-error-reference.html#error_er_srs_not_found</link> error occurs.\nIf there are multiple geometry arguments and those arguments are in the same SRS, the return value is in that SRS. If those arguments are not in the same SRS, an <link><code>ER_GIS_DIFFERENT_SRIDS_AGGREGATION</code>&LINK&https://dev.mysql.com/doc/mysql-errors/8.4/en/server-error-reference.html#error_er_gis_different_srids_aggregation</link> error occurs.\nThe result is the narrowest <code>Multi Xxx</code> or <code>GeometryCollection</code> value possible, with the result type determined from the non- <code>NULL</code> geometry arguments as follows:\nIf all arguments are <code>Point</code> values, the result is a <code>MultiPoint</code> value.\nIf all arguments are <code>LineString</code> values, the result is a <code>MultiLineString</code> value.\nIf all arguments are <code>Polygon</code> values, the result is a <code>MultiPolygon</code> value.\nOtherwise, the arguments are a mix of geometry types and the result is a <code>GeometryCollection</code> value.\nThis example data set shows hypothetical products by year and location of manufacture:\nSome sample queries using <link><code>ST_Collect()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/spatial-aggregate-functions.html#function_st-collect</link> on the data set:",
        "Demo": [
            "mysql> SELECT ST_AsText(ST_Collect(location)) AS result\nFROM product;\n+------------------------------------------------------------------+\n| result |\n+------------------------------------------------------------------+\n| MULTIPOINT((60 -24),(28 -77),(28 -77),(38 60),(60 -24),(28 -77)) |\n+------------------------------------------------------------------+\nmysql> SELECT ST_AsText(ST_Collect(DISTINCT location)) AS result\nFROM product;\n+---------------------------------------+\n| result |\n+---------------------------------------+\n| MULTIPOINT((60 -24),(28 -77),(38 60)) |\n+---------------------------------------+\nmysql> SELECT year, ST_AsText(ST_Collect(location)) AS result\nFROM product GROUP BY year;\n+------+------------------------------------------------+\n| year | result |\n+------+------------------------------------------------+\n| 2000 | MULTIPOINT((60 -24),(28 -77),(28 -77),(38 60)) |\n| 2001 | MULTIPOINT((60 -24),(28 -77)) |\n+------+------------------------------------------------+\nmysql> SELECT year, ST_AsText(ST_Collect(DISTINCT location)) AS result\nFROM product GROUP BY year;\n+------+---------------------------------------+\n| year | result |\n+------+---------------------------------------+\n| 2000 | MULTIPOINT((60 -24),(28 -77),(38 60)) |\n| 2001 | MULTIPOINT((60 -24),(28 -77)) |\n+------+---------------------------------------+\n# selects nothing\nmysql> SELECT ST_Collect(location) AS result\nFROM product WHERE year = 1999;\n+--------+\n| result |\n+--------+\n| NULL |\n+--------+\nmysql> SELECT ST_AsText(ST_Collect(location)\nOVER (ORDER BY year, product ROWS BETWEEN 1 PRECEDING AND CURRENT ROW))\nAS result\nFROM product;\n+-------------------------------+\n| result |\n+-------------------------------+\n| MULTIPOINT((28 -77)) |\n| MULTIPOINT((28 -77),(60 -24)) |\n| MULTIPOINT((60 -24),(28 -77)) |\n| MULTIPOINT((28 -77),(38 60)) |\n| MULTIPOINT((38 60),(60 -24)) |\n| MULTIPOINT((60 -24),(28 -77)) |\n+-------------------------------+"
        ]
    },
    {
        "Name": "ST_Contains",
        "Tree": "(functionCall (scalarFunctionName (functionNameBase ST_Contains)) ( ))",
        "Description": [
            "Whether one geometry contains another"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/spatial-relation-functions-object-shapes.html#function_st-contains"
        ],
        "Detail": "<link><code>ST_Contains( g1 , g2 )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/spatial-relation-functions-object-shapes.html#function_st-contains</link>\nReturns 1 or 0 to indicate whether <code>g1</code> completely contains <code>g2</code> . This tests the opposite relationship as <link><code>ST_Within()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/spatial-relation-functions-object-shapes.html#function_st-within</link> .\n<link><code>ST_Contains()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/spatial-relation-functions-object-shapes.html#function_st-contains</link> handles its arguments as described in the introduction to this section.",
        "Demo": []
    },
    {
        "Name": "ST_ConvexHull",
        "Tree": "(functionCall (fullId (uid (simpleId ST_ConvexHull))) ( ))",
        "Description": [
            "Return convex hull of geometry"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/spatial-operator-functions.html#function_st-convexhull"
        ],
        "Detail": "<link><code>ST_ConvexHull( g )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/spatial-operator-functions.html#function_st-convexhull</link>\nReturns a geometry that represents the convex hull of the geometry value <code>g</code> .\nThis function computes a geometry's convex hull by first checking whether its vertex points are colinear. The function returns a linear hull if so, a polygon hull otherwise. This function processes geometry collections by extracting all vertex points of all components of the collection, creating a <code>MultiPoint</code> value from them, and computing its convex hull.\n<link><code>ST_ConvexHull()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/spatial-operator-functions.html#function_st-convexhull</link> handles its arguments as described in the introduction to this section, with this exception:\nThe return value is <code>NULL</code> for the additional condition that the argument is an empty geometry collection.",
        "Demo": [
            "mysql> SET @g = 'MULTIPOINT(5 0,25 0,15 10,15 25)';\nmysql> SELECT ST_AsText(ST_ConvexHull(ST_GeomFromText(@g)));\n+-----------------------------------------------+\n| ST_AsText(ST_ConvexHull(ST_GeomFromText(@g))) |\n+-----------------------------------------------+\n| POLYGON((5 0,25 0,15 25,5 0)) |\n+-----------------------------------------------+"
        ]
    },
    {
        "Name": "ST_Crosses",
        "Tree": "(functionCall (scalarFunctionName (functionNameBase ST_Crosses)) ( ))",
        "Description": [
            "Whether one geometry crosses another"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/spatial-relation-functions-object-shapes.html#function_st-crosses"
        ],
        "Detail": "<link><code>ST_Crosses( g1 , g2 )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/spatial-relation-functions-object-shapes.html#function_st-crosses</link>\nTwo geometries spatially cross if their spatial relation has the following properties:\nUnless <code>g1</code> and <code>g2</code> are both of dimension 1: <code>g1</code> crosses <code>g2</code> if the interior of <code>g2</code> has points in common with the interior of <code>g1</code> , but <code>g2</code> does not cover the entire interior of <code>g1</code> .\nIf both <code>g1</code> and <code>g2</code> are of dimension 1: If the lines cross each other in a finite number of points (that is, no common line segments, only single points in common).\nThis function returns 1 or 0 to indicate whether <code>g1</code> spatially crosses <code>g2</code> .\n<link><code>ST_Crosses()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/spatial-relation-functions-object-shapes.html#function_st-crosses</link> handles its arguments as described in the introduction to this section except that the return value is <code>NULL</code> for these additional conditions:\n<code>g1</code> is of dimension 2 ( <code>Polygon</code> or <code>MultiPolygon</code> ).\n<code>g2</code> is of dimension 1 ( <code>Point</code> or <code>MultiPoint</code> ).",
        "Demo": []
    },
    {
        "Name": "ST_Difference",
        "Tree": "(functionCall (scalarFunctionName (functionNameBase ST_Difference)) ( ))",
        "Description": [
            "Return point set difference of two geometries"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/spatial-operator-functions.html#function_st-difference"
        ],
        "Detail": "<link><code>ST_Difference( g1 , g2 )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/spatial-operator-functions.html#function_st-difference</link>\nReturns a geometry that represents the point set difference of the geometry values <code>g1</code> and <code>g2</code> . The result is in the same SRS as the geometry arguments.\n<link><code>ST_Difference()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/spatial-operator-functions.html#function_st-difference</link> permits arguments in either a Cartesian or a geographic SRS, and handles its arguments as described in the introduction to this section.",
        "Demo": [
            "mysql> SET @g1 = Point(1,1), @g2 = Point(2,2);\nmysql> SELECT ST_AsText(ST_Difference(@g1, @g2));\n+------------------------------------+\n| ST_AsText(ST_Difference(@g1, @g2)) |\n+------------------------------------+\n| POINT(1 1) |\n+------------------------------------+"
        ]
    },
    {
        "Name": "ST_Dimension",
        "Tree": "(functionCall (scalarFunctionName (functionNameBase ST_Dimension)) ( ))",
        "Description": [
            "Dimension of geometry"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/gis-general-property-functions.html#function_st-dimension"
        ],
        "Detail": "<link><code>ST_Dimension( g )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/gis-general-property-functions.html#function_st-dimension</link>\nReturns the inherent dimension of the geometry value <code>g</code> . The dimension can be \u22121, 0, 1, or 2. The meaning of these values is given in <link>Section 13.4.2.2, \"Geometry Class\"&LINK&https://dev.mysql.com/doc/refman/8.4/gis-class-geometry.html</link> .\n<link><code>ST_Dimension()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/gis-general-property-functions.html#function_st-dimension</link> handles its arguments as described in the introduction to this section.",
        "Demo": [
            "mysql> SELECT ST_Dimension(ST_GeomFromText('LineString(1 1,2 2)'));\n+------------------------------------------------------+\n| ST_Dimension(ST_GeomFromText('LineString(1 1,2 2)')) |\n+------------------------------------------------------+\n| 1 |\n+------------------------------------------------------+"
        ]
    },
    {
        "Name": "ST_Disjoint",
        "Tree": "(functionCall (scalarFunctionName (functionNameBase ST_Disjoint)) ( ))",
        "Description": [
            "Whether one geometry is disjoint from another"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/spatial-relation-functions-object-shapes.html#function_st-disjoint"
        ],
        "Detail": "<link><code>ST_Disjoint( g1 , g2 )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/spatial-relation-functions-object-shapes.html#function_st-disjoint</link>\nReturns 1 or 0 to indicate whether <code>g1</code> is spatially disjoint from (does not intersect) <code>g2</code> .\n<link><code>ST_Disjoint()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/spatial-relation-functions-object-shapes.html#function_st-disjoint</link> handles its arguments as described in the introduction to this section.",
        "Demo": []
    },
    {
        "Name": "ST_Distance",
        "Tree": "(functionCall (scalarFunctionName (functionNameBase ST_Distance)) ( ))",
        "Description": [
            "The distance of one geometry from another"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/spatial-relation-functions-object-shapes.html#function_st-distance"
        ],
        "Detail": "<link><code>ST_Distance( g1 , g2 [, unit ])</code>&LINK&https://dev.mysql.com/doc/refman/8.4/spatial-relation-functions-object-shapes.html#function_st-distance</link>\nReturns the distance between <code>g1</code> and <code>g2</code> , measured in the length unit of the spatial reference system (SRS) of the geometry arguments, or in the unit of the optional <code>unit</code> argument if that is specified.\nThis function processes geometry collections by returning the shortest distance among all combinations of the components of the two geometry arguments.\n<link><code>ST_Distance()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/spatial-relation-functions-object-shapes.html#function_st-distance</link> handles its geometry arguments as described in the introduction to this section, with these exceptions:\n<link><code>ST_Distance()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/spatial-relation-functions-object-shapes.html#function_st-distance</link> detects arguments in a geographic (ellipsoidal) spatial reference system and returns the geodetic distance on the ellipsoid. <link><code>ST_Distance()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/spatial-relation-functions-object-shapes.html#function_st-distance</link> supports distance calculations for geographic SRS arguments of all geometry types.\nIf any argument is geometrically invalid, either the result is an undefined distance (that is, it can be any number), or an error occurs.\nIf an intermediate or final result produces <code>NaN</code> or a negative number, an <link><code>ER_GIS_INVALID_DATA</code>&LINK&https://dev.mysql.com/doc/mysql-errors/8.4/en/server-error-reference.html#error_er_gis_invalid_data</link> error occurs.\n<link><code>ST_Distance()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/spatial-relation-functions-object-shapes.html#function_st-distance</link> permits specifying the linear unit for the returned distance value with an optional <code>unit</code> argument which <link><code>ST_Distance()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/spatial-relation-functions-object-shapes.html#function_st-distance</link> handles as described in the introduction to this section.\nFor the special case of distance calculations on a sphere, see the <link><code>ST_Distance_Sphere()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/spatial-convenience-functions.html#function_st-distance-sphere</link> function.",
        "Demo": [
            "mysql> SET @g1 = ST_GeomFromText('POINT(1 1)');\nmysql> SET @g2 = ST_GeomFromText('POINT(2 2)');\nmysql> SELECT ST_Distance(@g1, @g2);\n+-----------------------+\n| ST_Distance(@g1, @g2) |\n+-----------------------+\n| 1.4142135623730951 |\n+-----------------------+\nmysql> SET @g1 = ST_GeomFromText('POINT(1 1)', 4326);\nmysql> SET @g2 = ST_GeomFromText('POINT(2 2)', 4326);\nmysql> SELECT ST_Distance(@g1, @g2);\n+-----------------------+\n| ST_Distance(@g1, @g2) |\n+-----------------------+\n| 156874.3859490455 |\n+-----------------------+\nmysql> SELECT ST_Distance(@g1, @g2, 'metre');\n+--------------------------------+\n| ST_Distance(@g1, @g2, 'metre') |\n+--------------------------------+\n| 156874.3859490455 |\n+--------------------------------+\nmysql> SELECT ST_Distance(@g1, @g2, 'foot');\n+-------------------------------+\n| ST_Distance(@g1, @g2, 'foot') |\n+-------------------------------+\n| 514679.7439273146 |\n+-------------------------------+"
        ]
    },
    {
        "Name": "ST_Distance_Sphere",
        "Tree": "(functionCall (fullId (uid (simpleId ST_Distance_Sphere))) ( ))",
        "Description": [
            "Minimum distance on earth between two geometries"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/spatial-convenience-functions.html#function_st-distance-sphere"
        ],
        "Detail": "<link><code>ST_Distance_Sphere( g1 , g2 [, radius ])</code>&LINK&https://dev.mysql.com/doc/refman/8.4/spatial-convenience-functions.html#function_st-distance-sphere</link>\nReturns the minimum spherical distance between <code>Point</code> or <code>MultiPoint</code> arguments on a sphere, in meters. (For general-purpose distance calculations, see the <link><code>ST_Distance()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/spatial-relation-functions-object-shapes.html#function_st-distance</link> function.) The optional <code>radius</code> argument should be given in meters.\nIf both geometry parameters are valid Cartesian <code>Point</code> or <code>MultiPoint</code> values in SRID 0, the return value is shortest distance between the two geometries on a sphere with the provided radius. If omitted, the default radius is 6,370,986 meters, Point X and Y coordinates are interpreted as longitude and latitude, respectively, in degrees.\nIf both geometry parameters are valid <code>Point</code> or <code>MultiPoint</code> values in a geographic spatial reference system (SRS), the return value is the shortest distance between the two geometries on a sphere with the provided radius. If omitted, the default radius is equal to the mean radius, defined as (2a+b)/3, where a is the semi-major axis and b is the semi-minor axis of the SRS.\n<link><code>ST_Distance_Sphere()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/spatial-convenience-functions.html#function_st-distance-sphere</link> handles its arguments as described in the introduction to this section, with these exceptions:\nSupported geometry argument combinations are <code>Point</code> and <code>Point</code> , or <code>Point</code> and <code>MultiPoint</code> (in any argument order). If at least one of the geometries is neither <code>Point</code> nor <code>MultiPoint</code> , and its SRID is 0, an <link><code>ER_NOT_IMPLEMENTED_FOR_CARTESIAN_SRS</code>&LINK&https://dev.mysql.com/doc/mysql-errors/8.4/en/server-error-reference.html#error_er_not_implemented_for_cartesian_srs</link> error occurs. If at least one of the geometries is neither <code>Point</code> nor <code>MultiPoint</code> , and its SRID refers to a geographic SRS, an <link><code>ER_NOT_IMPLEMENTED_FOR_GEOGRAPHIC_SRS</code>&LINK&https://dev.mysql.com/doc/mysql-errors/8.4/en/server-error-reference.html#error_er_not_implemented_for_geographic_srs</link> error occurs. If any geometry refers to a projected SRS, an <link><code>ER_NOT_IMPLEMENTED_FOR_PROJECTED_SRS</code>&LINK&https://dev.mysql.com/doc/mysql-errors/8.4/en/server-error-reference.html#error_er_not_implemented_for_projected_srs</link> error occurs.\nIf any argument has a longitude or latitude that is out of range, an error occurs:\nIf a longitude value is not in the range (\u2212180, 180], an <link><code>ER_GEOMETRY_PARAM_LONGITUDE_OUT_OF_RANGE</code>&LINK&https://dev.mysql.com/doc/mysql-errors/8.4/en/server-error-reference.html#error_er_geometry_param_longitude_out_of_range</link> error occurs.\nIf a latitude value is not in the range [\u221290, 90], an <link><code>ER_GEOMETRY_PARAM_LATITUDE_OUT_OF_RANGE</code>&LINK&https://dev.mysql.com/doc/mysql-errors/8.4/en/server-error-reference.html#error_er_geometry_param_latitude_out_of_range</link> error occurs.\nRanges shown are in degrees. If an SRS uses another unit, the range uses the corresponding values in its unit. The exact range limits deviate slightly due to floating-point arithmetic.\nIf the <code>radius</code> argument is present but not positive, an <link><code>ER_NONPOSITIVE_RADIUS</code>&LINK&https://dev.mysql.com/doc/mysql-errors/8.4/en/server-error-reference.html#error_er_nonpositive_radius</link> error occurs.\nIf the distance exceeds the range of a double-precision number, an <link><code>ER_STD_OVERFLOW_ERROR</code>&LINK&https://dev.mysql.com/doc/mysql-errors/8.4/en/server-error-reference.html#error_er_std_overflow_error</link> error occurs.",
        "Demo": [
            "mysql> SET @pt1 = ST_GeomFromText('POINT(0 0)');\nmysql> SET @pt2 = ST_GeomFromText('POINT(180 0)');\nmysql> SELECT ST_Distance_Sphere(@pt1, @pt2);\n+--------------------------------+\n| ST_Distance_Sphere(@pt1, @pt2) |\n+--------------------------------+\n| 20015042.813723423 |\n+--------------------------------+"
        ]
    },
    {
        "Name": "ST_EndPoint",
        "Tree": "(functionCall (scalarFunctionName (functionNameBase ST_EndPoint)) ( ))",
        "Description": [
            "End Point of LineString"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/gis-linestring-property-functions.html#function_st-endpoint"
        ],
        "Detail": "<link><code>ST_EndPoint( ls )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/gis-linestring-property-functions.html#function_st-endpoint</link>\nReturns the <code>Point</code> that is the endpoint of the <code>LineString</code> value <code>ls</code> .\n<link><code>ST_EndPoint()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/gis-linestring-property-functions.html#function_st-endpoint</link> handles its arguments as described in the introduction to this section.",
        "Demo": [
            "mysql> SET @ls = 'LineString(1 1,2 2,3 3)';\nmysql> SELECT ST_AsText(ST_EndPoint(ST_GeomFromText(@ls)));\n+----------------------------------------------+\n| ST_AsText(ST_EndPoint(ST_GeomFromText(@ls))) |\n+----------------------------------------------+\n| POINT(3 3) |\n+----------------------------------------------+"
        ]
    },
    {
        "Name": "ST_Envelope",
        "Tree": "(functionCall (scalarFunctionName (functionNameBase ST_Envelope)) ( ))",
        "Description": [
            "Return MBR of geometry"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/gis-general-property-functions.html#function_st-envelope"
        ],
        "Detail": "<link><code>ST_Envelope( g )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/gis-general-property-functions.html#function_st-envelope</link>\nReturns the minimum bounding rectangle (MBR) for the geometry value <code>g</code> . The result is returned as a <code>Polygon</code> value that is defined by the corner points of the bounding box:\nIf the argument is a point or a vertical or horizontal line segment, <link><code>ST_Envelope()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/gis-general-property-functions.html#function_st-envelope</link> returns the point or the line segment as its MBR rather than returning an invalid polygon:\n<link><code>ST_Envelope()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/gis-general-property-functions.html#function_st-envelope</link> handles its arguments as described in the introduction to this section, with this exception:\nIf the geometry has an SRID value for a geographic spatial reference system (SRS), an <link><code>ER_NOT_IMPLEMENTED_FOR_GEOGRAPHIC_SRS</code>&LINK&https://dev.mysql.com/doc/mysql-errors/8.4/en/server-error-reference.html#error_er_not_implemented_for_geographic_srs</link> error occurs.",
        "Demo": [
            "mysql> SELECT ST_AsText(ST_Envelope(ST_GeomFromText('LineString(1 1,2 2)')));\n+----------------------------------------------------------------+\n| ST_AsText(ST_Envelope(ST_GeomFromText('LineString(1 1,2 2)'))) |\n+----------------------------------------------------------------+\n| POLYGON((1 1,2 1,2 2,1 2,1 1)) |\n+----------------------------------------------------------------+",
            "mysql> SELECT ST_AsText(ST_Envelope(ST_GeomFromText('LineString(1 1,1 2)')));\n+----------------------------------------------------------------+\n| ST_AsText(ST_Envelope(ST_GeomFromText('LineString(1 1,1 2)'))) |\n+----------------------------------------------------------------+\n| LINESTRING(1 1,1 2) |\n+----------------------------------------------------------------+"
        ]
    },
    {
        "Name": "ST_Equals",
        "Tree": "(functionCall (scalarFunctionName (functionNameBase ST_Equals)) ( ))",
        "Description": [
            "Whether one geometry is equal to another"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/spatial-relation-functions-object-shapes.html#function_st-equals"
        ],
        "Detail": "<link><code>ST_Equals( g1 , g2 )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/spatial-relation-functions-object-shapes.html#function_st-equals</link>\nReturns 1 or 0 to indicate whether <code>g1</code> is spatially equal to <code>g2</code> .\n<link><code>ST_Equals()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/spatial-relation-functions-object-shapes.html#function_st-equals</link> handles its arguments as described in the introduction to this section, except that it does not return <code>NULL</code> for empty geometry arguments.",
        "Demo": [
            "mysql> SET @g1 = Point(1,1), @g2 = Point(2,2);\nmysql> SELECT ST_Equals(@g1, @g1), ST_Equals(@g1, @g2);\n+---------------------+---------------------+\n| ST_Equals(@g1, @g1) | ST_Equals(@g1, @g2) |\n+---------------------+---------------------+\n| 1 | 0 |\n+---------------------+---------------------+"
        ]
    },
    {
        "Name": "ST_ExteriorRing",
        "Tree": "(functionCall (scalarFunctionName (functionNameBase ST_ExteriorRing)) ( ))",
        "Description": [
            "Return exterior ring of Polygon"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/gis-polygon-property-functions.html#function_st-exteriorring"
        ],
        "Detail": "<link><code>ST_ExteriorRing( poly )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/gis-polygon-property-functions.html#function_st-exteriorring</link>\nReturns the exterior ring of the <code>Polygon</code> value <code>poly</code> as a <code>LineString</code> .\n<link><code>ST_ExteriorRing()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/gis-polygon-property-functions.html#function_st-exteriorring</link> handles its arguments as described in the introduction to this section.",
        "Demo": [
            "mysql> SET @poly =\n'Polygon((0 0,0 3,3 3,3 0,0 0),(1 1,1 2,2 2,2 1,1 1))';\nmysql> SELECT ST_AsText(ST_ExteriorRing(ST_GeomFromText(@poly)));\n+----------------------------------------------------+\n| ST_AsText(ST_ExteriorRing(ST_GeomFromText(@poly))) |\n+----------------------------------------------------+\n| LINESTRING(0 0,0 3,3 3,3 0,0 0) |\n+----------------------------------------------------+"
        ]
    },
    {
        "Name": "ST_FrechetDistance",
        "Tree": "(functionCall (fullId (uid (simpleId ST_FrechetDistance))) ( ))",
        "Description": [
            "The discrete Fr\u00e9chet distance of one geometry from another"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/spatial-relation-functions-object-shapes.html#function_st-frechetdistance"
        ],
        "Detail": "<link><code>ST_FrechetDistance( g1 , g2 [, unit ])</code>&LINK&https://dev.mysql.com/doc/refman/8.4/spatial-relation-functions-object-shapes.html#function_st-frechetdistance</link>\nReturns the discrete Fr\u00e9chet distance between two geometries, reflecting how similar the geometries are. The result is a double-precision number measured in the length unit of the spatial reference system (SRS) of the geometry arguments, or in the length unit of the <code>unit</code> argument if that argument is given.\nThis function implements the discrete Fr\u00e9chet distance, which means it is restricted to distances between the points of the geometries. For example, given two <code>LineString</code> arguments, only the points explicitly mentioned in the geometries are considered. Points on the line segments between these points are not considered.\n<link><code>ST_FrechetDistance()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/spatial-relation-functions-object-shapes.html#function_st-frechetdistance</link> handles its geometry arguments as described in the introduction to this section, with these exceptions:\nThe geometries may have a Cartesian or geographic SRS, but only <code>LineString</code> values are supported. If the arguments are in the same Cartesian or geographic SRS, but either is not a <code>LineString</code> , an <link><code>ER_NOT_IMPLEMENTED_FOR_CARTESIAN_SRS</code>&LINK&https://dev.mysql.com/doc/mysql-errors/8.4/en/server-error-reference.html#error_er_not_implemented_for_cartesian_srs</link> or <link><code>ER_NOT_IMPLEMENTED_FOR_GEOGRAPHIC_SRS</code>&LINK&https://dev.mysql.com/doc/mysql-errors/8.4/en/server-error-reference.html#error_er_not_implemented_for_geographic_srs</link> error occurs, depending on the SRS type.\n<link><code>ST_FrechetDistance()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/spatial-relation-functions-object-shapes.html#function_st-frechetdistance</link> handles its optional <code>unit</code> argument as described in the introduction to this section.",
        "Demo": [
            "mysql> SET @ls1 = ST_GeomFromText('LINESTRING(0 0,0 5,5 5)');\nmysql> SET @ls2 = ST_GeomFromText('LINESTRING(0 1,0 6,3 3,5 6)');\nmysql> SELECT ST_FrechetDistance(@ls1, @ls2);\n+--------------------------------+\n| ST_FrechetDistance(@ls1, @ls2) |\n+--------------------------------+\n| 2.8284271247461903 |\n+--------------------------------+\nmysql> SET @ls1 = ST_GeomFromText('LINESTRING(0 0,0 5,5 5)', 4326);\nmysql> SET @ls2 = ST_GeomFromText('LINESTRING(0 1,0 6,3 3,5 6)', 4326);\nmysql> SELECT ST_FrechetDistance(@ls1, @ls2);\n+--------------------------------+\n| ST_FrechetDistance(@ls1, @ls2) |\n+--------------------------------+\n| 313421.1999416798 |\n+--------------------------------+\nmysql> SELECT ST_FrechetDistance(@ls1, @ls2, 'foot');\n+----------------------------------------+\n| ST_FrechetDistance(@ls1, @ls2, 'foot') |\n+----------------------------------------+\n| 1028284.7767115477 |\n+----------------------------------------+"
        ]
    },
    {
        "Name": "ST_GeoHash",
        "Tree": "(functionCall (fullId (uid (simpleId ST_GeoHash))) ( ))",
        "Description": [
            "Produce a geohash value"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/spatial-geohash-functions.html#function_st-geohash"
        ],
        "Detail": "<link><code>ST_GeoHash( longitude , latitude , max_length )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/spatial-geohash-functions.html#function_st-geohash</link> , <link><code>ST_GeoHash( point , max_length )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/spatial-geohash-functions.html#function_st-geohash</link>\nReturns a geohash string in the connection character set and collation.\nFor the first syntax, the <code>longitude</code> must be a number in the range [\u2212180, 180], and the <code>latitude</code> must be a number in the range [\u221290, 90]. For the second syntax, a <code>POINT</code> value is required, where the X and Y coordinates are in the valid ranges for longitude and latitude, respectively.\nThe resulting string is no longer than <code>max_length</code> characters, which has an upper limit of 100. The string might be shorter than <code>max_length</code> characters because the algorithm that creates the geohash value continues until it has created a string that is either an exact representation of the location or <code>max_length</code> characters, whichever comes first.\n<link><code>ST_GeoHash()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/spatial-geohash-functions.html#function_st-geohash</link> handles its arguments as described in the introduction to this section.",
        "Demo": [
            "mysql> SELECT ST_GeoHash(180,0,10), ST_GeoHash(-180,-90,15);\n+----------------------+-------------------------+\n| ST_GeoHash(180,0,10) | ST_GeoHash(-180,-90,15) |\n+----------------------+-------------------------+\n| xbpbpbpbpb | 000000000000000 |\n+----------------------+-------------------------+"
        ]
    },
    {
        "Name": "ST_GeomCollFromText",
        "Tree": "(functionCall (scalarFunctionName (functionNameBase ST_GeomCollFromText)) ( ))",
        "Description": [
            "Return geometry collection from WKT"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/gis-wkt-functions.html#function_st-geomcollfromtext"
        ],
        "Detail": "<link><code>ST_GeomCollFromText( wkt [, srid [, options ]])</code>&LINK&https://dev.mysql.com/doc/refman/8.4/gis-wkt-functions.html#function_st-geomcollfromtext</link> , <link><code>ST_GeometryCollectionFromText( wkt [, srid [, options ]])</code>&LINK&https://dev.mysql.com/doc/refman/8.4/gis-wkt-functions.html#function_st-geomcollfromtext</link> , <link><code>ST_GeomCollFromTxt( wkt [, srid [, options ]])</code>&LINK&https://dev.mysql.com/doc/refman/8.4/gis-wkt-functions.html#function_st-geomcollfromtext</link>\nConstructs a <code>GeometryCollection</code> value using its WKT representation and SRID.\nThese functions handle their arguments as described in the introduction to this section.",
        "Demo": [
            "mysql> SET @g = \"MULTILINESTRING((10 10, 11 11), (9 9, 10 10))\";\nmysql> SELECT ST_AsText(ST_GeomCollFromText(@g));\n+--------------------------------------------+\n| ST_AsText(ST_GeomCollFromText(@g)) |\n+--------------------------------------------+\n| MULTILINESTRING((10 10,11 11),(9 9,10 10)) |\n+--------------------------------------------+"
        ]
    },
    {
        "Name": "ST_GeometryCollectionFromText",
        "Tree": "(functionCall (scalarFunctionName (functionNameBase ST_GeometryCollectionFromText)) ( ))",
        "Description": [
            "Return geometry collection from WKT"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/gis-wkt-functions.html#function_st-geomcollfromtext"
        ],
        "Detail": "<link><code>ST_GeomCollFromText( wkt [, srid [, options ]])</code>&LINK&https://dev.mysql.com/doc/refman/8.4/gis-wkt-functions.html#function_st-geomcollfromtext</link> , <link><code>ST_GeometryCollectionFromText( wkt [, srid [, options ]])</code>&LINK&https://dev.mysql.com/doc/refman/8.4/gis-wkt-functions.html#function_st-geomcollfromtext</link> , <link><code>ST_GeomCollFromTxt( wkt [, srid [, options ]])</code>&LINK&https://dev.mysql.com/doc/refman/8.4/gis-wkt-functions.html#function_st-geomcollfromtext</link>\nConstructs a <code>GeometryCollection</code> value using its WKT representation and SRID.\nThese functions handle their arguments as described in the introduction to this section.",
        "Demo": []
    },
    {
        "Name": "ST_GeomCollFromTxt",
        "Tree": "(functionCall (scalarFunctionName (functionNameBase ST_GeomCollFromTxt)) ( ))",
        "Description": [
            "Return geometry collection from WKT"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/gis-wkt-functions.html#function_st-geomcollfromtext"
        ],
        "Detail": "<link><code>ST_GeomCollFromText( wkt [, srid [, options ]])</code>&LINK&https://dev.mysql.com/doc/refman/8.4/gis-wkt-functions.html#function_st-geomcollfromtext</link> , <link><code>ST_GeometryCollectionFromText( wkt [, srid [, options ]])</code>&LINK&https://dev.mysql.com/doc/refman/8.4/gis-wkt-functions.html#function_st-geomcollfromtext</link> , <link><code>ST_GeomCollFromTxt( wkt [, srid [, options ]])</code>&LINK&https://dev.mysql.com/doc/refman/8.4/gis-wkt-functions.html#function_st-geomcollfromtext</link>\nConstructs a <code>GeometryCollection</code> value using its WKT representation and SRID.\nThese functions handle their arguments as described in the introduction to this section.",
        "Demo": []
    },
    {
        "Name": "ST_GeomCollFromWKB",
        "Tree": "(functionCall (scalarFunctionName (functionNameBase ST_GeomCollFromWKB)) ( ))",
        "Description": [
            "Return geometry collection from WKB"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/gis-wkb-functions.html#function_st-geomcollfromwkb"
        ],
        "Detail": "<link><code>ST_GeomCollFromWKB( wkb [, srid [, options ]])</code>&LINK&https://dev.mysql.com/doc/refman/8.4/gis-wkb-functions.html#function_st-geomcollfromwkb</link> , <link><code>ST_GeometryCollectionFromWKB( wkb [, srid [, options ]])</code>&LINK&https://dev.mysql.com/doc/refman/8.4/gis-wkb-functions.html#function_st-geomcollfromwkb</link>\nConstructs a <code>GeometryCollection</code> value using its WKB representation and SRID.\nThese functions handle their arguments as described in the introduction to this section.",
        "Demo": []
    },
    {
        "Name": "ST_GeometryCollectionFromWKB",
        "Tree": "(functionCall (scalarFunctionName (functionNameBase ST_GeometryCollectionFromWKB)) ( ))",
        "Description": [
            "Return geometry collection from WKB"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/gis-wkb-functions.html#function_st-geomcollfromwkb"
        ],
        "Detail": "<link><code>ST_GeomCollFromWKB( wkb [, srid [, options ]])</code>&LINK&https://dev.mysql.com/doc/refman/8.4/gis-wkb-functions.html#function_st-geomcollfromwkb</link> , <link><code>ST_GeometryCollectionFromWKB( wkb [, srid [, options ]])</code>&LINK&https://dev.mysql.com/doc/refman/8.4/gis-wkb-functions.html#function_st-geomcollfromwkb</link>\nConstructs a <code>GeometryCollection</code> value using its WKB representation and SRID.\nThese functions handle their arguments as described in the introduction to this section.",
        "Demo": []
    },
    {
        "Name": "ST_GeometryN",
        "Tree": "(functionCall (scalarFunctionName (functionNameBase ST_GeometryN)) ( ))",
        "Description": [
            "Return N-th geometry from geometry collection"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/gis-geometrycollection-property-functions.html#function_st-geometryn"
        ],
        "Detail": "<link><code>ST_GeometryN( gc , N )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/gis-geometrycollection-property-functions.html#function_st-geometryn</link>\nReturns the <code>N</code> -th geometry in the <code>GeometryCollection</code> value <code>gc</code> . Geometries are numbered beginning with 1.\n<link><code>ST_GeometryN()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/gis-geometrycollection-property-functions.html#function_st-geometryn</link> handles its arguments as described in the introduction to this section.",
        "Demo": [
            "mysql> SET @gc = 'GeometryCollection(Point(1 1),LineString(2 2, 3 3))';\nmysql> SELECT ST_AsText(ST_GeometryN(ST_GeomFromText(@gc),1));\n+-------------------------------------------------+\n| ST_AsText(ST_GeometryN(ST_GeomFromText(@gc),1)) |\n+-------------------------------------------------+\n| POINT(1 1) |\n+-------------------------------------------------+"
        ]
    },
    {
        "Name": "ST_GeometryType",
        "Tree": "(functionCall (scalarFunctionName (functionNameBase ST_GeometryType)) ( ))",
        "Description": [
            "Return name of geometry type"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/gis-general-property-functions.html#function_st-geometrytype"
        ],
        "Detail": "<link><code>ST_GeometryType( g )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/gis-general-property-functions.html#function_st-geometrytype</link>\nReturns a binary string indicating the name of the geometry type of which the geometry instance <code>g</code> is a member. The name corresponds to one of the instantiable <code>Geometry</code> subclasses.\n<link><code>ST_GeometryType()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/gis-general-property-functions.html#function_st-geometrytype</link> handles its arguments as described in the introduction to this section.",
        "Demo": [
            "mysql> SELECT ST_GeometryType(ST_GeomFromText('POINT(1 1)'));\n+------------------------------------------------+\n| ST_GeometryType(ST_GeomFromText('POINT(1 1)')) |\n+------------------------------------------------+\n| POINT |\n+------------------------------------------------+"
        ]
    },
    {
        "Name": "ST_GeomFromGeoJSON",
        "Tree": "(functionCall (fullId (uid (simpleId ST_GeomFromGeoJSON))) ( ))",
        "Description": [
            "Generate geometry from GeoJSON object"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/spatial-geojson-functions.html#function_st-geomfromgeojson"
        ],
        "Detail": "<link><code>ST_GeomFromGeoJSON( str [, options [, srid ]])</code>&LINK&https://dev.mysql.com/doc/refman/8.4/spatial-geojson-functions.html#function_st-geomfromgeojson</link>\nParses a string <code>str</code> representing a GeoJSON object and returns a geometry.\nIf any argument is <code>NULL</code> , the return value is <code>NULL</code> . If any non- <code>NULL</code> argument is invalid, an error occurs.\n<code>options</code> , if given, describes how to handle GeoJSON documents that contain geometries with coordinate dimensions higher than 2. The following table shows the permitted <code>options</code> values.\n<table><thead><tr><th>Option Value</th>\n<th>Meaning</th></tr></thead>\n<tbody><tr><td>1</td>\n<td>Reject the document and produce an error. This is the default if\n<code>options</code>\nis not specified.</td></tr>\n<tr><td>2, 3, 4</td>\n<td>Accept the document and strip off the coordinates for higher coordinate\ndimensions.</td></tr></tbody></table>\n<code>options</code> values of 2, 3, and 4 currently produce the same effect. If geometries with coordinate dimensions higher than 2 are supported in the future, you can expect these values to produce different effects.\nThe <code>srid</code> argument, if given, must be a 32-bit unsigned integer. If not given, the geometry return value has an SRID of 4326.\nIf <code>srid</code> refers to an undefined spatial reference system (SRS), an <link><code>ER_SRS_NOT_FOUND</code>&LINK&https://dev.mysql.com/doc/mysql-errors/8.4/en/server-error-reference.html#error_er_srs_not_found</link> error occurs.\nFor geographic SRS geometry arguments, if any argument has a longitude or latitude that is out of range, an error occurs:\nIf a longitude value is not in the range (\u2212180, 180], an <link><code>ER_LONGITUDE_OUT_OF_RANGE</code>&LINK&https://dev.mysql.com/doc/mysql-errors/8.4/en/server-error-reference.html#error_er_longitude_out_of_range</link> error occurs.\nIf a latitude value is not in the range [\u221290, 90], an <link><code>ER_LATITUDE_OUT_OF_RANGE</code>&LINK&https://dev.mysql.com/doc/mysql-errors/8.4/en/server-error-reference.html#error_er_latitude_out_of_range</link> error occurs.\nRanges shown are in degrees. If an SRS uses another unit, the range uses the corresponding values in its unit. The exact range limits deviate slightly due to floating-point arithmetic.\nGeoJSON geometry, feature, and feature collection objects may have a <code>crs</code> property. The parsing function parses named CRS URNs in the <code>urn:ogc:def:crs:EPSG:: srid</code> and <code>EPSG: srid</code> namespaces, but not CRSs given as link objects. Also, <code>urn:ogc:def:crs:OGC:1.3:CRS84</code> is recognized as SRID 4326. If an object has a CRS that is not understood, an error occurs, with the exception that if the optional <code>srid</code> argument is given, any CRS is ignored even if it is invalid.\nIf a <code>crs</code> member that specifies an SRID different from the top-level object SRID is found at a lower level of the GeoJSON document, an <link><code>ER_INVALID_GEOJSON_CRS_NOT_TOP_LEVEL</code>&LINK&https://dev.mysql.com/doc/mysql-errors/8.4/en/server-error-reference.html#error_er_invalid_geojson_crs_not_top_level</link> error occurs.\nAs specified in the GeoJSON specification, parsing is case-sensitive for the <code>type</code> member of the GeoJSON input ( <code>Point</code> , <code>LineString</code> , and so forth). The specification is silent regarding case sensitivity for other parsing, which in MySQL is not case-sensitive.\nThis example shows the parsing result for a simple GeoJSON object. Observe that the order of coordinates depends on the SRID used.",
        "Demo": [
            "mysql> SET @json = '{ \"type\": \"Point\", \"coordinates\": [102.0, 0.0]}';\nmysql> SELECT ST_AsText(ST_GeomFromGeoJSON(@json));\n+--------------------------------------+\n| ST_AsText(ST_GeomFromGeoJSON(@json)) |\n+--------------------------------------+\n| POINT(0 102) |\n+--------------------------------------+\nmysql> SELECT ST_SRID(ST_GeomFromGeoJSON(@json));\n+------------------------------------+\n| ST_SRID(ST_GeomFromGeoJSON(@json)) |\n+------------------------------------+\n| 4326 |\n+------------------------------------+\nmysql> SELECT ST_AsText(ST_SRID(ST_GeomFromGeoJSON(@json),0));\n+-------------------------------------------------+\n| ST_AsText(ST_SRID(ST_GeomFromGeoJSON(@json),0)) |\n+-------------------------------------------------+\n| POINT(102 0) |\n+-------------------------------------------------+"
        ]
    },
    {
        "Name": "ST_GeomFromText",
        "Tree": "(functionCall (scalarFunctionName (functionNameBase ST_GeomFromText)) ( ))",
        "Description": [
            "Return geometry from WKT"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/gis-wkt-functions.html#function_st-geomfromtext"
        ],
        "Detail": "<link><code>ST_GeomFromText( wkt [, srid [, options ]])</code>&LINK&https://dev.mysql.com/doc/refman/8.4/gis-wkt-functions.html#function_st-geomfromtext</link> , <link><code>ST_GeometryFromText( wkt [, srid [, options ]])</code>&LINK&https://dev.mysql.com/doc/refman/8.4/gis-wkt-functions.html#function_st-geomfromtext</link>\nConstructs a geometry value of any type using its WKT representation and SRID.\nThese functions handle their arguments as described in the introduction to this section.",
        "Demo": []
    },
    {
        "Name": "ST_GeometryFromText",
        "Tree": "(functionCall (scalarFunctionName (functionNameBase ST_GeometryFromText)) ( ))",
        "Description": [
            "Return geometry from WKT"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/gis-wkt-functions.html#function_st-geomfromtext"
        ],
        "Detail": "<link><code>ST_GeomFromText( wkt [, srid [, options ]])</code>&LINK&https://dev.mysql.com/doc/refman/8.4/gis-wkt-functions.html#function_st-geomfromtext</link> , <link><code>ST_GeometryFromText( wkt [, srid [, options ]])</code>&LINK&https://dev.mysql.com/doc/refman/8.4/gis-wkt-functions.html#function_st-geomfromtext</link>\nConstructs a geometry value of any type using its WKT representation and SRID.\nThese functions handle their arguments as described in the introduction to this section.",
        "Demo": []
    },
    {
        "Name": "ST_GeomFromWKB",
        "Tree": "(functionCall (scalarFunctionName (functionNameBase ST_GeomFromWKB)) ( ))",
        "Description": [
            "Return geometry from WKB"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/gis-wkb-functions.html#function_st-geomfromwkb"
        ],
        "Detail": "<link><code>ST_GeomFromWKB( wkb [, srid [, options ]])</code>&LINK&https://dev.mysql.com/doc/refman/8.4/gis-wkb-functions.html#function_st-geomfromwkb</link> , <link><code>ST_GeometryFromWKB( wkb [, srid [, options ]])</code>&LINK&https://dev.mysql.com/doc/refman/8.4/gis-wkb-functions.html#function_st-geomfromwkb</link>\nConstructs a geometry value of any type using its WKB representation and SRID.\nThese functions handle their arguments as described in the introduction to this section.",
        "Demo": []
    },
    {
        "Name": "ST_GeometryFromWKB",
        "Tree": "(functionCall (scalarFunctionName (functionNameBase ST_GeometryFromWKB)) ( ))",
        "Description": [
            "Return geometry from WKB"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/gis-wkb-functions.html#function_st-geomfromwkb"
        ],
        "Detail": "<link><code>ST_GeomFromWKB( wkb [, srid [, options ]])</code>&LINK&https://dev.mysql.com/doc/refman/8.4/gis-wkb-functions.html#function_st-geomfromwkb</link> , <link><code>ST_GeometryFromWKB( wkb [, srid [, options ]])</code>&LINK&https://dev.mysql.com/doc/refman/8.4/gis-wkb-functions.html#function_st-geomfromwkb</link>\nConstructs a geometry value of any type using its WKB representation and SRID.\nThese functions handle their arguments as described in the introduction to this section.",
        "Demo": []
    },
    {
        "Name": "ST_HausdorffDistance",
        "Tree": "(functionCall (fullId (uid (simpleId ST_HausdorffDistance))) ( ))",
        "Description": [
            "The discrete Hausdorff distance of one geometry from another"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/spatial-relation-functions-object-shapes.html#function_st-hausdorffdistance"
        ],
        "Detail": "<link><code>ST_HausdorffDistance( g1 , g2 [, unit ])</code>&LINK&https://dev.mysql.com/doc/refman/8.4/spatial-relation-functions-object-shapes.html#function_st-hausdorffdistance</link>\nReturns the discrete Hausdorff distance between two geometries, reflecting how similar the geometries are. The result is a double-precision number measured in the length unit of the spatial reference system (SRS) of the geometry arguments, or in the length unit of the <code>unit</code> argument if that argument is given.\nThis function implements the discrete Hausdorff distance, which means it is restricted to distances between the points of the geometries. For example, given two <code>LineString</code> arguments, only the points explicitly mentioned in the geometries are considered. Points on the line segments between these points are not considered.\n<link><code>ST_HausdorffDistance()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/spatial-relation-functions-object-shapes.html#function_st-hausdorffdistance</link> handles its geometry arguments as described in the introduction to this section, with these exceptions:\nIf the geometry arguments are in the same Cartesian or geographic SRS, but are not in a supported combination, an <link><code>ER_NOT_IMPLEMENTED_FOR_CARTESIAN_SRS</code>&LINK&https://dev.mysql.com/doc/mysql-errors/8.4/en/server-error-reference.html#error_er_not_implemented_for_cartesian_srs</link> or <link><code>ER_NOT_IMPLEMENTED_FOR_GEOGRAPHIC_SRS</code>&LINK&https://dev.mysql.com/doc/mysql-errors/8.4/en/server-error-reference.html#error_er_not_implemented_for_geographic_srs</link> error occurs, depending on the SRS type. These combinations are supported:\n<code>LineString</code> and <code>LineString</code>\n<code>Point</code> and <code>MultiPoint</code>\n<code>LineString</code> and <code>MultiLineString</code>\n<code>MultiPoint</code> and <code>MultiPoint</code>\n<code>MultiLineString</code> and <code>MultiLineString</code>\n<link><code>ST_HausdorffDistance()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/spatial-relation-functions-object-shapes.html#function_st-hausdorffdistance</link> handles its optional <code>unit</code> argument as described in the introduction to this section.",
        "Demo": [
            "mysql> SET @ls1 = ST_GeomFromText('LINESTRING(0 0,0 5,5 5)');\nmysql> SET @ls2 = ST_GeomFromText('LINESTRING(0 1,0 6,3 3,5 6)');\nmysql> SELECT ST_HausdorffDistance(@ls1, @ls2);\n+----------------------------------+\n| ST_HausdorffDistance(@ls1, @ls2) |\n+----------------------------------+\n| 1 |\n+----------------------------------+\nmysql> SET @ls1 = ST_GeomFromText('LINESTRING(0 0,0 5,5 5)', 4326);\nmysql> SET @ls2 = ST_GeomFromText('LINESTRING(0 1,0 6,3 3,5 6)', 4326);\nmysql> SELECT ST_HausdorffDistance(@ls1, @ls2);\n+----------------------------------+\n| ST_HausdorffDistance(@ls1, @ls2) |\n+----------------------------------+\n| 111319.49079326246 |\n+----------------------------------+\nmysql> SELECT ST_HausdorffDistance(@ls1, @ls2, 'foot');\n+------------------------------------------+\n| ST_HausdorffDistance(@ls1, @ls2, 'foot') |\n+------------------------------------------+\n| 365221.4264870815 |\n+------------------------------------------+"
        ]
    },
    {
        "Name": "ST_InteriorRingN",
        "Tree": "(functionCall (scalarFunctionName (functionNameBase ST_InteriorRingN)) ( ))",
        "Description": [
            "Return N-th interior ring of Polygon"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/gis-polygon-property-functions.html#function_st-interiorringn"
        ],
        "Detail": "<link><code>ST_InteriorRingN( poly , N )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/gis-polygon-property-functions.html#function_st-interiorringn</link>\nReturns the <code>N</code> -th interior ring for the <code>Polygon</code> value <code>poly</code> as a <code>LineString</code> . Rings are numbered beginning with 1.\n<link><code>ST_InteriorRingN()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/gis-polygon-property-functions.html#function_st-interiorringn</link> handles its arguments as described in the introduction to this section.",
        "Demo": [
            "mysql> SET @poly =\n'Polygon((0 0,0 3,3 3,3 0,0 0),(1 1,1 2,2 2,2 1,1 1))';\nmysql> SELECT ST_AsText(ST_InteriorRingN(ST_GeomFromText(@poly),1));\n+-------------------------------------------------------+\n| ST_AsText(ST_InteriorRingN(ST_GeomFromText(@poly),1)) |\n+-------------------------------------------------------+\n| LINESTRING(1 1,1 2,2 2,2 1,1 1) |\n+-------------------------------------------------------+"
        ]
    },
    {
        "Name": "ST_Intersection",
        "Tree": "(functionCall (scalarFunctionName (functionNameBase ST_Intersection)) ( ))",
        "Description": [
            "Return point set intersection of two geometries"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/spatial-operator-functions.html#function_st-intersection"
        ],
        "Detail": "<link><code>ST_Intersection( g1 , g2 )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/spatial-operator-functions.html#function_st-intersection</link>\nReturns a geometry that represents the point set intersection of the geometry values <code>g1</code> and <code>g2</code> . The result is in the same SRS as the geometry arguments.\n<link><code>ST_Intersection()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/spatial-operator-functions.html#function_st-intersection</link> permits arguments in either a Cartesian or a geographic SRS, and handles its arguments as described in the introduction to this section.",
        "Demo": [
            "mysql> SET @g1 = ST_GeomFromText('LineString(1 1, 3 3)');\nmysql> SET @g2 = ST_GeomFromText('LineString(1 3, 3 1)');\nmysql> SELECT ST_AsText(ST_Intersection(@g1, @g2));\n+--------------------------------------+\n| ST_AsText(ST_Intersection(@g1, @g2)) |\n+--------------------------------------+\n| POINT(2 2) |\n+--------------------------------------+"
        ]
    },
    {
        "Name": "ST_Intersects",
        "Tree": "(functionCall (scalarFunctionName (functionNameBase ST_Intersects)) ( ))",
        "Description": [
            "Whether one geometry intersects another"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/spatial-relation-functions-object-shapes.html#function_st-intersects"
        ],
        "Detail": "<link><code>ST_Intersects( g1 , g2 )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/spatial-relation-functions-object-shapes.html#function_st-intersects</link>\nReturns 1 or 0 to indicate whether <code>g1</code> spatially intersects <code>g2</code> .\n<link><code>ST_Intersects()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/spatial-relation-functions-object-shapes.html#function_st-intersects</link> handles its arguments as described in the introduction to this section.",
        "Demo": []
    },
    {
        "Name": "ST_IsClosed",
        "Tree": "(functionCall (scalarFunctionName (functionNameBase ST_IsClosed)) ( ))",
        "Description": [
            "Whether a geometry is closed and simple"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/gis-linestring-property-functions.html#function_st-isclosed"
        ],
        "Detail": "<link><code>ST_IsClosed( ls )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/gis-linestring-property-functions.html#function_st-isclosed</link>\nFor a <code>LineString</code> value <code>ls</code> , <link><code>ST_IsClosed()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/gis-linestring-property-functions.html#function_st-isclosed</link> returns 1 if <code>ls</code> is closed (that is, its <link><code>ST_StartPoint()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/gis-linestring-property-functions.html#function_st-startpoint</link> and <link><code>ST_EndPoint()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/gis-linestring-property-functions.html#function_st-endpoint</link> values are the same).\nFor a <code>MultiLineString</code> value <code>ls</code> , <link><code>ST_IsClosed()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/gis-linestring-property-functions.html#function_st-isclosed</link> returns 1 if <code>ls</code> is closed (that is, the <link><code>ST_StartPoint()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/gis-linestring-property-functions.html#function_st-startpoint</link> and <link><code>ST_EndPoint()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/gis-linestring-property-functions.html#function_st-endpoint</link> values are the same for each <code>LineString</code> in <code>ls</code> ).\n<link><code>ST_IsClosed()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/gis-linestring-property-functions.html#function_st-isclosed</link> returns 0 if <code>ls</code> is not closed, and <code>NULL</code> if <code>ls</code> is <code>NULL</code> .\n<link><code>ST_IsClosed()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/gis-linestring-property-functions.html#function_st-isclosed</link> handles its arguments as described in the introduction to this section, with this exception:\nIf the geometry has an SRID value for a geographic spatial reference system (SRS), an <link><code>ER_NOT_IMPLEMENTED_FOR_GEOGRAPHIC_SRS</code>&LINK&https://dev.mysql.com/doc/mysql-errors/8.4/en/server-error-reference.html#error_er_not_implemented_for_geographic_srs</link> error occurs.",
        "Demo": [
            "mysql> SET @ls1 = 'LineString(1 1,2 2,3 3,2 2)';\nmysql> SET @ls2 = 'LineString(1 1,2 2,3 3,1 1)';\nmysql> SELECT ST_IsClosed(ST_GeomFromText(@ls1));\n+------------------------------------+\n| ST_IsClosed(ST_GeomFromText(@ls1)) |\n+------------------------------------+\n| 0 |\n+------------------------------------+\nmysql> SELECT ST_IsClosed(ST_GeomFromText(@ls2));\n+------------------------------------+\n| ST_IsClosed(ST_GeomFromText(@ls2)) |\n+------------------------------------+\n| 1 |\n+------------------------------------+\nmysql> SET @ls3 = 'MultiLineString((1 1,2 2,3 3),(4 4,5 5))';\nmysql> SELECT ST_IsClosed(ST_GeomFromText(@ls3));\n+------------------------------------+\n| ST_IsClosed(ST_GeomFromText(@ls3)) |\n+------------------------------------+\n| 0 |\n+------------------------------------+"
        ]
    },
    {
        "Name": "ST_IsEmpty",
        "Tree": "(functionCall (scalarFunctionName (functionNameBase ST_IsEmpty)) ( ))",
        "Description": [
            "Whether a geometry is empty"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/gis-general-property-functions.html#function_st-isempty"
        ],
        "Detail": "<link><code>ST_IsEmpty( g )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/gis-general-property-functions.html#function_st-isempty</link>\nThis function is a placeholder that returns 1 for an empty geometry collection value or 0 otherwise.\nThe only valid empty geometry is represented in the form of an empty geometry collection value. MySQL does not support GIS <code>EMPTY</code> values such as <code>POINT EMPTY</code> .\n<link><code>ST_IsEmpty()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/gis-general-property-functions.html#function_st-isempty</link> handles its arguments as described in the introduction to this section.",
        "Demo": []
    },
    {
        "Name": "ST_IsSimple",
        "Tree": "(functionCall (scalarFunctionName (functionNameBase ST_IsSimple)) ( ))",
        "Description": [
            "Whether a geometry is simple"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/gis-general-property-functions.html#function_st-issimple"
        ],
        "Detail": "<link><code>ST_IsSimple( g )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/gis-general-property-functions.html#function_st-issimple</link>\nReturns 1 if the geometry value <code>g</code> is simple according to the ISO SQL/MM Part 3: Spatial standard. <link><code>ST_IsSimple()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/gis-general-property-functions.html#function_st-issimple</link> returns 0 if the argument is not simple.\nThe descriptions of the instantiable geometric classes given under <link>Section 13.4.2, \"The OpenGIS Geometry Model\"&LINK&https://dev.mysql.com/doc/refman/8.4/opengis-geometry-model.html</link> include the specific conditions that cause class instances to be classified as not simple.\n<link><code>ST_IsSimple()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/gis-general-property-functions.html#function_st-issimple</link> handles its arguments as described in the introduction to this section, with this exception:\nIf the geometry has a geographic SRS with a longitude or latitude that is out of range, an error occurs:\nIf a longitude value is not in the range (\u2212180, 180], an <link><code>ER_GEOMETRY_PARAM_LONGITUDE_OUT_OF_RANGE</code>&LINK&https://dev.mysql.com/doc/mysql-errors/8.4/en/server-error-reference.html#error_er_geometry_param_longitude_out_of_range</link> error occurs.\nIf a latitude value is not in the range [\u221290, 90], an <link><code>ER_GEOMETRY_PARAM_LATITUDE_OUT_OF_RANGE</code>&LINK&https://dev.mysql.com/doc/mysql-errors/8.4/en/server-error-reference.html#error_er_geometry_param_latitude_out_of_range</link> error occurs.\nRanges shown are in degrees. The exact range limits deviate slightly due to floating-point arithmetic.",
        "Demo": []
    },
    {
        "Name": "ST_IsValid",
        "Tree": "(functionCall (fullId (uid (simpleId ST_IsValid))) ( ))",
        "Description": [
            "Whether a geometry is valid"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/spatial-convenience-functions.html#function_st-isvalid"
        ],
        "Detail": "<link><code>ST_IsValid( g )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/spatial-convenience-functions.html#function_st-isvalid</link>\nReturns 1 if the argument is geometrically valid, 0 if the argument is not geometrically valid. Geometry validity is defined by the OGC specification.\nThe only valid empty geometry is represented in the form of an empty geometry collection value. <link><code>ST_IsValid()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/spatial-convenience-functions.html#function_st-isvalid</link> returns 1 in this case. MySQL does not support GIS <code>EMPTY</code> values such as <code>POINT EMPTY</code> .\n<link><code>ST_IsValid()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/spatial-convenience-functions.html#function_st-isvalid</link> handles its arguments as described in the introduction to this section, with this exception:\nIf the geometry has a geographic SRS with a longitude or latitude that is out of range, an error occurs:\nIf a longitude value is not in the range (\u2212180, 180], an <link><code>ER_GEOMETRY_PARAM_LONGITUDE_OUT_OF_RANGE</code>&LINK&https://dev.mysql.com/doc/mysql-errors/8.4/en/server-error-reference.html#error_er_geometry_param_longitude_out_of_range</link> error occurs.\nIf a latitude value is not in the range [\u221290, 90], an <link><code>ER_GEOMETRY_PARAM_LATITUDE_OUT_OF_RANGE</code>&LINK&https://dev.mysql.com/doc/mysql-errors/8.4/en/server-error-reference.html#error_er_geometry_param_latitude_out_of_range</link> error occurs.\nRanges shown are in degrees. If an SRS uses another unit, the range uses the corresponding values in its unit. The exact range limits deviate slightly due to floating-point arithmetic.",
        "Demo": [
            "mysql> SET @ls1 = ST_GeomFromText('LINESTRING(0 0,-0.00 0,0.0 0)');\nmysql> SET @ls2 = ST_GeomFromText('LINESTRING(0 0, 1 1)');\nmysql> SELECT ST_IsValid(@ls1);\n+------------------+\n| ST_IsValid(@ls1) |\n+------------------+\n| 0 |\n+------------------+\nmysql> SELECT ST_IsValid(@ls2);\n+------------------+\n| ST_IsValid(@ls2) |\n+------------------+\n| 1 |\n+------------------+"
        ]
    },
    {
        "Name": "ST_LatFromGeoHash",
        "Tree": "(functionCall (fullId (uid (simpleId ST_LatFromGeoHash))) ( ))",
        "Description": [
            "Return latitude from geohash value"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/spatial-geohash-functions.html#function_st-latfromgeohash"
        ],
        "Detail": "<link><code>ST_LatFromGeoHash( geohash_str )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/spatial-geohash-functions.html#function_st-latfromgeohash</link>\nReturns the latitude from a geohash string value, as a double-precision number in the range [\u221290, 90].\nThe <link><code>ST_LatFromGeoHash()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/spatial-geohash-functions.html#function_st-latfromgeohash</link> decoding function reads no more than 433 characters from the <code>geohash_str</code> argument. That represents the upper limit on information in the internal representation of coordinate values. Characters past the 433rd are ignored, even if they are otherwise illegal and produce an error.\n<link><code>ST_LatFromGeoHash()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/spatial-geohash-functions.html#function_st-latfromgeohash</link> handles its arguments as described in the introduction to this section.",
        "Demo": [
            "mysql> SELECT ST_LatFromGeoHash(ST_GeoHash(45,-20,10));\n+------------------------------------------+\n| ST_LatFromGeoHash(ST_GeoHash(45,-20,10)) |\n+------------------------------------------+\n| -20 |\n+------------------------------------------+"
        ]
    },
    {
        "Name": "ST_Latitude",
        "Tree": "(functionCall (fullId (uid (simpleId ST_Latitude))) ( ))",
        "Description": [
            "Return latitude of Point"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/gis-point-property-functions.html#function_st-latitude"
        ],
        "Detail": "<link><code>ST_Latitude( p [, new_latitude_val ])</code>&LINK&https://dev.mysql.com/doc/refman/8.4/gis-point-property-functions.html#function_st-latitude</link>\nWith a single argument representing a valid <code>Point</code> object <code>p</code> that has a geographic spatial reference system (SRS), <link><code>ST_Latitude()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/gis-point-property-functions.html#function_st-latitude</link> returns the latitude value of <code>p</code> as a double-precision number.\nWith the optional second argument representing a valid latitude value, <link><code>ST_Latitude()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/gis-point-property-functions.html#function_st-latitude</link> returns a <code>Point</code> object like the first argument with its latitude equal to the second argument.\n<link><code>ST_Latitude()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/gis-point-property-functions.html#function_st-latitude</link> handles its arguments as described in the introduction to this section, with the addition that if the <code>Point</code> object is valid but does not have a geographic SRS, an <link><code>ER_SRS_NOT_GEOGRAPHIC</code>&LINK&https://dev.mysql.com/doc/mysql-errors/8.4/en/server-error-reference.html#error_er_srs_not_geographic</link> error occurs.",
        "Demo": [
            "mysql> SET @pt = ST_GeomFromText('POINT(45 90)', 4326);\nmysql> SELECT ST_Latitude(@pt);\n+------------------+\n| ST_Latitude(@pt) |\n+------------------+\n| 45 |\n+------------------+\nmysql> SELECT ST_AsText(ST_Latitude(@pt, 10));\n+---------------------------------+\n| ST_AsText(ST_Latitude(@pt, 10)) |\n+---------------------------------+\n| POINT(10 90) |\n+---------------------------------+"
        ]
    },
    {
        "Name": "ST_Length",
        "Tree": "(functionCall (fullId (uid (simpleId ST_Length))) ( ))",
        "Description": [
            "Return length of LineString"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/gis-linestring-property-functions.html#function_st-length"
        ],
        "Detail": "<link><code>ST_Length( ls [, unit ])</code>&LINK&https://dev.mysql.com/doc/refman/8.4/gis-linestring-property-functions.html#function_st-length</link>\nReturns a double-precision number indicating the length of the <code>LineString</code> or <code>MultiLineString</code> value <code>ls</code> in its associated spatial reference system. The length of a <code>MultiLineString</code> value is equal to the sum of the lengths of its elements.\n<link><code>ST_Length()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/gis-linestring-property-functions.html#function_st-length</link> computes a result as follows:\nIf the geometry is a valid <code>LineString</code> in a Cartesian SRS, the return value is the Cartesian length of the geometry.\nIf the geometry is a valid <code>MultiLineString</code> in a Cartesian SRS, the return value is the sum of the Cartesian lengths of its elements.\nIf the geometry is a valid <code>LineString</code> in a geographic SRS, the return value is the geodetic length of the geometry in that SRS, in meters.\nIf the geometry is a valid <code>MultiLineString</code> in a geographic SRS, the return value is the sum of the geodetic lengths of its elements in that SRS, in meters.\n<link><code>ST_Length()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/gis-linestring-property-functions.html#function_st-length</link> handles its arguments as described in the introduction to this section, with these exceptions:\nIf the geometry is not a <code>LineString</code> or <code>MultiLineString</code> , the return value is <code>NULL</code> .\nIf the geometry is geometrically invalid, either the result is an undefined length (that is, it can be any number), or an error occurs.\nIf the length computation result is <code>+inf</code> , an <link><code>ER_DATA_OUT_OF_RANGE</code>&LINK&https://dev.mysql.com/doc/mysql-errors/8.4/en/server-error-reference.html#error_er_data_out_of_range</link> error occurs.\nIf the geometry has a geographic SRS with a longitude or latitude that is out of range, an error occurs:\nIf a longitude value is not in the range (\u2212180, 180], an <link><code>ER_GEOMETRY_PARAM_LONGITUDE_OUT_OF_RANGE</code>&LINK&https://dev.mysql.com/doc/mysql-errors/8.4/en/server-error-reference.html#error_er_geometry_param_longitude_out_of_range</link> error occurs.\nIf a latitude value is not in the range [\u221290, 90], an <link><code>ER_GEOMETRY_PARAM_LATITUDE_OUT_OF_RANGE</code>&LINK&https://dev.mysql.com/doc/mysql-errors/8.4/en/server-error-reference.html#error_er_geometry_param_latitude_out_of_range</link> error occurs.\nRanges shown are in degrees. The exact range limits deviate slightly due to floating-point arithmetic.\n<link><code>ST_Length()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/gis-linestring-property-functions.html#function_st-length</link> permits an optional <code>unit</code> argument that specifies the linear unit for the returned length value. These rules apply:\nIf a unit is specified but not supported by MySQL, an <link><code>ER_UNIT_NOT_FOUND</code>&LINK&https://dev.mysql.com/doc/mysql-errors/8.4/en/server-error-reference.html#error_er_unit_not_found</link> error occurs.\nIf a supported linear unit is specified and the SRID is 0, an <link><code>ER_GEOMETRY_IN_UNKNOWN_LENGTH_UNIT</code>&LINK&https://dev.mysql.com/doc/mysql-errors/8.4/en/server-error-reference.html#error_er_geometry_in_unknown_length_unit</link> error occurs.\nIf a supported linear unit is specified and the SRID is not 0, the result is in that unit.\nIf a unit is not specified, the result is in the unit of the SRS of the geometries, whether Cartesian or geographic. Currently, all MySQL SRSs are expressed in meters.\nA unit is supported if it is found in the <code>INFORMATION_SCHEMA</code> <link><code>ST_UNITS_OF_MEASURE</code>&LINK&https://dev.mysql.com/doc/refman/8.4/information-schema-st-units-of-measure-table.html</link> table. See <link>Section 28.3.37, \"The INFORMATION_SCHEMA ST_UNITS_OF_MEASURE Table\"&LINK&https://dev.mysql.com/doc/refman/8.4/information-schema-st-units-of-measure-table.html</link> .",
        "Demo": [
            "mysql> SET @ls = ST_GeomFromText('LineString(1 1,2 2,3 3)');\nmysql> SELECT ST_Length(@ls);\n+--------------------+\n| ST_Length(@ls) |\n+--------------------+\n| 2.8284271247461903 |\n+--------------------+\nmysql> SET @mls = ST_GeomFromText('MultiLineString((1 1,2 2,3 3),(4 4,5 5))');\nmysql> SELECT ST_Length(@mls);\n+-------------------+\n| ST_Length(@mls) |\n+-------------------+\n| 4.242640687119286 |\n+-------------------+\nmysql> SET @ls = ST_GeomFromText('LineString(1 1,2 2,3 3)', 4326);\nmysql> SELECT ST_Length(@ls);\n+-------------------+\n| ST_Length(@ls) |\n+-------------------+\n| 313701.9623204328 |\n+-------------------+\nmysql> SELECT ST_Length(@ls, 'metre');\n+-------------------------+\n| ST_Length(@ls, 'metre') |\n+-------------------------+\n| 313701.9623204328 |\n+-------------------------+\nmysql> SELECT ST_Length(@ls, 'foot');\n+------------------------+\n| ST_Length(@ls, 'foot') |\n+------------------------+\n| 1029205.9131247795 |\n+------------------------+"
        ]
    },
    {
        "Name": "ST_LineFromText",
        "Tree": "(functionCall (scalarFunctionName (functionNameBase ST_LineFromText)) ( ))",
        "Description": [
            "Construct LineString from WKT"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/gis-wkt-functions.html#function_st-linefromtext"
        ],
        "Detail": "<link><code>ST_LineFromText( wkt [, srid [, options ]])</code>&LINK&https://dev.mysql.com/doc/refman/8.4/gis-wkt-functions.html#function_st-linefromtext</link> , <link><code>ST_LineStringFromText( wkt [, srid [, options ]])</code>&LINK&https://dev.mysql.com/doc/refman/8.4/gis-wkt-functions.html#function_st-linefromtext</link>\nConstructs a <code>LineString</code> value using its WKT representation and SRID.\nThese functions handle their arguments as described in the introduction to this section.",
        "Demo": []
    },
    {
        "Name": "ST_LineStringFromText",
        "Tree": "(functionCall (scalarFunctionName (functionNameBase ST_LineStringFromText)) ( ))",
        "Description": [
            "Construct LineString from WKT"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/gis-wkt-functions.html#function_st-linefromtext"
        ],
        "Detail": "<link><code>ST_LineFromText( wkt [, srid [, options ]])</code>&LINK&https://dev.mysql.com/doc/refman/8.4/gis-wkt-functions.html#function_st-linefromtext</link> , <link><code>ST_LineStringFromText( wkt [, srid [, options ]])</code>&LINK&https://dev.mysql.com/doc/refman/8.4/gis-wkt-functions.html#function_st-linefromtext</link>\nConstructs a <code>LineString</code> value using its WKT representation and SRID.\nThese functions handle their arguments as described in the introduction to this section.",
        "Demo": []
    },
    {
        "Name": "ST_LineFromWKB",
        "Tree": "(functionCall (scalarFunctionName (functionNameBase ST_LineFromWKB)) ( ))",
        "Description": [
            "Construct LineString from WKB"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/gis-wkb-functions.html#function_st-linefromwkb"
        ],
        "Detail": "<link><code>ST_LineFromWKB( wkb [, srid [, options ]])</code>&LINK&https://dev.mysql.com/doc/refman/8.4/gis-wkb-functions.html#function_st-linefromwkb</link> , <link><code>ST_LineStringFromWKB( wkb [, srid [, options ]])</code>&LINK&https://dev.mysql.com/doc/refman/8.4/gis-wkb-functions.html#function_st-linefromwkb</link>\nConstructs a <code>LineString</code> value using its WKB representation and SRID.\nThese functions handle their arguments as described in the introduction to this section.",
        "Demo": []
    },
    {
        "Name": "ST_LineStringFromWKB",
        "Tree": "(functionCall (scalarFunctionName (functionNameBase ST_LineStringFromWKB)) ( ))",
        "Description": [
            "Construct LineString from WKB"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/gis-wkb-functions.html#function_st-linefromwkb"
        ],
        "Detail": "<link><code>ST_LineFromWKB( wkb [, srid [, options ]])</code>&LINK&https://dev.mysql.com/doc/refman/8.4/gis-wkb-functions.html#function_st-linefromwkb</link> , <link><code>ST_LineStringFromWKB( wkb [, srid [, options ]])</code>&LINK&https://dev.mysql.com/doc/refman/8.4/gis-wkb-functions.html#function_st-linefromwkb</link>\nConstructs a <code>LineString</code> value using its WKB representation and SRID.\nThese functions handle their arguments as described in the introduction to this section.",
        "Demo": []
    },
    {
        "Name": "ST_LineInterpolatePoint",
        "Tree": "(functionCall (fullId (uid (simpleId ST_LineInterpolatePoint))) ( ))",
        "Description": [
            "The point a given percentage along a LineString"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/spatial-operator-functions.html#function_st-lineinterpolatepoint"
        ],
        "Detail": "<link><code>ST_LineInterpolatePoint( ls , fractional_distance )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/spatial-operator-functions.html#function_st-lineinterpolatepoint</link>\nThis function takes a <code>LineString</code> geometry and a fractional distance in the range [0.0, 1.0] and returns the <code>Point</code> along the <code>LineString</code> at the given fraction of the distance from its start point to its endpoint. It can be used to answer questions such as which <code>Point</code> lies halfway along the road described by the geometry argument.\nThe function is implemented for <code>LineString</code> geometries in all spatial reference systems, both Cartesian and geographic.\nIf the <code>fractional_distance</code> argument is 1.0, the result may not be exactly the last point of the <code>LineString</code> argument but a point close to it due to numerical inaccuracies in approximate-value computations.\nA related function, <link><code>ST_LineInterpolatePoints()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/spatial-operator-functions.html#function_st-lineinterpolatepoints</link> , takes similar arguments but returns a <code>MultiPoint</code> consisting of <code>Point</code> values along the <code>LineString</code> at each fraction of the distance from its start point to its endpoint. For examples of both functions, see the <link><code>ST_LineInterpolatePoints()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/spatial-operator-functions.html#function_st-lineinterpolatepoints</link> description.\n<link><code>ST_LineInterpolatePoint()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/spatial-operator-functions.html#function_st-lineinterpolatepoint</link> handles its arguments as described in the introduction to this section, with these exceptions:\nIf the geometry argument is not a <code>LineString</code> , an <link><code>ER_UNEXPECTED_GEOMETRY_TYPE</code>&LINK&https://dev.mysql.com/doc/mysql-errors/8.4/en/server-error-reference.html#error_er_unexpected_geometry_type</link> error occurs.\nIf the fractional distance argument is outside the range [0.0, 1.0], an <link><code>ER_DATA_OUT_OF_RANGE</code>&LINK&https://dev.mysql.com/doc/mysql-errors/8.4/en/server-error-reference.html#error_er_data_out_of_range</link> error occurs.\n<link><code>ST_LineInterpolatePoint()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/spatial-operator-functions.html#function_st-lineinterpolatepoint</link> is a MySQL extension to OpenGIS.",
        "Demo": []
    },
    {
        "Name": "ST_LineInterpolatePoints",
        "Tree": "(functionCall (fullId (uid (simpleId ST_LineInterpolatePoints))) ( ))",
        "Description": [
            "The points a given percentage along a LineString"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/spatial-operator-functions.html#function_st-lineinterpolatepoints"
        ],
        "Detail": "<link><code>ST_LineInterpolatePoints( ls , fractional_distance )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/spatial-operator-functions.html#function_st-lineinterpolatepoints</link>\nThis function takes a <code>LineString</code> geometry and a fractional distance in the range (0.0, 1.0] and returns the <code>MultiPoint</code> consisting of the <code>LineString</code> start point, plus <code>Point</code> values along the <code>LineString</code> at each fraction of the distance from its start point to its endpoint. It can be used to answer questions such as which <code>Point</code> values lie every 10% of the way along the road described by the geometry argument.\nThe function is implemented for <code>LineString</code> geometries in all spatial reference systems, both Cartesian and geographic.\nIf the <code>fractional_distance</code> argument divides 1.0 with zero remainder the result may not contain the last point of the <code>LineString</code> argument but a point close to it due to numerical inaccuracies in approximate-value computations.\nA related function, <link><code>ST_LineInterpolatePoint()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/spatial-operator-functions.html#function_st-lineinterpolatepoint</link> , takes similar arguments but returns the <code>Point</code> along the <code>LineString</code> at the given fraction of the distance from its start point to its endpoint.\n<link><code>ST_LineInterpolatePoints()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/spatial-operator-functions.html#function_st-lineinterpolatepoints</link> handles its arguments as described in the introduction to this section, with these exceptions:\nIf the geometry argument is not a <code>LineString</code> , an <link><code>ER_UNEXPECTED_GEOMETRY_TYPE</code>&LINK&https://dev.mysql.com/doc/mysql-errors/8.4/en/server-error-reference.html#error_er_unexpected_geometry_type</link> error occurs.\nIf the fractional distance argument is outside the range [0.0, 1.0], an <link><code>ER_DATA_OUT_OF_RANGE</code>&LINK&https://dev.mysql.com/doc/mysql-errors/8.4/en/server-error-reference.html#error_er_data_out_of_range</link> error occurs.\n<link><code>ST_LineInterpolatePoints()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/spatial-operator-functions.html#function_st-lineinterpolatepoints</link> is a MySQL extension to OpenGIS.",
        "Demo": [
            "mysql> SET @ls1 = ST_GeomFromText('LINESTRING(0 0,0 5,5 5)');\nmysql> SELECT ST_AsText(ST_LineInterpolatePoint(@ls1, .5));\n+----------------------------------------------+\n| ST_AsText(ST_LineInterpolatePoint(@ls1, .5)) |\n+----------------------------------------------+\n| POINT(0 5) |\n+----------------------------------------------+\nmysql> SELECT ST_AsText(ST_LineInterpolatePoint(@ls1, .75));\n+-----------------------------------------------+\n| ST_AsText(ST_LineInterpolatePoint(@ls1, .75)) |\n+-----------------------------------------------+\n| POINT(2.5 5) |\n+-----------------------------------------------+\nmysql> SELECT ST_AsText(ST_LineInterpolatePoint(@ls1, 1));\n+---------------------------------------------+\n| ST_AsText(ST_LineInterpolatePoint(@ls1, 1)) |\n+---------------------------------------------+\n| POINT(5 5) |\n+---------------------------------------------+\nmysql> SELECT ST_AsText(ST_LineInterpolatePoints(@ls1, .25));\n+------------------------------------------------+\n| ST_AsText(ST_LineInterpolatePoints(@ls1, .25)) |\n+------------------------------------------------+\n| MULTIPOINT((0 2.5),(0 5),(2.5 5),(5 5)) |\n+------------------------------------------------+"
        ]
    },
    {
        "Name": "ST_LongFromGeoHash",
        "Tree": "(functionCall (fullId (uid (simpleId ST_LongFromGeoHash))) ( ))",
        "Description": [
            "Return longitude from geohash value"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/spatial-geohash-functions.html#function_st-longfromgeohash"
        ],
        "Detail": "<link><code>ST_LongFromGeoHash( geohash_str )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/spatial-geohash-functions.html#function_st-longfromgeohash</link>\nReturns the longitude from a geohash string value, as a double-precision number in the range [\u2212180, 180].\nThe remarks in the description of <link><code>ST_LatFromGeoHash()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/spatial-geohash-functions.html#function_st-latfromgeohash</link> regarding the maximum number of characters processed from the <code>geohash_str</code> argument also apply to <link><code>ST_LongFromGeoHash()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/spatial-geohash-functions.html#function_st-longfromgeohash</link> .\n<link><code>ST_LongFromGeoHash()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/spatial-geohash-functions.html#function_st-longfromgeohash</link> handles its arguments as described in the introduction to this section.",
        "Demo": [
            "mysql> SELECT ST_LongFromGeoHash(ST_GeoHash(45,-20,10));\n+-------------------------------------------+\n| ST_LongFromGeoHash(ST_GeoHash(45,-20,10)) |\n+-------------------------------------------+\n| 45 |\n+-------------------------------------------+"
        ]
    },
    {
        "Name": "ST_Longitude",
        "Tree": "(functionCall (fullId (uid (simpleId ST_Longitude))) ( ))",
        "Description": [
            "Return longitude of Point"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/gis-point-property-functions.html#function_st-longitude"
        ],
        "Detail": "<link><code>ST_Longitude( p [, new_longitude_val ])</code>&LINK&https://dev.mysql.com/doc/refman/8.4/gis-point-property-functions.html#function_st-longitude</link>\nWith a single argument representing a valid <code>Point</code> object <code>p</code> that has a geographic spatial reference system (SRS), <link><code>ST_Longitude()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/gis-point-property-functions.html#function_st-longitude</link> returns the longitude value of <code>p</code> as a double-precision number.\nWith the optional second argument representing a valid longitude value, <link><code>ST_Longitude()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/gis-point-property-functions.html#function_st-longitude</link> returns a <code>Point</code> object like the first argument with its longitude equal to the second argument.\n<link><code>ST_Longitude()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/gis-point-property-functions.html#function_st-longitude</link> handles its arguments as described in the introduction to this section, with the addition that if the <code>Point</code> object is valid but does not have a geographic SRS, an <link><code>ER_SRS_NOT_GEOGRAPHIC</code>&LINK&https://dev.mysql.com/doc/mysql-errors/8.4/en/server-error-reference.html#error_er_srs_not_geographic</link> error occurs.",
        "Demo": [
            "mysql> SET @pt = ST_GeomFromText('POINT(45 90)', 4326);\nmysql> SELECT ST_Longitude(@pt);\n+-------------------+\n| ST_Longitude(@pt) |\n+-------------------+\n| 90 |\n+-------------------+\nmysql> SELECT ST_AsText(ST_Longitude(@pt, 10));\n+----------------------------------+\n| ST_AsText(ST_Longitude(@pt, 10)) |\n+----------------------------------+\n| POINT(45 10) |\n+----------------------------------+"
        ]
    },
    {
        "Name": "ST_MakeEnvelope",
        "Tree": "(functionCall (fullId (uid (simpleId ST_MakeEnvelope))) ( ))",
        "Description": [
            "Rectangle around two points"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/spatial-convenience-functions.html#function_st-makeenvelope"
        ],
        "Detail": "<link><code>ST_MakeEnvelope( pt1 , pt2 )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/spatial-convenience-functions.html#function_st-makeenvelope</link>\nReturns the rectangle that forms the envelope around two points, as a <code>Point</code> , <code>LineString</code> , or <code>Polygon</code> .\nCalculations are done using the Cartesian coordinate system rather than on a sphere, spheroid, or on earth.\nGiven two points <code>pt1</code> and <code>pt2</code> , <link><code>ST_MakeEnvelope()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/spatial-convenience-functions.html#function_st-makeenvelope</link> creates the result geometry on an abstract plane like this:\nIf <code>pt1</code> and <code>pt2</code> are equal, the result is the point <code>pt1</code> .\nOtherwise, if <code>( pt1 , pt2 )</code> is a vertical or horizontal line segment, the result is the line segment <code>( pt1 , pt2 )</code> .\nOtherwise, the result is a polygon using <code>pt1</code> and <code>pt2</code> as diagonal points.\nThe result geometry has an SRID of 0.\n<link><code>ST_MakeEnvelope()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/spatial-convenience-functions.html#function_st-makeenvelope</link> handles its arguments as described in the introduction to this section, with these exceptions:\nIf the arguments are not <code>Point</code> values, an <link><code>ER_WRONG_ARGUMENTS</code>&LINK&https://dev.mysql.com/doc/mysql-errors/8.4/en/server-error-reference.html#error_er_wrong_arguments</link> error occurs.\nAn <link><code>ER_GIS_INVALID_DATA</code>&LINK&https://dev.mysql.com/doc/mysql-errors/8.4/en/server-error-reference.html#error_er_gis_invalid_data</link> error occurs for the additional condition that any coordinate value of the two points is infinite or <code>NaN</code> .\nIf any geometry has an SRID value for a geographic spatial reference system (SRS), an <link><code>ER_NOT_IMPLEMENTED_FOR_GEOGRAPHIC_SRS</code>&LINK&https://dev.mysql.com/doc/mysql-errors/8.4/en/server-error-reference.html#error_er_not_implemented_for_geographic_srs</link> error occurs.",
        "Demo": [
            "mysql> SET @pt1 = ST_GeomFromText('POINT(0 0)');\nmysql> SET @pt2 = ST_GeomFromText('POINT(1 1)');\nmysql> SELECT ST_AsText(ST_MakeEnvelope(@pt1, @pt2));\n+----------------------------------------+\n| ST_AsText(ST_MakeEnvelope(@pt1, @pt2)) |\n+----------------------------------------+\n| POLYGON((0 0,1 0,1 1,0 1,0 0)) |\n+----------------------------------------+"
        ]
    },
    {
        "Name": "ST_MLineFromText",
        "Tree": "(functionCall (fullId (uid (simpleId ST_MLineFromText))) ( ))",
        "Description": [
            "Construct MultiLineString from WKT"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/gis-wkt-functions.html#function_st-mlinefromtext"
        ],
        "Detail": "<link><code>ST_MLineFromText( wkt [, srid [, options ]])</code>&LINK&https://dev.mysql.com/doc/refman/8.4/gis-wkt-functions.html#function_st-mlinefromtext</link> , <link><code>ST_MultiLineStringFromText( wkt [, srid [, options ]])</code>&LINK&https://dev.mysql.com/doc/refman/8.4/gis-wkt-functions.html#function_st-mlinefromtext</link>\nConstructs a <code>MultiLineString</code> value using its WKT representation and SRID.\nThese functions handle their arguments as described in the introduction to this section.",
        "Demo": []
    },
    {
        "Name": "ST_MultiLineStringFromText",
        "Tree": "(functionCall (fullId (uid (simpleId ST_MultiLineStringFromText))) ( ))",
        "Description": [
            "Construct MultiLineString from WKT"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/gis-wkt-functions.html#function_st-mlinefromtext"
        ],
        "Detail": "<link><code>ST_MLineFromText( wkt [, srid [, options ]])</code>&LINK&https://dev.mysql.com/doc/refman/8.4/gis-wkt-functions.html#function_st-mlinefromtext</link> , <link><code>ST_MultiLineStringFromText( wkt [, srid [, options ]])</code>&LINK&https://dev.mysql.com/doc/refman/8.4/gis-wkt-functions.html#function_st-mlinefromtext</link>\nConstructs a <code>MultiLineString</code> value using its WKT representation and SRID.\nThese functions handle their arguments as described in the introduction to this section.",
        "Demo": []
    },
    {
        "Name": "ST_MLineFromWKB",
        "Tree": "(functionCall (fullId (uid (simpleId ST_MLineFromWKB))) ( ))",
        "Description": [
            "Construct MultiLineString from WKB"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/gis-wkb-functions.html#function_st-mlinefromwkb"
        ],
        "Detail": "<link><code>ST_MLineFromWKB( wkb [, srid [, options ]])</code>&LINK&https://dev.mysql.com/doc/refman/8.4/gis-wkb-functions.html#function_st-mlinefromwkb</link> , <link><code>ST_MultiLineStringFromWKB( wkb [, srid [, options ]])</code>&LINK&https://dev.mysql.com/doc/refman/8.4/gis-wkb-functions.html#function_st-mlinefromwkb</link>\nConstructs a <code>MultiLineString</code> value using its WKB representation and SRID.\nThese functions handle their arguments as described in the introduction to this section.",
        "Demo": []
    },
    {
        "Name": "ST_MultiLineStringFromWKB",
        "Tree": "(functionCall (fullId (uid (simpleId ST_MultiLineStringFromWKB))) ( ))",
        "Description": [
            "Construct MultiLineString from WKB"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/gis-wkb-functions.html#function_st-mlinefromwkb"
        ],
        "Detail": "<link><code>ST_MLineFromWKB( wkb [, srid [, options ]])</code>&LINK&https://dev.mysql.com/doc/refman/8.4/gis-wkb-functions.html#function_st-mlinefromwkb</link> , <link><code>ST_MultiLineStringFromWKB( wkb [, srid [, options ]])</code>&LINK&https://dev.mysql.com/doc/refman/8.4/gis-wkb-functions.html#function_st-mlinefromwkb</link>\nConstructs a <code>MultiLineString</code> value using its WKB representation and SRID.\nThese functions handle their arguments as described in the introduction to this section.",
        "Demo": []
    },
    {
        "Name": "ST_MPointFromText",
        "Tree": "(functionCall (fullId (uid (simpleId ST_MPointFromText))) ( ))",
        "Description": [
            "Construct MultiPoint from WKT"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/gis-wkt-functions.html#function_st-mpointfromtext"
        ],
        "Detail": "<link><code>ST_MPointFromText( wkt [, srid [, options ]])</code>&LINK&https://dev.mysql.com/doc/refman/8.4/gis-wkt-functions.html#function_st-mpointfromtext</link> , <link><code>ST_MultiPointFromText( wkt [, srid [, options ]])</code>&LINK&https://dev.mysql.com/doc/refman/8.4/gis-wkt-functions.html#function_st-mpointfromtext</link>\nConstructs a <code>MultiPoint</code> value using its WKT representation and SRID.\nThese functions handle their arguments as described in the introduction to this section.",
        "Demo": []
    },
    {
        "Name": "ST_MultiPointFromText",
        "Tree": "(functionCall (fullId (uid (simpleId ST_MultiPointFromText))) ( ))",
        "Description": [
            "Construct MultiPoint from WKT"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/gis-wkt-functions.html#function_st-mpointfromtext"
        ],
        "Detail": "<link><code>ST_MPointFromText( wkt [, srid [, options ]])</code>&LINK&https://dev.mysql.com/doc/refman/8.4/gis-wkt-functions.html#function_st-mpointfromtext</link> , <link><code>ST_MultiPointFromText( wkt [, srid [, options ]])</code>&LINK&https://dev.mysql.com/doc/refman/8.4/gis-wkt-functions.html#function_st-mpointfromtext</link>\nConstructs a <code>MultiPoint</code> value using its WKT representation and SRID.\nThese functions handle their arguments as described in the introduction to this section.",
        "Demo": []
    },
    {
        "Name": "ST_MPointFromWKB",
        "Tree": "(functionCall (fullId (uid (simpleId ST_MPointFromWKB))) ( ))",
        "Description": [
            "Construct MultiPoint from WKB"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/gis-wkb-functions.html#function_st-mpointfromwkb"
        ],
        "Detail": "<link><code>ST_MPointFromWKB( wkb [, srid [, options ]])</code>&LINK&https://dev.mysql.com/doc/refman/8.4/gis-wkb-functions.html#function_st-mpointfromwkb</link> , <link><code>ST_MultiPointFromWKB( wkb [, srid [, options ]])</code>&LINK&https://dev.mysql.com/doc/refman/8.4/gis-wkb-functions.html#function_st-mpointfromwkb</link>\nConstructs a <code>MultiPoint</code> value using its WKB representation and SRID.\nThese functions handle their arguments as described in the introduction to this section.",
        "Demo": []
    },
    {
        "Name": "ST_MultiPointFromWKB",
        "Tree": "(functionCall (fullId (uid (simpleId ST_MultiPointFromWKB))) ( ))",
        "Description": [
            "Construct MultiPoint from WKB"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/gis-wkb-functions.html#function_st-mpointfromwkb"
        ],
        "Detail": "<link><code>ST_MPointFromWKB( wkb [, srid [, options ]])</code>&LINK&https://dev.mysql.com/doc/refman/8.4/gis-wkb-functions.html#function_st-mpointfromwkb</link> , <link><code>ST_MultiPointFromWKB( wkb [, srid [, options ]])</code>&LINK&https://dev.mysql.com/doc/refman/8.4/gis-wkb-functions.html#function_st-mpointfromwkb</link>\nConstructs a <code>MultiPoint</code> value using its WKB representation and SRID.\nThese functions handle their arguments as described in the introduction to this section.",
        "Demo": []
    },
    {
        "Name": "ST_MPolyFromText",
        "Tree": "(functionCall (fullId (uid (simpleId ST_MPolyFromText))) ( ))",
        "Description": [
            "Construct MultiPolygon from WKT"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/gis-wkt-functions.html#function_st-mpolyfromtext"
        ],
        "Detail": "<link><code>ST_MPolyFromText( wkt [, srid [, options ]])</code>&LINK&https://dev.mysql.com/doc/refman/8.4/gis-wkt-functions.html#function_st-mpolyfromtext</link> , <link><code>ST_MultiPolygonFromText( wkt [, srid [, options ]])</code>&LINK&https://dev.mysql.com/doc/refman/8.4/gis-wkt-functions.html#function_st-mpolyfromtext</link>\nConstructs a <code>MultiPolygon</code> value using its WKT representation and SRID.\nThese functions handle their arguments as described in the introduction to this section.",
        "Demo": []
    },
    {
        "Name": "ST_MultiPolygonFromText",
        "Tree": "(functionCall (fullId (uid (simpleId ST_MultiPolygonFromText))) ( ))",
        "Description": [
            "Construct MultiPolygon from WKT"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/gis-wkt-functions.html#function_st-mpolyfromtext"
        ],
        "Detail": "<link><code>ST_MPolyFromText( wkt [, srid [, options ]])</code>&LINK&https://dev.mysql.com/doc/refman/8.4/gis-wkt-functions.html#function_st-mpolyfromtext</link> , <link><code>ST_MultiPolygonFromText( wkt [, srid [, options ]])</code>&LINK&https://dev.mysql.com/doc/refman/8.4/gis-wkt-functions.html#function_st-mpolyfromtext</link>\nConstructs a <code>MultiPolygon</code> value using its WKT representation and SRID.\nThese functions handle their arguments as described in the introduction to this section.",
        "Demo": []
    },
    {
        "Name": "ST_MPolyFromWKB",
        "Tree": "(functionCall (fullId (uid (simpleId ST_MPolyFromWKB))) ( ))",
        "Description": [
            "Construct MultiPolygon from WKB"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/gis-wkb-functions.html#function_st-mpolyfromwkb"
        ],
        "Detail": "<link><code>ST_MPolyFromWKB( wkb [, srid [, options ]])</code>&LINK&https://dev.mysql.com/doc/refman/8.4/gis-wkb-functions.html#function_st-mpolyfromwkb</link> , <link><code>ST_MultiPolygonFromWKB( wkb [, srid [, options ]])</code>&LINK&https://dev.mysql.com/doc/refman/8.4/gis-wkb-functions.html#function_st-mpolyfromwkb</link>\nConstructs a <code>MultiPolygon</code> value using its WKB representation and SRID.\nThese functions handle their arguments as described in the introduction to this section.",
        "Demo": []
    },
    {
        "Name": "ST_MultiPolygonFromWKB",
        "Tree": "(functionCall (fullId (uid (simpleId ST_MultiPolygonFromWKB))) ( ))",
        "Description": [
            "Construct MultiPolygon from WKB"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/gis-wkb-functions.html#function_st-mpolyfromwkb"
        ],
        "Detail": "<link><code>ST_MPolyFromWKB( wkb [, srid [, options ]])</code>&LINK&https://dev.mysql.com/doc/refman/8.4/gis-wkb-functions.html#function_st-mpolyfromwkb</link> , <link><code>ST_MultiPolygonFromWKB( wkb [, srid [, options ]])</code>&LINK&https://dev.mysql.com/doc/refman/8.4/gis-wkb-functions.html#function_st-mpolyfromwkb</link>\nConstructs a <code>MultiPolygon</code> value using its WKB representation and SRID.\nThese functions handle their arguments as described in the introduction to this section.",
        "Demo": []
    },
    {
        "Name": "ST_NumGeometries",
        "Tree": "(functionCall (scalarFunctionName (functionNameBase ST_NumGeometries)) ( ))",
        "Description": [
            "Return number of geometries in geometry collection"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/gis-geometrycollection-property-functions.html#function_st-numgeometries"
        ],
        "Detail": "<link><code>ST_NumGeometries( gc )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/gis-geometrycollection-property-functions.html#function_st-numgeometries</link>\nReturns the number of geometries in the <code>GeometryCollection</code> value <code>gc</code> .\n<link><code>ST_NumGeometries()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/gis-geometrycollection-property-functions.html#function_st-numgeometries</link> handles its arguments as described in the introduction to this section.",
        "Demo": [
            "mysql> SET @gc = 'GeometryCollection(Point(1 1),LineString(2 2, 3 3))';\nmysql> SELECT ST_NumGeometries(ST_GeomFromText(@gc));\n+----------------------------------------+\n| ST_NumGeometries(ST_GeomFromText(@gc)) |\n+----------------------------------------+\n| 2 |\n+----------------------------------------+"
        ]
    },
    {
        "Name": "ST_NumInteriorRing",
        "Tree": "(functionCall (scalarFunctionName (functionNameBase ST_NumInteriorRing)) ( ))",
        "Description": [
            "Return number of interior rings in Polygon"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/gis-polygon-property-functions.html#function_st-numinteriorrings"
        ],
        "Detail": "<link><code>ST_NumInteriorRing( poly )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/gis-polygon-property-functions.html#function_st-numinteriorrings</link> , <link><code>ST_NumInteriorRings( poly )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/gis-polygon-property-functions.html#function_st-numinteriorrings</link>\nReturns the number of interior rings in the <code>Polygon</code> value <code>poly</code> .\n<link><code>ST_NumInteriorRing()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/gis-polygon-property-functions.html#function_st-numinteriorrings</link> and <link><code>ST_NuminteriorRings()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/gis-polygon-property-functions.html#function_st-numinteriorrings</link> handle their arguments as described in the introduction to this section.",
        "Demo": [
            "mysql> SET @poly =\n'Polygon((0 0,0 3,3 3,3 0,0 0),(1 1,1 2,2 2,2 1,1 1))';\nmysql> SELECT ST_NumInteriorRings(ST_GeomFromText(@poly));\n+---------------------------------------------+\n| ST_NumInteriorRings(ST_GeomFromText(@poly)) |\n+---------------------------------------------+\n| 1 |\n+---------------------------------------------+"
        ]
    },
    {
        "Name": "ST_NumInteriorRings",
        "Tree": "(functionCall (scalarFunctionName (functionNameBase ST_NumInteriorRings)) ( ))",
        "Description": [
            "Return number of interior rings in Polygon"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/gis-polygon-property-functions.html#function_st-numinteriorrings"
        ],
        "Detail": "<link><code>ST_NumInteriorRing( poly )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/gis-polygon-property-functions.html#function_st-numinteriorrings</link> , <link><code>ST_NumInteriorRings( poly )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/gis-polygon-property-functions.html#function_st-numinteriorrings</link>\nReturns the number of interior rings in the <code>Polygon</code> value <code>poly</code> .\n<link><code>ST_NumInteriorRing()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/gis-polygon-property-functions.html#function_st-numinteriorrings</link> and <link><code>ST_NuminteriorRings()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/gis-polygon-property-functions.html#function_st-numinteriorrings</link> handle their arguments as described in the introduction to this section.",
        "Demo": [
            "mysql> SET @poly =\n'Polygon((0 0,0 3,3 3,3 0,0 0),(1 1,1 2,2 2,2 1,1 1))';\nmysql> SELECT ST_NumInteriorRings(ST_GeomFromText(@poly));\n+---------------------------------------------+\n| ST_NumInteriorRings(ST_GeomFromText(@poly)) |\n+---------------------------------------------+\n| 1 |\n+---------------------------------------------+"
        ]
    },
    {
        "Name": "ST_NumPoints",
        "Tree": "(functionCall (scalarFunctionName (functionNameBase ST_NumPoints)) ( ))",
        "Description": [
            "Return number of points in LineString"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/gis-linestring-property-functions.html#function_st-numpoints"
        ],
        "Detail": "<link><code>ST_NumPoints( ls )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/gis-linestring-property-functions.html#function_st-numpoints</link>\nReturns the number of <code>Point</code> objects in the <code>LineString</code> value <code>ls</code> .\n<link><code>ST_NumPoints()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/gis-linestring-property-functions.html#function_st-numpoints</link> handles its arguments as described in the introduction to this section.",
        "Demo": [
            "mysql> SET @ls = 'LineString(1 1,2 2,3 3)';\nmysql> SELECT ST_NumPoints(ST_GeomFromText(@ls));\n+------------------------------------+\n| ST_NumPoints(ST_GeomFromText(@ls)) |\n+------------------------------------+\n| 3 |\n+------------------------------------+"
        ]
    },
    {
        "Name": "ST_Overlaps",
        "Tree": "(functionCall (scalarFunctionName (functionNameBase ST_Overlaps)) ( ))",
        "Description": [
            "Whether one geometry overlaps another"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/spatial-relation-functions-object-shapes.html#function_st-overlaps"
        ],
        "Detail": "<link><code>ST_Overlaps( g1 , g2 )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/spatial-relation-functions-object-shapes.html#function_st-overlaps</link>\nTwo geometries spatially overlap if they intersect and their intersection results in a geometry of the same dimension but not equal to either of the given geometries.\nThis function returns 1 or 0 to indicate whether <code>g1</code> spatially overlaps <code>g2</code> .\n<link><code>ST_Overlaps()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/spatial-relation-functions-object-shapes.html#function_st-overlaps</link> handles its arguments as described in the introduction to this section except that the return value is <code>NULL</code> for the additional condition that the dimensions of the two geometries are not equal.",
        "Demo": []
    },
    {
        "Name": "ST_PointAtDistance",
        "Tree": "(functionCall (fullId (uid (simpleId ST_PointAtDistance))) ( ))",
        "Description": [
            "The point a given distance along a LineString"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/spatial-operator-functions.html#function_st-pointatdistance"
        ],
        "Detail": "<link><code>ST_PointAtDistance( ls , distance )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/spatial-operator-functions.html#function_st-pointatdistance</link>\nThis function takes a <code>LineString</code> geometry and a distance in the range [0.0, <link><code>ST_Length( ls )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/gis-linestring-property-functions.html#function_st-length</link> ] measured in the unit of the spatial reference system (SRS) of the <code>LineString</code> , and returns the <code>Point</code> along the <code>LineString</code> at that distance from its start point. It can be used to answer questions such as which <code>Point</code> value is 400 meters from the start of the road described by the geometry argument.\nThe function is implemented for <code>LineString</code> geometries in all spatial reference systems, both Cartesian and geographic.\n<link><code>ST_PointAtDistance()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/spatial-operator-functions.html#function_st-pointatdistance</link> handles its arguments as described in the introduction to this section, with these exceptions:\nIf the geometry argument is not a <code>LineString</code> , an <link><code>ER_UNEXPECTED_GEOMETRY_TYPE</code>&LINK&https://dev.mysql.com/doc/mysql-errors/8.4/en/server-error-reference.html#error_er_unexpected_geometry_type</link> error occurs.\nIf the fractional distance argument is outside the range [0.0, <link><code>ST_Length( ls )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/gis-linestring-property-functions.html#function_st-length</link> ], an <link><code>ER_DATA_OUT_OF_RANGE</code>&LINK&https://dev.mysql.com/doc/mysql-errors/8.4/en/server-error-reference.html#error_er_data_out_of_range</link> error occurs.\n<link><code>ST_PointAtDistance()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/spatial-operator-functions.html#function_st-pointatdistance</link> is a MySQL extension to OpenGIS.",
        "Demo": []
    },
    {
        "Name": "ST_PointFromGeoHash",
        "Tree": "(functionCall (fullId (uid (simpleId ST_PointFromGeoHash))) ( ))",
        "Description": [
            "Convert geohash value to POINT value"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/spatial-geohash-functions.html#function_st-pointfromgeohash"
        ],
        "Detail": "<link><code>ST_PointFromGeoHash( geohash_str , srid )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/spatial-geohash-functions.html#function_st-pointfromgeohash</link>\nReturns a <code>POINT</code> value containing the decoded geohash value, given a geohash string value.\nThe X and Y coordinates of the point are the longitude in the range [\u2212180, 180] and the latitude in the range [\u221290, 90], respectively.\nThe <code>srid</code> argument is an 32-bit unsigned integer.\nThe remarks in the description of <link><code>ST_LatFromGeoHash()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/spatial-geohash-functions.html#function_st-latfromgeohash</link> regarding the maximum number of characters processed from the <code>geohash_str</code> argument also apply to <link><code>ST_PointFromGeoHash()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/spatial-geohash-functions.html#function_st-pointfromgeohash</link> .\n<link><code>ST_PointFromGeoHash()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/spatial-geohash-functions.html#function_st-pointfromgeohash</link> handles its arguments as described in the introduction to this section.",
        "Demo": [
            "mysql> SET @gh = ST_GeoHash(45,-20,10);\nmysql> SELECT ST_AsText(ST_PointFromGeoHash(@gh,0));\n+---------------------------------------+\n| ST_AsText(ST_PointFromGeoHash(@gh,0)) |\n+---------------------------------------+\n| POINT(45 -20) |\n+---------------------------------------+"
        ]
    },
    {
        "Name": "ST_PointFromText",
        "Tree": "(functionCall (scalarFunctionName (functionNameBase ST_PointFromText)) ( ))",
        "Description": [
            "Construct Point from WKT"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/gis-wkt-functions.html#function_st-pointfromtext"
        ],
        "Detail": "<link><code>ST_PointFromText( wkt [, srid [, options ]])</code>&LINK&https://dev.mysql.com/doc/refman/8.4/gis-wkt-functions.html#function_st-pointfromtext</link>\nConstructs a <code>Point</code> value using its WKT representation and SRID.\n<link><code>ST_PointFromText()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/gis-wkt-functions.html#function_st-pointfromtext</link> handles its arguments as described in the introduction to this section.",
        "Demo": []
    },
    {
        "Name": "ST_PointFromWKB",
        "Tree": "(functionCall (scalarFunctionName (functionNameBase ST_PointFromWKB)) ( ))",
        "Description": [
            "Construct Point from WKB"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/gis-wkb-functions.html#function_st-pointfromwkb"
        ],
        "Detail": "<link><code>ST_PointFromWKB( wkb [, srid [, options ]])</code>&LINK&https://dev.mysql.com/doc/refman/8.4/gis-wkb-functions.html#function_st-pointfromwkb</link>\nConstructs a <code>Point</code> value using its WKB representation and SRID.\n<link><code>ST_PointFromWKB()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/gis-wkb-functions.html#function_st-pointfromwkb</link> handles its arguments as described in the introduction to this section.",
        "Demo": []
    },
    {
        "Name": "ST_PointN",
        "Tree": "(functionCall (scalarFunctionName (functionNameBase ST_PointN)) ( ))",
        "Description": [
            "Return N-th point from LineString"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/gis-linestring-property-functions.html#function_st-pointn"
        ],
        "Detail": "<link><code>ST_PointN( ls , N )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/gis-linestring-property-functions.html#function_st-pointn</link>\nReturns the <code>N</code> -th <code>Point</code> in the <code>Linestring</code> value <code>ls</code> . Points are numbered beginning with 1.\n<link><code>ST_PointN()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/gis-linestring-property-functions.html#function_st-pointn</link> handles its arguments as described in the introduction to this section.",
        "Demo": [
            "mysql> SET @ls = 'LineString(1 1,2 2,3 3)';\nmysql> SELECT ST_AsText(ST_PointN(ST_GeomFromText(@ls),2));\n+----------------------------------------------+\n| ST_AsText(ST_PointN(ST_GeomFromText(@ls),2)) |\n+----------------------------------------------+\n| POINT(2 2) |\n+----------------------------------------------+"
        ]
    },
    {
        "Name": "ST_PolyFromText",
        "Tree": "(functionCall (scalarFunctionName (functionNameBase ST_PolyFromText)) ( ))",
        "Description": [
            "Construct Polygon from WKT"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/gis-wkt-functions.html#function_st-polyfromtext"
        ],
        "Detail": "<link><code>ST_PolyFromText( wkt [, srid [, options ]])</code>&LINK&https://dev.mysql.com/doc/refman/8.4/gis-wkt-functions.html#function_st-polyfromtext</link> , <link><code>ST_PolygonFromText( wkt [, srid [, options ]])</code>&LINK&https://dev.mysql.com/doc/refman/8.4/gis-wkt-functions.html#function_st-polyfromtext</link>\nConstructs a <code>Polygon</code> value using its WKT representation and SRID.\nThese functions handle their arguments as described in the introduction to this section.",
        "Demo": []
    },
    {
        "Name": "ST_PolygonFromText",
        "Tree": "(functionCall (scalarFunctionName (functionNameBase ST_PolygonFromText)) ( ))",
        "Description": [
            "Construct Polygon from WKT"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/gis-wkt-functions.html#function_st-polyfromtext"
        ],
        "Detail": "<link><code>ST_PolyFromText( wkt [, srid [, options ]])</code>&LINK&https://dev.mysql.com/doc/refman/8.4/gis-wkt-functions.html#function_st-polyfromtext</link> , <link><code>ST_PolygonFromText( wkt [, srid [, options ]])</code>&LINK&https://dev.mysql.com/doc/refman/8.4/gis-wkt-functions.html#function_st-polyfromtext</link>\nConstructs a <code>Polygon</code> value using its WKT representation and SRID.\nThese functions handle their arguments as described in the introduction to this section.",
        "Demo": []
    },
    {
        "Name": "ST_PolyFromWKB",
        "Tree": "(functionCall (scalarFunctionName (functionNameBase ST_PolyFromWKB)) ( ))",
        "Description": [
            "Construct Polygon from WKB"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/gis-wkb-functions.html#function_st-polyfromwkb"
        ],
        "Detail": "<link><code>ST_PolyFromWKB( wkb [, srid [, options ]])</code>&LINK&https://dev.mysql.com/doc/refman/8.4/gis-wkb-functions.html#function_st-polyfromwkb</link> , <link><code>ST_PolygonFromWKB( wkb [, srid [, options ]])</code>&LINK&https://dev.mysql.com/doc/refman/8.4/gis-wkb-functions.html#function_st-polyfromwkb</link>\nConstructs a <code>Polygon</code> value using its WKB representation and SRID.\nThese functions handle their arguments as described in the introduction to this section.",
        "Demo": []
    },
    {
        "Name": "ST_PolygonFromWKB",
        "Tree": "(functionCall (scalarFunctionName (functionNameBase ST_PolygonFromWKB)) ( ))",
        "Description": [
            "Construct Polygon from WKB"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/gis-wkb-functions.html#function_st-polyfromwkb"
        ],
        "Detail": "<link><code>ST_PolyFromWKB( wkb [, srid [, options ]])</code>&LINK&https://dev.mysql.com/doc/refman/8.4/gis-wkb-functions.html#function_st-polyfromwkb</link> , <link><code>ST_PolygonFromWKB( wkb [, srid [, options ]])</code>&LINK&https://dev.mysql.com/doc/refman/8.4/gis-wkb-functions.html#function_st-polyfromwkb</link>\nConstructs a <code>Polygon</code> value using its WKB representation and SRID.\nThese functions handle their arguments as described in the introduction to this section.",
        "Demo": []
    },
    {
        "Name": "ST_Simplify",
        "Tree": "(functionCall (fullId (uid (simpleId ST_Simplify))) ( ))",
        "Description": [
            "Return simplified geometry"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/spatial-convenience-functions.html#function_st-simplify"
        ],
        "Detail": "<link><code>ST_Simplify( g , max_distance )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/spatial-convenience-functions.html#function_st-simplify</link>\nSimplifies a geometry using the Douglas-Peucker algorithm and returns a simplified value of the same type.\nThe geometry may be any geometry type, although the Douglas-Peucker algorithm may not actually process every type. A geometry collection is processed by giving its components one by one to the simplification algorithm, and the returned geometries are put into a geometry collection as result.\nThe <code>max_distance</code> argument is the distance (in units of the input coordinates) of a vertex to other segments to be removed. Vertices within this distance of the simplified linestring are removed.\nAccording to Boost.Geometry, geometries might become invalid as a result of the simplification process, and the process might create self-intersections. To check the validity of the result, pass it to <link><code>ST_IsValid()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/spatial-convenience-functions.html#function_st-isvalid</link> .\n<link><code>ST_Simplify()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/spatial-convenience-functions.html#function_st-simplify</link> handles its arguments as described in the introduction to this section, with this exception:\nIf the <code>max_distance</code> argument is not positive, or is <code>NaN</code> , an <link><code>ER_WRONG_ARGUMENTS</code>&LINK&https://dev.mysql.com/doc/mysql-errors/8.4/en/server-error-reference.html#error_er_wrong_arguments</link> error occurs.",
        "Demo": [
            "mysql> SET @g = ST_GeomFromText('LINESTRING(0 0,0 1,1 1,1 2,2 2,2 3,3 3)');\nmysql> SELECT ST_AsText(ST_Simplify(@g, 0.5));\n+---------------------------------+\n| ST_AsText(ST_Simplify(@g, 0.5)) |\n+---------------------------------+\n| LINESTRING(0 0,0 1,1 1,2 3,3 3) |\n+---------------------------------+\nmysql> SELECT ST_AsText(ST_Simplify(@g, 1.0));\n+---------------------------------+\n| ST_AsText(ST_Simplify(@g, 1.0)) |\n+---------------------------------+\n| LINESTRING(0 0,3 3) |\n+---------------------------------+"
        ]
    },
    {
        "Name": "ST_SRID",
        "Tree": "(functionCall (scalarFunctionName (functionNameBase ST_SRID)) ( ))",
        "Description": [
            "Return spatial reference system ID for geometry"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/gis-general-property-functions.html#function_st-srid"
        ],
        "Detail": "<link><code>ST_SRID( g [, srid ])</code>&LINK&https://dev.mysql.com/doc/refman/8.4/gis-general-property-functions.html#function_st-srid</link>\nWith a single argument representing a valid geometry object <code>g</code> , <link><code>ST_SRID()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/gis-general-property-functions.html#function_st-srid</link> returns an integer indicating the ID of the spatial reference system (SRS) associated with <code>g</code> .\nWith the optional second argument representing a valid SRID value, <link><code>ST_SRID()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/gis-general-property-functions.html#function_st-srid</link> returns an object with the same type as its first argument with an SRID value equal to the second argument. This only sets the SRID value of the object; it does not perform any transformation of coordinate values.\n<link><code>ST_SRID()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/gis-general-property-functions.html#function_st-srid</link> handles its arguments as described in the introduction to this section, with this exception:\nFor the single-argument syntax, <link><code>ST_SRID()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/gis-general-property-functions.html#function_st-srid</link> returns the geometry SRID even if it refers to an undefined SRS. An <link><code>ER_SRS_NOT_FOUND</code>&LINK&https://dev.mysql.com/doc/mysql-errors/8.4/en/server-error-reference.html#error_er_srs_not_found</link> error does not occur.\n<link><code>ST_SRID( g , target_srid )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/gis-general-property-functions.html#function_st-srid</link> and <link><code>ST_Transform( g , target_srid )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/spatial-operator-functions.html#function_st-transform</link> differ as follows:\n<link><code>ST_SRID()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/gis-general-property-functions.html#function_st-srid</link> changes the geometry SRID value without transforming its coordinates.\n<link><code>ST_Transform()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/spatial-operator-functions.html#function_st-transform</link> transforms the geometry coordinates in addition to changing its SRID value.\nIt is possible to create a geometry in a particular SRID by passing to <link><code>ST_SRID()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/gis-general-property-functions.html#function_st-srid</link> the result of one of the MySQL-specific functions for creating spatial values, along with an SRID value. For example:\nHowever, that method creates the geometry in SRID 0, then casts it to SRID 4326 (WGS 84). A preferable alternative is to create the geometry with the correct spatial reference system to begin with. For example:\nThe two-argument form of <link><code>ST_SRID()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/gis-general-property-functions.html#function_st-srid</link> is useful for tasks such as correcting or changing the SRS of geometries that have an incorrect SRID.",
        "Demo": [
            "mysql> SET @g = ST_GeomFromText('LineString(1 1,2 2)', 0);\nmysql> SELECT ST_SRID(@g);\n+-------------+\n| ST_SRID(@g) |\n+-------------+\n| 0 |\n+-------------+\nmysql> SET @g = ST_SRID(@g, 4326);\nmysql> SELECT ST_SRID(@g);\n+-------------+\n| ST_SRID(@g) |\n+-------------+\n| 4326 |\n+-------------+",
            "SET @g1 = ST_SRID(Point(1, 1), 4326);"
        ]
    },
    {
        "Name": "ST_StartPoint",
        "Tree": "(functionCall (scalarFunctionName (functionNameBase ST_StartPoint)) ( ))",
        "Description": [
            "Start Point of LineString"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/gis-linestring-property-functions.html#function_st-startpoint"
        ],
        "Detail": "<link><code>ST_StartPoint( ls )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/gis-linestring-property-functions.html#function_st-startpoint</link>\nReturns the <code>Point</code> that is the start point of the <code>LineString</code> value <code>ls</code> .\n<link><code>ST_StartPoint()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/gis-linestring-property-functions.html#function_st-startpoint</link> handles its arguments as described in the introduction to this section.",
        "Demo": [
            "mysql> SET @ls = 'LineString(1 1,2 2,3 3)';\nmysql> SELECT ST_AsText(ST_StartPoint(ST_GeomFromText(@ls)));\n+------------------------------------------------+\n| ST_AsText(ST_StartPoint(ST_GeomFromText(@ls))) |\n+------------------------------------------------+\n| POINT(1 1) |\n+------------------------------------------------+"
        ]
    },
    {
        "Name": "ST_SwapXY",
        "Tree": "(functionCall (fullId (uid (simpleId ST_SwapXY))) ( ))",
        "Description": [
            "Return argument with X/Y coordinates swapped"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/gis-format-conversion-functions.html#function_st-swapxy"
        ],
        "Detail": "<link><code>ST_SwapXY( g )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/gis-format-conversion-functions.html#function_st-swapxy</link>\nAccepts an argument in internal geometry format, swaps the X and Y values of each coordinate pair within the geometry, and returns the result.\n<link><code>ST_SwapXY()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/gis-format-conversion-functions.html#function_st-swapxy</link> handles its arguments as described in the introduction to this section.",
        "Demo": [
            "mysql> SET @g = ST_LineFromText('LINESTRING(0 5,5 10,10 15)');\nmysql> SELECT ST_AsText(@g);\n+----------------------------+\n| ST_AsText(@g) |\n+----------------------------+\n| LINESTRING(0 5,5 10,10 15) |\n+----------------------------+\nmysql> SELECT ST_AsText(ST_SwapXY(@g));\n+----------------------------+\n| ST_AsText(ST_SwapXY(@g)) |\n+----------------------------+\n| LINESTRING(5 0,10 5,15 10) |\n+----------------------------+"
        ]
    },
    {
        "Name": "ST_SymDifference",
        "Tree": "(functionCall (scalarFunctionName (functionNameBase ST_SymDifference)) ( ))",
        "Description": [
            "Return point set symmetric difference of two geometries"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/spatial-operator-functions.html#function_st-symdifference"
        ],
        "Detail": "<link><code>ST_SymDifference( g1 , g2 )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/spatial-operator-functions.html#function_st-symdifference</link>\nReturns a geometry that represents the point set symmetric difference of the geometry values <code>g1</code> and <code>g2</code> , which is defined as:\nOr, in function call notation:\nThe result is in the same SRS as the geometry arguments.\n<link><code>ST_SymDifference()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/spatial-operator-functions.html#function_st-symdifference</link> permits arguments in either a Cartesian or a geographic SRS, and handles its arguments as described in the introduction to this section.",
        "Demo": [
            "ST_SymDifference(g1, g2) = ST_Difference(ST_Union(g1, g2), ST_Intersection(g1, g2))",
            "mysql> SET @g1 = ST_GeomFromText('MULTIPOINT(5 0,15 10,15 25)');\nmysql> SET @g2 = ST_GeomFromText('MULTIPOINT(1 1,15 10,15 25)');\nmysql> SELECT ST_AsText(ST_SymDifference(@g1, @g2));\n+---------------------------------------+\n| ST_AsText(ST_SymDifference(@g1, @g2)) |\n+---------------------------------------+\n| MULTIPOINT((1 1),(5 0)) |\n+---------------------------------------+"
        ]
    },
    {
        "Name": "ST_Touches",
        "Tree": "(functionCall (scalarFunctionName (functionNameBase ST_Touches)) ( ))",
        "Description": [
            "Whether one geometry touches another"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/spatial-relation-functions-object-shapes.html#function_st-touches"
        ],
        "Detail": "<link><code>ST_Touches( g1 , g2 )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/spatial-relation-functions-object-shapes.html#function_st-touches</link>\nTwo geometries spatially touch if their interiors do not intersect, but the boundary of one of the geometries intersects either the boundary or the interior of the other.\nThis function returns 1 or 0 to indicate whether <code>g1</code> spatially touches <code>g2</code> .\n<link><code>ST_Touches()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/spatial-relation-functions-object-shapes.html#function_st-touches</link> handles its arguments as described in the introduction to this section except that the return value is <code>NULL</code> for the additional condition that both geometries are of dimension 0 ( <code>Point</code> or <code>MultiPoint</code> ).",
        "Demo": []
    },
    {
        "Name": "ST_Transform",
        "Tree": "(functionCall (fullId (uid (simpleId ST_Transform))) ( ))",
        "Description": [
            "Transform coordinates of geometry"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/spatial-operator-functions.html#function_st-transform"
        ],
        "Detail": "<link><code>ST_Transform( g , target_srid )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/spatial-operator-functions.html#function_st-transform</link>\nTransforms a geometry from one spatial reference system (SRS) to another. The return value is a geometry of the same type as the input geometry with all coordinates transformed to the target SRID, <code>target_srid</code> . MySQL supports all SRSs defined by EPSG except for those listed here:\nEPSG 1042 Krovak Modified\nEPSG 1043 Krovak Modified (North Orientated)\nEPSG 9816 Tunisia Mining Grid\nEPSG 9826 Lambert Conic Conformal (West Orientated)\n<link><code>ST_Transform()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/spatial-operator-functions.html#function_st-transform</link> handles its arguments as described in the introduction to this section, with these exceptions:\nGeometry arguments that have an SRID value for a geographic SRS do not produce an error.\nIf the geometry or target SRID argument has an SRID value that refers to an undefined spatial reference system (SRS), an <link><code>ER_SRS_NOT_FOUND</code>&LINK&https://dev.mysql.com/doc/mysql-errors/8.4/en/server-error-reference.html#error_er_srs_not_found</link> error occurs.\nIf the geometry is in an SRS that <link><code>ST_Transform()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/spatial-operator-functions.html#function_st-transform</link> cannot transform from, an <link><code>ER_TRANSFORM_SOURCE_SRS_NOT_SUPPORTED</code>&LINK&https://dev.mysql.com/doc/mysql-errors/8.4/en/server-error-reference.html#error_er_transform_source_srs_not_supported</link> error occurs.\nIf the target SRID is in an SRS that <link><code>ST_Transform()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/spatial-operator-functions.html#function_st-transform</link> cannot transform to, an <link><code>ER_TRANSFORM_TARGET_SRS_NOT_SUPPORTED</code>&LINK&https://dev.mysql.com/doc/mysql-errors/8.4/en/server-error-reference.html#error_er_transform_target_srs_not_supported</link> error occurs.\nIf the geometry is in an SRS that is not WGS 84 and has no TOWGS84 clause, an <link><code>ER_TRANSFORM_SOURCE_SRS_MISSING_TOWGS84</code>&LINK&https://dev.mysql.com/doc/mysql-errors/8.4/en/server-error-reference.html#error_er_transform_source_srs_missing_towgs84</link> error occurs.\nIf the target SRID is in an SRS that is not WGS 84 and has no TOWGS84 clause, an <link><code>ER_TRANSFORM_TARGET_SRS_MISSING_TOWGS84</code>&LINK&https://dev.mysql.com/doc/mysql-errors/8.4/en/server-error-reference.html#error_er_transform_target_srs_missing_towgs84</link> error occurs.\n<link><code>ST_SRID( g , target_srid )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/gis-general-property-functions.html#function_st-srid</link> and <link><code>ST_Transform( g , target_srid )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/spatial-operator-functions.html#function_st-transform</link> differ as follows:\n<link><code>ST_SRID()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/gis-general-property-functions.html#function_st-srid</link> changes the geometry SRID value without transforming its coordinates.\n<link><code>ST_Transform()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/spatial-operator-functions.html#function_st-transform</link> transforms the geometry coordinates in addition to changing its SRID value.",
        "Demo": [
            "mysql> SET @p = ST_GeomFromText('POINT(52.381389 13.064444)', 4326);\nmysql> SELECT ST_AsText(@p);\n+----------------------------+\n| ST_AsText(@p) |\n+----------------------------+\n| POINT(52.381389 13.064444) |\n+----------------------------+\nmysql> SET @p = ST_Transform(@p, 4230);\nmysql> SELECT ST_AsText(@p);\n+---------------------------------------------+\n| ST_AsText(@p) |\n+---------------------------------------------+\n| POINT(52.38208611407426 13.065520672345304) |\n+---------------------------------------------+"
        ]
    },
    {
        "Name": "ST_Union",
        "Tree": "(functionCall (scalarFunctionName (functionNameBase ST_Union)) ( ))",
        "Description": [
            "Return point set union of two geometries"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/spatial-operator-functions.html#function_st-union"
        ],
        "Detail": "<link><code>ST_Union( g1 , g2 )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/spatial-operator-functions.html#function_st-union</link>\nReturns a geometry that represents the point set union of the geometry values <code>g1</code> and <code>g2</code> . The result is in the same SRS as the geometry arguments.\n<link><code>ST_Union()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/spatial-operator-functions.html#function_st-union</link> permits arguments in either a Cartesian or a geographic SRS, and handles its arguments as described in the introduction to this section.",
        "Demo": [
            "mysql> SET @g1 = ST_GeomFromText('LineString(1 1, 3 3)');\nmysql> SET @g2 = ST_GeomFromText('LineString(1 3, 3 1)');\nmysql> SELECT ST_AsText(ST_Union(@g1, @g2));\n+--------------------------------------+\n| ST_AsText(ST_Union(@g1, @g2)) |\n+--------------------------------------+\n| MULTILINESTRING((1 1,3 3),(1 3,3 1)) |\n+--------------------------------------+"
        ]
    },
    {
        "Name": "ST_Validate",
        "Tree": "(functionCall (fullId (uid (simpleId ST_Validate))) ( ))",
        "Description": [
            "Return validated geometry"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/spatial-convenience-functions.html#function_st-validate"
        ],
        "Detail": "<link><code>ST_Validate( g )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/spatial-convenience-functions.html#function_st-validate</link>\nValidates a geometry according to the OGC specification. A geometry can be syntactically well-formed (WKB value plus SRID) but geometrically invalid. For example, this polygon is geometrically invalid: <code>POLYGON((0 0, 0 0, 0 0, 0 0, 0 0))</code>\n<link><code>ST_Validate()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/spatial-convenience-functions.html#function_st-validate</link> returns the geometry if it is syntactically well-formed and is geometrically valid, <code>NULL</code> if the argument is not syntactically well-formed or is not geometrically valid or is <code>NULL</code> .\n<link><code>ST_Validate()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/spatial-convenience-functions.html#function_st-validate</link> can be used to filter out invalid geometry data, although at a cost. For applications that require more precise results not tainted by invalid data, this penalty may be worthwhile.\nIf the geometry argument is valid, it is returned as is, except that if an input <code>Polygon</code> or <code>MultiPolygon</code> has clockwise rings, those rings are reversed before checking for validity. If the geometry is valid, the value with the reversed rings is returned.\nThe only valid empty geometry is represented in the form of an empty geometry collection value. <link><code>ST_Validate()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/spatial-convenience-functions.html#function_st-validate</link> returns it directly without further checks in this case.\n<link><code>ST_Validate()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/spatial-convenience-functions.html#function_st-validate</link> handles its arguments as described in the introduction to this section, with the exceptions listed here:\nIf the geometry has a geographic SRS with a longitude or latitude that is out of range, an error occurs:\nIf a longitude value is not in the range (\u2212180, 180], an <link><code>ER_GEOMETRY_PARAM_LONGITUDE_OUT_OF_RANGE</code>&LINK&https://dev.mysql.com/doc/mysql-errors/8.4/en/server-error-reference.html#error_er_geometry_param_longitude_out_of_range</link> error occurs.\nIf a latitude value is not in the range [\u221290, 90], an <link><code>ER_GEOMETRY_PARAM_LATITUDE_OUT_OF_RANGE</code>&LINK&https://dev.mysql.com/doc/mysql-errors/8.4/en/server-error-reference.html#error_er_geometry_param_latitude_out_of_range</link> error occurs.\nRanges shown are in degrees. The exact range limits deviate slightly due to floating-point arithmetic.",
        "Demo": [
            "mysql> SET @ls1 = ST_GeomFromText('LINESTRING(0 0)');\nmysql> SET @ls2 = ST_GeomFromText('LINESTRING(0 0, 1 1)');\nmysql> SELECT ST_AsText(ST_Validate(@ls1));\n+------------------------------+\n| ST_AsText(ST_Validate(@ls1)) |\n+------------------------------+\n| NULL |\n+------------------------------+\nmysql> SELECT ST_AsText(ST_Validate(@ls2));\n+------------------------------+\n| ST_AsText(ST_Validate(@ls2)) |\n+------------------------------+\n| LINESTRING(0 0,1 1) |\n+------------------------------+"
        ]
    },
    {
        "Name": "ST_Within",
        "Tree": "(functionCall (scalarFunctionName (functionNameBase ST_Within)) ( ))",
        "Description": [
            "Whether one geometry is within another"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/spatial-relation-functions-object-shapes.html#function_st-within"
        ],
        "Detail": "<link><code>ST_Within( g1 , g2 )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/spatial-relation-functions-object-shapes.html#function_st-within</link>\nReturns 1 or 0 to indicate whether <code>g1</code> is spatially within <code>g2</code> . This tests the opposite relationship as <link><code>ST_Contains()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/spatial-relation-functions-object-shapes.html#function_st-contains</link> .\n<link><code>ST_Within()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/spatial-relation-functions-object-shapes.html#function_st-within</link> handles its arguments as described in the introduction to this section.",
        "Demo": []
    },
    {
        "Name": "ST_X",
        "Tree": "(functionCall (scalarFunctionName (functionNameBase ST_X)) ( ))",
        "Description": [
            "Return X coordinate of Point"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/gis-point-property-functions.html#function_st-x"
        ],
        "Detail": "<link><code>ST_X( p [, new_x_val ])</code>&LINK&https://dev.mysql.com/doc/refman/8.4/gis-point-property-functions.html#function_st-x</link>\nWith a single argument representing a valid <code>Point</code> object <code>p</code> , <link><code>ST_X()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/gis-point-property-functions.html#function_st-x</link> returns the X-coordinate value of <code>p</code> as a double-precision number. The X coordinate is considered to refer to the axis that appears first in the <code>Point</code> spatial reference system (SRS) definition.\nWith the optional second argument, <link><code>ST_X()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/gis-point-property-functions.html#function_st-x</link> returns a <code>Point</code> object like the first argument with its X coordinate equal to the second argument. If the <code>Point</code> object has a geographic SRS, the second argument must be in the proper range for longitude or latitude values.\n<link><code>ST_X()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/gis-point-property-functions.html#function_st-x</link> handles its arguments as described in the introduction to this section.",
        "Demo": [
            "mysql> SELECT ST_X(Point(56.7, 53.34));\n+--------------------------+\n| ST_X(Point(56.7, 53.34)) |\n+--------------------------+\n| 56.7 |\n+--------------------------+\nmysql> SELECT ST_AsText(ST_X(Point(56.7, 53.34), 10.5));\n+-------------------------------------------+\n| ST_AsText(ST_X(Point(56.7, 53.34), 10.5)) |\n+-------------------------------------------+\n| POINT(10.5 53.34) |\n+-------------------------------------------+"
        ]
    },
    {
        "Name": "ST_Y",
        "Tree": "(functionCall (scalarFunctionName (functionNameBase ST_Y)) ( ))",
        "Description": [
            "Return Y coordinate of Point"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/gis-point-property-functions.html#function_st-y"
        ],
        "Detail": "<link><code>ST_Y( p [, new_y_val ])</code>&LINK&https://dev.mysql.com/doc/refman/8.4/gis-point-property-functions.html#function_st-y</link>\nWith a single argument representing a valid <code>Point</code> object <code>p</code> , <link><code>ST_Y()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/gis-point-property-functions.html#function_st-y</link> returns the Y-coordinate value of <code>p</code> as a double-precision number.The Y coordinate is considered to refer to the axis that appears second in the <code>Point</code> spatial reference system (SRS) definition.\nWith the optional second argument, <link><code>ST_Y()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/gis-point-property-functions.html#function_st-y</link> returns a <code>Point</code> object like the first argument with its Y coordinate equal to the second argument. If the <code>Point</code> object has a geographic SRS, the second argument must be in the proper range for longitude or latitude values.\n<link><code>ST_Y()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/gis-point-property-functions.html#function_st-y</link> handles its arguments as described in the introduction to this section.",
        "Demo": [
            "mysql> SELECT ST_Y(Point(56.7, 53.34));\n+--------------------------+\n| ST_Y(Point(56.7, 53.34)) |\n+--------------------------+\n| 53.34 |\n+--------------------------+\nmysql> SELECT ST_AsText(ST_Y(Point(56.7, 53.34), 10.5));\n+-------------------------------------------+\n| ST_AsText(ST_Y(Point(56.7, 53.34), 10.5)) |\n+-------------------------------------------+\n| POINT(56.7 10.5) |\n+-------------------------------------------+"
        ]
    },
    {
        "Name": "STATEMENT_DIGEST",
        "Tree": "(functionCall (fullId (uid (simpleId STATEMENT_DIGEST))) ( ))",
        "Description": [
            "Compute statement digest hash value"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/encryption-functions.html#function_statement-digest"
        ],
        "Detail": "<link><code>STATEMENT_DIGEST( statement )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/encryption-functions.html#function_statement-digest</link>\nGiven an SQL statement as a string, returns the statement digest hash value as a string in the connection character set, or <code>NULL</code> if the argument is <code>NULL</code> . The related <link><code>STATEMENT_DIGEST_TEXT()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/encryption-functions.html#function_statement-digest-text</link> function returns the normalized statement digest. For information about statement digesting, see <link>Section 29.10, \"Performance Schema Statement Digests and Sampling\"&LINK&https://dev.mysql.com/doc/refman/8.4/performance-schema-statement-digests.html</link> .\nBoth functions use the MySQL parser to parse the statement. If parsing fails, an error occurs. The error message includes the parse error only if the statement is provided as a literal string.\nThe <link><code>max_digest_length</code>&LINK&https://dev.mysql.com/doc/refman/8.4/server-system-variables.html#sysvar_max_digest_length</link> system variable determines the maximum number of bytes available to these functions for computing normalized statement digests.",
        "Demo": [
            "mysql> SET @stmt = 'SELECT * FROM mytable WHERE cola = 10 AND colb = 20';\nmysql> SELECT STATEMENT_DIGEST(@stmt);\n+------------------------------------------------------------------+\n| STATEMENT_DIGEST(@stmt) |\n+------------------------------------------------------------------+\n| 3bb95eeade896657c4526e74ff2a2862039d0a0fe8a9e7155b5fe492cbd78387 |\n+------------------------------------------------------------------+\nmysql> SELECT STATEMENT_DIGEST_TEXT(@stmt);\n+----------------------------------------------------------+\n| STATEMENT_DIGEST_TEXT(@stmt) |\n+----------------------------------------------------------+\n| SELECT * FROM `mytable` WHERE `cola` = ? AND `colb` = ? |\n+----------------------------------------------------------+"
        ]
    },
    {
        "Name": "STATEMENT_DIGEST_TEXT",
        "Tree": "(functionCall (fullId (uid (simpleId STATEMENT_DIGEST_TEXT))) ( ))",
        "Description": [
            "Compute normalized statement digest"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/encryption-functions.html#function_statement-digest-text"
        ],
        "Detail": "<link><code>STATEMENT_DIGEST_TEXT( statement )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/encryption-functions.html#function_statement-digest-text</link>\nGiven an SQL statement as a string, returns the normalized statement digest as a string in the connection character set, or <code>NULL</code> if the argument is <code>NULL</code> . For additional discussion and examples, see the description of the related <link><code>STATEMENT_DIGEST()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/encryption-functions.html#function_statement-digest</link> function.",
        "Demo": []
    },
    {
        "Name": "STD",
        "Tree": "(functionCall (aggregateWindowedFunction STD ( )))",
        "Description": [
            "Return the population standard deviation"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/aggregate-functions.html#function_std"
        ],
        "Detail": "<link><code>STD( expr ) [ over_clause ]</code>&LINK&https://dev.mysql.com/doc/refman/8.4/aggregate-functions.html#function_std</link>\nReturns the population standard deviation of <code>expr</code> . <link><code>STD()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/aggregate-functions.html#function_std</link> is a synonym for the standard SQL function <link><code>STDDEV_POP()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/aggregate-functions.html#function_stddev-pop</link> , provided as a MySQL extension.\nIf there are no matching rows, or if <code>expr</code> is <code>NULL</code> , <link><code>STD()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/aggregate-functions.html#function_std</link> returns <code>NULL</code> .\nThis function executes as a window function if <code>over_clause</code> is present. <code>over_clause</code> is as described in <link>Section 14.20.2, \"Window Function Concepts and Syntax\"&LINK&https://dev.mysql.com/doc/refman/8.4/window-functions-usage.html</link> .",
        "Demo": []
    },
    {
        "Name": "STDDEV",
        "Tree": "(functionCall (aggregateWindowedFunction STDDEV ( )))",
        "Description": [
            "Return the population standard deviation"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/aggregate-functions.html#function_stddev"
        ],
        "Detail": "<link><code>STDDEV( expr ) [ over_clause ]</code>&LINK&https://dev.mysql.com/doc/refman/8.4/aggregate-functions.html#function_stddev</link>\nReturns the population standard deviation of <code>expr</code> . <link><code>STDDEV()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/aggregate-functions.html#function_stddev</link> is a synonym for the standard SQL function <link><code>STDDEV_POP()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/aggregate-functions.html#function_stddev-pop</link> , provided for compatibility with Oracle.\nIf there are no matching rows, or if <code>expr</code> is <code>NULL</code> , <link><code>STDDEV()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/aggregate-functions.html#function_stddev</link> returns <code>NULL</code> .\nThis function executes as a window function if <code>over_clause</code> is present. <code>over_clause</code> is as described in <link>Section 14.20.2, \"Window Function Concepts and Syntax\"&LINK&https://dev.mysql.com/doc/refman/8.4/window-functions-usage.html</link> .",
        "Demo": []
    },
    {
        "Name": "STDDEV_POP",
        "Tree": "(functionCall (aggregateWindowedFunction STDDEV_POP ( )))",
        "Description": [
            "Return the population standard deviation"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/aggregate-functions.html#function_stddev-pop"
        ],
        "Detail": "<link><code>STDDEV_POP( expr ) [ over_clause ]</code>&LINK&https://dev.mysql.com/doc/refman/8.4/aggregate-functions.html#function_stddev-pop</link>\nReturns the population standard deviation of <code>expr</code> (the square root of <link><code>VAR_POP()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/aggregate-functions.html#function_var-pop</link> ). You can also use <link><code>STD()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/aggregate-functions.html#function_std</link> or <link><code>STDDEV()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/aggregate-functions.html#function_stddev</link> , which are equivalent but not standard SQL.\nIf there are no matching rows, or if <code>expr</code> is <code>NULL</code> , <link><code>STDDEV_POP()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/aggregate-functions.html#function_stddev-pop</link> returns <code>NULL</code> .\nThis function executes as a window function if <code>over_clause</code> is present. <code>over_clause</code> is as described in <link>Section 14.20.2, \"Window Function Concepts and Syntax\"&LINK&https://dev.mysql.com/doc/refman/8.4/window-functions-usage.html</link> .",
        "Demo": []
    },
    {
        "Name": "STDDEV_SAMP",
        "Tree": "(functionCall (aggregateWindowedFunction STDDEV_SAMP ( )))",
        "Description": [
            "Return the sample standard deviation"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/aggregate-functions.html#function_stddev-samp"
        ],
        "Detail": "<link><code>STDDEV_SAMP( expr ) [ over_clause ]</code>&LINK&https://dev.mysql.com/doc/refman/8.4/aggregate-functions.html#function_stddev-samp</link>\nReturns the sample standard deviation of <code>expr</code> (the square root of <link><code>VAR_SAMP()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/aggregate-functions.html#function_var-samp</link> .\nIf there are no matching rows, or if <code>expr</code> is <code>NULL</code> , <link><code>STDDEV_SAMP()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/aggregate-functions.html#function_stddev-samp</link> returns <code>NULL</code> .\nThis function executes as a window function if <code>over_clause</code> is present. <code>over_clause</code> is as described in <link>Section 14.20.2, \"Window Function Concepts and Syntax\"&LINK&https://dev.mysql.com/doc/refman/8.4/window-functions-usage.html</link> .",
        "Demo": []
    },
    {
        "Name": "STR_TO_DATE",
        "Tree": "(functionCall (scalarFunctionName (functionNameBase STR_TO_DATE)) ( ))",
        "Description": [
            "Convert a string to a date"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html#function_str-to-date"
        ],
        "Detail": "<link><code>STR_TO_DATE( str , format )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/date-and-time-functions.html#function_str-to-date</link>\nThis is the inverse of the <link><code>DATE_FORMAT()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/date-and-time-functions.html#function_date-format</link> function. It takes a string <code>str</code> and a format string <code>format</code> . <code>STR_TO_DATE()</code> returns a <link><code>DATETIME</code>&LINK&https://dev.mysql.com/doc/refman/8.4/datetime.html</link> value if the format string contains both date and time parts, or a <link><code>DATE</code>&LINK&https://dev.mysql.com/doc/refman/8.4/datetime.html</link> or <link><code>TIME</code>&LINK&https://dev.mysql.com/doc/refman/8.4/time.html</link> value if the string contains only date or time parts. If <code>str</code> or <code>format</code> is <code>NULL</code> , the function returns <code>NULL</code> . If the date, time, or datetime value extracted from <code>str</code> cannot be parsed according to the rules followed by the server, <code>STR_TO_DATE()</code> returns <code>NULL</code> and produces a warning.\nThe server scans <code>str</code> attempting to match <code>format</code> to it. The format string can contain literal characters and format specifiers beginning with <code>%</code> . Literal characters in <code>format</code> must match literally in <code>str</code> . Format specifiers in <code>format</code> must match a date or time part in <code>str</code> . For the specifiers that can be used in <code>format</code> , see the <link><code>DATE_FORMAT()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/date-and-time-functions.html#function_date-format</link> function description.\nScanning starts at the beginning of <code>str</code> and fails if <code>format</code> is found not to match. Extra characters at the end of <code>str</code> are ignored.\nUnspecified date or time parts have a value of 0, so incompletely specified values in <code>str</code> produce a result with some or all parts set to 0:\nRange checking on the parts of date values is as described in <link>Section 13.2.2, \"The DATE, DATETIME, and TIMESTAMP Types\"&LINK&https://dev.mysql.com/doc/refman/8.4/datetime.html</link> . This means, for example, that \" zero \" dates or dates with part values of 0 are permitted unless the SQL mode is set to disallow such values.\nIf the <link><code>NO_ZERO_DATE</code>&LINK&https://dev.mysql.com/doc/refman/8.4/sql-mode.html#sqlmode_no_zero_date</link> SQL mode is enabled, zero dates are disallowed. In that case, <link><code>STR_TO_DATE()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/date-and-time-functions.html#function_str-to-date</link> returns <code>NULL</code> and generates a warning:\nIn some previous versions of MySQL, it was possible to pass an invalid date string such as <code>'2021-11-31'</code> to this function. In MySQL 8.4, <code>STR_TO_DATE()</code> performs complete range checking and raises an error if the date after conversion would be invalid.\nNote\nYou cannot use format <code>\"%X%V\"</code> to convert a year-week string to a date because the combination of a year and week does not uniquely identify a year and month if the week crosses a month boundary. To convert a year-week to a date, you should also specify the weekday:\nYou should also be aware that, for dates and the date portions of datetime values, <code>STR_TO_DATE()</code> checks (only) the individual year, month, and day of month values for validity. More precisely, this means that the year is checked to be sure that it is in the range 0-9999 inclusive, the month is checked to ensure that it is in the range 1-12 inclusive, and the day of month is checked to make sure that it is in the range 1-31 inclusive, but the server does not check the values in combination. For example, <code>SELECT STR_TO_DATE('23-2-31', '%Y-%m-%d')</code> returns <code>2023-02-31</code> . Enabling or disabling the <link><code>ALLOW_INVALID_DATES</code>&LINK&https://dev.mysql.com/doc/refman/8.4/sql-mode.html#sqlmode_allow_invalid_dates</link> server SQL mode has no effect on this behavior. See <link>Section 13.2.2, \"The DATE, DATETIME, and TIMESTAMP Types\"&LINK&https://dev.mysql.com/doc/refman/8.4/datetime.html</link> , for more information.",
        "Demo": [
            "mysql> SELECT STR_TO_DATE('01,5,2013','%d,%m,%Y');\n-> '2013-05-01'\nmysql> SELECT STR_TO_DATE('May 1, 2013','%M %d,%Y');\n-> '2013-05-01'",
            "mysql> SELECT STR_TO_DATE('a09:30:17','a%h:%i:%s');\n-> '09:30:17'\nmysql> SELECT STR_TO_DATE('a09:30:17','%h:%i:%s');\n-> NULL\nmysql> SELECT STR_TO_DATE('09:30:17a','%h:%i:%s');\n-> '09:30:17'",
            "mysql> SELECT STR_TO_DATE('abc','abc');\n-> '0000-00-00'\nmysql> SELECT STR_TO_DATE('9','%m');\n-> '0000-09-00'\nmysql> SELECT STR_TO_DATE('9','%s');\n-> '00:00:09'",
            "mysql> SELECT STR_TO_DATE('00/00/0000', '%m/%d/%Y');\n-> '0000-00-00'\nmysql> SELECT STR_TO_DATE('04/31/2004', '%m/%d/%Y');\n-> '2004-04-31'",
            "mysql> SET sql_mode = '';\nmysql> SELECT STR_TO_DATE('00/00/0000', '%m/%d/%Y');\n+---------------------------------------+\n| STR_TO_DATE('00/00/0000', '%m/%d/%Y') |\n+---------------------------------------+\n| 0000-00-00 |\n+---------------------------------------+\nmysql> SET sql_mode = 'NO_ZERO_DATE';\nmysql> SELECT STR_TO_DATE('00/00/0000', '%m/%d/%Y');\n+---------------------------------------+\n| STR_TO_DATE('00/00/0000', '%m/%d/%Y') |\n+---------------------------------------+\n| NULL |\n+---------------------------------------+\nmysql> SHOW WARNINGS\\G\n*************************** 1. row ***************************\nLevel: Warning\nCode: 1411\nMessage: Incorrect datetime value: '00/00/0000' for function str_to_date",
            "mysql> SELECT STR_TO_DATE('200442 Monday', '%X%V %W');\n-> '2004-10-18'"
        ]
    },
    {
        "Name": "STRCMP",
        "Tree": "(functionCall (scalarFunctionName (functionNameBase STRCMP)) ( ))",
        "Description": [
            "Compare two strings"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/string-comparison-functions.html#function_strcmp"
        ],
        "Detail": "<link><code>STRCMP( expr1 , expr2 )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/string-comparison-functions.html#function_strcmp</link>\n<link><code>STRCMP()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/string-comparison-functions.html#function_strcmp</link> returns <code>0</code> if the strings are the same, <code>-1</code> if the first argument is smaller than the second according to the current sort order, and <code>NULL</code> if either argument is <code>NULL</code> . It returns <code>1</code> otherwise.\n<link><code>STRCMP()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/string-comparison-functions.html#function_strcmp</link> performs the comparison using the collation of the arguments.\nIf the collations are incompatible, one of the arguments must be converted to be compatible with the other. See <link>Section 12.8.4, \"Collation Coercibility in Expressions\"&LINK&https://dev.mysql.com/doc/refman/8.4/charset-collation-coercibility.html</link> .",
        "Demo": [
            "mysql> SELECT STRCMP('text', 'text2');\n-> -1\nmysql> SELECT STRCMP('text2', 'text');\n-> 1\nmysql> SELECT STRCMP('text', 'text');\n-> 0",
            "mysql> SET @s1 = _utf8mb4 'x' COLLATE utf8mb4_0900_ai_ci;\nmysql> SET @s2 = _utf8mb4 'X' COLLATE utf8mb4_0900_ai_ci;\nmysql> SET @s3 = _utf8mb4 'x' COLLATE utf8mb4_0900_as_cs;\nmysql> SET @s4 = _utf8mb4 'X' COLLATE utf8mb4_0900_as_cs;\nmysql> SELECT STRCMP(@s1, @s2), STRCMP(@s3, @s4);\n+------------------+------------------+\n| STRCMP(@s1, @s2) | STRCMP(@s3, @s4) |\n+------------------+------------------+\n| 0 | -1 |\n+------------------+------------------+",
            "mysql> SET @s1 = _utf8mb4 'x' COLLATE utf8mb4_0900_ai_ci;\nmysql> SET @s2 = _utf8mb4 'X' COLLATE utf8mb4_0900_ai_ci;\nmysql> SET @s3 = _utf8mb4 'x' COLLATE utf8mb4_0900_as_cs;\nmysql> SET @s4 = _utf8mb4 'X' COLLATE utf8mb4_0900_as_cs;\n-->\nmysql> SELECT STRCMP(@s1, @s3);\nERROR 1267 (HY000): Illegal mix of collations (utf8mb4_0900_ai_ci,IMPLICIT)\nand (utf8mb4_0900_as_cs,IMPLICIT) for operation 'strcmp'\nmysql> SELECT STRCMP(@s1, @s3 COLLATE utf8mb4_0900_ai_ci);\n+---------------------------------------------+\n| STRCMP(@s1, @s3 COLLATE utf8mb4_0900_ai_ci) |\n+---------------------------------------------+\n| 0 |\n+---------------------------------------------+"
        ]
    },
    {
        "Name": "SUBDATE",
        "Tree": "(functionCall (scalarFunctionName (functionNameBase SUBDATE)) ( ))",
        "Description": [
            "Synonym for DATE_SUB() when invoked with three arguments"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html#function_subdate"
        ],
        "Detail": "<link><code>SUBDATE( date ,INTERVAL expr unit )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/date-and-time-functions.html#function_subdate</link> , <link><code>SUBDATE( expr , days )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/date-and-time-functions.html#function_subdate</link>\nWhen invoked with the <code>INTERVAL</code> form of the second argument, <link><code>SUBDATE()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/date-and-time-functions.html#function_subdate</link> is a synonym for <link><code>DATE_SUB()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/date-and-time-functions.html#function_date-sub</link> . For information on the <code>INTERVAL</code> <code>unit</code> argument, see the discussion for <link><code>DATE_ADD()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/date-and-time-functions.html#function_date-add</link> .\nThe second form enables the use of an integer value for <code>days</code> . In such cases, it is interpreted as the number of days to be subtracted from the date or datetime expression <code>expr</code> .\nThis function returns <code>NULL</code> if any of its arguments are <code>NULL</code> .",
        "Demo": [
            "mysql> SELECT DATE_SUB('2008-01-02', INTERVAL 31 DAY);\n-> '2007-12-02'\nmysql> SELECT SUBDATE('2008-01-02', INTERVAL 31 DAY);\n-> '2007-12-02'",
            "mysql> SELECT SUBDATE('2008-01-02 12:00:00', 31);\n-> '2007-12-02 12:00:00'"
        ]
    },
    {
        "Name": "SUBSTR",
        "Tree": "(functionCall (scalarFunctionName SUBSTR) ( ))",
        "Description": [
            "Return the substring as specified"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/string-functions.html#function_substr"
        ],
        "Detail": "<link><code>SUBSTR( str , pos )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/string-functions.html#function_substr</link> , <link><code>SUBSTR( str FROM pos )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/string-functions.html#function_substr</link> , <link><code>SUBSTR( str , pos , len )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/string-functions.html#function_substr</link> , <link><code>SUBSTR( str FROM pos FOR len )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/string-functions.html#function_substr</link>\n<link><code>SUBSTR()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/string-functions.html#function_substr</link> is a synonym for <link><code>SUBSTRING()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/string-functions.html#function_substring</link> .",
        "Demo": []
    },
    {
        "Name": "SUBSTRING",
        "Tree": "(functionCall (scalarFunctionName SUBSTRING) ( ))",
        "Description": [
            "Return the substring as specified"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/string-functions.html#function_substring"
        ],
        "Detail": "<link><code>SUBSTRING( str , pos )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/string-functions.html#function_substring</link> , <link><code>SUBSTRING( str FROM pos )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/string-functions.html#function_substring</link> , <link><code>SUBSTRING( str , pos , len )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/string-functions.html#function_substring</link> , <link><code>SUBSTRING( str FROM pos FOR len )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/string-functions.html#function_substring</link>\nThe forms without a <code>len</code> argument return a substring from string <code>str</code> starting at position <code>pos</code> . The forms with a <code>len</code> argument return a substring <code>len</code> characters long from string <code>str</code> , starting at position <code>pos</code> . The forms that use <code>FROM</code> are standard SQL syntax. It is also possible to use a negative value for <code>pos</code> . In this case, the beginning of the substring is <code>pos</code> characters from the end of the string, rather than the beginning. A negative value may be used for <code>pos</code> in any of the forms of this function. A value of 0 for <code>pos</code> returns an empty string.\nFor all forms of <link><code>SUBSTRING()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/string-functions.html#function_substring</link> , the position of the first character in the string from which the substring is to be extracted is reckoned as <code>1</code> .\nThis function is multibyte safe. It returns <code>NULL</code> if any of its arguments are <code>NULL</code> .\nIf <code>len</code> is less than 1, the result is the empty string.",
        "Demo": [
            "mysql> SELECT SUBSTRING('Quadratically',5);\n-> 'ratically'\nmysql> SELECT SUBSTRING('foobarbar' FROM 4);\n-> 'barbar'\nmysql> SELECT SUBSTRING('Quadratically',5,6);\n-> 'ratica'\nmysql> SELECT SUBSTRING('Sakila', -3);\n-> 'ila'\nmysql> SELECT SUBSTRING('Sakila', -5, 3);\n-> 'aki'\nmysql> SELECT SUBSTRING('Sakila' FROM -4 FOR 2);\n-> 'ki'"
        ]
    },
    {
        "Name": "SUBSTRING_INDEX",
        "Tree": "(functionCall (scalarFunctionName (functionNameBase SUBSTRING_INDEX)) ( ))",
        "Description": [
            "Return a substring from a string before the specified number of\n      occurrences of the delimiter"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/string-functions.html#function_substring-index"
        ],
        "Detail": "<link><code>SUBSTRING_INDEX( str , delim , count )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/string-functions.html#function_substring-index</link>\nReturns the substring from string <code>str</code> before <code>count</code> occurrences of the delimiter <code>delim</code> . If <code>count</code> is positive, everything to the left of the final delimiter (counting from the left) is returned. If <code>count</code> is negative, everything to the right of the final delimiter (counting from the right) is returned. <link><code>SUBSTRING_INDEX()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/string-functions.html#function_substring-index</link> performs a case-sensitive match when searching for <code>delim</code> .\nThis function is multibyte safe.\n<code>SUBSTRING_INDEX()</code> returns <code>NULL</code> if any of its arguments are <code>NULL</code> .",
        "Demo": [
            "mysql> SELECT SUBSTRING_INDEX('www.mysql.com', '.', 2);\n-> 'www.mysql'\nmysql> SELECT SUBSTRING_INDEX('www.mysql.com', '.', -2);\n-> 'mysql.com'"
        ]
    },
    {
        "Name": "SUBTIME",
        "Tree": "(functionCall (scalarFunctionName (functionNameBase SUBTIME)) ( ))",
        "Description": [
            "Subtract times"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html#function_subtime"
        ],
        "Detail": "<link><code>SUBTIME( expr1 , expr2 )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/date-and-time-functions.html#function_subtime</link>\n<link><code>SUBTIME()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/date-and-time-functions.html#function_subtime</link> returns <code>expr1</code> \u2212 <code>expr2</code> expressed as a value in the same format as <code>expr1</code> . <code>expr1</code> is a time or datetime expression, and <code>expr2</code> is a time expression.\nResolution of this function's return type is performed as it is for the <link><code>ADDTIME()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/date-and-time-functions.html#function_addtime</link> function; see the description of that function for more information.\nThis function returns <code>NULL</code> if <code>expr1</code> or <code>expr2</code> is <code>NULL</code> .",
        "Demo": [
            "mysql> SELECT SUBTIME('2007-12-31 23:59:59.999999','1 1:1:1.000002');\n-> '2007-12-30 22:58:58.999997'\nmysql> SELECT SUBTIME('01:00:00.999999', '02:00:00.999998');\n-> '-00:59:59.999999'"
        ]
    },
    {
        "Name": "SUM",
        "Tree": "(functionCall (aggregateWindowedFunction SUM ( )))",
        "Description": [
            "Return the sum"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/aggregate-functions.html#function_sum"
        ],
        "Detail": "<link><code>SUM([DISTINCT] expr ) [ over_clause ]</code>&LINK&https://dev.mysql.com/doc/refman/8.4/aggregate-functions.html#function_sum</link>\nReturns the sum of <code>expr</code> . If the return set has no rows, <link><code>SUM()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/aggregate-functions.html#function_sum</link> returns <code>NULL</code> . The <code>DISTINCT</code> keyword can be used to sum only the distinct values of <code>expr</code> .\nIf there are no matching rows, or if <code>expr</code> is <code>NULL</code> , <link><code>SUM()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/aggregate-functions.html#function_sum</link> returns <code>NULL</code> .\nThis function executes as a window function if <code>over_clause</code> is present. <code>over_clause</code> is as described in <link>Section 14.20.2, \"Window Function Concepts and Syntax\"&LINK&https://dev.mysql.com/doc/refman/8.4/window-functions-usage.html</link> ; it cannot be used with <code>DISTINCT</code> .",
        "Demo": []
    },
    {
        "Name": "SYSDATE",
        "Tree": "(functionCall (scalarFunctionName SYSDATE) ( ))",
        "Description": [
            "Return the time at which the function executes"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html#function_sysdate"
        ],
        "Detail": "<link><code>SYSDATE([ fsp ])</code>&LINK&https://dev.mysql.com/doc/refman/8.4/date-and-time-functions.html#function_sysdate</link>\nReturns the current date and time as a value in <code>' YYYY-MM-DD hh:mm:ss '</code> or <code>YYYYMMDDhhmmss</code> format, depending on whether the function is used in string or numeric context.\nIf the <code>fsp</code> argument is given to specify a fractional seconds precision from 0 to 6, the return value includes a fractional seconds part of that many digits.\n<link><code>SYSDATE()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/date-and-time-functions.html#function_sysdate</link> returns the time at which it executes. This differs from the behavior for <link><code>NOW()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/date-and-time-functions.html#function_now</link> , which returns a constant time that indicates the time at which the statement began to execute. (Within a stored function or trigger, <link><code>NOW()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/date-and-time-functions.html#function_now</link> returns the time at which the function or triggering statement began to execute.)\nIn addition, the <code>SET TIMESTAMP</code> statement affects the value returned by <link><code>NOW()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/date-and-time-functions.html#function_now</link> but not by <link><code>SYSDATE()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/date-and-time-functions.html#function_sysdate</link> . This means that timestamp settings in the binary log have no effect on invocations of <link><code>SYSDATE()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/date-and-time-functions.html#function_sysdate</link> .\nBecause <link><code>SYSDATE()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/date-and-time-functions.html#function_sysdate</link> can return different values even within the same statement, and is not affected by <code>SET TIMESTAMP</code> , it is nondeterministic and therefore unsafe for replication if statement-based binary logging is used. If that is a problem, you can use row-based logging.\nAlternatively, you can use the <link><code>--sysdate-is-now</code>&LINK&https://dev.mysql.com/doc/refman/8.4/server-options.html#option_mysqld_sysdate-is-now</link> option to cause <link><code>SYSDATE()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/date-and-time-functions.html#function_sysdate</link> to be an alias for <link><code>NOW()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/date-and-time-functions.html#function_now</link> . This works if the option is used on both the replication source server and the replica.\nThe nondeterministic nature of <link><code>SYSDATE()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/date-and-time-functions.html#function_sysdate</link> also means that indexes cannot be used for evaluating expressions that refer to it.",
        "Demo": [
            "mysql> SELECT NOW(), SLEEP(2), NOW();\n+---------------------+----------+---------------------+\n| NOW() | SLEEP(2) | NOW() |\n+---------------------+----------+---------------------+\n| 2006-04-12 13:47:36 | 0 | 2006-04-12 13:47:36 |\n+---------------------+----------+---------------------+\nmysql> SELECT SYSDATE(), SLEEP(2), SYSDATE();\n+---------------------+----------+---------------------+\n| SYSDATE() | SLEEP(2) | SYSDATE() |\n+---------------------+----------+---------------------+\n| 2006-04-12 13:47:44 | 0 | 2006-04-12 13:47:46 |\n+---------------------+----------+---------------------+"
        ]
    },
    {
        "Name": "SYSTEM_USER",
        "Tree": "(functionCall (scalarFunctionName (functionNameBase SYSTEM_USER)) ( ))",
        "Description": [
            "Synonym for USER()"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/information-functions.html#function_system-user"
        ],
        "Detail": "<link><code>SYSTEM_USER()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/information-functions.html#function_system-user</link>\n<link><code>SYSTEM_USER()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/information-functions.html#function_system-user</link> is a synonym for <link><code>USER()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/information-functions.html#function_user</link> .\nNote\nThe <link><code>SYSTEM_USER()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/information-functions.html#function_system-user</link> function is distinct from the <link><code>SYSTEM_USER</code>&LINK&https://dev.mysql.com/doc/refman/8.4/privileges-provided.html#priv_system-user</link> privilege. The former returns the current MySQL account name. The latter distinguishes the system user and regular user account categories (see <link>Section 8.2.11, \"Account Categories\"&LINK&https://dev.mysql.com/doc/refman/8.4/account-categories.html</link> ).\nLike <link><code>USER()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/information-functions.html#function_user</link> , this function can be used for the default value of a <link><code>VARCHAR</code>&LINK&https://dev.mysql.com/doc/refman/8.4/char.html</link> or <link><code>TEXT</code>&LINK&https://dev.mysql.com/doc/refman/8.4/blob.html</link> column, as shown in the following <link><code>CREATE TABLE</code>&LINK&https://dev.mysql.com/doc/refman/8.4/create-table.html</link> statement:",
        "Demo": [
            "CREATE TABLE t (c VARCHAR(288) DEFAULT (SYSTEM_USER()));"
        ]
    },
    {
        "Name": "TAN",
        "Tree": "(functionCall (scalarFunctionName (functionNameBase TAN)) ( ))",
        "Description": [
            "Return the tangent of the argument"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/mathematical-functions.html#function_tan"
        ],
        "Detail": "<link><code>TAN( X )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/mathematical-functions.html#function_tan</link>\nReturns the tangent of <code>X</code> , where <code>X</code> is given in radians. Returns <code>NULL</code> if <code>X</code> is <code>NULL</code> .",
        "Demo": [
            "mysql> SELECT TAN(PI());\n-> -1.2246063538224e-16\nmysql> SELECT TAN(PI()+1);\n-> 1.5574077246549"
        ]
    },
    {
        "Name": "TIME",
        "Tree": "(functionCall (scalarFunctionName (functionNameBase TIME)) ( ))",
        "Description": [
            "Extract the time portion of the expression passed"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html#function_time"
        ],
        "Detail": "<link><code>TIME( expr )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/date-and-time-functions.html#function_time</link>\nExtracts the time part of the time or datetime expression <code>expr</code> and returns it as a string. Returns <code>NULL</code> if <code>expr</code> is <code>NULL</code> .\nThis function is unsafe for statement-based replication. A warning is logged if you use this function when <link><code>binlog_format</code>&LINK&https://dev.mysql.com/doc/refman/8.4/replication-options-binary-log.html#sysvar_binlog_format</link> is set to <code>STATEMENT</code> .",
        "Demo": [
            "mysql> SELECT TIME('2003-12-31 01:02:03');\n-> '01:02:03'\nmysql> SELECT TIME('2003-12-31 01:02:03.000123');\n-> '01:02:03.000123'"
        ]
    },
    {
        "Name": "TIME_FORMAT",
        "Tree": "(functionCall (scalarFunctionName (functionNameBase TIME_FORMAT)) ( ))",
        "Description": [
            "Format as time"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html#function_time-format"
        ],
        "Detail": "<link><code>TIME_FORMAT( time , format )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/date-and-time-functions.html#function_time-format</link>\nThis is used like the <link><code>DATE_FORMAT()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/date-and-time-functions.html#function_date-format</link> function, but the <code>format</code> string may contain format specifiers only for hours, minutes, seconds, and microseconds. Other specifiers produce a <code>NULL</code> or <code>0</code> . <code>TIME_FORMAT()</code> returns <code>NULL</code> if <code>time</code> or <code>format</code> is <code>NULL</code> .\nIf the <code>time</code> value contains an hour part that is greater than <code>23</code> , the <code>%H</code> and <code>%k</code> hour format specifiers produce a value larger than the usual range of <code>0..23</code> . The other hour format specifiers produce the hour value modulo 12.",
        "Demo": [
            "mysql> SELECT TIME_FORMAT('100:00:00', '%H %k %h %I %l');\n-> '100 100 04 04 4'"
        ]
    },
    {
        "Name": "TIME_TO_SEC",
        "Tree": "(functionCall (scalarFunctionName (functionNameBase TIME_TO_SEC)) ( ))",
        "Description": [
            "Return the argument converted to seconds"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html#function_time-to-sec"
        ],
        "Detail": "<link><code>TIME_TO_SEC( time )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/date-and-time-functions.html#function_time-to-sec</link>\nReturns the <code>time</code> argument, converted to seconds. Returns <code>NULL</code> if <code>time</code> is <code>NULL</code> .",
        "Demo": [
            "mysql> SELECT TIME_TO_SEC('22:23:00');\n-> 80580\nmysql> SELECT TIME_TO_SEC('00:39:38');\n-> 2378"
        ]
    },
    {
        "Name": "TIMEDIFF",
        "Tree": "(functionCall (scalarFunctionName (functionNameBase TIMEDIFF)) ( ))",
        "Description": [
            "Subtract time"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html#function_timediff"
        ],
        "Detail": "<link><code>TIMEDIFF( expr1 , expr2 )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/date-and-time-functions.html#function_timediff</link>\n<link><code>TIMEDIFF()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/date-and-time-functions.html#function_timediff</link> returns <code>expr1</code> \u2212 <code>expr2</code> expressed as a time value. <code>expr1</code> and <code>expr2</code> are strings which are converted to <code>TIME</code> or <code>DATETIME</code> expressions; these must be of the same type following conversion. Returns <code>NULL</code> if <code>expr1</code> or <code>expr2</code> is <code>NULL</code> .\nThe result returned by <code>TIMEDIFF()</code> is limited to the range allowed for <link><code>TIME</code>&LINK&https://dev.mysql.com/doc/refman/8.4/time.html</link> values. Alternatively, you can use either of the functions <link><code>TIMESTAMPDIFF()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/date-and-time-functions.html#function_timestampdiff</link> and <link><code>UNIX_TIMESTAMP()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/date-and-time-functions.html#function_unix-timestamp</link> , both of which return integers.",
        "Demo": [
            "mysql> SELECT TIMEDIFF('2000-01-01 00:00:00',\n-> '2000-01-01 00:00:00.000001');\n-> '-00:00:00.000001'\nmysql> SELECT TIMEDIFF('2008-12-31 23:59:59.000001',\n-> '2008-12-30 01:01:01.000002');\n-> '46:58:57.999999'"
        ]
    },
    {
        "Name": "TIMESTAMP",
        "Tree": "(functionCall (scalarFunctionName (functionNameBase TIMESTAMP)) ( ))",
        "Description": [
            "With a single argument, this function returns the date or datetime\n      expression; with two arguments, the sum of the arguments"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html#function_timestamp"
        ],
        "Detail": "<link><code>TIMESTAMP( expr )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/date-and-time-functions.html#function_timestamp</link> , <link><code>TIMESTAMP( expr1 , expr2 )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/date-and-time-functions.html#function_timestamp</link>\nWith a single argument, this function returns the date or datetime expression <code>expr</code> as a datetime value. With two arguments, it adds the time expression <code>expr2</code> to the date or datetime expression <code>expr1</code> and returns the result as a datetime value. Returns <code>NULL</code> if <code>expr</code> , <code>expr1</code> , or <code>expr2</code> is <code>NULL</code> .",
        "Demo": [
            "mysql> SELECT TIMESTAMP('2003-12-31');\n-> '2003-12-31 00:00:00'\nmysql> SELECT TIMESTAMP('2003-12-31 12:00:00','12:00:00');\n-> '2004-01-01 00:00:00'"
        ]
    },
    {
        "Name": "TIMESTAMPADD",
        "Tree": "(functionCall (scalarFunctionName (functionNameBase TIMESTAMPADD)) ( ))",
        "Description": [
            "Add an interval to a datetime expression"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html#function_timestampadd"
        ],
        "Detail": "<link><code>TIMESTAMPADD( unit , interval , datetime_expr )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/date-and-time-functions.html#function_timestampadd</link>\nAdds the integer expression <code>interval</code> to the date or datetime expression <code>datetime_expr</code> . The unit for <code>interval</code> is given by the <code>unit</code> argument, which should be one of the following values: <code>MICROSECOND</code> (microseconds), <code>SECOND</code> , <code>MINUTE</code> , <code>HOUR</code> , <code>DAY</code> , <code>WEEK</code> , <code>MONTH</code> , <code>QUARTER</code> , or <code>YEAR</code> .\nThe <code>unit</code> value may be specified using one of keywords as shown, or with a prefix of <code>SQL_TSI_</code> . For example, <code>DAY</code> and <code>SQL_TSI_DAY</code> both are legal.\nThis function returns <code>NULL</code> if <code>interval</code> or <code>datetime_expr</code> is <code>NULL</code> .\nWhen adding a <code>MONTH</code> interval to a <code>DATE</code> or <code>DATETIME</code> value, and the resulting date includes a day that does not exist in the given month, the day is adjusted to the last day of the month, as shown here:",
        "Demo": [
            "mysql> SELECT TIMESTAMPADD(MINUTE, 1, '2003-01-02');\n-> '2003-01-02 00:01:00'\nmysql> SELECT TIMESTAMPADD(WEEK,1,'2003-01-02');\n-> '2003-01-09'",
            "mysql> SELECT TIMESTAMPADD(MONTH, 1, DATE '2024-03-30') AS t1,\n> TIMESTAMPADD(MONTH, 1, DATE '2024-03-31') AS t2;\n+------------+------------+\n| t1 | t2 |\n+------------+------------+\n| 2024-04-30 | 2024-04-30 |\n+------------+------------+\n1 row in set (0.00 sec)"
        ]
    },
    {
        "Name": "TIMESTAMPDIFF",
        "Tree": "(functionCall (scalarFunctionName (functionNameBase TIMESTAMPDIFF)) ( ))",
        "Description": [
            "Return the difference of two datetime expressions, using the units\n      specified"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html#function_timestampdiff"
        ],
        "Detail": "<link><code>TIMESTAMPDIFF( unit , datetime_expr1 , datetime_expr2 )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/date-and-time-functions.html#function_timestampdiff</link>\nReturns <code>datetime_expr2</code> \u2212 <code>datetime_expr1</code> , where <code>datetime_expr1</code> and <code>datetime_expr2</code> are date or datetime expressions. One expression may be a date and the other a datetime; a date value is treated as a datetime having the time part <code>'00:00:00'</code> where necessary. The unit for the result (an integer) is given by the <code>unit</code> argument. The legal values for <code>unit</code> are the same as those listed in the description of the <link><code>TIMESTAMPADD()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/date-and-time-functions.html#function_timestampadd</link> function.\nThis function returns <code>NULL</code> if <code>datetime_expr1</code> or <code>datetime_expr2</code> is <code>NULL</code> .\nNote\nThe order of the date or datetime arguments for this function is the opposite of that used with the <link><code>TIMESTAMP()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/date-and-time-functions.html#function_timestamp</link> function when invoked with 2 arguments.",
        "Demo": [
            "mysql> SELECT TIMESTAMPDIFF(MONTH,'2003-02-01','2003-05-01');\n-> 3\nmysql> SELECT TIMESTAMPDIFF(YEAR,'2002-05-01','2001-01-01');\n-> -1\nmysql> SELECT TIMESTAMPDIFF(MINUTE,'2003-02-01','2003-05-01 12:05:55');\n-> 128885"
        ]
    },
    {
        "Name": "TO_DAYS",
        "Tree": "(functionCall (scalarFunctionName (functionNameBase TO_DAYS)) ( ))",
        "Description": [
            "Return the date argument converted to days"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html#function_to-days"
        ],
        "Detail": "<link><code>TO_DAYS( date )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/date-and-time-functions.html#function_to-days</link>\nGiven a date <code>date</code> , returns a day number (the number of days since year 0). Returns <code>NULL</code> if <code>date</code> is <code>NULL</code> .\n<link><code>TO_DAYS()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/date-and-time-functions.html#function_to-days</link> is not intended for use with values that precede the advent of the Gregorian calendar (1582), because it does not take into account the days that were lost when the calendar was changed. For dates before 1582 (and possibly a later year in other locales), results from this function are not reliable. See <link>Section 13.2.7, \"What Calendar Is Used By MySQL?\"&LINK&https://dev.mysql.com/doc/refman/8.4/mysql-calendar.html</link> , for details.\nRemember that MySQL converts two-digit year values in dates to four-digit form using the rules in <link>Section 13.2, \"Date and Time Data Types\"&LINK&https://dev.mysql.com/doc/refman/8.4/date-and-time-types.html</link> . For example, <code>'2008-10-07'</code> and <code>'08-10-07'</code> are seen as identical dates:\nIn MySQL, the zero date is defined as <code>'0000-00-00'</code> , even though this date is itself considered invalid. This means that, for <code>'0000-00-00'</code> and <code>'0000-01-01'</code> , <link><code>TO_DAYS()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/date-and-time-functions.html#function_to-days</link> returns the values shown here:\nThis is true whether or not the <link><code>ALLOW_INVALID_DATES</code>&LINK&https://dev.mysql.com/doc/refman/8.4/sql-mode.html#sqlmode_allow_invalid_dates</link> SQL server mode is enabled.",
        "Demo": [
            "mysql> SELECT TO_DAYS(950501);\n-> 728779\nmysql> SELECT TO_DAYS('2007-10-07');\n-> 733321",
            "mysql> SELECT TO_DAYS('2008-10-07'), TO_DAYS('08-10-07');\n-> 733687, 733687",
            "mysql> SELECT TO_DAYS('0000-00-00');\n+-----------------------+\n| to_days('0000-00-00') |\n+-----------------------+\n| NULL |\n+-----------------------+\n1 row in set, 1 warning (0.00 sec)\nmysql> SHOW WARNINGS;\n+---------+------+----------------------------------------+\n| Level | Code | Message |\n+---------+------+----------------------------------------+\n| Warning | 1292 | Incorrect datetime value: '0000-00-00' |\n+---------+------+----------------------------------------+\n1 row in set (0.00 sec)\nmysql> SELECT TO_DAYS('0000-01-01');\n+-----------------------+\n| to_days('0000-01-01') |\n+-----------------------+\n| 1 |\n+-----------------------+\n1 row in set (0.00 sec)"
        ]
    },
    {
        "Name": "TO_SECONDS",
        "Tree": "(functionCall (scalarFunctionName (functionNameBase TO_SECONDS)) ( ))",
        "Description": [
            "Return the date or datetime argument converted to seconds since\n      Year 0"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html#function_to-seconds"
        ],
        "Detail": "<link><code>TO_SECONDS( expr )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/date-and-time-functions.html#function_to-seconds</link>\nGiven a date or datetime <code>expr</code> , returns the number of seconds since the year 0. If <code>expr</code> is not a valid date or datetime value (including <code>NULL</code> ), it returns <code>NULL</code> .\nLike <link><code>TO_DAYS()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/date-and-time-functions.html#function_to-days</link> , <code>TO_SECONDS()</code> is not intended for use with values that precede the advent of the Gregorian calendar (1582), because it does not take into account the days that were lost when the calendar was changed. For dates before 1582 (and possibly a later year in other locales), results from this function are not reliable. See <link>Section 13.2.7, \"What Calendar Is Used By MySQL?\"&LINK&https://dev.mysql.com/doc/refman/8.4/mysql-calendar.html</link> , for details.\nLike <link><code>TO_DAYS()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/date-and-time-functions.html#function_to-days</link> , <code>TO_SECONDS()</code> , converts two-digit year values in dates to four-digit form using the rules in <link>Section 13.2, \"Date and Time Data Types\"&LINK&https://dev.mysql.com/doc/refman/8.4/date-and-time-types.html</link> .\nIn MySQL, the zero date is defined as <code>'0000-00-00'</code> , even though this date is itself considered invalid. This means that, for <code>'0000-00-00'</code> and <code>'0000-01-01'</code> , <link><code>TO_SECONDS()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/date-and-time-functions.html#function_to-seconds</link> returns the values shown here:\nThis is true whether or not the <link><code>ALLOW_INVALID_DATES</code>&LINK&https://dev.mysql.com/doc/refman/8.4/sql-mode.html#sqlmode_allow_invalid_dates</link> SQL server mode is enabled.",
        "Demo": [
            "mysql> SELECT TO_SECONDS(950501);\n-> 62966505600\nmysql> SELECT TO_SECONDS('2009-11-29');\n-> 63426672000\nmysql> SELECT TO_SECONDS('2009-11-29 13:43:32');\n-> 63426721412\nmysql> SELECT TO_SECONDS( NOW() );\n-> 63426721458",
            "mysql> SELECT TO_SECONDS('0000-00-00');\n+--------------------------+\n| TO_SECONDS('0000-00-00') |\n+--------------------------+\n| NULL |\n+--------------------------+\n1 row in set, 1 warning (0.00 sec)\nmysql> SHOW WARNINGS;\n+---------+------+----------------------------------------+\n| Level | Code | Message |\n+---------+------+----------------------------------------+\n| Warning | 1292 | Incorrect datetime value: '0000-00-00' |\n+---------+------+----------------------------------------+\n1 row in set (0.00 sec)\nmysql> SELECT TO_SECONDS('0000-01-01');\n+--------------------------+\n| TO_SECONDS('0000-01-01') |\n+--------------------------+\n| 86400 |\n+--------------------------+\n1 row in set (0.00 sec)"
        ]
    },
    {
        "Name": "TRIM",
        "Tree": "(functionCall (scalarFunctionName TRIM) ( ))",
        "Description": [
            "Remove leading and trailing spaces"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/string-functions.html#function_trim"
        ],
        "Detail": "<link><code>TRIM([{BOTH | LEADING | TRAILING} [ remstr ] FROM] str )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/string-functions.html#function_trim</link> , <link><code>TRIM([ remstr FROM] str )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/string-functions.html#function_trim</link>\nReturns the string <code>str</code> with all <code>remstr</code> prefixes or suffixes removed. If none of the specifiers <code>BOTH</code> , <code>LEADING</code> , or <code>TRAILING</code> is given, <code>BOTH</code> is assumed. <code>remstr</code> is optional and, if not specified, spaces are removed.\nThis function is multibyte safe. It returns <code>NULL</code> if any of its arguments are <code>NULL</code> .",
        "Demo": [
            "mysql> SELECT TRIM(' bar ');\n-> 'bar'\nmysql> SELECT TRIM(LEADING 'x' FROM 'xxxbarxxx');\n-> 'barxxx'\nmysql> SELECT TRIM(BOTH 'x' FROM 'xxxbarxxx');\n-> 'bar'\nmysql> SELECT TRIM(TRAILING 'xyz' FROM 'barxxyz');\n-> 'barx'"
        ]
    },
    {
        "Name": "TRUNCATE",
        "Tree": "(functionCall (fullId (uid (simpleId (keywordsCanBeId TRUNCATE)))) ( ))",
        "Description": [
            "Truncate to specified number of decimal places"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/mathematical-functions.html#function_truncate"
        ],
        "Detail": "<link><code>TRUNCATE( X , D )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/mathematical-functions.html#function_truncate</link>\nReturns the number <code>X</code> , truncated to <code>D</code> decimal places. If <code>D</code> is <code>0</code> , the result has no decimal point or fractional part. <code>D</code> can be negative to cause <code>D</code> digits left of the decimal point of the value <code>X</code> to become zero. If <code>X</code> or <code>D</code> is <code>NULL</code> , the function returns <code>NULL</code> .\nAll numbers are rounded toward zero.\nThe data type returned by <code>TRUNCATE()</code> follows the same rules that determine the return type of the <code>ROUND()</code> function; for details, see the description for <link><code>ROUND()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/mathematical-functions.html#function_round</link> .",
        "Demo": [
            "mysql> SELECT TRUNCATE(1.223,1);\n-> 1.2\nmysql> SELECT TRUNCATE(1.999,1);\n-> 1.9\nmysql> SELECT TRUNCATE(1.999,0);\n-> 1\nmysql> SELECT TRUNCATE(-1.999,1);\n-> -1.9\nmysql> SELECT TRUNCATE(122,-2);\n-> 100\nmysql> SELECT TRUNCATE(10.28*100,0);\n-> 1028"
        ]
    },
    {
        "Name": "UCASE",
        "Tree": "(functionCall (scalarFunctionName (functionNameBase UCASE)) ( ))",
        "Description": [
            "Synonym for UPPER()"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/string-functions.html#function_ucase"
        ],
        "Detail": "<link><code>UCASE( str )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/string-functions.html#function_ucase</link>\n<link><code>UCASE()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/string-functions.html#function_ucase</link> is a synonym for <link><code>UPPER()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/string-functions.html#function_upper</link> .\n<code>UCASE()</code> used within views is rewritten as <code>UPPER()</code> .",
        "Demo": []
    },
    {
        "Name": "UNCOMPRESS",
        "Tree": "(functionCall (scalarFunctionName (functionNameBase UNCOMPRESS)) ( ))",
        "Description": [
            "Uncompress a string compressed"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/encryption-functions.html#function_uncompress"
        ],
        "Detail": "<link><code>UNCOMPRESS( string_to_uncompress )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/encryption-functions.html#function_uncompress</link>\nUncompresses a string compressed by the <link><code>COMPRESS()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/encryption-functions.html#function_compress</link> function. If the argument is not a compressed value, the result is <code>NULL</code> ; if <code>string_to_uncompress</code> is <code>NULL</code> , the result is also <code>NULL</code> . This function requires MySQL to have been compiled with a compression library such as <code>zlib</code> . Otherwise, the return value is always <code>NULL</code> .",
        "Demo": [
            "mysql> SELECT UNCOMPRESS(COMPRESS('any string'));\n-> 'any string'\nmysql> SELECT UNCOMPRESS('any string');\n-> NULL"
        ]
    },
    {
        "Name": "UNCOMPRESSED_LENGTH",
        "Tree": "(functionCall (scalarFunctionName (functionNameBase UNCOMPRESSED_LENGTH)) ( ))",
        "Description": [
            "Return the length of a string before compression"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/encryption-functions.html#function_uncompressed-length"
        ],
        "Detail": "<link><code>UNCOMPRESSED_LENGTH( compressed_string )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/encryption-functions.html#function_uncompressed-length</link>\nReturns the length that the compressed string had before being compressed. Returns <code>NULL</code> if <code>compressed_string</code> is <code>NULL</code> .",
        "Demo": [
            "mysql> SELECT UNCOMPRESSED_LENGTH(COMPRESS(REPEAT('a',30)));\n-> 30"
        ]
    },
    {
        "Name": "UNHEX",
        "Tree": "(functionCall (scalarFunctionName (functionNameBase UNHEX)) ( ))",
        "Description": [
            "Return a string containing hex representation of a number"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/string-functions.html#function_unhex"
        ],
        "Detail": "<link><code>UNHEX( str )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/string-functions.html#function_unhex</link>\nFor a string argument <code>str</code> , <link><code>UNHEX( str )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/string-functions.html#function_unhex</link> interprets each pair of characters in the argument as a hexadecimal number and converts it to the byte represented by the number. The return value is a binary string.\nThe characters in the argument string must be legal hexadecimal digits: <code>'0'</code> .. <code>'9'</code> , <code>'A'</code> .. <code>'F'</code> , <code>'a'</code> .. <code>'f'</code> . If the argument contains any nonhexadecimal digits, or is itself <code>NULL</code> , the result is <code>NULL</code> :\nA <code>NULL</code> result can also occur if the argument to <link><code>UNHEX()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/string-functions.html#function_unhex</link> is a <link><code>BINARY</code>&LINK&https://dev.mysql.com/doc/refman/8.4/binary-varbinary.html</link> column, because values are padded with <code>0x00</code> bytes when stored but those bytes are not stripped on retrieval. For example, <code>'41'</code> is stored into a <code>CHAR(3)</code> column as <code>'41 '</code> and retrieved as <code>'41'</code> (with the trailing pad space stripped), so <link><code>UNHEX()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/string-functions.html#function_unhex</link> for the column value returns <code>X'41'</code> . By contrast, <code>'41'</code> is stored into a <code>BINARY(3)</code> column as <code>'41\\0'</code> and retrieved as <code>'41\\0'</code> (with the trailing pad <code>0x00</code> byte not stripped). <code>'\\0'</code> is not a legal hexadecimal digit, so <link><code>UNHEX()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/string-functions.html#function_unhex</link> for the column value returns <code>NULL</code> .\nFor a numeric argument <code>N</code> , the inverse of <link><code>HEX( N )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/string-functions.html#function_hex</link> is not performed by <link><code>UNHEX()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/string-functions.html#function_unhex</link> . Use <link><code>CONV(HEX( N ),16,10)</code>&LINK&https://dev.mysql.com/doc/refman/8.4/mathematical-functions.html#function_conv</link> instead. See the description of <link><code>HEX()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/string-functions.html#function_hex</link> .\nIf <link><code>UNHEX()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/string-functions.html#function_unhex</link> is invoked from within the <link>mysql&LINK&https://dev.mysql.com/doc/refman/8.4/mysql.html</link> client, binary strings display using hexadecimal notation, depending on the value of the <link><code>--binary-as-hex</code>&LINK&https://dev.mysql.com/doc/refman/8.4/mysql-command-options.html#option_mysql_binary-as-hex</link> . For more information about that option, see <link>Section 6.5.1, \"mysql \u2014 The MySQL Command-Line Client\"&LINK&https://dev.mysql.com/doc/refman/8.4/mysql.html</link> .",
        "Demo": [
            "mysql> SELECT UNHEX('4D7953514C');\n-> 'MySQL'\nmysql> SELECT X'4D7953514C';\n-> 'MySQL'\nmysql> SELECT UNHEX(HEX('string'));\n-> 'string'\nmysql> SELECT HEX(UNHEX('1267'));\n-> '1267'",
            "mysql> SELECT UNHEX('GG');\n+-------------+\n| UNHEX('GG') |\n+-------------+\n| NULL |\n+-------------+\nmysql> SELECT UNHEX(NULL);\n+-------------+\n| UNHEX(NULL) |\n+-------------+\n| NULL |\n+-------------+"
        ]
    },
    {
        "Name": "UNIX_TIMESTAMP",
        "Tree": "(functionCall (scalarFunctionName (functionNameBase UNIX_TIMESTAMP)) ( ))",
        "Description": [
            "Return a Unix timestamp"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html#function_unix-timestamp"
        ],
        "Detail": "<link><code>UNIX_TIMESTAMP([ date ])</code>&LINK&https://dev.mysql.com/doc/refman/8.4/date-and-time-functions.html#function_unix-timestamp</link>\nIf <link><code>UNIX_TIMESTAMP()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/date-and-time-functions.html#function_unix-timestamp</link> is called with no <code>date</code> argument, it returns a Unix timestamp representing seconds since <code>'1970-01-01 00:00:00'</code> UTC.\nIf <link><code>UNIX_TIMESTAMP()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/date-and-time-functions.html#function_unix-timestamp</link> is called with a <code>date</code> argument, it returns the value of the argument as seconds since <code>'1970-01-01 00:00:00'</code> UTC. The server interprets <code>date</code> as a value in the session time zone and converts it to an internal Unix timestamp value in UTC. (Clients can set the session time zone as described in <link>Section 7.1.15, \"MySQL Server Time Zone Support\"&LINK&https://dev.mysql.com/doc/refman/8.4/time-zone-support.html</link> .) The <code>date</code> argument may be a <link><code>DATE</code>&LINK&https://dev.mysql.com/doc/refman/8.4/datetime.html</link> , <link><code>DATETIME</code>&LINK&https://dev.mysql.com/doc/refman/8.4/datetime.html</link> , or <link><code>TIMESTAMP</code>&LINK&https://dev.mysql.com/doc/refman/8.4/datetime.html</link> string, or a number in <code>YYMMDD</code> , <code>YYMMDDhhmmss</code> , <code>YYYYMMDD</code> , or <code>YYYYMMDDhhmmss</code> format. If the argument includes a time part, it may optionally include a fractional seconds part.\nThe return value is an integer if no argument is given or the argument does not include a fractional seconds part, or <link><code>DECIMAL</code>&LINK&https://dev.mysql.com/doc/refman/8.4/fixed-point-types.html</link> if an argument is given that includes a fractional seconds part.\nWhen the <code>date</code> argument is a <link><code>TIMESTAMP</code>&LINK&https://dev.mysql.com/doc/refman/8.4/datetime.html</link> column, <link><code>UNIX_TIMESTAMP()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/date-and-time-functions.html#function_unix-timestamp</link> returns the internal timestamp value directly, with no implicit \" string-to-Unix-timestamp \" conversion.\nThe valid range of argument values is the same as for the <link><code>TIMESTAMP</code>&LINK&https://dev.mysql.com/doc/refman/8.4/datetime.html</link> data type: <code>'1970-01-01 00:00:01.000000'</code> UTC to <code>'2038-01-19 03:14:07.999999'</code> UTC for 32-bit platforms; for MySQL running on 64-bit platforms, the valid range of argument values for <code>UNIX_TIMESTAMP()</code> is <code>'1970-01-01 00:00:01.000000'</code> UTC to <code>'3001-01-19 03:14:07.999999'</code> UTC (corresponding to 32536771199.999999 seconds).\nRegardless of MySQL version or platform architecture, if you pass an out-of-range date to <link><code>UNIX_TIMESTAMP()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/date-and-time-functions.html#function_unix-timestamp</link> , it returns <code>0</code> . If <code>date</code> is <code>NULL</code> , it returns <code>NULL</code> .\nIf you use <link><code>UNIX_TIMESTAMP()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/date-and-time-functions.html#function_unix-timestamp</link> and <link><code>FROM_UNIXTIME()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/date-and-time-functions.html#function_from-unixtime</link> to convert between values in a non-UTC time zone and Unix timestamp values, the conversion is lossy because the mapping is not one-to-one in both directions. For example, due to conventions for local time zone changes such as Daylight Saving Time (DST), it is possible for <link><code>UNIX_TIMESTAMP()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/date-and-time-functions.html#function_unix-timestamp</link> to map two values that are distinct in a non-UTC time zone to the same Unix timestamp value. <link><code>FROM_UNIXTIME()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/date-and-time-functions.html#function_from-unixtime</link> maps that value back to only one of the original values. Here is an example, using values that are distinct in the <code>MET</code> time zone:\nNote\nTo use named time zones such as <code>'MET'</code> or <code>'Europe/Amsterdam'</code> , the time zone tables must be properly set up. For instructions, see <link>Section 7.1.15, \"MySQL Server Time Zone Support\"&LINK&https://dev.mysql.com/doc/refman/8.4/time-zone-support.html</link> .\nIf you want to subtract <link><code>UNIX_TIMESTAMP()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/date-and-time-functions.html#function_unix-timestamp</link> columns, you might want to cast them to signed integers. See <link>Section 14.10, \"Cast Functions and Operators\"&LINK&https://dev.mysql.com/doc/refman/8.4/cast-functions.html</link> .",
        "Demo": [
            "mysql> SELECT UNIX_TIMESTAMP();\n-> 1447431666\nmysql> SELECT UNIX_TIMESTAMP('2015-11-13 10:20:19');\n-> 1447431619\nmysql> SELECT UNIX_TIMESTAMP('2015-11-13 10:20:19.012');\n-> 1447431619.012",
            "mysql> SET time_zone = 'MET';\nmysql> SELECT UNIX_TIMESTAMP('2005-03-27 03:00:00');\n+---------------------------------------+\n| UNIX_TIMESTAMP('2005-03-27 03:00:00') |\n+---------------------------------------+\n| 1111885200 |\n+---------------------------------------+\nmysql> SELECT UNIX_TIMESTAMP('2005-03-27 02:00:00');\n+---------------------------------------+\n| UNIX_TIMESTAMP('2005-03-27 02:00:00') |\n+---------------------------------------+\n| 1111885200 |\n+---------------------------------------+\nmysql> SELECT FROM_UNIXTIME(1111885200);\n+---------------------------+\n| FROM_UNIXTIME(1111885200) |\n+---------------------------+\n| 2005-03-27 03:00:00 |\n+---------------------------+"
        ]
    },
    {
        "Name": "UpdateXML",
        "Tree": "(functionCall (scalarFunctionName (functionNameBase UpdateXML)) ( ))",
        "Description": [
            "Return replaced XML fragment"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/xml-functions.html#function_updatexml"
        ],
        "Detail": "<link><code>UpdateXML( xml_target , xpath_expr , new_xml )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/xml-functions.html#function_updatexml</link>\nThis function replaces a single portion of a given fragment of XML markup <code>xml_target</code> with a new XML fragment <code>new_xml</code> , and then returns the changed XML. The portion of <code>xml_target</code> that is replaced matches an XPath expression <code>xpath_expr</code> supplied by the user.\nIf no expression matching <code>xpath_expr</code> is found, or if multiple matches are found, the function returns the original <code>xml_target</code> XML fragment. All three arguments should be strings. If any of the arguments to <code>UpdateXML()</code> are <code>NULL</code> , the function returns <code>NULL</code> .",
        "Demo": [
            "mysql> SELECT\n-> UpdateXML('<a><b>ccc</b><d></d></a>', '/a', '<e>fff</e>') AS val1,\n-> UpdateXML('<a><b>ccc</b><d></d></a>', '/b', '<e>fff</e>') AS val2,\n-> UpdateXML('<a><b>ccc</b><d></d></a>', '//b', '<e>fff</e>') AS val3,\n-> UpdateXML('<a><b>ccc</b><d></d></a>', '/a/d', '<e>fff</e>') AS val4,\n-> UpdateXML('<a><d></d><b>ccc</b><d></d></a>', '/a/d', '<e>fff</e>') AS val5\n-> \\G\n*************************** 1. row ***************************\nval1: <e>fff</e>\nval2: <a><b>ccc</b><d></d></a>\nval3: <a><e>fff</e><d></d></a>\nval4: <a><b>ccc</b><e>fff</e></a>\nval5: <a><d></d><b>ccc</b><d></d></a>"
        ]
    },
    {
        "Name": "UPPER",
        "Tree": "(functionCall (scalarFunctionName (functionNameBase UPPER)) ( ))",
        "Description": [
            "Convert to uppercase"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/string-functions.html#function_upper"
        ],
        "Detail": "<link><code>UPPER( str )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/string-functions.html#function_upper</link>\nReturns the string <code>str</code> with all characters changed to uppercase according to the current character set mapping, or <code>NULL</code> if <code>str</code> is <code>NULL</code> . The default character set is <code>utf8mb4</code> .\nSee the description of <link><code>LOWER()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/string-functions.html#function_lower</link> for information that also applies to <link><code>UPPER()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/string-functions.html#function_upper</link> . This included information about how to perform lettercase conversion of binary strings ( <link><code>BINARY</code>&LINK&https://dev.mysql.com/doc/refman/8.4/binary-varbinary.html</link> , <link><code>VARBINARY</code>&LINK&https://dev.mysql.com/doc/refman/8.4/binary-varbinary.html</link> , <link><code>BLOB</code>&LINK&https://dev.mysql.com/doc/refman/8.4/blob.html</link> ) for which these functions are ineffective, and information about case folding for Unicode character sets.\nThis function is multibyte safe.\n<code>UCASE()</code> used within views is rewritten as <code>UPPER()</code> .",
        "Demo": [
            "mysql> SELECT UPPER('Hej');\n-> 'HEJ'"
        ]
    },
    {
        "Name": "USER",
        "Tree": "(functionCall (fullId (uid (simpleId (keywordsCanBeId USER)))) ( ))",
        "Description": [
            "The user name and host name provided by the client"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/information-functions.html#function_user"
        ],
        "Detail": "<link><code>USER()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/information-functions.html#function_user</link>\nReturns the current MySQL user name and host name as a string in the <code>utf8mb3</code> character set.\nThe value indicates the user name you specified when connecting to the server, and the client host from which you connected. The value can be different from that of <link><code>CURRENT_USER()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/information-functions.html#function_current-user</link> .\nThis function can be used for the default value of a <link><code>VARCHAR</code>&LINK&https://dev.mysql.com/doc/refman/8.4/char.html</link> or <link><code>TEXT</code>&LINK&https://dev.mysql.com/doc/refman/8.4/blob.html</link> column, as shown in the following <link><code>CREATE TABLE</code>&LINK&https://dev.mysql.com/doc/refman/8.4/create-table.html</link> statement:",
        "Demo": [
            "mysql> SELECT USER();\n-> 'davida@localhost'",
            "CREATE TABLE t (c VARCHAR(288) DEFAULT (USER()));"
        ]
    },
    {
        "Name": "UTC_DATE",
        "Tree": "(functionCall (scalarFunctionName UTC_DATE) ( ))",
        "Description": [
            "Return the current UTC date"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html#function_utc-date"
        ],
        "Detail": "<link><code>UTC_DATE</code>&LINK&https://dev.mysql.com/doc/refman/8.4/date-and-time-functions.html#function_utc-date</link> , <link><code>UTC_DATE()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/date-and-time-functions.html#function_utc-date</link>\nReturns the current UTC date as a value in <code>' YYYY-MM-DD '</code> or <code>YYYYMMDD</code> format, depending on whether the function is used in string or numeric context.",
        "Demo": [
            "mysql> SELECT UTC_DATE(), UTC_DATE() + 0;\n-> '2003-08-14', 20030814"
        ]
    },
    {
        "Name": "UTC_TIME",
        "Tree": "(functionCall (scalarFunctionName UTC_TIME) ( ))",
        "Description": [
            "Return the current UTC time"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html#function_utc-time"
        ],
        "Detail": "<link><code>UTC_TIME</code>&LINK&https://dev.mysql.com/doc/refman/8.4/date-and-time-functions.html#function_utc-time</link> , <link><code>UTC_TIME([ fsp ])</code>&LINK&https://dev.mysql.com/doc/refman/8.4/date-and-time-functions.html#function_utc-time</link>\nReturns the current UTC time as a value in <code>'hh:mm:ss'</code> or <code>hhmmss</code> format, depending on whether the function is used in string or numeric context.\nIf the <code>fsp</code> argument is given to specify a fractional seconds precision from 0 to 6, the return value includes a fractional seconds part of that many digits.",
        "Demo": [
            "mysql> SELECT UTC_TIME(), UTC_TIME() + 0;\n-> '18:07:53', 180753.000000"
        ]
    },
    {
        "Name": "UTC_TIMESTAMP",
        "Tree": "(functionCall (scalarFunctionName UTC_TIMESTAMP) ( ))",
        "Description": [
            "Return the current UTC date and time"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html#function_utc-timestamp"
        ],
        "Detail": "<link><code>UTC_TIMESTAMP</code>&LINK&https://dev.mysql.com/doc/refman/8.4/date-and-time-functions.html#function_utc-timestamp</link> , <link><code>UTC_TIMESTAMP([ fsp ])</code>&LINK&https://dev.mysql.com/doc/refman/8.4/date-and-time-functions.html#function_utc-timestamp</link>\nReturns the current UTC date and time as a value in <code>' YYYY-MM-DD hh:mm:ss '</code> or <code>YYYYMMDDhhmmss</code> format, depending on whether the function is used in string or numeric context.\nIf the <code>fsp</code> argument is given to specify a fractional seconds precision from 0 to 6, the return value includes a fractional seconds part of that many digits.",
        "Demo": [
            "mysql> SELECT UTC_TIMESTAMP(), UTC_TIMESTAMP() + 0;\n-> '2003-08-14 18:08:04', 20030814180804.000000"
        ]
    },
    {
        "Name": "UUID",
        "Tree": "(functionCall (scalarFunctionName (functionNameBase UUID)) ( ))",
        "Description": [
            "Return a Universal Unique Identifier (UUID)"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/miscellaneous-functions.html#function_uuid"
        ],
        "Detail": "<link><code>UUID()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/miscellaneous-functions.html#function_uuid</link>\nReturns a Universal Unique Identifier (UUID) generated according to RFC 4122, \" A Universally Unique IDentifier (UUID) URN Namespace \" ( <link>http://www.ietf.org/rfc/rfc4122.txt&LINK&http://www.ietf.org/rfc/rfc4122.txt</link> ).\nA UUID is designed as a number that is globally unique in space and time. Two calls to <link><code>UUID()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/miscellaneous-functions.html#function_uuid</link> are expected to generate two different values, even if these calls are performed on two separate devices not connected to each other.\nWarning\nAlthough <link><code>UUID()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/miscellaneous-functions.html#function_uuid</link> values are intended to be unique, they are not necessarily unguessable or unpredictable. If unpredictability is required, UUID values should be generated some other way.\n<link><code>UUID()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/miscellaneous-functions.html#function_uuid</link> returns a value that conforms to UUID version 1 as described in RFC 4122. The value is a 128-bit number represented as a <code>utf8mb3</code> string of five hexadecimal numbers in <code>aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee</code> format:\nThe first three numbers are generated from the low, middle, and high parts of a timestamp. The high part also includes the UUID version number.\nThe fourth number preserves temporal uniqueness in case the timestamp value loses monotonicity (for example, due to daylight saving time).\nThe fifth number is an IEEE 802 node number that provides spatial uniqueness. A random number is substituted if the latter is not available (for example, because the host device has no Ethernet card, or it is unknown how to find the hardware address of an interface on the host operating system). In this case, spatial uniqueness cannot be guaranteed. Nevertheless, a collision should have very low probability.\nThe MAC address of an interface is taken into account only on FreeBSD, Linux, and Windows. On other operating systems, MySQL uses a randomly generated 48-bit number.\nTo convert between string and binary UUID values, use the <link><code>UUID_TO_BIN()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/miscellaneous-functions.html#function_uuid-to-bin</link> and <link><code>BIN_TO_UUID()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/miscellaneous-functions.html#function_bin-to-uuid</link> functions. To check whether a string is a valid UUID value, use the <link><code>IS_UUID()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/miscellaneous-functions.html#function_is-uuid</link> function.\nThis function is unsafe for statement-based replication. A warning is logged if you use this function when <link><code>binlog_format</code>&LINK&https://dev.mysql.com/doc/refman/8.4/replication-options-binary-log.html#sysvar_binlog_format</link> is set to <code>STATEMENT</code> .",
        "Demo": [
            "mysql> SELECT UUID();\n-> '6ccd780c-baba-1026-9564-5b8c656024db'"
        ]
    },
    {
        "Name": "UUID_SHORT",
        "Tree": "(functionCall (scalarFunctionName (functionNameBase UUID_SHORT)) ( ))",
        "Description": [
            "Return an integer-valued universal identifier"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/miscellaneous-functions.html#function_uuid-short"
        ],
        "Detail": "<link><code>UUID_SHORT()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/miscellaneous-functions.html#function_uuid-short</link>\nReturns a \" short \" universal identifier as a 64-bit unsigned integer. Values returned by <link><code>UUID_SHORT()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/miscellaneous-functions.html#function_uuid-short</link> differ from the string-format 128-bit identifiers returned by the <link><code>UUID()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/miscellaneous-functions.html#function_uuid</link> function and have different uniqueness properties. The value of <link><code>UUID_SHORT()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/miscellaneous-functions.html#function_uuid-short</link> is guaranteed to be unique if the following conditions hold:\nThe <link><code>server_id</code>&LINK&https://dev.mysql.com/doc/refman/8.4/replication-options.html#sysvar_server_id</link> value of the current server is between 0 and 255 and is unique among your set of source and replica servers\nYou do not set back the system time for your server host between <link>mysqld&LINK&https://dev.mysql.com/doc/refman/8.4/mysqld.html</link> restarts\nYou invoke <link><code>UUID_SHORT()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/miscellaneous-functions.html#function_uuid-short</link> on average fewer than 16 million times per second between <link>mysqld&LINK&https://dev.mysql.com/doc/refman/8.4/mysqld.html</link> restarts\nThe <link><code>UUID_SHORT()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/miscellaneous-functions.html#function_uuid-short</link> return value is constructed this way:\nNote\n<link><code>UUID_SHORT()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/miscellaneous-functions.html#function_uuid-short</link> does not work with statement-based replication.",
        "Demo": [
            "mysql> SELECT UUID_SHORT();\n-> 92395783831158784"
        ]
    },
    {
        "Name": "UUID_TO_BIN",
        "Tree": "(functionCall (fullId (uid (simpleId UUID_TO_BIN))) ( ))",
        "Description": [
            "Convert string UUID to binary"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/miscellaneous-functions.html#function_uuid-to-bin"
        ],
        "Detail": "<link><code>UUID_TO_BIN( string_uuid )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/miscellaneous-functions.html#function_uuid-to-bin</link> , <link><code>UUID_TO_BIN( string_uuid , swap_flag )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/miscellaneous-functions.html#function_uuid-to-bin</link>\nConverts a string UUID to a binary UUID and returns the result. (The <link><code>IS_UUID()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/miscellaneous-functions.html#function_is-uuid</link> function description lists the permitted string UUID formats.) The return binary UUID is a <link><code>VARBINARY(16)</code>&LINK&https://dev.mysql.com/doc/refman/8.4/binary-varbinary.html</link> value. If the UUID argument is <code>NULL</code> , the return value is <code>NULL</code> . If any argument is invalid, an error occurs.\n<link><code>UUID_TO_BIN()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/miscellaneous-functions.html#function_uuid-to-bin</link> takes one or two arguments:\nThe one-argument form takes a string UUID value. The binary result is in the same order as the string argument.\nThe two-argument form takes a string UUID value and a flag value:\nIf <code>swap_flag</code> is 0, the two-argument form is equivalent to the one-argument form. The binary result is in the same order as the string argument.\nIf <code>swap_flag</code> is 1, the format of the return value differs: The time-low and time-high parts (the first and third groups of hexadecimal digits, respectively) are swapped. This moves the more rapidly varying part to the right and can improve indexing efficiency if the result is stored in an indexed column.\nTime-part swapping assumes the use of UUID version 1 values, such as are generated by the <link><code>UUID()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/miscellaneous-functions.html#function_uuid</link> function. For UUID values produced by other means that do not follow version 1 format, time-part swapping provides no benefit. For details about version 1 format, see the <link><code>UUID()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/miscellaneous-functions.html#function_uuid</link> function description.\nSuppose that you have the following string UUID value:\nTo convert the string UUID to binary with or without time-part swapping, use <link><code>UUID_TO_BIN()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/miscellaneous-functions.html#function_uuid-to-bin</link> :\nTo convert a binary UUID returned by <link><code>UUID_TO_BIN()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/miscellaneous-functions.html#function_uuid-to-bin</link> to a string UUID, use <link><code>BIN_TO_UUID()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/miscellaneous-functions.html#function_bin-to-uuid</link> . If you produce a binary UUID by calling <link><code>UUID_TO_BIN()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/miscellaneous-functions.html#function_uuid-to-bin</link> with a second argument of 1 to swap time parts, you should also pass a second argument of 1 to <link><code>BIN_TO_UUID()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/miscellaneous-functions.html#function_bin-to-uuid</link> to unswap the time parts when converting the binary UUID back to a string UUID:\nIf the use of time-part swapping is not the same for the conversion in both directions, the original UUID is not recovered properly:\nIf <link><code>UUID_TO_BIN()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/miscellaneous-functions.html#function_uuid-to-bin</link> is invoked from within the <link>mysql&LINK&https://dev.mysql.com/doc/refman/8.4/mysql.html</link> client, binary strings display using hexadecimal notation, depending on the value of the <link><code>--binary-as-hex</code>&LINK&https://dev.mysql.com/doc/refman/8.4/mysql-command-options.html#option_mysql_binary-as-hex</link> . For more information about that option, see <link>Section 6.5.1, \"mysql \u2014 The MySQL Command-Line Client\"&LINK&https://dev.mysql.com/doc/refman/8.4/mysql.html</link> .",
        "Demo": [
            "mysql> SELECT HEX(UUID_TO_BIN(@uuid));\n+----------------------------------+\n| HEX(UUID_TO_BIN(@uuid)) |\n+----------------------------------+\n| 6CCD780CBABA102695645B8C656024DB |\n+----------------------------------+\nmysql> SELECT HEX(UUID_TO_BIN(@uuid, 0));\n+----------------------------------+\n| HEX(UUID_TO_BIN(@uuid, 0)) |\n+----------------------------------+\n| 6CCD780CBABA102695645B8C656024DB |\n+----------------------------------+\nmysql> SELECT HEX(UUID_TO_BIN(@uuid, 1));\n+----------------------------------+\n| HEX(UUID_TO_BIN(@uuid, 1)) |\n+----------------------------------+\n| 1026BABA6CCD780C95645B8C656024DB |\n+----------------------------------+",
            "mysql> SELECT BIN_TO_UUID(UUID_TO_BIN(@uuid));\n+--------------------------------------+\n| BIN_TO_UUID(UUID_TO_BIN(@uuid)) |\n+--------------------------------------+\n| 6ccd780c-baba-1026-9564-5b8c656024db |\n+--------------------------------------+\nmysql> SELECT BIN_TO_UUID(UUID_TO_BIN(@uuid,0),0);\n+--------------------------------------+\n| BIN_TO_UUID(UUID_TO_BIN(@uuid,0),0) |\n+--------------------------------------+\n| 6ccd780c-baba-1026-9564-5b8c656024db |\n+--------------------------------------+\nmysql> SELECT BIN_TO_UUID(UUID_TO_BIN(@uuid,1),1);\n+--------------------------------------+\n| BIN_TO_UUID(UUID_TO_BIN(@uuid,1),1) |\n+--------------------------------------+\n| 6ccd780c-baba-1026-9564-5b8c656024db |\n+--------------------------------------+",
            "mysql> SELECT BIN_TO_UUID(UUID_TO_BIN(@uuid,0),1);\n+--------------------------------------+\n| BIN_TO_UUID(UUID_TO_BIN(@uuid,0),1) |\n+--------------------------------------+\n| baba1026-780c-6ccd-9564-5b8c656024db |\n+--------------------------------------+\nmysql> SELECT BIN_TO_UUID(UUID_TO_BIN(@uuid,1),0);\n+--------------------------------------+\n| BIN_TO_UUID(UUID_TO_BIN(@uuid,1),0) |\n+--------------------------------------+\n| 1026baba-6ccd-780c-9564-5b8c656024db |\n+--------------------------------------+"
        ]
    },
    {
        "Name": "VALIDATE_PASSWORD_STRENGTH",
        "Tree": "(functionCall (scalarFunctionName (functionNameBase VALIDATE_PASSWORD_STRENGTH)) ( ))",
        "Description": [
            "Determine strength of password"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/encryption-functions.html#function_validate-password-strength"
        ],
        "Detail": "<link><code>VALIDATE_PASSWORD_STRENGTH( str )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/encryption-functions.html#function_validate-password-strength</link>\nGiven an argument representing a plaintext password, this function returns an integer to indicate how strong the password is, or <code>NULL</code> if the argument is <code>NULL</code> . The return value ranges from 0 (weak) to 100 (strong).\nPassword assessment by <link><code>VALIDATE_PASSWORD_STRENGTH()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/encryption-functions.html#function_validate-password-strength</link> is done by the <code>validate_password</code> component. If that component is not installed, the function always returns 0. For information about installing <code>validate_password</code> , see <link>Section 8.4.3, \"The Password Validation Component\"&LINK&https://dev.mysql.com/doc/refman/8.4/validate-password.html</link> . To examine or configure the parameters that affect password testing, check or set the system variables implemented by <code>validate_password</code> . See <link>Section 8.4.3.2, \"Password Validation Options and Variables\"&LINK&https://dev.mysql.com/doc/refman/8.4/validate-password-options-variables.html</link> .\nThe password is subjected to increasingly strict tests and the return value reflects which tests were satisfied, as shown in the following table. In addition, if the <link><code>validate_password.check_user_name</code>&LINK&https://dev.mysql.com/doc/refman/8.4/validate-password-options-variables.html#sysvar_validate_password.check_user_name</link> system variable is enabled and the password matches the user name, <link><code>VALIDATE_PASSWORD_STRENGTH()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/encryption-functions.html#function_validate-password-strength</link> returns 0 regardless of how other <code>validate_password</code> system variables are set.\n<table><thead><tr><th>Password Test</th>\n<th>Return Value</th></tr></thead>\n<tbody><tr><td>Length < 4</td>\n<td>0</td></tr>\n<tr><td>Length \u2265 4 and <\n<link><code>validate_password.length</code>&LINK&https://dev.mysql.com/doc/refman/8.4/validate-password-options-variables.html#sysvar_validate_password.length</link></td>\n<td>25</td></tr>\n<tr><td>Satisfies policy 1 (\n<code>LOW</code>\n)</td>\n<td>50</td></tr>\n<tr><td>Satisfies policy 2 (\n<code>MEDIUM</code>\n)</td>\n<td>75</td></tr>\n<tr><td>Satisfies policy 3 (\n<code>STRONG</code>\n)</td>\n<td>100</td></tr></tbody></table>",
        "Demo": []
    },
    {
        "Name": "VAR_POP",
        "Tree": "(functionCall (aggregateWindowedFunction VAR_POP ( )))",
        "Description": [
            "Return the population standard variance"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/aggregate-functions.html#function_var-pop"
        ],
        "Detail": "<link><code>VAR_POP( expr ) [ over_clause ]</code>&LINK&https://dev.mysql.com/doc/refman/8.4/aggregate-functions.html#function_var-pop</link>\nReturns the population standard variance of <code>expr</code> . It considers rows as the whole population, not as a sample, so it has the number of rows as the denominator. You can also use <link><code>VARIANCE()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/aggregate-functions.html#function_variance</link> , which is equivalent but is not standard SQL.\nIf there are no matching rows, or if <code>expr</code> is <code>NULL</code> , <link><code>VAR_POP()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/aggregate-functions.html#function_var-pop</link> returns <code>NULL</code> .\nThis function executes as a window function if <code>over_clause</code> is present. <code>over_clause</code> is as described in <link>Section 14.20.2, \"Window Function Concepts and Syntax\"&LINK&https://dev.mysql.com/doc/refman/8.4/window-functions-usage.html</link> .",
        "Demo": []
    },
    {
        "Name": "VAR_SAMP",
        "Tree": "(functionCall (aggregateWindowedFunction VAR_SAMP ( )))",
        "Description": [
            "Return the sample variance"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/aggregate-functions.html#function_var-samp"
        ],
        "Detail": "<link><code>VAR_SAMP( expr ) [ over_clause ]</code>&LINK&https://dev.mysql.com/doc/refman/8.4/aggregate-functions.html#function_var-samp</link>\nReturns the sample variance of <code>expr</code> . That is, the denominator is the number of rows minus one.\nIf there are no matching rows, or if <code>expr</code> is <code>NULL</code> , <link><code>VAR_SAMP()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/aggregate-functions.html#function_var-samp</link> returns <code>NULL</code> .\nThis function executes as a window function if <code>over_clause</code> is present. <code>over_clause</code> is as described in <link>Section 14.20.2, \"Window Function Concepts and Syntax\"&LINK&https://dev.mysql.com/doc/refman/8.4/window-functions-usage.html</link> .",
        "Demo": []
    },
    {
        "Name": "VARIANCE",
        "Tree": "(functionCall (aggregateWindowedFunction VARIANCE ( )))",
        "Description": [
            "Return the population standard variance"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/aggregate-functions.html#function_variance"
        ],
        "Detail": "<link><code>VARIANCE( expr ) [ over_clause ]</code>&LINK&https://dev.mysql.com/doc/refman/8.4/aggregate-functions.html#function_variance</link>\nReturns the population standard variance of <code>expr</code> . <link><code>VARIANCE()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/aggregate-functions.html#function_variance</link> is a synonym for the standard SQL function <link><code>VAR_POP()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/aggregate-functions.html#function_var-pop</link> , provided as a MySQL extension.\nIf there are no matching rows, or if <code>expr</code> is <code>NULL</code> , <link><code>VARIANCE()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/aggregate-functions.html#function_variance</link> returns <code>NULL</code> .\nThis function executes as a window function if <code>over_clause</code> is present. <code>over_clause</code> is as described in <link>Section 14.20.2, \"Window Function Concepts and Syntax\"&LINK&https://dev.mysql.com/doc/refman/8.4/window-functions-usage.html</link> .",
        "Demo": []
    },
    {
        "Name": "VERSION",
        "Tree": "(functionCall (scalarFunctionName (functionNameBase VERSION)) ( ))",
        "Description": [
            "Return a string that indicates the MySQL server version"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/information-functions.html#function_version"
        ],
        "Detail": "<link><code>VERSION()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/information-functions.html#function_version</link>\nReturns a string that indicates the MySQL server version. The string uses the <code>utf8mb3</code> character set. The value might have a suffix in addition to the version number. See the description of the <link><code>version</code>&LINK&https://dev.mysql.com/doc/refman/8.4/server-system-variables.html#sysvar_version</link> system variable in <link>Section 7.1.8, \"Server System Variables\"&LINK&https://dev.mysql.com/doc/refman/8.4/server-system-variables.html</link> .\nThis function is unsafe for statement-based replication. A warning is logged if you use this function when <link><code>binlog_format</code>&LINK&https://dev.mysql.com/doc/refman/8.4/replication-options-binary-log.html#sysvar_binlog_format</link> is set to <code>STATEMENT</code> .",
        "Demo": [
            "mysql> SELECT VERSION();\n-> '8.4.2-standard'"
        ]
    },
    {
        "Name": "WAIT_FOR_EXECUTED_GTID_SET",
        "Tree": "(functionCall (fullId (uid (simpleId WAIT_FOR_EXECUTED_GTID_SET))) ( ))",
        "Description": [
            "Wait until the given GTIDs have executed on the replica."
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/gtid-functions.html#function_wait-for-executed-gtid-set"
        ],
        "Detail": "<link><code>WAIT_FOR_EXECUTED_GTID_SET( gtid_set [, timeout ])</code>&LINK&https://dev.mysql.com/doc/refman/8.4/gtid-functions.html#function_wait-for-executed-gtid-set</link>\nWait until the server has applied all of the transactions whose global transaction identifiers are contained in <code>gtid_set</code> ; that is, until the condition GTID_SUBSET( <code>gtid_subset</code> , <code>@@GLOBAL.gtid_executed</code> ) holds. See <link>Section 19.1.3.1, \"GTID Format and Storage\"&LINK&https://dev.mysql.com/doc/refman/8.4/replication-gtids-concepts.html</link> for a definition of GTID sets.\nIf a timeout is specified, and <code>timeout</code> seconds elapse before all of the transactions in the GTID set have been applied, the function stops waiting. <code>timeout</code> is optional, and the default timeout is 0 seconds, in which case the function always waits until all of the transactions in the GTID set have been applied. <code>timeout</code> must be greater than or equal to 0; when running in strict SQL mode, a negative <code>timeout</code> value is immediately rejected with an error ( <link><code>ER_WRONG_ARGUMENTS</code>&LINK&https://dev.mysql.com/doc/mysql-errors/8.4/en/server-error-reference.html#error_er_wrong_arguments</link> ); otherwise the function returns <code>NULL</code> , and raises a warning.\n<code>WAIT_FOR_EXECUTED_GTID_SET()</code> monitors all the GTIDs that are applied on the server, including transactions that arrive from all replication channels and user clients. It does not take into account whether replication channels have been started or stopped.\nFor more information, see <link>Section 19.1.3, \"Replication with Global Transaction Identifiers\"&LINK&https://dev.mysql.com/doc/refman/8.4/replication-gtids.html</link> .\nGTID sets used with this function are represented as strings and so must be quoted as shown in the following example:\nFor a syntax description for GTID sets, see <link>Section 19.1.3.1, \"GTID Format and Storage\"&LINK&https://dev.mysql.com/doc/refman/8.4/replication-gtids-concepts.html</link> .\nFor <code>WAIT_FOR_EXECUTED_GTID_SET()</code> , the return value is the state of the query, where 0 represents success, and 1 represents timeout. Any other failures generate an error.\n<link><code>gtid_mode</code>&LINK&https://dev.mysql.com/doc/refman/8.4/replication-options-gtids.html#sysvar_gtid_mode</link> cannot be changed to OFF while any client is using this function to wait for GTIDs to be applied.",
        "Demo": [
            "mysql> SELECT WAIT_FOR_EXECUTED_GTID_SET('3E11FA47-71CA-11E1-9E33-C80AA9429562:1-5');\n-> 0"
        ]
    },
    {
        "Name": "WEEK",
        "Tree": "(functionCall (scalarFunctionName (functionNameBase WEEK)) ( ))",
        "Description": [
            "Return the week number"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html#function_week"
        ],
        "Detail": "<link><code>WEEK( date [, mode ])</code>&LINK&https://dev.mysql.com/doc/refman/8.4/date-and-time-functions.html#function_week</link>\nThis function returns the week number for <code>date</code> . The two-argument form of <link><code>WEEK()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/date-and-time-functions.html#function_week</link> enables you to specify whether the week starts on Sunday or Monday and whether the return value should be in the range from <code>0</code> to <code>53</code> or from <code>1</code> to <code>53</code> . If the <code>mode</code> argument is omitted, the value of the <link><code>default_week_format</code>&LINK&https://dev.mysql.com/doc/refman/8.4/server-system-variables.html#sysvar_default_week_format</link> system variable is used. See <link>Section 7.1.8, \"Server System Variables\"&LINK&https://dev.mysql.com/doc/refman/8.4/server-system-variables.html</link> . For a <code>NULL</code> date value, the function returns <code>NULL</code> .\nThe following table describes how the <code>mode</code> argument works.\n<table><thead><tr><th>Mode</th>\n<th>First day of week</th>\n<th>Range</th>\n<th>Week 1 is the first week \u2026</th></tr></thead>\n<tbody><tr><th>0</th>\n<td>Sunday</td>\n<td>0-53</td>\n<td>with a Sunday in this year</td></tr>\n<tr><th>1</th>\n<td>Monday</td>\n<td>0-53</td>\n<td>with 4 or more days this year</td></tr>\n<tr><th>2</th>\n<td>Sunday</td>\n<td>1-53</td>\n<td>with a Sunday in this year</td></tr>\n<tr><th>3</th>\n<td>Monday</td>\n<td>1-53</td>\n<td>with 4 or more days this year</td></tr>\n<tr><th>4</th>\n<td>Sunday</td>\n<td>0-53</td>\n<td>with 4 or more days this year</td></tr>\n<tr><th>5</th>\n<td>Monday</td>\n<td>0-53</td>\n<td>with a Monday in this year</td></tr>\n<tr><th>6</th>\n<td>Sunday</td>\n<td>1-53</td>\n<td>with 4 or more days this year</td></tr>\n<tr><th>7</th>\n<td>Monday</td>\n<td>1-53</td>\n<td>with a Monday in this year</td></tr></tbody></table>\nFor <code>mode</code> values with a meaning of \" with 4 or more days this year, \" weeks are numbered according to ISO 8601:1988:\nIf the week containing January 1 has 4 or more days in the new year, it is week 1.\nOtherwise, it is the last week of the previous year, and the next week is week 1.\nIf a date falls in the last week of the previous year, MySQL returns <code>0</code> if you do not use <code>2</code> , <code>3</code> , <code>6</code> , or <code>7</code> as the optional <code>mode</code> argument:\nOne might argue that <link><code>WEEK()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/date-and-time-functions.html#function_week</link> should return <code>52</code> because the given date actually occurs in the 52nd week of 1999. <link><code>WEEK()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/date-and-time-functions.html#function_week</link> returns <code>0</code> instead so that the return value is \" the week number in the given year. \" This makes use of the <link><code>WEEK()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/date-and-time-functions.html#function_week</link> function reliable when combined with other functions that extract a date part from a date.\nIf you prefer a result evaluated with respect to the year that contains the first day of the week for the given date, use <code>0</code> , <code>2</code> , <code>5</code> , or <code>7</code> as the optional <code>mode</code> argument.\nAlternatively, use the <link><code>YEARWEEK()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/date-and-time-functions.html#function_yearweek</link> function:",
        "Demo": [
            "mysql> SELECT WEEK('2008-02-20');\n-> 7\nmysql> SELECT WEEK('2008-02-20',0);\n-> 7\nmysql> SELECT WEEK('2008-02-20',1);\n-> 8\nmysql> SELECT WEEK('2008-12-31',1);\n-> 53",
            "mysql> SELECT YEAR('2000-01-01'), WEEK('2000-01-01',0);\n-> 2000, 0",
            "mysql> SELECT WEEK('2000-01-01',2);\n-> 52",
            "mysql> SELECT YEARWEEK('2000-01-01');\n-> 199952\nmysql> SELECT MID(YEARWEEK('2000-01-01'),5,2);\n-> '52'"
        ]
    },
    {
        "Name": "WEEKDAY",
        "Tree": "(functionCall (scalarFunctionName (functionNameBase WEEKDAY)) ( ))",
        "Description": [
            "Return the weekday index"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html#function_weekday"
        ],
        "Detail": "<link><code>WEEKDAY( date )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/date-and-time-functions.html#function_weekday</link>\nReturns the weekday index for <code>date</code> ( <code>0</code> = Monday, <code>1</code> = Tuesday, \u2026 <code>6</code> = Sunday). Returns <code>NULL</code> if <code>date</code> is <code>NULL</code> .",
        "Demo": [
            "mysql> SELECT WEEKDAY('2008-02-03 22:23:00');\n-> 6\nmysql> SELECT WEEKDAY('2007-11-06');\n-> 1"
        ]
    },
    {
        "Name": "WEEKOFYEAR",
        "Tree": "(functionCall (scalarFunctionName (functionNameBase WEEKOFYEAR)) ( ))",
        "Description": [
            "Return the calendar week of the date (1-53)"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html#function_weekofyear"
        ],
        "Detail": "<link><code>WEEKOFYEAR( date )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/date-and-time-functions.html#function_weekofyear</link>\nReturns the calendar week of the date as a number in the range from <code>1</code> to <code>53</code> . Returns <code>NULL</code> if <code>date</code> is <code>NULL</code> .\n<link><code>WEEKOFYEAR()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/date-and-time-functions.html#function_weekofyear</link> is a compatibility function that is equivalent to <link><code>WEEK( date ,3)</code>&LINK&https://dev.mysql.com/doc/refman/8.4/date-and-time-functions.html#function_week</link> .",
        "Demo": [
            "mysql> SELECT WEEKOFYEAR('2008-02-20');\n-> 8"
        ]
    },
    {
        "Name": "WEIGHT_STRING",
        "Tree": "(functionCall (specificFunction WEIGHT_STRING ( )))",
        "Description": [
            "Return the weight string for a string"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/string-functions.html#function_weight-string"
        ],
        "Detail": "<link><code>WEIGHT_STRING( str [AS {CHAR|BINARY}( N )] [ flags ])</code>&LINK&https://dev.mysql.com/doc/refman/8.4/string-functions.html#function_weight-string</link>\nThis function returns the weight string for the input string. The return value is a binary string that represents the comparison and sorting value of the string, or <code>NULL</code> if the argument is <code>NULL</code> . It has these properties:\nIf <link><code>WEIGHT_STRING( str1 )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/string-functions.html#function_weight-string</link> = <link><code>WEIGHT_STRING( str2 )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/string-functions.html#function_weight-string</link> , then <code>str1 = str2</code> ( <code>str1</code> and <code>str2</code> are considered equal)\nIf <link><code>WEIGHT_STRING( str1 )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/string-functions.html#function_weight-string</link> < <link><code>WEIGHT_STRING( str2 )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/string-functions.html#function_weight-string</link> , then <code>str1 < str2</code> ( <code>str1</code> sorts before <code>str2</code> )\n<link><code>WEIGHT_STRING()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/string-functions.html#function_weight-string</link> is a debugging function intended for internal use. Its behavior can change without notice between MySQL versions. It can be used for testing and debugging of collations, especially if you are adding a new collation. See <link>Section 12.14, \"Adding a Collation to a Character Set\"&LINK&https://dev.mysql.com/doc/refman/8.4/adding-collation.html</link> .\nThis list briefly summarizes the arguments. More details are given in the discussion following the list.\n<code>str</code> : The input string expression.\n<code>AS</code> clause: Optional; cast the input string to a given type and length.\n<code>flags</code> : Optional; unused.\nThe input string, <code>str</code> , is a string expression. If the input is a nonbinary (character) string such as a <link><code>CHAR</code>&LINK&https://dev.mysql.com/doc/refman/8.4/char.html</link> , <link><code>VARCHAR</code>&LINK&https://dev.mysql.com/doc/refman/8.4/char.html</link> , or <link><code>TEXT</code>&LINK&https://dev.mysql.com/doc/refman/8.4/blob.html</link> value, the return value contains the collation weights for the string. If the input is a binary (byte) string such as a <link><code>BINARY</code>&LINK&https://dev.mysql.com/doc/refman/8.4/binary-varbinary.html</link> , <link><code>VARBINARY</code>&LINK&https://dev.mysql.com/doc/refman/8.4/binary-varbinary.html</link> , or <link><code>BLOB</code>&LINK&https://dev.mysql.com/doc/refman/8.4/blob.html</link> value, the return value is the same as the input (the weight for each byte in a binary string is the byte value). If the input is <code>NULL</code> , <link><code>WEIGHT_STRING()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/string-functions.html#function_weight-string</link> returns <code>NULL</code> .\nExamples:\nThe preceding examples use <link><code>HEX()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/string-functions.html#function_hex</link> to display the <link><code>WEIGHT_STRING()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/string-functions.html#function_weight-string</link> result. Because the result is a binary value, <link><code>HEX()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/string-functions.html#function_hex</link> can be especially useful when the result contains nonprinting values, to display it in printable form:\nFor non- <code>NULL</code> return values, the data type of the value is <link><code>VARBINARY</code>&LINK&https://dev.mysql.com/doc/refman/8.4/binary-varbinary.html</link> if its length is within the maximum length for <link><code>VARBINARY</code>&LINK&https://dev.mysql.com/doc/refman/8.4/binary-varbinary.html</link> , otherwise the data type is <link><code>BLOB</code>&LINK&https://dev.mysql.com/doc/refman/8.4/blob.html</link> .\nThe <code>AS</code> clause may be given to cast the input string to a nonbinary or binary string and to force it to a given length:\n<code>AS CHAR( N )</code> casts the string to a nonbinary string and pads it on the right with spaces to a length of <code>N</code> characters. <code>N</code> must be at least 1. If <code>N</code> is less than the length of the input string, the string is truncated to <code>N</code> characters. No warning occurs for truncation.\n<code>AS BINARY( N )</code> is similar but casts the string to a binary string, <code>N</code> is measured in bytes (not characters), and padding uses <code>0x00</code> bytes (not spaces).\nThe <code>flags</code> clause currently is unused.\nIf <link><code>WEIGHT_STRING()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/string-functions.html#function_weight-string</link> is invoked from within the <link>mysql&LINK&https://dev.mysql.com/doc/refman/8.4/mysql.html</link> client, binary strings display using hexadecimal notation, depending on the value of the <link><code>--binary-as-hex</code>&LINK&https://dev.mysql.com/doc/refman/8.4/mysql-command-options.html#option_mysql_binary-as-hex</link> . For more information about that option, see <link>Section 6.5.1, \"mysql \u2014 The MySQL Command-Line Client\"&LINK&https://dev.mysql.com/doc/refman/8.4/mysql.html</link> .",
        "Demo": [
            "mysql> SET @s = _utf8mb4 'AB' COLLATE utf8mb4_0900_ai_ci;\nmysql> SELECT @s, HEX(@s), HEX(WEIGHT_STRING(@s));\n+------+---------+------------------------+\n| @s | HEX(@s) | HEX(WEIGHT_STRING(@s)) |\n+------+---------+------------------------+\n| AB | 4142 | 1C471C60 |\n+------+---------+------------------------+",
            "mysql> SET @s = _utf8mb4 'ab' COLLATE utf8mb4_0900_ai_ci;\nmysql> SELECT @s, HEX(@s), HEX(WEIGHT_STRING(@s));\n+------+---------+------------------------+\n| @s | HEX(@s) | HEX(WEIGHT_STRING(@s)) |\n+------+---------+------------------------+\n| ab | 6162 | 1C471C60 |\n+------+---------+------------------------+",
            "mysql> SET @s = CAST('AB' AS BINARY);\nmysql> SELECT @s, HEX(@s), HEX(WEIGHT_STRING(@s));\n+------+---------+------------------------+\n| @s | HEX(@s) | HEX(WEIGHT_STRING(@s)) |\n+------+---------+------------------------+\n| AB | 4142 | 4142 |\n+------+---------+------------------------+",
            "mysql> SET @s = CAST('ab' AS BINARY);\nmysql> SELECT @s, HEX(@s), HEX(WEIGHT_STRING(@s));\n+------+---------+------------------------+\n| @s | HEX(@s) | HEX(WEIGHT_STRING(@s)) |\n+------+---------+------------------------+\n| ab | 6162 | 6162 |\n+------+---------+------------------------+",
            "mysql> SET @s = CONVERT(X'C39F' USING utf8mb4) COLLATE utf8mb4_czech_ci;\nmysql> SELECT HEX(WEIGHT_STRING(@s));\n+------------------------+\n| HEX(WEIGHT_STRING(@s)) |\n+------------------------+\n| 0FEA0FEA |\n+------------------------+",
            "mysql> SET NAMES 'latin1';\nmysql> SELECT HEX(WEIGHT_STRING('ab' AS CHAR(4)));\n+-------------------------------------+\n| HEX(WEIGHT_STRING('ab' AS CHAR(4))) |\n+-------------------------------------+\n| 41422020 |\n+-------------------------------------+\nmysql> SET NAMES 'utf8mb4';\nmysql> SELECT HEX(WEIGHT_STRING('ab' AS CHAR(4)));\n+-------------------------------------+\n| HEX(WEIGHT_STRING('ab' AS CHAR(4))) |\n+-------------------------------------+\n| 1C471C60 |\n+-------------------------------------+",
            "mysql> SELECT HEX(WEIGHT_STRING('ab' AS BINARY(4)));\n+---------------------------------------+\n| HEX(WEIGHT_STRING('ab' AS BINARY(4))) |\n+---------------------------------------+\n| 61620000 |\n+---------------------------------------+"
        ]
    },
    {
        "Name": "YEAR",
        "Tree": "(functionCall (scalarFunctionName (functionNameBase YEAR)) ( ))",
        "Description": [
            "Return the year"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html#function_year"
        ],
        "Detail": "<link><code>YEAR( date )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/date-and-time-functions.html#function_year</link>\nReturns the year for <code>date</code> , in the range <code>1000</code> to <code>9999</code> , or <code>0</code> for the \" zero \" date. Returns <code>NULL</code> if <code>date</code> is <code>NULL</code> .",
        "Demo": [
            "mysql> SELECT YEAR('1987-01-01');\n-> 1987"
        ]
    },
    {
        "Name": "YEARWEEK",
        "Tree": "(functionCall (scalarFunctionName (functionNameBase YEARWEEK)) ( ))",
        "Description": [
            "Return the year and week"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.4/en/date-and-time-functions.html#function_yearweek"
        ],
        "Detail": "<link><code>YEARWEEK( date )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/date-and-time-functions.html#function_yearweek</link> , <link><code>YEARWEEK( date , mode )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/date-and-time-functions.html#function_yearweek</link>\nReturns year and week for a date. The year in the result may be different from the year in the date argument for the first and the last week of the year. Returns <code>NULL</code> if <code>date</code> is <code>NULL</code> .\nThe <code>mode</code> argument works exactly like the <code>mode</code> argument to <link><code>WEEK()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/date-and-time-functions.html#function_week</link> . For the single-argument syntax, a <code>mode</code> value of 0 is used. Unlike <link><code>WEEK()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/date-and-time-functions.html#function_week</link> , the value of <link><code>default_week_format</code>&LINK&https://dev.mysql.com/doc/refman/8.4/server-system-variables.html#sysvar_default_week_format</link> does not influence <link><code>YEARWEEK()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/date-and-time-functions.html#function_yearweek</link> .\nThe week number is different from what the <link><code>WEEK()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/date-and-time-functions.html#function_week</link> function would return ( <code>0</code> ) for optional arguments <code>0</code> or <code>1</code> , as <link><code>WEEK()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/date-and-time-functions.html#function_week</link> then returns the week in the context of the given year.",
        "Demo": [
            "mysql> SELECT YEARWEEK('1987-01-01');\n-> 198652"
        ]
    },
    {
        "Name": "CAST",
        "Tree": "(specificFunction CAST ( ))",
        "Description": [
            "Cast a value as a certain type"
        ],
        "Link": [
            "https://dev.mysql.com/doc/refman/8.0/en/cast-functions.html"
        ],
        "Detail": "<link><code>CAST( expr AS type [ARRAY])</code>&LINK&https://dev.mysql.com/doc/refman/8.4/cast-functions.html#function_cast</link>\n<link><code>CAST( timestamp_value AT TIME ZONE timezone_specifier AS DATETIME[( precision )])</code>&LINK&https://dev.mysql.com/doc/refman/8.4/cast-functions.html#function_cast</link>\n<code>timezone_specifier</code> : [INTERVAL] '+00:00' | 'UTC'\nWith <link><code>CAST( expr AS type</code>&LINK&https://dev.mysql.com/doc/refman/8.4/cast-functions.html#function_cast</link> syntax, the <link><code>CAST()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/cast-functions.html#function_cast</link> function takes an expression of any type and produces a result value of the specified type. This operation may also be expressed as <link><code>CONVERT( expr , type )</code>&LINK&https://dev.mysql.com/doc/refman/8.4/cast-functions.html#function_convert</link> , which is equivalent. If <code>expr</code> is <code>NULL</code> , <code>CAST()</code> returns <code>NULL</code> .\nThese <code>type</code> values are permitted:\n<code>BINARY[( N )]</code>\nProduces a string with the <link><code>VARBINARY</code>&LINK&https://dev.mysql.com/doc/refman/8.4/binary-varbinary.html</link> data type, except that when the expression <code>expr</code> is empty (zero length), the result type is <code>BINARY(0)</code> . If the optional length <code>N</code> is given, <code>BINARY( N )</code> causes the cast to use no more than <code>N</code> bytes of the argument. Values shorter than <code>N</code> bytes are padded with <code>0x00</code> bytes to a length of <code>N</code> . If the optional length <code>N</code> is not given, MySQL calculates the maximum length from the expression. If the supplied or calculated length is greater than an internal threshold, the result type is <code>BLOB</code> . If the length is still too long, the result type is <code>LONGBLOB</code> .\nFor a description of how casting to <code>BINARY</code> affects comparisons, see <link>Section 13.3.3, \"The BINARY and VARBINARY Types\"&LINK&https://dev.mysql.com/doc/refman/8.4/binary-varbinary.html</link> .\n<code>CHAR[( N )] [ charset_info ]</code>\nProduces a string with the <link><code>VARCHAR</code>&LINK&https://dev.mysql.com/doc/refman/8.4/char.html</link> data type, unless the expression <code>expr</code> is empty (zero length), in which case the result type is <code>CHAR(0)</code> . If the optional length <code>N</code> is given, <code>CHAR( N )</code> causes the cast to use no more than <code>N</code> characters of the argument. No padding occurs for values shorter than <code>N</code> characters. If the optional length <code>N</code> is not given, MySQL calculates the maximum length from the expression. If the supplied or calculated length is greater than an internal threshold, the result type is <code>TEXT</code> . If the length is still too long, the result type is <code>LONGTEXT</code> .\nWith no <code>charset_info</code> clause, <code>CHAR</code> produces a string with the default character set. To specify the character set explicitly, these <code>charset_info</code> values are permitted:\n<code>CHARACTER SET charset_name</code> : Produces a string with the given character set.\n<code>ASCII</code> : Shorthand for <code>CHARACTER SET latin1</code> .\n<code>UNICODE</code> : Shorthand for <code>CHARACTER SET ucs2</code> .\nIn all cases, the string has the character set default collation.\n<code>DATE</code>\nProduces a <link><code>DATE</code>&LINK&https://dev.mysql.com/doc/refman/8.4/datetime.html</link> value.\n<code>DATETIME[( M )]</code>\nProduces a <link><code>DATETIME</code>&LINK&https://dev.mysql.com/doc/refman/8.4/datetime.html</link> value. If the optional <code>M</code> value is given, it specifies the fractional seconds precision.\n<code>DECIMAL[( M [, D ])]</code>\nProduces a <link><code>DECIMAL</code>&LINK&https://dev.mysql.com/doc/refman/8.4/fixed-point-types.html</link> value. If the optional <code>M</code> and <code>D</code> values are given, they specify the maximum number of digits (the precision) and the number of digits following the decimal point (the scale). If <code>D</code> is omitted, 0 is assumed. If <code>M</code> is omitted, 10 is assumed.\n<code>DOUBLE</code>\nProduces a <link><code>DOUBLE</code>&LINK&https://dev.mysql.com/doc/refman/8.4/floating-point-types.html</link> result.\n<code>FLOAT[( p )]</code>\nIf the precision <code>p</code> is not specified, produces a result of type <link><code>FLOAT</code>&LINK&https://dev.mysql.com/doc/refman/8.4/floating-point-types.html</link> . If <code>p</code> is provided and 0 <= < <code>p</code> <= 24, the result is of type <code>FLOAT</code> . If 25 <= <code>p</code> <= 53, the result is of type <link><code>DOUBLE</code>&LINK&https://dev.mysql.com/doc/refman/8.4/floating-point-types.html</link> . If <code>p</code> < 0 or <code>p</code> > 53, an error is returned.\n<code>JSON</code>\nProduces a <link><code>JSON</code>&LINK&https://dev.mysql.com/doc/refman/8.4/json.html</link> value. For details on the rules for conversion of values between <link><code>JSON</code>&LINK&https://dev.mysql.com/doc/refman/8.4/json.html</link> and other types, see <link>Comparison and Ordering of JSON Values&LINK&https://dev.mysql.com/doc/refman/8.4/json.html#json-comparison</link> .\n<code>NCHAR[( N )]</code>\nLike <code>CHAR</code> , but produces a string with the national character set. See <link>Section 12.3.7, \"The National Character Set\"&LINK&https://dev.mysql.com/doc/refman/8.4/charset-national.html</link> .\nUnlike <code>CHAR</code> , <code>NCHAR</code> does not permit trailing character set information to be specified.\n<code>REAL</code>\nProduces a result of type <link><code>REAL</code>&LINK&https://dev.mysql.com/doc/refman/8.4/floating-point-types.html</link> . This is actually <code>FLOAT</code> if the <link><code>REAL_AS_FLOAT</code>&LINK&https://dev.mysql.com/doc/refman/8.4/sql-mode.html#sqlmode_real_as_float</link> SQL mode is enabled; otherwise the result is of type <code>DOUBLE</code> .\n<code>SIGNED [INTEGER]</code>\nProduces a signed <link><code>BIGINT</code>&LINK&https://dev.mysql.com/doc/refman/8.4/integer-types.html</link> value.\n<code>spatial_type</code>\n<link><code>CAST()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/cast-functions.html#function_cast</link> and <link><code>CONVERT()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/cast-functions.html#function_convert</link> support casting geometry values from one spatial type to another, for certain combinations of spatial types. For details, see <link>Cast Operations on Spatial Types&LINK&https://dev.mysql.com/doc/refman/8.4/cast-functions.html#cast-spatial-types</link> .\n<code>TIME[( M )]</code>\nProduces a <link><code>TIME</code>&LINK&https://dev.mysql.com/doc/refman/8.4/time.html</link> value. If the optional <code>M</code> value is given, it specifies the fractional seconds precision.\n<code>UNSIGNED [INTEGER]</code>\nProduces an unsigned <link><code>BIGINT</code>&LINK&https://dev.mysql.com/doc/refman/8.4/integer-types.html</link> value.\n<code>YEAR</code>\nProduces a <link><code>YEAR</code>&LINK&https://dev.mysql.com/doc/refman/8.4/year.html</link> value. These rules govern conversion to <code>YEAR</code> as follows:\nFor a four-digit number in the range 1901-2155 inclusive, or for a string which can be interpreted as a four-digit number in this range, return the corresponding <code>YEAR</code> value.\nFor a number consisting of one or two digits, or for a string which can be interpreted as such a number, return a <code>YEAR</code> value as follows:\nIf the number is in the range 1-69 inclusive, add 2000 and return the sum.\nIf the number is in the range 70-99 inclusive, add 1900 and return the sum.\nFor a string which evaluates to 0, return 2000.\nFor the number 0, return 0.\nFor a <link><code>DATE</code>&LINK&https://dev.mysql.com/doc/refman/8.4/datetime.html</link> , <link><code>DATETIME</code>&LINK&https://dev.mysql.com/doc/refman/8.4/datetime.html</link> , or <link><code>TIMESTAMP</code>&LINK&https://dev.mysql.com/doc/refman/8.4/datetime.html</link> value, return the <code>YEAR</code> portion of the value. For a <link><code>TIME</code>&LINK&https://dev.mysql.com/doc/refman/8.4/time.html</link> value, return the current year.\nIf you do not specify the type of a <code>TIME</code> argument, you may get a different result from what you expect, as shown here:\nIf the argument is of type <link><code>DECIMAL</code>&LINK&https://dev.mysql.com/doc/refman/8.4/fixed-point-types.html</link> , <link><code>DOUBLE</code>&LINK&https://dev.mysql.com/doc/refman/8.4/floating-point-types.html</link> , <link><code>DECIMAL</code>&LINK&https://dev.mysql.com/doc/refman/8.4/fixed-point-types.html</link> , or <link><code>REAL</code>&LINK&https://dev.mysql.com/doc/refman/8.4/floating-point-types.html</link> , round the value to the nearest integer, then attempt to cast the value to <code>YEAR</code> using the rules for integer values, as shown here:\nAn argument of type <link><code>GEOMETRY</code>&LINK&https://dev.mysql.com/doc/refman/8.4/spatial-type-overview.html</link> cannot be converted to <link><code>YEAR</code>&LINK&https://dev.mysql.com/doc/refman/8.4/year.html</link> .\nFor a value that cannot be successfully converted to <code>YEAR</code> , return <code>NULL</code> .\nA string value containing non-numeric characters which must be truncated prior to conversion raises a warning, as shown here:\n<link><code>InnoDB</code>&LINK&https://dev.mysql.com/doc/refman/8.4/innodb-storage-engine.html</link> allows the use of an additional <code>ARRAY</code> keyword for creating a multi-valued index on a <link><code>JSON</code>&LINK&https://dev.mysql.com/doc/refman/8.4/json.html</link> array as part of <link><code>CREATE INDEX</code>&LINK&https://dev.mysql.com/doc/refman/8.4/create-index.html</link> , <link><code>CREATE TABLE</code>&LINK&https://dev.mysql.com/doc/refman/8.4/create-table.html</link> , and <link><code>ALTER TABLE</code>&LINK&https://dev.mysql.com/doc/refman/8.4/alter-table.html</link> statements. <code>ARRAY</code> is not supported except when used to create a multi-valued index in one of these statements, in which case it is required. The column being indexed must be a column of type <code>JSON</code> . With <code>ARRAY</code> , the <code>type</code> following the <code>AS</code> keyword may specify any of the types supported by <code>CAST()</code> , with the exceptions of <code>BINARY</code> , <code>JSON</code> , and <code>YEAR</code> . For syntax information and examples, as well as other relevant information, see <link>Multi-Valued Indexes&LINK&https://dev.mysql.com/doc/refman/8.4/create-index.html#create-index-multi-valued</link> .\nNote\n<link><code>CONVERT()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/cast-functions.html#function_convert</link> , unlike <link><code>CAST()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/cast-functions.html#function_cast</link> , does not support multi-valued index creation or the <code>ARRAY</code> keyword.\n<code>CAST()</code> supports retrieval of a <link><code>TIMESTAMP</code>&LINK&https://dev.mysql.com/doc/refman/8.4/datetime.html</link> value as being in UTC, using the <code>AT TIMEZONE</code> operator. The only supported time zone is UTC; this can be specified as either of <code>'+00:00'</code> or <code>'UTC'</code> . The only return type supported by this syntax is <code>DATETIME</code> , with an optional precision specifier in the range of 0 to 6, inclusive.\n<code>TIMESTAMP</code> values that use timezone offsets are also supported.\nIf you use <code>'UTC'</code> as the time zone specifier with this form of <code>CAST()</code> , and the server raises an error such as Unknown or incorrect time zone: 'UTC' , you may need to install the MySQL time zone tables (see <link>Populating the Time Zone Tables&LINK&https://dev.mysql.com/doc/refman/8.4/time-zone-support.html#time-zone-installation</link> ).\n<code>AT TIME ZONE</code> does not support the <code>ARRAY</code> keyword, and is not supported by the <link><code>CONVERT()</code>&LINK&https://dev.mysql.com/doc/refman/8.4/cast-functions.html#function_convert</link> function.",
        "Demo": [
            "mysql> SELECT CAST(\"11:35:00\" AS YEAR), CAST(TIME \"11:35:00\" AS YEAR);\n+--------------------------+-------------------------------+\n| CAST(\"11:35:00\" AS YEAR) | CAST(TIME \"11:35:00\" AS YEAR) |\n+--------------------------+-------------------------------+\n| 2011 | 2021 |\n+--------------------------+-------------------------------+",
            "mysql> SELECT CAST(1944.35 AS YEAR), CAST(1944.50 AS YEAR);\n+-----------------------+-----------------------+\n| CAST(1944.35 AS YEAR) | CAST(1944.50 AS YEAR) |\n+-----------------------+-----------------------+\n| 1944 | 1945 |\n+-----------------------+-----------------------+\nmysql> SELECT CAST(66.35 AS YEAR), CAST(66.50 AS YEAR);\n+---------------------+---------------------+\n| CAST(66.35 AS YEAR) | CAST(66.50 AS YEAR) |\n+---------------------+---------------------+\n| 2066 | 2067 |\n+---------------------+---------------------+",
            "mysql> SELECT CAST(\"1979aaa\" AS YEAR);\n+-------------------------+\n| CAST(\"1979aaa\" AS YEAR) |\n+-------------------------+\n| 1979 |\n+-------------------------+\n1 row in set, 1 warning (0.00 sec)\nmysql> SHOW WARNINGS;\n+---------+------+-------------------------------------------+\n| Level | Code | Message |\n+---------+------+-------------------------------------------+\n| Warning | 1292 | Truncated incorrect YEAR value: '1979aaa' |\n+---------+------+-------------------------------------------+",
            "mysql> SELECT @@system_time_zone;\n+--------------------+\n| @@system_time_zone |\n+--------------------+\n| EDT |\n+--------------------+\n1 row in set (0.00 sec)\nmysql> CREATE TABLE tz (c TIMESTAMP);\nQuery OK, 0 rows affected (0.41 sec)\nmysql> INSERT INTO tz VALUES\n-> ROW(CURRENT_TIMESTAMP),\n-> ROW('2020-07-28 14:50:15+1:00');\nQuery OK, 1 row affected (0.08 sec)\nmysql> TABLE tz;\n+---------------------+\n| c |\n+---------------------+\n| 2020-07-28 09:22:41 |\n| 2020-07-28 09:50:15 |\n+---------------------+\n2 rows in set (0.00 sec)\nmysql> SELECT CAST(c AT TIME ZONE '+00:00' AS DATETIME) AS u FROM tz;\n+---------------------+\n| u |\n+---------------------+\n| 2020-07-28 13:22:41 |\n| 2020-07-28 13:50:15 |\n+---------------------+\n2 rows in set (0.00 sec)\nmysql> SELECT CAST(c AT TIME ZONE 'UTC' AS DATETIME(2)) AS u FROM tz;\n+------------------------+\n| u |\n+------------------------+\n| 2020-07-28 13:22:41.00 |\n| 2020-07-28 13:50:15.00 |\n+------------------------+\n2 rows in set (0.00 sec)"
        ]
    }
]