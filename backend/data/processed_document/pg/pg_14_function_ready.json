[
    [
        [
            "Function",
            "Return Type",
            "Description",
            "Example",
            "Result"
        ],
        {
            "Function": "array_append(anyarray, anyelement)",
            "Return Type": "anyarray",
            "Description": "append an element to the end of an array",
            "Example": "array_append(ARRAY[1,2], 3)",
            "Result": "{1,2,3}",
            "Tree": "(func_application (func_name (type_function_name (identifier array_append))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-array.html"
        },
        {
            "Function": "array_cat(anyarray, anyarray)",
            "Return Type": "anyarray",
            "Description": "concatenate two arrays",
            "Example": "array_cat(ARRAY[1,2,3], ARRAY[4,5])",
            "Result": "{1,2,3,4,5}",
            "Tree": "(func_application (func_name (type_function_name (identifier array_cat))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-array.html"
        },
        {
            "Function": "array_ndims(anyarray)",
            "Return Type": "int",
            "Description": "returns the number of dimensions of the array",
            "Example": "array_ndims(ARRAY[[1,2,3], [4,5,6]])",
            "Result": "2",
            "Tree": "(func_application (func_name (type_function_name (identifier array_ndims))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-array.html"
        },
        {
            "Function": "array_dims(anyarray)",
            "Return Type": "text",
            "Description": "returns a text representation of array's dimensions",
            "Example": "array_dims(ARRAY[[1,2,3], [4,5,6]])",
            "Result": "[1:2][1:3]",
            "Tree": "(func_application (func_name (type_function_name (identifier array_dims))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-array.html"
        },
        {
            "Function": "array_fill(anyelement, int[] [, int[]])",
            "Return Type": "anyarray",
            "Description": "returns an array initialized with supplied value and dimensions, optionally with lower bounds other than 1",
            "Example": "array_fill(7, ARRAY[3], ARRAY[2])",
            "Result": "[2:4]={7,7,7}",
            "Tree": "(func_application (func_name (type_function_name (identifier array_fill))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-array.html"
        },
        {
            "Function": "array_length(anyarray, int)",
            "Return Type": "int",
            "Description": "returns the length of the requested array dimension",
            "Example": "array_length(array[1,2,3], 1)",
            "Result": "3",
            "Tree": "(func_application (func_name (type_function_name (identifier array_length))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-array.html"
        },
        {
            "Function": "array_lower(anyarray, int)",
            "Return Type": "int",
            "Description": "returns lower bound of the requested array dimension",
            "Example": "array_lower('[0:2]={1,2,3}'::int[], 1)",
            "Result": "0",
            "Tree": "(func_application (func_name (type_function_name (identifier array_lower))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-array.html"
        },
        {
            "Function": "array_position(anyarray, anyelement [, int])",
            "Return Type": "int",
            "Description": "returns the subscript of the first occurrence of the second argument in the array, starting at the element indicated by the third argument or at the first element (array must be one-dimensional)",
            "Example": "array_position(ARRAY['sun','mon','tue','wed','thu','fri','sat'], 'mon')",
            "Result": "2",
            "Tree": "(func_application (func_name (type_function_name (identifier array_position))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-array.html"
        },
        {
            "Function": "array_positions(anyarray, anyelement)",
            "Return Type": "int[]",
            "Description": "returns an array of subscripts of all occurrences of the second argument in the array given as first argument (array must be one-dimensional)",
            "Example": "array_positions(ARRAY['A','A','B','A'], 'A')",
            "Result": "{1,2,4}",
            "Tree": "(func_application (func_name (type_function_name (identifier array_positions))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-array.html"
        },
        {
            "Function": "array_prepend(anyelement, anyarray)",
            "Return Type": "anyarray",
            "Description": "append an element to the beginning of an array",
            "Example": "array_prepend(1, ARRAY[2,3])",
            "Result": "{1,2,3}",
            "Tree": "(func_application (func_name (type_function_name (identifier array_prepend))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-array.html"
        },
        {
            "Function": "array_remove(anyarray, anyelement)",
            "Return Type": "anyarray",
            "Description": "remove all elements equal to the given value from the array (array must be one-dimensional)",
            "Example": "array_remove(ARRAY[1,2,3,2], 2)",
            "Result": "{1,3}",
            "Tree": "(func_application (func_name (type_function_name (identifier array_remove))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-array.html"
        },
        {
            "Function": "array_replace(anyarray, anyelement, anyelement)",
            "Return Type": "anyarray",
            "Description": "replace each array element equal to the given value with a new value",
            "Example": "array_replace(ARRAY[1,2,5,4], 5, 3)",
            "Result": "{1,2,3,4}",
            "Tree": "(func_application (func_name (type_function_name (identifier array_replace))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-array.html"
        },
        {
            "Function": "array_to_string(anyarray, text [, text])",
            "Return Type": "text",
            "Description": "concatenates array elements using supplied delimiter and optional null string",
            "Example": "array_to_string(ARRAY[1, 2, 3, NULL, 5], ',', '*')",
            "Result": "1,2,3,*,5",
            "Tree": "(func_application (func_name (type_function_name (identifier array_to_string))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-array.html"
        },
        {
            "Function": "array_upper(anyarray, int)",
            "Return Type": "int",
            "Description": "returns upper bound of the requested array dimension",
            "Example": "array_upper(ARRAY[1,8,3,7], 1)",
            "Result": "4",
            "Tree": "(func_application (func_name (type_function_name (identifier array_upper))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-array.html"
        },
        {
            "Function": "cardinality(anyarray)",
            "Return Type": "int",
            "Description": "returns the total number of elements in the array, or 0 if the array is empty",
            "Example": "cardinality(ARRAY[[1,2],[3,4]])",
            "Result": "4",
            "Tree": "(func_application (func_name (type_function_name (identifier cardinality))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-array.html"
        },
        {
            "Function": "string_to_array(text, text [, text])",
            "Return Type": "text[]",
            "Description": "splits string into array elements using supplied delimiter and optional null string",
            "Example": "string_to_array('xx~^~yy~^~zz', '~^~', 'yy')",
            "Result": "{xx,NULL,zz}",
            "Tree": "(func_application (func_name (builtin_function_name string_to_array)) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-array.html"
        },
        {
            "Function": "unnest(anyarray)",
            "Return Type": "setof anyelement",
            "Description": "expand an array to a set of rows",
            "Example": "unnest(ARRAY[1,2])",
            "Result": "1\n2(2 rows)",
            "Tree": "(func_application (func_name (type_function_name (identifier unnest))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-array.html"
        },
        {
            "Function": "unnest(anyarray, anyarray [, ...])",
            "Return Type": "setof anyelement, anyelement [, ...]",
            "Description": "expand multiple arrays (possibly of different types) to a set of rows. This is only allowed in the FROM clause; see Section\u00a07.2.1.4",
            "Example": "unnest(ARRAY[1,2],ARRAY['foo','bar','baz'])",
            "Result": "1    foo\n2    bar\nNULL baz(3 rows)",
            "Tree": "(func_application (func_name (type_function_name (identifier unnest))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-array.html"
        }
    ],
    [
        [
            "Function",
            "Return Type",
            "Description"
        ],
        {
            "Function": "currval(regclass)",
            "Return Type": "bigint",
            "Description": "Return value most recently obtained with nextval for specified sequence",
            "Tree": "(func_application (func_name (type_function_name (identifier currval))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-sequence.html"
        },
        {
            "Function": "lastval()",
            "Return Type": "bigint",
            "Description": "Return value most recently obtained with nextval for any sequence",
            "Tree": "(func_application (func_name (type_function_name (identifier lastval))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-sequence.html"
        },
        {
            "Function": "nextval(regclass)",
            "Return Type": "bigint",
            "Description": "Advance sequence and return new value",
            "Tree": "(func_application (func_name (type_function_name (identifier nextval))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-sequence.html"
        },
        {
            "Function": "setval(regclass, bigint)",
            "Return Type": "bigint",
            "Description": "Set sequence's current value",
            "Tree": "(func_application (func_name (type_function_name (identifier setval))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-sequence.html"
        },
        {
            "Function": "setval(regclass, bigint, boolean)",
            "Return Type": "bigint",
            "Description": "Set sequence's current value and is_called flag",
            "Tree": "(func_application (func_name (type_function_name (identifier setval))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-sequence.html"
        }
    ],
    [
        [
            "Function",
            "Return Type",
            "Description",
            "Example"
        ],
        {
            "Function": "to_char(timestamp, text)",
            "Return Type": "text",
            "Description": "convert time stamp to string",
            "Example": "to_char(current_timestamp, 'HH12:MI:SS')",
            "Tree": "(func_application (func_name (builtin_function_name to_char)) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-formatting.html"
        },
        {
            "Function": "to_char(interval, text)",
            "Return Type": "text",
            "Description": "convert interval to string",
            "Example": "to_char(interval '15h\u00a02m\u00a012s', 'HH24:MI:SS')",
            "Tree": "(func_application (func_name (builtin_function_name to_char)) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-formatting.html"
        },
        {
            "Function": "to_char(int, text)",
            "Return Type": "text",
            "Description": "convert integer to string",
            "Example": "to_char(125, '999')",
            "Tree": "(func_application (func_name (builtin_function_name to_char)) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-formatting.html"
        },
        {
            "Function": "to_char(double precision, text)",
            "Return Type": "text",
            "Description": "convert real/double precision to string",
            "Example": "to_char(125.8::real, '999D9')",
            "Tree": "(func_application (func_name (builtin_function_name to_char)) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-formatting.html"
        },
        {
            "Function": "to_char(numeric, text)",
            "Return Type": "text",
            "Description": "convert numeric to string",
            "Example": "to_char(-125.8, '999D99S')",
            "Tree": "(func_application (func_name (builtin_function_name to_char)) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-formatting.html"
        },
        {
            "Function": "to_date(text, text)",
            "Return Type": "date",
            "Description": "convert string to date",
            "Example": "to_date('05\u00a0Dec\u00a02000', 'DD\u00a0Mon\u00a0YYYY')",
            "Tree": "(func_application (func_name (builtin_function_name to_date)) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-formatting.html"
        },
        {
            "Function": "to_number(text, text)",
            "Return Type": "numeric",
            "Description": "convert string to numeric",
            "Example": "to_number('12,454.8-', '99G999D9S')",
            "Tree": "(func_application (func_name (builtin_function_name to_number)) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-formatting.html"
        },
        {
            "Function": "to_timestamp(text, text)",
            "Return Type": "timestamp with time zone",
            "Description": "convert string to time stamp",
            "Example": "to_timestamp('05\u00a0Dec\u00a02000', 'DD\u00a0Mon\u00a0YYYY')",
            "Tree": "(func_application (func_name (builtin_function_name to_timestamp)) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-formatting.html"
        }
    ],
    [
        [
            "Function",
            "Description",
            "Example",
            "Example Result"
        ],
        {
            "Function": "to_json(anyelement)",
            "Description": "Returns the value as json or jsonb. Arrays and composites are converted (recursively) to arrays and objects; otherwise, if there is a cast from the type to json, the cast function will be used to perform the conversion; otherwise, a scalar value is produced. For any scalar type other than a number, a Boolean, or a null value, the text representation will be used, in such a fashion that it is a valid json or jsonb value.",
            "Example": "to_json('Fred said \"Hi.\"'::text)",
            "Example Result": "\"Fred said \\\"Hi.\\\"\"",
            "Tree": "(func_application (func_name (type_function_name (identifier to_json))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-json.html"
        },
        {
            "Function": "to_jsonb(anyelement)",
            "Description": "Returns the value as json or jsonb. Arrays and composites are converted (recursively) to arrays and objects; otherwise, if there is a cast from the type to json, the cast function will be used to perform the conversion; otherwise, a scalar value is produced. For any scalar type other than a number, a Boolean, or a null value, the text representation will be used, in such a fashion that it is a valid json or jsonb value.",
            "Example": "to_jsonb('Fred said \"Hi.\"'::text)",
            "Example Result": "\"Fred said \\\"Hi.\\\"\"",
            "Tree": "(func_application (func_name (type_function_name (identifier to_jsonb))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-json.html"
        },
        {
            "Function": "array_to_json(anyarray [, pretty_bool])",
            "Description": "Returns the array as a JSON array. A PostgreSQL multidimensional array becomes a JSON array of arrays. Line feeds will be added between dimension-1 elements if pretty_bool is true.",
            "Example": "array_to_json('{{1,5},{99,100}}'::int[])",
            "Example Result": "[[1,5],[99,100]]",
            "Tree": "(func_application (func_name (type_function_name (identifier array_to_json))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-json.html"
        },
        {
            "Function": "row_to_json(record [, pretty_bool])",
            "Description": "Returns the row as a JSON object. Line feeds will be added between level-1 elements if pretty_bool is true.",
            "Example": "row_to_json(row(1,'foo'))",
            "Example Result": "{\"f1\":1,\"f2\":\"foo\"}",
            "Tree": "(func_application (func_name (type_function_name (identifier row_to_json))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-json.html"
        },
        {
            "Function": "json_build_array(VARIADIC \"any\")",
            "Description": "Builds a possibly-heterogeneously-typed JSON array out of a variadic argument list.",
            "Example": "json_build_array(1,2,'3',4,5)",
            "Example Result": "[1, 2, \"3\", 4, 5]",
            "Tree": "(func_application (func_name (type_function_name (identifier json_build_array))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-json.html"
        },
        {
            "Function": "jsonb_build_array(VARIADIC \"any\")",
            "Description": "Builds a possibly-heterogeneously-typed JSON array out of a variadic argument list.",
            "Example": "jsonb_build_array(1,2,'3',4,5)",
            "Example Result": "[1, 2, \"3\", 4, 5]",
            "Tree": "(func_application (func_name (type_function_name (identifier jsonb_build_array))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-json.html"
        },
        {
            "Function": "json_build_object(VARIADIC \"any\")",
            "Description": "Builds a JSON object out of a variadic argument list. By convention, the argument list consists of alternating keys and values.",
            "Example": "json_build_object('foo',1,'bar',2)",
            "Example Result": "{\"foo\": 1, \"bar\": 2}",
            "Tree": "(func_application (func_name (type_function_name (identifier json_build_object))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-json.html"
        },
        {
            "Function": "jsonb_build_object(VARIADIC \"any\")",
            "Description": "Builds a JSON object out of a variadic argument list. By convention, the argument list consists of alternating keys and values.",
            "Example": "jsonb_build_object('foo',1,'bar',2)",
            "Example Result": "{\"foo\": 1, \"bar\": 2}",
            "Tree": "(func_application (func_name (type_function_name (identifier jsonb_build_object))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-json.html"
        },
        {
            "Function": "json_object(text[])",
            "Description": "Builds a JSON object out of a text array. The array must have either exactly one dimension with an even number of members, in which case they are taken as alternating key/value pairs, or two dimensions such that each inner array has exactly two elements, which are taken as a key/value pair.",
            "Example": "json_object('{a, 1, b, \"def\", c, 3.5}')\njson_object('{{a, 1},{b, \"def\"},{c, 3.5}}')",
            "Example Result": "{\"a\": \"1\", \"b\": \"def\", \"c\": \"3.5\"}",
            "Tree": "(func_application (func_name (type_function_name (identifier json_object))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-json.html"
        },
        {
            "Function": "jsonb_object(text[])",
            "Description": "Builds a JSON object out of a text array. The array must have either exactly one dimension with an even number of members, in which case they are taken as alternating key/value pairs, or two dimensions such that each inner array has exactly two elements, which are taken as a key/value pair.",
            "Example": "jsonb_object('{a, 1, b, \"def\", c, 3.5}')\njsonb_object('{{a, 1},{b, \"def\"},{c, 3.5}}')",
            "Example Result": "{\"a\": \"1\", \"b\": \"def\", \"c\": \"3.5\"}",
            "Tree": "(func_application (func_name (type_function_name (identifier jsonb_object))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-json.html"
        },
        {
            "Function": "json_object(keys text[], values text[])",
            "Description": "This form of json_object takes keys and values pairwise from two separate arrays. In all other respects it is identical to the one-argument form.",
            "Example": "json_object('{a, b}', '{1,2}')",
            "Example Result": "{\"a\": \"1\", \"b\": \"2\"}",
            "Tree": "(func_application (func_name (type_function_name (identifier json_object))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-json.html"
        },
        {
            "Function": "jsonb_object(keys text[], values text[])",
            "Description": "This form of json_object takes keys and values pairwise from two separate arrays. In all other respects it is identical to the one-argument form.",
            "Example": "jsonb_object('{a, b}', '{1,2}')",
            "Example Result": "{\"a\": \"1\", \"b\": \"2\"}",
            "Tree": "(func_application (func_name (type_function_name (identifier jsonb_object))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-json.html"
        }
    ],
    [
        [
            "Function",
            "Return Type",
            "Description",
            "Example",
            "Example Result"
        ],
        {
            "Function": "json_array_length(json)",
            "Return Type": "int",
            "Description": "Returns the number of elements in the outermost JSON array.",
            "Example": "json_array_length('[1,2,3,{\"f1\":1,\"f2\":[5,6]},4]')",
            "Example Result": "5",
            "Tree": "(func_application (func_name (type_function_name (identifier json_array_length))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-json.html"
        },
        {
            "Function": "jsonb_array_length(jsonb)",
            "Return Type": "int",
            "Description": "Returns the number of elements in the outermost JSON array.",
            "Example": "jsonb_array_length('[1,2,3,{\"f1\":1,\"f2\":[5,6]},4]')",
            "Example Result": "5",
            "Tree": "(func_application (func_name (type_function_name (identifier jsonb_array_length))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-json.html"
        },
        {
            "Function": "json_each(json)",
            "Return Type": "setof key text, value json\nsetof key text, value jsonb",
            "Description": "Expands the outermost JSON object into a set of key/value pairs.",
            "Example": "select * from json_each('{\"a\":\"foo\", \"b\":\"bar\"}')",
            "Example Result": "key | value\n-----+-------\n a   | \"foo\"\n b   | \"bar\"",
            "Tree": "(func_application (func_name (type_function_name (identifier json_each))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-json.html"
        },
        {
            "Function": "jsonb_each(jsonb)",
            "Return Type": "setof key text, value json\nsetof key text, value jsonb",
            "Description": "Expands the outermost JSON object into a set of key/value pairs.",
            "Example": "select * from jsonb_each('{\"a\":\"foo\", \"b\":\"bar\"}')",
            "Example Result": "key | value\n-----+-------\n a   | \"foo\"\n b   | \"bar\"",
            "Tree": "(func_application (func_name (type_function_name (identifier jsonb_each))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-json.html"
        },
        {
            "Function": "json_each_text(json)",
            "Return Type": "setof key text, value text",
            "Description": "Expands the outermost JSON object into a set of key/value pairs. The returned values will be of type text.",
            "Example": "select * from json_each_text('{\"a\":\"foo\", \"b\":\"bar\"}')",
            "Example Result": "key | value\n-----+-------\n a   | foo\n b   | bar",
            "Tree": "(func_application (func_name (type_function_name (identifier json_each_text))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-json.html"
        },
        {
            "Function": "jsonb_each_text(jsonb)",
            "Return Type": "setof key text, value text",
            "Description": "Expands the outermost JSON object into a set of key/value pairs. The returned values will be of type text.",
            "Example": "select * from jsonb_each_text('{\"a\":\"foo\", \"b\":\"bar\"}')",
            "Example Result": "key | value\n-----+-------\n a   | foo\n b   | bar",
            "Tree": "(func_application (func_name (type_function_name (identifier jsonb_each_text))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-json.html"
        },
        {
            "Function": "json_extract_path(from_json json, VARIADIC path_elems text[])",
            "Return Type": "json jsonb",
            "Description": "Returns JSON value pointed to by path_elems (equivalent to #> operator).",
            "Example": "json_extract_path('{\"f2\":{\"f3\":1},\"f4\":{\"f5\":99,\"f6\":\"foo\"}}','f4')",
            "Example Result": "{\"f5\":99,\"f6\":\"foo\"}",
            "Tree": "(func_application (func_name (type_function_name (identifier json_extract_path))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-json.html"
        },
        {
            "Function": "jsonb_extract_path(from_json jsonb, VARIADIC path_elems text[])",
            "Return Type": "json jsonb",
            "Description": "Returns JSON value pointed to by path_elems (equivalent to #> operator).",
            "Example": "jsonb_extract_path('{\"f2\":{\"f3\":1},\"f4\":{\"f5\":99,\"f6\":\"foo\"}}','f4')",
            "Example Result": "{\"f5\":99,\"f6\":\"foo\"}",
            "Tree": "(func_application (func_name (type_function_name (identifier jsonb_extract_path))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-json.html"
        },
        {
            "Function": "json_extract_path_text(from_json json, VARIADIC path_elems text[])",
            "Return Type": "text",
            "Description": "Returns JSON value pointed to by path_elems as text (equivalent to #>> operator).",
            "Example": "json_extract_path_text('{\"f2\":{\"f3\":1},\"f4\":{\"f5\":99,\"f6\":\"foo\"}}','f4', 'f6')",
            "Example Result": "foo",
            "Tree": "(func_application (func_name (type_function_name (identifier json_extract_path_text))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-json.html"
        },
        {
            "Function": "jsonb_extract_path_text(from_json jsonb, VARIADIC path_elems text[])",
            "Return Type": "text",
            "Description": "Returns JSON value pointed to by path_elems as text (equivalent to #>> operator).",
            "Example": "jsonb_extract_path_text('{\"f2\":{\"f3\":1},\"f4\":{\"f5\":99,\"f6\":\"foo\"}}','f4', 'f6')",
            "Example Result": "foo",
            "Tree": "(func_application (func_name (type_function_name (identifier jsonb_extract_path_text))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-json.html"
        },
        {
            "Function": "json_object_keys(json)",
            "Return Type": "setof text",
            "Description": "Returns set of keys in the outermost JSON object.",
            "Example": "json_object_keys('{\"f1\":\"abc\",\"f2\":{\"f3\":\"a\", \"f4\":\"b\"}}')",
            "Example Result": "json_object_keys\n------------------\n f1\n f2",
            "Tree": "(func_application (func_name (type_function_name (identifier json_object_keys))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-json.html"
        },
        {
            "Function": "jsonb_object_keys(jsonb)",
            "Return Type": "setof text",
            "Description": "Returns set of keys in the outermost JSON object.",
            "Example": "jsonb_object_keys('{\"f1\":\"abc\",\"f2\":{\"f3\":\"a\", \"f4\":\"b\"}}')",
            "Example Result": "json_object_keys\n------------------\n f1\n f2",
            "Tree": "(func_application (func_name (type_function_name (identifier jsonb_object_keys))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-json.html"
        },
        {
            "Function": "json_populate_record(base anyelement, from_json json)",
            "Return Type": "anyelement",
            "Description": "Expands the object in from_json to a row whose columns match the record type defined by base (see note below).",
            "Example": "select * from json_populate_record(null::myrowtype, '{\"a\": 1, \"b\": [\"2\", \"a b\"], \"c\": {\"d\": 4, \"e\": \"a b c\"}}')",
            "Example Result": "a |   b       |      c\n---+-----------+-------------\n 1 | {2,\"a b\"} | (4,\"a b c\")",
            "Tree": "(func_application (func_name (type_function_name (identifier json_populate_record))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-json.html"
        },
        {
            "Function": "jsonb_populate_record(base anyelement, from_json jsonb)",
            "Return Type": "anyelement",
            "Description": "Expands the object in from_json to a row whose columns match the record type defined by base (see note below).",
            "Example": "select * from jsonb_populate_record(null::myrowtype, '{\"a\": 1, \"b\": [\"2\", \"a b\"], \"c\": {\"d\": 4, \"e\": \"a b c\"}}')",
            "Example Result": "a |   b       |      c\n---+-----------+-------------\n 1 | {2,\"a b\"} | (4,\"a b c\")",
            "Tree": "(func_application (func_name (type_function_name (identifier jsonb_populate_record))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-json.html"
        },
        {
            "Function": "json_populate_recordset(base anyelement, from_json json)",
            "Return Type": "setof anyelement",
            "Description": "Expands the outermost array of objects in from_json to a set of rows whose columns match the record type defined by base (see note below).",
            "Example": "select * from json_populate_recordset(null::myrowtype, '[{\"a\":1,\"b\":2},{\"a\":3,\"b\":4}]')",
            "Example Result": "a | b\n---+---\n 1 | 2\n 3 | 4",
            "Tree": "(func_application (func_name (type_function_name (identifier json_populate_recordset))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-json.html"
        },
        {
            "Function": "jsonb_populate_recordset(base anyelement, from_json jsonb)",
            "Return Type": "setof anyelement",
            "Description": "Expands the outermost array of objects in from_json to a set of rows whose columns match the record type defined by base (see note below).",
            "Example": "select * from jsonb_populate_recordset(null::myrowtype, '[{\"a\":1,\"b\":2},{\"a\":3,\"b\":4}]')",
            "Example Result": "a | b\n---+---\n 1 | 2\n 3 | 4",
            "Tree": "(func_application (func_name (type_function_name (identifier jsonb_populate_recordset))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-json.html"
        },
        {
            "Function": "json_array_elements(json)",
            "Return Type": "setof json setof jsonb",
            "Description": "Expands a JSON array to a set of JSON values.",
            "Example": "select * from json_array_elements('[1,true, [2,false]]')",
            "Example Result": "value\n-----------\n 1\n true\n [2,false]",
            "Tree": "(func_application (func_name (type_function_name (identifier json_array_elements))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-json.html"
        },
        {
            "Function": "jsonb_array_elements(jsonb)",
            "Return Type": "setof json setof jsonb",
            "Description": "Expands a JSON array to a set of JSON values.",
            "Example": "select * from jsonb_array_elements('[1,true, [2,false]]')",
            "Example Result": "value\n-----------\n 1\n true\n [2,false]",
            "Tree": "(func_application (func_name (type_function_name (identifier jsonb_array_elements))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-json.html"
        },
        {
            "Function": "json_array_elements_text(json)",
            "Return Type": "setof text",
            "Description": "Expands a JSON array to a set of text values.",
            "Example": "select * from json_array_elements_text('[\"foo\", \"bar\"]')",
            "Example Result": "value\n-----------\n foo\n bar",
            "Tree": "(func_application (func_name (type_function_name (identifier json_array_elements_text))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-json.html"
        },
        {
            "Function": "jsonb_array_elements_text(jsonb)",
            "Return Type": "setof text",
            "Description": "Expands a JSON array to a set of text values.",
            "Example": "select * from jsonb_array_elements_text('[\"foo\", \"bar\"]')",
            "Example Result": "value\n-----------\n foo\n bar",
            "Tree": "(func_application (func_name (type_function_name (identifier jsonb_array_elements_text))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-json.html"
        },
        {
            "Function": "json_typeof(json)",
            "Return Type": "text",
            "Description": "Returns the type of the outermost JSON value as a text string. Possible types are object, array, string, number, boolean, and null.",
            "Example": "json_typeof('-123.4')",
            "Example Result": "number",
            "Tree": "(func_application (func_name (type_function_name (identifier json_typeof))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-json.html"
        },
        {
            "Function": "jsonb_typeof(jsonb)",
            "Return Type": "text",
            "Description": "Returns the type of the outermost JSON value as a text string. Possible types are object, array, string, number, boolean, and null.",
            "Example": "jsonb_typeof('-123.4')",
            "Example Result": "number",
            "Tree": "(func_application (func_name (type_function_name (identifier jsonb_typeof))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-json.html"
        },
        {
            "Function": "json_to_record(json)",
            "Return Type": "record",
            "Description": "Builds an arbitrary record from a JSON object (see note below). As with all functions returning record, the caller must explicitly define the structure of the record with an AS clause.",
            "Example": "select * from json_to_record('{\"a\":1,\"b\":[1,2,3],\"c\":[1,2,3],\"e\":\"bar\",\"r\": {\"a\": 123, \"b\": \"a b c\"}}') as x(a int, b text, c int[], d text, r myrowtype)",
            "Example Result": "a |    b    |    c    | d |       r\n---+---------+---------+---+---------------\n 1 | [1,2,3] | {1,2,3} |   | (123,\"a b c\")",
            "Tree": "(func_application (func_name (type_function_name (identifier json_to_record))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-json.html"
        },
        {
            "Function": "jsonb_to_record(jsonb)",
            "Return Type": "record",
            "Description": "Builds an arbitrary record from a JSON object (see note below). As with all functions returning record, the caller must explicitly define the structure of the record with an AS clause.",
            "Example": "select * from jsonb_to_record('{\"a\":1,\"b\":[1,2,3],\"c\":[1,2,3],\"e\":\"bar\",\"r\": {\"a\": 123, \"b\": \"a b c\"}}') as x(a int, b text, c int[], d text, r myrowtype)",
            "Example Result": "a |    b    |    c    | d |       r\n---+---------+---------+---+---------------\n 1 | [1,2,3] | {1,2,3} |   | (123,\"a b c\")",
            "Tree": "(func_application (func_name (type_function_name (identifier jsonb_to_record))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-json.html"
        },
        {
            "Function": "json_to_recordset(json)",
            "Return Type": "setof record",
            "Description": "Builds an arbitrary set of records from a JSON array of objects (see note below). As with all functions returning record, the caller must explicitly define the structure of the record with an AS clause.",
            "Example": "select * from json_to_recordset('[{\"a\":1,\"b\":\"foo\"},{\"a\":\"2\",\"c\":\"bar\"}]') as x(a int, b text);",
            "Example Result": "a |  b\n---+-----\n 1 | foo\n 2 |",
            "Tree": "(func_application (func_name (type_function_name (identifier json_to_recordset))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-json.html"
        },
        {
            "Function": "jsonb_to_recordset(jsonb)",
            "Return Type": "setof record",
            "Description": "Builds an arbitrary set of records from a JSON array of objects (see note below). As with all functions returning record, the caller must explicitly define the structure of the record with an AS clause.",
            "Example": "select * from jsonb_to_recordset('[{\"a\":1,\"b\":\"foo\"},{\"a\":\"2\",\"c\":\"bar\"}]') as x(a int, b text);",
            "Example Result": "a |  b\n---+-----\n 1 | foo\n 2 |",
            "Tree": "(func_application (func_name (type_function_name (identifier jsonb_to_recordset))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-json.html"
        },
        {
            "Function": "json_strip_nulls(from_json json)",
            "Return Type": "json jsonb",
            "Description": "Returns from_json with all object fields that have null values omitted. Other null values are untouched.",
            "Example": "json_strip_nulls('[{\"f1\":1,\"f2\":null},2,null,3]')",
            "Example Result": "[{\"f1\":1},2,null,3]",
            "Tree": "(func_application (func_name (type_function_name (identifier json_strip_nulls))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-json.html"
        },
        {
            "Function": "jsonb_strip_nulls(from_json jsonb)",
            "Return Type": "json jsonb",
            "Description": "Returns from_json with all object fields that have null values omitted. Other null values are untouched.",
            "Example": "jsonb_strip_nulls('[{\"f1\":1,\"f2\":null},2,null,3]')",
            "Example Result": "[{\"f1\":1},2,null,3]",
            "Tree": "(func_application (func_name (type_function_name (identifier jsonb_strip_nulls))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-json.html"
        },
        {
            "Function": "jsonb_set(target jsonb, path text[], new_value jsonb [, create_missing boolean])",
            "Return Type": "jsonb",
            "Description": "Returns target with the section designated by path replaced by new_value, or with new_value added if create_missing is true (default is true) and the item designated by path does not exist. As with the path oriented operators, negative integers that appear in path count from the end of JSON arrays.",
            "Example": "jsonb_set('[{\"f1\":1,\"f2\":null},2,null,3]', '{0,f1}','[2,3,4]', false)\njsonb_set('[{\"f1\":1,\"f2\":null},2]', '{0,f3}','[2,3,4]')",
            "Example Result": "[{\"f1\":[2,3,4],\"f2\":null},2,null,3]\n[{\"f1\": 1, \"f2\": null, \"f3\": [2, 3, 4]}, 2]",
            "Tree": "(func_application (func_name (type_function_name (identifier jsonb_set))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-json.html"
        },
        {
            "Function": "jsonb_insert(target jsonb, path text[], new_value jsonb [, insert_after boolean])",
            "Return Type": "jsonb",
            "Description": "Returns target with new_value inserted. If target section designated by path is in a JSONB array, new_value will be inserted before target or after if insert_after is true (default is false). If target section designated by path is in JSONB object, new_value will be inserted only if target does not exist. As with the path oriented operators, negative integers that appear in path count from the end of JSON arrays.",
            "Example": "jsonb_insert('{\"a\": [0,1,2]}', '{a, 1}', '\"new_value\"')\njsonb_insert('{\"a\": [0,1,2]}', '{a, 1}', '\"new_value\"', true)",
            "Example Result": "{\"a\": [0, \"new_value\", 1, 2]}\n{\"a\": [0, 1, \"new_value\", 2]}",
            "Tree": "(func_application (func_name (type_function_name (identifier jsonb_insert))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-json.html"
        },
        {
            "Function": "jsonb_pretty(from_json jsonb)",
            "Return Type": "text",
            "Description": "Returns from_json as indented JSON text.",
            "Example": "jsonb_pretty('[{\"f1\":1,\"f2\":null},2,null,3]')",
            "Example Result": "[\n    {\n        \"f1\": 1,\n        \"f2\": null\n    },\n    2,\n    null,\n    3\n]",
            "Tree": "(func_application (func_name (type_function_name (identifier jsonb_pretty))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-json.html"
        },
        {
            "Function": "jsonb_path_exists(target jsonb, path jsonpath [, vars jsonb [, silent bool]])",
            "Return Type": "boolean",
            "Description": "Checks whether JSON path returns any item for the specified JSON value.",
            "Example": "jsonb_path_exists('{\"a\":[1,2,3,4,5]}', '$.a[*] ? (@ >= $min && @ <= $max)', '{\"min\":2,\"max\":4}')",
            "Example Result": "true",
            "Tree": "(func_application (func_name (type_function_name (identifier jsonb_path_exists))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-json.html"
        },
        {
            "Function": "jsonb_path_match(target jsonb, path jsonpath [, vars jsonb [, silent bool]])",
            "Return Type": "boolean",
            "Description": "Returns the result of JSON path predicate check for the specified JSON value. Only the first item of the result is taken into account. If the result is not Boolean, then null is returned.",
            "Example": "jsonb_path_match('{\"a\":[1,2,3,4,5]}', 'exists($.a[*] ? (@ >= $min && @ <= $max))', '{\"min\":2,\"max\":4}')",
            "Example Result": "true",
            "Tree": "(func_application (func_name (type_function_name (identifier jsonb_path_match))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-json.html"
        },
        {
            "Function": "jsonb_path_query(target jsonb, path jsonpath [, vars jsonb [, silent bool]])",
            "Return Type": "setof jsonb",
            "Description": "Gets all JSON items returned by JSON path for the specified JSON value.",
            "Example": "select * from jsonb_path_query('{\"a\":[1,2,3,4,5]}', '$.a[*] ? (@ >= $min && @ <= $max)', '{\"min\":2,\"max\":4}');",
            "Example Result": "jsonb_path_query\n------------------\n 2\n 3\n 4",
            "Tree": "(func_application (func_name (type_function_name (identifier jsonb_path_query))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-json.html"
        },
        {
            "Function": "jsonb_path_query_array(target jsonb, path jsonpath [, vars jsonb [, silent bool]])",
            "Return Type": "jsonb",
            "Description": "Gets all JSON items returned by JSON path for the specified JSON value and wraps result into an array.",
            "Example": "jsonb_path_query_array('{\"a\":[1,2,3,4,5]}', '$.a[*] ? (@ >= $min && @ <= $max)', '{\"min\":2,\"max\":4}')",
            "Example Result": "[2, 3, 4]",
            "Tree": "(func_application (func_name (type_function_name (identifier jsonb_path_query_array))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-json.html"
        },
        {
            "Function": "jsonb_path_query_first(target jsonb, path jsonpath [, vars jsonb [, silent bool]])",
            "Return Type": "jsonb",
            "Description": "Gets the first JSON item returned by JSON path for the specified JSON value. Returns NULL on no results.",
            "Example": "jsonb_path_query_first('{\"a\":[1,2,3,4,5]}', '$.a[*] ? (@ >= $min && @ <= $max)', '{\"min\":2,\"max\":4}')",
            "Example Result": "2",
            "Tree": "(func_application (func_name (type_function_name (identifier jsonb_path_query_first))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-json.html"
        }
    ],
    [
        [
            "Function",
            "Description",
            "Example JSON",
            "Example Query",
            "Result"
        ],
        {
            "Function": "type()",
            "Description": "Type of the SQL/JSON item",
            "Example JSON": "[1, \"2\", {}]",
            "Example Query": "$[*].type()",
            "Result": "\"number\", \"string\", \"object\"",
            "Tree": "(func_application (func_name (type_function_name (identifier (plsql_unreserved_keyword type)))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-json.html"
        },
        {
            "Function": "size()",
            "Description": "Size of the SQL/JSON item",
            "Example JSON": "{\"m\": [11, 15]}",
            "Example Query": "$.m.size()",
            "Result": "2",
            "Tree": "(func_application (func_name (type_function_name (identifier size))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-json.html"
        },
        {
            "Function": "double()",
            "Description": "Approximate floating-point number converted from an SQL/JSON number or a string",
            "Example JSON": "{\"len\": \"1.9\"}",
            "Example Query": "$.len.double() * 2",
            "Result": "3.8",
            "Tree": "(func_application (func_name (type_function_name (unreserved_keyword double))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-json.html"
        },
        {
            "Function": "ceiling()",
            "Description": "Nearest integer greater than or equal to the SQL/JSON number",
            "Example JSON": "{\"h\": 1.3}",
            "Example Query": "$.h.ceiling()",
            "Result": "2",
            "Tree": "(func_application (func_name (builtin_function_name ceiling)) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-json.html"
        },
        {
            "Function": "floor()",
            "Description": "Nearest integer less than or equal to the SQL/JSON number",
            "Example JSON": "{\"h\": 1.3}",
            "Example Query": "$.h.floor()",
            "Result": "1",
            "Tree": "(func_application (func_name (builtin_function_name floor)) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-json.html"
        },
        {
            "Function": "abs()",
            "Description": "Absolute value of the SQL/JSON number",
            "Example JSON": "{\"z\": -0.3}",
            "Example Query": "$.z.abs()",
            "Result": "0.3",
            "Tree": "(func_application (func_name (builtin_function_name abs)) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-json.html"
        },
        {
            "Function": "keyvalue()",
            "Description": "Sequence of object's key-value pairs represented as array of items containing three fields (\"key\", \"value\", and \"id\"). \"id\" is a unique identifier of the object key-value pair belongs to.",
            "Example JSON": "{\"x\": \"20\", \"y\": 32}",
            "Example Query": "$.keyvalue()",
            "Result": "{\"key\": \"x\", \"value\": \"20\", \"id\": 0}, {\"key\": \"y\", \"value\": 32, \"id\": 0}",
            "Tree": "(func_application (func_name (type_function_name (identifier keyvalue))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-json.html"
        }
    ],
    [
        [
            "Function",
            "Description",
            "Example",
            "Example Result"
        ],
        {
            "Function": "num_nonnulls(VARIADIC \"any\")",
            "Description": "returns the number of non-null arguments",
            "Example": "num_nonnulls(1, NULL, 2)",
            "Example Result": "2",
            "Tree": "(func_application (func_name (type_function_name (identifier num_nonnulls))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-comparison.html"
        },
        {
            "Function": "num_nulls(VARIADIC \"any\")",
            "Description": "returns the number of null arguments",
            "Example": "num_nulls(1, NULL, 2)",
            "Example Result": "1",
            "Tree": "(func_application (func_name (type_function_name (identifier num_nulls))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-comparison.html"
        }
    ],
    [
        [
            "Function",
            "Description",
            "Example",
            "Example Result"
        ],
        {
            "Function": "enum_first(anyenum)",
            "Description": "Returns the first value of the input enum type",
            "Example": "enum_first(null::rainbow)",
            "Example Result": "red",
            "Tree": "(func_application (func_name (type_function_name (identifier enum_first))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-enum.html"
        },
        {
            "Function": "enum_last(anyenum)",
            "Description": "Returns the last value of the input enum type",
            "Example": "enum_last(null::rainbow)",
            "Example Result": "purple",
            "Tree": "(func_application (func_name (type_function_name (identifier enum_last))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-enum.html"
        },
        {
            "Function": "enum_range(anyenum)",
            "Description": "Returns all values of the input enum type in an ordered array",
            "Example": "enum_range(null::rainbow)",
            "Example Result": "{red,orange,yellow,green,blue,purple}",
            "Tree": "(func_application (func_name (type_function_name (identifier enum_range))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-enum.html"
        },
        {
            "Function": "enum_range(anyenum, anyenum)",
            "Description": "Returns the range between the two given enum values, as an ordered array. The values must be from the same enum type. If the first parameter is null, the result will start with the first value of the enum type. If the second parameter is null, the result will end with the last value of the enum type.",
            "Example": "enum_range('orange'::rainbow, 'green'::rainbow)",
            "Example Result": "{orange,yellow,green}",
            "Tree": "(func_application (func_name (type_function_name (identifier enum_range))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-enum.html"
        },
        {
            "Function": "enum_range(NULL, 'green'::rainbow)",
            "Description": "{red,orange,yellow,green}",
            "Tree": "(func_application (func_name (type_function_name (identifier enum_range))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-enum.html"
        },
        {
            "Function": "enum_range('orange'::rainbow, NULL)",
            "Description": "{orange,yellow,green,blue,purple}",
            "Tree": "(func_application (func_name (type_function_name (identifier enum_range))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-enum.html"
        }
    ],
    [
        [
            "Function",
            "Return Type",
            "Description",
            "Example",
            "Result"
        ],
        {
            "Function": "array_to_tsvector(text[])",
            "Return Type": "tsvector",
            "Description": "convert array of lexemes to tsvector",
            "Example": "array_to_tsvector('{fat,cat,rat}'::text[])",
            "Result": "'cat' 'fat' 'rat'",
            "Tree": "(func_application (func_name (type_function_name (identifier array_to_tsvector))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-textsearch.html"
        },
        {
            "Function": "get_current_ts_config()",
            "Return Type": "regconfig",
            "Description": "get default text search configuration",
            "Example": "get_current_ts_config()",
            "Result": "english",
            "Tree": "(func_application (func_name (type_function_name (identifier get_current_ts_config))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-textsearch.html"
        },
        {
            "Function": "length(tsvector)",
            "Return Type": "integer",
            "Description": "number of lexemes in tsvector",
            "Example": "length('fat:2,4 cat:3 rat:5A'::tsvector)",
            "Result": "3",
            "Tree": "(func_application (func_name (builtin_function_name length)) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-textsearch.html"
        },
        {
            "Function": "numnode(tsquery)",
            "Return Type": "integer",
            "Description": "number of lexemes plus operators in tsquery",
            "Example": "numnode('(fat & rat) | cat'::tsquery)",
            "Result": "5",
            "Tree": "(func_application (func_name (type_function_name (identifier numnode))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-textsearch.html"
        },
        {
            "Function": "plainto_tsquery([ config regconfig , ] query text)",
            "Return Type": "tsquery",
            "Description": "produce tsquery ignoring punctuation",
            "Example": "plainto_tsquery('english', 'The Fat Rats')",
            "Result": "'fat' & 'rat'",
            "Tree": "(func_application (func_name (type_function_name (identifier plainto_tsquery))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-textsearch.html"
        },
        {
            "Function": "phraseto_tsquery([ config regconfig , ] query text)",
            "Return Type": "tsquery",
            "Description": "produce tsquery that searches for a phrase, ignoring punctuation",
            "Example": "phraseto_tsquery('english', 'The Fat Rats')",
            "Result": "'fat' <-> 'rat'",
            "Tree": "(func_application (func_name (type_function_name (identifier phraseto_tsquery))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-textsearch.html"
        },
        {
            "Function": "websearch_to_tsquery([ config regconfig , ] query text)",
            "Return Type": "tsquery",
            "Description": "produce tsquery from a web search style query",
            "Example": "websearch_to_tsquery('english', '\"fat rat\" or rat')",
            "Result": "'fat' <-> 'rat' | 'rat'",
            "Tree": "(func_application (func_name (type_function_name (identifier websearch_to_tsquery))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-textsearch.html"
        },
        {
            "Function": "querytree(query tsquery)",
            "Return Type": "text",
            "Description": "get indexable part of a tsquery",
            "Example": "querytree('foo & ! bar'::tsquery)",
            "Result": "'foo'",
            "Tree": "(func_application (func_name (type_function_name (identifier querytree))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-textsearch.html"
        },
        {
            "Function": "setweight(vector tsvector, weight \"char\")",
            "Return Type": "tsvector",
            "Description": "assign weight to each element of vector",
            "Example": "setweight('fat:2,4 cat:3 rat:5B'::tsvector, 'A')",
            "Result": "'cat':3A 'fat':2A,4A 'rat':5A",
            "Tree": "(func_application (func_name (type_function_name (identifier setweight))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-textsearch.html"
        },
        {
            "Function": "setweight(vector tsvector, weight \"char\", lexemes text[])",
            "Return Type": "tsvector",
            "Description": "assign weight to elements of vector that are listed in lexemes",
            "Example": "setweight('fat:2,4 cat:3 rat:5B'::tsvector, 'A', '{cat,rat}')",
            "Result": "'cat':3A 'fat':2,4 'rat':5A",
            "Tree": "(func_application (func_name (type_function_name (identifier setweight))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-textsearch.html"
        },
        {
            "Function": "strip(tsvector)",
            "Return Type": "tsvector",
            "Description": "remove positions and weights from tsvector",
            "Example": "strip('fat:2,4 cat:3 rat:5A'::tsvector)",
            "Result": "'cat' 'fat' 'rat'",
            "Tree": "(func_application (func_name (type_function_name (unreserved_keyword strip))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-textsearch.html"
        },
        {
            "Function": "to_tsquery([ config regconfig , ] query text)",
            "Return Type": "tsquery",
            "Description": "normalize words and convert to tsquery",
            "Example": "to_tsquery('english', 'The & Fat & Rats')",
            "Result": "'fat' & 'rat'",
            "Tree": "(func_application (func_name (type_function_name (identifier to_tsquery))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-textsearch.html"
        },
        {
            "Function": "to_tsvector([ config regconfig , ] document text)",
            "Return Type": "tsvector",
            "Description": "reduce document text to tsvector",
            "Example": "to_tsvector('english', 'The Fat Rats')",
            "Result": "'fat':2 'rat':3",
            "Tree": "(func_application (func_name (type_function_name (identifier to_tsvector))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-textsearch.html"
        },
        {
            "Function": "to_tsvector([ config regconfig , ] document json(b))",
            "Return Type": "tsvector",
            "Description": "reduce each string value in the document to a tsvector, and then concatenate those in document order to produce a single tsvector",
            "Example": "to_tsvector('english', '{\"a\": \"The Fat Rats\"}'::json)",
            "Result": "'fat':2 'rat':3",
            "Tree": "(func_application (func_name (type_function_name (identifier to_tsvector))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-textsearch.html"
        },
        {
            "Function": "json_to_tsvector([config regconfig,]document json,filter json)",
            "Return Type": "tsvector",
            "Description": "reduce each value in the document, specified by filter to a tsvector, and then concatenate those in document order to produce a single tsvector. filter is a jsonb array, that enumerates what kind of elements need to be included into the resulting tsvector. Possible values for filter are \"string\" (to include all string values), \"numeric\" (to include all numeric values in the string format), \"boolean\" (to include all Boolean values in the string format \"true\"/\"false\"), \"key\" (to include all keys) or \"all\" (to include all above). These values can be combined together to include, e.g., all string and numeric values.",
            "Example": "json_to_tsvector('english', '{\"a\": \"The Fat Rats\", \"b\": 123}'::json, '[\"string\", \"numeric\"]')",
            "Result": "'123':5 'fat':2 'rat':3",
            "Link": "https://www.postgresql.org/docs/12/functions-textsearch.html",
            "Tree": "(func_application (func_name (type_function_name (identifier json_to_tsvector))) ( ))"
        },
        {
            "Function": "jsonb_to_tsvector([config regconfig,]document jsonb,filter jsonb)",
            "Return Type": "tsvector",
            "Description": "reduce each value in the document, specified by filter to a tsvector, and then concatenate those in document order to produce a single tsvector. filter is a jsonb array, that enumerates what kind of elements need to be included into the resulting tsvector. Possible values for filter are \"string\" (to include all string values), \"numeric\" (to include all numeric values in the string format), \"boolean\" (to include all Boolean values in the string format \"true\"/\"false\"), \"key\" (to include all keys) or \"all\" (to include all above). These values can be combined together to include, e.g., all string and numeric values.",
            "Example": "json_to_tsvector('english', '{\"a\": \"The Fat Rats\", \"b\": 123}'::json, '[\"string\", \"numeric\"]')",
            "Result": "'123':5 'fat':2 'rat':3",
            "Link": "https://www.postgresql.org/docs/12/functions-textsearch.html",
            "Tree": "(func_application (func_name (type_function_name (identifier jsonb_to_tsvector))) ( ))"
        },
        {
            "Function": "ts_delete(vector tsvector, lexeme text)",
            "Return Type": "tsvector",
            "Description": "remove given lexeme from vector",
            "Example": "ts_delete('fat:2,4 cat:3 rat:5A'::tsvector, 'fat')",
            "Result": "'cat':3 'rat':5A",
            "Tree": "(func_application (func_name (type_function_name (identifier ts_delete))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-textsearch.html"
        },
        {
            "Function": "ts_delete(vector tsvector, lexemes text[])",
            "Return Type": "tsvector",
            "Description": "remove any occurrence of lexemes in lexemes from vector",
            "Example": "ts_delete('fat:2,4 cat:3 rat:5A'::tsvector, ARRAY['fat','rat'])",
            "Result": "'cat':3",
            "Tree": "(func_application (func_name (type_function_name (identifier ts_delete))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-textsearch.html"
        },
        {
            "Function": "ts_filter(vector tsvector, weights \"char\"[])",
            "Return Type": "tsvector",
            "Description": "select only elements with given weights from vector",
            "Example": "ts_filter('fat:2,4 cat:3b rat:5A'::tsvector, '{a,b}')",
            "Result": "'cat':3B 'rat':5A",
            "Tree": "(func_application (func_name (type_function_name (identifier ts_filter))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-textsearch.html"
        },
        {
            "Function": "ts_headline([ config regconfig, ] document text, query tsquery [, options text ])",
            "Return Type": "text",
            "Description": "display a query match",
            "Example": "ts_headline('x y z', 'z'::tsquery)",
            "Result": "x y <b>z</b>",
            "Tree": "(func_application (func_name (type_function_name (identifier ts_headline))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-textsearch.html"
        },
        {
            "Function": "ts_headline([ config regconfig, ] document json(b), query tsquery [, options text ])",
            "Return Type": "text",
            "Description": "display a query match",
            "Example": "ts_headline('{\"a\":\"x y z\"}'::json, 'z'::tsquery)",
            "Result": "{\"a\":\"x y <b>z</b>\"}",
            "Tree": "(func_application (func_name (type_function_name (identifier ts_headline))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-textsearch.html"
        },
        {
            "Function": "ts_rank([ weights float4[], ] vector tsvector, query tsquery [, normalization integer ])",
            "Return Type": "float4",
            "Description": "rank document for query",
            "Example": "ts_rank(textsearch, query)",
            "Result": "0.818",
            "Tree": "(func_application (func_name (type_function_name (identifier ts_rank))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-textsearch.html"
        },
        {
            "Function": "ts_rank_cd([ weights float4[], ] vector tsvector, query tsquery [, normalization integer ])",
            "Return Type": "float4",
            "Description": "rank document for query using cover density",
            "Example": "ts_rank_cd('{0.1, 0.2, 0.4, 1.0}', textsearch, query)",
            "Result": "2.01317",
            "Tree": "(func_application (func_name (type_function_name (identifier ts_rank_cd))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-textsearch.html"
        },
        {
            "Function": "ts_rewrite(query tsquery, target tsquery, substitute tsquery)",
            "Return Type": "tsquery",
            "Description": "replace target with substitute within query",
            "Example": "ts_rewrite('a & b'::tsquery, 'a'::tsquery, 'foo|bar'::tsquery)",
            "Result": "'b' & ( 'foo' | 'bar' )",
            "Tree": "(func_application (func_name (type_function_name (identifier ts_rewrite))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-textsearch.html"
        },
        {
            "Function": "ts_rewrite(query tsquery, select text)",
            "Return Type": "tsquery",
            "Description": "replace using targets and substitutes from a SELECT command",
            "Example": "SELECT ts_rewrite('a & b'::tsquery, 'SELECT t,s FROM aliases')",
            "Result": "'b' & ( 'foo' | 'bar' )",
            "Tree": "(func_application (func_name (type_function_name (identifier ts_rewrite))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-textsearch.html"
        },
        {
            "Function": "tsquery_phrase(query1 tsquery, query2 tsquery)",
            "Return Type": "tsquery",
            "Description": "make query that searches for query1 followed by query2 (same as <-> operator)",
            "Example": "tsquery_phrase(to_tsquery('fat'), to_tsquery('cat'))",
            "Result": "'fat' <-> 'cat'",
            "Tree": "(func_application (func_name (type_function_name (identifier tsquery_phrase))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-textsearch.html"
        },
        {
            "Function": "tsquery_phrase(query1 tsquery, query2 tsquery, distance integer)",
            "Return Type": "tsquery",
            "Description": "make query that searches for query1 followed by query2 at distance distance",
            "Example": "tsquery_phrase(to_tsquery('fat'), to_tsquery('cat'), 10)",
            "Result": "'fat' <10> 'cat'",
            "Tree": "(func_application (func_name (type_function_name (identifier tsquery_phrase))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-textsearch.html"
        },
        {
            "Function": "tsvector_to_array(tsvector)",
            "Return Type": "text[]",
            "Description": "convert tsvector to array of lexemes",
            "Example": "tsvector_to_array('fat:2,4 cat:3 rat:5A'::tsvector)",
            "Result": "{cat,fat,rat}",
            "Tree": "(func_application (func_name (type_function_name (identifier tsvector_to_array))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-textsearch.html"
        },
        {
            "Function": "tsvector_update_trigger()",
            "Return Type": "trigger",
            "Description": "trigger function for automatic tsvector column update",
            "Example": "CREATE TRIGGER ... tsvector_update_trigger(tsvcol, 'pg_catalog.swedish', title, body)",
            "Result": "",
            "Tree": "(func_application (func_name (type_function_name (identifier tsvector_update_trigger))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-textsearch.html"
        },
        {
            "Function": "tsvector_update_trigger_column()",
            "Return Type": "trigger",
            "Description": "trigger function for automatic tsvector column update",
            "Example": "CREATE TRIGGER ... tsvector_update_trigger_column(tsvcol, configcol, title, body)",
            "Result": "",
            "Tree": "(func_application (func_name (type_function_name (identifier tsvector_update_trigger_column))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-textsearch.html"
        },
        {
            "Function": "unnest(tsvector, OUT lexeme text, OUT positions smallint[], OUT weights text)",
            "Return Type": "setof record",
            "Description": "expand a tsvector to a set of rows",
            "Example": "unnest('fat:2,4 cat:3 rat:5A'::tsvector)",
            "Result": "(cat,{3},{D}) ...",
            "Tree": "(func_application (func_name (type_function_name (identifier unnest))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-textsearch.html"
        }
    ],
    [
        [
            "Function",
            "Return Type",
            "Description",
            "Example",
            "Result"
        ],
        {
            "Function": "ts_debug([ config regconfig, ] document text, OUT alias text, OUT description text, OUT token text, OUT dictionaries regdictionary[], OUT dictionary regdictionary, OUT lexemes text[])",
            "Return Type": "setof record",
            "Description": "test a configuration",
            "Example": "ts_debug('english', 'The Brightest supernovaes')",
            "Result": "(asciiword,\"Word, all ASCII\",The,{english_stem},english_stem,{}) ...",
            "Tree": "(func_application (func_name (type_function_name (identifier ts_debug))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-textsearch.html"
        },
        {
            "Function": "ts_lexize(dict regdictionary, token text)",
            "Return Type": "text[]",
            "Description": "test a dictionary",
            "Example": "ts_lexize('english_stem', 'stars')",
            "Result": "{star}",
            "Tree": "(func_application (func_name (type_function_name (identifier ts_lexize))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-textsearch.html"
        },
        {
            "Function": "ts_parse(parser_name text, document text, OUT tokid integer, OUT token text)",
            "Return Type": "setof record",
            "Description": "test a parser",
            "Example": "ts_parse('default', 'foo - bar')",
            "Result": "(1,foo) ...",
            "Tree": "(func_application (func_name (type_function_name (identifier ts_parse))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-textsearch.html"
        },
        {
            "Function": "ts_parse(parser_oid oid, document text, OUT tokid integer, OUT token text)",
            "Return Type": "setof record",
            "Description": "test a parser",
            "Example": "ts_parse(3722, 'foo - bar')",
            "Result": "(1,foo) ...",
            "Tree": "(func_application (func_name (type_function_name (identifier ts_parse))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-textsearch.html"
        },
        {
            "Function": "ts_token_type(parser_name text, OUT tokid integer, OUT alias text, OUT description text)",
            "Return Type": "setof record",
            "Description": "get token types defined by parser",
            "Example": "ts_token_type('default')",
            "Result": "(1,asciiword,\"Word, all ASCII\") ...",
            "Tree": "(func_application (func_name (type_function_name (identifier ts_token_type))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-textsearch.html"
        },
        {
            "Function": "ts_token_type(parser_oid oid, OUT tokid integer, OUT alias text, OUT description text)",
            "Return Type": "setof record",
            "Description": "get token types defined by parser",
            "Example": "ts_token_type(3722)",
            "Result": "(1,asciiword,\"Word, all ASCII\") ...",
            "Tree": "(func_application (func_name (type_function_name (identifier ts_token_type))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-textsearch.html"
        },
        {
            "Function": "ts_stat(sqlquery text, [ weights text, ] OUT word text, OUT ndoc integer, OUT nentry integer)",
            "Return Type": "setof record",
            "Description": "get statistics of a tsvector column",
            "Example": "ts_stat('SELECT vector from apod')",
            "Result": "(foo,10,15) ...",
            "Tree": "(func_application (func_name (type_function_name (identifier ts_stat))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-textsearch.html"
        }
    ],
    [
        [
            "Function",
            "Return Type",
            "Description",
            "Example",
            "Result"
        ],
        {
            "Function": "lower(anyrange)",
            "Return Type": "range's element type",
            "Description": "lower bound of range",
            "Example": "lower(numrange(1.1,2.2))",
            "Result": "1.1",
            "Tree": "(func_application (func_name (builtin_function_name lower)) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-range.html"
        },
        {
            "Function": "upper(anyrange)",
            "Return Type": "range's element type",
            "Description": "upper bound of range",
            "Example": "upper(numrange(1.1,2.2))",
            "Result": "2.2",
            "Tree": "(func_application (func_name (builtin_function_name upper)) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-range.html"
        },
        {
            "Function": "isempty(anyrange)",
            "Return Type": "boolean",
            "Description": "is the range empty?",
            "Example": "isempty(numrange(1.1,2.2))",
            "Result": "false",
            "Tree": "(func_application (func_name (type_function_name (identifier isempty))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-range.html"
        },
        {
            "Function": "lower_inc(anyrange)",
            "Return Type": "boolean",
            "Description": "is the lower bound inclusive?",
            "Example": "lower_inc(numrange(1.1,2.2))",
            "Result": "true",
            "Tree": "(func_application (func_name (type_function_name (identifier lower_inc))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-range.html"
        },
        {
            "Function": "upper_inc(anyrange)",
            "Return Type": "boolean",
            "Description": "is the upper bound inclusive?",
            "Example": "upper_inc(numrange(1.1,2.2))",
            "Result": "false",
            "Tree": "(func_application (func_name (type_function_name (identifier upper_inc))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-range.html"
        },
        {
            "Function": "lower_inf(anyrange)",
            "Return Type": "boolean",
            "Description": "is the lower bound infinite?",
            "Example": "lower_inf('(,)'::daterange)",
            "Result": "true",
            "Tree": "(func_application (func_name (type_function_name (identifier lower_inf))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-range.html"
        },
        {
            "Function": "upper_inf(anyrange)",
            "Return Type": "boolean",
            "Description": "is the upper bound infinite?",
            "Example": "upper_inf('(,)'::daterange)",
            "Result": "true",
            "Tree": "(func_application (func_name (type_function_name (identifier upper_inf))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-range.html"
        },
        {
            "Function": "range_merge(anyrange, anyrange)",
            "Return Type": "anyrange",
            "Description": "the smallest range which includes both of the given ranges",
            "Example": "range_merge('[1,2)'::int4range, '[3,4)'::int4range)",
            "Result": "[1,4)",
            "Tree": "(func_application (func_name (type_function_name (identifier range_merge))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-range.html"
        }
    ],
    [
        [
            "Function",
            "Return Type",
            "Description",
            "Example",
            "Result"
        ],
        {
            "Function": "abbrev(inet)",
            "Return Type": "text",
            "Description": "abbreviated display format as text",
            "Example": "abbrev(inet '10.1.0.0/16')",
            "Result": "10.1.0.0/16",
            "Tree": "(func_application (func_name (type_function_name (identifier abbrev))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-net.html"
        },
        {
            "Function": "abbrev(cidr)",
            "Return Type": "text",
            "Description": "abbreviated display format as text",
            "Example": "abbrev(cidr '10.1.0.0/16')",
            "Result": "10.1/16",
            "Tree": "(func_application (func_name (type_function_name (identifier abbrev))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-net.html"
        },
        {
            "Function": "broadcast(inet)",
            "Return Type": "inet",
            "Description": "broadcast address for network",
            "Example": "broadcast('192.168.1.5/24')",
            "Result": "192.168.1.255/24",
            "Tree": "(func_application (func_name (type_function_name (identifier broadcast))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-net.html"
        },
        {
            "Function": "family(inet)",
            "Return Type": "int",
            "Description": "extract family of address; 4 for IPv4, 6 for IPv6",
            "Example": "family('::1')",
            "Result": "6",
            "Tree": "(func_application (func_name (type_function_name (unreserved_keyword family))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-net.html"
        },
        {
            "Function": "host(inet)",
            "Return Type": "text",
            "Description": "extract IP address as text",
            "Example": "host('192.168.1.5/24')",
            "Result": "192.168.1.5",
            "Tree": "(func_application (func_name (type_function_name (identifier host))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-net.html"
        },
        {
            "Function": "hostmask(inet)",
            "Return Type": "inet",
            "Description": "construct host mask for network",
            "Example": "hostmask('192.168.23.20/30')",
            "Result": "0.0.0.3",
            "Tree": "(func_application (func_name (type_function_name (identifier hostmask))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-net.html"
        },
        {
            "Function": "masklen(inet)",
            "Return Type": "int",
            "Description": "extract netmask length",
            "Example": "masklen('192.168.1.5/24')",
            "Result": "24",
            "Tree": "(func_application (func_name (type_function_name (identifier masklen))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-net.html"
        },
        {
            "Function": "netmask(inet)",
            "Return Type": "inet",
            "Description": "construct netmask for network",
            "Example": "netmask('192.168.1.5/24')",
            "Result": "255.255.255.0",
            "Tree": "(func_application (func_name (type_function_name (identifier netmask))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-net.html"
        },
        {
            "Function": "network(inet)",
            "Return Type": "cidr",
            "Description": "extract network part of address",
            "Example": "network('192.168.1.5/24')",
            "Result": "192.168.1.0/24",
            "Tree": "(func_application (func_name (type_function_name (identifier network))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-net.html"
        },
        {
            "Function": "set_masklen(inet, int)",
            "Return Type": "inet",
            "Description": "set netmask length for inet value",
            "Example": "set_masklen('192.168.1.5/24', 16)",
            "Result": "192.168.1.5/16",
            "Tree": "(func_application (func_name (type_function_name (identifier set_masklen))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-net.html"
        },
        {
            "Function": "set_masklen(cidr, int)",
            "Return Type": "cidr",
            "Description": "set netmask length for cidr value",
            "Example": "set_masklen('192.168.1.0/24'::cidr, 16)",
            "Result": "192.168.0.0/16",
            "Tree": "(func_application (func_name (type_function_name (identifier set_masklen))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-net.html"
        },
        {
            "Function": "text(inet)",
            "Return Type": "text",
            "Description": "extract IP address and netmask length as text",
            "Example": "text(inet '192.168.1.5')",
            "Result": "192.168.1.5/32",
            "Tree": "(func_application (func_name (type_function_name (unreserved_keyword text))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-net.html"
        },
        {
            "Function": "inet_same_family(inet, inet)",
            "Return Type": "boolean",
            "Description": "are the addresses from the same family?",
            "Example": "inet_same_family('192.168.1.5/24', '::1')",
            "Result": "false",
            "Tree": "(func_application (func_name (type_function_name (identifier inet_same_family))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-net.html"
        },
        {
            "Function": "inet_merge(inet, inet)",
            "Return Type": "cidr",
            "Description": "the smallest network which includes both of the given networks",
            "Example": "inet_merge('192.168.1.5/24', '192.168.2.5/24')",
            "Result": "192.168.0.0/22",
            "Tree": "(func_application (func_name (type_function_name (identifier inet_merge))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-net.html"
        }
    ],
    [
        [
            "Function",
            "Return Type",
            "Description",
            "Example",
            "Result"
        ],
        {
            "Function": "trunc(macaddr)",
            "Return Type": "macaddr",
            "Description": "set last 3 bytes to zero",
            "Example": "trunc(macaddr '12:34:56:78:90:ab')",
            "Result": "12:34:56:00:00:00",
            "Tree": "(func_application (func_name (builtin_function_name trunc)) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-net.html"
        }
    ],
    [
        [
            "Function",
            "Return Type",
            "Description",
            "Example",
            "Result"
        ],
        {
            "Function": "trunc(macaddr8)",
            "Return Type": "macaddr8",
            "Description": "set last 5 bytes to zero",
            "Example": "trunc(macaddr8 '12:34:56:78:90:ab:cd:ef')",
            "Result": "12:34:56:00:00:00:00:00",
            "Tree": "(func_application (func_name (builtin_function_name trunc)) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-net.html"
        },
        {
            "Function": "macaddr8_set7bit(macaddr8)",
            "Return Type": "macaddr8",
            "Description": "set 7th bit to one, also known as modified EUI-64, for inclusion in an IPv6 address",
            "Example": "macaddr8_set7bit(macaddr8 '00:34:56:ab:cd:ef')",
            "Result": "02:34:56:ff:fe:ab:cd:ef",
            "Tree": "(func_application (func_name (type_function_name (identifier macaddr8_set7bit))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-net.html"
        }
    ],
    [
        [
            "Function",
            "Return Type",
            "Description",
            "Example",
            "Result"
        ],
        {
            "Function": "bit_length(string)",
            "Return Type": "int",
            "Description": "Number of bits in string",
            "Example": "bit_length('jose')",
            "Result": "32",
            "Tree": "(func_application (func_name (builtin_function_name bit_length)) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-string.html"
        },
        {
            "Function": "char_length(string)",
            "Return Type": "int",
            "Description": "Number of characters in string",
            "Example": "char_length('jose')",
            "Result": "4",
            "Tree": "(func_application (func_name (builtin_function_name char_length)) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-string.html"
        },
        {
            "Function": "character_length(string)",
            "Return Type": "int",
            "Description": "Number of characters in string",
            "Example": "char_length('jose')",
            "Result": "4",
            "Tree": "(func_application (func_name (builtin_function_name character_length)) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-string.html"
        },
        {
            "Function": "lower(string)",
            "Return Type": "text",
            "Description": "Convert string to lower case",
            "Example": "lower('TOM')",
            "Result": "tom",
            "Tree": "(func_application (func_name (builtin_function_name lower)) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-string.html"
        },
        {
            "Function": "substring(string [from int] [for int])",
            "Return Type": "text",
            "Description": "Extract substring",
            "Example": "substring('Thomas' from 2 for 3)",
            "Result": "hom",
            "Tree": "(func_expr_common_subexpr substring ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-string.html"
        },
        {
            "Function": "substring(string from pattern)",
            "Return Type": "text",
            "Description": "Extract substring matching POSIX regular expression. See Section\u00a09.7 for more information on pattern matching.",
            "Example": "substring('Thomas' from '...$')",
            "Result": "mas",
            "Tree": "(func_expr_common_subexpr substring ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-string.html"
        },
        {
            "Function": "substring(string from pattern for escape)",
            "Return Type": "text",
            "Description": "Extract substring matching SQL regular expression. See Section\u00a09.7 for more information on pattern matching.",
            "Example": "substring('Thomas' from '%#\"o_a#\"_' for '#')",
            "Result": "oma",
            "Tree": "(func_expr_common_subexpr substring ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-string.html"
        },
        {
            "Function": "trim([leading | trailing | both] [characters] from string)",
            "Return Type": "text",
            "Description": "Remove the longest string containing only characters from characters (a space by default) from the start, end, or both ends (both is the default) of string",
            "Example": "trim(both 'xyz' from 'yxTomxx')",
            "Result": "Tom",
            "Tree": "(func_expr_common_subexpr trim ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-string.html"
        },
        {
            "Function": "trim([leading | trailing | both] [from] string [, characters] )",
            "Return Type": "text",
            "Description": "Non-standard syntax for trim()",
            "Example": "trim(both from 'yxTomxx', 'xyz')",
            "Result": "Tom",
            "Tree": "(func_expr_common_subexpr trim ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-string.html"
        },
        {
            "Function": "upper(string)",
            "Return Type": "text",
            "Description": "Convert string to upper case",
            "Example": "upper('tom')",
            "Result": "TOM",
            "Tree": "(func_application (func_name (builtin_function_name upper)) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-string.html"
        }
    ],
    [
        [
            "Function",
            "Return Type",
            "Description",
            "Example",
            "Result"
        ],
        {
            "Function": "ascii(string)",
            "Return Type": "int",
            "Description": "ASCII code of the first character of the argument. For UTF8 returns the Unicode code point of the character. For other multibyte encodings, the argument must be an ASCII character.",
            "Example": "ascii('x')",
            "Result": "120",
            "Tree": "(func_application (func_name (builtin_function_name ascii)) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-string.html"
        },
        {
            "Function": "btrim(string text [, characters text])",
            "Return Type": "text",
            "Description": "Remove the longest string consisting only of characters in characters (a space by default) from the start and end of string",
            "Example": "btrim('xyxtrimyyx', 'xyz')",
            "Result": "trim",
            "Tree": "(func_application (func_name (builtin_function_name btrim)) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-string.html"
        },
        {
            "Function": "chr(int)",
            "Return Type": "text",
            "Description": "Character with the given code. For UTF8 the argument is treated as a Unicode code point. For other multibyte encodings the argument must designate an ASCII character. The NULL (0) character is not allowed because text data types cannot store such bytes.",
            "Example": "chr(65)",
            "Result": "A",
            "Tree": "(func_application (func_name (builtin_function_name chr)) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-string.html"
        },
        {
            "Function": "concat(str \"any\" [, str \"any\" [, ...] ])",
            "Return Type": "text",
            "Description": "Concatenate the text representations of all the arguments. NULL arguments are ignored.",
            "Example": "concat('abcde', 2, NULL, 22)",
            "Result": "abcde222",
            "Tree": "(func_application (func_name (builtin_function_name concat)) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-string.html"
        },
        {
            "Function": "concat_ws(sep text, str \"any\" [, str \"any\" [, ...] ])",
            "Return Type": "text",
            "Description": "Concatenate all but the first argument with separators. The first argument is used as the separator string. NULL arguments are ignored.",
            "Example": "concat_ws(',', 'abcde', 2, NULL, 22)",
            "Result": "abcde,2,22",
            "Tree": "(func_application (func_name (builtin_function_name concat_ws)) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-string.html"
        },
        {
            "Function": "convert(string bytea, src_encoding name, dest_encoding name)",
            "Return Type": "bytea",
            "Description": "Convert string to dest_encoding. The original encoding is specified by src_encoding. The string must be valid in this encoding. Conversions can be defined by CREATE CONVERSION. Also there are some predefined conversions. See Table\u00a09.11 for available conversions.",
            "Example": "convert('text_in_utf8', 'UTF8', 'LATIN1')",
            "Result": "text_in_utf8 represented in Latin-1 encoding (ISO 8859-1)",
            "Tree": "(func_application (func_name (type_function_name (identifier convert))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-string.html"
        },
        {
            "Function": "convert_from(string bytea, src_encoding name)",
            "Return Type": "text",
            "Description": "Convert string to the database encoding. The original encoding is specified by src_encoding. The string must be valid in this encoding.",
            "Example": "convert_from('text_in_utf8', 'UTF8')",
            "Result": "text_in_utf8 represented in the current database encoding",
            "Tree": "(func_application (func_name (type_function_name (identifier convert_from))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-string.html"
        },
        {
            "Function": "convert_to(string text, dest_encoding name)",
            "Return Type": "bytea",
            "Description": "Convert string to dest_encoding.",
            "Example": "convert_to('some text', 'UTF8')",
            "Result": "some text represented in the UTF8 encoding",
            "Tree": "(func_application (func_name (type_function_name (identifier convert_to))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-string.html"
        },
        {
            "Function": "format(formatstr text [, formatarg \"any\" [, ...] ])",
            "Return Type": "text",
            "Description": "Format arguments according to a format string. This function is similar to the C function sprintf. See Section\u00a09.4.1.",
            "Example": "format('Hello %s, %1$s', 'World')",
            "Result": "Hello World, World",
            "Tree": "(func_application (func_name (builtin_function_name format)) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-string.html"
        },
        {
            "Function": "initcap(string)",
            "Return Type": "text",
            "Description": "Convert the first letter of each word to upper case and the rest to lower case. Words are sequences of alphanumeric characters separated by non-alphanumeric characters.",
            "Example": "initcap('hi THOMAS')",
            "Result": "Hi Thomas",
            "Tree": "(func_application (func_name (builtin_function_name initcap)) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-string.html"
        },
        {
            "Function": "left(str text, n int)",
            "Return Type": "text",
            "Description": "Return first n characters in the string. When n is negative, return all but last |n| characters.",
            "Example": "left('abcde', 2)",
            "Result": "ab",
            "Tree": "(func_application (func_name left) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-string.html"
        },
        {
            "Function": "length(string)",
            "Return Type": "int",
            "Description": "Number of characters in string",
            "Example": "length('jose')",
            "Result": "4",
            "Tree": "(func_application (func_name (builtin_function_name length)) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-string.html"
        },
        {
            "Function": "length(string bytea, encoding name )",
            "Return Type": "int",
            "Description": "Number of characters in string in the given encoding. The string must be valid in this encoding.",
            "Example": "length('jose', 'UTF8')",
            "Result": "4",
            "Tree": "(func_application (func_name (builtin_function_name length)) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-string.html"
        },
        {
            "Function": "lpad(string text, length int [, fill text])",
            "Return Type": "text",
            "Description": "Fill up the string to length length by prepending the characters fill (a space by default). If the string is already longer than length then it is truncated (on the right).",
            "Example": "lpad('hi', 5, 'xy')",
            "Result": "xyxhi",
            "Tree": "(func_application (func_name (builtin_function_name lpad)) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-string.html"
        },
        {
            "Function": "ltrim(string text [, characters text])",
            "Return Type": "text",
            "Description": "Remove the longest string containing only characters from characters (a space by default) from the start of string",
            "Example": "ltrim('zzzytest', 'xyz')",
            "Result": "test",
            "Tree": "(func_application (func_name (builtin_function_name ltrim)) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-string.html"
        },
        {
            "Function": "md5(string)",
            "Return Type": "text",
            "Description": "Calculates the MD5 hash of string, returning the result in hexadecimal",
            "Example": "md5('abc')",
            "Result": "900150983cd24fb0 d6963f7d28e17f72",
            "Tree": "(func_application (func_name (builtin_function_name md5)) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-string.html"
        },
        {
            "Function": "parse_ident(qualified_identifier text [, strictmode boolean DEFAULT true ] )",
            "Return Type": "text[]",
            "Description": "Split qualified_identifier into an array of identifiers, removing any quoting of individual identifiers. By default, extra characters after the last identifier are considered an error; but if the second parameter is false, then such extra characters are ignored. (This behavior is useful for parsing names for objects like functions.) Note that this function does not truncate over-length identifiers. If you want truncation you can cast the result to name[].",
            "Example": "parse_ident('\"SomeSchema\".someTable')",
            "Result": "{SomeSchema,sometable}",
            "Tree": "(func_application (func_name (builtin_function_name parse_ident)) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-string.html"
        },
        {
            "Function": "pg_client_encoding()",
            "Return Type": "name",
            "Description": "Current client encoding name",
            "Example": "pg_client_encoding()",
            "Result": "SQL_ASCII",
            "Tree": "(func_application (func_name (builtin_function_name pg_client_encoding)) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-string.html"
        },
        {
            "Function": "quote_ident(string text)",
            "Return Type": "text",
            "Description": "Return the given string suitably quoted to be used as an identifier in an SQL statement string. Quotes are added only if necessary (i.e., if the string contains non-identifier characters or would be case-folded). Embedded quotes are properly doubled. See also Example\u00a042.1.",
            "Example": "quote_ident('Foo bar')",
            "Result": "\"Foo bar\"",
            "Tree": "(func_application (func_name (builtin_function_name quote_ident)) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-string.html"
        },
        {
            "Function": "quote_literal(string text)",
            "Return Type": "text",
            "Description": "Return the given string suitably quoted to be used as a string literal in an SQL statement string. Embedded single-quotes and backslashes are properly doubled. Note that quote_literal returns null on null input; if the argument might be null, quote_nullable is often more suitable. See also Example\u00a042.1.",
            "Example": "quote_literal(E'O\\'Reilly')",
            "Result": "'O''Reilly'",
            "Tree": "(func_application (func_name (builtin_function_name quote_literal)) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-string.html"
        },
        {
            "Function": "quote_literal(value anyelement)",
            "Return Type": "text",
            "Description": "Coerce the given value to text and then quote it as a literal. Embedded single-quotes and backslashes are properly doubled.",
            "Example": "quote_literal(42.5)",
            "Result": "'42.5'",
            "Tree": "(func_application (func_name (builtin_function_name quote_literal)) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-string.html"
        },
        {
            "Function": "quote_nullable(string text)",
            "Return Type": "text",
            "Description": "Return the given string suitably quoted to be used as a string literal in an SQL statement string; or, if the argument is null, return NULL. Embedded single-quotes and backslashes are properly doubled. See also Example\u00a042.1.",
            "Example": "quote_nullable(NULL)",
            "Result": "NULL",
            "Tree": "(func_application (func_name (builtin_function_name quote_nullable)) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-string.html"
        },
        {
            "Function": "quote_nullable(value anyelement)",
            "Return Type": "text",
            "Description": "Coerce the given value to text and then quote it as a literal; or, if the argument is null, return NULL. Embedded single-quotes and backslashes are properly doubled.",
            "Example": "quote_nullable(42.5)",
            "Result": "'42.5'",
            "Tree": "(func_application (func_name (builtin_function_name quote_nullable)) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-string.html"
        },
        {
            "Function": "regexp_match(string text, pattern text [, flags text])",
            "Return Type": "text[]",
            "Description": "Return captured substring(s) resulting from the first match of a POSIX regular expression to the string. See Section\u00a09.7.3 for more information.",
            "Example": "regexp_match('foobarbequebaz', '(bar)(beque)')",
            "Result": "{bar,beque}",
            "Tree": "(func_application (func_name (builtin_function_name regexp_match)) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-string.html"
        },
        {
            "Function": "regexp_matches(string text, pattern text [, flags text])",
            "Return Type": "setof text[]",
            "Description": "Return captured substring(s) resulting from matching a POSIX regular expression to the string. See Section\u00a09.7.3 for more information.",
            "Example": "regexp_matches('foobarbequebaz', 'ba.', 'g')",
            "Result": "{bar}\n{baz}(2 rows)",
            "Tree": "(func_application (func_name (builtin_function_name regexp_matches)) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-string.html"
        },
        {
            "Function": "regexp_replace(string text, pattern text, replacement text [, flags text])",
            "Return Type": "text",
            "Description": "Replace substring(s) matching a POSIX regular expression. See Section\u00a09.7.3 for more information.",
            "Example": "regexp_replace('Thomas', '.[mN]a.', 'M')",
            "Result": "ThM",
            "Tree": "(func_application (func_name (builtin_function_name regexp_replace)) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-string.html"
        },
        {
            "Function": "regexp_split_to_array(string text, pattern text [, flags text ])",
            "Return Type": "text[]",
            "Description": "Split string using a POSIX regular expression as the delimiter. See Section\u00a09.7.3 for more information.",
            "Example": "regexp_split_to_array('hello world', '\\s+')",
            "Result": "{hello,world}",
            "Tree": "(func_application (func_name (builtin_function_name regexp_split_to_array)) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-string.html"
        },
        {
            "Function": "regexp_split_to_table(string text, pattern text [, flags text])",
            "Return Type": "setof text",
            "Description": "Split string using a POSIX regular expression as the delimiter. See Section\u00a09.7.3 for more information.",
            "Example": "regexp_split_to_table('hello world', '\\s+')",
            "Result": "hello\nworld(2 rows)",
            "Tree": "(func_application (func_name (builtin_function_name regexp_split_to_table)) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-string.html"
        },
        {
            "Function": "repeat(string text, number int)",
            "Return Type": "text",
            "Description": "Repeat string the specified number of times",
            "Example": "repeat('Pg', 4)",
            "Result": "PgPgPgPg",
            "Tree": "(func_application (func_name (builtin_function_name repeat)) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-string.html"
        },
        {
            "Function": "replace(string text, from text, to text)",
            "Return Type": "text",
            "Description": "Replace all occurrences in string of substring from with substring to",
            "Example": "replace('abcdefabcdef', 'cd', 'XX')",
            "Result": "abXXefabXXef",
            "Tree": "(func_application (func_name (builtin_function_name replace)) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-string.html"
        },
        {
            "Function": "reverse(str)",
            "Return Type": "text",
            "Description": "Return reversed string.",
            "Example": "reverse('abcde')",
            "Result": "edcba",
            "Tree": "(func_application (func_name (builtin_function_name reverse)) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-string.html"
        },
        {
            "Function": "right(str text, n int)",
            "Return Type": "text",
            "Description": "Return last n characters in the string. When n is negative, return all but first |n| characters.",
            "Example": "right('abcde', 2)",
            "Result": "de",
            "Tree": "(func_application (func_name right) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-string.html"
        },
        {
            "Function": "rpad(string text, length int [, fill text])",
            "Return Type": "text",
            "Description": "Fill up the string to length length by appending the characters fill (a space by default). If the string is already longer than length then it is truncated.",
            "Example": "rpad('hi', 5, 'xy')",
            "Result": "hixyx",
            "Tree": "(func_application (func_name (builtin_function_name rpad)) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-string.html"
        },
        {
            "Function": "rtrim(string text [, characters text])",
            "Return Type": "text",
            "Description": "Remove the longest string containing only characters from characters (a space by default) from the end of string",
            "Example": "rtrim('testxxzx', 'xyz')",
            "Result": "test",
            "Tree": "(func_application (func_name (builtin_function_name rtrim)) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-string.html"
        },
        {
            "Function": "split_part(string text, delimiter text, field int)",
            "Return Type": "text",
            "Description": "Split string on delimiter and return the given field (counting from one)",
            "Example": "split_part('abc~@~def~@~ghi', '~@~', 2)",
            "Result": "def",
            "Tree": "(func_application (func_name (builtin_function_name split_part)) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-string.html"
        },
        {
            "Function": "strpos(string, substring)",
            "Return Type": "int",
            "Description": "Location of specified substring (same as position(substring in string), but note the reversed argument order)",
            "Example": "strpos('high', 'ig')",
            "Result": "2",
            "Tree": "(func_application (func_name (builtin_function_name strpos)) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-string.html"
        },
        {
            "Function": "substr(string, from [, count])",
            "Return Type": "text",
            "Description": "Extract substring (same as substring(string from from for count))",
            "Example": "substr('alphabet', 3, 2)",
            "Result": "ph",
            "Tree": "(func_application (func_name (builtin_function_name substr)) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-string.html"
        },
        {
            "Function": "starts_with(string, prefix)",
            "Return Type": "bool",
            "Description": "Returns true if string starts with prefix.",
            "Example": "starts_with('alphabet', 'alph')",
            "Result": "t",
            "Tree": "(func_application (func_name (builtin_function_name starts_with)) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-string.html"
        },
        {
            "Function": "to_ascii(string text [, encoding text])",
            "Return Type": "text",
            "Description": "Convert string to ASCII from another encoding (only supports conversion from LATIN1, LATIN2, LATIN9, and WIN1250 encodings)",
            "Example": "to_ascii('Karel')",
            "Result": "Karel",
            "Tree": "(func_application (func_name (builtin_function_name to_ascii)) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-string.html"
        },
        {
            "Function": "to_hex(number int or bigint)",
            "Return Type": "text",
            "Description": "Convert number to its equivalent hexadecimal representation",
            "Example": "to_hex(2147483647)",
            "Result": "7fffffff",
            "Tree": "(func_application (func_name (builtin_function_name to_hex)) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-string.html"
        },
        {
            "Function": "translate(string text, from text, to text)",
            "Return Type": "text",
            "Description": "Any character in string that matches a character in the from set is replaced by the corresponding character in the to set. If from is longer than to, occurrences of the extra characters in from are removed.",
            "Example": "translate('12345', '143', 'ax')",
            "Result": "a2x5",
            "Tree": "(func_application (func_name (builtin_function_name translate)) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-string.html"
        }
    ],
    [
        [
            "Function",
            "Argument Type(s)",
            "Return Type",
            "Partial Mode",
            "Description"
        ],
        {
            "Function": "array_agg(expression)",
            "Argument Type(s)": "any non-array type",
            "Return Type": "array of the argument type",
            "Partial Mode": "No",
            "Description": "input values, including nulls, concatenated into an array",
            "Tree": "(func_application (func_name (type_function_name (identifier array_agg))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-aggregate.html"
        },
        {
            "Function": "array_agg(expression)",
            "Argument Type(s)": "any array type",
            "Return Type": "same as argument data type",
            "Partial Mode": "No",
            "Description": "input arrays concatenated into array of one higher dimension (inputs must all have same dimensionality, and cannot be empty or null)",
            "Tree": "(func_application (func_name (type_function_name (identifier array_agg))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-aggregate.html"
        },
        {
            "Function": "avg(expression)",
            "Argument Type(s)": "smallint, int, bigint, real, double precision, numeric, or interval",
            "Return Type": "numeric for any integer-type argument, double precision for a floating-point argument, otherwise the same as the argument data type",
            "Partial Mode": "Yes",
            "Description": "the average (arithmetic mean) of all non-null input values",
            "Tree": "(func_application (func_name (type_function_name (identifier avg))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-aggregate.html"
        },
        {
            "Function": "bit_and(expression)",
            "Argument Type(s)": "smallint, int, bigint, or bit",
            "Return Type": "same as argument data type",
            "Partial Mode": "Yes",
            "Description": "the bitwise AND of all non-null input values, or null if none",
            "Tree": "(func_application (func_name (type_function_name (identifier bit_and))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-aggregate.html"
        },
        {
            "Function": "bit_or(expression)",
            "Argument Type(s)": "smallint, int, bigint, or bit",
            "Return Type": "same as argument data type",
            "Partial Mode": "Yes",
            "Description": "the bitwise OR of all non-null input values, or null if none",
            "Tree": "(func_application (func_name (type_function_name (identifier bit_or))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-aggregate.html"
        },
        {
            "Function": "bool_and(expression)",
            "Argument Type(s)": "bool",
            "Return Type": "bool",
            "Partial Mode": "Yes",
            "Description": "true if all input values are true, otherwise false",
            "Tree": "(func_application (func_name (type_function_name (identifier bool_and))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-aggregate.html"
        },
        {
            "Function": "bool_or(expression)",
            "Argument Type(s)": "bool",
            "Return Type": "bool",
            "Partial Mode": "Yes",
            "Description": "true if at least one input value is true, otherwise false",
            "Tree": "(func_application (func_name (type_function_name (identifier bool_or))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-aggregate.html"
        },
        {
            "Function": "count(*)",
            "Argument Type(s)": "",
            "Return Type": "bigint",
            "Partial Mode": "Yes",
            "Description": "number of input rows",
            "Tree": "(func_application (func_name (type_function_name (identifier count))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-aggregate.html"
        },
        {
            "Function": "count(expression)",
            "Argument Type(s)": "any",
            "Return Type": "bigint",
            "Partial Mode": "Yes",
            "Description": "number of input rows for which the value of expression is not null",
            "Tree": "(func_application (func_name (type_function_name (identifier count))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-aggregate.html"
        },
        {
            "Function": "every(expression)",
            "Argument Type(s)": "bool",
            "Return Type": "bool",
            "Partial Mode": "Yes",
            "Description": "equivalent to bool_and",
            "Tree": "(func_application (func_name (type_function_name (identifier every))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-aggregate.html"
        },
        {
            "Function": "json_agg(expression)",
            "Argument Type(s)": "any",
            "Return Type": "json",
            "Partial Mode": "No",
            "Description": "aggregates values, including nulls, as a JSON array",
            "Tree": "(func_application (func_name (type_function_name (identifier json_agg))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-aggregate.html"
        },
        {
            "Function": "jsonb_agg(expression)",
            "Argument Type(s)": "any",
            "Return Type": "jsonb",
            "Partial Mode": "No",
            "Description": "aggregates values, including nulls, as a JSON array",
            "Tree": "(func_application (func_name (type_function_name (identifier jsonb_agg))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-aggregate.html"
        },
        {
            "Function": "json_object_agg(name, value)",
            "Argument Type(s)": "(any, any)",
            "Return Type": "json",
            "Partial Mode": "No",
            "Description": "aggregates name/value pairs as a JSON object; values can be null, but not names",
            "Tree": "(func_application (func_name (type_function_name (identifier json_object_agg))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-aggregate.html"
        },
        {
            "Function": "jsonb_object_agg(name, value)",
            "Argument Type(s)": "(any, any)",
            "Return Type": "jsonb",
            "Partial Mode": "No",
            "Description": "aggregates name/value pairs as a JSON object; values can be null, but not names",
            "Tree": "(func_application (func_name (type_function_name (identifier jsonb_object_agg))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-aggregate.html"
        },
        {
            "Function": "max(expression)",
            "Argument Type(s)": "any numeric, string, date/time, network, or enum type, or arrays of these types",
            "Return Type": "same as argument type",
            "Partial Mode": "Yes",
            "Description": "maximum value of expression across all non-null input values",
            "Tree": "(func_application (func_name (type_function_name (identifier max))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-aggregate.html"
        },
        {
            "Function": "min(expression)",
            "Argument Type(s)": "any numeric, string, date/time, network, or enum type, or arrays of these types",
            "Return Type": "same as argument type",
            "Partial Mode": "Yes",
            "Description": "minimum value of expression across all non-null input values",
            "Tree": "(func_application (func_name (type_function_name (identifier min))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-aggregate.html"
        },
        {
            "Function": "string_agg(expression, delimiter)",
            "Argument Type(s)": "(text, text) or (bytea, bytea)",
            "Return Type": "same as argument types",
            "Partial Mode": "No",
            "Description": "non-null input values concatenated into a string, separated by delimiter",
            "Tree": "(func_application (func_name (type_function_name (identifier string_agg))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-aggregate.html"
        },
        {
            "Function": "sum(expression)",
            "Argument Type(s)": "smallint, int, bigint, real, double precision, numeric, interval, or money",
            "Return Type": "bigint for smallint or int arguments, numeric for bigint arguments, otherwise the same as the argument data type",
            "Partial Mode": "Yes",
            "Description": "sum of expression across all non-null input values",
            "Tree": "(func_application (func_name (type_function_name (identifier sum))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-aggregate.html"
        },
        {
            "Function": "xmlagg(expression)",
            "Argument Type(s)": "xml",
            "Return Type": "xml",
            "Partial Mode": "No",
            "Description": "concatenation of non-null XML values (see also Section\u00a09.14.1.7)",
            "Tree": "(func_application (func_name (builtin_function_name xmlagg)) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-aggregate.html"
        }
    ],
    [
        [
            "Function",
            "Argument Type",
            "Return Type",
            "Partial Mode",
            "Description"
        ],
        {
            "Function": "corr(Y, X)",
            "Argument Type": "double precision",
            "Return Type": "double precision",
            "Partial Mode": "Yes",
            "Description": "correlation coefficient",
            "Tree": "(func_application (func_name (type_function_name (identifier corr))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-aggregate.html"
        },
        {
            "Function": "covar_pop(Y, X)",
            "Argument Type": "double precision",
            "Return Type": "double precision",
            "Partial Mode": "Yes",
            "Description": "population covariance",
            "Tree": "(func_application (func_name (type_function_name (identifier covar_pop))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-aggregate.html"
        },
        {
            "Function": "covar_samp(Y, X)",
            "Argument Type": "double precision",
            "Return Type": "double precision",
            "Partial Mode": "Yes",
            "Description": "sample covariance",
            "Tree": "(func_application (func_name (type_function_name (identifier covar_samp))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-aggregate.html"
        },
        {
            "Function": "regr_avgx(Y, X)",
            "Argument Type": "double precision",
            "Return Type": "double precision",
            "Partial Mode": "Yes",
            "Description": "average of the independent variable (sum(X)/N)",
            "Tree": "(func_application (func_name (type_function_name (identifier regr_avgx))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-aggregate.html"
        },
        {
            "Function": "regr_avgy(Y, X)",
            "Argument Type": "double precision",
            "Return Type": "double precision",
            "Partial Mode": "Yes",
            "Description": "average of the dependent variable (sum(Y)/N)",
            "Tree": "(func_application (func_name (type_function_name (identifier regr_avgy))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-aggregate.html"
        },
        {
            "Function": "regr_count(Y, X)",
            "Argument Type": "double precision",
            "Return Type": "bigint",
            "Partial Mode": "Yes",
            "Description": "number of input rows in which both expressions are nonnull",
            "Tree": "(func_application (func_name (type_function_name (identifier regr_count))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-aggregate.html"
        },
        {
            "Function": "regr_intercept(Y, X)",
            "Argument Type": "double precision",
            "Return Type": "double precision",
            "Partial Mode": "Yes",
            "Description": "y-intercept of the least-squares-fit linear equation determined by the (X, Y) pairs",
            "Tree": "(func_application (func_name (type_function_name (identifier regr_intercept))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-aggregate.html"
        },
        {
            "Function": "regr_r2(Y, X)",
            "Argument Type": "double precision",
            "Return Type": "double precision",
            "Partial Mode": "Yes",
            "Description": "square of the correlation coefficient",
            "Tree": "(func_application (func_name (type_function_name (identifier regr_r2))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-aggregate.html"
        },
        {
            "Function": "regr_slope(Y, X)",
            "Argument Type": "double precision",
            "Return Type": "double precision",
            "Partial Mode": "Yes",
            "Description": "slope of the least-squares-fit linear equation determined by the (X, Y) pairs",
            "Tree": "(func_application (func_name (type_function_name (identifier regr_slope))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-aggregate.html"
        },
        {
            "Function": "regr_sxx(Y, X)",
            "Argument Type": "double precision",
            "Return Type": "double precision",
            "Partial Mode": "Yes",
            "Description": "sum(X^2) - sum(X)^2/N (\u201csum of squares\u201d of the independent variable)",
            "Tree": "(func_application (func_name (type_function_name (identifier regr_sxx))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-aggregate.html"
        },
        {
            "Function": "regr_sxy(Y, X)",
            "Argument Type": "double precision",
            "Return Type": "double precision",
            "Partial Mode": "Yes",
            "Description": "sum(X*Y) - sum(X) * sum(Y)/N (\u201csum of products\u201d of independent times dependent variable)",
            "Tree": "(func_application (func_name (type_function_name (identifier regr_sxy))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-aggregate.html"
        },
        {
            "Function": "regr_syy(Y, X)",
            "Argument Type": "double precision",
            "Return Type": "double precision",
            "Partial Mode": "Yes",
            "Description": "sum(Y^2) - sum(Y)^2/N (\u201csum of squares\u201d of the dependent variable)",
            "Tree": "(func_application (func_name (type_function_name (identifier regr_syy))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-aggregate.html"
        },
        {
            "Function": "stddev(expression)",
            "Argument Type": "smallint, int, bigint, real, double precision, or numeric",
            "Return Type": "double precision for floating-point arguments, otherwise numeric",
            "Partial Mode": "Yes",
            "Description": "historical alias for stddev_samp",
            "Tree": "(func_application (func_name (type_function_name (identifier stddev))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-aggregate.html"
        },
        {
            "Function": "stddev_pop(expression)",
            "Argument Type": "smallint, int, bigint, real, double precision, or numeric",
            "Return Type": "double precision for floating-point arguments, otherwise numeric",
            "Partial Mode": "Yes",
            "Description": "population standard deviation of the input values",
            "Tree": "(func_application (func_name (type_function_name (identifier stddev_pop))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-aggregate.html"
        },
        {
            "Function": "stddev_samp(expression)",
            "Argument Type": "smallint, int, bigint, real, double precision, or numeric",
            "Return Type": "double precision for floating-point arguments, otherwise numeric",
            "Partial Mode": "Yes",
            "Description": "sample standard deviation of the input values",
            "Tree": "(func_application (func_name (type_function_name (identifier stddev_samp))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-aggregate.html"
        },
        {
            "Function": "variance(expression)",
            "Argument Type": "smallint, int, bigint, real, double precision, or numeric",
            "Return Type": "double precision for floating-point arguments, otherwise numeric",
            "Partial Mode": "Yes",
            "Description": "historical alias for var_samp",
            "Tree": "(func_application (func_name (type_function_name (identifier variance))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-aggregate.html"
        },
        {
            "Function": "var_pop(expression)",
            "Argument Type": "smallint, int, bigint, real, double precision, or numeric",
            "Return Type": "double precision for floating-point arguments, otherwise numeric",
            "Partial Mode": "Yes",
            "Description": "population variance of the input values (square of the population standard deviation)",
            "Tree": "(func_application (func_name (type_function_name (identifier var_pop))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-aggregate.html"
        },
        {
            "Function": "var_samp(expression)",
            "Argument Type": "smallint, int, bigint, real, double precision, or numeric",
            "Return Type": "double precision for floating-point arguments, otherwise numeric",
            "Partial Mode": "Yes",
            "Description": "sample variance of the input values (square of the sample standard deviation)",
            "Tree": "(func_application (func_name (type_function_name (identifier var_samp))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-aggregate.html"
        }
    ],
    [
        [
            "Function",
            "Direct Argument Type(s)",
            "Aggregated Argument Type(s)",
            "Return Type",
            "Partial Mode",
            "Description"
        ],
        {
            "Function": "mode() WITHIN GROUP (ORDER BY sort_expression)",
            "Direct Argument Type(s)": "",
            "Aggregated Argument Type(s)": "any sortable type",
            "Return Type": "same as sort expression",
            "Partial Mode": "No",
            "Description": "returns the most frequent input value (arbitrarily choosing the first one if there are multiple equally-frequent results)",
            "Tree": "(func_application (func_name (type_function_name (unreserved_keyword mode))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-aggregate.html"
        },
        {
            "Function": "percentile_cont(fraction) WITHIN GROUP (ORDER BY sort_expression)",
            "Direct Argument Type(s)": "double precision",
            "Aggregated Argument Type(s)": "double precision or interval",
            "Return Type": "same as sort expression",
            "Partial Mode": "No",
            "Description": "continuous percentile: returns a value corresponding to the specified fraction in the ordering, interpolating between adjacent input items if needed",
            "Tree": "(func_application (func_name (type_function_name (identifier percentile_cont))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-aggregate.html"
        },
        {
            "Function": "percentile_cont(fractions) WITHIN GROUP (ORDER BY sort_expression)",
            "Direct Argument Type(s)": "double precision[]",
            "Aggregated Argument Type(s)": "double precision or interval",
            "Return Type": "array of sort expression's type",
            "Partial Mode": "No",
            "Description": "multiple continuous percentile: returns an array of results matching the shape of the fractions parameter, with each non-null element replaced by the value corresponding to that percentile",
            "Tree": "(func_application (func_name (type_function_name (identifier percentile_cont))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-aggregate.html"
        },
        {
            "Function": "percentile_disc(fraction) WITHIN GROUP (ORDER BY sort_expression)",
            "Direct Argument Type(s)": "double precision",
            "Aggregated Argument Type(s)": "any sortable type",
            "Return Type": "same as sort expression",
            "Partial Mode": "No",
            "Description": "discrete percentile: returns the first input value whose position in the ordering equals or exceeds the specified fraction",
            "Tree": "(func_application (func_name (type_function_name (identifier percentile_disc))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-aggregate.html"
        },
        {
            "Function": "percentile_disc(fractions) WITHIN GROUP (ORDER BY sort_expression)",
            "Direct Argument Type(s)": "double precision[]",
            "Aggregated Argument Type(s)": "any sortable type",
            "Return Type": "array of sort expression's type",
            "Partial Mode": "No",
            "Description": "multiple discrete percentile: returns an array of results matching the shape of the fractions parameter, with each non-null element replaced by the input value corresponding to that percentile",
            "Tree": "(func_application (func_name (type_function_name (identifier percentile_disc))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-aggregate.html"
        }
    ],
    [
        [
            "Function",
            "Direct Argument Type(s)",
            "Aggregated Argument Type(s)",
            "Return Type",
            "Partial Mode",
            "Description"
        ],
        {
            "Function": "percent_rank(args) WITHIN GROUP (ORDER BY sorted_args)",
            "Direct Argument Type(s)": "VARIADIC \"any\"",
            "Aggregated Argument Type(s)": "VARIADIC \"any\"",
            "Return Type": "double precision",
            "Partial Mode": "No",
            "Description": "relative rank of the hypothetical row, ranging from 0 to 1",
            "Tree": "(func_application (func_name (type_function_name (identifier rank))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-aggregate.html"
        },
        {
            "Function": "dense_rank(args) WITHIN GROUP (ORDER BY sorted_args)",
            "Direct Argument Type(s)": "VARIADIC \"any\"",
            "Aggregated Argument Type(s)": "VARIADIC \"any\"",
            "Return Type": "bigint",
            "Partial Mode": "No",
            "Description": "rank of the hypothetical row, without gaps",
            "Tree": "(func_application (func_name (type_function_name (identifier dense_rank))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-aggregate.html"
        },
        {
            "Function": "percent_rank(args) WITHIN GROUP (ORDER BY sorted_args)",
            "Direct Argument Type(s)": "VARIADIC \"any\"",
            "Aggregated Argument Type(s)": "VARIADIC \"any\"",
            "Return Type": "double precision",
            "Partial Mode": "No",
            "Description": "relative rank of the hypothetical row, ranging from 0 to 1",
            "Tree": "(func_application (func_name (type_function_name (identifier percent_rank))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-aggregate.html"
        },
        {
            "Function": "cume_dist(args) WITHIN GROUP (ORDER BY sorted_args)",
            "Direct Argument Type(s)": "VARIADIC \"any\"",
            "Aggregated Argument Type(s)": "VARIADIC \"any\"",
            "Return Type": "double precision",
            "Partial Mode": "No",
            "Description": "relative rank of the hypothetical row, ranging from 1/N to 1",
            "Tree": "(func_application (func_name (type_function_name (identifier cume_dist))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-aggregate.html"
        }
    ],
    [
        [
            "Function",
            "Return Type",
            "Description"
        ],
        {
            "Function": "current_catalog",
            "Return Type": "name",
            "Description": "name of current database (called \u201ccatalog\u201d in the SQL standard)",
            "Tree": "(func_expr_common_subexpr current_catalog)",
            "Link": "https://www.postgresql.org/docs/12/functions-info.html"
        },
        {
            "Function": "current_database()",
            "Return Type": "name",
            "Description": "name of current database",
            "Tree": "(func_application (func_name (type_function_name (identifier current_database))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-info.html"
        },
        {
            "Function": "current_query()",
            "Return Type": "text",
            "Description": "text of the currently executing query, as submitted by the client (might contain more than one statement)",
            "Tree": "(func_application (func_name (type_function_name (identifier current_query))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-info.html"
        },
        {
            "Function": "current_role",
            "Return Type": "name",
            "Description": "equivalent to current_user",
            "Tree": "(func_expr_common_subexpr current_role)",
            "Link": "https://www.postgresql.org/docs/12/functions-info.html"
        },
        {
            "Function": "current_schemas(boolean)",
            "Return Type": "name[]",
            "Description": "names of schemas in search path, optionally including implicit schemas",
            "Tree": "(func_application (func_name (type_function_name (identifier current_schemas))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-info.html"
        },
        {
            "Function": "current_user",
            "Return Type": "name",
            "Description": "user name of current execution context",
            "Tree": "(func_expr_common_subexpr current_user)",
            "Link": "https://www.postgresql.org/docs/12/functions-info.html"
        },
        {
            "Function": "inet_client_addr()",
            "Return Type": "inet",
            "Description": "address of the remote connection",
            "Tree": "(func_application (func_name (type_function_name (identifier inet_client_addr))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-info.html"
        },
        {
            "Function": "inet_client_port()",
            "Return Type": "int",
            "Description": "port of the remote connection",
            "Tree": "(func_application (func_name (type_function_name (identifier inet_client_port))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-info.html"
        },
        {
            "Function": "inet_server_addr()",
            "Return Type": "inet",
            "Description": "address of the local connection",
            "Tree": "(func_application (func_name (type_function_name (identifier inet_server_addr))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-info.html"
        },
        {
            "Function": "inet_server_port()",
            "Return Type": "int",
            "Description": "port of the local connection",
            "Tree": "(func_application (func_name (type_function_name (identifier inet_server_port))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-info.html"
        },
        {
            "Function": "pg_backend_pid()",
            "Return Type": "int",
            "Description": "Process ID of the server process attached to the current session",
            "Tree": "(func_application (func_name (type_function_name (identifier pg_backend_pid))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-info.html"
        },
        {
            "Function": "pg_blocking_pids(int)",
            "Return Type": "int[]",
            "Description": "Process ID(s) that are blocking specified server process ID from acquiring a lock",
            "Tree": "(func_application (func_name (type_function_name (identifier pg_blocking_pids))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-info.html"
        },
        {
            "Function": "pg_conf_load_time()",
            "Return Type": "timestamp with time zone",
            "Description": "configuration load time",
            "Tree": "(func_application (func_name (type_function_name (identifier pg_conf_load_time))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-info.html"
        },
        {
            "Function": "pg_current_logfile([text])",
            "Return Type": "text",
            "Description": "Primary log file name, or log in the requested format, currently in use by the logging collector",
            "Tree": "(func_application (func_name (type_function_name (identifier pg_current_logfile))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-info.html"
        },
        {
            "Function": "pg_my_temp_schema()",
            "Return Type": "oid",
            "Description": "OID of session's temporary schema, or 0 if none",
            "Tree": "(func_application (func_name (type_function_name (identifier pg_my_temp_schema))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-info.html"
        },
        {
            "Function": "pg_is_other_temp_schema(oid)",
            "Return Type": "boolean",
            "Description": "is schema another session's temporary schema?",
            "Tree": "(func_application (func_name (type_function_name (identifier pg_is_other_temp_schema))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-info.html"
        },
        {
            "Function": "pg_jit_available()",
            "Return Type": "boolean",
            "Description": "is a JIT compiler extension available (see Chapter\u00a031) and the jit configuration parameter set to on.",
            "Tree": "(func_application (func_name (type_function_name (identifier pg_jit_available))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-info.html"
        },
        {
            "Function": "pg_listening_channels()",
            "Return Type": "setof text",
            "Description": "channel names that the session is currently listening on",
            "Tree": "(func_application (func_name (type_function_name (identifier pg_listening_channels))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-info.html"
        },
        {
            "Function": "pg_notification_queue_usage()",
            "Return Type": "double",
            "Description": "fraction of the asynchronous notification queue currently occupied (0-1)",
            "Tree": "(func_application (func_name (type_function_name (identifier pg_notification_queue_usage))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-info.html"
        },
        {
            "Function": "pg_postmaster_start_time()",
            "Return Type": "timestamp with time zone",
            "Description": "server start time",
            "Tree": "(func_application (func_name (type_function_name (identifier pg_postmaster_start_time))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-info.html"
        },
        {
            "Function": "pg_safe_snapshot_blocking_pids(int)",
            "Return Type": "int[]",
            "Description": "Process ID(s) that are blocking specified server process ID from acquiring a safe snapshot",
            "Tree": "(func_application (func_name (type_function_name (identifier pg_safe_snapshot_blocking_pids))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-info.html"
        },
        {
            "Function": "pg_trigger_depth()",
            "Return Type": "int",
            "Description": "current nesting level of PostgreSQL triggers (0 if not called, directly or indirectly, from inside a trigger)",
            "Tree": "(func_application (func_name (type_function_name (identifier pg_trigger_depth))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-info.html"
        },
        {
            "Function": "session_user",
            "Return Type": "name",
            "Description": "session user name",
            "Tree": "(func_expr_common_subexpr session_user)",
            "Link": "https://www.postgresql.org/docs/12/functions-info.html"
        },
        {
            "Function": "pg_get_userbyid(role_oid)",
            "Return Type": "name",
            "Description": "get role name with given OID",
            "Tree": "(func_expr_common_subexpr user)",
            "Link": "https://www.postgresql.org/docs/12/functions-info.html"
        },
        {
            "Function": "version()",
            "Return Type": "text",
            "Description": "PostgreSQL version information. See also server_version_num for a machine-readable version.",
            "Tree": "(func_application (func_name (type_function_name (unreserved_keyword version))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-info.html"
        }
    ],
    [
        [
            "Function",
            "Return Type",
            "Description"
        ],
        {
            "Function": "has_any_column_privilege(user, table, privilege)",
            "Return Type": "boolean",
            "Description": "does user have privilege for any column of table",
            "Tree": "(func_application (func_name (type_function_name (identifier has_any_column_privilege))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-info.html"
        },
        {
            "Function": "has_any_column_privilege(table, privilege)",
            "Return Type": "boolean",
            "Description": "does current user have privilege for any column of table",
            "Tree": "(func_application (func_name (type_function_name (identifier has_any_column_privilege))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-info.html"
        },
        {
            "Function": "has_column_privilege(user, table, column, privilege)",
            "Return Type": "boolean",
            "Description": "does user have privilege for column",
            "Tree": "(func_application (func_name (type_function_name (identifier has_column_privilege))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-info.html"
        },
        {
            "Function": "has_column_privilege(table, column, privilege)",
            "Return Type": "boolean",
            "Description": "does current user have privilege for column",
            "Tree": "(func_application (func_name (type_function_name (identifier has_column_privilege))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-info.html"
        },
        {
            "Function": "has_database_privilege(user, database, privilege)",
            "Return Type": "boolean",
            "Description": "does user have privilege for database",
            "Tree": "(func_application (func_name (type_function_name (identifier has_database_privilege))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-info.html"
        },
        {
            "Function": "has_database_privilege(database, privilege)",
            "Return Type": "boolean",
            "Description": "does current user have privilege for database",
            "Tree": "(func_application (func_name (type_function_name (identifier has_database_privilege))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-info.html"
        },
        {
            "Function": "has_foreign_data_wrapper_privilege(user, fdw, privilege)",
            "Return Type": "boolean",
            "Description": "does user have privilege for foreign-data wrapper",
            "Tree": "(func_application (func_name (type_function_name (identifier has_foreign_data_wrapper_privilege))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-info.html"
        },
        {
            "Function": "has_foreign_data_wrapper_privilege(fdw, privilege)",
            "Return Type": "boolean",
            "Description": "does current user have privilege for foreign-data wrapper",
            "Tree": "(func_application (func_name (type_function_name (identifier has_foreign_data_wrapper_privilege))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-info.html"
        },
        {
            "Function": "has_function_privilege(user, function, privilege)",
            "Return Type": "boolean",
            "Description": "does user have privilege for function",
            "Tree": "(func_application (func_name (type_function_name (identifier has_function_privilege))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-info.html"
        },
        {
            "Function": "has_function_privilege(function, privilege)",
            "Return Type": "boolean",
            "Description": "does current user have privilege for function",
            "Tree": "(func_application (func_name (type_function_name (identifier has_function_privilege))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-info.html"
        },
        {
            "Function": "has_language_privilege(user, language, privilege)",
            "Return Type": "boolean",
            "Description": "does user have privilege for language",
            "Tree": "(func_application (func_name (type_function_name (identifier has_language_privilege))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-info.html"
        },
        {
            "Function": "has_language_privilege(language, privilege)",
            "Return Type": "boolean",
            "Description": "does current user have privilege for language",
            "Tree": "(func_application (func_name (type_function_name (identifier has_language_privilege))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-info.html"
        },
        {
            "Function": "has_schema_privilege(user, schema, privilege)",
            "Return Type": "boolean",
            "Description": "does user have privilege for schema",
            "Tree": "(func_application (func_name (type_function_name (identifier has_schema_privilege))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-info.html"
        },
        {
            "Function": "has_schema_privilege(schema, privilege)",
            "Return Type": "boolean",
            "Description": "does current user have privilege for schema",
            "Tree": "(func_application (func_name (type_function_name (identifier has_schema_privilege))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-info.html"
        },
        {
            "Function": "has_sequence_privilege(user, sequence, privilege)",
            "Return Type": "boolean",
            "Description": "does user have privilege for sequence",
            "Tree": "(func_application (func_name (type_function_name (identifier has_sequence_privilege))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-info.html"
        },
        {
            "Function": "has_sequence_privilege(sequence, privilege)",
            "Return Type": "boolean",
            "Description": "does current user have privilege for sequence",
            "Tree": "(func_application (func_name (type_function_name (identifier has_sequence_privilege))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-info.html"
        },
        {
            "Function": "has_server_privilege(user, server, privilege)",
            "Return Type": "boolean",
            "Description": "does user have privilege for foreign server",
            "Tree": "(func_application (func_name (type_function_name (identifier has_server_privilege))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-info.html"
        },
        {
            "Function": "has_server_privilege(server, privilege)",
            "Return Type": "boolean",
            "Description": "does current user have privilege for foreign server",
            "Tree": "(func_application (func_name (type_function_name (identifier has_server_privilege))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-info.html"
        },
        {
            "Function": "has_table_privilege(user, table, privilege)",
            "Return Type": "boolean",
            "Description": "does user have privilege for table",
            "Tree": "(func_application (func_name (type_function_name (identifier has_table_privilege))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-info.html"
        },
        {
            "Function": "has_table_privilege(table, privilege)",
            "Return Type": "boolean",
            "Description": "does current user have privilege for table",
            "Tree": "(func_application (func_name (type_function_name (identifier has_table_privilege))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-info.html"
        },
        {
            "Function": "has_tablespace_privilege(user, tablespace, privilege)",
            "Return Type": "boolean",
            "Description": "does user have privilege for tablespace",
            "Tree": "(func_application (func_name (type_function_name (identifier has_tablespace_privilege))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-info.html"
        },
        {
            "Function": "has_tablespace_privilege(tablespace, privilege)",
            "Return Type": "boolean",
            "Description": "does current user have privilege for tablespace",
            "Tree": "(func_application (func_name (type_function_name (identifier has_tablespace_privilege))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-info.html"
        },
        {
            "Function": "has_type_privilege(user, type, privilege)",
            "Return Type": "boolean",
            "Description": "does user have privilege for type",
            "Tree": "(func_application (func_name (type_function_name (identifier has_type_privilege))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-info.html"
        },
        {
            "Function": "has_type_privilege(type, privilege)",
            "Return Type": "boolean",
            "Description": "does current user have privilege for type",
            "Tree": "(func_application (func_name (type_function_name (identifier has_type_privilege))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-info.html"
        },
        {
            "Function": "pg_has_role(user, role, privilege)",
            "Return Type": "boolean",
            "Description": "does user have privilege for role",
            "Tree": "(func_application (func_name (type_function_name (identifier pg_has_role))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-info.html"
        },
        {
            "Function": "pg_has_role(role, privilege)",
            "Return Type": "boolean",
            "Description": "does current user have privilege for role",
            "Tree": "(func_application (func_name (type_function_name (identifier pg_has_role))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-info.html"
        },
        {
            "Function": "row_security_active(table)",
            "Return Type": "boolean",
            "Description": "does current user have row level security active for table",
            "Tree": "(func_application (func_name (type_function_name (identifier row_security_active))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-info.html"
        }
    ],
    [
        [
            "Function",
            "Return Type",
            "Description"
        ],
        {
            "Function": "acldefault(type, ownerId)",
            "Return Type": "aclitem[]",
            "Description": "get the default access privileges for an object belonging to ownerId",
            "Tree": "(func_application (func_name (type_function_name (identifier acldefault))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-info.html"
        },
        {
            "Function": "aclexplode(aclitem[])",
            "Return Type": "setof record",
            "Description": "get aclitem array as tuples",
            "Tree": "(func_application (func_name (type_function_name (identifier aclexplode))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-info.html"
        },
        {
            "Function": "makeaclitem(grantee, grantor, privilege, grantable)",
            "Return Type": "aclitem",
            "Description": "build an aclitem from input",
            "Tree": "(func_application (func_name (type_function_name (identifier makeaclitem))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-info.html"
        }
    ],
    [
        [
            "Function",
            "Return Type",
            "Description"
        ],
        {
            "Function": "pg_collation_is_visible(collation_oid)",
            "Return Type": "boolean",
            "Description": "is collation visible in search path",
            "Tree": "(func_application (func_name (type_function_name (identifier pg_collation_is_visible))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-info.html"
        },
        {
            "Function": "pg_conversion_is_visible(conversion_oid)",
            "Return Type": "boolean",
            "Description": "is conversion visible in search path",
            "Tree": "(func_application (func_name (type_function_name (identifier pg_conversion_is_visible))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-info.html"
        },
        {
            "Function": "pg_function_is_visible(function_oid)",
            "Return Type": "boolean",
            "Description": "is function visible in search path",
            "Tree": "(func_application (func_name (type_function_name (identifier pg_function_is_visible))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-info.html"
        },
        {
            "Function": "pg_opclass_is_visible(opclass_oid)",
            "Return Type": "boolean",
            "Description": "is operator class visible in search path",
            "Tree": "(func_application (func_name (type_function_name (identifier pg_opclass_is_visible))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-info.html"
        },
        {
            "Function": "pg_operator_is_visible(operator_oid)",
            "Return Type": "boolean",
            "Description": "is operator visible in search path",
            "Tree": "(func_application (func_name (type_function_name (identifier pg_operator_is_visible))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-info.html"
        },
        {
            "Function": "pg_opfamily_is_visible(opclass_oid)",
            "Return Type": "boolean",
            "Description": "is operator family visible in search path",
            "Tree": "(func_application (func_name (type_function_name (identifier pg_opfamily_is_visible))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-info.html"
        },
        {
            "Function": "pg_statistics_obj_is_visible(stat_oid)",
            "Return Type": "boolean",
            "Description": "is statistics object visible in search path",
            "Tree": "(func_application (func_name (type_function_name (identifier pg_statistics_obj_is_visible))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-info.html"
        },
        {
            "Function": "pg_table_is_visible(table_oid)",
            "Return Type": "boolean",
            "Description": "is table visible in search path",
            "Tree": "(func_application (func_name (type_function_name (identifier pg_table_is_visible))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-info.html"
        },
        {
            "Function": "pg_ts_config_is_visible(config_oid)",
            "Return Type": "boolean",
            "Description": "is text search configuration visible in search path",
            "Tree": "(func_application (func_name (type_function_name (identifier pg_ts_config_is_visible))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-info.html"
        },
        {
            "Function": "pg_ts_dict_is_visible(dict_oid)",
            "Return Type": "boolean",
            "Description": "is text search dictionary visible in search path",
            "Tree": "(func_application (func_name (type_function_name (identifier pg_ts_dict_is_visible))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-info.html"
        },
        {
            "Function": "pg_ts_parser_is_visible(parser_oid)",
            "Return Type": "boolean",
            "Description": "is text search parser visible in search path",
            "Tree": "(func_application (func_name (type_function_name (identifier pg_ts_parser_is_visible))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-info.html"
        },
        {
            "Function": "pg_ts_template_is_visible(template_oid)",
            "Return Type": "boolean",
            "Description": "is text search template visible in search path",
            "Tree": "(func_application (func_name (type_function_name (identifier pg_ts_template_is_visible))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-info.html"
        },
        {
            "Function": "pg_type_is_visible(type_oid)",
            "Return Type": "boolean",
            "Description": "is type (or domain) visible in search path",
            "Tree": "(func_application (func_name (type_function_name (identifier pg_type_is_visible))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-info.html"
        }
    ],
    [
        [
            "Function",
            "Return Type",
            "Description"
        ],
        {
            "Function": "format_type(type_oid, typemod)",
            "Return Type": "text",
            "Description": "get SQL name of a data type",
            "Tree": "(func_application (func_name (type_function_name (identifier format_type))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-info.html"
        },
        {
            "Function": "pg_get_constraintdef(constraint_oid)",
            "Return Type": "text",
            "Description": "get definition of a constraint",
            "Tree": "(func_application (func_name (type_function_name (identifier pg_get_constraintdef))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-info.html"
        },
        {
            "Function": "pg_get_constraintdef(constraint_oid, pretty_bool)",
            "Return Type": "text",
            "Description": "get definition of a constraint",
            "Tree": "(func_application (func_name (type_function_name (identifier pg_get_constraintdef))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-info.html"
        },
        {
            "Function": "pg_get_expr(pg_node_tree, relation_oid)",
            "Return Type": "text",
            "Description": "decompile internal form of an expression, assuming that any Vars in it refer to the relation indicated by the second parameter",
            "Tree": "(func_application (func_name (type_function_name (identifier pg_get_expr))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-info.html"
        },
        {
            "Function": "pg_get_expr(pg_node_tree, relation_oid, pretty_bool)",
            "Return Type": "text",
            "Description": "decompile internal form of an expression, assuming that any Vars in it refer to the relation indicated by the second parameter",
            "Tree": "(func_application (func_name (type_function_name (identifier pg_get_expr))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-info.html"
        },
        {
            "Function": "pg_get_functiondef(func_oid)",
            "Return Type": "text",
            "Description": "get definition of a function or procedure",
            "Tree": "(func_application (func_name (type_function_name (identifier pg_get_functiondef))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-info.html"
        },
        {
            "Function": "pg_get_function_arguments(func_oid)",
            "Return Type": "text",
            "Description": "get argument list of function's or procedure's definition (with default values)",
            "Tree": "(func_application (func_name (type_function_name (identifier pg_get_function_arguments))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-info.html"
        },
        {
            "Function": "pg_get_function_identity_arguments(func_oid)",
            "Return Type": "text",
            "Description": "get argument list to identify a function or procedure (without default values)",
            "Tree": "(func_application (func_name (type_function_name (identifier pg_get_function_identity_arguments))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-info.html"
        },
        {
            "Function": "pg_get_function_result(func_oid)",
            "Return Type": "text",
            "Description": "get RETURNS clause for function (returns null for a procedure)",
            "Tree": "(func_application (func_name (type_function_name (identifier pg_get_function_result))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-info.html"
        },
        {
            "Function": "pg_get_indexdef(index_oid)",
            "Return Type": "text",
            "Description": "get CREATE INDEX command for index",
            "Tree": "(func_application (func_name (type_function_name (identifier pg_get_indexdef))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-info.html"
        },
        {
            "Function": "pg_get_indexdef(index_oid, column_no, pretty_bool)",
            "Return Type": "text",
            "Description": "get CREATE INDEX command for index, or definition of just one index column when column_no is not zero",
            "Tree": "(func_application (func_name (type_function_name (identifier pg_get_indexdef))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-info.html"
        },
        {
            "Function": "pg_get_keywords()",
            "Return Type": "setof record",
            "Description": "get list of SQL keywords and their categories",
            "Tree": "(func_application (func_name (type_function_name (identifier pg_get_keywords))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-info.html"
        },
        {
            "Function": "pg_get_ruledef(rule_oid)",
            "Return Type": "text",
            "Description": "get CREATE RULE command for rule",
            "Tree": "(func_application (func_name (type_function_name (identifier pg_get_ruledef))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-info.html"
        },
        {
            "Function": "pg_get_ruledef(rule_oid, pretty_bool)",
            "Return Type": "text",
            "Description": "get CREATE RULE command for rule",
            "Tree": "(func_application (func_name (type_function_name (identifier pg_get_ruledef))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-info.html"
        },
        {
            "Function": "pg_get_serial_sequence(table_name, column_name)",
            "Return Type": "text",
            "Description": "get name of the sequence that a serial or identity column uses",
            "Tree": "(func_application (func_name (type_function_name (identifier pg_get_serial_sequence))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-info.html"
        },
        {
            "Function": "pg_get_statisticsobjdef(statobj_oid)",
            "Return Type": "text",
            "Description": "get CREATE STATISTICS command for extended statistics object",
            "Tree": "(func_application (func_name (type_function_name (identifier pg_get_statisticsobjdef))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-info.html"
        },
        {
            "Function": "pg_get_triggerdef(trigger_oid)",
            "Return Type": "text",
            "Description": "get CREATE [ CONSTRAINT ] TRIGGER command for trigger",
            "Tree": "(func_application (func_name (type_function_name (identifier pg_get_triggerdef))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-info.html"
        },
        {
            "Function": "pg_get_triggerdef(trigger_oid, pretty_bool)",
            "Return Type": "text",
            "Description": "get CREATE [ CONSTRAINT ] TRIGGER command for trigger",
            "Tree": "(func_application (func_name (type_function_name (identifier pg_get_triggerdef))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-info.html"
        },
        {
            "Function": "pg_get_userbyid(role_oid)",
            "Return Type": "name",
            "Description": "get role name with given OID",
            "Tree": "(func_application (func_name (type_function_name (identifier pg_get_userbyid))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-info.html"
        },
        {
            "Function": "pg_get_viewdef(view_name)",
            "Return Type": "text",
            "Description": "get underlying SELECT command for view or materialized view (deprecated)",
            "Tree": "(func_application (func_name (type_function_name (identifier pg_get_viewdef))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-info.html"
        },
        {
            "Function": "pg_get_viewdef(view_name, pretty_bool)",
            "Return Type": "text",
            "Description": "get underlying SELECT command for view or materialized view (deprecated)",
            "Tree": "(func_application (func_name (type_function_name (identifier pg_get_viewdef))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-info.html"
        },
        {
            "Function": "pg_get_viewdef(view_oid)",
            "Return Type": "text",
            "Description": "get underlying SELECT command for view or materialized view",
            "Tree": "(func_application (func_name (type_function_name (identifier pg_get_viewdef))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-info.html"
        },
        {
            "Function": "pg_get_viewdef(view_oid, pretty_bool)",
            "Return Type": "text",
            "Description": "get underlying SELECT command for view or materialized view",
            "Tree": "(func_application (func_name (type_function_name (identifier pg_get_viewdef))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-info.html"
        },
        {
            "Function": "pg_get_viewdef(view_oid, wrap_column_int)",
            "Return Type": "text",
            "Description": "get underlying SELECT command for view or materialized view; lines with fields are wrapped to specified number of columns, pretty-printing is implied",
            "Tree": "(func_application (func_name (type_function_name (identifier pg_get_viewdef))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-info.html"
        },
        {
            "Function": "pg_index_column_has_property(index_oid, column_no, prop_name)",
            "Return Type": "boolean",
            "Description": "test whether an index column has a specified property",
            "Tree": "(func_application (func_name (type_function_name (identifier pg_index_column_has_property))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-info.html"
        },
        {
            "Function": "pg_index_has_property(index_oid, prop_name)",
            "Return Type": "boolean",
            "Description": "test whether an index has a specified property",
            "Tree": "(func_application (func_name (type_function_name (identifier pg_index_has_property))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-info.html"
        },
        {
            "Function": "pg_indexam_has_property(am_oid, prop_name)",
            "Return Type": "boolean",
            "Description": "test whether an index access method has a specified property",
            "Tree": "(func_application (func_name (type_function_name (identifier pg_indexam_has_property))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-info.html"
        },
        {
            "Function": "pg_options_to_table(reloptions)",
            "Return Type": "setof record",
            "Description": "get the set of storage option name/value pairs",
            "Tree": "(func_application (func_name (type_function_name (identifier pg_options_to_table))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-info.html"
        },
        {
            "Function": "CAST()",
            "Return Type": "another type version of the original value",
            "Description": "A type cast specifies a conversion from one data type to another. PostgreSQL accepts two equivalent\nsyntaxes for type casts:\nCAST ( expression AS type )\nexpression::type\nThe CAST syntax conforms to SQL; the syntax with :: is historical PostgreSQL usage.\nWhen a cast is applied to a value expression of a known type, it represents a run-time type conversion.\nThe cast will succeed only if a suitable type conversion operation has been defined. Notice that this\nis subtly different from the use of casts with constants, as shown in Section 4.1.2.7. A cast applied\nto an unadorned string literal represents the initial assignment of a type to a literal constant value,\nand so it will succeed for any type (if the contents of the string literal are acceptable input syntax for\nthe data type).",
            "Tree": "(func_expr_common_subexpr CAST ( ))"
        },
        {
            "Function": "pg_tablespace_databases(tablespace_oid)",
            "Return Type": "setof oid",
            "Description": "get the set of database OIDs that have objects in the tablespace",
            "Tree": "(func_application (func_name (type_function_name (identifier pg_tablespace_databases))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-info.html"
        },
        {
            "Function": "pg_tablespace_location(tablespace_oid)",
            "Return Type": "text",
            "Description": "get the path in the file system that this tablespace is located in",
            "Tree": "(func_application (func_name (type_function_name (identifier pg_tablespace_location))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-info.html"
        },
        {
            "Function": "pg_typeof(any)",
            "Return Type": "regtype",
            "Description": "get the data type of any value",
            "Tree": "(func_application (func_name (type_function_name (identifier pg_typeof))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-info.html"
        },
        {
            "Function": "to_regclass(rel_name)",
            "Return Type": "regclass",
            "Description": "get the OID of the named relation",
            "Tree": "(func_application (func_name (type_function_name (identifier to_regclass))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-info.html"
        },
        {
            "Function": "to_regproc(func_name)",
            "Return Type": "regproc",
            "Description": "get the OID of the named function",
            "Tree": "(func_application (func_name (type_function_name (identifier to_regproc))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-info.html"
        },
        {
            "Function": "to_regprocedure(func_name)",
            "Return Type": "regprocedure",
            "Description": "get the OID of the named function",
            "Tree": "(func_application (func_name (type_function_name (identifier to_regprocedure))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-info.html"
        },
        {
            "Function": "to_regoper(operator_name)",
            "Return Type": "regoper",
            "Description": "get the OID of the named operator",
            "Tree": "(func_application (func_name (type_function_name (identifier to_regoper))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-info.html"
        },
        {
            "Function": "to_regoperator(operator_name)",
            "Return Type": "regoperator",
            "Description": "get the OID of the named operator",
            "Tree": "(func_application (func_name (type_function_name (identifier to_regoperator))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-info.html"
        },
        {
            "Function": "to_regtype(type_name)",
            "Return Type": "regtype",
            "Description": "get the OID of the named type",
            "Tree": "(func_application (func_name (type_function_name (identifier to_regtype))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-info.html"
        },
        {
            "Function": "to_regnamespace(schema_name)",
            "Return Type": "regnamespace",
            "Description": "get the OID of the named schema",
            "Tree": "(func_application (func_name (type_function_name (identifier to_regnamespace))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-info.html"
        },
        {
            "Function": "to_regrole(role_name)",
            "Return Type": "regrole",
            "Description": "get the OID of the named role",
            "Tree": "(func_application (func_name (type_function_name (identifier to_regrole))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-info.html"
        }
    ],
    [
        [
            "Function",
            "Return Type",
            "Description"
        ],
        {
            "Function": "pg_describe_object(classid oid, objid oid, objsubid integer)",
            "Return Type": "text",
            "Description": "get description of a database object",
            "Tree": "(func_application (func_name (type_function_name (identifier pg_describe_object))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-info.html"
        },
        {
            "Function": "pg_identify_object(classid oid, objid oid, objsubid integer)",
            "Return Type": "type text, schema text, name text, identity text",
            "Description": "get identity of a database object",
            "Tree": "(func_application (func_name (type_function_name (identifier pg_identify_object))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-info.html"
        },
        {
            "Function": "pg_identify_object_as_address(classid oid, objid oid, objsubid integer)",
            "Return Type": "type text, object_names text[], object_args text[]",
            "Description": "get external representation of a database object's address",
            "Tree": "(func_application (func_name (type_function_name (identifier pg_identify_object_as_address))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-info.html"
        },
        {
            "Function": "pg_get_object_address(type text, object_names text[], object_args text[])",
            "Return Type": "classid oid, objid oid, objsubid integer",
            "Description": "get address of a database object from its external representation",
            "Tree": "(func_application (func_name (type_function_name (identifier pg_get_object_address))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-info.html"
        }
    ],
    [
        [
            "Function",
            "Return Type",
            "Description"
        ],
        {
            "Function": "col_description(table_oid, column_number)",
            "Return Type": "text",
            "Description": "get comment for a table column",
            "Tree": "(func_application (func_name (type_function_name (identifier col_description))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-info.html"
        },
        {
            "Function": "obj_description(object_oid, catalog_name)",
            "Return Type": "text",
            "Description": "get comment for a database object",
            "Tree": "(func_application (func_name (type_function_name (identifier obj_description))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-info.html"
        },
        {
            "Function": "obj_description(object_oid)",
            "Return Type": "text",
            "Description": "get comment for a database object (deprecated)",
            "Tree": "(func_application (func_name (type_function_name (identifier obj_description))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-info.html"
        },
        {
            "Function": "shobj_description(object_oid, catalog_name)",
            "Return Type": "text",
            "Description": "get comment for a shared database object",
            "Tree": "(func_application (func_name (type_function_name (identifier shobj_description))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-info.html"
        }
    ],
    [
        [
            "Function",
            "Return Type",
            "Description"
        ],
        {
            "Function": "txid_current()",
            "Return Type": "bigint",
            "Description": "get current transaction ID, assigning a new one if the current transaction does not have one",
            "Tree": "(func_application (func_name (type_function_name (identifier txid_current))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-info.html"
        },
        {
            "Function": "txid_current_if_assigned()",
            "Return Type": "bigint",
            "Description": "same as txid_current() but returns null instead of assigning a new transaction ID if none is already assigned",
            "Tree": "(func_application (func_name (type_function_name (identifier txid_current_if_assigned))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-info.html"
        },
        {
            "Function": "txid_current_snapshot()",
            "Return Type": "txid_snapshot",
            "Description": "get current snapshot",
            "Tree": "(func_application (func_name (type_function_name (identifier txid_current_snapshot))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-info.html"
        },
        {
            "Function": "txid_snapshot_xip(txid_snapshot)",
            "Return Type": "setof bigint",
            "Description": "get in-progress transaction IDs in snapshot",
            "Tree": "(func_application (func_name (type_function_name (identifier txid_snapshot_xip))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-info.html"
        },
        {
            "Function": "txid_snapshot_xmax(txid_snapshot)",
            "Return Type": "bigint",
            "Description": "get xmax of snapshot",
            "Tree": "(func_application (func_name (type_function_name (identifier txid_snapshot_xmax))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-info.html"
        },
        {
            "Function": "txid_snapshot_xmin(txid_snapshot)",
            "Return Type": "bigint",
            "Description": "get xmin of snapshot",
            "Tree": "(func_application (func_name (type_function_name (identifier txid_snapshot_xmin))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-info.html"
        },
        {
            "Function": "txid_visible_in_snapshot(bigint, txid_snapshot)",
            "Return Type": "boolean",
            "Description": "is transaction ID visible in snapshot? (do not use with subtransaction ids)",
            "Tree": "(func_application (func_name (type_function_name (identifier txid_visible_in_snapshot))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-info.html"
        },
        {
            "Function": "txid_status(bigint)",
            "Return Type": "text",
            "Description": "report the status of the given transaction: committed, aborted, in progress, or null if the transaction ID is too old",
            "Tree": "(func_application (func_name (type_function_name (identifier txid_status))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-info.html"
        }
    ],
    [
        [
            "Function",
            "Return Type",
            "Description"
        ],
        {
            "Function": "pg_xact_commit_timestamp(xid)",
            "Return Type": "timestamp with time zone",
            "Description": "get commit timestamp of a transaction",
            "Tree": "(func_application (func_name (type_function_name (identifier pg_xact_commit_timestamp))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-info.html"
        },
        {
            "Function": "pg_last_committed_xact()",
            "Return Type": "xid xid, timestamp timestamp with time zone",
            "Description": "get transaction ID and commit timestamp of latest committed transaction",
            "Tree": "(func_application (func_name (type_function_name (identifier pg_last_committed_xact))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-info.html"
        }
    ],
    [
        [
            "Function",
            "Return Type",
            "Description"
        ],
        {
            "Function": "pg_control_checkpoint()",
            "Return Type": "record",
            "Description": "Returns information about current checkpoint state.",
            "Tree": "(func_application (func_name (type_function_name (identifier pg_control_checkpoint))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-info.html"
        },
        {
            "Function": "pg_control_system()",
            "Return Type": "record",
            "Description": "Returns information about current control file state.",
            "Tree": "(func_application (func_name (type_function_name (identifier pg_control_system))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-info.html"
        },
        {
            "Function": "pg_control_init()",
            "Return Type": "record",
            "Description": "Returns information about cluster initialization state.",
            "Tree": "(func_application (func_name (type_function_name (identifier pg_control_init))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-info.html"
        },
        {
            "Function": "pg_control_recovery()",
            "Return Type": "record",
            "Description": "Returns information about recovery state.",
            "Tree": "(func_application (func_name (type_function_name (identifier pg_control_recovery))) ( ))",
            "Name": "pg_control_recovery()",
            "Link": "https://www.postgresql.org/docs/12/functions-info.html"
        }
    ],
    [
        [
            "Function",
            "Return Type",
            "Description"
        ],
        {
            "Function": "row_number()",
            "Return Type": "bigint",
            "Description": "number of the current row within its partition, counting from 1",
            "Tree": "(func_application (func_name (type_function_name (identifier row_number))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-window.html"
        },
        {
            "Function": "percent_rank()",
            "Return Type": "double precision",
            "Description": "relative rank of the current row: (rank - 1) / (total partition rows - 1)",
            "Tree": "(func_application (func_name (type_function_name (identifier rank))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-window.html"
        },
        {
            "Function": "dense_rank()",
            "Return Type": "bigint",
            "Description": "rank of the current row without gaps; this function counts peer groups",
            "Tree": "(func_application (func_name (type_function_name (identifier dense_rank))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-window.html"
        },
        {
            "Function": "percent_rank()",
            "Return Type": "double precision",
            "Description": "relative rank of the current row: (rank - 1) / (total partition rows - 1)",
            "Tree": "(func_application (func_name (type_function_name (identifier percent_rank))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-window.html"
        },
        {
            "Function": "cume_dist()",
            "Return Type": "double precision",
            "Description": "cumulative distribution: (number of partition rows preceding or peer with current row) / total partition rows",
            "Tree": "(func_application (func_name (type_function_name (identifier cume_dist))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-window.html"
        },
        {
            "Function": "ntile(num_buckets integer)",
            "Return Type": "integer",
            "Description": "integer ranging from 1 to the argument value, dividing the partition as equally as possible",
            "Tree": "(func_application (func_name (type_function_name (identifier ntile))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-window.html"
        },
        {
            "Function": "lag(value anyelement [, offset integer [, default anyelement ]])",
            "Return Type": "same type as value",
            "Description": "returns value evaluated at the row that is offset rows before the current row within the partition; if there is no such row, instead return default (which must be of the same type as value). Both offset and default are evaluated with respect to the current row. If omitted, offset defaults to 1 and default to null",
            "Tree": "(func_application (func_name (type_function_name (identifier lag))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-window.html"
        },
        {
            "Function": "lead(value anyelement [, offset integer [, default anyelement ]])",
            "Return Type": "same type as value",
            "Description": "returns value evaluated at the row that is offset rows after the current row within the partition; if there is no such row, instead return default (which must be of the same type as value). Both offset and default are evaluated with respect to the current row. If omitted, offset defaults to 1 and default to null",
            "Tree": "(func_application (func_name (type_function_name (identifier lead))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-window.html"
        },
        {
            "Function": "first_value(value any)",
            "Return Type": "same type as value",
            "Description": "returns value evaluated at the row that is the first row of the window frame",
            "Tree": "(func_application (func_name (type_function_name (identifier first_value))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-window.html"
        },
        {
            "Function": "last_value(value any)",
            "Return Type": "same type as value",
            "Description": "returns value evaluated at the row that is the last row of the window frame",
            "Tree": "(func_application (func_name (type_function_name (identifier last_value))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-window.html"
        },
        {
            "Function": "nth_value(value any, nth integer)",
            "Return Type": "same type as value",
            "Description": "returns value evaluated at the row that is the nth row of the window frame (counting from 1); null if no such row",
            "Tree": "(func_application (func_name (type_function_name (identifier nth_value))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-window.html"
        }
    ],
    [
        [
            "Function",
            "Return Type",
            "Description"
        ],
        {
            "Function": "current_setting(setting_name[,missing_ok])",
            "Return Type": "text",
            "Description": "get current value of setting",
            "Tree": "(func_application (func_name (type_function_name (identifier current_setting))) ( ))",
            "Name": "current_setting(setting_name [, missing_ok ])",
            "Link": "https://www.postgresql.org/docs/12/functions-admin.html"
        },
        {
            "Function": "set_config(setting_name,new_value,is_local)",
            "Return Type": "text",
            "Description": "set parameter and return new value",
            "Tree": "(func_application (func_name (type_function_name (identifier set_config))) ( ))",
            "Name": "set_config(setting_name, new_value, is_local)",
            "Link": "https://www.postgresql.org/docs/12/functions-admin.html"
        }
    ],
    [
        [
            "Function",
            "Return Type",
            "Description"
        ],
        {
            "Function": "pg_cancel_backend(pidint)",
            "Return Type": "boolean",
            "Description": "Cancel a backend's current query. This is also allowed if the calling role is a member of the role whose backend is being canceled or the calling role has been granted pg_signal_backend, however only superusers can cancel superuser backends.",
            "Tree": "(func_application (func_name (type_function_name (identifier pg_cancel_backend))) ( ))",
            "Name": "pg_cancel_backend(pid int)",
            "Link": "https://www.postgresql.org/docs/12/functions-admin.html"
        },
        {
            "Function": "pg_reload_conf()",
            "Return Type": "boolean",
            "Description": "Cause server processes to reload their configuration files",
            "Tree": "(func_application (func_name (type_function_name (identifier pg_reload_conf))) ( ))",
            "Name": "pg_reload_conf()",
            "Link": "https://www.postgresql.org/docs/12/functions-admin.html"
        },
        {
            "Function": "pg_rotate_logfile()",
            "Return Type": "boolean",
            "Description": "Rotate server's log file",
            "Tree": "(func_application (func_name (type_function_name (identifier pg_rotate_logfile))) ( ))",
            "Name": "pg_rotate_logfile()",
            "Link": "https://www.postgresql.org/docs/12/functions-admin.html"
        },
        {
            "Function": "pg_terminate_backend(pidint)",
            "Return Type": "boolean",
            "Description": "Terminate a backend. This is also allowed if the calling role is a member of the role whose backend is being terminated or the calling role has been granted pg_signal_backend, however only superusers can terminate superuser backends.",
            "Tree": "(func_application (func_name (type_function_name (identifier pg_terminate_backend))) ( ))",
            "Name": "pg_terminate_backend(pid int)",
            "Link": "https://www.postgresql.org/docs/12/functions-admin.html"
        }
    ],
    [
        [
            "Function",
            "Return Type",
            "Description"
        ],
        {
            "Function": "pg_create_restore_point(nametext)",
            "Return Type": "pg_lsn",
            "Description": "Create a named point for performing restore (restricted to superusers by default, but other users can be granted EXECUTE to run the function)",
            "Tree": "(func_application (func_name (type_function_name (identifier pg_create_restore_point))) ( ))",
            "Name": "pg_create_restore_point(name text)",
            "Link": "https://www.postgresql.org/docs/12/functions-admin.html"
        },
        {
            "Function": "pg_current_wal_flush_lsn()",
            "Return Type": "pg_lsn",
            "Description": "Get current write-ahead log flush location",
            "Tree": "(func_application (func_name (type_function_name (identifier pg_current_wal_flush_lsn))) ( ))",
            "Name": "pg_current_wal_flush_lsn()",
            "Link": "https://www.postgresql.org/docs/12/functions-admin.html"
        },
        {
            "Function": "pg_current_wal_insert_lsn()",
            "Return Type": "pg_lsn",
            "Description": "Get current write-ahead log insert location",
            "Tree": "(func_application (func_name (type_function_name (identifier pg_current_wal_insert_lsn))) ( ))",
            "Name": "pg_current_wal_insert_lsn()",
            "Link": "https://www.postgresql.org/docs/12/functions-admin.html"
        },
        {
            "Function": "pg_current_wal_lsn()",
            "Return Type": "pg_lsn",
            "Description": "Get current write-ahead log write location",
            "Tree": "(func_application (func_name (type_function_name (identifier pg_current_wal_lsn))) ( ))",
            "Name": "pg_current_wal_lsn()",
            "Link": "https://www.postgresql.org/docs/12/functions-admin.html"
        },
        {
            "Function": "pg_start_backup(labeltext[,fastboolean[,exclusiveboolean]])",
            "Return Type": "pg_lsn",
            "Description": "Prepare for performing on-line backup (restricted to superusers by default, but other users can be granted EXECUTE to run the function)",
            "Tree": "(func_application (func_name (type_function_name (identifier pg_start_backup))) ( ))",
            "Name": "pg_start_backup(label text [, fast boolean [, exclusive boolean ]])",
            "Link": "https://www.postgresql.org/docs/12/functions-admin.html"
        },
        {
            "Function": "pg_stop_backup()",
            "Return Type": "pg_lsn",
            "Description": "Finish performing exclusive on-line backup (restricted to superusers by default, but other users can be granted EXECUTE to run the function)",
            "Tree": "(func_application (func_name (type_function_name (identifier pg_stop_backup))) ( ))",
            "Name": "pg_stop_backup()",
            "Link": "https://www.postgresql.org/docs/12/functions-admin.html"
        },
        {
            "Function": "pg_stop_backup(exclusiveboolean[,wait_for_archiveboolean])",
            "Return Type": "setof record",
            "Description": "Finish performing exclusive or non-exclusive on-line backup (restricted to superusers by default, but other users can be granted EXECUTE to run the function)",
            "Tree": "(func_application (func_name (type_function_name (identifier pg_stop_backup))) ( ))",
            "Name": "pg_stop_backup(exclusive boolean [, wait_for_archive boolean ])",
            "Link": "https://www.postgresql.org/docs/12/functions-admin.html"
        },
        {
            "Function": "pg_is_in_backup()",
            "Return Type": "bool",
            "Description": "True if an on-line exclusive backup is still in progress.",
            "Tree": "(func_application (func_name (type_function_name (identifier pg_is_in_backup))) ( ))",
            "Name": "pg_is_in_backup()",
            "Link": "https://www.postgresql.org/docs/12/functions-admin.html"
        },
        {
            "Function": "pg_backup_start_time()",
            "Return Type": "timestamp with time zone",
            "Description": "Get start time of an on-line exclusive backup in progress.",
            "Tree": "(func_application (func_name (type_function_name (identifier pg_backup_start_time))) ( ))",
            "Name": "pg_backup_start_time()",
            "Link": "https://www.postgresql.org/docs/12/functions-admin.html"
        },
        {
            "Function": "pg_switch_wal()",
            "Return Type": "pg_lsn",
            "Description": "Force switch to a new write-ahead log file (restricted to superusers by default, but other users can be granted EXECUTE to run the function)",
            "Tree": "(func_application (func_name (type_function_name (identifier pg_switch_wal))) ( ))",
            "Name": "pg_switch_wal()",
            "Link": "https://www.postgresql.org/docs/12/functions-admin.html"
        },
        {
            "Function": "pg_walfile_name(lsnpg_lsn)",
            "Return Type": "text",
            "Description": "Convert write-ahead log location to file name",
            "Tree": "(func_application (func_name (type_function_name (identifier pg_walfile_name))) ( ))",
            "Name": "pg_walfile_name(lsn pg_lsn)",
            "Link": "https://www.postgresql.org/docs/12/functions-admin.html"
        },
        {
            "Function": "pg_walfile_name_offset(lsnpg_lsn)",
            "Return Type": "text, integer",
            "Description": "Convert write-ahead log location to file name and decimal byte offset within file",
            "Tree": "(func_application (func_name (type_function_name (identifier pg_walfile_name_offset))) ( ))",
            "Name": "pg_walfile_name_offset(lsn pg_lsn)",
            "Link": "https://www.postgresql.org/docs/12/functions-admin.html"
        },
        {
            "Function": "pg_wal_lsn_diff(lsnpg_lsn,lsnpg_lsn)",
            "Return Type": "numeric",
            "Description": "Calculate the difference between two write-ahead log locations",
            "Tree": "(func_application (func_name (type_function_name (identifier pg_wal_lsn_diff))) ( ))",
            "Name": "pg_wal_lsn_diff(lsn pg_lsn, lsn pg_lsn)",
            "Link": "https://www.postgresql.org/docs/12/functions-admin.html"
        }
    ],
    [
        [
            "Function",
            "Return Type",
            "Description"
        ],
        {
            "Function": "pg_is_in_recovery()",
            "Return Type": "bool",
            "Description": "True if recovery is still in progress.",
            "Tree": "(func_application (func_name (type_function_name (identifier pg_is_in_recovery))) ( ))",
            "Name": "pg_is_in_recovery()",
            "Link": "https://www.postgresql.org/docs/12/functions-admin.html"
        },
        {
            "Function": "pg_last_wal_receive_lsn()",
            "Return Type": "pg_lsn",
            "Description": "Get last write-ahead log location received and synced to disk by streaming replication. While streaming replication is in progress this will increase monotonically. If recovery has completed this will remain static at the value of the last WAL record received and synced to disk during recovery. If streaming replication is disabled, or if it has not yet started, the function returns NULL.",
            "Tree": "(func_application (func_name (type_function_name (identifier pg_last_wal_receive_lsn))) ( ))",
            "Name": "pg_last_wal_receive_lsn()",
            "Link": "https://www.postgresql.org/docs/12/functions-admin.html"
        },
        {
            "Function": "pg_last_wal_replay_lsn()",
            "Return Type": "pg_lsn",
            "Description": "Get last write-ahead log location replayed during recovery. If recovery is still in progress this will increase monotonically. If recovery has completed then this value will remain static at the value of the last WAL record applied during that recovery. When the server has been started normally without recovery the function returns NULL.",
            "Tree": "(func_application (func_name (type_function_name (identifier pg_last_wal_replay_lsn))) ( ))",
            "Name": "pg_last_wal_replay_lsn()",
            "Link": "https://www.postgresql.org/docs/12/functions-admin.html"
        },
        {
            "Function": "pg_last_xact_replay_timestamp()",
            "Return Type": "timestamp with time zone",
            "Description": "Get time stamp of last transaction replayed during recovery. This is the time at which the commit or abort WAL record for that transaction was generated on the primary. If no transactions have been replayed during recovery, this function returns NULL. Otherwise, if recovery is still in progress this will increase monotonically. If recovery has completed then this value will remain static at the value of the last transaction applied during that recovery. When the server has been started normally without recovery the function returns NULL.",
            "Tree": "(func_application (func_name (type_function_name (identifier pg_last_xact_replay_timestamp))) ( ))",
            "Name": "pg_last_xact_replay_timestamp()",
            "Link": "https://www.postgresql.org/docs/12/functions-admin.html"
        }
    ],
    [
        [
            "Function",
            "Return Type",
            "Description"
        ],
        {
            "Function": "pg_is_wal_replay_paused()",
            "Return Type": "bool",
            "Description": "True if recovery is paused.",
            "Tree": "(func_application (func_name (type_function_name (identifier pg_is_wal_replay_paused))) ( ))",
            "Name": "pg_is_wal_replay_paused()",
            "Link": "https://www.postgresql.org/docs/12/functions-admin.html"
        },
        {
            "Function": "pg_promote(waitbooleanDEFAULT true,wait_secondsintegerDEFAULT 60)",
            "Return Type": "boolean",
            "Description": "Promotes a physical standby server. With wait set to true (the default), the function waits until promotion is completed or wait_seconds seconds have passed, and returns true if promotion is successful and false otherwise. If wait is set to false, the function returns true immediately after sending SIGUSR1 to the postmaster to trigger the promotion. This function is restricted to superusers by default, but other users can be granted EXECUTE to run the function.",
            "Tree": "(func_application (func_name (type_function_name (identifier pg_promote))) ( ))",
            "Name": "pg_promote(wait boolean DEFAULT true, wait_seconds integer DEFAULT 60)",
            "Link": "https://www.postgresql.org/docs/12/functions-admin.html"
        },
        {
            "Function": "pg_wal_replay_pause()",
            "Return Type": "void",
            "Description": "Pauses recovery immediately (restricted to superusers by default, but other users can be granted EXECUTE to run the function).",
            "Tree": "(func_application (func_name (type_function_name (identifier pg_wal_replay_pause))) ( ))",
            "Name": "pg_wal_replay_pause()",
            "Link": "https://www.postgresql.org/docs/12/functions-admin.html"
        },
        {
            "Function": "pg_wal_replay_resume()",
            "Return Type": "void",
            "Description": "Restarts recovery if it was paused (restricted to superusers by default, but other users can be granted EXECUTE to run the function).",
            "Tree": "(func_application (func_name (type_function_name (identifier pg_wal_replay_resume))) ( ))",
            "Name": "pg_wal_replay_resume()",
            "Link": "https://www.postgresql.org/docs/12/functions-admin.html"
        }
    ],
    [
        [
            "Function",
            "Return Type",
            "Description"
        ],
        {
            "Function": "pg_export_snapshot()",
            "Return Type": "text",
            "Description": "Save the current snapshot and return its identifier",
            "Tree": "(func_application (func_name (type_function_name (identifier pg_export_snapshot))) ( ))",
            "Name": "pg_export_snapshot()",
            "Link": "https://www.postgresql.org/docs/12/functions-admin.html"
        }
    ],
    [
        [
            "Function",
            "Return Type",
            "Description"
        ],
        {
            "Function": "pg_create_physical_replication_slot(slot_name name [, immediately_reserve boolean, temporary boolean])",
            "Return Type": "(slot_name name, lsn pg_lsn)",
            "Description": "Creates a new physical replication slot named slot_name. The optional second parameter, when true, specifies that the LSN for this replication slot be reserved immediately; otherwise the LSN is reserved on first connection from a streaming replication client. Streaming changes from a physical slot is only possible with the streaming-replication protocol \u2014 see Section\u00a052.4. The optional third parameter, temporary, when set to true, specifies that the slot should not be permanently stored to disk and is only meant for use by current session. Temporary slots are also released upon any error. This function corresponds to the replication protocol command CREATE_REPLICATION_SLOT ... PHYSICAL.",
            "Tree": "(func_application (func_name (type_function_name (identifier pg_create_physical_replication_slot))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-admin.html"
        },
        {
            "Function": "pg_drop_replication_slot(slot_name name)",
            "Return Type": "void",
            "Description": "Drops the physical or logical replication slot named slot_name. Same as replication protocol command DROP_REPLICATION_SLOT. For logical slots, this must be called when connected to the same database the slot was created on.",
            "Tree": "(func_application (func_name (type_function_name (identifier pg_drop_replication_slot))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-admin.html"
        },
        {
            "Function": "pg_create_logical_replication_slot(slot_name name, plugin name [, temporary boolean])",
            "Return Type": "(slot_name name, lsn pg_lsn)",
            "Description": "Creates a new logical (decoding) replication slot named slot_name using the output plugin plugin. The optional third parameter, temporary, when set to true, specifies that the slot should not be permanently stored to disk and is only meant for use by current session. Temporary slots are also released upon any error. A call to this function has the same effect as the replication protocol command CREATE_REPLICATION_SLOT ... LOGICAL.",
            "Tree": "(func_application (func_name (type_function_name (identifier pg_create_logical_replication_slot))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-admin.html"
        },
        {
            "Function": "pg_copy_physical_replication_slot(src_slot_name name, dst_slot_name name [, temporary boolean])",
            "Return Type": "(slot_name name, lsn pg_lsn)",
            "Description": "Copies an existing physical replication slot named src_slot_name to a physical replication slot named dst_slot_name. The copied physical slot starts to reserve WAL from the same LSN as the source slot. temporary is optional. If temporary is omitted, the same value as the source slot is used.",
            "Tree": "(func_application (func_name (type_function_name (identifier pg_copy_physical_replication_slot))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-admin.html"
        },
        {
            "Function": "pg_copy_logical_replication_slot(src_slot_name name, dst_slot_name name [, temporary boolean [, plugin name]])",
            "Return Type": "(slot_name name, lsn pg_lsn)",
            "Description": "Copies an existing logical replication slot named src_slot_name to a logical replication slot named dst_slot_name while changing the output plugin and persistence. The copied logical slot starts from the same LSN as the source logical slot. Both temporary and plugin are optional. If temporary or plugin are omitted, the same values as the source logical slot are used.",
            "Tree": "(func_application (func_name (type_function_name (identifier pg_copy_logical_replication_slot))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-admin.html"
        },
        {
            "Function": "pg_logical_slot_get_changes(slot_name name, upto_lsn pg_lsn, upto_nchanges int, VARIADIC options text[])",
            "Return Type": "(lsn pg_lsn, xid xid, data text)",
            "Description": "Returns changes in the slot slot_name, starting from the point at which since changes have been consumed last. If upto_lsn and upto_nchanges are NULL, logical decoding will continue until end of WAL. If upto_lsn is non-NULL, decoding will include only those transactions which commit prior to the specified LSN. If upto_nchanges is non-NULL, decoding will stop when the number of rows produced by decoding exceeds the specified value. Note, however, that the actual number of rows returned may be larger, since this limit is only checked after adding the rows produced when decoding each new transaction commit.",
            "Tree": "(func_application (func_name (type_function_name (identifier pg_logical_slot_get_changes))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-admin.html"
        },
        {
            "Function": "pg_logical_slot_peek_changes(slot_name name, upto_lsn pg_lsn, upto_nchanges int, VARIADIC options text[])",
            "Return Type": "(lsn pg_lsn, xid xid, data text)",
            "Description": "Behaves just like the pg_logical_slot_get_changes() function, except that changes are not consumed; that is, they will be returned again on future calls.",
            "Tree": "(func_application (func_name (type_function_name (identifier pg_logical_slot_peek_changes))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-admin.html"
        },
        {
            "Function": "pg_logical_slot_get_binary_changes(slot_name name, upto_lsn pg_lsn, upto_nchanges int, VARIADIC options text[])",
            "Return Type": "(lsn pg_lsn, xid xid, data bytea)",
            "Description": "Behaves just like the pg_logical_slot_get_changes() function, except that changes are returned as bytea.",
            "Tree": "(func_application (func_name (type_function_name (identifier pg_logical_slot_get_binary_changes))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-admin.html"
        },
        {
            "Function": "pg_logical_slot_peek_binary_changes(slot_name name, upto_lsn pg_lsn, upto_nchanges int, VARIADIC options text[])",
            "Return Type": "(lsn pg_lsn, xid xid, data bytea)",
            "Description": "Behaves just like the pg_logical_slot_get_changes() function, except that changes are returned as bytea and that changes are not consumed; that is, they will be returned again on future calls.",
            "Tree": "(func_application (func_name (type_function_name (identifier pg_logical_slot_peek_binary_changes))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-admin.html"
        },
        {
            "Function": "pg_replication_slot_advance(slot_name name, upto_lsn pg_lsn)",
            "Return Type": "(slot_name name, end_lsn pg_lsn) bool",
            "Description": "Advances the current confirmed position of a replication slot named slot_name. The slot will not be moved backwards, and it will not be moved beyond the current insert location. Returns the name of the slot and the real position to which it was advanced to. The information of the updated slot is written out at the follow-up checkpoint if any advancing is done. In the event of a crash, the slot may return to an earlier position.",
            "Tree": "(func_application (func_name (type_function_name (identifier pg_replication_slot_advance))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-admin.html"
        },
        {
            "Function": "pg_replication_origin_create(node_name text)",
            "Return Type": "oid",
            "Description": "Create a replication origin with the given external name, and return the internal id assigned to it.",
            "Tree": "(func_application (func_name (type_function_name (identifier pg_replication_origin_create))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-admin.html"
        },
        {
            "Function": "pg_replication_origin_drop(node_name text)",
            "Return Type": "void",
            "Description": "Delete a previously created replication origin, including any associated replay progress.",
            "Tree": "(func_application (func_name (type_function_name (identifier pg_replication_origin_drop))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-admin.html"
        },
        {
            "Function": "pg_replication_origin_oid(node_name text)",
            "Return Type": "oid",
            "Description": "Lookup a replication origin by name and return the internal ID. If no such replication origin is found, NULL is returned.",
            "Tree": "(func_application (func_name (type_function_name (identifier pg_replication_origin_oid))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-admin.html"
        },
        {
            "Function": "pg_replication_origin_session_setup(node_name text)",
            "Return Type": "void",
            "Description": "Mark the current session as replaying from the given origin, allowing replay progress to be tracked. Use pg_replication_origin_session_reset to revert. Can only be used if no previous origin is configured.",
            "Tree": "(func_application (func_name (type_function_name (identifier pg_replication_origin_session_setup))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-admin.html"
        },
        {
            "Function": "pg_replication_origin_session_reset()",
            "Return Type": "void",
            "Description": "Cancel the effects of pg_replication_origin_session_setup().",
            "Tree": "(func_application (func_name (type_function_name (identifier pg_replication_origin_session_reset))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-admin.html"
        },
        {
            "Function": "pg_replication_origin_session_is_setup()",
            "Return Type": "bool",
            "Description": "Has a replication origin been configured in the current session?",
            "Tree": "(func_application (func_name (type_function_name (identifier pg_replication_origin_session_is_setup))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-admin.html"
        },
        {
            "Function": "pg_replication_origin_session_progress(flush bool)",
            "Return Type": "pg_lsn",
            "Description": "Return the replay location for the replication origin configured in the current session. The parameter flush determines whether the corresponding local transaction will be guaranteed to have been flushed to disk or not.",
            "Tree": "(func_application (func_name (type_function_name (identifier pg_replication_origin_session_progress))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-admin.html"
        },
        {
            "Function": "pg_replication_origin_xact_setup(origin_lsn pg_lsn, origin_timestamp timestamptz)",
            "Return Type": "void",
            "Description": "Mark the current transaction as replaying a transaction that has committed at the given LSN and timestamp. Can only be called when a replication origin has previously been configured using pg_replication_origin_session_setup().",
            "Tree": "(func_application (func_name (type_function_name (identifier pg_replication_origin_xact_setup))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-admin.html"
        },
        {
            "Function": "pg_replication_origin_xact_reset()",
            "Return Type": "void",
            "Description": "Cancel the effects of pg_replication_origin_xact_setup().",
            "Tree": "(func_application (func_name (type_function_name (identifier pg_replication_origin_xact_reset))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-admin.html"
        },
        {
            "Function": "pg_replication_origin_advance(node_name text, lsn pg_lsn)",
            "Return Type": "void",
            "Description": "Set replication progress for the given node to the given location. This primarily is useful for setting up the initial location or a new location after configuration changes and similar. Be aware that careless use of this function can lead to inconsistently replicated data.",
            "Tree": "(func_application (func_name (type_function_name (identifier pg_replication_origin_advance))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-admin.html"
        },
        {
            "Function": "pg_replication_origin_progress(node_name text, flush bool)",
            "Return Type": "pg_lsn",
            "Description": "Return the replay location for the given replication origin. The parameter flush determines whether the corresponding local transaction will be guaranteed to have been flushed to disk or not.",
            "Tree": "(func_application (func_name (type_function_name (identifier pg_replication_origin_progress))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-admin.html"
        },
        {
            "Function": "pg_logical_emit_message(transactional bool, prefix text, content text)",
            "Return Type": "pg_lsn",
            "Description": "Emit text logical decoding message. This can be used to pass generic messages to logical decoding plugins through WAL. The parameter transactional specifies if the message should be part of current transaction or if it should be written immediately and decoded as soon as the logical decoding reads the record. The prefix is textual prefix used by the logical decoding plugins to easily recognize interesting messages for them. The content is the text of the message.",
            "Tree": "(func_application (func_name (type_function_name (identifier pg_logical_emit_message))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-admin.html"
        },
        {
            "Function": "pg_logical_emit_message(transactional bool, prefix text, content bytea)",
            "Return Type": "pg_lsn",
            "Description": "Emit binary logical decoding message. This can be used to pass generic messages to logical decoding plugins through WAL. The parameter transactional specifies if the message should be part of current transaction or if it should be written immediately and decoded as soon as the logical decoding reads the record. The prefix is textual prefix used by the logical decoding plugins to easily recognize interesting messages for them. The content is the binary content of the message.",
            "Tree": "(func_application (func_name (type_function_name (identifier pg_logical_emit_message))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-admin.html"
        }
    ],
    [
        [
            "Function",
            "Return Type",
            "Description"
        ],
        {
            "Function": "pg_column_size(any)",
            "Return Type": "int",
            "Description": "Number of bytes used to store a particular value (possibly compressed)",
            "Tree": "(func_application (func_name (type_function_name (identifier pg_column_size))) ( ))",
            "Name": "pg_column_size(any)",
            "Link": "https://www.postgresql.org/docs/12/functions-admin.html"
        },
        {
            "Function": "pg_database_size(oid)",
            "Return Type": "bigint",
            "Description": "Disk space used by the database with the specified OID",
            "Tree": "(func_application (func_name (type_function_name (identifier pg_database_size))) ( ))",
            "Name": "pg_database_size(oid)",
            "Link": "https://www.postgresql.org/docs/12/functions-admin.html"
        },
        {
            "Function": "pg_database_size(name)",
            "Return Type": "bigint",
            "Description": "Disk space used by the database with the specified name",
            "Tree": "(func_application (func_name (type_function_name (identifier pg_database_size))) ( ))",
            "Name": "pg_database_size(name)",
            "Link": "https://www.postgresql.org/docs/12/functions-admin.html"
        },
        {
            "Function": "pg_indexes_size(regclass)",
            "Return Type": "bigint",
            "Description": "Total disk space used by indexes attached to the specified table",
            "Tree": "(func_application (func_name (type_function_name (identifier pg_indexes_size))) ( ))",
            "Name": "pg_indexes_size(regclass)",
            "Link": "https://www.postgresql.org/docs/12/functions-admin.html"
        },
        {
            "Function": "pg_relation_size(relationregclass,forktext)",
            "Return Type": "bigint",
            "Description": "Disk space used by the specified fork ('main', 'fsm', 'vm', or 'init') of the specified table or index",
            "Tree": "(func_application (func_name (type_function_name (identifier pg_relation_size))) ( ))",
            "Name": "pg_relation_size(relation regclass, fork text)",
            "Link": "https://www.postgresql.org/docs/12/functions-admin.html"
        },
        {
            "Function": "pg_relation_size(relationregclass)",
            "Return Type": "bigint",
            "Description": "Shorthand for pg_relation_size(..., 'main')",
            "Tree": "(func_application (func_name (type_function_name (identifier pg_relation_size))) ( ))",
            "Name": "pg_relation_size(relation regclass)",
            "Link": "https://www.postgresql.org/docs/12/functions-admin.html"
        },
        {
            "Function": "pg_size_bytes(text)",
            "Return Type": "bigint",
            "Description": "Converts a size in human-readable format with size units into bytes",
            "Tree": "(func_application (func_name (type_function_name (identifier pg_size_bytes))) ( ))",
            "Name": "pg_size_bytes(text)",
            "Link": "https://www.postgresql.org/docs/12/functions-admin.html"
        },
        {
            "Function": "pg_size_pretty(bigint)",
            "Return Type": "text",
            "Description": "Converts a size in bytes expressed as a 64-bit integer into a human-readable format with size units",
            "Tree": "(func_application (func_name (type_function_name (identifier pg_size_pretty))) ( ))",
            "Name": "pg_size_pretty(bigint)",
            "Link": "https://www.postgresql.org/docs/12/functions-admin.html"
        },
        {
            "Function": "pg_size_pretty(numeric)",
            "Return Type": "text",
            "Description": "Converts a size in bytes expressed as a numeric value into a human-readable format with size units",
            "Tree": "(func_application (func_name (type_function_name (identifier pg_size_pretty))) ( ))",
            "Name": "pg_size_pretty(numeric)",
            "Link": "https://www.postgresql.org/docs/12/functions-admin.html"
        },
        {
            "Function": "pg_table_size(regclass)",
            "Return Type": "bigint",
            "Description": "Disk space used by the specified table, excluding indexes (but including TOAST, free space map, and visibility map)",
            "Tree": "(func_application (func_name (type_function_name (identifier pg_table_size))) ( ))",
            "Name": "pg_table_size(regclass)",
            "Link": "https://www.postgresql.org/docs/12/functions-admin.html"
        },
        {
            "Function": "pg_tablespace_size(oid)",
            "Return Type": "bigint",
            "Description": "Disk space used by the tablespace with the specified OID",
            "Tree": "(func_application (func_name (type_function_name (identifier pg_tablespace_size))) ( ))",
            "Name": "pg_tablespace_size(oid)",
            "Link": "https://www.postgresql.org/docs/12/functions-admin.html"
        },
        {
            "Function": "pg_tablespace_size(name)",
            "Return Type": "bigint",
            "Description": "Disk space used by the tablespace with the specified name",
            "Tree": "(func_application (func_name (type_function_name (identifier pg_tablespace_size))) ( ))",
            "Name": "pg_tablespace_size(name)",
            "Link": "https://www.postgresql.org/docs/12/functions-admin.html"
        },
        {
            "Function": "pg_total_relation_size(regclass)",
            "Return Type": "bigint",
            "Description": "Total disk space used by the specified table, including all indexes and TOAST data",
            "Tree": "(func_application (func_name (type_function_name (identifier pg_total_relation_size))) ( ))",
            "Name": "pg_total_relation_size(regclass)",
            "Link": "https://www.postgresql.org/docs/12/functions-admin.html"
        }
    ],
    [
        [
            "Function",
            "Return Type",
            "Description"
        ],
        {
            "Function": "pg_relation_filenode(relationregclass)",
            "Return Type": "oid",
            "Description": "Filenode number of the specified relation",
            "Tree": "(func_application (func_name (type_function_name (identifier pg_relation_filenode))) ( ))",
            "Name": "pg_relation_filenode(relation regclass)",
            "Link": "https://www.postgresql.org/docs/12/functions-admin.html"
        },
        {
            "Function": "pg_relation_filepath(relationregclass)",
            "Return Type": "text",
            "Description": "File path name of the specified relation",
            "Tree": "(func_application (func_name (type_function_name (identifier pg_relation_filepath))) ( ))",
            "Name": "pg_relation_filepath(relation regclass)",
            "Link": "https://www.postgresql.org/docs/12/functions-admin.html"
        },
        {
            "Function": "pg_filenode_relation(tablespaceoid,filenodeoid)",
            "Return Type": "regclass",
            "Description": "Find the relation associated with a given tablespace and filenode",
            "Tree": "(func_application (func_name (type_function_name (identifier pg_filenode_relation))) ( ))",
            "Name": "pg_filenode_relation(tablespace oid, filenode oid)",
            "Link": "https://www.postgresql.org/docs/12/functions-admin.html"
        }
    ],
    [
        [
            "Function",
            "Return Type",
            "Description"
        ],
        {
            "Function": "pg_collation_actual_version(oid)",
            "Return Type": "text",
            "Description": "Return actual version of collation from operating system",
            "Tree": "(func_application (func_name (type_function_name (identifier pg_collation_actual_version))) ( ))",
            "Name": "pg_collation_actual_version(oid)",
            "Link": "https://www.postgresql.org/docs/12/functions-admin.html"
        },
        {
            "Function": "pg_import_system_collations(schemaregnamespace)",
            "Return Type": "integer",
            "Description": "Import operating system collations",
            "Tree": "(func_application (func_name (type_function_name (identifier pg_import_system_collations))) ( ))",
            "Name": "pg_import_system_collations(schema regnamespace)",
            "Link": "https://www.postgresql.org/docs/12/functions-admin.html"
        }
    ],
    [
        [
            "Function",
            "Return Type",
            "Description"
        ],
        {
            "Function": "pg_partition_tree(regclass)",
            "Return Type": "setof record",
            "Description": "List information about tables or indexes in a partition tree for a given partitioned table or partitioned index, with one row for each partition. Information provided includes the name of the partition, the name of its immediate parent, a boolean value telling if the partition is a leaf, and an integer telling its level in the hierarchy. The value of level begins at 0 for the input table or index in its role as the root of the partition tree, 1 for its partitions, 2 for their partitions, and so on.",
            "Tree": "(func_application (func_name (type_function_name (identifier pg_partition_tree))) ( ))",
            "Name": "pg_partition_tree(regclass)",
            "Link": "https://www.postgresql.org/docs/12/functions-admin.html"
        },
        {
            "Function": "pg_partition_ancestors(regclass)",
            "Return Type": "setof regclass",
            "Description": "List the ancestor relations of the given partition, including the partition itself.",
            "Tree": "(func_application (func_name (type_function_name (identifier pg_partition_ancestors))) ( ))",
            "Name": "pg_partition_ancestors(regclass)",
            "Link": "https://www.postgresql.org/docs/12/functions-admin.html"
        },
        {
            "Function": "pg_partition_root(regclass)",
            "Return Type": "regclass",
            "Description": "Return the top-most parent of a partition tree to which the given relation belongs.",
            "Tree": "(func_application (func_name (type_function_name (identifier pg_partition_root))) ( ))",
            "Name": "pg_partition_root(regclass)",
            "Link": "https://www.postgresql.org/docs/12/functions-admin.html"
        }
    ],
    [
        [
            "Function",
            "Return Type",
            "Description"
        ],
        {
            "Function": "brin_summarize_new_values(index regclass)",
            "Return Type": "integer",
            "Description": "summarize page ranges not already summarized",
            "Tree": "(func_application (func_name (type_function_name (identifier brin_summarize_new_values))) ( ))",
            "Name": "brin_summarize_new_values(index regclass)",
            "Link": "https://www.postgresql.org/docs/12/functions-admin.html"
        },
        {
            "Function": "brin_summarize_range(index regclass,blockNumber bigint)",
            "Return Type": "integer",
            "Description": "summarize the page range covering the given block, if not already summarized",
            "Tree": "(func_application (func_name (type_function_name (identifier brin_summarize_range))) ( ))",
            "Name": "brin_summarize_range(index regclass, blockNumber bigint)",
            "Link": "https://www.postgresql.org/docs/12/functions-admin.html"
        },
        {
            "Function": "brin_desummarize_range(index regclass,blockNumber bigint)",
            "Return Type": "integer",
            "Description": "de-summarize the page range covering the given block, if summarized",
            "Tree": "(func_application (func_name (type_function_name (identifier brin_desummarize_range))) ( ))",
            "Name": "brin_desummarize_range(index regclass, blockNumber bigint)",
            "Link": "https://www.postgresql.org/docs/12/functions-admin.html"
        },
        {
            "Function": "gin_clean_pending_list(indexregclass)",
            "Return Type": "bigint",
            "Description": "move GIN pending list entries into main index structure",
            "Tree": "(func_application (func_name (type_function_name (identifier gin_clean_pending_list))) ( ))",
            "Name": "gin_clean_pending_list(index regclass)",
            "Link": "https://www.postgresql.org/docs/12/functions-admin.html"
        }
    ],
    [
        [
            "Function",
            "Return Type",
            "Description"
        ],
        {
            "Function": "pg_ls_dir(dirnametext[,missing_okboolean,include_dot_dirsboolean])",
            "Return Type": "setof text",
            "Description": "List the contents of a directory. Restricted to superusers by default, but other users can be granted EXECUTE to run the function.",
            "Tree": "(func_application (func_name (type_function_name (identifier pg_ls_dir))) ( ))",
            "Name": "pg_ls_dir(dirname text [, missing_ok boolean, include_dot_dirs boolean])",
            "Link": "https://www.postgresql.org/docs/12/functions-admin.html"
        },
        {
            "Function": "pg_ls_logdir()",
            "Return Type": "setof record",
            "Description": "List the name, size, and last modification time of files in the log directory. Access is granted to members of the pg_monitor role and may be granted to other non-superuser roles.",
            "Tree": "(func_application (func_name (type_function_name (identifier pg_ls_logdir))) ( ))",
            "Name": "pg_ls_logdir()",
            "Link": "https://www.postgresql.org/docs/12/functions-admin.html"
        },
        {
            "Function": "pg_ls_waldir()",
            "Return Type": "setof record",
            "Description": "List the name, size, and last modification time of files in the WAL directory. Access is granted to members of the pg_monitor role and may be granted to other non-superuser roles.",
            "Tree": "(func_application (func_name (type_function_name (identifier pg_ls_waldir))) ( ))",
            "Name": "pg_ls_waldir()",
            "Link": "https://www.postgresql.org/docs/12/functions-admin.html"
        },
        {
            "Function": "pg_ls_archive_statusdir()",
            "Return Type": "setof record",
            "Description": "List the name, size, and last modification time of files in the WAL archive status directory. Access is granted to members of the pg_monitor role and may be granted to other non-superuser roles.",
            "Tree": "(func_application (func_name (type_function_name (identifier pg_ls_archive_statusdir))) ( ))",
            "Name": "pg_ls_archive_statusdir()",
            "Link": "https://www.postgresql.org/docs/12/functions-admin.html"
        },
        {
            "Function": "pg_ls_tmpdir([tablespaceoid])",
            "Return Type": "setof record",
            "Description": "List the name, size, and last modification time of files in the temporary directory for tablespace. If tablespace is not provided, the pg_default tablespace is used. Access is granted to members of the pg_monitor role and may be granted to other non-superuser roles.",
            "Tree": "(func_application (func_name (type_function_name (identifier pg_ls_tmpdir))) ( ))",
            "Name": "pg_ls_tmpdir([tablespace oid])",
            "Link": "https://www.postgresql.org/docs/12/functions-admin.html"
        },
        {
            "Function": "pg_read_file(filenametext[,offsetbigint,lengthbigint[,missing_okboolean] ])",
            "Return Type": "text",
            "Description": "Return the contents of a text file. Restricted to superusers by default, but other users can be granted EXECUTE to run the function.",
            "Tree": "(func_application (func_name (type_function_name (identifier pg_read_file))) ( ))",
            "Name": "pg_read_file(filename text [, offset bigint, length bigint [, missing_ok boolean] ])",
            "Link": "https://www.postgresql.org/docs/12/functions-admin.html"
        },
        {
            "Function": "pg_read_binary_file(filenametext[,offsetbigint,lengthbigint[,missing_okboolean] ])",
            "Return Type": "bytea",
            "Description": "Return the contents of a file. Restricted to superusers by default, but other users can be granted EXECUTE to run the function.",
            "Tree": "(func_application (func_name (type_function_name (identifier pg_read_binary_file))) ( ))",
            "Name": "pg_read_binary_file(filename text [, offset bigint, length bigint [, missing_ok boolean] ])",
            "Link": "https://www.postgresql.org/docs/12/functions-admin.html"
        },
        {
            "Function": "pg_stat_file(filenametext[,missing_okboolean])",
            "Return Type": "record",
            "Description": "Return information about a file. Restricted to superusers by default, but other users can be granted EXECUTE to run the function.",
            "Tree": "(func_application (func_name (type_function_name (identifier pg_stat_file))) ( ))",
            "Name": "pg_stat_file(filename text[, missing_ok boolean])",
            "Link": "https://www.postgresql.org/docs/12/functions-admin.html"
        }
    ],
    [
        [
            "Function",
            "Return Type",
            "Description"
        ],
        {
            "Function": "pg_advisory_lock(key bigint)",
            "Return Type": "void",
            "Description": "Obtain exclusive session level advisory lock",
            "Tree": "(func_application (func_name (type_function_name (identifier pg_advisory_lock))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-admin.html"
        },
        {
            "Function": "pg_advisory_lock(key1 int, key2 int)",
            "Return Type": "void",
            "Description": "Obtain exclusive session level advisory lock",
            "Tree": "(func_application (func_name (type_function_name (identifier pg_advisory_lock))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-admin.html"
        },
        {
            "Function": "pg_advisory_lock_shared(key bigint)",
            "Return Type": "void",
            "Description": "Obtain shared session level advisory lock",
            "Tree": "(func_application (func_name (type_function_name (identifier pg_advisory_lock_shared))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-admin.html"
        },
        {
            "Function": "pg_advisory_lock_shared(key1 int, key2 int)",
            "Return Type": "void",
            "Description": "Obtain shared session level advisory lock",
            "Tree": "(func_application (func_name (type_function_name (identifier pg_advisory_lock_shared))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-admin.html"
        },
        {
            "Function": "pg_advisory_unlock(key bigint)",
            "Return Type": "boolean",
            "Description": "Release an exclusive session level advisory lock",
            "Tree": "(func_application (func_name (type_function_name (identifier pg_advisory_unlock))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-admin.html"
        },
        {
            "Function": "pg_advisory_unlock(key1 int, key2 int)",
            "Return Type": "boolean",
            "Description": "Release an exclusive session level advisory lock",
            "Link": "https://www.postgresql.org/docs/12/functions-admin.html",
            "Tree": "(func_application (func_name (type_function_name (identifier pg_advisory_unlock))) ( ))"
        },
        {
            "Function": "pg_advisory_unlock_all()",
            "Return Type": "void",
            "Description": "Release all session level advisory locks held by the current session",
            "Tree": "(func_application (func_name (type_function_name (identifier pg_advisory_unlock_all))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-admin.html"
        },
        {
            "Function": "pg_advisory_unlock_shared(key bigint)",
            "Return Type": "boolean",
            "Description": "Release a shared session level advisory lock",
            "Tree": "(func_application (func_name (type_function_name (identifier pg_advisory_unlock_shared))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-admin.html"
        },
        {
            "Function": "pg_advisory_unlock_shared(key1 int, key2 int)",
            "Return Type": "boolean",
            "Description": "Release a shared session level advisory lock",
            "Tree": "(func_application (func_name (type_function_name (identifier pg_advisory_unlock_shared))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-admin.html"
        },
        {
            "Function": "pg_advisory_xact_lock(key bigint)",
            "Return Type": "void",
            "Description": "Obtain exclusive transaction level advisory lock",
            "Tree": "(func_application (func_name (type_function_name (identifier pg_advisory_xact_lock))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-admin.html"
        },
        {
            "Function": "pg_advisory_xact_lock(key1 int, key2 int)",
            "Return Type": "void",
            "Description": "Obtain exclusive transaction level advisory lock",
            "Tree": "(func_application (func_name (type_function_name (identifier pg_advisory_xact_lock))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-admin.html"
        },
        {
            "Function": "pg_advisory_xact_lock_shared(key bigint)",
            "Return Type": "void",
            "Description": "Obtain shared transaction level advisory lock",
            "Tree": "(func_application (func_name (type_function_name (identifier pg_advisory_xact_lock_shared))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-admin.html"
        },
        {
            "Function": "pg_advisory_xact_lock_shared(key1 int, key2 int)",
            "Return Type": "void",
            "Description": "Obtain shared transaction level advisory lock",
            "Tree": "(func_application (func_name (type_function_name (identifier pg_advisory_xact_lock_shared))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-admin.html"
        },
        {
            "Function": "pg_try_advisory_lock(key bigint)",
            "Return Type": "boolean",
            "Description": "Obtain exclusive session level advisory lock if available",
            "Tree": "(func_application (func_name (type_function_name (identifier pg_try_advisory_lock))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-admin.html"
        },
        {
            "Function": "pg_try_advisory_lock(key1 int, key2 int)",
            "Return Type": "boolean",
            "Description": "Obtain exclusive session level advisory lock if available",
            "Tree": "(func_application (func_name (type_function_name (identifier pg_try_advisory_lock))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-admin.html"
        },
        {
            "Function": "pg_try_advisory_lock_shared(key bigint)",
            "Return Type": "boolean",
            "Description": "Obtain shared session level advisory lock if available",
            "Tree": "(func_application (func_name (type_function_name (identifier pg_try_advisory_lock_shared))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-admin.html"
        },
        {
            "Function": "pg_try_advisory_lock_shared(key1 int, key2 int)",
            "Return Type": "boolean",
            "Description": "Obtain shared session level advisory lock if available",
            "Tree": "(func_application (func_name (type_function_name (identifier pg_try_advisory_lock_shared))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-admin.html"
        },
        {
            "Function": "pg_try_advisory_xact_lock(key bigint)",
            "Return Type": "boolean",
            "Description": "Obtain exclusive transaction level advisory lock if available",
            "Tree": "(func_application (func_name (type_function_name (identifier pg_try_advisory_xact_lock))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-admin.html"
        },
        {
            "Function": "pg_try_advisory_xact_lock(key1 int, key2 int)",
            "Return Type": "boolean",
            "Description": "Obtain exclusive transaction level advisory lock if available",
            "Tree": "(func_application (func_name (type_function_name (identifier pg_try_advisory_xact_lock))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-admin.html"
        },
        {
            "Function": "pg_try_advisory_xact_lock_shared(key bigint)",
            "Return Type": "boolean",
            "Description": "Obtain shared transaction level advisory lock if available",
            "Tree": "(func_application (func_name (type_function_name (identifier pg_try_advisory_xact_lock_shared))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-admin.html"
        },
        {
            "Function": "pg_try_advisory_xact_lock_shared(key1 int, key2 int)",
            "Return Type": "boolean",
            "Description": "Obtain shared transaction level advisory lock if available",
            "Tree": "(func_application (func_name (type_function_name (identifier pg_try_advisory_xact_lock_shared))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-admin.html"
        }
    ],
    [
        [
            "Function",
            "Return Type",
            "Description"
        ],
        {
            "Function": "pg_event_trigger_table_rewrite_oid()",
            "Return Type": "Oid",
            "Description": "The OID of the table about to be rewritten.",
            "Tree": "(func_application (func_name (type_function_name (identifier pg_event_trigger_table_rewrite_oid))) ( ))",
            "Name": "pg_event_trigger_table_rewrite_oid()",
            "Link": "https://www.postgresql.org/docs/12/functions-event-triggers.html"
        },
        {
            "Function": "pg_event_trigger_table_rewrite_reason()",
            "Return Type": "int",
            "Description": "The reason code(s) explaining the reason for rewriting. The exact meaning of the codes is release dependent.",
            "Tree": "(func_application (func_name (type_function_name (identifier pg_event_trigger_table_rewrite_reason))) ( ))",
            "Name": "pg_event_trigger_table_rewrite_reason()",
            "Link": "https://www.postgresql.org/docs/12/functions-event-triggers.html"
        }
    ],
    [
        [
            "Function",
            "Return Type",
            "Description",
            "Example",
            "Result"
        ],
        {
            "Function": "age(timestamp, timestamp)",
            "Return Type": "interval",
            "Description": "Subtract arguments, producing a \u201csymbolic\u201d result that uses years and months, rather than just days",
            "Example": "age(timestamp '2001-04-10', timestamp '1957-06-13')",
            "Result": "43 years 9 mons 27 days",
            "Tree": "(func_application (func_name (builtin_function_name age)) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-datetime.html"
        },
        {
            "Function": "age(timestamp)",
            "Return Type": "interval",
            "Description": "Subtract from current_date (at midnight)",
            "Example": "age(timestamp '1957-06-13')",
            "Result": "43 years 8 mons 3 days",
            "Tree": "(func_application (func_name (builtin_function_name age)) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-datetime.html"
        },
        {
            "Function": "clock_timestamp()",
            "Return Type": "timestamp with time zone",
            "Description": "Current date and time (changes during statement execution); see Section\u00a09.9.4",
            "Example": "",
            "Result": "",
            "Tree": "(func_application (func_name (builtin_function_name clock_timestamp)) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-datetime.html"
        },
        {
            "Function": "current_date",
            "Return Type": "date",
            "Description": "Current date; see Section\u00a09.9.4",
            "Example": "",
            "Result": "",
            "Tree": "(func_expr_common_subexpr current_date)",
            "Link": "https://www.postgresql.org/docs/12/functions-datetime.html"
        },
        {
            "Function": "current_time",
            "Return Type": "time with time zone",
            "Description": "Current time of day; see Section\u00a09.9.4",
            "Example": "",
            "Result": "",
            "Tree": "(func_expr_common_subexpr current_time)",
            "Link": "https://www.postgresql.org/docs/12/functions-datetime.html"
        },
        {
            "Function": "current_timestamp",
            "Return Type": "timestamp with time zone",
            "Description": "Current date and time (start of current transaction); see Section\u00a09.9.4",
            "Example": "",
            "Result": "",
            "Tree": "(func_expr_common_subexpr current_timestamp)",
            "Link": "https://www.postgresql.org/docs/12/functions-datetime.html"
        },
        {
            "Function": "date_part(text, timestamp)",
            "Return Type": "double precision",
            "Description": "Get subfield (equivalent to extract); see Section\u00a09.9.1",
            "Example": "date_part('hour', timestamp '2001-02-16 20:38:40')",
            "Result": "20",
            "Tree": "(func_application (func_name (builtin_function_name date_part)) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-datetime.html"
        },
        {
            "Function": "date_part(text, interval)",
            "Return Type": "double precision",
            "Description": "Get subfield (equivalent to extract); see Section\u00a09.9.1",
            "Example": "date_part('month', interval '2 years 3 months')",
            "Result": "3",
            "Tree": "(func_application (func_name (builtin_function_name date_part)) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-datetime.html"
        },
        {
            "Function": "date_trunc(text, timestamp)",
            "Return Type": "timestamp",
            "Description": "Truncate to specified precision; see Section\u00a09.9.2",
            "Example": "date_trunc('hour', timestamp '2001-02-16 20:38:40')",
            "Result": "2001-02-16 20:00:00",
            "Tree": "(func_application (func_name (builtin_function_name date_trunc)) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-datetime.html"
        },
        {
            "Function": "date_trunc(text, timestamp with time zone, text)",
            "Return Type": "timestamp with time zone",
            "Description": "Truncate to specified precision in the specified time zone; see Section\u00a09.9.2",
            "Example": "date_trunc('day', timestamptz '2001-02-16 20:38:40+00', 'Australia/Sydney')",
            "Result": "2001-02-16 13:00:00+00",
            "Tree": "(func_application (func_name (builtin_function_name date_trunc)) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-datetime.html"
        },
        {
            "Function": "date_trunc(text, interval)",
            "Return Type": "interval",
            "Description": "Truncate to specified precision; see Section\u00a09.9.2",
            "Example": "date_trunc('hour', interval '2 days 3 hours 40 minutes')",
            "Result": "2 days 03:00:00",
            "Tree": "(func_application (func_name (builtin_function_name date_trunc)) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-datetime.html"
        },
        {
            "Function": "extract(field from interval)",
            "Return Type": "double precision",
            "Description": "Get subfield; see Section\u00a09.9.1",
            "Example": "extract(month from interval '2 years 3 months')",
            "Result": "3",
            "Tree": "(func_expr_common_subexpr extract ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-datetime.html"
        },
        {
            "Function": "isfinite(date)",
            "Return Type": "boolean",
            "Description": "Test for finite date (not +/-infinity)",
            "Example": "isfinite(date '2001-02-16')",
            "Result": "true",
            "Tree": "(func_application (func_name (builtin_function_name isfinite)) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-datetime.html"
        },
        {
            "Function": "isfinite(timestamp)",
            "Return Type": "boolean",
            "Description": "Test for finite time stamp (not +/-infinity)",
            "Example": "isfinite(timestamp '2001-02-16 21:28:30')",
            "Result": "true",
            "Tree": "(func_application (func_name (builtin_function_name isfinite)) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-datetime.html"
        },
        {
            "Function": "isfinite(interval)",
            "Return Type": "boolean",
            "Description": "Test for finite interval",
            "Example": "isfinite(interval '4 hours')",
            "Result": "true",
            "Tree": "(func_application (func_name (builtin_function_name isfinite)) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-datetime.html"
        },
        {
            "Function": "justify_days(interval)",
            "Return Type": "interval",
            "Description": "Adjust interval so 30-day time periods are represented as months",
            "Example": "justify_days(interval '35 days')",
            "Result": "1 mon 5 days",
            "Tree": "(func_application (func_name (builtin_function_name justify_days)) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-datetime.html"
        },
        {
            "Function": "justify_hours(interval)",
            "Return Type": "interval",
            "Description": "Adjust interval so 24-hour time periods are represented as days",
            "Example": "justify_hours(interval '27 hours')",
            "Result": "1 day 03:00:00",
            "Tree": "(func_application (func_name (builtin_function_name justify_hours)) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-datetime.html"
        },
        {
            "Function": "justify_interval(interval)",
            "Return Type": "interval",
            "Description": "Adjust interval using justify_days and justify_hours, with additional sign adjustments",
            "Example": "justify_interval(interval '1 mon -1 hour')",
            "Result": "29 days 23:00:00",
            "Tree": "(func_application (func_name (builtin_function_name justify_interval)) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-datetime.html"
        },
        {
            "Function": "localtime",
            "Return Type": "time",
            "Description": "Current time of day; see Section\u00a09.9.4",
            "Example": "",
            "Result": "",
            "Tree": "(func_expr_common_subexpr localtime)",
            "Link": "https://www.postgresql.org/docs/12/functions-datetime.html"
        },
        {
            "Function": "localtimestamp",
            "Return Type": "timestamp",
            "Description": "Current date and time (start of current transaction); see Section\u00a09.9.4",
            "Example": "",
            "Result": "",
            "Tree": "(func_expr_common_subexpr localtimestamp)",
            "Link": "https://www.postgresql.org/docs/12/functions-datetime.html"
        },
        {
            "Function": "make_date(year int, month int, day int)",
            "Return Type": "date",
            "Description": "Create date from year, month and day fields",
            "Example": "make_date(2013, 7, 15)",
            "Result": "2013-07-15",
            "Tree": "(func_application (func_name (builtin_function_name make_date)) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-datetime.html"
        },
        {
            "Function": "make_interval(years int DEFAULT 0, months int DEFAULT 0, weeks int DEFAULT 0, days int DEFAULT 0, hours int DEFAULT 0, mins int DEFAULT 0, secs double precision DEFAULT 0.0)",
            "Return Type": "interval",
            "Description": "Create interval from years, months, weeks, days, hours, minutes and seconds fields",
            "Example": "make_interval(days => 10)",
            "Result": "10 days",
            "Tree": "(func_application (func_name (builtin_function_name make_interval)) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-datetime.html"
        },
        {
            "Function": "make_time(hour int, min int, sec double precision)",
            "Return Type": "time",
            "Description": "Create time from hour, minute and seconds fields",
            "Example": "make_time(8, 15, 23.5)",
            "Result": "08:15:23.5",
            "Tree": "(func_application (func_name (builtin_function_name make_time)) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-datetime.html"
        },
        {
            "Function": "make_timestamp(year int, month int, day int, hour int, min int, sec double precision)",
            "Return Type": "timestamp",
            "Description": "Create timestamp from year, month, day, hour, minute and seconds fields",
            "Example": "make_timestamp(2013, 7, 15, 8, 15, 23.5)",
            "Result": "2013-07-15 08:15:23.5",
            "Tree": "(func_application (func_name (builtin_function_name make_timestamp)) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-datetime.html"
        },
        {
            "Function": "make_timestamptz(year int, month int, day int, hour int, min int, sec double precision, [ timezone text ])",
            "Return Type": "timestamp with time zone",
            "Description": "Create timestamp with time zone from year, month, day, hour, minute and seconds fields; if timezone is not specified, the current time zone is used",
            "Example": "make_timestamptz(2013, 7, 15, 8, 15, 23.5)",
            "Result": "2013-07-15 08:15:23.5+01",
            "Tree": "(func_application (func_name (builtin_function_name make_timestamptz)) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-datetime.html"
        },
        {
            "Function": "now()",
            "Return Type": "timestamp with time zone",
            "Description": "Current date and time (start of current transaction); see Section\u00a09.9.4",
            "Example": "",
            "Result": "",
            "Tree": "(func_application (func_name (builtin_function_name now)) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-datetime.html"
        },
        {
            "Function": "statement_timestamp()",
            "Return Type": "timestamp with time zone",
            "Description": "Current date and time (start of current statement); see Section\u00a09.9.4",
            "Example": "",
            "Result": "",
            "Tree": "(func_application (func_name (builtin_function_name statement_timestamp)) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-datetime.html"
        },
        {
            "Function": "timeofday()",
            "Return Type": "text",
            "Description": "Current date and time (like clock_timestamp, but as a text string); see Section\u00a09.9.4",
            "Example": "",
            "Result": "",
            "Tree": "(func_application (func_name (builtin_function_name timeofday)) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-datetime.html"
        },
        {
            "Function": "transaction_timestamp()",
            "Return Type": "timestamp with time zone",
            "Description": "Current date and time (start of current transaction); see Section\u00a09.9.4",
            "Example": "",
            "Result": "",
            "Tree": "(func_application (func_name (builtin_function_name transaction_timestamp)) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-datetime.html"
        },
        {
            "Function": "to_timestamp(double precision)",
            "Return Type": "timestamp with time zone",
            "Description": "Convert Unix epoch (seconds since 1970-01-01 00:00:00+00) to timestamp",
            "Example": "to_timestamp(1284352323)",
            "Result": "2010-09-13 04:32:03+00",
            "Tree": "(func_application (func_name (builtin_function_name to_timestamp)) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-datetime.html"
        }
    ],
    [
        [
            "Function",
            "Return Type",
            "Description",
            "Example",
            "Result"
        ],
        {
            "Function": "abs(x)",
            "Return Type": "(same as input)",
            "Description": "absolute value",
            "Example": "abs(-17.4)",
            "Result": "17.4",
            "Tree": "(func_application (func_name (builtin_function_name abs)) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-math.html"
        },
        {
            "Function": "cbrt(dp)",
            "Return Type": "dp",
            "Description": "cube root",
            "Example": "cbrt(27.0)",
            "Result": "3",
            "Tree": "(func_application (func_name (builtin_function_name cbrt)) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-math.html"
        },
        {
            "Function": "ceil(dp or numeric)",
            "Return Type": "(same as input)",
            "Description": "nearest integer greater than or equal to argument",
            "Example": "ceil(-42.8)",
            "Result": "-42",
            "Tree": "(func_application (func_name (builtin_function_name ceil)) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-math.html"
        },
        {
            "Function": "ceiling(dp or numeric)",
            "Return Type": "(same as input)",
            "Description": "nearest integer greater than or equal to argument (same as ceil)",
            "Example": "ceiling(-95.3)",
            "Result": "-95",
            "Tree": "(func_application (func_name (builtin_function_name ceiling)) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-math.html"
        },
        {
            "Function": "degrees(dp)",
            "Return Type": "dp",
            "Description": "radians to degrees",
            "Example": "degrees(0.5)",
            "Result": "28.6478897565412",
            "Tree": "(func_application (func_name (builtin_function_name degrees)) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-math.html"
        },
        {
            "Function": "div(y numeric, x numeric)",
            "Return Type": "numeric",
            "Description": "integer quotient of y/x",
            "Example": "div(9,4)",
            "Result": "2",
            "Tree": "(func_application (func_name (builtin_function_name div)) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-math.html"
        },
        {
            "Function": "exp(dp or numeric)",
            "Return Type": "(same as input)",
            "Description": "exponential",
            "Example": "exp(1.0)",
            "Result": "2.71828182845905",
            "Tree": "(func_application (func_name (builtin_function_name exp)) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-math.html"
        },
        {
            "Function": "factorial(bigint)",
            "Return Type": "numeric",
            "Description": "factorial",
            "Example": "factorial(5)",
            "Result": "120",
            "Tree": "(func_application (func_name (builtin_function_name factorial)) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-math.html"
        },
        {
            "Function": "floor(dp or numeric)",
            "Return Type": "(same as input)",
            "Description": "nearest integer less than or equal to argument",
            "Example": "floor(-42.8)",
            "Result": "-43",
            "Tree": "(func_application (func_name (builtin_function_name floor)) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-math.html"
        },
        {
            "Function": "ln(dp or numeric)",
            "Return Type": "(same as input)",
            "Description": "natural logarithm",
            "Example": "ln(2.0)",
            "Result": "0.693147180559945",
            "Tree": "(func_application (func_name (builtin_function_name ln)) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-math.html"
        },
        {
            "Function": "log(dp or numeric)",
            "Return Type": "(same as input)",
            "Description": "base 10 logarithm",
            "Example": "log(100.0)",
            "Result": "2",
            "Tree": "(func_application (func_name (builtin_function_name log)) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-math.html"
        },
        {
            "Function": "log10(dp or numeric)",
            "Return Type": "(same as input)",
            "Description": "base 10 logarithm",
            "Example": "log10(100.0)",
            "Result": "2",
            "Tree": "(func_application (func_name (builtin_function_name log10)) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-math.html"
        },
        {
            "Function": "log(b numeric, x numeric)",
            "Return Type": "numeric",
            "Description": "logarithm to base b",
            "Example": "log(2.0, 64.0)",
            "Result": "6.0000000000",
            "Tree": "(func_application (func_name (builtin_function_name log)) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-math.html"
        },
        {
            "Function": "mod(y, x)",
            "Return Type": "(same as argument types)",
            "Description": "remainder of y/x",
            "Example": "mod(9,4)",
            "Result": "1",
            "Tree": "(func_application (func_name (builtin_function_name mod)) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-math.html"
        },
        {
            "Function": "pi()",
            "Return Type": "dp",
            "Description": "\u201c\u03c0\u201d constant",
            "Example": "pi()",
            "Result": "3.14159265358979",
            "Tree": "(func_application (func_name (builtin_function_name pi)) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-math.html"
        },
        {
            "Function": "power(a dp, b dp)",
            "Return Type": "dp",
            "Description": "a raised to the power of b",
            "Example": "power(9.0, 3.0)",
            "Result": "729",
            "Tree": "(func_application (func_name (builtin_function_name power)) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-math.html"
        },
        {
            "Function": "power(a numeric, b numeric)",
            "Return Type": "numeric",
            "Description": "a raised to the power of b",
            "Example": "power(9.0, 3.0)",
            "Result": "729",
            "Tree": "(func_application (func_name (builtin_function_name power)) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-math.html"
        },
        {
            "Function": "radians(dp)",
            "Return Type": "dp",
            "Description": "degrees to radians",
            "Example": "radians(45.0)",
            "Result": "0.785398163397448",
            "Tree": "(func_application (func_name (builtin_function_name radians)) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-math.html"
        },
        {
            "Function": "round(dp or numeric)",
            "Return Type": "(same as input)",
            "Description": "round to nearest integer",
            "Example": "round(42.4)",
            "Result": "42",
            "Tree": "(func_application (func_name (builtin_function_name round)) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-math.html"
        },
        {
            "Function": "round(v numeric, s int)",
            "Return Type": "numeric",
            "Description": "round to s decimal places",
            "Example": "round(42.4382, 2)",
            "Result": "42.44",
            "Tree": "(func_application (func_name (builtin_function_name round)) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-math.html"
        },
        {
            "Function": "scale(numeric)",
            "Return Type": "integer",
            "Description": "scale of the argument (the number of decimal digits in the fractional part)",
            "Example": "scale(8.41)",
            "Result": "2",
            "Tree": "(func_application (func_name (builtin_function_name scale)) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-math.html"
        },
        {
            "Function": "sign(dp or numeric)",
            "Return Type": "(same as input)",
            "Description": "sign of the argument (-1, 0, +1)",
            "Example": "sign(-8.4)",
            "Result": "-1",
            "Tree": "(func_application (func_name (builtin_function_name sign)) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-math.html"
        },
        {
            "Function": "sqrt(dp or numeric)",
            "Return Type": "(same as input)",
            "Description": "square root",
            "Example": "sqrt(2.0)",
            "Result": "1.4142135623731",
            "Tree": "(func_application (func_name (builtin_function_name sqrt)) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-math.html"
        },
        {
            "Function": "trunc(dp or numeric)",
            "Return Type": "(same as input)",
            "Description": "truncate toward zero",
            "Example": "trunc(42.8)",
            "Result": "42",
            "Tree": "(func_application (func_name (builtin_function_name trunc)) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-math.html"
        },
        {
            "Function": "trunc(v numeric, s int)",
            "Return Type": "numeric",
            "Description": "truncate to s decimal places",
            "Example": "trunc(42.4382, 2)",
            "Result": "42.43",
            "Tree": "(func_application (func_name (builtin_function_name trunc)) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-math.html"
        },
        {
            "Function": "width_bucket(operand dp, b1 dp, b2 dp, count int)",
            "Return Type": "int",
            "Description": "return the bucket number to which operand would be assigned in a histogram having count equal-width buckets spanning the range b1 to b2; returns 0 or count+1 for an input outside the range",
            "Example": "width_bucket(5.35, 0.024, 10.06, 5)",
            "Result": "3",
            "Tree": "(func_application (func_name (builtin_function_name width_bucket)) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-math.html"
        },
        {
            "Function": "width_bucket(operand numeric, b1 numeric, b2 numeric, count int)",
            "Return Type": "int",
            "Description": "return the bucket number to which operand would be assigned in a histogram having count equal-width buckets spanning the range b1 to b2; returns 0 or count+1 for an input outside the range",
            "Example": "width_bucket(5.35, 0.024, 10.06, 5)",
            "Result": "3",
            "Tree": "(func_application (func_name (builtin_function_name width_bucket)) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-math.html"
        },
        {
            "Function": "width_bucket(operand anyelement, thresholds anyarray)",
            "Return Type": "int",
            "Description": "return the bucket number to which operand would be assigned given an array listing the lower bounds of the buckets; returns 0 for an input less than the first lower bound; the thresholds array must be sorted, smallest first, or unexpected results will be obtained",
            "Example": "width_bucket(now(), array['yesterday', 'today', 'tomorrow']::timestamptz[])",
            "Result": "2",
            "Tree": "(func_application (func_name (builtin_function_name width_bucket)) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-math.html"
        }
    ],
    [
        [
            "Function",
            "Return Type",
            "Description"
        ],
        {
            "Function": "random()",
            "Return Type": "dp",
            "Description": "random value in the range 0.0 <= x < 1.0",
            "Tree": "(func_application (func_name (builtin_function_name random)) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-math.html"
        },
        {
            "Function": "setseed(dp)",
            "Return Type": "void",
            "Description": "set seed for subsequent random() calls (value between -1.0 and 1.0, inclusive)",
            "Tree": "(func_application (func_name (builtin_function_name setseed)) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-math.html"
        }
    ],
    [
        [
            "Function",
            "Description"
        ],
        {
            "Function": "acos(x)",
            "Description": "inverse cosine",
            "Tree": "(func_application (func_name (builtin_function_name acos)) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-math.html"
        },
        {
            "Function": "asin(x)",
            "Description": "inverse sine",
            "Tree": "(func_application (func_name (builtin_function_name asin)) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-math.html"
        },
        {
            "Function": "atan(x)",
            "Description": "inverse tangent",
            "Tree": "(func_application (func_name (builtin_function_name atan)) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-math.html"
        },
        {
            "Function": "atan2(y,x)",
            "Description": "inverse tangent ofy/x",
            "Tree": "(func_application (func_name (builtin_function_name atan2)) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-math.html"
        },
        {
            "Function": "cos(x)",
            "Description": "cosine",
            "Tree": "(func_application (func_name (builtin_function_name cos)) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-math.html"
        },
        {
            "Function": "cot(x)",
            "Description": "cotangent",
            "Tree": "(func_application (func_name (builtin_function_name cot)) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-math.html"
        },
        {
            "Function": "sin(x)",
            "Description": "sine",
            "Tree": "(func_application (func_name (builtin_function_name sin)) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-math.html"
        },
        {
            "Function": "tan(x)",
            "Description": "tangent",
            "Tree": "(func_application (func_name (builtin_function_name tan)) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-math.html"
        }
    ],
    [
        [
            "Function",
            "Description"
        ],
        {
            "Function": "acosd(x)",
            "Description": "inverse cosine",
            "Tree": "(func_application (func_name (builtin_function_name acosd)) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-math.html"
        },
        {
            "Function": "asind(x)",
            "Description": "inverse sine",
            "Tree": "(func_application (func_name (builtin_function_name asind)) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-math.html"
        },
        {
            "Function": "atand(x)",
            "Description": "inverse tangent",
            "Tree": "(func_application (func_name (builtin_function_name atand)) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-math.html"
        },
        {
            "Function": "atan2d(y,x)",
            "Description": "inverse tangent ofy/x",
            "Tree": "(func_application (func_name (builtin_function_name atan2d)) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-math.html"
        },
        {
            "Function": "cosd(x)",
            "Description": "cosine",
            "Tree": "(func_application (func_name (builtin_function_name cosd)) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-math.html"
        },
        {
            "Function": "cotd(x)",
            "Description": "cotangent",
            "Tree": "(func_application (func_name (builtin_function_name cotd)) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-math.html"
        },
        {
            "Function": "sind(x)",
            "Description": "sine",
            "Tree": "(func_application (func_name (builtin_function_name sind)) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-math.html"
        },
        {
            "Function": "tand(x)",
            "Description": "tangent",
            "Tree": "(func_application (func_name (builtin_function_name tand)) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-math.html"
        }
    ],
    [
        [
            "Function",
            "Description",
            "Example",
            "Result"
        ],
        {
            "Function": "sinh(x)",
            "Description": "hyperbolic sine",
            "Example": "sinh(0)",
            "Result": "0",
            "Tree": "(func_application (func_name (builtin_function_name sinh)) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-math.html"
        },
        {
            "Function": "cosh(x)",
            "Description": "hyperbolic cosine",
            "Example": "cosh(0)",
            "Result": "1",
            "Tree": "(func_application (func_name (builtin_function_name cosh)) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-math.html"
        },
        {
            "Function": "tanh(x)",
            "Description": "hyperbolic tangent",
            "Example": "tanh(0)",
            "Result": "0",
            "Tree": "(func_application (func_name (builtin_function_name tanh)) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-math.html"
        },
        {
            "Function": "asinh(x)",
            "Description": "inverse hyperbolic sine",
            "Example": "asinh(0)",
            "Result": "0",
            "Tree": "(func_application (func_name (builtin_function_name asinh)) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-math.html"
        },
        {
            "Function": "acosh(x)",
            "Description": "inverse hyperbolic cosine",
            "Example": "acosh(1)",
            "Result": "0",
            "Tree": "(func_application (func_name (builtin_function_name acosh)) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-math.html"
        },
        {
            "Function": "atanh(x)",
            "Description": "inverse hyperbolic tangent",
            "Example": "atanh(0)",
            "Result": "0",
            "Tree": "(func_application (func_name (builtin_function_name atanh)) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-math.html"
        }
    ],
    [
        [
            "Function",
            "Argument Type",
            "Return Type",
            "Description"
        ],
        {
            "Function": "generate_series(start, stop)",
            "Argument Type": "int, bigint or numeric",
            "Return Type": "setof int, setof bigint, or setof numeric (same as argument type)",
            "Description": "Generate a series of values, from start to stop with a step size of one",
            "Tree": "(func_application (func_name (type_function_name (identifier generate_series))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-srf.html"
        },
        {
            "Function": "generate_series(start, stop, step)",
            "Argument Type": "int, bigint or numeric",
            "Return Type": "setof int, setof bigint or setof numeric (same as argument type)",
            "Description": "Generate a series of values, from start to stop with a step size of step",
            "Tree": "(func_application (func_name (type_function_name (identifier generate_series))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-srf.html"
        },
        {
            "Function": "generate_series(start, stop, step interval)",
            "Argument Type": "timestamp or timestamp with time zone",
            "Return Type": "setof timestamp or setof timestamp with time zone (same as argument type)",
            "Description": "Generate a series of values, from start to stop with a step size of step",
            "Tree": "(func_application (func_name (type_function_name (identifier generate_series))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-srf.html"
        }
    ],
    [
        [
            "Function",
            "Return Type",
            "Description"
        ],
        {
            "Function": "generate_subscripts(array anyarray, dim int)",
            "Return Type": "setof int",
            "Description": "Generate a series comprising the given array's subscripts.",
            "Tree": "(func_application (func_name (type_function_name (identifier generate_subscripts))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-srf.html"
        },
        {
            "Function": "generate_subscripts(array anyarray, dim int, reverse boolean)",
            "Return Type": "setof int",
            "Description": "Generate a series comprising the given array's subscripts. When reverse is true, the series is returned in reverse order.",
            "Tree": "(func_application (func_name (type_function_name (identifier generate_subscripts))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-srf.html"
        }
    ],
    [
        [
            "Function",
            "Return Type",
            "Description",
            "Example"
        ],
        {
            "Function": "area(object)",
            "Return Type": "double precision",
            "Description": "area",
            "Example": "area(box '((0,0),(1,1))')",
            "Tree": "(func_application (func_name (type_function_name (identifier area))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-geometry.html"
        },
        {
            "Function": "center(object)",
            "Return Type": "point",
            "Description": "center",
            "Example": "center(box '((0,0),(1,2))')",
            "Tree": "(func_application (func_name (type_function_name (identifier center))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-geometry.html"
        },
        {
            "Function": "diameter(circle)",
            "Return Type": "double precision",
            "Description": "diameter of circle",
            "Example": "diameter(circle '((0,0),2.0)')",
            "Tree": "(func_application (func_name (type_function_name (identifier diameter))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-geometry.html"
        },
        {
            "Function": "height(box)",
            "Return Type": "double precision",
            "Description": "vertical size of box",
            "Example": "height(box '((0,0),(1,1))')",
            "Tree": "(func_application (func_name (type_function_name (identifier height))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-geometry.html"
        },
        {
            "Function": "isclosed(path)",
            "Return Type": "boolean",
            "Description": "a closed path?",
            "Example": "isclosed(path '((0,0),(1,1),(2,0))')",
            "Tree": "(func_application (func_name (type_function_name (identifier isclosed))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-geometry.html"
        },
        {
            "Function": "isopen(path)",
            "Return Type": "boolean",
            "Description": "an open path?",
            "Example": "isopen(path '[(0,0),(1,1),(2,0)]')",
            "Tree": "(func_application (func_name (type_function_name (identifier isopen))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-geometry.html"
        },
        {
            "Function": "length(object)",
            "Return Type": "double precision",
            "Description": "length",
            "Example": "length(path '((-1,0),(1,0))')",
            "Tree": "(func_application (func_name (builtin_function_name length)) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-geometry.html"
        },
        {
            "Function": "npoints(path)",
            "Return Type": "int",
            "Description": "number of points",
            "Example": "npoints(path '[(0,0),(1,1),(2,0)]')",
            "Tree": "(func_application (func_name (type_function_name (identifier npoints))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-geometry.html"
        },
        {
            "Function": "npoints(polygon)",
            "Return Type": "int",
            "Description": "number of points",
            "Example": "npoints(polygon '((1,1),(0,0))')",
            "Tree": "(func_application (func_name (type_function_name (identifier npoints))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-geometry.html"
        },
        {
            "Function": "pclose(path)",
            "Return Type": "path",
            "Description": "convert path to closed",
            "Example": "pclose(path '[(0,0),(1,1),(2,0)]')",
            "Tree": "(func_application (func_name (type_function_name (identifier pclose))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-geometry.html"
        },
        {
            "Function": "popen(path)",
            "Return Type": "path",
            "Description": "convert path to open",
            "Example": "popen(path '((0,0),(1,1),(2,0))')",
            "Tree": "(func_application (func_name (type_function_name (identifier popen))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-geometry.html"
        },
        {
            "Function": "radius(circle)",
            "Return Type": "double precision",
            "Description": "radius of circle",
            "Example": "radius(circle '((0,0),2.0)')",
            "Tree": "(func_application (func_name (type_function_name (identifier radius))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-geometry.html"
        },
        {
            "Function": "width(box)",
            "Return Type": "double precision",
            "Description": "horizontal size of box",
            "Example": "width(box '((0,0),(1,1))')",
            "Tree": "(func_application (func_name (type_function_name (identifier width))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-geometry.html"
        }
    ],
    [
        [
            "Function",
            "Return Type",
            "Description",
            "Example"
        ],
        {
            "Function": "box(circle)",
            "Return Type": "box",
            "Description": "circle to box",
            "Example": "box(circle '((0,0),2.0)')",
            "Tree": "(func_application (func_name (type_function_name (identifier box))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-geometry.html"
        },
        {
            "Function": "box(point)",
            "Return Type": "box",
            "Description": "point to empty box",
            "Example": "box(point '(0,0)')",
            "Tree": "(func_application (func_name (type_function_name (identifier box))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-geometry.html"
        },
        {
            "Function": "box(point, point)",
            "Return Type": "box",
            "Description": "points to box",
            "Example": "box(point '(0,0)', point '(1,1)')",
            "Tree": "(func_application (func_name (type_function_name (identifier box))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-geometry.html"
        },
        {
            "Function": "box(polygon)",
            "Return Type": "box",
            "Description": "polygon to box",
            "Example": "box(polygon '((0,0),(1,1),(2,0))')",
            "Tree": "(func_application (func_name (type_function_name (identifier box))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-geometry.html"
        },
        {
            "Function": "bound_box(box, box)",
            "Return Type": "box",
            "Description": "boxes to bounding box",
            "Example": "bound_box(box '((0,0),(1,1))', box '((3,3),(4,4))')",
            "Tree": "(func_application (func_name (type_function_name (identifier bound_box))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-geometry.html"
        },
        {
            "Function": "circle(box)",
            "Return Type": "circle",
            "Description": "box to circle",
            "Example": "circle(box '((0,0),(1,1))')",
            "Tree": "(func_application (func_name (type_function_name (identifier circle))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-geometry.html"
        },
        {
            "Function": "circle(point, double precision)",
            "Return Type": "circle",
            "Description": "center and radius to circle",
            "Example": "circle(point '(0,0)', 2.0)",
            "Tree": "(func_application (func_name (type_function_name (identifier circle))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-geometry.html"
        },
        {
            "Function": "circle(polygon)",
            "Return Type": "circle",
            "Description": "polygon to circle",
            "Example": "circle(polygon '((0,0),(1,1),(2,0))')",
            "Tree": "(func_application (func_name (type_function_name (identifier circle))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-geometry.html"
        },
        {
            "Function": "line(point, point)",
            "Return Type": "line",
            "Description": "points to line",
            "Example": "line(point '(-1,0)', point '(1,0)')",
            "Tree": "(func_application (func_name (type_function_name (identifier line))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-geometry.html"
        },
        {
            "Function": "lseg(box)",
            "Return Type": "lseg",
            "Description": "box diagonal to line segment",
            "Example": "lseg(box '((-1,0),(1,0))')",
            "Tree": "(func_application (func_name (type_function_name (identifier lseg))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-geometry.html"
        },
        {
            "Function": "lseg(point, point)",
            "Return Type": "lseg",
            "Description": "points to line segment",
            "Example": "lseg(point '(-1,0)', point '(1,0)')",
            "Tree": "(func_application (func_name (type_function_name (identifier lseg))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-geometry.html"
        },
        {
            "Function": "path(polygon)",
            "Return Type": "path",
            "Description": "polygon to path",
            "Example": "path(polygon '((0,0),(1,1),(2,0))')",
            "Tree": "(func_application (func_name (type_function_name (identifier path))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-geometry.html"
        },
        {
            "Function": "point(double precision, double precision)",
            "Return Type": "point",
            "Description": "construct point",
            "Example": "point(23.4, -44.5)",
            "Tree": "(func_application (func_name (type_function_name (identifier point))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-geometry.html"
        },
        {
            "Function": "point(box)",
            "Return Type": "point",
            "Description": "center of box",
            "Example": "point(box '((-1,0),(1,0))')",
            "Tree": "(func_application (func_name (type_function_name (identifier point))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-geometry.html"
        },
        {
            "Function": "point(circle)",
            "Return Type": "point",
            "Description": "center of circle",
            "Example": "point(circle '((0,0),2.0)')",
            "Tree": "(func_application (func_name (type_function_name (identifier point))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-geometry.html"
        },
        {
            "Function": "point(lseg)",
            "Return Type": "point",
            "Description": "center of line segment",
            "Example": "point(lseg '((-1,0),(1,0))')",
            "Tree": "(func_application (func_name (type_function_name (identifier point))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-geometry.html"
        },
        {
            "Function": "point(polygon)",
            "Return Type": "point",
            "Description": "center of polygon",
            "Example": "point(polygon '((0,0),(1,1),(2,0))')",
            "Tree": "(func_application (func_name (type_function_name (identifier point))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-geometry.html"
        },
        {
            "Function": "polygon(box)",
            "Return Type": "polygon",
            "Description": "box to 4-point polygon",
            "Example": "polygon(box '((0,0),(1,1))')",
            "Tree": "(func_application (func_name (type_function_name (identifier polygon))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-geometry.html"
        },
        {
            "Function": "polygon(circle)",
            "Return Type": "polygon",
            "Description": "circle to 12-point polygon",
            "Example": "polygon(circle '((0,0),2.0)')",
            "Tree": "(func_application (func_name (type_function_name (identifier polygon))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-geometry.html"
        },
        {
            "Function": "polygon(npts, circle)",
            "Return Type": "polygon",
            "Description": "circle to npts-point polygon",
            "Example": "polygon(12, circle '((0,0),2.0)')",
            "Tree": "(func_application (func_name (type_function_name (identifier polygon))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-geometry.html"
        },
        {
            "Function": "polygon(path)",
            "Return Type": "polygon",
            "Description": "path to polygon",
            "Example": "polygon(path '((0,0),(1,1),(2,0))')",
            "Tree": "(func_application (func_name (type_function_name (identifier polygon))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-geometry.html"
        }
    ],
    [
        [
            "Function",
            "Return Type",
            "Description",
            "Example",
            "Result"
        ],
        {
            "Function": "octet_length(string)",
            "Return Type": "int",
            "Description": "Number of bytes in string",
            "Example": "octet_length('jose')",
            "Result": "4",
            "Tree": "(func_application (func_name (builtin_function_name octet_length)) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-string.html"
        },
        {
            "Function": "trim([both] bytes from string)",
            "Return Type": "bytea",
            "Description": "Remove the longest string containing only bytes appearing in bytes from the start and end of string",
            "Example": "trim('\\000\\001'::bytea from '\\000Tom\\001'::bytea)",
            "Result": "Tom",
            "Tree": "(func_expr_common_subexpr trim ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-binarystring.html"
        }
    ],
    [
        [
            "Function",
            "Return Type",
            "Description",
            "Example",
            "Result"
        ],
        {
            "Function": "btrim(string bytea, bytes bytea)",
            "Return Type": "bytea",
            "Description": "Remove the longest string containing only bytes appearing in bytes from the start and end of string",
            "Example": "btrim('\\000trim\\001'::bytea, '\\000\\001'::bytea)",
            "Result": "trim",
            "Tree": "(func_application (func_name (builtin_function_name btrim)) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-binarystring.html"
        },
        {
            "Function": "decode(string text, format text)",
            "Return Type": "bytea",
            "Description": "Decode binary data from textual representation in string. Options for format are same as in encode.",
            "Example": "decode('MTIzAAE=', 'base64')",
            "Result": "\\x3132330001",
            "Tree": "(func_application (func_name (type_function_name (identifier decode))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-string.html"
        },
        {
            "Function": "encode(data bytea, format text)",
            "Return Type": "text",
            "Description": "Encode binary data into a textual representation. Supported formats are: base64, hex, escape. escape converts zero bytes and high-bit-set bytes to octal sequences (\\nnn) and doubles backslashes.",
            "Example": "encode('123\\000\\001', 'base64')",
            "Result": "MTIzAAE=",
            "Tree": "(func_application (func_name (type_function_name (identifier encode))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-string.html"
        },
        {
            "Function": "get_bit(string, offset)",
            "Return Type": "int",
            "Description": "Extract bit from string",
            "Example": "get_bit('Th\\000omas'::bytea, 45)",
            "Result": "1",
            "Tree": "(func_application (func_name (type_function_name (identifier get_bit))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-binarystring.html"
        },
        {
            "Function": "get_byte(string, offset)",
            "Return Type": "int",
            "Description": "Extract byte from string",
            "Example": "get_byte('Th\\000omas'::bytea, 4)",
            "Result": "109",
            "Tree": "(func_application (func_name (type_function_name (identifier get_byte))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-binarystring.html"
        },
        {
            "Function": "length(string)",
            "Return Type": "int",
            "Description": "Number of characters in string",
            "Example": "length('jose')",
            "Result": "4",
            "Tree": "(func_application (func_name (builtin_function_name length)) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-string.html"
        },
        {
            "Function": "set_bit(string, offset, newvalue)",
            "Return Type": "bytea",
            "Description": "Set bit in string",
            "Example": "set_bit('Th\\000omas'::bytea, 45, 0)",
            "Result": "Th\\000omAs",
            "Tree": "(func_application (func_name (type_function_name (identifier set_bit))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-binarystring.html"
        },
        {
            "Function": "set_byte(string, offset, newvalue)",
            "Return Type": "bytea",
            "Description": "Set byte in string",
            "Example": "set_byte('Th\\000omas'::bytea, 4, 64)",
            "Result": "Th\\000o@as",
            "Tree": "(func_application (func_name (type_function_name (identifier set_byte))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-binarystring.html"
        },
        {
            "Function": "sha224(bytea)",
            "Return Type": "bytea",
            "Description": "SHA-224 hash",
            "Example": "sha224('abc')",
            "Result": "\\x23097d223405d8228642a477bda2\u200b55b32aadbce4bda0b3f7e36c9da7",
            "Tree": "(func_application (func_name (type_function_name (identifier sha224))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-binarystring.html"
        },
        {
            "Function": "sha256(bytea)",
            "Return Type": "bytea",
            "Description": "SHA-256 hash",
            "Example": "sha256('abc')",
            "Result": "\\xba7816bf8f01cfea414140de5dae2223\u200bb00361a396177a9cb410ff61f20015ad",
            "Tree": "(func_application (func_name (type_function_name (identifier sha256))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-binarystring.html"
        },
        {
            "Function": "sha384(bytea)",
            "Return Type": "bytea",
            "Description": "SHA-384 hash",
            "Example": "sha384('abc')",
            "Result": "\\xcb00753f45a35e8bb5a03d699ac65007\u200b272c32ab0eded1631a8b605a43ff5bed\u200b8086072ba1e7cc2358baeca134c825a7",
            "Tree": "(func_application (func_name (type_function_name (identifier sha384))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-binarystring.html"
        },
        {
            "Function": "sha512(bytea)",
            "Return Type": "bytea",
            "Description": "SHA-512 hash",
            "Example": "sha512('abc')",
            "Result": "\\xddaf35a193617abacc417349ae204131\u200b12e6fa4e89a97ea20a9eeee64b55d39a\u200b2192992a274fc1a836ba3c23a3feebbd\u200b454d4423643ce80e2a9ac94fa54ca49f",
            "Tree": "(func_application (func_name (type_function_name (identifier sha512))) ( ))",
            "Link": "https://www.postgresql.org/docs/12/functions-binarystring.html"
        }
    ]
]