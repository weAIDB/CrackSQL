[
    {
        "Type": [
            "BIT",
            "BIT ( M )"
        ],
        "Description": [
            "<link><code>BIT[(M)]</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/bit-type.html</link>A bit-value type. <code>M</code> indicates the number of bits per value, from 1 to 64. The default is 1 if <code>M</code> is omitted."
        ],
        "Links": [
            "https://dev.mysql.com/doc/refman/8.0/en/bit-type.html"
        ],
        "Compensate": [
            "The <code>BIT</code> data type is used to store bit values. A type of <code>BIT(M)</code> enables storage of <code>M</code>-bit values. <code>M</code> can range from 1 to 64.",
            "If you assign a value to a <code>BIT(M)</code> column that is less than <code>M</code> bits long, the value is padded on the left with zeros. For example, assigning a value of <code>b'101'</code> to a <code>BIT(6)</code> column is, in effect, the same as assigning <code>b'000101'</code>.",
            "NDB Cluster. The maximum combined size of all <code>BIT</code> columns used in a given <code>NDB</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/mysql-cluster.html table must not exceed 4096 bits."
        ],
        "Tree": [
            "(dataType BIT)",
            "(dataType BIT (lengthOneDimension ( )))"
        ]
    },
    {
        "Type": [
            "TINYINT",
            "TINYINT ( M )",
            "TINYINT UNSIGNED",
            "TINYINT ZEROFILL",
            "TINYINT UNSIGNED ZEROFILL",
            "TINYINT ( M ) ZEROFILL",
            "TINYINT ( M ) UNSIGNED",
            "TINYINT ( M ) UNSIGNED ZEROFILL"
        ],
        "Description": [
            "For integer data types, <code>M</code> indicates the minimum display width. The maximum display width is 255. Display width is unrelated to the range of values a type can store, as described in <link>Section 13.1.6, \u201cNumeric Type Attributes\u201d&LINK&https://dev.mysql.com/doc/refman/8.0/en/numeric-type-attributes.html</link>.",
            "As of MySQL 8.0.17, the display width attribute is deprecated for integer data types; you should expect support for it to be removed in a future version of MySQL.",
            "If you specify <code>ZEROFILL</code> for a numeric column, MySQL automatically adds the <code>UNSIGNED</code> attribute to the column.",
            "As of MySQL 8.0.17, the <code>ZEROFILL</code> attribute is deprecated for numeric data types; you should expect support for it to be removed in a future version of MySQL. Consider using an alternative means of producing the effect of this attribute. For example, applications could use the <link><code>LPAD()</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_lpad</link> function to zero-pad numbers up to the desired width, or they could store the formatted numbers in <link><code>CHAR</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/char.html</link> columns.",
            "Numeric data types that permit the <code>UNSIGNED</code> attribute also permit <code>SIGNED</code>. However, these data types are signed by default, so the <code>SIGNED</code> attribute has no effect.",
            "When you use subtraction between integer values where one is of type <code>UNSIGNED</code>, the result is unsigned unless the <link><code>NO_UNSIGNED_SUBTRACTION</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/sql-mode.html#sqlmode_no_unsigned_subtraction</link> SQL mode is enabled. See <link>Section 14.10, \u201cCast Functions and Operators\u201d&LINK&https://dev.mysql.com/doc/refman/8.0/en/cast-functions.html</link>.",
            "A very small integer. The signed range is <code>-128</code> to <code>127</code>. The unsigned range is <code>0</code> to <code>255</code>."
        ],
        "Links": [
            "https://dev.mysql.com/doc/refman/8.0/en/integer-types.html"
        ],
        "Compensate": [
            "MySQL supports the SQL standard integer types <code>INTEGER</code> (or <code>INT</code>) and <code>SMALLINT</code>. As an extension to the standard, MySQL also supports the integer types <code>TINYINT</code>, <code>MEDIUMINT</code>, and <code>BIGINT</code>. The following table shows the required storage and range for each integer type."
        ],
        "Storage (Bytes)": "1",
        "Minimum Value Signed": "-128",
        "Minimum Value Unsigned": "0",
        "Maximum Value Signed": "127",
        "Maximum Value Unsigned": "255",
        "Tree": [
            "(dataType TINYINT)",
            "(dataType TINYINT (lengthOneDimension ( )))",
            "(dataType TINYINT UNSIGNED)",
            "(dataType TINYINT ZEROFILL)",
            "(dataType TINYINT UNSIGNED ZEROFILL)",
            "(dataType TINYINT (lengthOneDimension ( )) ZEROFILL)",
            "(dataType TINYINT (lengthOneDimension ( )) UNSIGNED)",
            "(dataType TINYINT (lengthOneDimension ( )) UNSIGNED ZEROFILL)"
        ]
    },
    {
        "Type": [
            "BOOL",
            "BOOLEAN"
        ],
        "Description": [
            "These types are synonyms for <link><code>TINYINT(1)</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/integer-types.html</link>. A value of zero is considered false. Nonzero values are considered true:\n<code>mysql> SELECT IF(0, 'true', 'false');\n+------------------------+\n| IF(0, 'true', 'false') |\n+------------------------+\n| false                  |\n+------------------------+\nmysql> SELECT IF(1, 'true', 'false');\n+------------------------+\n| IF(1, 'true', 'false') |\n+------------------------+\n| true                   |\n+------------------------+\nmysql> SELECT IF(2, 'true', 'false');\n+------------------------+\n| IF(2, 'true', 'false') |\n+------------------------+\n| true                   |\n+------------------------+</code>\nHowever, the values <code>TRUE</code> and <code>FALSE</code> are merely aliases for <code>1</code> and <code>0</code>, respectively, as shown here:\n<code>mysql> SELECT IF(0 = FALSE, 'true', 'false');\n+--------------------------------+\n| IF(0 = FALSE, 'true', 'false') |\n+--------------------------------+\n| true                           |\n+--------------------------------+\nmysql> SELECT IF(1 = TRUE, 'true', 'false');\n+-------------------------------+\n| IF(1 = TRUE, 'true', 'false') |\n+-------------------------------+\n| true                          |\n+-------------------------------+\nmysql> SELECT IF(2 = TRUE, 'true', 'false');\n+-------------------------------+\n| IF(2 = TRUE, 'true', 'false') |\n+-------------------------------+\n| false                         |\n+-------------------------------+\nmysql> SELECT IF(2 = FALSE, 'true', 'false');\n+--------------------------------+\n| IF(2 = FALSE, 'true', 'false') |\n+--------------------------------+\n| false                          |\n+--------------------------------+</code>\nThe last two statements display the results shown because <code>2</code> is equal to neither <code>1</code> nor <code>0</code>.\n"
        ],
        "Links": [],
        "Compensate": [],
        "Tree": [
            "(dataType BOOL)",
            "(dataType BOOLEAN)"
        ]
    },
    {
        "Type": [
            "SMALLINT",
            "SMALLINT ( M )",
            "SMALLINT UNSIGNED",
            "SMALLINT ZEROFILL",
            "SMALLINT UNSIGNED ZEROFILL",
            "SMALLINT ( M ) ZEROFILL",
            "SMALLINT ( M ) UNSIGNED",
            "SMALLINT ( M ) UNSIGNED ZEROFILL"
        ],
        "Description": [
            "For integer data types, <code>M</code> indicates the minimum display width. The maximum display width is 255. Display width is unrelated to the range of values a type can store, as described in <link>Section 13.1.6, \u201cNumeric Type Attributes\u201d&LINK&https://dev.mysql.com/doc/refman/8.0/en/numeric-type-attributes.html</link>.",
            "As of MySQL 8.0.17, the display width attribute is deprecated for integer data types; you should expect support for it to be removed in a future version of MySQL.",
            "If you specify <code>ZEROFILL</code> for a numeric column, MySQL automatically adds the <code>UNSIGNED</code> attribute to the column.",
            "Numeric data types that permit the <code>UNSIGNED</code> attribute also permit <code>SIGNED</code>. However, these data types are signed by default, so the <code>SIGNED</code> attribute has no effect.",
            "When you use subtraction between integer values where one is of type <code>UNSIGNED</code>, the result is unsigned unless the <link><code>NO_UNSIGNED_SUBTRACTION</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/sql-mode.html#sqlmode_no_unsigned_subtraction</link> SQL mode is enabled. See <link>Section 14.10, \u201cCast Functions and Operators\u201d&LINK&https://dev.mysql.com/doc/refman/8.0/en/cast-functions.html</link>.",
            "A small integer. The signed range is <code>-32768</code> to <code>32767</code>. The unsigned range is <code>0</code> to <code>65535</code>."
        ],
        "Links": [
            "https://dev.mysql.com/doc/refman/8.0/en/integer-types.html"
        ],
        "Compensate": [
            "MySQL supports the SQL standard integer types <code>INTEGER</code> (or <code>INT</code>) and <code>SMALLINT</code>. As an extension to the standard, MySQL also supports the integer types <code>TINYINT</code>, <code>MEDIUMINT</code>, and <code>BIGINT</code>. The following table shows the required storage and range for each integer type."
        ],
        "Storage (Bytes)": "2",
        "Minimum Value Signed": "-32768",
        "Minimum Value Unsigned": "0",
        "Maximum Value Signed": "32767",
        "Maximum Value Unsigned": "65535",
        "Tree": [
            "(dataType SMALLINT)",
            "(dataType SMALLINT (lengthOneDimension ( )))",
            "(dataType SMALLINT UNSIGNED)",
            "(dataType SMALLINT ZEROFILL)",
            "(dataType SMALLINT UNSIGNED ZEROFILL)",
            "(dataType SMALLINT (lengthOneDimension ( )) ZEROFILL)",
            "(dataType SMALLINT (lengthOneDimension ( )) UNSIGNED)",
            "(dataType SMALLINT (lengthOneDimension ( )) UNSIGNED ZEROFILL)"
        ]
    },
    {
        "Type": [
            "MEDIUMINT",
            "MEDIUMINT ( M )",
            "MEDIUMINT UNSIGNED",
            "MEDIUMINT ZEROFILL",
            "MEDIUMINT UNSIGNED ZEROFILL",
            "MEDIUMINT ( M ) ZEROFILL",
            "MEDIUMINT ( M ) UNSIGNED",
            "MEDIUMINT ( M ) UNSIGNED ZEROFILL"
        ],
        "Description": [
            "For integer data types, <code>M</code> indicates the minimum display width. The maximum display width is 255. Display width is unrelated to the range of values a type can store, as described in <link>Section 13.1.6, \u201cNumeric Type Attributes\u201d&LINK&https://dev.mysql.com/doc/refman/8.0/en/numeric-type-attributes.html</link>.",
            "As of MySQL 8.0.17, the display width attribute is deprecated for integer data types; you should expect support for it to be removed in a future version of MySQL.",
            "If you specify <code>ZEROFILL</code> for a numeric column, MySQL automatically adds the <code>UNSIGNED</code> attribute to the column.",
            "As of MySQL 8.0.17, the <code>ZEROFILL</code> attribute is deprecated for numeric data types; you should expect support for it to be removed in a future version of MySQL. Consider using an alternative means of producing the effect of this attribute. For example, applications could use the <link><code>LPAD()</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_lpad</link> function to zero-pad numbers up to the desired width, or they could store the formatted numbers in <link><code>CHAR</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/char.html</link> columns.",
            "Numeric data types that permit the <code>UNSIGNED</code> attribute also permit <code>SIGNED</code>. However, these data types are signed by default, so the <code>SIGNED</code> attribute has no effect.",
            "When you use subtraction between integer values where one is of type <code>UNSIGNED</code>, the result is unsigned unless the <link><code>NO_UNSIGNED_SUBTRACTION</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/sql-mode.html#sqlmode_no_unsigned_subtraction</link> SQL mode is enabled. See <link>Section 14.10, \u201cCast Functions and Operators\u201d&LINK&https://dev.mysql.com/doc/refman/8.0/en/cast-functions.html</link>.",
            "A medium-sized integer. The signed range is <code>-8388608</code> to <code>8388607</code>. The unsigned range is <code>0</code> to <code>16777215</code>."
        ],
        "Links": [
            "https://dev.mysql.com/doc/refman/8.0/en/integer-types.html"
        ],
        "Compensate": [
            "MySQL supports the SQL standard integer types <code>INTEGER</code> (or <code>INT</code>) and <code>SMALLINT</code>. As an extension to the standard, MySQL also supports the integer types <code>TINYINT</code>, <code>MEDIUMINT</code>, and <code>BIGINT</code>. The following table shows the required storage and range for each integer type."
        ],
        "Storage (Bytes)": "3",
        "Minimum Value Signed": "-8388608",
        "Minimum Value Unsigned": "0",
        "Maximum Value Signed": "8388607",
        "Maximum Value Unsigned": "16777215",
        "Tree": [
            "(dataType MEDIUMINT)",
            "(dataType MEDIUMINT (lengthOneDimension ( )))",
            "(dataType MEDIUMINT UNSIGNED)",
            "(dataType MEDIUMINT ZEROFILL)",
            "(dataType MEDIUMINT UNSIGNED ZEROFILL)",
            "(dataType MEDIUMINT (lengthOneDimension ( )) ZEROFILL)",
            "(dataType MEDIUMINT (lengthOneDimension ( )) UNSIGNED)",
            "(dataType MEDIUMINT (lengthOneDimension ( )) UNSIGNED ZEROFILL)"
        ]
    },
    {
        "Type": [
            "INT",
            "INT ( M )",
            "INT UNSIGNED",
            "INT ZEROFILL",
            "INT UNSIGNED ZEROFILL",
            "INT ( M ) ZEROFILL",
            "INT ( M ) UNSIGNED",
            "INT ( M ) UNSIGNED ZEROFILL",
            "INTEGER",
            "INTEGER ( M )",
            "INTEGER UNSIGNED",
            "INTEGER ZEROFILL",
            "INTEGER UNSIGNED ZEROFILL",
            "INTEGER ( M ) ZEROFILL",
            "INTEGER ( M ) UNSIGNED",
            "INTEGER ( M ) UNSIGNED ZEROFILL"
        ],
        "Description": [
            "For integer data types, <code>M</code> indicates the minimum display width. The maximum display width is 255. Display width is unrelated to the range of values a type can store, as described in <link>Section 13.1.6, \u201cNumeric Type Attributes\u201d&LINK&https://dev.mysql.com/doc/refman/8.0/en/numeric-type-attributes.html</link>.",
            "As of MySQL 8.0.17, the display width attribute is deprecated for integer data types; you should expect support for it to be removed in a future version of MySQL.",
            "If you specify <code>ZEROFILL</code> for a numeric column, MySQL automatically adds the <code>UNSIGNED</code> attribute to the column.",
            "As of MySQL 8.0.17, the <code>ZEROFILL</code> attribute is deprecated for numeric data types; you should expect support for it to be removed in a future version of MySQL. Consider using an alternative means of producing the effect of this attribute. For example, applications could use the <link><code>LPAD()</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_lpad</link> function to zero-pad numbers up to the desired width, or they could store the formatted numbers in <link><code>CHAR</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/char.html</link> columns.",
            "Numeric data types that permit the <code>UNSIGNED</code> attribute also permit <code>SIGNED</code>. However, these data types are signed by default, so the <code>SIGNED</code> attribute has no effect.",
            "When you use subtraction between integer values where one is of type <code>UNSIGNED</code>, the result is unsigned unless the <link><code>NO_UNSIGNED_SUBTRACTION</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/sql-mode.html#sqlmode_no_unsigned_subtraction</link> SQL mode is enabled. See <link>Section 14.10, \u201cCast Functions and Operators\u201d&LINK&https://dev.mysql.com/doc/refman/8.0/en/cast-functions.html</link>.",
            "A normal-size integer. The signed range is <code>-2147483648</code> to <code>2147483647</code>. The unsigned range is <code>0</code> to <code>4294967295</code>.",
            "<link><code>INTEGER[(M)] [UNSIGNED] [ZEROFILL]</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/integer-types.html</link>\nThis type is a synonym for <link><code>INT</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/integer-types.html</link>."
        ],
        "Links": [
            "https://dev.mysql.com/doc/refman/8.0/en/integer-types.html"
        ],
        "Compensate": [
            "MySQL supports the SQL standard integer types <code>INTEGER</code> (or <code>INT</code>) and <code>SMALLINT</code>. As an extension to the standard, MySQL also supports the integer types <code>TINYINT</code>, <code>MEDIUMINT</code>, and <code>BIGINT</code>. The following table shows the required storage and range for each integer type."
        ],
        "Storage (Bytes)": "4",
        "Minimum Value Signed": "-2147483648",
        "Minimum Value Unsigned": "0",
        "Maximum Value Signed": "2147483647",
        "Maximum Value Unsigned": "4294967295",
        "Tree": [
            "(dataType INT)",
            "(dataType INT (lengthOneDimension ( )))",
            "(dataType INT UNSIGNED)",
            "(dataType INT ZEROFILL)",
            "(dataType INT UNSIGNED ZEROFILL)",
            "(dataType INT (lengthOneDimension ( )) ZEROFILL)",
            "(dataType INT (lengthOneDimension ( )) UNSIGNED)",
            "(dataType INT (lengthOneDimension ( )) UNSIGNED ZEROFILL)",
            "(dataType INTEGER)",
            "(dataType INTEGER (lengthOneDimension ( )))",
            "(dataType INTEGER UNSIGNED)",
            "(dataType INTEGER ZEROFILL)",
            "(dataType INTEGER UNSIGNED ZEROFILL)",
            "(dataType INTEGER (lengthOneDimension ( )) ZEROFILL)",
            "(dataType INTEGER (lengthOneDimension ( )) UNSIGNED)",
            "(dataType INTEGER (lengthOneDimension ( )) UNSIGNED ZEROFILL)"
        ]
    },
    {
        "Type": [
            "BIGINT",
            "BIGINT ( M )",
            "BIGINT UNSIGNED",
            "BIGINT ZEROFILL",
            "BIGINT UNSIGNED ZEROFILL",
            "BIGINT ( M ) ZEROFILL",
            "BIGINT ( M ) UNSIGNED",
            "BIGINT ( M ) UNSIGNED ZEROFILL"
        ],
        "Description": [
            "For integer data types, <code>M</code> indicates the minimum display width. The maximum display width is 255. Display width is unrelated to the range of values a type can store, as described in <link>Section 13.1.6, \u201cNumeric Type Attributes\u201d&LINK&https://dev.mysql.com/doc/refman/8.0/en/numeric-type-attributes.html</link>.",
            "As of MySQL 8.0.17, the display width attribute is deprecated for integer data types; you should expect support for it to be removed in a future version of MySQL.",
            "If you specify <code>ZEROFILL</code> for a numeric column, MySQL automatically adds the <code>UNSIGNED</code> attribute to the column.",
            "As of MySQL 8.0.17, the <code>ZEROFILL</code> attribute is deprecated for numeric data types; you should expect support for it to be removed in a future version of MySQL. Consider using an alternative means of producing the effect of this attribute. For example, applications could use the <link><code>LPAD()</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_lpad</link> function to zero-pad numbers up to the desired width, or they could store the formatted numbers in <link><code>CHAR</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/char.html</link> columns.",
            "Numeric data types that permit the <code>UNSIGNED</code> attribute also permit <code>SIGNED</code>. However, these data types are signed by default, so the <code>SIGNED</code> attribute has no effect.",
            "When you use subtraction between integer values where one is of type <code>UNSIGNED</code>, the result is unsigned unless the <link><code>NO_UNSIGNED_SUBTRACTION</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/sql-mode.html#sqlmode_no_unsigned_subtraction</link> SQL mode is enabled. See <link>Section 14.10, \u201cCast Functions and Operators\u201d&LINK&https://dev.mysql.com/doc/refman/8.0/en/cast-functions.html</link>.",
            "A large integer. The signed range is <code>-9223372036854775808</code> to <code>9223372036854775807</code>. The unsigned range is <code>0</code> to <code>18446744073709551615</code>.\n<code>SERIAL</code> is an alias for <code>BIGINT UNSIGNED NOT NULL AUTO_INCREMENT UNIQUE</code>.\nSome things you should be aware of with respect to <link><code>BIGINT</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/integer-types.html</link> columns:\nAll arithmetic is done using signed <link><code>BIGINT</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/integer-types.html</link> or <link><code>DOUBLE</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/floating-point-types.html</link> values, so you should not use unsigned big integers larger than <code>9223372036854775807</code> (63 bits) except with bit functions! If you do that, some of the last digits in the result may be wrong because of rounding errors when converting a <link><code>BIGINT</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/integer-types.html</link> value to a <link><code>DOUBLE</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/floating-point-types.html</link>.\nMySQL can handle <link><code>BIGINT</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/integer-types.html</link> in the following cases:\nWhen using integers to store large unsigned values in a <link><code>BIGINT</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/integer-types.html</link> column.\nIn <link><code>MIN(col_name)</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/aggregate-functions.html#function_min</link> or <link><code>MAX(col_name)</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/aggregate-functions.html#function_max</link>, where <code>col_name</code> refers to a <link><code>BIGINT</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/integer-types.html</link> column.\nWhen using operators (<link><code>+</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/arithmetic-functions.html#operator_plus</link>, <link><code>-</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/arithmetic-functions.html#operator_minus</link>, <link><code>*</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/arithmetic-functions.html#operator_times</link>, and so on) where both operands are integers.\nYou can always store an exact integer value in a <link><code>BIGINT</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/integer-types.html</link> column by storing it using a string. In this case, MySQL performs a string-to-number conversion that involves no intermediate double-precision representation.\nThe <link><code>-</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/arithmetic-functions.html#operator_minus</link>, <link><code>+</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/arithmetic-functions.html#operator_plus</link>, and <link><code>*</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/arithmetic-functions.html#operator_times</link> operators use <link><code>BIGINT</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/integer-types.html</link> arithmetic when both operands are integer values. This means that if you multiply two big integers (or results from functions that return integers), you may get unexpected results when the result is larger than <code>9223372036854775807</code>.\n"
        ],
        "Links": [
            "https://dev.mysql.com/doc/refman/8.0/en/integer-types.html"
        ],
        "Compensate": [
            "MySQL supports the SQL standard integer types <code>INTEGER</code> (or <code>INT</code>) and <code>SMALLINT</code>. As an extension to the standard, MySQL also supports the integer types <code>TINYINT</code>, <code>MEDIUMINT</code>, and <code>BIGINT</code>. The following table shows the required storage and range for each integer type."
        ],
        "Storage (Bytes)": "8",
        "Minimum Value Signed": "-263",
        "Minimum Value Unsigned": "0",
        "Maximum Value Signed": "263-1",
        "Maximum Value Unsigned": "264-1",
        "Tree": [
            "(dataType BIGINT)",
            "(dataType BIGINT (lengthOneDimension ( )))",
            "(dataType BIGINT UNSIGNED)",
            "(dataType BIGINT ZEROFILL)",
            "(dataType BIGINT UNSIGNED ZEROFILL)",
            "(dataType BIGINT (lengthOneDimension ( )) ZEROFILL)",
            "(dataType BIGINT (lengthOneDimension ( )) UNSIGNED)",
            "(dataType BIGINT (lengthOneDimension ( )) UNSIGNED ZEROFILL)"
        ]
    },
    {
        "Type": [
            "DECIMAL ( M , D ) UNSIGNED ZEROFILL",
            "DECIMAL ( M , D ) UNSIGNED",
            "DECIMAL ( M , D ) ZEROFILL",
            "DECIMAL ( M , D )",
            "DECIMAL ( M ) UNSIGNED ZEROFILL",
            "DECIMAL ( M ) UNSIGNED",
            "DECIMAL ( M ) ZEROFILL",
            "DECIMAL ( M )",
            "DECIMAL UNSIGNED ZEROFILL",
            "DECIMAL UNSIGNED",
            "DECIMAL ZEROFILL",
            "DECIMAL",
            "DEC ( M , D ) UNSIGNED ZEROFILL",
            "DEC ( M , D ) UNSIGNED",
            "DEC ( M , D ) ZEROFILL",
            "DEC ( M , D )",
            "DEC ( M ) UNSIGNED ZEROFILL",
            "DEC ( M ) UNSIGNED",
            "DEC ( M ) ZEROFILL",
            "DEC ( M )",
            "DEC UNSIGNED ZEROFILL",
            "DEC UNSIGNED",
            "DEC ZEROFILL",
            "DEC",
            "NUMERIC ( M , D ) UNSIGNED ZEROFILL",
            "NUMERIC ( M , D ) UNSIGNED",
            "NUMERIC ( M , D ) ZEROFILL",
            "NUMERIC ( M , D )",
            "NUMERIC ( M ) UNSIGNED ZEROFILL",
            "NUMERIC ( M ) UNSIGNED",
            "NUMERIC ( M ) ZEROFILL",
            "NUMERIC ( M )",
            "NUMERIC UNSIGNED ZEROFILL",
            "NUMERIC UNSIGNED",
            "NUMERIC ZEROFILL",
            "NUMERIC",
            "FIXED ( M , D ) UNSIGNED ZEROFILL",
            "FIXED ( M , D ) UNSIGNED",
            "FIXED ( M , D ) ZEROFILL",
            "FIXED ( M , D )",
            "FIXED ( M ) UNSIGNED ZEROFILL",
            "FIXED ( M ) UNSIGNED",
            "FIXED ( M ) ZEROFILL",
            "FIXED ( M )",
            "FIXED UNSIGNED ZEROFILL",
            "FIXED UNSIGNED",
            "FIXED ZEROFILL",
            "FIXED"
        ],
        "Description": [
            "For floating-point and fixed-point data types, <code>M</code> is the total number of digits that can be stored.",
            "If you specify <code>ZEROFILL</code> for a numeric column, MySQL automatically adds the <code>UNSIGNED</code> attribute to the column.",
            "As of MySQL 8.0.17, the <code>ZEROFILL</code> attribute is deprecated for numeric data types; you should expect support for it to be removed in a future version of MySQL. Consider using an alternative means of producing the effect of this attribute. For example, applications could use the <link><code>LPAD()</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_lpad</link> function to zero-pad numbers up to the desired width, or they could store the formatted numbers in <link><code>CHAR</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/char.html</link> columns.",
            "Numeric data types that permit the <code>UNSIGNED</code> attribute also permit <code>SIGNED</code>. However, these data types are signed by default, so the <code>SIGNED</code> attribute has no effect.",
            "As of MySQL 8.0.17, the <code>UNSIGNED</code> attribute is deprecated for columns of type <link><code>FLOAT</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/floating-point-types.html</link>, <link><code>DOUBLE</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/floating-point-types.html</link>, and <link><code>DECIMAL</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/fixed-point-types.html</link> (and any synonyms); you should expect support for it to be removed in a future version of MySQL. Consider using a simple <code>CHECK</code> constraint instead for such columns.",
            "When you use subtraction between integer values where one is of type <code>UNSIGNED</code>, the result is unsigned unless the <link><code>NO_UNSIGNED_SUBTRACTION</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/sql-mode.html#sqlmode_no_unsigned_subtraction</link> SQL mode is enabled. See <link>Section 14.10, \u201cCast Functions and Operators\u201d&LINK&https://dev.mysql.com/doc/refman/8.0/en/cast-functions.html</link>.",
            "A packed \u201cexact\u201d fixed-point number. <code>M</code> is the total number of digits (the precision) and <code>D</code> is the number of digits after the decimal point (the scale). The decimal point and (for negative numbers) the <code>-</code> sign are not counted in <code>M</code>. If <code>D</code> is 0, values have no decimal point or fractional part. The maximum number of digits (<code>M</code>) for <link><code>DECIMAL</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/fixed-point-types.html</link> is 65. The maximum number of supported decimals (<code>D</code>) is 30. If <code>D</code> is omitted, the default is 0. If <code>M</code> is omitted, the default is 10. (There is also a limit on how long the text of <link><code>DECIMAL</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/fixed-point-types.html</link> literals can be; see <link>Section 14.24.3, \u201cExpression Handling\u201d&LINK&https://dev.mysql.com/doc/refman/8.0/en/precision-math-expressions.html</link>.)\n<code>UNSIGNED</code>, if specified, disallows negative values. As of MySQL 8.0.17, the <code>UNSIGNED</code> attribute is deprecated for columns of type <link><code>DECIMAL</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/fixed-point-types.html</link> (and any synonyms); you should expect support for it to be removed in a future version of MySQL. Consider using a simple <code>CHECK</code> constraint instead for such columns.\nAll basic calculations (<code>+, -, *, /</code>) with <link><code>DECIMAL</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/fixed-point-types.html</link> columns are done with a precision of 65 digits.",
            "These types are synonyms for <link><code>DECIMAL</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/fixed-point-types.html</link>. The <link><code>FIXED</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/fixed-point-types.html</link> synonym is available for compatibility with other database systems."
        ],
        "Links": [
            "https://dev.mysql.com/doc/refman/8.0/en/fixed-point-types.html"
        ],
        "Compensate": [
            "The <code>DECIMAL</code> and <code>NUMERIC</code> types store exact numeric data values. These types are used when it is important to preserve exact precision, for example with monetary data. In MySQL, <code>NUMERIC</code> is implemented as <code>DECIMAL</code>, so the following remarks about <code>DECIMAL</code> apply equally to <code>NUMERIC</code>.",
            "MySQL stores <code>DECIMAL</code> values in binary format. See Section 14.24, \u201cPrecision Math\u201d&LINK&https://dev.mysql.com/doc/refman/8.0/en/precision-math.html.",
            "In a <code>DECIMAL</code> column declaration, the precision and scale can be (and usually is) specified. For example:",
            "<code>salary DECIMAL(5,2)</code>",
            "Standard SQL requires that <code>DECIMAL(5,2)</code> be able to store any value with five digits and two decimals, so values that can be stored in the <code>salary</code> column range from <code>-999.99</code> to <code>999.99</code>.",
            "In standard SQL, the syntax <code>DECIMAL(M)</code> is equivalent to <code>DECIMAL(M,0)</code>. Similarly, the syntax <code>DECIMAL</code> is equivalent to <code>DECIMAL(M,0)</code>, where the implementation is permitted to decide the value of <code>M</code>. MySQL supports both of these variant forms of <code>DECIMAL</code> syntax. The default value of <code>M</code> is 10.",
            "If the scale is 0, <code>DECIMAL</code> values contain no decimal point or fractional part.",
            "The maximum number of digits for <code>DECIMAL</code> is 65, but the actual range for a given <code>DECIMAL</code> column can be constrained by the precision or scale for a given column. When such a column is assigned a value with more digits following the decimal point than are permitted by the specified scale, the value is converted to that scale. (The precise behavior is operating system-specific, but generally the effect is truncation to the permissible number of digits.)"
        ],
        "Tree": [
            "(dataType DECIMAL (lengthTwoOptionalDimension ( , )) UNSIGNED ZEROFILL)",
            "(dataType DECIMAL (lengthTwoOptionalDimension ( , )) UNSIGNED)",
            "(dataType DECIMAL (lengthTwoOptionalDimension ( , )) ZEROFILL)",
            "(dataType DECIMAL (lengthTwoOptionalDimension ( , )))",
            "(dataType DECIMAL (lengthTwoOptionalDimension ( )) UNSIGNED ZEROFILL)",
            "(dataType DECIMAL (lengthTwoOptionalDimension ( )) UNSIGNED)",
            "(dataType DECIMAL (lengthTwoOptionalDimension ( )) ZEROFILL)",
            "(dataType DECIMAL (lengthTwoOptionalDimension ( )))",
            "(dataType DECIMAL UNSIGNED ZEROFILL)",
            "(dataType DECIMAL UNSIGNED)",
            "(dataType DECIMAL ZEROFILL)",
            "(dataType DECIMAL)",
            "(dataType DEC (lengthTwoOptionalDimension ( , )) UNSIGNED ZEROFILL)",
            "(dataType DEC (lengthTwoOptionalDimension ( , )) UNSIGNED)",
            "(dataType DEC (lengthTwoOptionalDimension ( , )) ZEROFILL)",
            "(dataType DEC (lengthTwoOptionalDimension ( , )))",
            "(dataType DEC (lengthTwoOptionalDimension ( )) UNSIGNED ZEROFILL)",
            "(dataType DEC (lengthTwoOptionalDimension ( )) UNSIGNED)",
            "(dataType DEC (lengthTwoOptionalDimension ( )) ZEROFILL)",
            "(dataType DEC (lengthTwoOptionalDimension ( )))",
            "(dataType DEC UNSIGNED ZEROFILL)",
            "(dataType DEC UNSIGNED)",
            "(dataType DEC ZEROFILL)",
            "(dataType DEC)",
            "(dataType NUMERIC (lengthTwoOptionalDimension ( , )) UNSIGNED ZEROFILL)",
            "(dataType NUMERIC (lengthTwoOptionalDimension ( , )) UNSIGNED)",
            "(dataType NUMERIC (lengthTwoOptionalDimension ( , )) ZEROFILL)",
            "(dataType NUMERIC (lengthTwoOptionalDimension ( , )))",
            "(dataType NUMERIC (lengthTwoOptionalDimension ( )) UNSIGNED ZEROFILL)",
            "(dataType NUMERIC (lengthTwoOptionalDimension ( )) UNSIGNED)",
            "(dataType NUMERIC (lengthTwoOptionalDimension ( )) ZEROFILL)",
            "(dataType NUMERIC (lengthTwoOptionalDimension ( )))",
            "(dataType NUMERIC UNSIGNED ZEROFILL)",
            "(dataType NUMERIC UNSIGNED)",
            "(dataType NUMERIC ZEROFILL)",
            "(dataType NUMERIC)",
            "(dataType FIXED (lengthTwoOptionalDimension ( , )) UNSIGNED ZEROFILL)",
            "(dataType FIXED (lengthTwoOptionalDimension ( , )) UNSIGNED)",
            "(dataType FIXED (lengthTwoOptionalDimension ( , )) ZEROFILL)",
            "(dataType FIXED (lengthTwoOptionalDimension ( , )))",
            "(dataType FIXED (lengthTwoOptionalDimension ( )) UNSIGNED ZEROFILL)",
            "(dataType FIXED (lengthTwoOptionalDimension ( )) UNSIGNED)",
            "(dataType FIXED (lengthTwoOptionalDimension ( )) ZEROFILL)",
            "(dataType FIXED (lengthTwoOptionalDimension ( )))",
            "(dataType FIXED UNSIGNED ZEROFILL)",
            "(dataType FIXED UNSIGNED)",
            "(dataType FIXED ZEROFILL)",
            "(dataType FIXED)"
        ]
    },
    {
        "Type": [
            "FLOAT ( M , D ) UNSIGNED ZEROFILL",
            "FLOAT ( M , D ) UNSIGNED",
            "FLOAT ( M , D ) ZEROFILL",
            "FLOAT UNSIGNED ZEROFILL",
            "FLOAT ( M , D )",
            "FLOAT UNSIGNED",
            "FLOAT ZEROFILL",
            "FLOAT"
        ],
        "Description": [
            "For floating-point and fixed-point data types, <code>M</code> is the total number of digits that can be stored.",
            "If you specify <code>ZEROFILL</code> for a numeric column, MySQL automatically adds the <code>UNSIGNED</code> attribute to the column.",
            "As of MySQL 8.0.17, the <code>ZEROFILL</code> attribute is deprecated for numeric data types; you should expect support for it to be removed in a future version of MySQL. Consider using an alternative means of producing the effect of this attribute. For example, applications could use the <link><code>LPAD()</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_lpad</link> function to zero-pad numbers up to the desired width, or they could store the formatted numbers in <link><code>CHAR</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/char.html</link> columns.",
            "Numeric data types that permit the <code>UNSIGNED</code> attribute also permit <code>SIGNED</code>. However, these data types are signed by default, so the <code>SIGNED</code> attribute has no effect.",
            "As of MySQL 8.0.17, the <code>UNSIGNED</code> attribute is deprecated for columns of type <link><code>FLOAT</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/floating-point-types.html</link>, <link><code>DOUBLE</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/floating-point-types.html</link>, and <link><code>DECIMAL</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/fixed-point-types.html</link> (and any synonyms); you should expect support for it to be removed in a future version of MySQL. Consider using a simple <code>CHECK</code> constraint instead for such columns.",
            "When you use subtraction between integer values where one is of type <code>UNSIGNED</code>, the result is unsigned unless the <link><code>NO_UNSIGNED_SUBTRACTION</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/sql-mode.html#sqlmode_no_unsigned_subtraction</link> SQL mode is enabled. See <link>Section 14.10, \u201cCast Functions and Operators\u201d&LINK&https://dev.mysql.com/doc/refman/8.0/en/cast-functions.html</link>.",
            "A small (single-precision) floating-point number. Permissible values are <code>-3.402823466E+38</code> to <code>-1.175494351E-38</code>, <code>0</code>, and <code>1.175494351E-38</code> to <code>3.402823466E+38</code>. These are the theoretical limits, based on the IEEE standard. The actual range might be slightly smaller depending on your hardware or operating system.\n<code>M</code> is the total number of digits and <code>D</code> is the number of digits following the decimal point. If <code>M</code> and <code>D</code> are omitted, values are stored to the limits permitted by the hardware. A single-precision floating-point number is accurate to approximately 7 decimal places.\n<code>FLOAT(M,D)</code> is a nonstandard MySQL extension. As of MySQL 8.0.17, this syntax is deprecated, and you should expect support for it to be removed in a future version of MySQL.\n<code>UNSIGNED</code>, if specified, disallows negative values. As of MySQL 8.0.17, the <code>UNSIGNED</code> attribute is deprecated for columns of type <link><code>FLOAT</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/floating-point-types.html</link> (and any synonyms) and you should expect support for it to be removed in a future version of MySQL. Consider using a simple <code>CHECK</code> constraint instead for such columns.\nUsing <link><code>FLOAT</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/floating-point-types.html</link> might give you some unexpected problems because all calculations in MySQL are done with double precision. See <link>Section B.3.4.7, \u201cSolving Problems with No Matching Rows\u201d&LINK&https://dev.mysql.com/doc/refman/8.0/en/no-matching-rows.html</link>."
        ],
        "Links": [
            "https://dev.mysql.com/doc/refman/8.0/en/floating-point-types.html"
        ],
        "Compensate": [
            "The <code>FLOAT</code> and <code>DOUBLE</code> types represent approximate numeric data values. MySQL uses four bytes for single-precision values and eight bytes for double-precision values.",
            "For <code>FLOAT</code>, the SQL standard permits an optional specification of the precision (but not the range of the exponent) in bits following the keyword <code>FLOAT</code> in parentheses, that is, <code>FLOAT(p)</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/floating-point-types.html. MySQL also supports this optional precision specification, but the precision value in <code>FLOAT(p)</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/floating-point-types.html is used only to determine storage size. A precision from 0 to 23 results in a 4-byte single-precision <code>FLOAT</code> column. A precision from 24 to 53 results in an 8-byte double-precision <code>DOUBLE</code> column.",
            "MySQL permits a nonstandard syntax: <code>FLOAT(M,D)</code> or <code>REAL(M,D)</code> or <code>DOUBLE PRECISION(M,D)</code>. Here, <code>(M,D)</code> means than values can be stored with up to <code>M</code> digits in total, of which <code>D</code> digits may be after the decimal point. For example, a column defined as <code>FLOAT(7,4)</code> is displayed as <code>-999.9999</code>. MySQL performs rounding when storing values, so if you insert <code>999.00009</code> into a <code>FLOAT(7,4)</code> column, the approximate result is <code>999.0001</code>.",
            "As of MySQL 8.0.17, the nonstandard <code>FLOAT(M,D)</code> and <code>DOUBLE(M,D)</code> syntax is deprecated and you should expect support for it to be removed in a future version of MySQL.",
            "For maximum portability, code requiring storage of approximate numeric data values should use <code>FLOAT</code> or <code>DOUBLE PRECISION</code> with no specification of precision or number of digits."
        ],
        "Tree": [
            "(dataType FLOAT (lengthTwoOptionalDimension ( , )) UNSIGNED ZEROFILL)",
            "(dataType FLOAT (lengthTwoOptionalDimension ( , )) UNSIGNED)",
            "(dataType FLOAT (lengthTwoOptionalDimension ( , )) ZEROFILL)",
            "(dataType FLOAT UNSIGNED ZEROFILL)",
            "(dataType FLOAT (lengthTwoOptionalDimension ( , )))",
            "(dataType FLOAT UNSIGNED)",
            "(dataType FLOAT ZEROFILL)",
            "(dataType FLOAT)"
        ]
    },
    {
        "Type": [
            "FLOAT ( p ) UNSIGNED ZEROFILL",
            "FLOAT ( p ) UNSIGNED",
            "FLOAT ( p ) ZEROFILL",
            "FLOAT ( p )"
        ],
        "Description": [
            "If you specify <code>ZEROFILL</code> for a numeric column, MySQL automatically adds the <code>UNSIGNED</code> attribute to the column.",
            "As of MySQL 8.0.17, the <code>ZEROFILL</code> attribute is deprecated for numeric data types; you should expect support for it to be removed in a future version of MySQL. Consider using an alternative means of producing the effect of this attribute. For example, applications could use the <link><code>LPAD()</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_lpad</link> function to zero-pad numbers up to the desired width, or they could store the formatted numbers in <link><code>CHAR</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/char.html</link> columns.",
            "Numeric data types that permit the <code>UNSIGNED</code> attribute also permit <code>SIGNED</code>. However, these data types are signed by default, so the <code>SIGNED</code> attribute has no effect.",
            "As of MySQL 8.0.17, the <code>UNSIGNED</code> attribute is deprecated for columns of type <link><code>FLOAT</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/floating-point-types.html</link>, <link><code>DOUBLE</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/floating-point-types.html</link>, and <link><code>DECIMAL</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/fixed-point-types.html</link> (and any synonyms); you should expect support for it to be removed in a future version of MySQL. Consider using a simple <code>CHECK</code> constraint instead for such columns.",
            "When you use subtraction between integer values where one is of type <code>UNSIGNED</code>, the result is unsigned unless the <link><code>NO_UNSIGNED_SUBTRACTION</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/sql-mode.html#sqlmode_no_unsigned_subtraction</link> SQL mode is enabled. See <link>Section 14.10, \u201cCast Functions and Operators\u201d&LINK&https://dev.mysql.com/doc/refman/8.0/en/cast-functions.html</link>.",
            "A floating-point number. <code>p</code> represents the precision in bits, but MySQL uses this value only to determine whether to use <link><code>FLOAT</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/floating-point-types.html</link> or <link><code>DOUBLE</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/floating-point-types.html</link> for the resulting data type. If <code>p</code> is from 0 to 24, the data type becomes <link><code>FLOAT</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/floating-point-types.html</link> with no <code>M</code> or <code>D</code> values. If <code>p</code> is from 25 to 53, the data type becomes <link><code>DOUBLE</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/floating-point-types.html</link> with no <code>M</code> or <code>D</code> values. The range of the resulting column is the same as for the single-precision <link><code>FLOAT</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/floating-point-types.html</link> or double-precision <link><code>DOUBLE</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/floating-point-types.html</link> data types described earlier in this section.\n<code>UNSIGNED</code>, if specified, disallows negative values. As of MySQL 8.0.17, the <code>UNSIGNED</code> attribute is deprecated for columns of type <link><code>FLOAT</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/floating-point-types.html</link> (and any synonyms) and you should expect support for it to be removed in a future version of MySQL. Consider using a simple <code>CHECK</code> constraint instead for such columns.\n<link><code>FLOAT(p)</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/floating-point-types.html</link> syntax is provided for ODBC compatibility."
        ],
        "Links": [
            "https://dev.mysql.com/doc/refman/8.0/en/floating-point-types.html"
        ],
        "Compensate": [
            "The <code>FLOAT</code> and <code>DOUBLE</code> types represent approximate numeric data values. MySQL uses four bytes for single-precision values and eight bytes for double-precision values.",
            "For <code>FLOAT</code>, the SQL standard permits an optional specification of the precision (but not the range of the exponent) in bits following the keyword <code>FLOAT</code> in parentheses, that is, <code>FLOAT(p)</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/floating-point-types.html. MySQL also supports this optional precision specification, but the precision value in <code>FLOAT(p)</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/floating-point-types.html is used only to determine storage size. A precision from 0 to 23 results in a 4-byte single-precision <code>FLOAT</code> column. A precision from 24 to 53 results in an 8-byte double-precision <code>DOUBLE</code> column.",
            "MySQL permits a nonstandard syntax: <code>FLOAT(M,D)</code> or <code>REAL(M,D)</code> or <code>DOUBLE PRECISION(M,D)</code>. Here, <code>(M,D)</code> means than values can be stored with up to <code>M</code> digits in total, of which <code>D</code> digits may be after the decimal point. For example, a column defined as <code>FLOAT(7,4)</code> is displayed as <code>-999.9999</code>. MySQL performs rounding when storing values, so if you insert <code>999.00009</code> into a <code>FLOAT(7,4)</code> column, the approximate result is <code>999.0001</code>.",
            "As of MySQL 8.0.17, the nonstandard <code>FLOAT(M,D)</code> and <code>DOUBLE(M,D)</code> syntax is deprecated and you should expect support for it to be removed in a future version of MySQL.",
            "For maximum portability, code requiring storage of approximate numeric data values should use <code>FLOAT</code> or <code>DOUBLE PRECISION</code> with no specification of precision or number of digits."
        ],
        "Tree": [
            "(dataType FLOAT (lengthTwoOptionalDimension ( )) UNSIGNED ZEROFILL)",
            "(dataType FLOAT (lengthTwoOptionalDimension ( )) UNSIGNED)",
            "(dataType FLOAT (lengthTwoOptionalDimension ( )) ZEROFILL)",
            "(dataType FLOAT (lengthTwoOptionalDimension ( )))"
        ]
    },
    {
        "Type": [
            "DOUBLE ( M , D ) UNSIGNED ZEROFILL",
            "DOUBLE ( M , D ) UNSIGNED",
            "DOUBLE ( M , D ) ZEROFILL",
            "DOUBLE UNSIGNED ZEROFILL",
            "DOUBLE ( M , D )",
            "DOUBLE UNSIGNED",
            "DOUBLE ZEROFILL",
            "DOUBLE",
            "DOUBLE PRECISION ( M , D ) UNSIGNED ZEROFILL",
            "DOUBLE PRECISION ( M , D ) UNSIGNED",
            "DOUBLE PRECISION ( M , D ) ZEROFILL",
            "DOUBLE PRECISION UNSIGNED ZEROFILL",
            "DOUBLE PRECISION ( M , D )",
            "DOUBLE PRECISION UNSIGNED",
            "DOUBLE PRECISION ZEROFILL",
            "DOUBLE PRECISION",
            "REAL ( M , D ) UNSIGNED ZEROFILL",
            "REAL ( M , D ) UNSIGNED",
            "REAL ( M , D ) ZEROFILL",
            "REAL UNSIGNED ZEROFILL",
            "REAL ( M , D )",
            "REAL UNSIGNED",
            "REAL ZEROFILL",
            "REAL"
        ],
        "Description": [
            "For floating-point and fixed-point data types, <code>M</code> is the total number of digits that can be stored.",
            "If you specify <code>ZEROFILL</code> for a numeric column, MySQL automatically adds the <code>UNSIGNED</code> attribute to the column.",
            "As of MySQL 8.0.17, the <code>ZEROFILL</code> attribute is deprecated for numeric data types; you should expect support for it to be removed in a future version of MySQL. Consider using an alternative means of producing the effect of this attribute. For example, applications could use the <link><code>LPAD()</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_lpad</link> function to zero-pad numbers up to the desired width, or they could store the formatted numbers in <link><code>CHAR</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/char.html</link> columns.",
            "Numeric data types that permit the <code>UNSIGNED</code> attribute also permit <code>SIGNED</code>. However, these data types are signed by default, so the <code>SIGNED</code> attribute has no effect.",
            "As of MySQL 8.0.17, the <code>UNSIGNED</code> attribute is deprecated for columns of type <link><code>FLOAT</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/floating-point-types.html</link>, <link><code>DOUBLE</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/floating-point-types.html</link>, and <link><code>DECIMAL</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/fixed-point-types.html</link> (and any synonyms); you should expect support for it to be removed in a future version of MySQL. Consider using a simple <code>CHECK</code> constraint instead for such columns.",
            "When you use subtraction between integer values where one is of type <code>UNSIGNED</code>, the result is unsigned unless the <link><code>NO_UNSIGNED_SUBTRACTION</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/sql-mode.html#sqlmode_no_unsigned_subtraction</link> SQL mode is enabled. See <link>Section 14.10, \u201cCast Functions and Operators\u201d&LINK&https://dev.mysql.com/doc/refman/8.0/en/cast-functions.html</link>.",
            "A normal-size (double-precision) floating-point number. Permissible values are <code>-1.7976931348623157E+308</code> to <code>-2.2250738585072014E-308</code>, <code>0</code>, and <code>2.2250738585072014E-308</code> to <code>1.7976931348623157E+308</code>. These are the theoretical limits, based on the IEEE standard. The actual range might be slightly smaller depending on your hardware or operating system.\n<code>M</code> is the total number of digits and <code>D</code> is the number of digits following the decimal point. If <code>M</code> and <code>D</code> are omitted, values are stored to the limits permitted by the hardware. A double-precision floating-point number is accurate to approximately 15 decimal places.\n<code>DOUBLE(M,D)</code> is a nonstandard MySQL extension. As of MySQL 8.0.17, this syntax is deprecated and you should expect support for it to be removed in a future version of MySQL.\n<code>UNSIGNED</code>, if specified, disallows negative values. As of MySQL 8.0.17, the <code>UNSIGNED</code> attribute is deprecated for columns of type <link><code>DOUBLE</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/floating-point-types.html</link> (and any synonyms) and you should expect support for it to be removed in a future version of MySQL. Consider using a simple <code>CHECK</code> constraint instead for such columns.",
            "These types are synonyms for <link><code>DOUBLE</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/floating-point-types.html</link>. Exception: If the <link><code>REAL_AS_FLOAT</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/sql-mode.html#sqlmode_real_as_float</link> SQL mode is enabled, <link><code>REAL</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/floating-point-types.html</link> is a synonym for <link><code>FLOAT</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/floating-point-types.html</link> rather than <link><code>DOUBLE</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/floating-point-types.html</link>."
        ],
        "Links": [
            "https://dev.mysql.com/doc/refman/8.0/en/floating-point-types.html"
        ],
        "Compensate": [
            "The <code>FLOAT</code> and <code>DOUBLE</code> types represent approximate numeric data values. MySQL uses four bytes for single-precision values and eight bytes for double-precision values.",
            "For <code>FLOAT</code>, the SQL standard permits an optional specification of the precision (but not the range of the exponent) in bits following the keyword <code>FLOAT</code> in parentheses, that is, <code>FLOAT(p)</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/floating-point-types.html. MySQL also supports this optional precision specification, but the precision value in <code>FLOAT(p)</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/floating-point-types.html is used only to determine storage size. A precision from 0 to 23 results in a 4-byte single-precision <code>FLOAT</code> column. A precision from 24 to 53 results in an 8-byte double-precision <code>DOUBLE</code> column.",
            "MySQL permits a nonstandard syntax: <code>FLOAT(M,D)</code> or <code>REAL(M,D)</code> or <code>DOUBLE PRECISION(M,D)</code>. Here, <code>(M,D)</code> means than values can be stored with up to <code>M</code> digits in total, of which <code>D</code> digits may be after the decimal point. For example, a column defined as <code>FLOAT(7,4)</code> is displayed as <code>-999.9999</code>. MySQL performs rounding when storing values, so if you insert <code>999.00009</code> into a <code>FLOAT(7,4)</code> column, the approximate result is <code>999.0001</code>.",
            "As of MySQL 8.0.17, the nonstandard <code>FLOAT(M,D)</code> and <code>DOUBLE(M,D)</code> syntax is deprecated and you should expect support for it to be removed in a future version of MySQL.",
            "For maximum portability, code requiring storage of approximate numeric data values should use <code>FLOAT</code> or <code>DOUBLE PRECISION</code> with no specification of precision or number of digits."
        ],
        "Tree": [
            "(dataType DOUBLE (lengthTwoDimension ( , )) UNSIGNED ZEROFILL)",
            "(dataType DOUBLE (lengthTwoDimension ( , )) UNSIGNED)",
            "(dataType DOUBLE (lengthTwoDimension ( , )) ZEROFILL)",
            "(dataType DOUBLE UNSIGNED ZEROFILL)",
            "(dataType DOUBLE (lengthTwoDimension ( , )))",
            "(dataType DOUBLE UNSIGNED)",
            "(dataType DOUBLE ZEROFILL)",
            "(dataType DOUBLE)",
            "(dataType DOUBLE PRECISION (lengthTwoDimension ( , )) UNSIGNED ZEROFILL)",
            "(dataType DOUBLE PRECISION (lengthTwoDimension ( , )) UNSIGNED)",
            "(dataType DOUBLE PRECISION (lengthTwoDimension ( , )) ZEROFILL)",
            "(dataType DOUBLE PRECISION UNSIGNED ZEROFILL)",
            "(dataType DOUBLE PRECISION (lengthTwoDimension ( , )))",
            "(dataType DOUBLE PRECISION UNSIGNED)",
            "(dataType DOUBLE PRECISION ZEROFILL)",
            "(dataType DOUBLE PRECISION)",
            "(dataType REAL (lengthTwoDimension ( , )) UNSIGNED ZEROFILL)",
            "(dataType REAL (lengthTwoDimension ( , )) UNSIGNED)",
            "(dataType REAL (lengthTwoDimension ( , )) ZEROFILL)",
            "(dataType REAL UNSIGNED ZEROFILL)",
            "(dataType REAL (lengthTwoDimension ( , )))",
            "(dataType REAL UNSIGNED)",
            "(dataType REAL ZEROFILL)",
            "(dataType REAL)"
        ]
    },
    {
        "Type": [
            "SERIAL"
        ],
        "Description": [
            "<code>SERIAL</code> is an alias for <code>BIGINT UNSIGNED NOT NULL AUTO_INCREMENT UNIQUE</code>.",
            "<code>SERIAL DEFAULT VALUE</code> in the definition of an integer column is an alias for <code>NOT NULL AUTO_INCREMENT UNIQUE</code>."
        ],
        "Links": [],
        "Compensate": [],
        "Tree": [
            "(dataType SERIAL)"
        ]
    },
    {
        "Type": [
            "DATE",
            "DATE"
        ],
        "Description": [
            " A date. The supported range is <code>'1000-01-01'</code> to <code>'9999-12-31'</code>. MySQL displays <link><code>DATE</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/datetime.html</link> values in <code>'YYYY-MM-DD'</code> format, but permits assignment of values to <link><code>DATE</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/datetime.html</link> columns using either strings or numbers. \n"
        ],
        "Links": [
            "https://dev.mysql.com/doc/refman/8.0/en/date-and-time-types.html",
            "https://dev.mysql.com/doc/refman/8.0/en/datetime.html",
            "https://dev.mysql.com/doc/refman/8.0/en/time.html",
            "https://dev.mysql.com/doc/refman/8.0/en/year.html",
            "https://dev.mysql.com/doc/refman/8.0/en/timestamp-initialization.html",
            "https://dev.mysql.com/doc/refman/8.0/en/fractional-seconds.html",
            "https://dev.mysql.com/doc/refman/8.0/en/mysql-calendar.html",
            "https://dev.mysql.com/doc/refman/8.0/en/date-and-time-type-conversion.html",
            "https://dev.mysql.com/doc/refman/8.0/en/two-digit-years.html"
        ],
        "Compensate": [
            "The date and time data types for representing temporal values are <code>DATE</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/datetime.html, <code>TIME</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/time.html, <code>DATETIME</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/datetime.html, <code>TIMESTAMP</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/datetime.html, and <code>YEAR</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/year.html. Each temporal type has a range of valid values, as well as a \u201czero\u201d value that may be used when you specify an invalid value that MySQL cannot represent. The <code>TIMESTAMP</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/datetime.html and <code>DATETIME</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/datetime.html types have special automatic updating behavior, described in Section 13.2.5, \u201cAutomatic Initialization and Updating for TIMESTAMP and DATETIME\u201d&LINK&https://dev.mysql.com/doc/refman/8.0/en/timestamp-initialization.html.",
            "MySQL permits you to store dates where the day or month and day are zero in a <code>DATE</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/datetime.html or <code>DATETIME</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/datetime.html column. This is useful for applications that need to store birthdates for which you may not know the exact date. In this case, you simply store the date as <code>'2009-00-00'</code> or <code>'2009-01-00'</code>. However, with dates such as these, you should not expect to get correct results for functions such as <code>DATE_SUB()</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html#function_date-sub or <code>DATE_ADD()</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html#function_date-add that require complete dates. To disallow zero month or day parts in dates, enable the <code>NO_ZERO_IN_DATE</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/sql-mode.html#sqlmode_no_zero_in_date mode.",
            "The following table shows the format of the \u201czero\u201d value for each type. The \u201czero\u201d values are special, but you can store or refer to them explicitly using the values shown in the table. You can also do this using the values <code>'0'</code> or <code>0</code>, which are easier to write. For temporal types that include a date part (<code>DATE</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/datetime.html, <code>DATETIME</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/datetime.html, and <code>TIMESTAMP</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/datetime.html), use of these values may produce warning or errors. The precise behavior depends on which, if any, of the strict and <code>NO_ZERO_DATE</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/sql-mode.html#sqlmode_no_zero_date SQL modes are enabled; see Section 7.1.11, \u201cServer SQL Modes\u201d&LINK&https://dev.mysql.com/doc/refman/8.0/en/sql-mode.html.",
            "The <code>DATE</code>, <code>DATETIME</code>, and <code>TIMESTAMP</code> types are related. This section describes their characteristics, how they are similar, and how they differ. MySQL recognizes <code>DATE</code>, <code>DATETIME</code>, and <code>TIMESTAMP</code> values in several formats, described in Section 11.1.3, \u201cDate and Time Literals\u201d&LINK&https://dev.mysql.com/doc/refman/8.0/en/date-and-time-literals.html. For the <code>DATE</code> and <code>DATETIME</code> range descriptions, \u201csupported\u201d means that although earlier values might work, there is no guarantee.",
            "The <code>DATE</code> type is used for values with a date part but no time part. MySQL retrieves and displays <code>DATE</code> values in <code>'YYYY-MM-DD'</code> format. The supported range is <code>'1000-01-01'</code> to <code>'9999-12-31'</code>.",
            "Invalid <code>DATE</code>, <code>DATETIME</code>, or <code>TIMESTAMP</code> values are converted to the \u201czero\u201d value of the appropriate type (<code>'0000-00-00'</code> or <code>'0000-00-00 00:00:00'</code>), if the SQL mode permits this conversion. The precise behavior depends on which if any of strict SQL mode and the <code>NO_ZERO_DATE</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/sql-mode.html#sqlmode_no_zero_date SQL mode are enabled; see Section 7.1.11, \u201cServer SQL Modes\u201d&LINK&https://dev.mysql.com/doc/refman/8.0/en/sql-mode.html.",
            "Inserting a <code>TIME</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/time.html, <code>DATE</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/datetime.html, or <code>TIMESTAMP</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/datetime.html value with a fractional seconds part into a column of the same type but having fewer fractional digits results in rounding. Consider a table created and populated as follows: <code>CREATE TABLE fractest( c1 TIME(2), c2 DATETIME(2), c3 TIMESTAMP(2) ); INSERT INTO fractest VALUES ('17:51:04.777', '2018-09-08 17:51:04.777', '2018-09-08 17:51:04.777');</code> The temporal values are inserted into the table with rounding: <code>mysql> SELECT * FROM fractest; +-------------+------------------------+------------------------+ | c1 | c2 | c3 | +-------------+------------------------+------------------------+ | 17:51:04.78 | 2018-09-08 17:51:04.78 | 2018-09-08 17:51:04.78 | +-------------+------------------------+------------------------+</code> No warning or error is given when such rounding occurs. This behavior follows the SQL standard. To insert the values with truncation instead, enable the <code>TIME_TRUNCATE_FRACTIONAL</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/sql-mode.html#sqlmode_time_truncate_fractional SQL mode: <code>SET @@sql_mode = sys.list_add(@@sql_mode, 'TIME_TRUNCATE_FRACTIONAL');</code> With that SQL mode enabled, the temporal values are inserted with truncation: <code>mysql> SELECT * FROM fractest; +-------------+------------------------+------------------------+ | c1 | c2 | c3 | +-------------+------------------------+------------------------+ | 17:51:04.77 | 2018-09-08 17:51:04.77 | 2018-09-08 17:51:04.77 | +-------------+------------------------+------------------------+</code>",
            "Syntax for temporal literals produces temporal values: <code>DATE 'str'</code>, <code>TIME 'str'</code>, and <code>TIMESTAMP 'str'</code>, and the ODBC-syntax equivalents. The resulting value includes a trailing fractional seconds part if specified. Previously, the temporal type keyword was ignored and these constructs produced the string value. See Standard SQL and ODBC Date and Time Literals&LINK&https://dev.mysql.com/doc/refman/8.0/en/date-and-time-literals.html#date-and-time-standard-sql-literals",
            "A calendar applied to dates when it was not actually in use is called proleptic. Thus, if we assume there was never a cutover and Gregorian rules always rule, we have a proleptic Gregorian calendar. This is what is used by MySQL, as is required by standard SQL. For this reason, dates prior to the cutover stored as MySQL <code>DATE</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/datetime.html or <code>DATETIME</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/datetime.html values must be adjusted to compensate for the difference. It is important to realize that the cutover did not occur at the same time in all countries, and that the later it happened, the more days were lost. For example, in Great Britain, it took place in 1752, when Wednesday September 2 was followed by Thursday September 14. Russia remained on the Julian calendar until 1918, losing 13 days in the process, and what is popularly referred to as its \u201cOctober Revolution\u201d occurred in November according to the Gregorian calendar.",
            "To some extent, you can convert a value from one temporal type to another. However, there may be some alteration of the value or loss of information. In all cases, conversion between temporal types is subject to the range of valid values for the resulting type. For example, although <code>DATE</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/datetime.html, <code>DATETIME</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/datetime.html, and <code>TIMESTAMP</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/datetime.html values all can be specified using the same set of formats, the types do not all have the same range of values. <code>TIMESTAMP</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/datetime.html values cannot be earlier than <code>1970</code> UTC or later than <code>'2038-01-19 03:14:07'</code> UTC. This means that a date such as <code>'1968-01-01'</code>, while valid as a <code>DATE</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/datetime.html or <code>DATETIME</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/datetime.html value, is not valid as a <code>TIMESTAMP</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/datetime.html value and is converted to <code>0</code>.",
            "Conversion of <code>DATE</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/datetime.html values:",
            "Conversion to a <code>DATETIME</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/datetime.html or <code>TIMESTAMP</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/datetime.html value adds a time part of <code>'00:00:00'</code> because the <code>DATE</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/datetime.html value contains no time information.",
            "Conversion to a <code>DATE</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/datetime.html value takes fractional seconds into account and rounds the time part. For example, <code>'1999-12-31 23:59:59.499'</code> becomes <code>'1999-12-31'</code>, whereas <code>'1999-12-31 23:59:59.500'</code> becomes <code>'2000-01-01'</code>.",
            "Conversion of <code>TIME</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/time.html to <code>DATE</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/datetime.html is similar but discards the time part from the result: <code>'2012-01-01'</code>, <code>'2012-01-02'</code>, and <code>'2011-12-31'</code>, respectively.",
            "Explicit conversion can be used to override implicit conversion. For example, in comparison of <code>DATE</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/datetime.html and <code>DATETIME</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/datetime.html values, the <code>DATE</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/datetime.html value is coerced to the <code>DATETIME</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/datetime.html type by adding a time part of <code>'00:00:00'</code>. To perform the comparison by ignoring the time part of the <code>DATETIME</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/datetime.html value instead, use the <code>CAST()</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/cast-functions.html#function_cast function in the following way:",
            "<code>date_col = CAST(datetime_col AS DATE)</code>",
            "For <code>DATETIME</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/datetime.html, <code>DATE</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/datetime.html, and <code>TIMESTAMP</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/datetime.html types, MySQL interprets dates specified with ambiguous year values using these rules:"
        ],
        "\u201cZero\u201d Value": "'0000-00-00'",
        "Tree": [
            "(dataType DATE)",
            "(convertedDataType DATE)"
        ]
    },
    {
        "Type": [
            "DATETIME ( fsp )",
            "DATETIME",
            "DATETIME ( fsp )",
            "DATETIME"
        ],
        "Description": [
            "MySQL permits fractional seconds for <link><code>TIME</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/time.html</link>, <link><code>DATETIME</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/datetime.html</link>, and <link><code>TIMESTAMP</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/datetime.html</link> values, with up to microseconds (6 digits) precision. To define a column that includes a fractional seconds part, use the syntax <code>type_name(fsp)</code>, where <code>type_name</code> is <link><code>TIME</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/time.html</link>, <link><code>DATETIME</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/datetime.html</link>, or <link><code>TIMESTAMP</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/datetime.html</link>, and <code>fsp</code> is the fractional seconds precision. For example:\n<code>CREATE TABLE t1 (t TIME(3), dt DATETIME(6), ts TIMESTAMP(0));</code> \n The <code>fsp</code> value, if given, must be in the range 0 to 6. A value of 0 signifies that there is no fractional part. If omitted, the default precision is 0. (This differs from the standard SQL default of 6, for compatibility with previous MySQL versions.)",
            "Any <link><code>TIMESTAMP</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/datetime.html</link> or <link><code>DATETIME</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/datetime.html</link> column in a table can have automatic initialization and updating properties; see <link>Section 13.2.5, \u201cAutomatic Initialization and Updating for TIMESTAMP and DATETIME\u201d&LINK&https://dev.mysql.com/doc/refman/8.0/en/timestamp-initialization.html</link>.",
            " A date and time combination. The supported range is <code>'1000-01-01 00:00:00.000000'</code> to <code>'9999-12-31 23:59:59.499999'</code>. MySQL displays <link><code>DATETIME</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/datetime.html</link> values in <code>'YYYY-MM-DD hh:mm:ss[.fraction]'</code> format, but permits assignment of values to <link><code>DATETIME</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/datetime.html</link> columns using either strings or numbers. \n An optional <code>fsp</code> value in the range from 0 to 6 may be given to specify fractional seconds precision. A value of 0 signifies that there is no fractional part. If omitted, the default precision is 0. \n Automatic initialization and updating to the current date and time for <link><code>DATETIME</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/datetime.html</link> columns can be specified using <code>DEFAULT</code> and <code>ON UPDATE</code> column definition clauses, as described in <link>Section 13.2.5, \u201cAutomatic Initialization and Updating for TIMESTAMP and DATETIME\u201d&LINK&https://dev.mysql.com/doc/refman/8.0/en/timestamp-initialization.html</link>. \n"
        ],
        "Links": [
            "https://dev.mysql.com/doc/refman/8.0/en/date-and-time-types.html",
            "https://dev.mysql.com/doc/refman/8.0/en/datetime.html",
            "https://dev.mysql.com/doc/refman/8.0/en/time.html",
            "https://dev.mysql.com/doc/refman/8.0/en/year.html",
            "https://dev.mysql.com/doc/refman/8.0/en/timestamp-initialization.html",
            "https://dev.mysql.com/doc/refman/8.0/en/fractional-seconds.html",
            "https://dev.mysql.com/doc/refman/8.0/en/mysql-calendar.html",
            "https://dev.mysql.com/doc/refman/8.0/en/date-and-time-type-conversion.html",
            "https://dev.mysql.com/doc/refman/8.0/en/two-digit-years.html"
        ],
        "Compensate": [
            "The date and time data types for representing temporal values are <code>DATE</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/datetime.html, <code>TIME</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/time.html, <code>DATETIME</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/datetime.html, <code>TIMESTAMP</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/datetime.html, and <code>YEAR</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/year.html. Each temporal type has a range of valid values, as well as a \u201czero\u201d value that may be used when you specify an invalid value that MySQL cannot represent. The <code>TIMESTAMP</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/datetime.html and <code>DATETIME</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/datetime.html types have special automatic updating behavior, described in Section 13.2.5, \u201cAutomatic Initialization and Updating for TIMESTAMP and DATETIME\u201d&LINK&https://dev.mysql.com/doc/refman/8.0/en/timestamp-initialization.html.",
            "MySQL permits you to store dates where the day or month and day are zero in a <code>DATE</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/datetime.html or <code>DATETIME</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/datetime.html column. This is useful for applications that need to store birthdates for which you may not know the exact date. In this case, you simply store the date as <code>'2009-00-00'</code> or <code>'2009-01-00'</code>. However, with dates such as these, you should not expect to get correct results for functions such as <code>DATE_SUB()</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html#function_date-sub or <code>DATE_ADD()</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html#function_date-add that require complete dates. To disallow zero month or day parts in dates, enable the <code>NO_ZERO_IN_DATE</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/sql-mode.html#sqlmode_no_zero_in_date mode.",
            "The following table shows the format of the \u201czero\u201d value for each type. The \u201czero\u201d values are special, but you can store or refer to them explicitly using the values shown in the table. You can also do this using the values <code>'0'</code> or <code>0</code>, which are easier to write. For temporal types that include a date part (<code>DATE</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/datetime.html, <code>DATETIME</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/datetime.html, and <code>TIMESTAMP</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/datetime.html), use of these values may produce warning or errors. The precise behavior depends on which, if any, of the strict and <code>NO_ZERO_DATE</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/sql-mode.html#sqlmode_no_zero_date SQL modes are enabled; see Section 7.1.11, \u201cServer SQL Modes\u201d&LINK&https://dev.mysql.com/doc/refman/8.0/en/sql-mode.html.",
            "The <code>DATE</code>, <code>DATETIME</code>, and <code>TIMESTAMP</code> types are related. This section describes their characteristics, how they are similar, and how they differ. MySQL recognizes <code>DATE</code>, <code>DATETIME</code>, and <code>TIMESTAMP</code> values in several formats, described in Section 11.1.3, \u201cDate and Time Literals\u201d&LINK&https://dev.mysql.com/doc/refman/8.0/en/date-and-time-literals.html. For the <code>DATE</code> and <code>DATETIME</code> range descriptions, \u201csupported\u201d means that although earlier values might work, there is no guarantee.",
            "The <code>DATETIME</code> type is used for values that contain both date and time parts. MySQL retrieves and displays <code>DATETIME</code> values in <code>'YYYY-MM-DD hh:mm:ss'</code> format. The supported range is <code>'1000-01-01 00:00:00'</code> to <code>'9999-12-31 23:59:59'</code>.",
            "A <code>DATETIME</code> or <code>TIMESTAMP</code> value can include a trailing fractional seconds part in up to microseconds (6 digits) precision. In particular, any fractional part in a value inserted into a <code>DATETIME</code> or <code>TIMESTAMP</code> column is stored rather than discarded. With the fractional part included, the format for these values is <code>'YYYY-MM-DD hh:mm:ss[.fraction]'</code>, the range for <code>DATETIME</code> values is <code>'1000-01-01 00:00:00.000000'</code> to <code>'9999-12-31 23:59:59.499999'</code>, and the range for <code>TIMESTAMP</code> values is <code>'1970-01-01 00:00:01.000000'</code> to <code>'2038-01-19 03:14:07.499999'</code>. The fractional part should always be separated from the rest of the time by a decimal point; no other fractional seconds delimiter is recognized. For information about fractional seconds support in MySQL, see Section 13.2.6, \u201cFractional Seconds in Time Values\u201d&LINK&https://dev.mysql.com/doc/refman/8.0/en/fractional-seconds.html.",
            "The <code>TIMESTAMP</code> and <code>DATETIME</code> data types offer automatic initialization and updating to the current date and time. For more information, see Section 13.2.5, \u201cAutomatic Initialization and Updating for TIMESTAMP and DATETIME\u201d&LINK&https://dev.mysql.com/doc/refman/8.0/en/timestamp-initialization.html.",
            "MySQL converts <code>TIMESTAMP</code> values from the current time zone to UTC for storage, and back from UTC to the current time zone for retrieval. (This does not occur for other types such as <code>DATETIME</code>.) By default, the current time zone for each connection is the server's time. The time zone can be set on a per-connection basis. As long as the time zone setting remains constant, you get back the same value you store. If you store a <code>TIMESTAMP</code> value, and then change the time zone and retrieve the value, the retrieved value is different from the value you stored. This occurs because the same time zone was not used for conversion in both directions. The current time zone is available as the value of the <code>time_zone</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_time_zone system variable. For more information, see Section 7.1.15, \u201cMySQL Server Time Zone Support\u201d&LINK&https://dev.mysql.com/doc/refman/8.0/en/time-zone-support.html.",
            "In MySQL 8.0.19 and later, you can specify a time zone offset when inserting a <code>TIMESTAMP</code> or <code>DATETIME</code> value into a table. See Section 11.1.3, \u201cDate and Time Literals\u201d&LINK&https://dev.mysql.com/doc/refman/8.0/en/date-and-time-literals.html, for more information and examples.",
            "Invalid <code>DATE</code>, <code>DATETIME</code>, or <code>TIMESTAMP</code> values are converted to the \u201czero\u201d value of the appropriate type (<code>'0000-00-00'</code> or <code>'0000-00-00 00:00:00'</code>), if the SQL mode permits this conversion. The precise behavior depends on which if any of strict SQL mode and the <code>NO_ZERO_DATE</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/sql-mode.html#sqlmode_no_zero_date SQL mode are enabled; see Section 7.1.11, \u201cServer SQL Modes\u201d&LINK&https://dev.mysql.com/doc/refman/8.0/en/sql-mode.html.",
            "In MySQL 8.0.22 and later, you can convert <code>TIMESTAMP</code> values to UTC <code>DATETIME</code> values when retrieving them using <code>CAST()</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/cast-functions.html#function_cast with the <code>AT TIME ZONE</code> operator, as shown here:",
            "<code>mysql> SELECT col,\n > CAST(col AT TIME ZONE INTERVAL '+00:00' AS DATETIME) AS ut\n > FROM ts ORDER BY id;\n+---------------------+---------------------+\n| col | ut |\n+---------------------+---------------------+\n| 2020-01-01 10:10:10 | 2020-01-01 15:10:10 |\n| 2019-12-31 23:40:10 | 2020-01-01 04:40:10 |\n| 2020-01-01 13:10:10 | 2020-01-01 18:10:10 |\n| 2020-01-01 10:10:10 | 2020-01-01 15:10:10 |\n| 2020-01-01 04:40:10 | 2020-01-01 09:40:10 |\n| 2020-01-01 18:10:10 | 2020-01-01 23:10:10 |\n+---------------------+---------------------+</code>",
            "<code>TIMESTAMP</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/datetime.html and <code>DATETIME</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/datetime.html columns can be automatically initialized and updated to the current date and time (that is, the current timestamp).",
            "For any <code>TIMESTAMP</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/datetime.html or <code>DATETIME</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/datetime.html column in a table, you can assign the current timestamp as the default value, the auto-update value, or both:",
            "In addition, if the <code>explicit_defaults_for_timestamp</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_explicit_defaults_for_timestamp system variable is disabled, you can initialize or update any <code>TIMESTAMP</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/datetime.html (but not <code>DATETIME</code>) column to the current date and time by assigning it a <code>NULL</code> value, unless it has been defined with the <code>NULL</code> attribute to permit <code>NULL</code> values.",
            "Use of <code>DEFAULT CURRENT_TIMESTAMP</code> and <code>ON UPDATE CURRENT_TIMESTAMP</code> is specific to <code>TIMESTAMP</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/datetime.html and <code>DATETIME</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/datetime.html. The <code>DEFAULT</code> clause also can be used to specify a constant (nonautomatic) default value (for example, <code>DEFAULT 0</code> or <code>DEFAULT '2000-01-01 00:00:00'</code>).",
            "<code>TIMESTAMP</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/datetime.html or <code>DATETIME</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/datetime.html column definitions can specify the current timestamp for both the default and auto-update values, for one but not the other, or for neither. Different columns can have different combinations of automatic properties. The following rules describe the possibilities:",
            "With both <code>DEFAULT CURRENT_TIMESTAMP</code> and <code>ON UPDATE CURRENT_TIMESTAMP</code>, the column has the current timestamp for its default value and is automatically updated to the current timestamp. <code>CREATE TABLE t1 ( ts TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP, dt DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP );</code>",
            "<code><code>CREATE TABLE t1 ( ts TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP, dt DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP );</code></code>",
            "With a <code>DEFAULT</code> clause but no <code>ON UPDATE CURRENT_TIMESTAMP</code> clause, the column has the given default value and is not automatically updated to the current timestamp. The default depends on whether the <code>DEFAULT</code> clause specifies <code>CURRENT_TIMESTAMP</code> or a constant value. With <code>CURRENT_TIMESTAMP</code>, the default is the current timestamp. <code>CREATE TABLE t1 ( ts TIMESTAMP DEFAULT CURRENT_TIMESTAMP, dt DATETIME DEFAULT CURRENT_TIMESTAMP );</code> With a constant, the default is the given value. In this case, the column has no automatic properties at all. <code>CREATE TABLE t1 ( ts TIMESTAMP DEFAULT 0, dt DATETIME DEFAULT 0 );</code>",
            "<code><code>CREATE TABLE t1 ( ts TIMESTAMP DEFAULT CURRENT_TIMESTAMP, dt DATETIME DEFAULT CURRENT_TIMESTAMP );</code></code>",
            "<code><code>CREATE TABLE t1 ( ts TIMESTAMP DEFAULT 0, dt DATETIME DEFAULT 0 );</code></code>",
            "With an <code>ON UPDATE CURRENT_TIMESTAMP</code> clause and a constant <code>DEFAULT</code> clause, the column is automatically updated to the current timestamp and has the given constant default value. <code>CREATE TABLE t1 ( ts TIMESTAMP DEFAULT 0 ON UPDATE CURRENT_TIMESTAMP, dt DATETIME DEFAULT 0 ON UPDATE CURRENT_TIMESTAMP );</code>",
            "<code><code>CREATE TABLE t1 ( ts TIMESTAMP DEFAULT 0 ON UPDATE CURRENT_TIMESTAMP, dt DATETIME DEFAULT 0 ON UPDATE CURRENT_TIMESTAMP );</code></code>",
            "With an <code>ON UPDATE CURRENT_TIMESTAMP</code> clause but no <code>DEFAULT</code> clause, the column is automatically updated to the current timestamp but does not have the current timestamp for its default value. The default in this case is type dependent. <code>TIMESTAMP</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/datetime.html has a default of 0 unless defined with the <code>NULL</code> attribute, in which case the default is <code>NULL</code>. <code>CREATE TABLE t1 ( ts1 TIMESTAMP ON UPDATE CURRENT_TIMESTAMP, -- default 0 ts2 TIMESTAMP NULL ON UPDATE CURRENT_TIMESTAMP -- default NULL );</code> <code>DATETIME</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/datetime.html has a default of <code>NULL</code> unless defined with the <code>NOT NULL</code> attribute, in which case the default is 0. <code>CREATE TABLE t1 ( dt1 DATETIME ON UPDATE CURRENT_TIMESTAMP, -- default NULL dt2 DATETIME NOT NULL ON UPDATE CURRENT_TIMESTAMP -- default 0 );</code>",
            "<code><code>CREATE TABLE t1 ( dt1 DATETIME ON UPDATE CURRENT_TIMESTAMP, -- default NULL dt2 DATETIME NOT NULL ON UPDATE CURRENT_TIMESTAMP -- default 0 );</code></code>",
            "<code>TIMESTAMP</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/datetime.html and <code>DATETIME</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/datetime.html columns have no automatic properties unless they are specified explicitly, with this exception: If the <code>explicit_defaults_for_timestamp</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_explicit_defaults_for_timestamp system variable is disabled, the first <code>TIMESTAMP</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/datetime.html column has both <code>DEFAULT CURRENT_TIMESTAMP</code> and <code>ON UPDATE CURRENT_TIMESTAMP</code> if neither is specified explicitly. To suppress automatic properties for the first <code>TIMESTAMP</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/datetime.html column, use one of these strategies:",
            "If a <code>TIMESTAMP</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/datetime.html or <code>DATETIME</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/datetime.html column definition includes an explicit fractional seconds precision value anywhere, the same value must be used throughout the column definition. This is permitted:",
            "MySQL has fractional seconds support for <code>TIME</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/time.html, <code>DATETIME</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/datetime.html, and <code>TIMESTAMP</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/datetime.html values, with up to microseconds (6 digits) precision:",
            "To define a column that includes a fractional seconds part, use the syntax <code>type_name(fsp)</code>, where <code>type_name</code> is <code>TIME</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/time.html, <code>DATETIME</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/datetime.html, or <code>TIMESTAMP</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/datetime.html, and <code>fsp</code> is the fractional seconds precision. For example: <code>CREATE TABLE t1 (t TIME(3), dt DATETIME(6));</code> The <code>fsp</code> value, if given, must be in the range 0 to 6. A value of 0 signifies that there is no fractional part. If omitted, the default precision is 0. (This differs from the standard SQL default of 6, for compatibility with previous MySQL versions.)",
            "<code><code>CREATE TABLE t1 (t TIME(3), dt DATETIME(6));</code></code>",
            "Inserting a <code>TIME</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/time.html, <code>DATE</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/datetime.html, or <code>TIMESTAMP</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/datetime.html value with a fractional seconds part into a column of the same type but having fewer fractional digits results in rounding. Consider a table created and populated as follows: <code>CREATE TABLE fractest( c1 TIME(2), c2 DATETIME(2), c3 TIMESTAMP(2) ); INSERT INTO fractest VALUES ('17:51:04.777', '2018-09-08 17:51:04.777', '2018-09-08 17:51:04.777');</code> The temporal values are inserted into the table with rounding: <code>mysql> SELECT * FROM fractest; +-------------+------------------------+------------------------+ | c1 | c2 | c3 | +-------------+------------------------+------------------------+ | 17:51:04.78 | 2018-09-08 17:51:04.78 | 2018-09-08 17:51:04.78 | +-------------+------------------------+------------------------+</code> No warning or error is given when such rounding occurs. This behavior follows the SQL standard. To insert the values with truncation instead, enable the <code>TIME_TRUNCATE_FRACTIONAL</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/sql-mode.html#sqlmode_time_truncate_fractional SQL mode: <code>SET @@sql_mode = sys.list_add(@@sql_mode, 'TIME_TRUNCATE_FRACTIONAL');</code> With that SQL mode enabled, the temporal values are inserted with truncation: <code>mysql> SELECT * FROM fractest; +-------------+------------------------+------------------------+ | c1 | c2 | c3 | +-------------+------------------------+------------------------+ | 17:51:04.77 | 2018-09-08 17:51:04.77 | 2018-09-08 17:51:04.77 | +-------------+------------------------+------------------------+</code>",
            "<code><code>CREATE TABLE fractest( c1 TIME(2), c2 DATETIME(2), c3 TIMESTAMP(2) ); INSERT INTO fractest VALUES ('17:51:04.777', '2018-09-08 17:51:04.777', '2018-09-08 17:51:04.777');</code></code>",
            "A calendar applied to dates when it was not actually in use is called proleptic. Thus, if we assume there was never a cutover and Gregorian rules always rule, we have a proleptic Gregorian calendar. This is what is used by MySQL, as is required by standard SQL. For this reason, dates prior to the cutover stored as MySQL <code>DATE</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/datetime.html or <code>DATETIME</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/datetime.html values must be adjusted to compensate for the difference. It is important to realize that the cutover did not occur at the same time in all countries, and that the later it happened, the more days were lost. For example, in Great Britain, it took place in 1752, when Wednesday September 2 was followed by Thursday September 14. Russia remained on the Julian calendar until 1918, losing 13 days in the process, and what is popularly referred to as its \u201cOctober Revolution\u201d occurred in November according to the Gregorian calendar.",
            "To some extent, you can convert a value from one temporal type to another. However, there may be some alteration of the value or loss of information. In all cases, conversion between temporal types is subject to the range of valid values for the resulting type. For example, although <code>DATE</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/datetime.html, <code>DATETIME</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/datetime.html, and <code>TIMESTAMP</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/datetime.html values all can be specified using the same set of formats, the types do not all have the same range of values. <code>TIMESTAMP</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/datetime.html values cannot be earlier than <code>1970</code> UTC or later than <code>'2038-01-19 03:14:07'</code> UTC. This means that a date such as <code>'1968-01-01'</code>, while valid as a <code>DATE</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/datetime.html or <code>DATETIME</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/datetime.html value, is not valid as a <code>TIMESTAMP</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/datetime.html value and is converted to <code>0</code>.",
            "Conversion to a <code>DATETIME</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/datetime.html or <code>TIMESTAMP</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/datetime.html value adds a time part of <code>'00:00:00'</code> because the <code>DATE</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/datetime.html value contains no time information.",
            "Conversion of <code>DATETIME</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/datetime.html and <code>TIMESTAMP</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/datetime.html values:",
            "Suppose that the current date is <code>'2012-01-01'</code>. <code>TIME</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/time.html values of <code>'12:00:00'</code>, <code>'24:00:00'</code>, and <code>'-12:00:00'</code>, when converted to <code>DATETIME</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/datetime.html or <code>TIMESTAMP</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/datetime.html values, result in <code>'2012-01-01 12:00:00'</code>, <code>'2012-01-02 00:00:00'</code>, and <code>'2011-12-31 12:00:00'</code>, respectively.",
            "Explicit conversion can be used to override implicit conversion. For example, in comparison of <code>DATE</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/datetime.html and <code>DATETIME</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/datetime.html values, the <code>DATE</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/datetime.html value is coerced to the <code>DATETIME</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/datetime.html type by adding a time part of <code>'00:00:00'</code>. To perform the comparison by ignoring the time part of the <code>DATETIME</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/datetime.html value instead, use the <code>CAST()</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/cast-functions.html#function_cast function in the following way:",
            "Conversion of <code>TIME</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/time.html and <code>DATETIME</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/datetime.html values to numeric form (for example, by adding <code>+0</code>) depends on whether the value contains a fractional seconds part. <code>TIME(N)</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/time.html or <code>DATETIME(N)</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/datetime.html is converted to integer when <code>N</code> is 0 (or omitted) and to a <code>DECIMAL</code> value with <code>N</code> decimal digits when <code>N</code> is greater than 0:",
            "For <code>DATETIME</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/datetime.html, <code>DATE</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/datetime.html, and <code>TIMESTAMP</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/datetime.html types, MySQL interprets dates specified with ambiguous year values using these rules:"
        ],
        "\u201cZero\u201d Value": "'0000-00-00 00:00:00'",
        "Tree": [
            "(dataType DATETIME (lengthOneDimension ( )))",
            "(dataType DATETIME)",
            "(convertedDataType DATETIME (lengthOneDimension ( )))",
            "(convertedDataType DATETIME)"
        ]
    },
    {
        "Type": [
            "TIMESTAMP ( fsp )",
            "TIMESTAMP"
        ],
        "Description": [
            "MySQL permits fractional seconds for <link><code>TIME</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/time.html</link>, <link><code>DATETIME</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/datetime.html</link>, and <link><code>TIMESTAMP</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/datetime.html</link> values, with up to microseconds (6 digits) precision. To define a column that includes a fractional seconds part, use the syntax <code>type_name(fsp)</code>, where <code>type_name</code> is <link><code>TIME</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/time.html</link>, <link><code>DATETIME</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/datetime.html</link>, or <link><code>TIMESTAMP</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/datetime.html</link>, and <code>fsp</code> is the fractional seconds precision. For example:\n<code>CREATE TABLE t1 (t TIME(3), dt DATETIME(6), ts TIMESTAMP(0));</code> \n The <code>fsp</code> value, if given, must be in the range 0 to 6. A value of 0 signifies that there is no fractional part. If omitted, the default precision is 0. (This differs from the standard SQL default of 6, for compatibility with previous MySQL versions.)",
            "Any <link><code>TIMESTAMP</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/datetime.html</link> or <link><code>DATETIME</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/datetime.html</link> column in a table can have automatic initialization and updating properties; see <link>Section 13.2.5, \u201cAutomatic Initialization and Updating for TIMESTAMP and DATETIME\u201d&LINK&https://dev.mysql.com/doc/refman/8.0/en/timestamp-initialization.html</link>.",
            " A timestamp. The range is <code>'1970-01-01 00:00:01.000000'</code> UTC to <code>'2038-01-19 03:14:07.499999'</code> UTC. <link><code>TIMESTAMP</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/datetime.html</link> values are stored as the number of seconds since the epoch (<code>'1970-01-01 00:00:00'</code> UTC). A <link><code>TIMESTAMP</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/datetime.html</link> cannot represent the value <code>'1970-01-01 00:00:00'</code> because that is equivalent to 0 seconds from the epoch and the value 0 is reserved for representing <code>'0000-00-00 00:00:00'</code>, the \u201czero\u201d <link><code>TIMESTAMP</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/datetime.html</link> value. \n An optional <code>fsp</code> value in the range from 0 to 6 may be given to specify fractional seconds precision. A value of 0 signifies that there is no fractional part. If omitted, the default precision is 0. \n The way the server handles <code>TIMESTAMP</code> definitions depends on the value of the <link><code>explicit_defaults_for_timestamp</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_explicit_defaults_for_timestamp</link> system variable (see <link>Section 7.1.8, \u201cServer System Variables\u201d&LINK&https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html</link>). \n If <link><code>explicit_defaults_for_timestamp</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_explicit_defaults_for_timestamp</link> is enabled, there is no automatic assignment of the <code>DEFAULT CURRENT_TIMESTAMP</code> or <code>ON UPDATE CURRENT_TIMESTAMP</code> attributes to any <link><code>TIMESTAMP</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/datetime.html</link> column. They must be included explicitly in the column definition. Also, any <link><code>TIMESTAMP</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/datetime.html</link> not explicitly declared as <code>NOT NULL</code> permits <code>NULL</code> values. \n If <link><code>explicit_defaults_for_timestamp</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_explicit_defaults_for_timestamp</link> is disabled, the server handles <code>TIMESTAMP</code> as follows: \n Unless specified otherwise, the first <link><code>TIMESTAMP</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/datetime.html</link> column in a table is defined to be automatically set to the date and time of the most recent modification if not explicitly assigned a value. This makes <link><code>TIMESTAMP</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/datetime.html</link> useful for recording the timestamp of an <link><code>INSERT</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/insert.html</link> or <link><code>UPDATE</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/update.html</link> operation. You can also set any <link><code>TIMESTAMP</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/datetime.html</link> column to the current date and time by assigning it a <code>NULL</code> value, unless it has been defined with the <code>NULL</code> attribute to permit <code>NULL</code> values. \n Automatic initialization and updating to the current date and time can be specified using <code>DEFAULT CURRENT_TIMESTAMP</code> and <code>ON UPDATE CURRENT_TIMESTAMP</code> column definition clauses. By default, the first <link><code>TIMESTAMP</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/datetime.html</link> column has these properties, as previously noted. However, any <link><code>TIMESTAMP</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/datetime.html</link> column in a table can be defined to have these properties. \n"
        ],
        "Links": [
            "https://dev.mysql.com/doc/refman/8.0/en/date-and-time-types.html",
            "https://dev.mysql.com/doc/refman/8.0/en/datetime.html",
            "https://dev.mysql.com/doc/refman/8.0/en/time.html",
            "https://dev.mysql.com/doc/refman/8.0/en/year.html",
            "https://dev.mysql.com/doc/refman/8.0/en/timestamp-initialization.html",
            "https://dev.mysql.com/doc/refman/8.0/en/fractional-seconds.html",
            "https://dev.mysql.com/doc/refman/8.0/en/mysql-calendar.html",
            "https://dev.mysql.com/doc/refman/8.0/en/date-and-time-type-conversion.html",
            "https://dev.mysql.com/doc/refman/8.0/en/two-digit-years.html"
        ],
        "Compensate": [
            "The date and time data types for representing temporal values are <code>DATE</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/datetime.html, <code>TIME</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/time.html, <code>DATETIME</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/datetime.html, <code>TIMESTAMP</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/datetime.html, and <code>YEAR</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/year.html. Each temporal type has a range of valid values, as well as a \u201czero\u201d value that may be used when you specify an invalid value that MySQL cannot represent. The <code>TIMESTAMP</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/datetime.html and <code>DATETIME</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/datetime.html types have special automatic updating behavior, described in Section 13.2.5, \u201cAutomatic Initialization and Updating for TIMESTAMP and DATETIME\u201d&LINK&https://dev.mysql.com/doc/refman/8.0/en/timestamp-initialization.html.",
            "The following table shows the format of the \u201czero\u201d value for each type. The \u201czero\u201d values are special, but you can store or refer to them explicitly using the values shown in the table. You can also do this using the values <code>'0'</code> or <code>0</code>, which are easier to write. For temporal types that include a date part (<code>DATE</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/datetime.html, <code>DATETIME</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/datetime.html, and <code>TIMESTAMP</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/datetime.html), use of these values may produce warning or errors. The precise behavior depends on which, if any, of the strict and <code>NO_ZERO_DATE</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/sql-mode.html#sqlmode_no_zero_date SQL modes are enabled; see Section 7.1.11, \u201cServer SQL Modes\u201d&LINK&https://dev.mysql.com/doc/refman/8.0/en/sql-mode.html.",
            "The <code>DATE</code>, <code>DATETIME</code>, and <code>TIMESTAMP</code> types are related. This section describes their characteristics, how they are similar, and how they differ. MySQL recognizes <code>DATE</code>, <code>DATETIME</code>, and <code>TIMESTAMP</code> values in several formats, described in Section 11.1.3, \u201cDate and Time Literals\u201d&LINK&https://dev.mysql.com/doc/refman/8.0/en/date-and-time-literals.html. For the <code>DATE</code> and <code>DATETIME</code> range descriptions, \u201csupported\u201d means that although earlier values might work, there is no guarantee.",
            "The <code>TIMESTAMP</code> data type is used for values that contain both date and time parts. <code>TIMESTAMP</code> has a range of <code>'1970-01-01 00:00:01'</code> UTC to <code>'2038-01-19 03:14:07'</code> UTC.",
            "A <code>DATETIME</code> or <code>TIMESTAMP</code> value can include a trailing fractional seconds part in up to microseconds (6 digits) precision. In particular, any fractional part in a value inserted into a <code>DATETIME</code> or <code>TIMESTAMP</code> column is stored rather than discarded. With the fractional part included, the format for these values is <code>'YYYY-MM-DD hh:mm:ss[.fraction]'</code>, the range for <code>DATETIME</code> values is <code>'1000-01-01 00:00:00.000000'</code> to <code>'9999-12-31 23:59:59.499999'</code>, and the range for <code>TIMESTAMP</code> values is <code>'1970-01-01 00:00:01.000000'</code> to <code>'2038-01-19 03:14:07.499999'</code>. The fractional part should always be separated from the rest of the time by a decimal point; no other fractional seconds delimiter is recognized. For information about fractional seconds support in MySQL, see Section 13.2.6, \u201cFractional Seconds in Time Values\u201d&LINK&https://dev.mysql.com/doc/refman/8.0/en/fractional-seconds.html.",
            "The <code>TIMESTAMP</code> and <code>DATETIME</code> data types offer automatic initialization and updating to the current date and time. For more information, see Section 13.2.5, \u201cAutomatic Initialization and Updating for TIMESTAMP and DATETIME\u201d&LINK&https://dev.mysql.com/doc/refman/8.0/en/timestamp-initialization.html.",
            "MySQL converts <code>TIMESTAMP</code> values from the current time zone to UTC for storage, and back from UTC to the current time zone for retrieval. (This does not occur for other types such as <code>DATETIME</code>.) By default, the current time zone for each connection is the server's time. The time zone can be set on a per-connection basis. As long as the time zone setting remains constant, you get back the same value you store. If you store a <code>TIMESTAMP</code> value, and then change the time zone and retrieve the value, the retrieved value is different from the value you stored. This occurs because the same time zone was not used for conversion in both directions. The current time zone is available as the value of the <code>time_zone</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_time_zone system variable. For more information, see Section 7.1.15, \u201cMySQL Server Time Zone Support\u201d&LINK&https://dev.mysql.com/doc/refman/8.0/en/time-zone-support.html.",
            "In MySQL 8.0.19 and later, you can specify a time zone offset when inserting a <code>TIMESTAMP</code> or <code>DATETIME</code> value into a table. See Section 11.1.3, \u201cDate and Time Literals\u201d&LINK&https://dev.mysql.com/doc/refman/8.0/en/date-and-time-literals.html, for more information and examples.",
            "Invalid <code>DATE</code>, <code>DATETIME</code>, or <code>TIMESTAMP</code> values are converted to the \u201czero\u201d value of the appropriate type (<code>'0000-00-00'</code> or <code>'0000-00-00 00:00:00'</code>), if the SQL mode permits this conversion. The precise behavior depends on which if any of strict SQL mode and the <code>NO_ZERO_DATE</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/sql-mode.html#sqlmode_no_zero_date SQL mode are enabled; see Section 7.1.11, \u201cServer SQL Modes\u201d&LINK&https://dev.mysql.com/doc/refman/8.0/en/sql-mode.html.",
            "In MySQL 8.0.22 and later, you can convert <code>TIMESTAMP</code> values to UTC <code>DATETIME</code> values when retrieving them using <code>CAST()</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/cast-functions.html#function_cast with the <code>AT TIME ZONE</code> operator, as shown here:",
            "MySQL does not accept <code>TIMESTAMP</code> values that include a zero in the day or month column or values that are not a valid date. The sole exception to this rule is the special \u201czero\u201d value <code>'0000-00-00 00:00:00'</code>, if the SQL mode permits this value. The precise behavior depends on which if any of strict SQL mode and the <code>NO_ZERO_DATE</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/sql-mode.html#sqlmode_no_zero_date SQL mode are enabled; see Section 7.1.11, \u201cServer SQL Modes\u201d&LINK&https://dev.mysql.com/doc/refman/8.0/en/sql-mode.html.",
            "<code>TIMESTAMP</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/datetime.html and <code>DATETIME</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/datetime.html columns can be automatically initialized and updated to the current date and time (that is, the current timestamp).",
            "For any <code>TIMESTAMP</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/datetime.html or <code>DATETIME</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/datetime.html column in a table, you can assign the current timestamp as the default value, the auto-update value, or both:",
            "In addition, if the <code>explicit_defaults_for_timestamp</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_explicit_defaults_for_timestamp system variable is disabled, you can initialize or update any <code>TIMESTAMP</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/datetime.html (but not <code>DATETIME</code>) column to the current date and time by assigning it a <code>NULL</code> value, unless it has been defined with the <code>NULL</code> attribute to permit <code>NULL</code> values.",
            "Use of <code>DEFAULT CURRENT_TIMESTAMP</code> and <code>ON UPDATE CURRENT_TIMESTAMP</code> is specific to <code>TIMESTAMP</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/datetime.html and <code>DATETIME</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/datetime.html. The <code>DEFAULT</code> clause also can be used to specify a constant (nonautomatic) default value (for example, <code>DEFAULT 0</code> or <code>DEFAULT '2000-01-01 00:00:00'</code>).",
            "<code>TIMESTAMP</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/datetime.html or <code>DATETIME</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/datetime.html column definitions can specify the current timestamp for both the default and auto-update values, for one but not the other, or for neither. Different columns can have different combinations of automatic properties. The following rules describe the possibilities:",
            "With both <code>DEFAULT CURRENT_TIMESTAMP</code> and <code>ON UPDATE CURRENT_TIMESTAMP</code>, the column has the current timestamp for its default value and is automatically updated to the current timestamp. <code>CREATE TABLE t1 ( ts TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP, dt DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP );</code>",
            "<code><code>CREATE TABLE t1 ( ts TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP, dt DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP );</code></code>",
            "With a <code>DEFAULT</code> clause but no <code>ON UPDATE CURRENT_TIMESTAMP</code> clause, the column has the given default value and is not automatically updated to the current timestamp. The default depends on whether the <code>DEFAULT</code> clause specifies <code>CURRENT_TIMESTAMP</code> or a constant value. With <code>CURRENT_TIMESTAMP</code>, the default is the current timestamp. <code>CREATE TABLE t1 ( ts TIMESTAMP DEFAULT CURRENT_TIMESTAMP, dt DATETIME DEFAULT CURRENT_TIMESTAMP );</code> With a constant, the default is the given value. In this case, the column has no automatic properties at all. <code>CREATE TABLE t1 ( ts TIMESTAMP DEFAULT 0, dt DATETIME DEFAULT 0 );</code>",
            "<code><code>CREATE TABLE t1 ( ts TIMESTAMP DEFAULT CURRENT_TIMESTAMP, dt DATETIME DEFAULT CURRENT_TIMESTAMP );</code></code>",
            "<code><code>CREATE TABLE t1 ( ts TIMESTAMP DEFAULT 0, dt DATETIME DEFAULT 0 );</code></code>",
            "With an <code>ON UPDATE CURRENT_TIMESTAMP</code> clause and a constant <code>DEFAULT</code> clause, the column is automatically updated to the current timestamp and has the given constant default value. <code>CREATE TABLE t1 ( ts TIMESTAMP DEFAULT 0 ON UPDATE CURRENT_TIMESTAMP, dt DATETIME DEFAULT 0 ON UPDATE CURRENT_TIMESTAMP );</code>",
            "<code><code>CREATE TABLE t1 ( ts TIMESTAMP DEFAULT 0 ON UPDATE CURRENT_TIMESTAMP, dt DATETIME DEFAULT 0 ON UPDATE CURRENT_TIMESTAMP );</code></code>",
            "With an <code>ON UPDATE CURRENT_TIMESTAMP</code> clause but no <code>DEFAULT</code> clause, the column is automatically updated to the current timestamp but does not have the current timestamp for its default value. The default in this case is type dependent. <code>TIMESTAMP</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/datetime.html has a default of 0 unless defined with the <code>NULL</code> attribute, in which case the default is <code>NULL</code>. <code>CREATE TABLE t1 ( ts1 TIMESTAMP ON UPDATE CURRENT_TIMESTAMP, -- default 0 ts2 TIMESTAMP NULL ON UPDATE CURRENT_TIMESTAMP -- default NULL );</code> <code>DATETIME</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/datetime.html has a default of <code>NULL</code> unless defined with the <code>NOT NULL</code> attribute, in which case the default is 0. <code>CREATE TABLE t1 ( dt1 DATETIME ON UPDATE CURRENT_TIMESTAMP, -- default NULL dt2 DATETIME NOT NULL ON UPDATE CURRENT_TIMESTAMP -- default 0 );</code>",
            "<code><code>CREATE TABLE t1 ( ts1 TIMESTAMP ON UPDATE CURRENT_TIMESTAMP, -- default 0 ts2 TIMESTAMP NULL ON UPDATE CURRENT_TIMESTAMP -- default NULL );</code></code>",
            "<code>TIMESTAMP</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/datetime.html and <code>DATETIME</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/datetime.html columns have no automatic properties unless they are specified explicitly, with this exception: If the <code>explicit_defaults_for_timestamp</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_explicit_defaults_for_timestamp system variable is disabled, the first <code>TIMESTAMP</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/datetime.html column has both <code>DEFAULT CURRENT_TIMESTAMP</code> and <code>ON UPDATE CURRENT_TIMESTAMP</code> if neither is specified explicitly. To suppress automatic properties for the first <code>TIMESTAMP</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/datetime.html column, use one of these strategies:",
            "Enable the <code>explicit_defaults_for_timestamp</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_explicit_defaults_for_timestamp system variable. In this case, the <code>DEFAULT CURRENT_TIMESTAMP</code> and <code>ON UPDATE CURRENT_TIMESTAMP</code> clauses that specify automatic initialization and updating are available, but are not assigned to any <code>TIMESTAMP</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/datetime.html column unless explicitly included in the column definition.",
            "<code>CREATE TABLE t1 (\n ts1 TIMESTAMP DEFAULT 0,\n ts2 TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n ON UPDATE CURRENT_TIMESTAMP);\nCREATE TABLE t2 (\n ts1 TIMESTAMP NULL,\n ts2 TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n ON UPDATE CURRENT_TIMESTAMP);\nCREATE TABLE t3 (\n ts1 TIMESTAMP NULL DEFAULT 0,\n ts2 TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n ON UPDATE CURRENT_TIMESTAMP);</code>",
            "In each table definition, the first <code>TIMESTAMP</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/datetime.html column has no automatic initialization or updating.",
            "If a <code>TIMESTAMP</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/datetime.html or <code>DATETIME</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/datetime.html column definition includes an explicit fractional seconds precision value anywhere, the same value must be used throughout the column definition. This is permitted:",
            "<code>CREATE TABLE t1 (\n ts TIMESTAMP(6) DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6)\n);</code>",
            "<code>CREATE TABLE t1 (\n ts TIMESTAMP(6) DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP(3)\n);</code>",
            "If the <code>explicit_defaults_for_timestamp</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_explicit_defaults_for_timestamp system variable is disabled, <code>TIMESTAMP</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/datetime.html columns by default are <code>NOT NULL</code>, cannot contain <code>NULL</code> values, and assigning <code>NULL</code> assigns the current timestamp. To permit a <code>TIMESTAMP</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/datetime.html column to contain <code>NULL</code>, explicitly declare it with the <code>NULL</code> attribute. In this case, the default value also becomes <code>NULL</code> unless overridden with a <code>DEFAULT</code> clause that specifies a different default value. <code>DEFAULT NULL</code> can be used to explicitly specify <code>NULL</code> as the default value. (For a <code>TIMESTAMP</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/datetime.html column not declared with the <code>NULL</code> attribute, <code>DEFAULT NULL</code> is invalid.) If a <code>TIMESTAMP</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/datetime.html column permits <code>NULL</code> values, assigning <code>NULL</code> sets it to <code>NULL</code>, not to the current timestamp.",
            "The following table contains several <code>TIMESTAMP</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/datetime.html columns that permit <code>NULL</code> values:",
            "<code>CREATE TABLE t\n(\n ts1 TIMESTAMP NULL DEFAULT NULL,\n ts2 TIMESTAMP NULL DEFAULT 0,\n ts3 TIMESTAMP NULL DEFAULT CURRENT_TIMESTAMP\n);</code>",
            "A <code>TIMESTAMP</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/datetime.html column that permits <code>NULL</code> values does not take on the current timestamp at insert time except under one of the following conditions:",
            "In other words, a <code>TIMESTAMP</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/datetime.html column defined to permit <code>NULL</code> values auto-initializes only if its definition includes <code>DEFAULT CURRENT_TIMESTAMP</code>:",
            "<code>CREATE TABLE t (ts TIMESTAMP NULL DEFAULT CURRENT_TIMESTAMP);</code>",
            "If the <code>TIMESTAMP</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/datetime.html column permits <code>NULL</code> values but its definition does not include <code>DEFAULT CURRENT_TIMESTAMP</code>, you must explicitly insert a value corresponding to the current date and time. Suppose that tables <code>t1</code> and <code>t2</code> have these definitions:",
            "<code>CREATE TABLE t1 (ts TIMESTAMP NULL DEFAULT '0000-00-00 00:00:00');\nCREATE TABLE t2 (ts TIMESTAMP NULL DEFAULT NULL);</code>",
            "To set the <code>TIMESTAMP</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/datetime.html column in either table to the current timestamp at insert time, explicitly assign it that value. For example:",
            "If the <code>explicit_defaults_for_timestamp</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_explicit_defaults_for_timestamp system variable is enabled, <code>TIMESTAMP</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/datetime.html columns permit <code>NULL</code> values only if declared with the <code>NULL</code> attribute. Also, <code>TIMESTAMP</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/datetime.html columns do not permit assigning <code>NULL</code> to assign the current timestamp, whether declared with the <code>NULL</code> or <code>NOT NULL</code> attribute. To assign the current timestamp, set the column to <code>CURRENT_TIMESTAMP</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html#function_current-timestamp or a synonym such as <code>NOW()</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html#function_now.",
            "MySQL has fractional seconds support for <code>TIME</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/time.html, <code>DATETIME</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/datetime.html, and <code>TIMESTAMP</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/datetime.html values, with up to microseconds (6 digits) precision:",
            "To define a column that includes a fractional seconds part, use the syntax <code>type_name(fsp)</code>, where <code>type_name</code> is <code>TIME</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/time.html, <code>DATETIME</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/datetime.html, or <code>TIMESTAMP</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/datetime.html, and <code>fsp</code> is the fractional seconds precision. For example: <code>CREATE TABLE t1 (t TIME(3), dt DATETIME(6));</code> The <code>fsp</code> value, if given, must be in the range 0 to 6. A value of 0 signifies that there is no fractional part. If omitted, the default precision is 0. (This differs from the standard SQL default of 6, for compatibility with previous MySQL versions.)",
            "Inserting a <code>TIME</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/time.html, <code>DATE</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/datetime.html, or <code>TIMESTAMP</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/datetime.html value with a fractional seconds part into a column of the same type but having fewer fractional digits results in rounding. Consider a table created and populated as follows: <code>CREATE TABLE fractest( c1 TIME(2), c2 DATETIME(2), c3 TIMESTAMP(2) ); INSERT INTO fractest VALUES ('17:51:04.777', '2018-09-08 17:51:04.777', '2018-09-08 17:51:04.777');</code> The temporal values are inserted into the table with rounding: <code>mysql> SELECT * FROM fractest; +-------------+------------------------+------------------------+ | c1 | c2 | c3 | +-------------+------------------------+------------------------+ | 17:51:04.78 | 2018-09-08 17:51:04.78 | 2018-09-08 17:51:04.78 | +-------------+------------------------+------------------------+</code> No warning or error is given when such rounding occurs. This behavior follows the SQL standard. To insert the values with truncation instead, enable the <code>TIME_TRUNCATE_FRACTIONAL</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/sql-mode.html#sqlmode_time_truncate_fractional SQL mode: <code>SET @@sql_mode = sys.list_add(@@sql_mode, 'TIME_TRUNCATE_FRACTIONAL');</code> With that SQL mode enabled, the temporal values are inserted with truncation: <code>mysql> SELECT * FROM fractest; +-------------+------------------------+------------------------+ | c1 | c2 | c3 | +-------------+------------------------+------------------------+ | 17:51:04.77 | 2018-09-08 17:51:04.77 | 2018-09-08 17:51:04.77 | +-------------+------------------------+------------------------+</code>",
            "<code><code>CREATE TABLE fractest( c1 TIME(2), c2 DATETIME(2), c3 TIMESTAMP(2) ); INSERT INTO fractest VALUES ('17:51:04.777', '2018-09-08 17:51:04.777', '2018-09-08 17:51:04.777');</code></code>",
            "Syntax for temporal literals produces temporal values: <code>DATE 'str'</code>, <code>TIME 'str'</code>, and <code>TIMESTAMP 'str'</code>, and the ODBC-syntax equivalents. The resulting value includes a trailing fractional seconds part if specified. Previously, the temporal type keyword was ignored and these constructs produced the string value. See Standard SQL and ODBC Date and Time Literals&LINK&https://dev.mysql.com/doc/refman/8.0/en/date-and-time-literals.html#date-and-time-standard-sql-literals",
            "To some extent, you can convert a value from one temporal type to another. However, there may be some alteration of the value or loss of information. In all cases, conversion between temporal types is subject to the range of valid values for the resulting type. For example, although <code>DATE</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/datetime.html, <code>DATETIME</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/datetime.html, and <code>TIMESTAMP</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/datetime.html values all can be specified using the same set of formats, the types do not all have the same range of values. <code>TIMESTAMP</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/datetime.html values cannot be earlier than <code>1970</code> UTC or later than <code>'2038-01-19 03:14:07'</code> UTC. This means that a date such as <code>'1968-01-01'</code>, while valid as a <code>DATE</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/datetime.html or <code>DATETIME</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/datetime.html value, is not valid as a <code>TIMESTAMP</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/datetime.html value and is converted to <code>0</code>.",
            "Conversion to a <code>DATETIME</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/datetime.html or <code>TIMESTAMP</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/datetime.html value adds a time part of <code>'00:00:00'</code> because the <code>DATE</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/datetime.html value contains no time information.",
            "Conversion of <code>DATETIME</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/datetime.html and <code>TIMESTAMP</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/datetime.html values:",
            "Suppose that the current date is <code>'2012-01-01'</code>. <code>TIME</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/time.html values of <code>'12:00:00'</code>, <code>'24:00:00'</code>, and <code>'-12:00:00'</code>, when converted to <code>DATETIME</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/datetime.html or <code>TIMESTAMP</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/datetime.html values, result in <code>'2012-01-01 12:00:00'</code>, <code>'2012-01-02 00:00:00'</code>, and <code>'2011-12-31 12:00:00'</code>, respectively.",
            "For <code>DATETIME</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/datetime.html, <code>DATE</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/datetime.html, and <code>TIMESTAMP</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/datetime.html types, MySQL interprets dates specified with ambiguous year values using these rules:"
        ],
        "\u201cZero\u201d Value": "'0000-00-00 00:00:00'",
        "Tree": [
            "(dataType TIMESTAMP (lengthOneDimension ( )))",
            "(dataType TIMESTAMP)"
        ]
    },
    {
        "Type": [
            "TIME ( fsp )",
            "TIME",
            "TIME ( fsp )",
            "TIME"
        ],
        "Description": [
            "MySQL permits fractional seconds for <link><code>TIME</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/time.html</link>, <link><code>DATETIME</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/datetime.html</link>, and <link><code>TIMESTAMP</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/datetime.html</link> values, with up to microseconds (6 digits) precision. To define a column that includes a fractional seconds part, use the syntax <code>type_name(fsp)</code>, where <code>type_name</code> is <link><code>TIME</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/time.html</link>, <link><code>DATETIME</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/datetime.html</link>, or <link><code>TIMESTAMP</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/datetime.html</link>, and <code>fsp</code> is the fractional seconds precision. For example:\n<code>CREATE TABLE t1 (t TIME(3), dt DATETIME(6), ts TIMESTAMP(0));</code> \n The <code>fsp</code> value, if given, must be in the range 0 to 6. A value of 0 signifies that there is no fractional part. If omitted, the default precision is 0. (This differs from the standard SQL default of 6, for compatibility with previous MySQL versions.)",
            " A time. The range is <code>'-838:59:59.000000'</code> to <code>'838:59:59.000000'</code>. MySQL displays <link><code>TIME</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/time.html</link> values in <code>'hh:mm:ss[.fraction]'</code> format, but permits assignment of values to <link><code>TIME</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/time.html</link> columns using either strings or numbers. \n An optional <code>fsp</code> value in the range from 0 to 6 may be given to specify fractional seconds precision. A value of 0 signifies that there is no fractional part. If omitted, the default precision is 0. \n"
        ],
        "Links": [
            "https://dev.mysql.com/doc/refman/8.0/en/date-and-time-types.html",
            "https://dev.mysql.com/doc/refman/8.0/en/datetime.html",
            "https://dev.mysql.com/doc/refman/8.0/en/time.html",
            "https://dev.mysql.com/doc/refman/8.0/en/year.html",
            "https://dev.mysql.com/doc/refman/8.0/en/timestamp-initialization.html",
            "https://dev.mysql.com/doc/refman/8.0/en/fractional-seconds.html",
            "https://dev.mysql.com/doc/refman/8.0/en/mysql-calendar.html",
            "https://dev.mysql.com/doc/refman/8.0/en/date-and-time-type-conversion.html",
            "https://dev.mysql.com/doc/refman/8.0/en/two-digit-years.html"
        ],
        "Compensate": [
            "The date and time data types for representing temporal values are <code>DATE</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/datetime.html, <code>TIME</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/time.html, <code>DATETIME</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/datetime.html, <code>TIMESTAMP</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/datetime.html, and <code>YEAR</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/year.html. Each temporal type has a range of valid values, as well as a \u201czero\u201d value that may be used when you specify an invalid value that MySQL cannot represent. The <code>TIMESTAMP</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/datetime.html and <code>DATETIME</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/datetime.html types have special automatic updating behavior, described in Section 13.2.5, \u201cAutomatic Initialization and Updating for TIMESTAMP and DATETIME\u201d&LINK&https://dev.mysql.com/doc/refman/8.0/en/timestamp-initialization.html.",
            "By default, when MySQL encounters a value for a date or time type that is out of range or otherwise invalid for the type, it converts the value to the \u201czero\u201d value for that type. The exception is that out-of-range <code>TIME</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/time.html values are clipped to the appropriate endpoint of the <code>TIME</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/time.html range.",
            "In MySQL 8.0.22 and later, you can convert <code>TIMESTAMP</code> values to UTC <code>DATETIME</code> values when retrieving them using <code>CAST()</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/cast-functions.html#function_cast with the <code>AT TIME ZONE</code> operator, as shown here:",
            "<code>mysql> SELECT col,\n > CAST(col AT TIME ZONE INTERVAL '+00:00' AS DATETIME) AS ut\n > FROM ts ORDER BY id;\n+---------------------+---------------------+\n| col | ut |\n+---------------------+---------------------+\n| 2020-01-01 10:10:10 | 2020-01-01 15:10:10 |\n| 2019-12-31 23:40:10 | 2020-01-01 04:40:10 |\n| 2020-01-01 13:10:10 | 2020-01-01 18:10:10 |\n| 2020-01-01 10:10:10 | 2020-01-01 15:10:10 |\n| 2020-01-01 04:40:10 | 2020-01-01 09:40:10 |\n| 2020-01-01 18:10:10 | 2020-01-01 23:10:10 |\n+---------------------+---------------------+</code>",
            "MySQL retrieves and displays <code>TIME</code> values in <code>'hh:mm:ss'</code> format (or <code>'hhh:mm:ss'</code> format for large hours values). <code>TIME</code> values may range from <code>'-838:59:59'</code> to <code>'838:59:59'</code>. The hours part may be so large because the <code>TIME</code> type can be used not only to represent a time of day (which must be less than 24 hours), but also elapsed time or a time interval between two events (which may be much greater than 24 hours, or even negative).",
            "MySQL recognizes <code>TIME</code> values in several formats, some of which can include a trailing fractional seconds part in up to microseconds (6 digits) precision. See Section 11.1.3, \u201cDate and Time Literals\u201d&LINK&https://dev.mysql.com/doc/refman/8.0/en/date-and-time-literals.html. For information about fractional seconds support in MySQL, see Section 13.2.6, \u201cFractional Seconds in Time Values\u201d&LINK&https://dev.mysql.com/doc/refman/8.0/en/fractional-seconds.html. In particular, any fractional part in a value inserted into a <code>TIME</code> column is stored rather than discarded. With the fractional part included, the range for <code>TIME</code> values is <code>'-838:59:59.000000'</code> to <code>'838:59:59.000000'</code>.",
            "Be careful about assigning abbreviated values to a <code>TIME</code> column. MySQL interprets abbreviated <code>TIME</code> values with colons as time of the day. That is, <code>'11:12'</code> means <code>'11:12:00'</code>, not <code>'00:11:12'</code>. MySQL interprets abbreviated values without colons using the assumption that the two rightmost digits represent seconds (that is, as elapsed time rather than as time of day). For example, you might think of <code>'1112'</code> and <code>1112</code> as meaning <code>'11:12:00'</code> (12 minutes after 11 o'clock), but MySQL interprets them as <code>'00:11:12'</code> (11 minutes, 12 seconds). Similarly, <code>'12'</code> and <code>12</code> are interpreted as <code>'00:00:12'</code>.",
            "By default, values that lie outside the <code>TIME</code> range but are otherwise valid are clipped to the closest endpoint of the range. For example, <code>'-850:00:00'</code> and <code>'850:00:00'</code> are converted to <code>'-838:59:59'</code> and <code>'838:59:59'</code>. Invalid <code>TIME</code> values are converted to <code>'00:00:00'</code>. Note that because <code>'00:00:00'</code> is itself a valid <code>TIME</code> value, there is no way to tell, from a value of <code>'00:00:00'</code> stored in a table, whether the original value was specified as <code>'00:00:00'</code> or whether it was invalid.",
            "For more restrictive treatment of invalid <code>TIME</code> values, enable strict SQL mode to cause errors to occur. See Section 7.1.11, \u201cServer SQL Modes\u201d&LINK&https://dev.mysql.com/doc/refman/8.0/en/sql-mode.html.",
            "MySQL has fractional seconds support for <code>TIME</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/time.html, <code>DATETIME</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/datetime.html, and <code>TIMESTAMP</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/datetime.html values, with up to microseconds (6 digits) precision:",
            "To define a column that includes a fractional seconds part, use the syntax <code>type_name(fsp)</code>, where <code>type_name</code> is <code>TIME</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/time.html, <code>DATETIME</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/datetime.html, or <code>TIMESTAMP</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/datetime.html, and <code>fsp</code> is the fractional seconds precision. For example: <code>CREATE TABLE t1 (t TIME(3), dt DATETIME(6));</code> The <code>fsp</code> value, if given, must be in the range 0 to 6. A value of 0 signifies that there is no fractional part. If omitted, the default precision is 0. (This differs from the standard SQL default of 6, for compatibility with previous MySQL versions.)",
            "<code><code>CREATE TABLE t1 (t TIME(3), dt DATETIME(6));</code></code>",
            "Inserting a <code>TIME</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/time.html, <code>DATE</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/datetime.html, or <code>TIMESTAMP</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/datetime.html value with a fractional seconds part into a column of the same type but having fewer fractional digits results in rounding. Consider a table created and populated as follows: <code>CREATE TABLE fractest( c1 TIME(2), c2 DATETIME(2), c3 TIMESTAMP(2) ); INSERT INTO fractest VALUES ('17:51:04.777', '2018-09-08 17:51:04.777', '2018-09-08 17:51:04.777');</code> The temporal values are inserted into the table with rounding: <code>mysql> SELECT * FROM fractest; +-------------+------------------------+------------------------+ | c1 | c2 | c3 | +-------------+------------------------+------------------------+ | 17:51:04.78 | 2018-09-08 17:51:04.78 | 2018-09-08 17:51:04.78 | +-------------+------------------------+------------------------+</code> No warning or error is given when such rounding occurs. This behavior follows the SQL standard. To insert the values with truncation instead, enable the <code>TIME_TRUNCATE_FRACTIONAL</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/sql-mode.html#sqlmode_time_truncate_fractional SQL mode: <code>SET @@sql_mode = sys.list_add(@@sql_mode, 'TIME_TRUNCATE_FRACTIONAL');</code> With that SQL mode enabled, the temporal values are inserted with truncation: <code>mysql> SELECT * FROM fractest; +-------------+------------------------+------------------------+ | c1 | c2 | c3 | +-------------+------------------------+------------------------+ | 17:51:04.77 | 2018-09-08 17:51:04.77 | 2018-09-08 17:51:04.77 | +-------------+------------------------+------------------------+</code>",
            "<code><code>CREATE TABLE fractest( c1 TIME(2), c2 DATETIME(2), c3 TIMESTAMP(2) ); INSERT INTO fractest VALUES ('17:51:04.777', '2018-09-08 17:51:04.777', '2018-09-08 17:51:04.777');</code></code>",
            "Syntax for temporal literals produces temporal values: <code>DATE 'str'</code>, <code>TIME 'str'</code>, and <code>TIMESTAMP 'str'</code>, and the ODBC-syntax equivalents. The resulting value includes a trailing fractional seconds part if specified. Previously, the temporal type keyword was ignored and these constructs produced the string value. See Standard SQL and ODBC Date and Time Literals&LINK&https://dev.mysql.com/doc/refman/8.0/en/date-and-time-literals.html#date-and-time-standard-sql-literals",
            "Conversion to a <code>TIME</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/time.html value is not useful; the result is <code>'00:00:00'</code>.",
            "Conversion to a <code>TIME</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/time.html value discards the date part because the <code>TIME</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/time.html type contains no date information.",
            "For conversion of <code>TIME</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/time.html values to other temporal types, the value of <code>CURRENT_DATE()</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html#function_current-date is used for the date part. The <code>TIME</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/time.html is interpreted as elapsed time (not time of day) and added to the date. This means that the date part of the result differs from the current date if the time value is outside the range from <code>'00:00:00'</code> to <code>'23:59:59'</code>.",
            "Suppose that the current date is <code>'2012-01-01'</code>. <code>TIME</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/time.html values of <code>'12:00:00'</code>, <code>'24:00:00'</code>, and <code>'-12:00:00'</code>, when converted to <code>DATETIME</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/datetime.html or <code>TIMESTAMP</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/datetime.html values, result in <code>'2012-01-01 12:00:00'</code>, <code>'2012-01-02 00:00:00'</code>, and <code>'2011-12-31 12:00:00'</code>, respectively.",
            "Conversion of <code>TIME</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/time.html to <code>DATE</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/datetime.html is similar but discards the time part from the result: <code>'2012-01-01'</code>, <code>'2012-01-02'</code>, and <code>'2011-12-31'</code>, respectively.",
            "Conversion of <code>TIME</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/time.html and <code>DATETIME</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/datetime.html values to numeric form (for example, by adding <code>+0</code>) depends on whether the value contains a fractional seconds part. <code>TIME(N)</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/time.html or <code>DATETIME(N)</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/datetime.html is converted to integer when <code>N</code> is 0 (or omitted) and to a <code>DECIMAL</code> value with <code>N</code> decimal digits when <code>N</code> is greater than 0:"
        ],
        "\u201cZero\u201d Value": "'00:00:00'",
        "Tree": [
            "(convertedDataType TIME (lengthOneDimension ( )))",
            "(convertedDataType TIME)",
            "(dataType TIME (lengthOneDimension ( )))",
            "(dataType TIME)"
        ]
    },
    {
        "Type": [
            "YEAR",
            "YEAR ( 4 )",
            "YEAR",
            "YEAR ( 4 )"
        ],
        "Description": [
            " A year in 4-digit format. MySQL displays <link><code>YEAR</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/year.html</link> values in <code>YYYY</code> format, but permits assignment of values to <link><code>YEAR</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/year.html</link> columns using either strings or numbers. Values display as <code>1901</code> to <code>2155</code>, or <code>0000</code>. \n For additional information about <link><code>YEAR</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/year.html</link> display format and interpretation of input values, see <link>Section 13.2.4, \u201cThe YEAR Type\u201d&LINK&https://dev.mysql.com/doc/refman/8.0/en/year.html</link>. \nNote\n As of MySQL 8.0.19, the <link><code>YEAR(4)</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/year.html</link> data type with an explicit display width is deprecated; you should expect support for it to be removed in a future version of MySQL. Instead, use <link><code>YEAR</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/year.html</link> without a display width, which has the same meaning. \n MySQL 8.0 does not support the 2-digit <link><code>YEAR(2)</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/year.html</link> data type permitted in older versions of MySQL. For instructions on converting to 4-digit <link><code>YEAR</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/year.html</link>, see <link>2-Digit YEAR(2) Limitations and Migrating to 4-Digit YEAR&LINK&https://dev.mysql.com/doc/refman/5.7/en/migrating-from-year2.html</link>, in <link>MySQL 5.7 Reference Manual&LINK&https://dev.mysql.com/doc/refman/5.7/en/</link>. \n"
        ],
        "Links": [
            "https://dev.mysql.com/doc/refman/8.0/en/year.html",
            "https://dev.mysql.com/doc/refman/8.0/en/timestamp-initialization.html",
            "https://dev.mysql.com/doc/refman/8.0/en/fractional-seconds.html",
            "https://dev.mysql.com/doc/refman/8.0/en/mysql-calendar.html",
            "https://dev.mysql.com/doc/refman/8.0/en/date-and-time-type-conversion.html",
            "https://dev.mysql.com/doc/refman/8.0/en/two-digit-years.html"
        ],
        "Compensate": [
            "The <code>YEAR</code> type is a 1-byte type used to represent year values. It can be declared as <code>YEAR</code> with an implicit display width of 4 characters, or equivalently as <code>YEAR(4)</code> with an explicit display width.",
            "As of MySQL 8.0.19, the <code>YEAR(4)</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/year.html data type with an explicit display width is deprecated and you should expect support for it to be removed in a future version of MySQL. Instead, use <code>YEAR</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/year.html without a display width, which has the same meaning.",
            "MySQL 8.0 does not support the 2-digit <code>YEAR(2)</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/year.html data type permitted in older versions of MySQL. For instructions on converting to 4-digit <code>YEAR</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/year.html, see 2-Digit YEAR(2) Limitations and Migrating to 4-Digit YEAR&LINK&https://dev.mysql.com/doc/refman/5.7/en/migrating-from-year2.html, in MySQL 5.7 Reference Manual&LINK&https://dev.mysql.com/doc/refman/5.7/en/.",
            "MySQL displays <code>YEAR</code> values in <code>YYYY</code> format, with a range of <code>1901</code> to <code>2155</code>, and <code>0000</code>.",
            "<code>YEAR</code> accepts input values in a variety of formats:",
            "As 1- or 2-digit strings in the range <code>'0'</code> to <code>'99'</code>. MySQL converts values in the ranges <code>'0'</code> to <code>'69'</code> and <code>'70'</code> to <code>'99'</code> to <code>YEAR</code> values in the ranges <code>2000</code> to <code>2069</code> and <code>1970</code> to <code>1999</code>.",
            "As 1- or 2-digit numbers in the range <code>0</code> to <code>99</code>. MySQL converts values in the ranges <code>1</code> to <code>69</code> and <code>70</code> to <code>99</code> to <code>YEAR</code> values in the ranges <code>2001</code> to <code>2069</code> and <code>1970</code> to <code>1999</code>. The result of inserting a numeric <code>0</code> has a display value of <code>0000</code> and an internal value of <code>0000</code>. To insert zero and have it be interpreted as <code>2000</code>, specify it as a string <code>'0'</code> or <code>'00'</code>.",
            "As the result of functions that return a value that is acceptable in <code>YEAR</code> context, such as <code>NOW()</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html#function_now.",
            "If strict SQL mode is not enabled, MySQL converts invalid <code>YEAR</code> values to <code>0000</code>. In strict SQL mode, attempting to insert an invalid <code>YEAR</code> value produces an error.",
            "For <code>YEAR</code>, the rules are the same, with this exception: A numeric <code>00</code> inserted into <code>YEAR</code> results in <code>0000</code> rather than <code>2000</code>. To specify zero for <code>YEAR</code> and have it be interpreted as <code>2000</code>, specify it as a string <code>'0'</code> or <code>'00'</code>.",
            "<code>ORDER BY</code> properly sorts <code>YEAR</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/year.html values that have 2-digit years.",
            "Some functions like <code>MIN()</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/aggregate-functions.html#function_min and <code>MAX()</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/aggregate-functions.html#function_max convert a <code>YEAR</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/year.html to a number. This means that a value with a 2-digit year does not work properly with these functions. The fix in this case is to convert the <code>YEAR</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/year.html to 4-digit year format."
        ],
        "Tree": [
            "(dataType YEAR)",
            "(dataType YEAR (lengthOneDimension ( )))",
            "(convertedDataType YEAR)",
            "(convertedDataType YEAR (lengthOneDimension ( )))"
        ]
    },
    {
        "Type": [
            "NATIONAL CHAR ( M ) CHARACTER SET charset_name COLLATE collation_name",
            "NATIONAL CHAR ( M ) COLLATE collation_name",
            "NATIONAL CHAR ( M ) CHARACTER SET charset_name",
            "CHAR ( M ) CHARACTER SET charset_name COLLATE collation_name",
            "NATIONAL CHAR CHARACTER SET charset_name COLLATE collation_name",
            "CHAR CHARACTER SET charset_name COLLATE collation_name",
            "CHAR ( M ) COLLATE collation_name",
            "CHAR ( M ) CHARACTER SET charset_name",
            "NATIONAL CHAR ( M )",
            "NATIONAL CHAR CHARACTER SET charset_name",
            "NATIONAL CHAR ( M ) COLLATE collation_name",
            "NATIONAL CHAR",
            "CHAR ( M )",
            "CHAR CHARACTER SET charset_name",
            "CHAR COLLATE collation_name",
            "CHAR"
        ],
        "Description": [
            "For definitions of character string columns (<link><code>CHAR</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/char.html</link>, <link><code>VARCHAR</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/char.html</link>, and the <link><code>TEXT</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/blob.html</link> types), MySQL interprets length specifications in character units.",
            "Column definitions for character string data types <link><code>CHAR</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/char.html</link>, <link><code>VARCHAR</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/char.html</link>, the <link><code>TEXT</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/blob.html</link> types, <link><code>ENUM</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/enum.html</link>, <link><code>SET</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/set.html</link>, and any synonyms) can specify the column character set and collation:\n <code>CHARACTER SET</code> specifies the character set. If desired, a collation for the character set can be specified with the <code>COLLATE</code> attribute, along with any other attributes. For example:\n <code>CREATE TABLE t\n(\n    c1 VARCHAR(20) CHARACTER SET utf8mb4,\n    c2 TEXT CHARACTER SET latin1 COLLATE latin1_general_cs\n);</code>\n This table definition creates a column named <code>c1</code> that has a character set of <code>utf8mb4</code> with the default collation for that character set, and a column named <code>c2</code> that has a character set of <code>latin1</code> and a case-sensitive (<code>_cs</code>) collation.\n The rules for assigning the character set and collation when either or both of <code>CHARACTER SET</code> and the <code>COLLATE</code> attribute are missing are described in <link>Section 12.3.5, \u201cColumn Character Set and Collation\u201d&LINK&https://dev.mysql.com/doc/refman/8.0/en/charset-column.html</link>.\n <code>CHARSET</code> is a synonym for <code>CHARACTER SET</code>.\n Specifying the <code>CHARACTER SET binary</code> attribute for a character string data type causes the column to be created as the corresponding binary string data type: <link><code>CHAR</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/char.html</link> becomes <link><code>BINARY</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/binary-varbinary.html</link>, <link><code>VARCHAR</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/char.html</link> becomes <link><code>VARBINARY</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/binary-varbinary.html</link>, and <link><code>TEXT</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/blob.html</link> becomes <link><code>BLOB</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/blob.html</link>. For the <link><code>ENUM</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/enum.html</link> and <link><code>SET</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/set.html</link> data types, this does not occur; they are created as declared. Suppose that you specify a table using this definition:\n <code>CREATE TABLE t\n(\n  c1 VARCHAR(10) CHARACTER SET binary,\n  c2 TEXT CHARACTER SET binary,\n  c3 ENUM('a','b','c') CHARACTER SET binary\n);</code>\n The resulting table has this definition:\n <code>CREATE TABLE t\n(\n  c1 VARBINARY(10),\n  c2 BLOB,\n  c3 ENUM('a','b','c') CHARACTER SET binary\n);</code>\n The <code>BINARY</code> attribute is a nonstandard MySQL extension that is shorthand for specifying the binary (<code>_bin</code>) collation of the column character set (or of the table default character set if no column character set is specified). In this case, comparison and sorting are based on numeric character code values. Suppose that you specify a table using this definition:\n <code>CREATE TABLE t\n(\n  c1 VARCHAR(10) CHARACTER SET latin1 BINARY,\n  c2 TEXT BINARY\n) CHARACTER SET utf8mb4;</code>\n The resulting table has this definition:\n <code>CREATE TABLE t (\n  c1 VARCHAR(10) CHARACTER SET latin1 COLLATE latin1_bin,\n  c2 TEXT CHARACTER SET utf8mb4 COLLATE utf8mb4_bin\n) CHARACTER SET utf8mb4;</code>\n In MySQL 8.0, this nonstandard use of the <code>BINARY</code> attribute is ambiguous because the <code>utf8mb4</code> character set has multiple <code>_bin</code> collations. As of MySQL 8.0.17, the <code>BINARY</code> attribute is deprecated and you should expect support for it to be removed in a future version of MySQL. Applications should be adjusted to use an explicit <code>_bin</code> collation instead.\n The use of <code>BINARY</code> to specify a data type or character set remains unchanged.\n The <code>ASCII</code> attribute is shorthand for <code>CHARACTER SET latin1</code>. Supported in older MySQL releases, <code>ASCII</code> is deprecated in MySQL 8.0.28 and later; use <code>CHARACTER SET</code> instead.\n The <code>UNICODE</code> attribute is shorthand for <code>CHARACTER SET ucs2</code>. Supported in older MySQL releases, <code>UNICODE</code> is deprecated in MySQL 8.0.28 and later; use <code>CHARACTER SET</code> instead.\n Character column comparison and sorting are based on the collation assigned to the column. For the <link><code>CHAR</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/char.html</link>, <link><code>VARCHAR</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/char.html</link>, <link><code>TEXT</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/blob.html</link>, <link><code>ENUM</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/enum.html</link>, and <link><code>SET</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/set.html</link> data types, you can declare a column with a binary (<code>_bin</code>) collation or the <code>BINARY</code> attribute to cause comparison and sorting to use the underlying character code values rather than a lexical ordering.\n For additional information about use of character sets in MySQL, see <link>Chapter 12, Character Sets, Collations, Unicode&LINK&https://dev.mysql.com/doc/refman/8.0/en/charset.html</link>.\n",
            " A fixed-length string that is always right-padded with spaces to the specified length when stored. <code>M</code> represents the column length in characters. The range of <code>M</code> is 0 to 255. If <code>M</code> is omitted, the length is 1.\nNote\n Trailing spaces are removed when <link><code>CHAR</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/char.html</link> values are retrieved unless the <link><code>PAD_CHAR_TO_FULL_LENGTH</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/sql-mode.html#sqlmode_pad_char_to_full_length</link> SQL mode is enabled.\n <link><code>CHAR</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/char.html</link> is shorthand for <link><code>CHARACTER</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/char.html</link>. <link><code>NATIONAL CHAR</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/char.html</link> (or its equivalent short form, <link><code>NCHAR</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/char.html</link>) is the standard SQL way to define that a <link><code>CHAR</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/char.html</link> column should use some predefined character set. MySQL uses <code>utf8mb3</code> as this predefined character set. <link>Section 12.3.7, \u201cThe National Character Set\u201d&LINK&https://dev.mysql.com/doc/refman/8.0/en/charset-national.html</link>.\n The <link><code>CHAR BYTE</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/binary-varbinary.html</link> data type is an alias for the <link><code>BINARY</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/binary-varbinary.html</link> data type. This is a compatibility feature.\n MySQL permits you to create a column of type <code>CHAR(0)</code>. This is useful primarily when you must be compliant with old applications that depend on the existence of a column but that do not actually use its value. <code>CHAR(0)</code> is also quite nice when you need a column that can take only two values: A column that is defined as <code>CHAR(0) NULL</code> occupies only one bit and can take only the values <code>NULL</code> and <code>''</code> (the empty string).\n"
        ],
        "Links": [
            "https://dev.mysql.com/doc/refman/8.0/en/char.html"
        ],
        "Compensate": [
            "The <code>CHAR</code> and <code>VARCHAR</code> types are similar, but differ in the way they are stored and retrieved. They also differ in maximum length and in whether trailing spaces are retained.",
            "The <code>CHAR</code> and <code>VARCHAR</code> types are declared with a length that indicates the maximum number of characters you want to store. For example, <code>CHAR(30)</code> can hold up to 30 characters.",
            "The length of a <code>CHAR</code> column is fixed to the length that you declare when you create the table. The length can be any value from 0 to 255. When <code>CHAR</code> values are stored, they are right-padded with spaces to the specified length. When <code>CHAR</code> values are retrieved, trailing spaces are removed unless the <code>PAD_CHAR_TO_FULL_LENGTH</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/sql-mode.html#sqlmode_pad_char_to_full_length SQL mode is enabled.",
            "In contrast to <code>CHAR</code>, <code>VARCHAR</code> values are stored as a 1-byte or 2-byte length prefix plus data. The length prefix indicates the number of bytes in the value. A column uses one length byte if values require no more than 255 bytes, two length bytes if values may require more than 255 bytes.",
            "If strict SQL mode is not enabled and you assign a value to a <code>CHAR</code> or <code>VARCHAR</code> column that exceeds the column's maximum length, the value is truncated to fit and a warning is generated. For truncation of nonspace characters, you can cause an error to occur (rather than a warning) and suppress insertion of the value by using strict SQL mode. See Section 7.1.11, \u201cServer SQL Modes\u201d&LINK&https://dev.mysql.com/doc/refman/8.0/en/sql-mode.html.",
            "For <code>VARCHAR</code> columns, trailing spaces in excess of the column length are truncated prior to insertion and a warning is generated, regardless of the SQL mode in use. For <code>CHAR</code> columns, truncation of excess trailing spaces from inserted values is performed silently regardless of the SQL mode.",
            "The following table illustrates the differences between <code>CHAR</code> and <code>VARCHAR</code> by showing the result of storing various string values into <code>CHAR(4)</code> and <code>VARCHAR(4)</code> columns (assuming that the column uses a single-byte character set such as <code>latin1</code>).",
            "<code>InnoDB</code> encodes fixed-length fields greater than or equal to 768 bytes in length as variable-length fields, which can be stored off-page. For example, a <code>CHAR(255)</code> column can exceed 768 bytes if the maximum byte length of the character set is greater than 3, as it is with <code>utf8mb4</code>.",
            "If a given value is stored into the <code>CHAR(4)</code> and <code>VARCHAR(4)</code> columns, the values retrieved from the columns are not always the same because trailing spaces are removed from <code>CHAR</code> columns upon retrieval. The following example illustrates this difference:",
            "<code>mysql> CREATE TABLE vc (v VARCHAR(4), c CHAR(4));\nQuery OK, 0 rows affected (0.01 sec)\nmysql> INSERT INTO vc VALUES ('ab ', 'ab ');\nQuery OK, 1 row affected (0.00 sec)\nmysql> SELECT CONCAT('(', v, ')'), CONCAT('(', c, ')') FROM vc;\n+---------------------+---------------------+\n| CONCAT('(', v, ')') | CONCAT('(', c, ')') |\n+---------------------+---------------------+\n| (ab ) | (ab) |\n+---------------------+---------------------+\n1 row in set (0.06 sec)</code>",
            "Values in <code>CHAR</code>, <code>VARCHAR</code>, and <code>TEXT</code> columns are sorted and compared according to the character set collation assigned to the column.",
            "For nonbinary strings (<code>CHAR</code>, <code>VARCHAR</code>, and <code>TEXT</code> values), the string collation pad attribute determines treatment in comparisons of trailing spaces at the end of strings. <code>NO PAD</code> collations treat trailing spaces as significant in comparisons, like any other character. <code>PAD SPACE</code> collations treat trailing spaces as insignificant in comparisons; strings are compared without regard to trailing spaces. See Trailing Space Handling in Comparisons&LINK&https://dev.mysql.com/doc/refman/8.0/en/charset-binary-collations.html#charset-binary-collations-trailing-space-comparisons. The server SQL mode has no effect on comparison behavior with respect to trailing spaces."
        ],
        "Tree": [
            "(columnDefinition (dataType NATIONAL CHAR (lengthOneDimension ( )) (charSet CHARACTER SET)) (columnConstraint COLLATE))",
            "(columnDefinition (dataType NATIONAL CHAR (lengthOneDimension ( ))) (columnConstraint COLLATE))",
            "(columnDefinition (dataType CHAR (lengthOneDimension ( )) (charSet CHARACTER SET)) (columnConstraint COLLATE))",
            "(dataType CHAR (lengthOneDimension ( )) (charSet CHARACTER SET) COLLATE)",
            "(columnDefinition (dataType NATIONAL CHAR (charSet CHARACTER SET)) (columnConstraint COLLATE))",
            "(dataType CHAR (charSet CHARACTER SET) COLLATE)",
            "(dataType CHAR (lengthOneDimension ( )) COLLATE)",
            "(dataType CHAR (lengthOneDimension ( )) (charSet CHARACTER SET))",
            "(dataType NATIONAL CHAR (lengthOneDimension ( )))",
            "(columnDefinition (dataType NATIONAL CHAR (charSet CHARACTER SET)))",
            "(columnDefinition (dataType NATIONAL CHAR (lengthOneDimension ( ))) (columnConstraint COLLATE))",
            "(dataType NATIONAL CHAR)",
            "(dataType CHAR (lengthOneDimension ( )))",
            "(dataType CHAR (charSet CHARACTER SET))",
            "(dataType CHAR COLLATE)",
            "(dataType CHAR)"
        ]
    },
    {
        "Type": [
            "NATIONAL VARCHAR ( M ) CHARACTER SET charset_name COLLATE collation_name",
            "NATIONAL VARCHAR ( M ) COLLATE collation_name",
            "NATIONAL VARCHAR ( M ) CHARACTER SET charset_name",
            "VARCHAR ( M ) CHARACTER SET charset_name COLLATE collation_name",
            "NATIONAL VARCHAR CHARACTER SET charset_name COLLATE collation_name",
            "VARCHAR CHARACTER SET charset_name COLLATE collation_name",
            "VARCHAR ( M ) COLLATE collation_name",
            "VARCHAR ( M ) CHARACTER SET charset_name",
            "NATIONAL VARCHAR ( M )",
            "NATIONAL VARCHAR CHARACTER SET charset_name",
            "NATIONAL VARCHAR ( M ) COLLATE collation_name",
            "NATIONAL VARCHAR",
            "VARCHAR ( M )",
            "VARCHAR CHARACTER SET charset_name",
            "VARCHAR COLLATE collation_name",
            "VARCHAR"
        ],
        "Description": [
                "For definitions of character string columns (<link><code>CHAR</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/char.html</link>, <link><code>VARCHAR</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/char.html</link>, and the <link><code>TEXT</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/blob.html</link> types), MySQL interprets length specifications in character units.",
                "Column definitions for character string data types <link><code>CHAR</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/char.html</link>, <link><code>VARCHAR</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/char.html</link>, the <link><code>TEXT</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/blob.html</link> types, <link><code>ENUM</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/enum.html</link>, <link><code>SET</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/set.html</link>, and any synonyms) can specify the column character set and collation:\n <code>CHARACTER SET</code> specifies the character set. If desired, a collation for the character set can be specified with the <code>COLLATE</code> attribute, along with any other attributes. For example:\n <code>CREATE TABLE t\n(\n    c1 VARCHAR(20) CHARACTER SET utf8mb4,\n    c2 TEXT CHARACTER SET latin1 COLLATE latin1_general_cs\n);</code>\n This table definition creates a column named <code>c1</code> that has a character set of <code>utf8mb4</code> with the default collation for that character set, and a column named <code>c2</code> that has a character set of <code>latin1</code> and a case-sensitive (<code>_cs</code>) collation.\n The rules for assigning the character set and collation when either or both of <code>CHARACTER SET</code> and the <code>COLLATE</code> attribute are missing are described in <link>Section 12.3.5, \u201cColumn Character Set and Collation\u201d&LINK&https://dev.mysql.com/doc/refman/8.0/en/charset-column.html</link>.\n <code>CHARSET</code> is a synonym for <code>CHARACTER SET</code>.\n Specifying the <code>CHARACTER SET binary</code> attribute for a character string data type causes the column to be created as the corresponding binary string data type: <link><code>CHAR</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/char.html</link> becomes <link><code>BINARY</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/binary-varbinary.html</link>, <link><code>VARCHAR</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/char.html</link> becomes <link><code>VARBINARY</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/binary-varbinary.html</link>, and <link><code>TEXT</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/blob.html</link> becomes <link><code>BLOB</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/blob.html</link>. For the <link><code>ENUM</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/enum.html</link> and <link><code>SET</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/set.html</link> data types, this does not occur; they are created as declared. Suppose that you specify a table using this definition:\n <code>CREATE TABLE t\n(\n  c1 VARCHAR(10) CHARACTER SET binary,\n  c2 TEXT CHARACTER SET binary,\n  c3 ENUM('a','b','c') CHARACTER SET binary\n);</code>\n The resulting table has this definition:\n <code>CREATE TABLE t\n(\n  c1 VARBINARY(10),\n  c2 BLOB,\n  c3 ENUM('a','b','c') CHARACTER SET binary\n);</code>\n The <code>BINARY</code> attribute is a nonstandard MySQL extension that is shorthand for specifying the binary (<code>_bin</code>) collation of the column character set (or of the table default character set if no column character set is specified). In this case, comparison and sorting are based on numeric character code values. Suppose that you specify a table using this definition:\n <code>CREATE TABLE t\n(\n  c1 VARCHAR(10) CHARACTER SET latin1 BINARY,\n  c2 TEXT BINARY\n) CHARACTER SET utf8mb4;</code>\n The resulting table has this definition:\n <code>CREATE TABLE t (\n  c1 VARCHAR(10) CHARACTER SET latin1 COLLATE latin1_bin,\n  c2 TEXT CHARACTER SET utf8mb4 COLLATE utf8mb4_bin\n) CHARACTER SET utf8mb4;</code>\n In MySQL 8.0, this nonstandard use of the <code>BINARY</code> attribute is ambiguous because the <code>utf8mb4</code> character set has multiple <code>_bin</code> collations. As of MySQL 8.0.17, the <code>BINARY</code> attribute is deprecated and you should expect support for it to be removed in a future version of MySQL. Applications should be adjusted to use an explicit <code>_bin</code> collation instead.\n The use of <code>BINARY</code> to specify a data type or character set remains unchanged.\n The <code>ASCII</code> attribute is shorthand for <code>CHARACTER SET latin1</code>. Supported in older MySQL releases, <code>ASCII</code> is deprecated in MySQL 8.0.28 and later; use <code>CHARACTER SET</code> instead.\n The <code>UNICODE</code> attribute is shorthand for <code>CHARACTER SET ucs2</code>. Supported in older MySQL releases, <code>UNICODE</code> is deprecated in MySQL 8.0.28 and later; use <code>CHARACTER SET</code> instead.\n Character column comparison and sorting are based on the collation assigned to the column. For the <link><code>CHAR</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/char.html</link>, <link><code>VARCHAR</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/char.html</link>, <link><code>TEXT</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/blob.html</link>, <link><code>ENUM</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/enum.html</link>, and <link><code>SET</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/set.html</link> data types, you can declare a column with a binary (<code>_bin</code>) collation or the <code>BINARY</code> attribute to cause comparison and sorting to use the underlying character code values rather than a lexical ordering.\n For additional information about use of character sets in MySQL, see <link>Chapter 12, Character Sets, Collations, Unicode&LINK&https://dev.mysql.com/doc/refman/8.0/en/charset.html</link>.\n",
                " A variable-length string. <code>M</code> represents the maximum column length in characters. The range of <code>M</code> is 0 to 65,535. The effective maximum length of a <link><code>VARCHAR</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/char.html</link> is subject to the maximum row size (65,535 bytes, which is shared among all columns) and the character set used. For example, <code>utf8mb3</code> characters can require up to three bytes per character, so a <link><code>VARCHAR</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/char.html</link> column that uses the <code>utf8mb3</code> character set can be declared to be a maximum of 21,844 characters. See <link>Section 10.4.7, \u201cLimits on Table Column Count and Row Size\u201d&LINK&https://dev.mysql.com/doc/refman/8.0/en/column-count-limit.html</link>.\n MySQL stores <link><code>VARCHAR</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/char.html</link> values as a 1-byte or 2-byte length prefix plus data. The length prefix indicates the number of bytes in the value. A <link><code>VARCHAR</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/char.html</link> column uses one length byte if values require no more than 255 bytes, two length bytes if values may require more than 255 bytes.\nNote\n MySQL follows the standard SQL specification, and does not remove trailing spaces from <link><code>VARCHAR</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/char.html</link> values.\n <link><code>VARCHAR</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/char.html</link> is shorthand for <link><code>CHARACTER VARYING</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/char.html</link>. <link><code>NATIONAL VARCHAR</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/char.html</link> is the standard SQL way to define that a <link><code>VARCHAR</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/char.html</link> column should use some predefined character set. MySQL uses <code>utf8mb3</code> as this predefined character set. <link>Section 12.3.7, \u201cThe National Character Set\u201d&LINK&https://dev.mysql.com/doc/refman/8.0/en/charset-national.html</link>. <link><code>NVARCHAR</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/char.html</link> is shorthand for <link><code>NATIONAL VARCHAR</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/char.html</link>.\n"
        ],
        "Links": [
            "https://dev.mysql.com/doc/refman/8.0/en/char.html"
        ],
        "Compensate": [
            "The <code>CHAR</code> and <code>VARCHAR</code> types are similar, but differ in the way they are stored and retrieved. They also differ in maximum length and in whether trailing spaces are retained.",
            "The <code>CHAR</code> and <code>VARCHAR</code> types are declared with a length that indicates the maximum number of characters you want to store. For example, <code>CHAR(30)</code> can hold up to 30 characters.",
            "Values in <code>VARCHAR</code> columns are variable-length strings. The length can be specified as a value from 0 to 65,535. The effective maximum length of a <code>VARCHAR</code> is subject to the maximum row size (65,535 bytes, which is shared among all columns) and the character set used. See Section 10.4.7, \u201cLimits on Table Column Count and Row Size\u201d&LINK&https://dev.mysql.com/doc/refman/8.0/en/column-count-limit.html.",
            "In contrast to <code>CHAR</code>, <code>VARCHAR</code> values are stored as a 1-byte or 2-byte length prefix plus data. The length prefix indicates the number of bytes in the value. A column uses one length byte if values require no more than 255 bytes, two length bytes if values may require more than 255 bytes.",
            "If strict SQL mode is not enabled and you assign a value to a <code>CHAR</code> or <code>VARCHAR</code> column that exceeds the column's maximum length, the value is truncated to fit and a warning is generated. For truncation of nonspace characters, you can cause an error to occur (rather than a warning) and suppress insertion of the value by using strict SQL mode. See Section 7.1.11, \u201cServer SQL Modes\u201d&LINK&https://dev.mysql.com/doc/refman/8.0/en/sql-mode.html.",
            "For <code>VARCHAR</code> columns, trailing spaces in excess of the column length are truncated prior to insertion and a warning is generated, regardless of the SQL mode in use. For <code>CHAR</code> columns, truncation of excess trailing spaces from inserted values is performed silently regardless of the SQL mode.",
            "<code>VARCHAR</code> values are not padded when they are stored. Trailing spaces are retained when values are stored and retrieved, in conformance with standard SQL.",
            "The following table illustrates the differences between <code>CHAR</code> and <code>VARCHAR</code> by showing the result of storing various string values into <code>CHAR(4)</code> and <code>VARCHAR(4)</code> columns (assuming that the column uses a single-byte character set such as <code>latin1</code>).",
            "If a given value is stored into the <code>CHAR(4)</code> and <code>VARCHAR(4)</code> columns, the values retrieved from the columns are not always the same because trailing spaces are removed from <code>CHAR</code> columns upon retrieval. The following example illustrates this difference:",
            "<code>mysql> CREATE TABLE vc (v VARCHAR(4), c CHAR(4));\nQuery OK, 0 rows affected (0.01 sec)\nmysql> INSERT INTO vc VALUES ('ab ', 'ab ');\nQuery OK, 1 row affected (0.00 sec)\nmysql> SELECT CONCAT('(', v, ')'), CONCAT('(', c, ')') FROM vc;\n+---------------------+---------------------+\n| CONCAT('(', v, ')') | CONCAT('(', c, ')') |\n+---------------------+---------------------+\n| (ab ) | (ab) |\n+---------------------+---------------------+\n1 row in set (0.06 sec)</code>",
            "Values in <code>CHAR</code>, <code>VARCHAR</code>, and <code>TEXT</code> columns are sorted and compared according to the character set collation assigned to the column.",
            "For nonbinary strings (<code>CHAR</code>, <code>VARCHAR</code>, and <code>TEXT</code> values), the string collation pad attribute determines treatment in comparisons of trailing spaces at the end of strings. <code>NO PAD</code> collations treat trailing spaces as significant in comparisons, like any other character. <code>PAD SPACE</code> collations treat trailing spaces as insignificant in comparisons; strings are compared without regard to trailing spaces. See Trailing Space Handling in Comparisons&LINK&https://dev.mysql.com/doc/refman/8.0/en/charset-binary-collations.html#charset-binary-collations-trailing-space-comparisons. The server SQL mode has no effect on comparison behavior with respect to trailing spaces."
        ],
        "Tree": [
            "(columnDefinition (dataType NATIONAL VARCHAR (lengthOneDimension ( )) (charSet CHARACTER SET)) (columnConstraint COLLATE))",
            "(columnDefinition (dataType NATIONAL VARCHAR (lengthOneDimension ( ))) (columnConstraint COLLATE))",
            "(columnDefinition (dataType NATIONAL VARCHAR (lengthOneDimension ( )) (charSet CHARACTER SET)))",
            "(dataType VARCHAR (lengthOneDimension ( )) (charSet CHARACTER SET) COLLATE)",
            "(columnDefinition (dataType NATIONAL VARCHAR (charSet CHARACTER SET)) (columnConstraint COLLATE))",
            "(dataType VARCHAR (charSet CHARACTER SET) COLLATE)",
            "(dataType VARCHAR (lengthOneDimension ( )) COLLATE)",
            "(dataType VARCHAR (lengthOneDimension ( )) (charSet CHARACTER SET))",
            "(dataType NATIONAL VARCHAR (lengthOneDimension ( )))",
            "(columnDefinition (dataType NATIONAL VARCHAR (lengthOneDimension ( ))))",
            "(columnDefinition (dataType NATIONAL VARCHAR (lengthOneDimension ( ))) (columnConstraint COLLATE))",
            "(dataType NATIONAL VARCHAR)",
            "(dataType VARCHAR (lengthOneDimension ( )))",
            "(dataType VARCHAR (charSet CHARACTER SET))",
            "(dataType VARCHAR COLLATE)",
            "(dataType VARCHAR)"
        ]
    },
    {
        "Type": [
            "BINARY ( M )",
            "BINARY",
            "BINARY ( M )",
            "BINARY"
        ],
        "Description": [
                "For definitions of binary string columns (<link><code>BINARY</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/binary-varbinary.html</link>, <link><code>VARBINARY</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/binary-varbinary.html</link>, and the <link><code>BLOB</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/blob.html</link> types), MySQL interprets length specifications in byte units.",
                " The <link><code>BINARY</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/binary-varbinary.html</link> type is similar to the <link><code>CHAR</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/char.html</link> type, but stores binary byte strings rather than nonbinary character strings. An optional length <code>M</code> represents the column length in bytes. If omitted, <code>M</code> defaults to 1.\n"
        ],
        "Links": [
            "https://dev.mysql.com/doc/refman/8.0/en/binary-varbinary.html"
        ],
        "Compensate": [
            "The <code>BINARY</code> and <code>VARBINARY</code> types are similar to <code>CHAR</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/char.html and <code>VARCHAR</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/char.html, except that they store binary strings rather than nonbinary strings. That is, they store byte strings rather than character strings. This means they have the <code>binary</code> character set and collation, and comparison and sorting are based on the numeric values of the bytes in the values.",
            "The permissible maximum length is the same for <code>BINARY</code> and <code>VARBINARY</code> as it is for <code>CHAR</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/char.html and <code>VARCHAR</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/char.html, except that the length for <code>BINARY</code> and <code>VARBINARY</code> is measured in bytes rather than characters.",
            "The <code>BINARY</code> and <code>VARBINARY</code> data types are distinct from the <code>CHAR BINARY</code> and <code>VARCHAR BINARY</code> data types. For the latter types, the <code>BINARY</code> attribute does not cause the column to be treated as a binary string column. Instead, it causes the binary (<code>_bin</code>) collation for the column character set (or the table default character set if no column character set is specified) to be used, and the column itself stores nonbinary character strings rather than binary byte strings. For example, if the default character set is <code>utf8mb4</code>, <code>CHAR(5) BINARY</code> is treated as <code>CHAR(5) CHARACTER SET utf8mb4 COLLATE utf8mb4_bin</code>. This differs from <code>BINARY(5)</code>, which stores 5-byte binary strings that have the <code>binary</code> character set and collation. For information about the differences between the <code>binary</code> collation of the <code>binary</code> character set and the <code>_bin</code> collations of nonbinary character sets, see Section 12.8.5, \u201cThe binary Collation Compared to _bin Collations\u201d&LINK&https://dev.mysql.com/doc/refman/8.0/en/charset-binary-collations.html.",
            "If strict SQL mode is not enabled and you assign a value to a <code>BINARY</code> or <code>VARBINARY</code> column that exceeds the column's maximum length, the value is truncated to fit and a warning is generated. For cases of truncation, to cause an error to occur (rather than a warning) and suppress insertion of the value, use strict SQL mode. See Section 7.1.11, \u201cServer SQL Modes\u201d&LINK&https://dev.mysql.com/doc/refman/8.0/en/sql-mode.html.",
            "When <code>BINARY</code> values are stored, they are right-padded with the pad value to the specified length. The pad value is <code>0x00</code> (the zero byte). Values are right-padded with <code>0x00</code> for inserts, and no trailing bytes are removed for retrievals. All bytes are significant in comparisons, including <code>ORDER BY</code> and <code>DISTINCT</code> operations. <code>0x00</code> and space differ in comparisons, with <code>0x00</code> sorting before space.",
            "Example: For a <code>BINARY(3)</code> column, <code>'a '</code> becomes <code>'a \\0'</code> when inserted. <code>'a\\0'</code> becomes <code>'a\\0\\0'</code> when inserted. Both inserted values remain unchanged for retrievals.",
            "You should consider the preceding padding and stripping characteristics carefully if you plan to use the <code>BINARY</code> data type for storing binary data and you require that the value retrieved be exactly the same as the value stored. The following example illustrates how <code>0x00</code>-padding of <code>BINARY</code> values affects column value comparisons:",
            "<code>mysql> CREATE TABLE t (c BINARY(3));\nQuery OK, 0 rows affected (0.01 sec)\nmysql> INSERT INTO t SET c = 'a';\nQuery OK, 1 row affected (0.01 sec)\nmysql> SELECT HEX(c), c = 'a', c = 'a\\0\\0' from t;\n+--------+---------+-------------+\n| HEX(c) | c = 'a' | c = 'a\\0\\0' |\n+--------+---------+-------------+\n| 610000 | 0 | 1 |\n+--------+---------+-------------+\n1 row in set (0.09 sec)</code>",
            "Within the mysql&LINK&https://dev.mysql.com/doc/refman/8.0/en/mysql.html client, binary strings display using hexadecimal notation, depending on the value of the <code>--binary-as-hex</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/mysql-command-options.html#option_mysql_binary-as-hex. For more information about that option, see Section 6.5.1, \u201cmysql \u2014 The MySQL Command-Line Client\u201d&LINK&https://dev.mysql.com/doc/refman/8.0/en/mysql.html."
        ],
        "Tree": [
            "(dataType BINARY (lengthOneDimension ( )))",
            "(dataType BINARY)",
            "(convertedDataType BINARY (lengthOneDimension ( )))",
            "(convertedDataType BINARY)"
        ]
    },
    {
        "Type": [
            "VARBINARY ( M )"
        ],
        "Description": [
                "For definitions of binary string columns (<link><code>BINARY</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/binary-varbinary.html</link>, <link><code>VARBINARY</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/binary-varbinary.html</link>, and the <link><code>BLOB</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/blob.html</link> types), MySQL interprets length specifications in byte units.",
                " The <link><code>VARBINARY</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/binary-varbinary.html</link> type is similar to the <link><code>VARCHAR</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/char.html</link> type, but stores binary byte strings rather than nonbinary character strings. <code>M</code> represents the maximum column length in bytes.\n"
        ],
        "Links": [
            "https://dev.mysql.com/doc/refman/8.0/en/binary-varbinary.html"
        ],
        "Compensate": [
            "The <code>BINARY</code> and <code>VARBINARY</code> types are similar to <code>CHAR</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/char.html and <code>VARCHAR</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/char.html, except that they store binary strings rather than nonbinary strings. That is, they store byte strings rather than character strings. This means they have the <code>binary</code> character set and collation, and comparison and sorting are based on the numeric values of the bytes in the values.",
            "The permissible maximum length is the same for <code>BINARY</code> and <code>VARBINARY</code> as it is for <code>CHAR</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/char.html and <code>VARCHAR</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/char.html, except that the length for <code>BINARY</code> and <code>VARBINARY</code> is measured in bytes rather than characters.",
            "The <code>BINARY</code> and <code>VARBINARY</code> data types are distinct from the <code>CHAR BINARY</code> and <code>VARCHAR BINARY</code> data types. For the latter types, the <code>BINARY</code> attribute does not cause the column to be treated as a binary string column. Instead, it causes the binary (<code>_bin</code>) collation for the column character set (or the table default character set if no column character set is specified) to be used, and the column itself stores nonbinary character strings rather than binary byte strings. For example, if the default character set is <code>utf8mb4</code>, <code>CHAR(5) BINARY</code> is treated as <code>CHAR(5) CHARACTER SET utf8mb4 COLLATE utf8mb4_bin</code>. This differs from <code>BINARY(5)</code>, which stores 5-byte binary strings that have the <code>binary</code> character set and collation. For information about the differences between the <code>binary</code> collation of the <code>binary</code> character set and the <code>_bin</code> collations of nonbinary character sets, see Section 12.8.5, \u201cThe binary Collation Compared to _bin Collations\u201d&LINK&https://dev.mysql.com/doc/refman/8.0/en/charset-binary-collations.html.",
            "If strict SQL mode is not enabled and you assign a value to a <code>BINARY</code> or <code>VARBINARY</code> column that exceeds the column's maximum length, the value is truncated to fit and a warning is generated. For cases of truncation, to cause an error to occur (rather than a warning) and suppress insertion of the value, use strict SQL mode. See Section 7.1.11, \u201cServer SQL Modes\u201d&LINK&https://dev.mysql.com/doc/refman/8.0/en/sql-mode.html.",
            "For <code>VARBINARY</code>, there is no padding for inserts and no bytes are stripped for retrievals. All bytes are significant in comparisons, including <code>ORDER BY</code> and <code>DISTINCT</code> operations. <code>0x00</code> and space differ in comparisons, with <code>0x00</code> sorting before space.",
            "If the value retrieved must be the same as the value specified for storage with no padding, it might be preferable to use <code>VARBINARY</code> or one of the <code>BLOB</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/blob.html data types instead."
        ],
        "Tree": [
            "(dataType VARBINARY (lengthOneDimension ( )))"
        ]
    },
    {
        "Type": [
            "TINYBLOB"
        ],
        "Description": [
                "For definitions of binary string columns (<link><code>BINARY</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/binary-varbinary.html</link>, <link><code>VARBINARY</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/binary-varbinary.html</link>, and the <link><code>BLOB</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/blob.html</link> types), MySQL interprets length specifications in byte units.",
                " A <link><code>BLOB</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/blob.html</link> column with a maximum length of 255 (28 \u2212 1) bytes. Each <link><code>TINYBLOB</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/blob.html</link> value is stored using a 1-byte length prefix that indicates the number of bytes in the value.\n"
        ],
        "Links": [
            "https://dev.mysql.com/doc/refman/8.0/en/blob.html"
        ],
        "Compensate": [
            "A <code>BLOB</code> is a binary large object that can hold a variable amount of data. The four <code>BLOB</code> types are <code>TINYBLOB</code>, <code>BLOB</code>, <code>MEDIUMBLOB</code>, and <code>LONGBLOB</code>. These differ only in the maximum length of the values they can hold. The four <code>TEXT</code> types are <code>TINYTEXT</code>, <code>TEXT</code>, <code>MEDIUMTEXT</code>, and <code>LONGTEXT</code>. These correspond to the four <code>BLOB</code> types and have the same maximum lengths and storage requirements. See Section 13.7, \u201cData Type Storage Requirements\u201d&LINK&https://dev.mysql.com/doc/refman/8.0/en/storage-requirements.html."
        ],
        "Tree": [
            "(dataType TINYBLOB)"
        ]
    },
    {
        "Type": [
            "TINYTEXT CHARACTER SET charset_name COLLATE collation_name",
            "TINYTEXT CHARACTER SET charset_name",
            "TINYTEXT COLLATE collation_name",
            "TINYTEXT"
        ],
        "Description": [
                "For definitions of character string columns (<link><code>CHAR</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/char.html</link>, <link><code>VARCHAR</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/char.html</link>, and the <link><code>TEXT</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/blob.html</link> types), MySQL interprets length specifications in character units.",
                "Column definitions for character string data types <link><code>CHAR</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/char.html</link>, <link><code>VARCHAR</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/char.html</link>, the <link><code>TEXT</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/blob.html</link> types, <link><code>ENUM</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/enum.html</link>, <link><code>SET</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/set.html</link>, and any synonyms) can specify the column character set and collation:\n <code>CHARACTER SET</code> specifies the character set. If desired, a collation for the character set can be specified with the <code>COLLATE</code> attribute, along with any other attributes. For example:\n <code>CREATE TABLE t\n(\n    c1 VARCHAR(20) CHARACTER SET utf8mb4,\n    c2 TEXT CHARACTER SET latin1 COLLATE latin1_general_cs\n);</code>\n This table definition creates a column named <code>c1</code> that has a character set of <code>utf8mb4</code> with the default collation for that character set, and a column named <code>c2</code> that has a character set of <code>latin1</code> and a case-sensitive (<code>_cs</code>) collation.\n The rules for assigning the character set and collation when either or both of <code>CHARACTER SET</code> and the <code>COLLATE</code> attribute are missing are described in <link>Section 12.3.5, \u201cColumn Character Set and Collation\u201d&LINK&https://dev.mysql.com/doc/refman/8.0/en/charset-column.html</link>.\n <code>CHARSET</code> is a synonym for <code>CHARACTER SET</code>.\n Specifying the <code>CHARACTER SET binary</code> attribute for a character string data type causes the column to be created as the corresponding binary string data type: <link><code>CHAR</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/char.html</link> becomes <link><code>BINARY</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/binary-varbinary.html</link>, <link><code>VARCHAR</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/char.html</link> becomes <link><code>VARBINARY</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/binary-varbinary.html</link>, and <link><code>TEXT</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/blob.html</link> becomes <link><code>BLOB</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/blob.html</link>. For the <link><code>ENUM</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/enum.html</link> and <link><code>SET</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/set.html</link> data types, this does not occur; they are created as declared. Suppose that you specify a table using this definition:\n <code>CREATE TABLE t\n(\n  c1 VARCHAR(10) CHARACTER SET binary,\n  c2 TEXT CHARACTER SET binary,\n  c3 ENUM('a','b','c') CHARACTER SET binary\n);</code>\n The resulting table has this definition:\n <code>CREATE TABLE t\n(\n  c1 VARBINARY(10),\n  c2 BLOB,\n  c3 ENUM('a','b','c') CHARACTER SET binary\n);</code>\n The <code>BINARY</code> attribute is a nonstandard MySQL extension that is shorthand for specifying the binary (<code>_bin</code>) collation of the column character set (or of the table default character set if no column character set is specified). In this case, comparison and sorting are based on numeric character code values. Suppose that you specify a table using this definition:\n <code>CREATE TABLE t\n(\n  c1 VARCHAR(10) CHARACTER SET latin1 BINARY,\n  c2 TEXT BINARY\n) CHARACTER SET utf8mb4;</code>\n The resulting table has this definition:\n <code>CREATE TABLE t (\n  c1 VARCHAR(10) CHARACTER SET latin1 COLLATE latin1_bin,\n  c2 TEXT CHARACTER SET utf8mb4 COLLATE utf8mb4_bin\n) CHARACTER SET utf8mb4;</code>\n In MySQL 8.0, this nonstandard use of the <code>BINARY</code> attribute is ambiguous because the <code>utf8mb4</code> character set has multiple <code>_bin</code> collations. As of MySQL 8.0.17, the <code>BINARY</code> attribute is deprecated and you should expect support for it to be removed in a future version of MySQL. Applications should be adjusted to use an explicit <code>_bin</code> collation instead.\n The use of <code>BINARY</code> to specify a data type or character set remains unchanged.\n The <code>ASCII</code> attribute is shorthand for <code>CHARACTER SET latin1</code>. Supported in older MySQL releases, <code>ASCII</code> is deprecated in MySQL 8.0.28 and later; use <code>CHARACTER SET</code> instead.\n The <code>UNICODE</code> attribute is shorthand for <code>CHARACTER SET ucs2</code>. Supported in older MySQL releases, <code>UNICODE</code> is deprecated in MySQL 8.0.28 and later; use <code>CHARACTER SET</code> instead.\n Character column comparison and sorting are based on the collation assigned to the column. For the <link><code>CHAR</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/char.html</link>, <link><code>VARCHAR</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/char.html</link>, <link><code>TEXT</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/blob.html</link>, <link><code>ENUM</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/enum.html</link>, and <link><code>SET</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/set.html</link> data types, you can declare a column with a binary (<code>_bin</code>) collation or the <code>BINARY</code> attribute to cause comparison and sorting to use the underlying character code values rather than a lexical ordering.\n For additional information about use of character sets in MySQL, see <link>Chapter 12, Character Sets, Collations, Unicode&LINK&https://dev.mysql.com/doc/refman/8.0/en/charset.html</link>.\n",
                " A <link><code>TEXT</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/blob.html</link> column with a maximum length of 255 (28 \u2212 1) characters. The effective maximum length is less if the value contains multibyte characters. Each <link><code>TINYTEXT</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/blob.html</link> value is stored using a 1-byte length prefix that indicates the number of bytes in the value.\n"
        ],
        "Links": [
            "https://dev.mysql.com/doc/refman/8.0/en/blob.html"
        ],
        "Compensate": [
            "A <code>BLOB</code> is a binary large object that can hold a variable amount of data. The four <code>BLOB</code> types are <code>TINYBLOB</code>, <code>BLOB</code>, <code>MEDIUMBLOB</code>, and <code>LONGBLOB</code>. These differ only in the maximum length of the values they can hold. The four <code>TEXT</code> types are <code>TINYTEXT</code>, <code>TEXT</code>, <code>MEDIUMTEXT</code>, and <code>LONGTEXT</code>. These correspond to the four <code>BLOB</code> types and have the same maximum lengths and storage requirements. See Section 13.7, \u201cData Type Storage Requirements\u201d&LINK&https://dev.mysql.com/doc/refman/8.0/en/storage-requirements.html."
        ],
        "Tree": [
            "(dataType TINYTEXT (charSet CHARACTER SET) COLLATE)",
            "(dataType TINYTEXT (charSet CHARACTER SET))",
            "(dataType TINYTEXT COLLATE)",
            "(dataType TINYTEXT)"
        ]
    },
    {
        "Type": [
            "BLOB ( M )",
            "BLOB"
        ],
        "Description": [
                "For definitions of binary string columns (<link><code>BINARY</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/binary-varbinary.html</link>, <link><code>VARBINARY</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/binary-varbinary.html</link>, and the <link><code>BLOB</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/blob.html</link> types), MySQL interprets length specifications in byte units.",
                " A <link><code>BLOB</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/blob.html</link> column with a maximum length of 65,535 (216 \u2212 1) bytes. Each <link><code>BLOB</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/blob.html</link> value is stored using a 2-byte length prefix that indicates the number of bytes in the value.\n An optional length <code>M</code> can be given for this type. If this is done, MySQL creates the column as the smallest <link><code>BLOB</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/blob.html</link> type large enough to hold values <code>M</code> bytes long.\n"
        ],
        "Links": [
            "https://dev.mysql.com/doc/refman/8.0/en/blob.html"
        ],
        "Compensate": [
            "A <code>BLOB</code> is a binary large object that can hold a variable amount of data. The four <code>BLOB</code> types are <code>TINYBLOB</code>, <code>BLOB</code>, <code>MEDIUMBLOB</code>, and <code>LONGBLOB</code>. These differ only in the maximum length of the values they can hold. The four <code>TEXT</code> types are <code>TINYTEXT</code>, <code>TEXT</code>, <code>MEDIUMTEXT</code>, and <code>LONGTEXT</code>. These correspond to the four <code>BLOB</code> types and have the same maximum lengths and storage requirements. See Section 13.7, \u201cData Type Storage Requirements\u201d&LINK&https://dev.mysql.com/doc/refman/8.0/en/storage-requirements.html.",
            "<code>BLOB</code> values are treated as binary strings (byte strings). They have the <code>binary</code> character set and collation, and comparison and sorting are based on the numeric values of the bytes in column values. <code>TEXT</code> values are treated as nonbinary strings (character strings). They have a character set other than <code>binary</code>, and values are sorted and compared based on the collation of the character set.",
            "If strict SQL mode is not enabled and you assign a value to a <code>BLOB</code> or <code>TEXT</code> column that exceeds the column's maximum length, the value is truncated to fit and a warning is generated. For truncation of nonspace characters, you can cause an error to occur (rather than a warning) and suppress insertion of the value by using strict SQL mode. See Section 7.1.11, \u201cServer SQL Modes\u201d&LINK&https://dev.mysql.com/doc/refman/8.0/en/sql-mode.html.",
            "For <code>TEXT</code> and <code>BLOB</code> columns, there is no padding on insert and no bytes are stripped on select.",
            "If a <code>TEXT</code> column is indexed, index entry comparisons are space-padded at the end. This means that, if the index requires unique values, duplicate-key errors occur for values that differ only in the number of trailing spaces. For example, if a table contains <code>'a'</code>, an attempt to store <code>'a '</code> causes a duplicate-key error. This is not true for <code>BLOB</code> columns.",
            "In most respects, you can regard a <code>BLOB</code> column as a <code>VARBINARY</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/binary-varbinary.html column that can be as large as you like. Similarly, you can regard a <code>TEXT</code> column as a <code>VARCHAR</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/char.html column. <code>BLOB</code> and <code>TEXT</code> differ from <code>VARBINARY</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/binary-varbinary.html and <code>VARCHAR</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/char.html in the following ways:",
            "For indexes on <code>BLOB</code> and <code>TEXT</code> columns, you must specify an index prefix length. For <code>CHAR</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/char.html and <code>VARCHAR</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/char.html, a prefix length is optional. See Section 10.3.5, \u201cColumn Indexes\u201d&LINK&https://dev.mysql.com/doc/refman/8.0/en/column-indexes.html.",
            "<code>BLOB</code> and <code>TEXT</code> columns cannot have <code>DEFAULT</code> values.",
            "MySQL Connector/ODBC defines <code>BLOB</code> values as <code>LONGVARBINARY</code> and <code>TEXT</code> values as <code>LONGVARCHAR</code>.",
            "Because <code>BLOB</code> and <code>TEXT</code> values can be extremely long, you might encounter some constraints in using them:",
            "Instances of <code>BLOB</code> or <code>TEXT</code> columns in the result of a query that is processed using a temporary table causes the server to use a table on disk rather than in memory because the <code>MEMORY</code> storage engine does not support those data types (see Section 10.4.4, \u201cInternal Temporary Table Use in MySQL\u201d&LINK&https://dev.mysql.com/doc/refman/8.0/en/internal-temporary-tables.html). Use of disk incurs a performance penalty, so include <code>BLOB</code> or <code>TEXT</code> columns in the query result only if they are really needed. For example, avoid using <code>SELECT *</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/select.html, which selects all columns.",
            "The maximum size of a <code>BLOB</code> or <code>TEXT</code> object is determined by its type, but the largest value you actually can transmit between the client and server is determined by the amount of available memory and the size of the communications buffers. You can change the message buffer size by changing the value of the <code>max_allowed_packet</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_max_allowed_packet variable, but you must do so for both the server and your client program. For example, both mysql&LINK&https://dev.mysql.com/doc/refman/8.0/en/mysql.html and mysqldump&LINK&https://dev.mysql.com/doc/refman/8.0/en/mysqldump.html enable you to change the client-side <code>max_allowed_packet</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_max_allowed_packet value. See Section 7.1.1, \u201cConfiguring the Server\u201d&LINK&https://dev.mysql.com/doc/refman/8.0/en/server-configuration.html, Section 6.5.1, \u201cmysql \u2014 The MySQL Command-Line Client\u201d&LINK&https://dev.mysql.com/doc/refman/8.0/en/mysql.html, and Section 6.5.4, \u201cmysqldump \u2014 A Database Backup Program\u201d&LINK&https://dev.mysql.com/doc/refman/8.0/en/mysqldump.html. You may also want to compare the packet sizes and the size of the data objects you are storing with the storage requirements, see Section 13.7, \u201cData Type Storage Requirements\u201d&LINK&https://dev.mysql.com/doc/refman/8.0/en/storage-requirements.html",
            "Each <code>BLOB</code> or <code>TEXT</code> value is represented internally by a separately allocated object. This is in contrast to all other data types, for which storage is allocated once per column when the table is opened.",
            "In some cases, it may be desirable to store binary data such as media files in <code>BLOB</code> or <code>TEXT</code> columns. You may find MySQL's string handling functions useful for working with such data. See Section 14.8, \u201cString Functions and Operators\u201d&LINK&https://dev.mysql.com/doc/refman/8.0/en/string-functions.html. For security and other reasons, it is usually preferable to do so using application code rather than giving application users the <code>FILE</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_file privilege. You can discuss specifics for various languages and platforms in the MySQL Forums (http://forums.mysql.com/&LINK&http://forums.mysql.com/)."
        ],
        "Tree": [
            "(dataType BLOB (lengthOneDimension ( )))",
            "(dataType BLOB)"
        ]
    },
    {
        "Type": [
            "TEXT ( M ) CHARACTER SET charset_name COLLATE collation_name",
            "TEXT ( M ) COLLATE collation_name",
            "TEXT ( M ) CHARACTER SET charset_name",
            "TEXT CHARACTER SET charset_name COLLATE collation_name",
            "TEXT ( M )",
            "TEXT CHARACTER SET charset_name",
            "TEXT COLLATE collation_name",
            "TEXT"
        ],
        "Description": [
                "For definitions of character string columns (<link><code>CHAR</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/char.html</link>, <link><code>VARCHAR</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/char.html</link>, and the <link><code>TEXT</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/blob.html</link> types), MySQL interprets length specifications in character units.",
                "Column definitions for character string data types <link><code>CHAR</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/char.html</link>, <link><code>VARCHAR</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/char.html</link>, the <link><code>TEXT</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/blob.html</link> types, <link><code>ENUM</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/enum.html</link>, <link><code>SET</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/set.html</link>, and any synonyms) can specify the column character set and collation:\n <code>CHARACTER SET</code> specifies the character set. If desired, a collation for the character set can be specified with the <code>COLLATE</code> attribute, along with any other attributes. For example:\n <code>CREATE TABLE t\n(\n    c1 VARCHAR(20) CHARACTER SET utf8mb4,\n    c2 TEXT CHARACTER SET latin1 COLLATE latin1_general_cs\n);</code>\n This table definition creates a column named <code>c1</code> that has a character set of <code>utf8mb4</code> with the default collation for that character set, and a column named <code>c2</code> that has a character set of <code>latin1</code> and a case-sensitive (<code>_cs</code>) collation.\n The rules for assigning the character set and collation when either or both of <code>CHARACTER SET</code> and the <code>COLLATE</code> attribute are missing are described in <link>Section 12.3.5, \u201cColumn Character Set and Collation\u201d&LINK&https://dev.mysql.com/doc/refman/8.0/en/charset-column.html</link>.\n <code>CHARSET</code> is a synonym for <code>CHARACTER SET</code>.\n Specifying the <code>CHARACTER SET binary</code> attribute for a character string data type causes the column to be created as the corresponding binary string data type: <link><code>CHAR</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/char.html</link> becomes <link><code>BINARY</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/binary-varbinary.html</link>, <link><code>VARCHAR</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/char.html</link> becomes <link><code>VARBINARY</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/binary-varbinary.html</link>, and <link><code>TEXT</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/blob.html</link> becomes <link><code>BLOB</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/blob.html</link>. For the <link><code>ENUM</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/enum.html</link> and <link><code>SET</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/set.html</link> data types, this does not occur; they are created as declared. Suppose that you specify a table using this definition:\n <code>CREATE TABLE t\n(\n  c1 VARCHAR(10) CHARACTER SET binary,\n  c2 TEXT CHARACTER SET binary,\n  c3 ENUM('a','b','c') CHARACTER SET binary\n);</code>\n The resulting table has this definition:\n <code>CREATE TABLE t\n(\n  c1 VARBINARY(10),\n  c2 BLOB,\n  c3 ENUM('a','b','c') CHARACTER SET binary\n);</code>\n The <code>BINARY</code> attribute is a nonstandard MySQL extension that is shorthand for specifying the binary (<code>_bin</code>) collation of the column character set (or of the table default character set if no column character set is specified). In this case, comparison and sorting are based on numeric character code values. Suppose that you specify a table using this definition:\n <code>CREATE TABLE t\n(\n  c1 VARCHAR(10) CHARACTER SET latin1 BINARY,\n  c2 TEXT BINARY\n) CHARACTER SET utf8mb4;</code>\n The resulting table has this definition:\n <code>CREATE TABLE t (\n  c1 VARCHAR(10) CHARACTER SET latin1 COLLATE latin1_bin,\n  c2 TEXT CHARACTER SET utf8mb4 COLLATE utf8mb4_bin\n) CHARACTER SET utf8mb4;</code>\n In MySQL 8.0, this nonstandard use of the <code>BINARY</code> attribute is ambiguous because the <code>utf8mb4</code> character set has multiple <code>_bin</code> collations. As of MySQL 8.0.17, the <code>BINARY</code> attribute is deprecated and you should expect support for it to be removed in a future version of MySQL. Applications should be adjusted to use an explicit <code>_bin</code> collation instead.\n The use of <code>BINARY</code> to specify a data type or character set remains unchanged.\n The <code>ASCII</code> attribute is shorthand for <code>CHARACTER SET latin1</code>. Supported in older MySQL releases, <code>ASCII</code> is deprecated in MySQL 8.0.28 and later; use <code>CHARACTER SET</code> instead.\n The <code>UNICODE</code> attribute is shorthand for <code>CHARACTER SET ucs2</code>. Supported in older MySQL releases, <code>UNICODE</code> is deprecated in MySQL 8.0.28 and later; use <code>CHARACTER SET</code> instead.\n Character column comparison and sorting are based on the collation assigned to the column. For the <link><code>CHAR</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/char.html</link>, <link><code>VARCHAR</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/char.html</link>, <link><code>TEXT</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/blob.html</link>, <link><code>ENUM</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/enum.html</link>, and <link><code>SET</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/set.html</link> data types, you can declare a column with a binary (<code>_bin</code>) collation or the <code>BINARY</code> attribute to cause comparison and sorting to use the underlying character code values rather than a lexical ordering.\n For additional information about use of character sets in MySQL, see <link>Chapter 12, Character Sets, Collations, Unicode&LINK&https://dev.mysql.com/doc/refman/8.0/en/charset.html</link>.\n",
                " A <link><code>TEXT</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/blob.html</link> column with a maximum length of 65,535 (216 \u2212 1) characters. The effective maximum length is less if the value contains multibyte characters. Each <link><code>TEXT</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/blob.html</link> value is stored using a 2-byte length prefix that indicates the number of bytes in the value.\n An optional length <code>M</code> can be given for this type. If this is done, MySQL creates the column as the smallest <link><code>TEXT</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/blob.html</link> type large enough to hold values <code>M</code> characters long.\n"
        ],
        "Links": [
            "https://dev.mysql.com/doc/refman/8.0/en/blob.html"
        ],
        "Compensate": [
            "A <code>BLOB</code> is a binary large object that can hold a variable amount of data. The four <code>BLOB</code> types are <code>TINYBLOB</code>, <code>BLOB</code>, <code>MEDIUMBLOB</code>, and <code>LONGBLOB</code>. These differ only in the maximum length of the values they can hold. The four <code>TEXT</code> types are <code>TINYTEXT</code>, <code>TEXT</code>, <code>MEDIUMTEXT</code>, and <code>LONGTEXT</code>. These correspond to the four <code>BLOB</code> types and have the same maximum lengths and storage requirements. See Section 13.7, \u201cData Type Storage Requirements\u201d&LINK&https://dev.mysql.com/doc/refman/8.0/en/storage-requirements.html.",
            "<code>BLOB</code> values are treated as binary strings (byte strings). They have the <code>binary</code> character set and collation, and comparison and sorting are based on the numeric values of the bytes in column values. <code>TEXT</code> values are treated as nonbinary strings (character strings). They have a character set other than <code>binary</code>, and values are sorted and compared based on the collation of the character set.",
            "If strict SQL mode is not enabled and you assign a value to a <code>BLOB</code> or <code>TEXT</code> column that exceeds the column's maximum length, the value is truncated to fit and a warning is generated. For truncation of nonspace characters, you can cause an error to occur (rather than a warning) and suppress insertion of the value by using strict SQL mode. See Section 7.1.11, \u201cServer SQL Modes\u201d&LINK&https://dev.mysql.com/doc/refman/8.0/en/sql-mode.html.",
            "Truncation of excess trailing spaces from values to be inserted into <code>TEXT</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/blob.html columns always generates a warning, regardless of the SQL mode.",
            "For <code>TEXT</code> and <code>BLOB</code> columns, there is no padding on insert and no bytes are stripped on select.",
            "If a <code>TEXT</code> column is indexed, index entry comparisons are space-padded at the end. This means that, if the index requires unique values, duplicate-key errors occur for values that differ only in the number of trailing spaces. For example, if a table contains <code>'a'</code>, an attempt to store <code>'a '</code> causes a duplicate-key error. This is not true for <code>BLOB</code> columns.",
            "In most respects, you can regard a <code>BLOB</code> column as a <code>VARBINARY</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/binary-varbinary.html column that can be as large as you like. Similarly, you can regard a <code>TEXT</code> column as a <code>VARCHAR</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/char.html column. <code>BLOB</code> and <code>TEXT</code> differ from <code>VARBINARY</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/binary-varbinary.html and <code>VARCHAR</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/char.html in the following ways:",
            "For indexes on <code>BLOB</code> and <code>TEXT</code> columns, you must specify an index prefix length. For <code>CHAR</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/char.html and <code>VARCHAR</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/char.html, a prefix length is optional. See Section 10.3.5, \u201cColumn Indexes\u201d&LINK&https://dev.mysql.com/doc/refman/8.0/en/column-indexes.html.",
            "<code>BLOB</code> and <code>TEXT</code> columns cannot have <code>DEFAULT</code> values.",
            "If you use the <code>BINARY</code> attribute with a <code>TEXT</code> data type, the column is assigned the binary (<code>_bin</code>) collation of the column character set.",
            "MySQL Connector/ODBC defines <code>BLOB</code> values as <code>LONGVARBINARY</code> and <code>TEXT</code> values as <code>LONGVARCHAR</code>.",
            "Because <code>BLOB</code> and <code>TEXT</code> values can be extremely long, you might encounter some constraints in using them:",
            "Instances of <code>BLOB</code> or <code>TEXT</code> columns in the result of a query that is processed using a temporary table causes the server to use a table on disk rather than in memory because the <code>MEMORY</code> storage engine does not support those data types (see Section 10.4.4, \u201cInternal Temporary Table Use in MySQL\u201d&LINK&https://dev.mysql.com/doc/refman/8.0/en/internal-temporary-tables.html). Use of disk incurs a performance penalty, so include <code>BLOB</code> or <code>TEXT</code> columns in the query result only if they are really needed. For example, avoid using <code>SELECT *</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/select.html, which selects all columns.",
            "The maximum size of a <code>BLOB</code> or <code>TEXT</code> object is determined by its type, but the largest value you actually can transmit between the client and server is determined by the amount of available memory and the size of the communications buffers. You can change the message buffer size by changing the value of the <code>max_allowed_packet</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_max_allowed_packet variable, but you must do so for both the server and your client program. For example, both mysql&LINK&https://dev.mysql.com/doc/refman/8.0/en/mysql.html and mysqldump&LINK&https://dev.mysql.com/doc/refman/8.0/en/mysqldump.html enable you to change the client-side <code>max_allowed_packet</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_max_allowed_packet value. See Section 7.1.1, \u201cConfiguring the Server\u201d&LINK&https://dev.mysql.com/doc/refman/8.0/en/server-configuration.html, Section 6.5.1, \u201cmysql \u2014 The MySQL Command-Line Client\u201d&LINK&https://dev.mysql.com/doc/refman/8.0/en/mysql.html, and Section 6.5.4, \u201cmysqldump \u2014 A Database Backup Program\u201d&LINK&https://dev.mysql.com/doc/refman/8.0/en/mysqldump.html. You may also want to compare the packet sizes and the size of the data objects you are storing with the storage requirements, see Section 13.7, \u201cData Type Storage Requirements\u201d&LINK&https://dev.mysql.com/doc/refman/8.0/en/storage-requirements.html",
            "Each <code>BLOB</code> or <code>TEXT</code> value is represented internally by a separately allocated object. This is in contrast to all other data types, for which storage is allocated once per column when the table is opened.",
            "In some cases, it may be desirable to store binary data such as media files in <code>BLOB</code> or <code>TEXT</code> columns. You may find MySQL's string handling functions useful for working with such data. See Section 14.8, \u201cString Functions and Operators\u201d&LINK&https://dev.mysql.com/doc/refman/8.0/en/string-functions.html. For security and other reasons, it is usually preferable to do so using application code rather than giving application users the <code>FILE</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_file privilege. You can discuss specifics for various languages and platforms in the MySQL Forums (http://forums.mysql.com/&LINK&http://forums.mysql.com/)."
        ],
        "Tree": [
            "(dataType TEXT (lengthOneDimension ( )) (charSet CHARACTER SET) COLLATE)",
            "(dataType TEXT (lengthOneDimension ( )) COLLATE)",
            "(dataType TEXT (lengthOneDimension ( )) (charSet CHARACTER SET))",
            "(dataType TEXT (charSet CHARACTER SET) COLLATE)",
            "(dataType TEXT (lengthOneDimension ( )))",
            "(dataType TEXT (charSet CHARACTER SET))",
            "(dataType TEXT COLLATE)",
            "(dataType TEXT)"
        ]
    },
    {
        "Type": [
            "MEDIUMBLOB"
        ],
        "Description": [
                "For definitions of binary string columns (<link><code>BINARY</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/binary-varbinary.html</link>, <link><code>VARBINARY</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/binary-varbinary.html</link>, and the <link><code>BLOB</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/blob.html</link> types), MySQL interprets length specifications in byte units.",
                " A <link><code>BLOB</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/blob.html</link> column with a maximum length of 16,777,215 (224 \u2212 1) bytes. Each <link><code>MEDIUMBLOB</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/blob.html</link> value is stored using a 3-byte length prefix that indicates the number of bytes in the value.\n"
        ],
        "Links": [
            "https://dev.mysql.com/doc/refman/8.0/en/blob.html"
        ],
        "Compensate": [
            "A <code>BLOB</code> is a binary large object that can hold a variable amount of data. The four <code>BLOB</code> types are <code>TINYBLOB</code>, <code>BLOB</code>, <code>MEDIUMBLOB</code>, and <code>LONGBLOB</code>. These differ only in the maximum length of the values they can hold. The four <code>TEXT</code> types are <code>TINYTEXT</code>, <code>TEXT</code>, <code>MEDIUMTEXT</code>, and <code>LONGTEXT</code>. These correspond to the four <code>BLOB</code> types and have the same maximum lengths and storage requirements. See Section 13.7, \u201cData Type Storage Requirements\u201d&LINK&https://dev.mysql.com/doc/refman/8.0/en/storage-requirements.html."
        ],
        "Tree": [
            "(dataType MEDIUMBLOB)"
        ]
    },
    {
        "Type": [
            "MEDIUMTEXT CHARACTER SET charset_name COLLATE collation_name",
            "MEDIUMTEXT CHARACTER SET charset_name",
            "MEDIUMTEXT COLLATE collation_name",
            "MEDIUMTEXT"
        ],
        "Description": [
                "For definitions of character string columns (<link><code>CHAR</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/char.html</link>, <link><code>VARCHAR</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/char.html</link>, and the <link><code>TEXT</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/blob.html</link> types), MySQL interprets length specifications in character units.",
                "Column definitions for character string data types <link><code>CHAR</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/char.html</link>, <link><code>VARCHAR</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/char.html</link>, the <link><code>TEXT</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/blob.html</link> types, <link><code>ENUM</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/enum.html</link>, <link><code>SET</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/set.html</link>, and any synonyms) can specify the column character set and collation:\n <code>CHARACTER SET</code> specifies the character set. If desired, a collation for the character set can be specified with the <code>COLLATE</code> attribute, along with any other attributes. For example:\n <code>CREATE TABLE t\n(\n    c1 VARCHAR(20) CHARACTER SET utf8mb4,\n    c2 TEXT CHARACTER SET latin1 COLLATE latin1_general_cs\n);</code>\n This table definition creates a column named <code>c1</code> that has a character set of <code>utf8mb4</code> with the default collation for that character set, and a column named <code>c2</code> that has a character set of <code>latin1</code> and a case-sensitive (<code>_cs</code>) collation.\n The rules for assigning the character set and collation when either or both of <code>CHARACTER SET</code> and the <code>COLLATE</code> attribute are missing are described in <link>Section 12.3.5, \u201cColumn Character Set and Collation\u201d&LINK&https://dev.mysql.com/doc/refman/8.0/en/charset-column.html</link>.\n <code>CHARSET</code> is a synonym for <code>CHARACTER SET</code>.\n Specifying the <code>CHARACTER SET binary</code> attribute for a character string data type causes the column to be created as the corresponding binary string data type: <link><code>CHAR</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/char.html</link> becomes <link><code>BINARY</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/binary-varbinary.html</link>, <link><code>VARCHAR</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/char.html</link> becomes <link><code>VARBINARY</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/binary-varbinary.html</link>, and <link><code>TEXT</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/blob.html</link> becomes <link><code>BLOB</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/blob.html</link>. For the <link><code>ENUM</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/enum.html</link> and <link><code>SET</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/set.html</link> data types, this does not occur; they are created as declared. Suppose that you specify a table using this definition:\n <code>CREATE TABLE t\n(\n  c1 VARCHAR(10) CHARACTER SET binary,\n  c2 TEXT CHARACTER SET binary,\n  c3 ENUM('a','b','c') CHARACTER SET binary\n);</code>\n The resulting table has this definition:\n <code>CREATE TABLE t\n(\n  c1 VARBINARY(10),\n  c2 BLOB,\n  c3 ENUM('a','b','c') CHARACTER SET binary\n);</code>\n The <code>BINARY</code> attribute is a nonstandard MySQL extension that is shorthand for specifying the binary (<code>_bin</code>) collation of the column character set (or of the table default character set if no column character set is specified). In this case, comparison and sorting are based on numeric character code values. Suppose that you specify a table using this definition:\n <code>CREATE TABLE t\n(\n  c1 VARCHAR(10) CHARACTER SET latin1 BINARY,\n  c2 TEXT BINARY\n) CHARACTER SET utf8mb4;</code>\n The resulting table has this definition:\n <code>CREATE TABLE t (\n  c1 VARCHAR(10) CHARACTER SET latin1 COLLATE latin1_bin,\n  c2 TEXT CHARACTER SET utf8mb4 COLLATE utf8mb4_bin\n) CHARACTER SET utf8mb4;</code>\n In MySQL 8.0, this nonstandard use of the <code>BINARY</code> attribute is ambiguous because the <code>utf8mb4</code> character set has multiple <code>_bin</code> collations. As of MySQL 8.0.17, the <code>BINARY</code> attribute is deprecated and you should expect support for it to be removed in a future version of MySQL. Applications should be adjusted to use an explicit <code>_bin</code> collation instead.\n The use of <code>BINARY</code> to specify a data type or character set remains unchanged.\n The <code>ASCII</code> attribute is shorthand for <code>CHARACTER SET latin1</code>. Supported in older MySQL releases, <code>ASCII</code> is deprecated in MySQL 8.0.28 and later; use <code>CHARACTER SET</code> instead.\n The <code>UNICODE</code> attribute is shorthand for <code>CHARACTER SET ucs2</code>. Supported in older MySQL releases, <code>UNICODE</code> is deprecated in MySQL 8.0.28 and later; use <code>CHARACTER SET</code> instead.\n Character column comparison and sorting are based on the collation assigned to the column. For the <link><code>CHAR</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/char.html</link>, <link><code>VARCHAR</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/char.html</link>, <link><code>TEXT</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/blob.html</link>, <link><code>ENUM</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/enum.html</link>, and <link><code>SET</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/set.html</link> data types, you can declare a column with a binary (<code>_bin</code>) collation or the <code>BINARY</code> attribute to cause comparison and sorting to use the underlying character code values rather than a lexical ordering.\n For additional information about use of character sets in MySQL, see <link>Chapter 12, Character Sets, Collations, Unicode&LINK&https://dev.mysql.com/doc/refman/8.0/en/charset.html</link>.\n",
                " A <link><code>TEXT</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/blob.html</link> column with a maximum length of 16,777,215 (224 \u2212 1) characters. The effective maximum length is less if the value contains multibyte characters. Each <link><code>MEDIUMTEXT</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/blob.html</link> value is stored using a 3-byte length prefix that indicates the number of bytes in the value.\n"
        ],
        "Links": [
            "https://dev.mysql.com/doc/refman/8.0/en/blob.html"
        ],
        "Compensate": [
            "A <code>BLOB</code> is a binary large object that can hold a variable amount of data. The four <code>BLOB</code> types are <code>TINYBLOB</code>, <code>BLOB</code>, <code>MEDIUMBLOB</code>, and <code>LONGBLOB</code>. These differ only in the maximum length of the values they can hold. The four <code>TEXT</code> types are <code>TINYTEXT</code>, <code>TEXT</code>, <code>MEDIUMTEXT</code>, and <code>LONGTEXT</code>. These correspond to the four <code>BLOB</code> types and have the same maximum lengths and storage requirements. See Section 13.7, \u201cData Type Storage Requirements\u201d&LINK&https://dev.mysql.com/doc/refman/8.0/en/storage-requirements.html.",
            "<code>LONG</code> and <code>LONG VARCHAR</code> map to the <code>MEDIUMTEXT</code> data type. This is a compatibility feature."
        ],
        "Tree": [
            "(dataType MEDIUMTEXT (charSet CHARACTER SET) COLLATE)",
            "(dataType MEDIUMTEXT (charSet CHARACTER SET))",
            "(dataType MEDIUMTEXT COLLATE)",
            "(dataType MEDIUMTEXT)"
        ]
    },
    {
        "Type": [
            "LONGBLOB"
        ],
        "Description": [
                "For definitions of binary string columns (<link><code>BINARY</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/binary-varbinary.html</link>, <link><code>VARBINARY</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/binary-varbinary.html</link>, and the <link><code>BLOB</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/blob.html</link> types), MySQL interprets length specifications in byte units.",
                " A <link><code>BLOB</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/blob.html</link> column with a maximum length of 4,294,967,295 or 4GB (232 \u2212 1) bytes. The effective maximum length of <link><code>LONGBLOB</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/blob.html</link> columns depends on the configured maximum packet size in the client/server protocol and available memory. Each <link><code>LONGBLOB</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/blob.html</link> value is stored using a 4-byte length prefix that indicates the number of bytes in the value.\n"
        ],
        "Links": [
            "https://dev.mysql.com/doc/refman/8.0/en/blob.html"
        ],
        "Compensate": [
            "A <code>BLOB</code> is a binary large object that can hold a variable amount of data. The four <code>BLOB</code> types are <code>TINYBLOB</code>, <code>BLOB</code>, <code>MEDIUMBLOB</code>, and <code>LONGBLOB</code>. These differ only in the maximum length of the values they can hold. The four <code>TEXT</code> types are <code>TINYTEXT</code>, <code>TEXT</code>, <code>MEDIUMTEXT</code>, and <code>LONGTEXT</code>. These correspond to the four <code>BLOB</code> types and have the same maximum lengths and storage requirements. See Section 13.7, \u201cData Type Storage Requirements\u201d&LINK&https://dev.mysql.com/doc/refman/8.0/en/storage-requirements.html."
        ],
        "Tree": [
            "(dataType LONGBLOB)"
        ]
    },
    {
        "Type": [
            "LONGTEXT CHARACTER SET charset_name COLLATE collation_name",
            "LONGTEXT CHARACTER SET charset_name",
            "LONGTEXT COLLATE collation_name",
            "LONGTEXT"
        ],
        "Description": [
                "For definitions of character string columns (<link><code>CHAR</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/char.html</link>, <link><code>VARCHAR</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/char.html</link>, and the <link><code>TEXT</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/blob.html</link> types), MySQL interprets length specifications in character units.",
                "Column definitions for character string data types <link><code>CHAR</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/char.html</link>, <link><code>VARCHAR</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/char.html</link>, the <link><code>TEXT</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/blob.html</link> types, <link><code>ENUM</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/enum.html</link>, <link><code>SET</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/set.html</link>, and any synonyms) can specify the column character set and collation:\n <code>CHARACTER SET</code> specifies the character set. If desired, a collation for the character set can be specified with the <code>COLLATE</code> attribute, along with any other attributes. For example:\n <code>CREATE TABLE t\n(\n    c1 VARCHAR(20) CHARACTER SET utf8mb4,\n    c2 TEXT CHARACTER SET latin1 COLLATE latin1_general_cs\n);</code>\n This table definition creates a column named <code>c1</code> that has a character set of <code>utf8mb4</code> with the default collation for that character set, and a column named <code>c2</code> that has a character set of <code>latin1</code> and a case-sensitive (<code>_cs</code>) collation.\n The rules for assigning the character set and collation when either or both of <code>CHARACTER SET</code> and the <code>COLLATE</code> attribute are missing are described in <link>Section 12.3.5, \u201cColumn Character Set and Collation\u201d&LINK&https://dev.mysql.com/doc/refman/8.0/en/charset-column.html</link>.\n <code>CHARSET</code> is a synonym for <code>CHARACTER SET</code>.\n Specifying the <code>CHARACTER SET binary</code> attribute for a character string data type causes the column to be created as the corresponding binary string data type: <link><code>CHAR</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/char.html</link> becomes <link><code>BINARY</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/binary-varbinary.html</link>, <link><code>VARCHAR</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/char.html</link> becomes <link><code>VARBINARY</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/binary-varbinary.html</link>, and <link><code>TEXT</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/blob.html</link> becomes <link><code>BLOB</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/blob.html</link>. For the <link><code>ENUM</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/enum.html</link> and <link><code>SET</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/set.html</link> data types, this does not occur; they are created as declared. Suppose that you specify a table using this definition:\n <code>CREATE TABLE t\n(\n  c1 VARCHAR(10) CHARACTER SET binary,\n  c2 TEXT CHARACTER SET binary,\n  c3 ENUM('a','b','c') CHARACTER SET binary\n);</code>\n The resulting table has this definition:\n <code>CREATE TABLE t\n(\n  c1 VARBINARY(10),\n  c2 BLOB,\n  c3 ENUM('a','b','c') CHARACTER SET binary\n);</code>\n The <code>BINARY</code> attribute is a nonstandard MySQL extension that is shorthand for specifying the binary (<code>_bin</code>) collation of the column character set (or of the table default character set if no column character set is specified). In this case, comparison and sorting are based on numeric character code values. Suppose that you specify a table using this definition:\n <code>CREATE TABLE t\n(\n  c1 VARCHAR(10) CHARACTER SET latin1 BINARY,\n  c2 TEXT BINARY\n) CHARACTER SET utf8mb4;</code>\n The resulting table has this definition:\n <code>CREATE TABLE t (\n  c1 VARCHAR(10) CHARACTER SET latin1 COLLATE latin1_bin,\n  c2 TEXT CHARACTER SET utf8mb4 COLLATE utf8mb4_bin\n) CHARACTER SET utf8mb4;</code>\n In MySQL 8.0, this nonstandard use of the <code>BINARY</code> attribute is ambiguous because the <code>utf8mb4</code> character set has multiple <code>_bin</code> collations. As of MySQL 8.0.17, the <code>BINARY</code> attribute is deprecated and you should expect support for it to be removed in a future version of MySQL. Applications should be adjusted to use an explicit <code>_bin</code> collation instead.\n The use of <code>BINARY</code> to specify a data type or character set remains unchanged.\n The <code>ASCII</code> attribute is shorthand for <code>CHARACTER SET latin1</code>. Supported in older MySQL releases, <code>ASCII</code> is deprecated in MySQL 8.0.28 and later; use <code>CHARACTER SET</code> instead.\n The <code>UNICODE</code> attribute is shorthand for <code>CHARACTER SET ucs2</code>. Supported in older MySQL releases, <code>UNICODE</code> is deprecated in MySQL 8.0.28 and later; use <code>CHARACTER SET</code> instead.\n Character column comparison and sorting are based on the collation assigned to the column. For the <link><code>CHAR</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/char.html</link>, <link><code>VARCHAR</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/char.html</link>, <link><code>TEXT</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/blob.html</link>, <link><code>ENUM</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/enum.html</link>, and <link><code>SET</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/set.html</link> data types, you can declare a column with a binary (<code>_bin</code>) collation or the <code>BINARY</code> attribute to cause comparison and sorting to use the underlying character code values rather than a lexical ordering.\n For additional information about use of character sets in MySQL, see <link>Chapter 12, Character Sets, Collations, Unicode&LINK&https://dev.mysql.com/doc/refman/8.0/en/charset.html</link>.\n",
                " A <link><code>TEXT</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/blob.html</link> column with a maximum length of 4,294,967,295 or 4GB (232 \u2212 1) characters. The effective maximum length is less if the value contains multibyte characters. The effective maximum length of <link><code>LONGTEXT</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/blob.html</link> columns also depends on the configured maximum packet size in the client/server protocol and available memory. Each <link><code>LONGTEXT</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/blob.html</link> value is stored using a 4-byte length prefix that indicates the number of bytes in the value.\n"
        ],
        "Links": [
            "https://dev.mysql.com/doc/refman/8.0/en/blob.html"
        ],
        "Compensate": [
            "A <code>BLOB</code> is a binary large object that can hold a variable amount of data. The four <code>BLOB</code> types are <code>TINYBLOB</code>, <code>BLOB</code>, <code>MEDIUMBLOB</code>, and <code>LONGBLOB</code>. These differ only in the maximum length of the values they can hold. The four <code>TEXT</code> types are <code>TINYTEXT</code>, <code>TEXT</code>, <code>MEDIUMTEXT</code>, and <code>LONGTEXT</code>. These correspond to the four <code>BLOB</code> types and have the same maximum lengths and storage requirements. See Section 13.7, \u201cData Type Storage Requirements\u201d&LINK&https://dev.mysql.com/doc/refman/8.0/en/storage-requirements.html."
        ],
        "Tree": [
            "(dataType LONGTEXT (charSet CHARACTER SET) COLLATE)",
            "(dataType LONGTEXT (charSet CHARACTER SET))",
            "(dataType LONGTEXT COLLATE)",
            "(dataType LONGTEXT)"
        ]
    },
    {
        "Type": [
            "ENUM ( ) CHARACTER SET charset_name COLLATE collation_name",
            "ENUM ( ) CHARACTER SET charset_name",
            "ENUM ( ) COLLATE collation_name",
            "ENUM ( )"
        ],
        "Description": [
                "Column definitions for character string data types <link><code>CHAR</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/char.html</link>, <link><code>VARCHAR</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/char.html</link>, the <link><code>TEXT</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/blob.html</link> types, <link><code>ENUM</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/enum.html</link>, <link><code>SET</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/set.html</link>, and any synonyms) can specify the column character set and collation:\n <code>CHARACTER SET</code> specifies the character set. If desired, a collation for the character set can be specified with the <code>COLLATE</code> attribute, along with any other attributes. For example:\n <code>CREATE TABLE t\n(\n    c1 VARCHAR(20) CHARACTER SET utf8mb4,\n    c2 TEXT CHARACTER SET latin1 COLLATE latin1_general_cs\n);</code>\n This table definition creates a column named <code>c1</code> that has a character set of <code>utf8mb4</code> with the default collation for that character set, and a column named <code>c2</code> that has a character set of <code>latin1</code> and a case-sensitive (<code>_cs</code>) collation.\n The rules for assigning the character set and collation when either or both of <code>CHARACTER SET</code> and the <code>COLLATE</code> attribute are missing are described in <link>Section 12.3.5, \u201cColumn Character Set and Collation\u201d&LINK&https://dev.mysql.com/doc/refman/8.0/en/charset-column.html</link>.\n <code>CHARSET</code> is a synonym for <code>CHARACTER SET</code>.\n Specifying the <code>CHARACTER SET binary</code> attribute for a character string data type causes the column to be created as the corresponding binary string data type: <link><code>CHAR</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/char.html</link> becomes <link><code>BINARY</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/binary-varbinary.html</link>, <link><code>VARCHAR</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/char.html</link> becomes <link><code>VARBINARY</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/binary-varbinary.html</link>, and <link><code>TEXT</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/blob.html</link> becomes <link><code>BLOB</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/blob.html</link>. For the <link><code>ENUM</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/enum.html</link> and <link><code>SET</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/set.html</link> data types, this does not occur; they are created as declared. Suppose that you specify a table using this definition:\n <code>CREATE TABLE t\n(\n  c1 VARCHAR(10) CHARACTER SET binary,\n  c2 TEXT CHARACTER SET binary,\n  c3 ENUM('a','b','c') CHARACTER SET binary\n);</code>\n The resulting table has this definition:\n <code>CREATE TABLE t\n(\n  c1 VARBINARY(10),\n  c2 BLOB,\n  c3 ENUM('a','b','c') CHARACTER SET binary\n);</code>\n The <code>BINARY</code> attribute is a nonstandard MySQL extension that is shorthand for specifying the binary (<code>_bin</code>) collation of the column character set (or of the table default character set if no column character set is specified). In this case, comparison and sorting are based on numeric character code values. Suppose that you specify a table using this definition:\n <code>CREATE TABLE t\n(\n  c1 VARCHAR(10) CHARACTER SET latin1 BINARY,\n  c2 TEXT BINARY\n) CHARACTER SET utf8mb4;</code>\n The resulting table has this definition:\n <code>CREATE TABLE t (\n  c1 VARCHAR(10) CHARACTER SET latin1 COLLATE latin1_bin,\n  c2 TEXT CHARACTER SET utf8mb4 COLLATE utf8mb4_bin\n) CHARACTER SET utf8mb4;</code>\n In MySQL 8.0, this nonstandard use of the <code>BINARY</code> attribute is ambiguous because the <code>utf8mb4</code> character set has multiple <code>_bin</code> collations. As of MySQL 8.0.17, the <code>BINARY</code> attribute is deprecated and you should expect support for it to be removed in a future version of MySQL. Applications should be adjusted to use an explicit <code>_bin</code> collation instead.\n The use of <code>BINARY</code> to specify a data type or character set remains unchanged.\n The <code>ASCII</code> attribute is shorthand for <code>CHARACTER SET latin1</code>. Supported in older MySQL releases, <code>ASCII</code> is deprecated in MySQL 8.0.28 and later; use <code>CHARACTER SET</code> instead.\n The <code>UNICODE</code> attribute is shorthand for <code>CHARACTER SET ucs2</code>. Supported in older MySQL releases, <code>UNICODE</code> is deprecated in MySQL 8.0.28 and later; use <code>CHARACTER SET</code> instead.\n Character column comparison and sorting are based on the collation assigned to the column. For the <link><code>CHAR</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/char.html</link>, <link><code>VARCHAR</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/char.html</link>, <link><code>TEXT</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/blob.html</link>, <link><code>ENUM</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/enum.html</link>, and <link><code>SET</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/set.html</link> data types, you can declare a column with a binary (<code>_bin</code>) collation or the <code>BINARY</code> attribute to cause comparison and sorting to use the underlying character code values rather than a lexical ordering.\n For additional information about use of character sets in MySQL, see <link>Chapter 12, Character Sets, Collations, Unicode&LINK&https://dev.mysql.com/doc/refman/8.0/en/charset.html</link>.\n",
                " An enumeration. A string object that can have only one value, chosen from the list of values <code>'value1'</code>, <code>'value2'</code>, <code>...</code>, <code>NULL</code> or the special <code>''</code> error value. <link><code>ENUM</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/enum.html</link> values are represented internally as integers.\n An <link><code>ENUM</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/enum.html</link> column can have a maximum of 65,535 distinct elements.\n The maximum supported length of an individual <code>ENUM</code> element is <code>M</code> <= 255 and (<code>M</code> x <code>w</code>) <= 1020, where <code>M</code> is the element literal length and <code>w</code> is the number of bytes required for the maximum-length character in the character set.\n"
        ],
        "Links": [
            "https://dev.mysql.com/doc/refman/8.0/en/enum.html"
        ],
        "Compensate": [
            "An <code>ENUM</code> is a string object with a value chosen from a list of permitted values that are enumerated explicitly in the column specification at table creation time.",
            "See Section 13.3.1, \u201cString Data Type Syntax\u201d&LINK&https://dev.mysql.com/doc/refman/8.0/en/string-type-syntax.html for <code>ENUM</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/enum.html type syntax and length limits.",
            "The <code>ENUM</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/enum.html type has these advantages:",
            "Compact data storage in situations where a column has a limited set of possible values. The strings you specify as input values are automatically encoded as numbers. See Section 13.7, \u201cData Type Storage Requirements\u201d&LINK&https://dev.mysql.com/doc/refman/8.0/en/storage-requirements.html for storage requirements for the <code>ENUM</code> type.",
            "Using <code>ENUM</code> columns in <code>ORDER BY</code> clauses requires extra care, as explained in Enumeration Sorting&LINK&https://dev.mysql.com/doc/refman/8.0/en/enum.html#enum-sorting.",
            "An enumeration value must be a quoted string literal. For example, you can create a table with an <code>ENUM</code> column like this:",
            "<code>CREATE TABLE shirts (\n name VARCHAR(40),\n size ENUM('x-small', 'small', 'medium', 'large', 'x-large')\n);\nINSERT INTO shirts (name, size) VALUES ('dress shirt','large'), ('t-shirt','medium'),\n ('polo shirt','small');\nSELECT name, size FROM shirts WHERE size = 'medium';\n+---------+--------+\n| name | size |\n+---------+--------+\n| t-shirt | medium |\n+---------+--------+\nUPDATE shirts SET size = 'small' WHERE size = 'large';\nCOMMIT;</code>",
            "The index value of the empty string error value is 0. This means that you can use the following <code>SELECT</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/select.html statement to find rows into which invalid <code>ENUM</code> values were assigned: <code>mysql> SELECT * FROM tbl_name WHERE enum_col=0;</code>",
            "For example, a column specified as <code>ENUM('Mercury', 'Venus', 'Earth')</code> can have any of the values shown here. The index of each value is also shown.",
            "An <code>ENUM</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/enum.html column can have a maximum of 65,535 distinct elements.",
            "If you retrieve an <code>ENUM</code> value in a numeric context, the column value's index is returned. For example, you can retrieve numeric values from an <code>ENUM</code> column like this:",
            "Functions such as <code>SUM()</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/aggregate-functions.html#function_sum or <code>AVG()</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/aggregate-functions.html#function_avg that expect a numeric argument cast the argument to a number if necessary. For <code>ENUM</code> values, the index number is used in the calculation.",
            "Trailing spaces are automatically deleted from <code>ENUM</code> member values in the table definition when a table is created.",
            "When retrieved, values stored into an <code>ENUM</code> column are displayed using the lettercase that was used in the column definition. Note that <code>ENUM</code> columns can be assigned a character set and collation. For binary or case-sensitive collations, lettercase is taken into account when assigning values to the column.",
            "If you store a number into an <code>ENUM</code> column, the number is treated as the index into the possible values, and the value stored is the enumeration member with that index. (However, this does not work with <code>LOAD DATA</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/load-data.html, which treats all input as strings.) If the numeric value is quoted, it is still interpreted as an index if there is no matching string in the list of enumeration values. For these reasons, it is not advisable to define an <code>ENUM</code> column with enumeration values that look like numbers, because this can easily become confusing. For example, the following column has enumeration members with string values of <code>'0'</code>, <code>'1'</code>, and <code>'2'</code>, but numeric index values of <code>1</code>, <code>2</code>, and <code>3</code>:",
            "<code>numbers ENUM('0','1','2')</code>",
            "To determine all possible values for an <code>ENUM</code> column, use <code>SHOW COLUMNS FROM tbl_name LIKE 'enum_col'</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/show-columns.html and parse the <code>ENUM</code> definition in the <code>Type</code> column of the output.",
            "In the C API, <code>ENUM</code> values are returned as strings. For information about using result set metadata to distinguish them from other strings, see C API Basic Data Structures&LINK&https://dev.mysql.com/doc/c-api/8.0/en/c-api-data-structures.html.",
            "If you insert an invalid value into an <code>ENUM</code> (that is, a string not present in the list of permitted values), the empty string is inserted instead as a special error value. This string can be distinguished from a \u201cnormal\u201d empty string by the fact that this string has the numeric value 0. See Index Values for Enumeration Literals&LINK&https://dev.mysql.com/doc/refman/8.0/en/enum.html#enum-indexes for details about the numeric indexes for the enumeration values. If strict SQL mode is enabled, attempts to insert invalid <code>ENUM</code> values result in an error.",
            "If an <code>ENUM</code> column is declared to permit <code>NULL</code>, the <code>NULL</code> value is a valid value for the column, and the default value is <code>NULL</code>. If an <code>ENUM</code> column is declared <code>NOT NULL</code>, its default value is the first element of the list of permitted values.",
            "<code>ENUM</code> values are sorted based on their index numbers, which depend on the order in which the enumeration members were listed in the column specification. For example, <code>'b'</code> sorts before <code>'a'</code> for <code>ENUM('b', 'a')</code>. The empty string sorts before nonempty strings, and <code>NULL</code> values sort before all other enumeration values.",
            "To prevent unexpected results when using the <code>ORDER BY</code> clause on an <code>ENUM</code> column, use one of these techniques:",
            "Specify the <code>ENUM</code> list in alphabetic order.",
            "<code>CREATE TABLE sizes (\n size ENUM('small', CONCAT('med','ium'), 'large')\n);</code>",
            "<code>SET @mysize = 'medium';\nCREATE TABLE sizes (\n size ENUM('small', @mysize, 'large')\n);</code>",
            "We strongly recommend that you do not use numbers as enumeration values, because it does not save on storage over the appropriate <code>TINYINT</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/integer-types.html or <code>SMALLINT</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/integer-types.html type, and it is easy to mix up the strings and the underlying number values (which might not be the same) if you quote the <code>ENUM</code> values incorrectly. If you do use a number as an enumeration value, always enclose it in quotation marks. If the quotation marks are omitted, the number is regarded as an index. See Handling of Enumeration Literals&LINK&https://dev.mysql.com/doc/refman/8.0/en/enum.html#enum-literals to see how even a quoted number could be mistakenly used as a numeric index value."
        ],
        "Tree": [
            "(columnDefinition (dataType ENUM (collectionOptions ( )) (charSet CHARACTER SET)) (columnConstraint COLLATE))",
            "(dataType ENUM (collectionOptions ( )) (charSet CHARACTER SET))",
            "(columnDefinition (dataType ENUM (collectionOptions ( ))) (columnConstraint COLLATE))",
            "(dataType ENUM (collectionOptions ( )))"
        ]
    },
    {
        "Type": [
            "SET ( ) CHARACTER SET charset_name COLLATE collation_name",
            "SET ( ) CHARACTER SET charset_name",
            "SET ( ) COLLATE collation_name",
            "SET ( )"
        ],
        "Description": [
                "Column definitions for character string data types <link><code>CHAR</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/char.html</link>, <link><code>VARCHAR</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/char.html</link>, the <link><code>TEXT</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/blob.html</link> types, <link><code>ENUM</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/enum.html</link>, <link><code>SET</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/set.html</link>, and any synonyms) can specify the column character set and collation:\n <code>CHARACTER SET</code> specifies the character set. If desired, a collation for the character set can be specified with the <code>COLLATE</code> attribute, along with any other attributes. For example:\n <code>CREATE TABLE t\n(\n    c1 VARCHAR(20) CHARACTER SET utf8mb4,\n    c2 TEXT CHARACTER SET latin1 COLLATE latin1_general_cs\n);</code>\n This table definition creates a column named <code>c1</code> that has a character set of <code>utf8mb4</code> with the default collation for that character set, and a column named <code>c2</code> that has a character set of <code>latin1</code> and a case-sensitive (<code>_cs</code>) collation.\n The rules for assigning the character set and collation when either or both of <code>CHARACTER SET</code> and the <code>COLLATE</code> attribute are missing are described in <link>Section 12.3.5, \u201cColumn Character Set and Collation\u201d&LINK&https://dev.mysql.com/doc/refman/8.0/en/charset-column.html</link>.\n <code>CHARSET</code> is a synonym for <code>CHARACTER SET</code>.\n Specifying the <code>CHARACTER SET binary</code> attribute for a character string data type causes the column to be created as the corresponding binary string data type: <link><code>CHAR</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/char.html</link> becomes <link><code>BINARY</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/binary-varbinary.html</link>, <link><code>VARCHAR</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/char.html</link> becomes <link><code>VARBINARY</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/binary-varbinary.html</link>, and <link><code>TEXT</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/blob.html</link> becomes <link><code>BLOB</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/blob.html</link>. For the <link><code>ENUM</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/enum.html</link> and <link><code>SET</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/set.html</link> data types, this does not occur; they are created as declared. Suppose that you specify a table using this definition:\n <code>CREATE TABLE t\n(\n  c1 VARCHAR(10) CHARACTER SET binary,\n  c2 TEXT CHARACTER SET binary,\n  c3 ENUM('a','b','c') CHARACTER SET binary\n);</code>\n The resulting table has this definition:\n <code>CREATE TABLE t\n(\n  c1 VARBINARY(10),\n  c2 BLOB,\n  c3 ENUM('a','b','c') CHARACTER SET binary\n);</code>\n The <code>BINARY</code> attribute is a nonstandard MySQL extension that is shorthand for specifying the binary (<code>_bin</code>) collation of the column character set (or of the table default character set if no column character set is specified). In this case, comparison and sorting are based on numeric character code values. Suppose that you specify a table using this definition:\n <code>CREATE TABLE t\n(\n  c1 VARCHAR(10) CHARACTER SET latin1 BINARY,\n  c2 TEXT BINARY\n) CHARACTER SET utf8mb4;</code>\n The resulting table has this definition:\n <code>CREATE TABLE t (\n  c1 VARCHAR(10) CHARACTER SET latin1 COLLATE latin1_bin,\n  c2 TEXT CHARACTER SET utf8mb4 COLLATE utf8mb4_bin\n) CHARACTER SET utf8mb4;</code>\n In MySQL 8.0, this nonstandard use of the <code>BINARY</code> attribute is ambiguous because the <code>utf8mb4</code> character set has multiple <code>_bin</code> collations. As of MySQL 8.0.17, the <code>BINARY</code> attribute is deprecated and you should expect support for it to be removed in a future version of MySQL. Applications should be adjusted to use an explicit <code>_bin</code> collation instead.\n The use of <code>BINARY</code> to specify a data type or character set remains unchanged.\n The <code>ASCII</code> attribute is shorthand for <code>CHARACTER SET latin1</code>. Supported in older MySQL releases, <code>ASCII</code> is deprecated in MySQL 8.0.28 and later; use <code>CHARACTER SET</code> instead.\n The <code>UNICODE</code> attribute is shorthand for <code>CHARACTER SET ucs2</code>. Supported in older MySQL releases, <code>UNICODE</code> is deprecated in MySQL 8.0.28 and later; use <code>CHARACTER SET</code> instead.\n Character column comparison and sorting are based on the collation assigned to the column. For the <link><code>CHAR</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/char.html</link>, <link><code>VARCHAR</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/char.html</link>, <link><code>TEXT</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/blob.html</link>, <link><code>ENUM</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/enum.html</link>, and <link><code>SET</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/set.html</link> data types, you can declare a column with a binary (<code>_bin</code>) collation or the <code>BINARY</code> attribute to cause comparison and sorting to use the underlying character code values rather than a lexical ordering.\n For additional information about use of character sets in MySQL, see <link>Chapter 12, Character Sets, Collations, Unicode&LINK&https://dev.mysql.com/doc/refman/8.0/en/charset.html</link>.\n",
                " <link><code>SET('value1','value2',...) [CHARACTER SET charset_name] [COLLATE collation_name]</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/set.html</link>\n A set. A string object that can have zero or more values, each of which must be chosen from the list of values <code>'value1'</code>, <code>'value2'</code>, <code>...</code> <link><code>SET</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/set.html</link> values are represented internally as integers.\n A <link><code>SET</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/set.html</link> column can have a maximum of 64 distinct members.\n The maximum supported length of an individual <code>SET</code> element is <code>M</code> <= 255 and (<code>M</code> x <code>w</code>) <= 1020, where <code>M</code> is the element literal length and <code>w</code> is the number of bytes required for the maximum-length character in the character set.\n"
        ],
        "Links": [
            "https://dev.mysql.com/doc/refman/8.0/en/set.html"
        ],
        "Compensate": [
            "A <code>SET</code> is a string object that can have zero or more values, each of which must be chosen from a list of permitted values specified when the table is created. <code>SET</code> column values that consist of multiple set members are specified with members separated by commas (<code>,</code>). A consequence of this is that <code>SET</code> member values should not themselves contain commas.",
            "For example, a column specified as <code>SET('one', 'two') NOT NULL</code> can have any of these values:",
            "A <code>SET</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/set.html column can have a maximum of 64 distinct members.",
            "Trailing spaces are automatically deleted from <code>SET</code> member values in the table definition when a table is created.",
            "See String Type Storage Requirements&LINK&https://dev.mysql.com/doc/refman/8.0/en/storage-requirements.html#data-types-storage-reqs-strings for storage requirements for the <code>SET</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/set.html type.",
            "See Section 13.3.1, \u201cString Data Type Syntax\u201d&LINK&https://dev.mysql.com/doc/refman/8.0/en/string-type-syntax.html for <code>SET</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/set.html type syntax and length limits.",
            "When retrieved, values stored in a <code>SET</code> column are displayed using the lettercase that was used in the column definition. Note that <code>SET</code> columns can be assigned a character set and collation. For binary or case-sensitive collations, lettercase is taken into account when assigning values to the column.",
            "MySQL stores <code>SET</code> values numerically, with the low-order bit of the stored value corresponding to the first set member. If you retrieve a <code>SET</code> value in a numeric context, the value retrieved has bits set corresponding to the set members that make up the column value. For example, you can retrieve numeric values from a <code>SET</code> column like this:",
            "If a number is stored into a <code>SET</code> column, the bits that are set in the binary representation of the number determine the set members in the column value. For a column specified as <code>SET('a','b','c','d')</code>, the members have the following decimal and binary values.",
            "If you assign a value of <code>9</code> to this column, that is <code>1001</code> in binary, so the first and fourth <code>SET</code> value members <code>'a'</code> and <code>'d'</code> are selected and the resulting value is <code>'a,d'</code>.",
            "For a value containing more than one <code>SET</code> element, it does not matter what order the elements are listed in when you insert the value. It also does not matter how many times a given element is listed in the value. When the value is retrieved later, each element in the value appears once, with elements listed according to the order in which they were specified at table creation time. Suppose that a column is specified as <code>SET('a','b','c','d')</code>:",
            "<code>mysql> CREATE TABLE myset (col SET('a', 'b', 'c', 'd'));</code>",
            "<code>mysql> SELECT col FROM myset;\n+------+\n| col |\n+------+\n| a,d |\n| a,d |\n| a,d |\n| a,d |\n| a,d |\n+------+\n5 rows in set (0.04 sec)</code>",
            "If you set a <code>SET</code> column to an unsupported value, the value is ignored and a warning is issued:",
            "<code>mysql> INSERT INTO myset (col) VALUES ('a,d,d,s');\nQuery OK, 1 row affected, 1 warning (0.03 sec)\nmysql> SHOW WARNINGS;\n+---------+------+------------------------------------------+\n| Level | Code | Message |\n+---------+------+------------------------------------------+\n| Warning | 1265 | Data truncated for column 'col' at row 1 |\n+---------+------+------------------------------------------+\n1 row in set (0.04 sec)\nmysql> SELECT col FROM myset;\n+------+\n| col |\n+------+\n| a,d |\n| a,d |\n| a,d |\n| a,d |\n| a,d |\n| a,d |\n+------+\n6 rows in set (0.01 sec)</code>",
            "If strict SQL mode is enabled, attempts to insert invalid <code>SET</code> values result in an error.",
            "<code>SET</code> values are sorted numerically. <code>NULL</code> values sort before non-<code>NULL</code> <code>SET</code> values.",
            "Functions such as <code>SUM()</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/aggregate-functions.html#function_sum or <code>AVG()</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/aggregate-functions.html#function_avg that expect a numeric argument cast the argument to a number if necessary. For <code>SET</code> values, the cast operation causes the numeric value to be used.",
            "Normally, you search for <code>SET</code> values using the <code>FIND_IN_SET()</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_find-in-set function or the <code>LIKE</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/string-comparison-functions.html#operator_like operator:",
            "To determine all possible values for a <code>SET</code> column, use <code>SHOW COLUMNS FROM tbl_name LIKE set_col</code> and parse the <code>SET</code> definition in the <code>Type</code> column of the output.",
            "In the C API, <code>SET</code> values are returned as strings. For information about using result set metadata to distinguish them from other strings, see C API Basic Data Structures&LINK&https://dev.mysql.com/doc/c-api/8.0/en/c-api-data-structures.html."
        ],
        "Tree": [
            "(columnDefinition (dataType SET (collectionOptions ( )) (charSet CHARACTER SET)) (columnConstraint COLLATE))",
            "(dataType SET (collectionOptions ( )) (charSet CHARACTER SET))",
            "(columnDefinition (dataType SET (collectionOptions ( ))) (columnConstraint COLLATE))",
            "(dataType SET (collectionOptions ( )))"
        ]
    },
    {
        "Type": [
            "POINT"
        ],
        "Description": [],
        "Links": [
            "https://dev.mysql.com/doc/refman/8.0/en/spatial-types.html",
            "https://dev.mysql.com/doc/refman/8.0/en/spatial-type-overview.html",
            "https://dev.mysql.com/doc/refman/8.0/en/gis-geometry-class-hierarchy.html",
            "https://dev.mysql.com/doc/refman/8.0/en/gis-class-geometry.html",
            "https://dev.mysql.com/doc/refman/8.0/en/gis-class-point.html",
            "https://dev.mysql.com/doc/refman/8.0/en/gis-data-formats.html",
            "https://dev.mysql.com/doc/refman/8.0/en/geometry-well-formedness-validity.html",
            "https://dev.mysql.com/doc/refman/8.0/en/creating-spatial-columns.html",
            "https://dev.mysql.com/doc/refman/8.0/en/populating-spatial-columns.html"
        ],
        "Compensate": [
            "<code>GEOMETRY</code>",
            "<code>POINT</code>",
            "<code>GEOMETRY</code> can store geometry values of any type. The other single-value types (<code>POINT</code>, <code>LINESTRING</code>, and <code>POLYGON</code>) restrict their values to a particular geometry type.",
            "<code>CREATE TABLE geom (g GEOMETRY);</code>",
            "<code>CREATE TABLE geom (\n p POINT SRID 0,\n g GEOMETRY NOT NULL SRID 4326\n);</code>",
            "<code>CREATE TABLE geom (g GEOMETRY NOT NULL SRID 4326);</code>",
            "<code>Geometry</code> (noninstantiable) <code>Point</code> (instantiable) <code>Curve</code> (noninstantiable) <code>LineString</code> (instantiable) <code>Line</code> <code>LinearRing</code> <code>Surface</code> (noninstantiable) <code>Polygon</code> (instantiable) <code>GeometryCollection</code> (instantiable) <code>MultiPoint</code> (instantiable) <code>MultiCurve</code> (noninstantiable) <code>MultiLineString</code> (instantiable) <code>MultiSurface</code> (noninstantiable) <code>MultiPolygon</code> (instantiable)",
            "<code>Geometry</code> is the base class. It is an abstract class. The instantiable subclasses of <code>Geometry</code> are restricted to zero-, one-, and two-dimensional geometric objects that exist in two-dimensional coordinate space. All instantiable geometry classes are defined so that valid instances of a geometry class are topologically closed (that is, all defined geometries include their boundary).",
            "The base <code>Geometry</code> class has subclasses for <code>Point</code>, <code>Curve</code>, <code>Surface</code>, and <code>GeometryCollection</code>:",
            "<code>Point</code> represents zero-dimensional objects.",
            "<code>Geometry</code>, <code>Curve</code>, <code>Surface</code>, <code>MultiCurve</code>, and <code>MultiSurface</code> are defined as noninstantiable classes. They define a common set of methods for their subclasses and are included for extensibility.",
            "<code>Point</code>, <code>LineString</code>, <code>Polygon</code>, <code>GeometryCollection</code>, <code>MultiPoint</code>, <code>MultiLineString</code>, and <code>MultiPolygon</code> are instantiable classes.",
            "<code>Geometry</code> is the root class of the hierarchy. It is a noninstantiable class but has a number of properties, described in the following list, that are common to all geometry values created from any of the <code>Geometry</code> subclasses. Particular subclasses have their own specific properties, described later.",
            "Its dimension. A geometry can have a dimension of \u22121, 0, 1, or 2: \u22121 for an empty geometry. 0 for a geometry with no length and no area. 1 for a geometry with nonzero length and zero area. 2 for a geometry with nonzero area. <code>Point</code> objects have a dimension of zero. <code>LineString</code> objects have a dimension of 1. <code>Polygon</code> objects have a dimension of 2. The dimensions of <code>MultiPoint</code>, <code>MultiLineString</code>, and <code>MultiPolygon</code> objects are the same as the dimensions of the elements they consist of.",
            "A <code>Point</code> is a geometry that represents a single location in coordinate space.",
            "<code>Point</code> Examples",
            "Imagine a large-scale map of the world with many cities. A <code>Point</code> object could represent each city.",
            "On a city map, a <code>Point</code> object could represent a bus stop.",
            "<code>Point</code> Properties",
            "<code>Point</code> is defined as a zero-dimensional geometry.",
            "The boundary of a <code>Point</code> is the empty set.",
            "A <code>Point</code>: <code>POINT(15 20)</code> The point coordinates are specified with no separating comma. This differs from the syntax for the SQL <code>Point()</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/gis-mysql-specific-functions.html#function_point function, which requires a comma between the coordinates. Take care to use the syntax appropriate to the context of a given spatial operation. For example, the following statements both use <code>ST_X()</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/gis-point-property-functions.html#function_st-x to extract the X-coordinate from a <code>Point</code> object. The first produces the object directly using the <code>Point()</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/gis-mysql-specific-functions.html#function_point function. The second uses a WKT representation converted to a <code>Point</code> with <code>ST_GeomFromText()</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/gis-wkt-functions.html#function_st-geomfromtext. <code>mysql> SELECT ST_X(Point(15, 20)); +---------------------+ | ST_X(POINT(15, 20)) | +---------------------+ | 15 | +---------------------+ mysql> SELECT ST_X(ST_GeomFromText('POINT(15 20)')); +---------------------------------------+ | ST_X(ST_GeomFromText('POINT(15 20)')) | +---------------------------------------+ | 15 | +---------------------------------------+</code>",
            "<code><code>POINT(15 20)</code></code>",
            "<code><code>mysql> SELECT ST_X(Point(15, 20)); +---------------------+ | ST_X(POINT(15, 20)) | +---------------------+ | 15 | +---------------------+ mysql> SELECT ST_X(ST_GeomFromText('POINT(15 20)')); +---------------------------------------+ | ST_X(ST_GeomFromText('POINT(15 20)')) | +---------------------------------------+ | 15 | +---------------------------------------+</code></code>",
            "A <code>MultiPoint</code> with three <code>Point</code> values: <code>MULTIPOINT(0 0, 20 20, 60 60)</code> Spatial functions such as <code>ST_MPointFromText()</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/gis-wkt-functions.html#function_st-mpointfromtext and <code>ST_GeomFromText()</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/gis-wkt-functions.html#function_st-geomfromtext that accept WKT-format representations of <code>MultiPoint</code> values permit individual points within values to be surrounded by parentheses. For example, both of the following function calls are valid: <code>ST_MPointFromText('MULTIPOINT (1 1, 2 2, 3 3)') ST_MPointFromText('MULTIPOINT ((1 1), (2 2), (3 3))')</code>",
            "A <code>GeometryCollection</code> consisting of two <code>Point</code> values and one <code>LineString</code>: <code>GEOMETRYCOLLECTION(POINT(10 10), POINT(30 30), LINESTRING(15 15, 20 20))</code>",
            "<code><code>GEOMETRYCOLLECTION(POINT(10 10), POINT(30 30), LINESTRING(15 15, 20 20))</code></code>",
            "For example, a WKB value that corresponds to <code>POINT(1 -1)</code> consists of this sequence of 21 bytes, each represented by two hexadecimal digits:",
            "The WKB type is a code that indicates the geometry type. MySQL uses values from 1 through 7 to indicate <code>Point</code>, <code>LineString</code>, <code>Polygon</code>, <code>MultiPoint</code>, <code>MultiLineString</code>, <code>MultiPolygon</code>, and <code>GeometryCollection</code>.",
            "A <code>Point</code> value has X and Y coordinates, each represented as a double-precision value.",
            "MySQL supports geometry types of <code>Point</code>, <code>LineString</code>, <code>Polygon</code>, <code>MultiPoint</code>, <code>MultiLineString</code>, <code>MultiPolygon</code>, and <code>GeometryCollection</code>. Other geometry types are not supported.",
            "<code>mysql> SET @g = ST_GeomFromText('POINT(1 -1)');\nmysql> SELECT LENGTH(@g);\n+------------+\n| LENGTH(@g) |\n+------------+\n| 25 |\n+------------+\nmysql> SELECT HEX(@g);\n+----------------------------------------------------+\n| HEX(@g) |\n+----------------------------------------------------+\n| 000000000101000000000000000000F03F000000000000F0BF |\n+----------------------------------------------------+</code>",
            "4 bytes for integer type information (1 = <code>Point</code>)",
            "Use the <code>CREATE TABLE</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/create-table.html statement to create a table with a spatial column: <code>CREATE TABLE geom (g GEOMETRY);</code>",
            "<code><code>CREATE TABLE geom (g GEOMETRY);</code></code>",
            "Use the <code>ALTER TABLE</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/alter-table.html statement to add or drop a spatial column to or from an existing table: <code>ALTER TABLE geom ADD pt POINT; ALTER TABLE geom DROP pt;</code>",
            "<code><code>ALTER TABLE geom ADD pt POINT; ALTER TABLE geom DROP pt;</code></code>",
            "Perform the conversion directly in the <code>INSERT</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/insert.html statement: <code>INSERT INTO geom VALUES (ST_GeomFromText('POINT(1 1)')); SET @g = 'POINT(1 1)'; INSERT INTO geom VALUES (ST_GeomFromText(@g));</code>",
            "<code><code>INSERT INTO geom VALUES (ST_GeomFromText('POINT(1 1)')); SET @g = 'POINT(1 1)'; INSERT INTO geom VALUES (ST_GeomFromText(@g));</code></code>",
            "Perform the conversion prior to the <code>INSERT</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/insert.html: <code>SET @g = ST_GeomFromText('POINT(1 1)'); INSERT INTO geom VALUES (@g);</code>",
            "<code><code>SET @g = ST_GeomFromText('POINT(1 1)'); INSERT INTO geom VALUES (@g);</code></code>",
            "<code>SET @g = 'LINESTRING(0 0,1 1,2 2)';\nINSERT INTO geom VALUES (ST_GeomFromText(@g));\nSET @g = 'POLYGON((0 0,10 0,10 10,0 10,0 0),(5 5,7 5,7 7,5 7, 5 5))';\nINSERT INTO geom VALUES (ST_GeomFromText(@g));\nSET @g =\n'GEOMETRYCOLLECTION(POINT(1 1),LINESTRING(0 0,1 1,2 2,3 3,4 4))';\nINSERT INTO geom VALUES (ST_GeomFromText(@g));</code>",
            "<code>SET @g = 'POINT(1 1)';\nINSERT INTO geom VALUES (ST_PointFromText(@g));\nSET @g = 'LINESTRING(0 0,1 1,2 2)';\nINSERT INTO geom VALUES (ST_LineStringFromText(@g));\nSET @g = 'POLYGON((0 0,10 0,10 10,0 10,0 0),(5 5,7 5,7 7,5 7, 5 5))';\nINSERT INTO geom VALUES (ST_PolygonFromText(@g));\nSET @g =\n'GEOMETRYCOLLECTION(POINT(1 1),LINESTRING(0 0,1 1,2 2,3 3,4 4))';\nINSERT INTO geom VALUES (ST_GeomCollFromText(@g));</code>",
            "Inserting a <code>POINT(1 1)</code> value with hex literal syntax: <code>INSERT INTO geom VALUES (ST_GeomFromWKB(X'0101000000000000000000F03F000000000000F03F'));</code>"
        ],
        "Tree": [
            "(dataType POINT)"
        ]
    },
    {
        "Type": [
            "LineString"
        ],
        "Description": [],
        "Links": [
            "https://dev.mysql.com/doc/refman/8.0/en/spatial-types.html",
            "https://dev.mysql.com/doc/refman/8.0/en/spatial-type-overview.html",
            "https://dev.mysql.com/doc/refman/8.0/en/gis-geometry-class-hierarchy.html",
            "https://dev.mysql.com/doc/refman/8.0/en/gis-class-geometry.html",
            "https://dev.mysql.com/doc/refman/8.0/en/gis-class-curve.html",
            "https://dev.mysql.com/doc/refman/8.0/en/gis-class-linestring.html",
            "https://dev.mysql.com/doc/refman/8.0/en/gis-data-formats.html",
            "https://dev.mysql.com/doc/refman/8.0/en/geometry-well-formedness-validity.html",
            "https://dev.mysql.com/doc/refman/8.0/en/creating-spatial-columns.html",
            "https://dev.mysql.com/doc/refman/8.0/en/populating-spatial-columns.html"
        ],
        "Compensate": [
            "<code>GEOMETRY</code>",
            "<code>LINESTRING</code>",
            "<code>GEOMETRY</code> can store geometry values of any type. The other single-value types (<code>POINT</code>, <code>LINESTRING</code>, and <code>POLYGON</code>) restrict their values to a particular geometry type.",
            "<code>CREATE TABLE geom (g GEOMETRY);</code>",
            "<code>CREATE TABLE geom (\n p POINT SRID 0,\n g GEOMETRY NOT NULL SRID 4326\n);</code>",
            "<code>CREATE TABLE geom (g GEOMETRY NOT NULL SRID 4326);</code>",
            "<code>Geometry</code> (noninstantiable) <code>Point</code> (instantiable) <code>Curve</code> (noninstantiable) <code>LineString</code> (instantiable) <code>Line</code> <code>LinearRing</code> <code>Surface</code> (noninstantiable) <code>Polygon</code> (instantiable) <code>GeometryCollection</code> (instantiable) <code>MultiPoint</code> (instantiable) <code>MultiCurve</code> (noninstantiable) <code>MultiLineString</code> (instantiable) <code>MultiSurface</code> (noninstantiable) <code>MultiPolygon</code> (instantiable)",
            "<code>Geometry</code> is the base class. It is an abstract class. The instantiable subclasses of <code>Geometry</code> are restricted to zero-, one-, and two-dimensional geometric objects that exist in two-dimensional coordinate space. All instantiable geometry classes are defined so that valid instances of a geometry class are topologically closed (that is, all defined geometries include their boundary).",
            "The base <code>Geometry</code> class has subclasses for <code>Point</code>, <code>Curve</code>, <code>Surface</code>, and <code>GeometryCollection</code>:",
            "<code>Curve</code> represents one-dimensional objects, and has subclass <code>LineString</code>, with sub-subclasses <code>Line</code> and <code>LinearRing</code>.",
            "<code>Geometry</code>, <code>Curve</code>, <code>Surface</code>, <code>MultiCurve</code>, and <code>MultiSurface</code> are defined as noninstantiable classes. They define a common set of methods for their subclasses and are included for extensibility.",
            "<code>Point</code>, <code>LineString</code>, <code>Polygon</code>, <code>GeometryCollection</code>, <code>MultiPoint</code>, <code>MultiLineString</code>, and <code>MultiPolygon</code> are instantiable classes.",
            "<code>Geometry</code> is the root class of the hierarchy. It is a noninstantiable class but has a number of properties, described in the following list, that are common to all geometry values created from any of the <code>Geometry</code> subclasses. Particular subclasses have their own specific properties, described later.",
            "Whether the value is simple or nonsimple. Geometry values of types (<code>LineString</code>, <code>MultiPoint</code>, <code>MultiLineString</code>) are either simple or nonsimple. Each type determines its own assertions for being simple or nonsimple.",
            "Whether the value is closed or not closed. Geometry values of types (<code>LineString</code>, <code>MultiString</code>) are either closed or not closed. Each type determines its own assertions for being closed or not closed.",
            "Its dimension. A geometry can have a dimension of \u22121, 0, 1, or 2: \u22121 for an empty geometry. 0 for a geometry with no length and no area. 1 for a geometry with nonzero length and zero area. 2 for a geometry with nonzero area. <code>Point</code> objects have a dimension of zero. <code>LineString</code> objects have a dimension of 1. <code>Polygon</code> objects have a dimension of 2. The dimensions of <code>MultiPoint</code>, <code>MultiLineString</code>, and <code>MultiPolygon</code> objects are the same as the dimensions of the elements they consist of.",
            "A <code>Curve</code> is a one-dimensional geometry, usually represented by a sequence of points. Particular subclasses of <code>Curve</code> define the type of interpolation between points. <code>Curve</code> is a noninstantiable class.",
            "<code>Curve</code> Properties",
            "A <code>Curve</code> has the coordinates of its points.",
            "A <code>Curve</code> is defined as a one-dimensional geometry.",
            "A <code>Curve</code> is simple if it does not pass through the same point twice, with the exception that a curve can still be simple if the start and end points are the same.",
            "A <code>Curve</code> is closed if its start point is equal to its endpoint.",
            "The boundary of a closed <code>Curve</code> is empty.",
            "The boundary of a nonclosed <code>Curve</code> consists of its two endpoints.",
            "A <code>Curve</code> that is simple and closed is a <code>LinearRing</code>.",
            "A <code>LineString</code> is a <code>Curve</code> with linear interpolation between points.",
            "<code>LineString</code> Examples",
            "On a world map, <code>LineString</code> objects could represent rivers.",
            "In a city map, <code>LineString</code> objects could represent streets.",
            "<code>LineString</code> Properties",
            "A <code>LineString</code> has coordinates of segments, defined by each consecutive pair of points.",
            "A <code>LineString</code> is a <code>Line</code> if it consists of exactly two points.",
            "A <code>LineString</code> is a <code>LinearRing</code> if it is both closed and simple.",
            "A <code>LineString</code> with four points: <code>LINESTRING(0 0, 10 10, 20 25, 50 60)</code> The point coordinate pairs are separated by commas.",
            "<code><code>LINESTRING(0 0, 10 10, 20 25, 50 60)</code></code>",
            "A <code>MultiLineString</code> with two <code>LineString</code> values: <code>MULTILINESTRING((10 10, 20 20), (15 15, 30 15))</code>",
            "A <code>GeometryCollection</code> consisting of two <code>Point</code> values and one <code>LineString</code>: <code>GEOMETRYCOLLECTION(POINT(10 10), POINT(30 30), LINESTRING(15 15, 20 20))</code>",
            "<code><code>GEOMETRYCOLLECTION(POINT(10 10), POINT(30 30), LINESTRING(15 15, 20 20))</code></code>",
            "The WKB type is a code that indicates the geometry type. MySQL uses values from 1 through 7 to indicate <code>Point</code>, <code>LineString</code>, <code>Polygon</code>, <code>MultiPoint</code>, <code>MultiLineString</code>, <code>MultiPolygon</code>, and <code>GeometryCollection</code>.",
            "MySQL supports geometry types of <code>Point</code>, <code>LineString</code>, <code>Polygon</code>, <code>MultiPoint</code>, <code>MultiLineString</code>, <code>MultiPolygon</code>, and <code>GeometryCollection</code>. Other geometry types are not supported.",
            "Use the <code>CREATE TABLE</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/create-table.html statement to create a table with a spatial column: <code>CREATE TABLE geom (g GEOMETRY);</code>",
            "<code><code>CREATE TABLE geom (g GEOMETRY);</code></code>",
            "<code>SET @g = 'LINESTRING(0 0,1 1,2 2)';\nINSERT INTO geom VALUES (ST_GeomFromText(@g));\nSET @g = 'POLYGON((0 0,10 0,10 10,0 10,0 0),(5 5,7 5,7 7,5 7, 5 5))';\nINSERT INTO geom VALUES (ST_GeomFromText(@g));\nSET @g =\n'GEOMETRYCOLLECTION(POINT(1 1),LINESTRING(0 0,1 1,2 2,3 3,4 4))';\nINSERT INTO geom VALUES (ST_GeomFromText(@g));</code>",
            "<code>SET @g = 'POINT(1 1)';\nINSERT INTO geom VALUES (ST_PointFromText(@g));\nSET @g = 'LINESTRING(0 0,1 1,2 2)';\nINSERT INTO geom VALUES (ST_LineStringFromText(@g));\nSET @g = 'POLYGON((0 0,10 0,10 10,0 10,0 0),(5 5,7 5,7 7,5 7, 5 5))';\nINSERT INTO geom VALUES (ST_PolygonFromText(@g));\nSET @g =\n'GEOMETRYCOLLECTION(POINT(1 1),LINESTRING(0 0,1 1,2 2,3 3,4 4))';\nINSERT INTO geom VALUES (ST_GeomCollFromText(@g));</code>"
        ],
        "Tree": [
            "(dataType LineString)"
        ]
    },
    {
        "Type": [
            "Line"
        ],
        "Description": [],
        "Links": [
            "https://dev.mysql.com/doc/refman/8.0/en/spatial-types.html",
            "https://dev.mysql.com/doc/refman/8.0/en/spatial-type-overview.html",
            "https://dev.mysql.com/doc/refman/8.0/en/gis-geometry-class-hierarchy.html",
            "https://dev.mysql.com/doc/refman/8.0/en/gis-class-geometry.html",
            "https://dev.mysql.com/doc/refman/8.0/en/gis-class-curve.html",
            "https://dev.mysql.com/doc/refman/8.0/en/gis-class-linestring.html",
            "https://dev.mysql.com/doc/refman/8.0/en/gis-data-formats.html",
            "https://dev.mysql.com/doc/refman/8.0/en/geometry-well-formedness-validity.html",
            "https://dev.mysql.com/doc/refman/8.0/en/creating-spatial-columns.html",
            "https://dev.mysql.com/doc/refman/8.0/en/populating-spatial-columns.html"
        ],
        "Compensate": [
            "<code>GEOMETRY</code>",
            "<code>LINESTRING</code>",
            "<code>GEOMETRY</code> can store geometry values of any type. The other single-value types (<code>POINT</code>, <code>LINESTRING</code>, and <code>POLYGON</code>) restrict their values to a particular geometry type.",
            "<code>CREATE TABLE geom (g GEOMETRY);</code>",
            "<code>CREATE TABLE geom (\n p POINT SRID 0,\n g GEOMETRY NOT NULL SRID 4326\n);</code>",
            "<code>CREATE TABLE geom (g GEOMETRY NOT NULL SRID 4326);</code>",
            "<code>Geometry</code> (noninstantiable) <code>Point</code> (instantiable) <code>Curve</code> (noninstantiable) <code>LineString</code> (instantiable) <code>Line</code> <code>LinearRing</code> <code>Surface</code> (noninstantiable) <code>Polygon</code> (instantiable) <code>GeometryCollection</code> (instantiable) <code>MultiPoint</code> (instantiable) <code>MultiCurve</code> (noninstantiable) <code>MultiLineString</code> (instantiable) <code>MultiSurface</code> (noninstantiable) <code>MultiPolygon</code> (instantiable)",
            "<code>Geometry</code> is the base class. It is an abstract class. The instantiable subclasses of <code>Geometry</code> are restricted to zero-, one-, and two-dimensional geometric objects that exist in two-dimensional coordinate space. All instantiable geometry classes are defined so that valid instances of a geometry class are topologically closed (that is, all defined geometries include their boundary).",
            "The base <code>Geometry</code> class has subclasses for <code>Point</code>, <code>Curve</code>, <code>Surface</code>, and <code>GeometryCollection</code>:",
            "<code>Curve</code> represents one-dimensional objects, and has subclass <code>LineString</code>, with sub-subclasses <code>Line</code> and <code>LinearRing</code>.",
            "<code>Geometry</code>, <code>Curve</code>, <code>Surface</code>, <code>MultiCurve</code>, and <code>MultiSurface</code> are defined as noninstantiable classes. They define a common set of methods for their subclasses and are included for extensibility.",
            "<code>Point</code>, <code>LineString</code>, <code>Polygon</code>, <code>GeometryCollection</code>, <code>MultiPoint</code>, <code>MultiLineString</code>, and <code>MultiPolygon</code> are instantiable classes.",
            "<code>Geometry</code> is the root class of the hierarchy. It is a noninstantiable class but has a number of properties, described in the following list, that are common to all geometry values created from any of the <code>Geometry</code> subclasses. Particular subclasses have their own specific properties, described later.",
            "Whether the value is simple or nonsimple. Geometry values of types (<code>LineString</code>, <code>MultiPoint</code>, <code>MultiLineString</code>) are either simple or nonsimple. Each type determines its own assertions for being simple or nonsimple.",
            "Whether the value is closed or not closed. Geometry values of types (<code>LineString</code>, <code>MultiString</code>) are either closed or not closed. Each type determines its own assertions for being closed or not closed.",
            "Its dimension. A geometry can have a dimension of \u22121, 0, 1, or 2: \u22121 for an empty geometry. 0 for a geometry with no length and no area. 1 for a geometry with nonzero length and zero area. 2 for a geometry with nonzero area. <code>Point</code> objects have a dimension of zero. <code>LineString</code> objects have a dimension of 1. <code>Polygon</code> objects have a dimension of 2. The dimensions of <code>MultiPoint</code>, <code>MultiLineString</code>, and <code>MultiPolygon</code> objects are the same as the dimensions of the elements they consist of.",
            "A <code>Curve</code> is a one-dimensional geometry, usually represented by a sequence of points. Particular subclasses of <code>Curve</code> define the type of interpolation between points. <code>Curve</code> is a noninstantiable class.",
            "<code>Curve</code> Properties",
            "A <code>Curve</code> has the coordinates of its points.",
            "A <code>Curve</code> is defined as a one-dimensional geometry.",
            "A <code>Curve</code> is simple if it does not pass through the same point twice, with the exception that a curve can still be simple if the start and end points are the same.",
            "A <code>Curve</code> is closed if its start point is equal to its endpoint.",
            "The boundary of a closed <code>Curve</code> is empty.",
            "The boundary of a nonclosed <code>Curve</code> consists of its two endpoints.",
            "A <code>Curve</code> that is simple and closed is a <code>LinearRing</code>.",
            "A <code>LineString</code> is a <code>Curve</code> with linear interpolation between points.",
            "<code>LineString</code> Examples",
            "On a world map, <code>LineString</code> objects could represent rivers.",
            "In a city map, <code>LineString</code> objects could represent streets.",
            "<code>LineString</code> Properties",
            "A <code>LineString</code> has coordinates of segments, defined by each consecutive pair of points.",
            "A <code>LineString</code> is a <code>Line</code> if it consists of exactly two points.",
            "A <code>LineString</code> is a <code>LinearRing</code> if it is both closed and simple.",
            "A <code>LineString</code> with four points: <code>LINESTRING(0 0, 10 10, 20 25, 50 60)</code> The point coordinate pairs are separated by commas.",
            "<code><code>LINESTRING(0 0, 10 10, 20 25, 50 60)</code></code>",
            "A <code>MultiLineString</code> with two <code>LineString</code> values: <code>MULTILINESTRING((10 10, 20 20), (15 15, 30 15))</code>",
            "A <code>GeometryCollection</code> consisting of two <code>Point</code> values and one <code>LineString</code>: <code>GEOMETRYCOLLECTION(POINT(10 10), POINT(30 30), LINESTRING(15 15, 20 20))</code>",
            "<code><code>GEOMETRYCOLLECTION(POINT(10 10), POINT(30 30), LINESTRING(15 15, 20 20))</code></code>",
            "The WKB type is a code that indicates the geometry type. MySQL uses values from 1 through 7 to indicate <code>Point</code>, <code>LineString</code>, <code>Polygon</code>, <code>MultiPoint</code>, <code>MultiLineString</code>, <code>MultiPolygon</code>, and <code>GeometryCollection</code>.",
            "MySQL supports geometry types of <code>Point</code>, <code>LineString</code>, <code>Polygon</code>, <code>MultiPoint</code>, <code>MultiLineString</code>, <code>MultiPolygon</code>, and <code>GeometryCollection</code>. Other geometry types are not supported.",
            "Use the <code>CREATE TABLE</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/create-table.html statement to create a table with a spatial column: <code>CREATE TABLE geom (g GEOMETRY);</code>",
            "<code><code>CREATE TABLE geom (g GEOMETRY);</code></code>",
            "<code>SET @g = 'LINESTRING(0 0,1 1,2 2)';\nINSERT INTO geom VALUES (ST_GeomFromText(@g));\nSET @g = 'POLYGON((0 0,10 0,10 10,0 10,0 0),(5 5,7 5,7 7,5 7, 5 5))';\nINSERT INTO geom VALUES (ST_GeomFromText(@g));\nSET @g =\n'GEOMETRYCOLLECTION(POINT(1 1),LINESTRING(0 0,1 1,2 2,3 3,4 4))';\nINSERT INTO geom VALUES (ST_GeomFromText(@g));</code>",
            "<code>SET @g = 'POINT(1 1)';\nINSERT INTO geom VALUES (ST_PointFromText(@g));\nSET @g = 'LINESTRING(0 0,1 1,2 2)';\nINSERT INTO geom VALUES (ST_LineStringFromText(@g));\nSET @g = 'POLYGON((0 0,10 0,10 10,0 10,0 0),(5 5,7 5,7 7,5 7, 5 5))';\nINSERT INTO geom VALUES (ST_PolygonFromText(@g));\nSET @g =\n'GEOMETRYCOLLECTION(POINT(1 1),LINESTRING(0 0,1 1,2 2,3 3,4 4))';\nINSERT INTO geom VALUES (ST_GeomCollFromText(@g));</code>"
        ],
        "Tree": [
            "(dataType Line)"
        ]
    },
    {
        "Type": [
            "LinearRing"
        ],
        "Description": [],
        "Links": [
            "https://dev.mysql.com/doc/refman/8.0/en/spatial-types.html",
            "https://dev.mysql.com/doc/refman/8.0/en/spatial-type-overview.html",
            "https://dev.mysql.com/doc/refman/8.0/en/gis-geometry-class-hierarchy.html",
            "https://dev.mysql.com/doc/refman/8.0/en/gis-class-geometry.html",
            "https://dev.mysql.com/doc/refman/8.0/en/gis-class-curve.html",
            "https://dev.mysql.com/doc/refman/8.0/en/gis-class-linestring.html",
            "https://dev.mysql.com/doc/refman/8.0/en/gis-data-formats.html",
            "https://dev.mysql.com/doc/refman/8.0/en/geometry-well-formedness-validity.html",
            "https://dev.mysql.com/doc/refman/8.0/en/creating-spatial-columns.html",
            "https://dev.mysql.com/doc/refman/8.0/en/populating-spatial-columns.html"
        ],
        "Compensate": [
            "<code>GEOMETRY</code>",
            "<code>LINESTRING</code>",
            "<code>GEOMETRY</code> can store geometry values of any type. The other single-value types (<code>POINT</code>, <code>LINESTRING</code>, and <code>POLYGON</code>) restrict their values to a particular geometry type.",
            "<code>CREATE TABLE geom (g GEOMETRY);</code>",
            "<code>CREATE TABLE geom (\n p POINT SRID 0,\n g GEOMETRY NOT NULL SRID 4326\n);</code>",
            "<code>CREATE TABLE geom (g GEOMETRY NOT NULL SRID 4326);</code>",
            "<code>Geometry</code> (noninstantiable) <code>Point</code> (instantiable) <code>Curve</code> (noninstantiable) <code>LineString</code> (instantiable) <code>Line</code> <code>LinearRing</code> <code>Surface</code> (noninstantiable) <code>Polygon</code> (instantiable) <code>GeometryCollection</code> (instantiable) <code>MultiPoint</code> (instantiable) <code>MultiCurve</code> (noninstantiable) <code>MultiLineString</code> (instantiable) <code>MultiSurface</code> (noninstantiable) <code>MultiPolygon</code> (instantiable)",
            "<code>Geometry</code> is the base class. It is an abstract class. The instantiable subclasses of <code>Geometry</code> are restricted to zero-, one-, and two-dimensional geometric objects that exist in two-dimensional coordinate space. All instantiable geometry classes are defined so that valid instances of a geometry class are topologically closed (that is, all defined geometries include their boundary).",
            "The base <code>Geometry</code> class has subclasses for <code>Point</code>, <code>Curve</code>, <code>Surface</code>, and <code>GeometryCollection</code>:",
            "<code>Curve</code> represents one-dimensional objects, and has subclass <code>LineString</code>, with sub-subclasses <code>Line</code> and <code>LinearRing</code>.",
            "<code>Geometry</code>, <code>Curve</code>, <code>Surface</code>, <code>MultiCurve</code>, and <code>MultiSurface</code> are defined as noninstantiable classes. They define a common set of methods for their subclasses and are included for extensibility.",
            "<code>Point</code>, <code>LineString</code>, <code>Polygon</code>, <code>GeometryCollection</code>, <code>MultiPoint</code>, <code>MultiLineString</code>, and <code>MultiPolygon</code> are instantiable classes.",
            "<code>Geometry</code> is the root class of the hierarchy. It is a noninstantiable class but has a number of properties, described in the following list, that are common to all geometry values created from any of the <code>Geometry</code> subclasses. Particular subclasses have their own specific properties, described later.",
            "Whether the value is simple or nonsimple. Geometry values of types (<code>LineString</code>, <code>MultiPoint</code>, <code>MultiLineString</code>) are either simple or nonsimple. Each type determines its own assertions for being simple or nonsimple.",
            "Whether the value is closed or not closed. Geometry values of types (<code>LineString</code>, <code>MultiString</code>) are either closed or not closed. Each type determines its own assertions for being closed or not closed.",
            "Its dimension. A geometry can have a dimension of \u22121, 0, 1, or 2: \u22121 for an empty geometry. 0 for a geometry with no length and no area. 1 for a geometry with nonzero length and zero area. 2 for a geometry with nonzero area. <code>Point</code> objects have a dimension of zero. <code>LineString</code> objects have a dimension of 1. <code>Polygon</code> objects have a dimension of 2. The dimensions of <code>MultiPoint</code>, <code>MultiLineString</code>, and <code>MultiPolygon</code> objects are the same as the dimensions of the elements they consist of.",
            "A <code>Curve</code> is a one-dimensional geometry, usually represented by a sequence of points. Particular subclasses of <code>Curve</code> define the type of interpolation between points. <code>Curve</code> is a noninstantiable class.",
            "<code>Curve</code> Properties",
            "A <code>Curve</code> has the coordinates of its points.",
            "A <code>Curve</code> is defined as a one-dimensional geometry.",
            "A <code>Curve</code> is simple if it does not pass through the same point twice, with the exception that a curve can still be simple if the start and end points are the same.",
            "A <code>Curve</code> is closed if its start point is equal to its endpoint.",
            "The boundary of a closed <code>Curve</code> is empty.",
            "The boundary of a nonclosed <code>Curve</code> consists of its two endpoints.",
            "A <code>Curve</code> that is simple and closed is a <code>LinearRing</code>.",
            "A <code>LineString</code> is a <code>Curve</code> with linear interpolation between points.",
            "<code>LineString</code> Examples",
            "On a world map, <code>LineString</code> objects could represent rivers.",
            "In a city map, <code>LineString</code> objects could represent streets.",
            "<code>LineString</code> Properties",
            "A <code>LineString</code> has coordinates of segments, defined by each consecutive pair of points.",
            "A <code>LineString</code> is a <code>Line</code> if it consists of exactly two points.",
            "A <code>LineString</code> is a <code>LinearRing</code> if it is both closed and simple.",
            "A <code>LineString</code> with four points: <code>LINESTRING(0 0, 10 10, 20 25, 50 60)</code> The point coordinate pairs are separated by commas.",
            "<code><code>LINESTRING(0 0, 10 10, 20 25, 50 60)</code></code>",
            "A <code>MultiLineString</code> with two <code>LineString</code> values: <code>MULTILINESTRING((10 10, 20 20), (15 15, 30 15))</code>",
            "A <code>GeometryCollection</code> consisting of two <code>Point</code> values and one <code>LineString</code>: <code>GEOMETRYCOLLECTION(POINT(10 10), POINT(30 30), LINESTRING(15 15, 20 20))</code>",
            "<code><code>GEOMETRYCOLLECTION(POINT(10 10), POINT(30 30), LINESTRING(15 15, 20 20))</code></code>",
            "The WKB type is a code that indicates the geometry type. MySQL uses values from 1 through 7 to indicate <code>Point</code>, <code>LineString</code>, <code>Polygon</code>, <code>MultiPoint</code>, <code>MultiLineString</code>, <code>MultiPolygon</code>, and <code>GeometryCollection</code>.",
            "MySQL supports geometry types of <code>Point</code>, <code>LineString</code>, <code>Polygon</code>, <code>MultiPoint</code>, <code>MultiLineString</code>, <code>MultiPolygon</code>, and <code>GeometryCollection</code>. Other geometry types are not supported.",
            "Use the <code>CREATE TABLE</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/create-table.html statement to create a table with a spatial column: <code>CREATE TABLE geom (g GEOMETRY);</code>",
            "<code><code>CREATE TABLE geom (g GEOMETRY);</code></code>",
            "<code>SET @g = 'LINESTRING(0 0,1 1,2 2)';\nINSERT INTO geom VALUES (ST_GeomFromText(@g));\nSET @g = 'POLYGON((0 0,10 0,10 10,0 10,0 0),(5 5,7 5,7 7,5 7, 5 5))';\nINSERT INTO geom VALUES (ST_GeomFromText(@g));\nSET @g =\n'GEOMETRYCOLLECTION(POINT(1 1),LINESTRING(0 0,1 1,2 2,3 3,4 4))';\nINSERT INTO geom VALUES (ST_GeomFromText(@g));</code>",
            "<code>SET @g = 'POINT(1 1)';\nINSERT INTO geom VALUES (ST_PointFromText(@g));\nSET @g = 'LINESTRING(0 0,1 1,2 2)';\nINSERT INTO geom VALUES (ST_LineStringFromText(@g));\nSET @g = 'POLYGON((0 0,10 0,10 10,0 10,0 0),(5 5,7 5,7 7,5 7, 5 5))';\nINSERT INTO geom VALUES (ST_PolygonFromText(@g));\nSET @g =\n'GEOMETRYCOLLECTION(POINT(1 1),LINESTRING(0 0,1 1,2 2,3 3,4 4))';\nINSERT INTO geom VALUES (ST_GeomCollFromText(@g));</code>"
        ],
        "Tree": [
            "(dataType LinearRing)"
        ]
    },
    {
        "Type": [
            "POLYGON"
        ],
        "Description": [],
        "Links": [
            "https://dev.mysql.com/doc/refman/8.0/en/spatial-types.html",
            "https://dev.mysql.com/doc/refman/8.0/en/spatial-type-overview.html",
            "https://dev.mysql.com/doc/refman/8.0/en/gis-geometry-class-hierarchy.html",
            "https://dev.mysql.com/doc/refman/8.0/en/gis-class-geometry.html",
            "https://dev.mysql.com/doc/refman/8.0/en/gis-class-surface.html",
            "https://dev.mysql.com/doc/refman/8.0/en/gis-class-polygon.html",
            "https://dev.mysql.com/doc/refman/8.0/en/gis-data-formats.html",
            "https://dev.mysql.com/doc/refman/8.0/en/geometry-well-formedness-validity.html",
            "https://dev.mysql.com/doc/refman/8.0/en/creating-spatial-columns.html",
            "https://dev.mysql.com/doc/refman/8.0/en/populating-spatial-columns.html"
        ],
        "Compensate": [
            "<code>GEOMETRY</code>",
            "<code>POLYGON</code>",
            "<code>GEOMETRY</code> can store geometry values of any type. The other single-value types (<code>POINT</code>, <code>LINESTRING</code>, and <code>POLYGON</code>) restrict their values to a particular geometry type.",
            "<code>CREATE TABLE geom (g GEOMETRY);</code>",
            "<code>CREATE TABLE geom (\n p POINT SRID 0,\n g GEOMETRY NOT NULL SRID 4326\n);</code>",
            "<code>CREATE TABLE geom (g GEOMETRY NOT NULL SRID 4326);</code>",
            "<code>Geometry</code> (noninstantiable) <code>Point</code> (instantiable) <code>Curve</code> (noninstantiable) <code>LineString</code> (instantiable) <code>Line</code> <code>LinearRing</code> <code>Surface</code> (noninstantiable) <code>Polygon</code> (instantiable) <code>GeometryCollection</code> (instantiable) <code>MultiPoint</code> (instantiable) <code>MultiCurve</code> (noninstantiable) <code>MultiLineString</code> (instantiable) <code>MultiSurface</code> (noninstantiable) <code>MultiPolygon</code> (instantiable)",
            "<code>Geometry</code> is the base class. It is an abstract class. The instantiable subclasses of <code>Geometry</code> are restricted to zero-, one-, and two-dimensional geometric objects that exist in two-dimensional coordinate space. All instantiable geometry classes are defined so that valid instances of a geometry class are topologically closed (that is, all defined geometries include their boundary).",
            "The base <code>Geometry</code> class has subclasses for <code>Point</code>, <code>Curve</code>, <code>Surface</code>, and <code>GeometryCollection</code>:",
            "<code>Surface</code> is designed for two-dimensional objects and has subclass <code>Polygon</code>.",
            "<code>Geometry</code>, <code>Curve</code>, <code>Surface</code>, <code>MultiCurve</code>, and <code>MultiSurface</code> are defined as noninstantiable classes. They define a common set of methods for their subclasses and are included for extensibility.",
            "<code>Point</code>, <code>LineString</code>, <code>Polygon</code>, <code>GeometryCollection</code>, <code>MultiPoint</code>, <code>MultiLineString</code>, and <code>MultiPolygon</code> are instantiable classes.",
            "<code>Geometry</code> is the root class of the hierarchy. It is a noninstantiable class but has a number of properties, described in the following list, that are common to all geometry values created from any of the <code>Geometry</code> subclasses. Particular subclasses have their own specific properties, described later.",
            "Its dimension. A geometry can have a dimension of \u22121, 0, 1, or 2: \u22121 for an empty geometry. 0 for a geometry with no length and no area. 1 for a geometry with nonzero length and zero area. 2 for a geometry with nonzero area. <code>Point</code> objects have a dimension of zero. <code>LineString</code> objects have a dimension of 1. <code>Polygon</code> objects have a dimension of 2. The dimensions of <code>MultiPoint</code>, <code>MultiLineString</code>, and <code>MultiPolygon</code> objects are the same as the dimensions of the elements they consist of.",
            "A <code>Surface</code> is a two-dimensional geometry. It is a noninstantiable class. Its only instantiable subclass is <code>Polygon</code>.",
            "<code>Surface</code> Properties",
            "A <code>Surface</code> is defined as a two-dimensional geometry.",
            "The OpenGIS specification defines a simple <code>Surface</code> as a geometry that consists of a single \u201cpatch\u201d that is associated with a single exterior boundary and zero or more interior boundaries.",
            "The boundary of a simple <code>Surface</code> is the set of closed curves corresponding to its exterior and interior boundaries.",
            "A <code>Polygon</code> is a planar <code>Surface</code> representing a multisided geometry. It is defined by a single exterior boundary and zero or more interior boundaries, where each interior boundary defines a hole in the <code>Polygon</code>.",
            "<code>Polygon</code> Examples",
            "On a region map, <code>Polygon</code> objects could represent forests, districts, and so on.",
            "<code>Polygon</code> Assertions",
            "The boundary of a <code>Polygon</code> consists of a set of <code>LinearRing</code> objects (that is, <code>LineString</code> objects that are both simple and closed) that make up its exterior and interior boundaries.",
            "A <code>Polygon</code> has no rings that cross. The rings in the boundary of a <code>Polygon</code> may intersect at a <code>Point</code>, but only as a tangent.",
            "A <code>Polygon</code> has no lines, spikes, or punctures.",
            "A <code>Polygon</code> has an interior that is a connected point set.",
            "A <code>Polygon</code> may have holes. The exterior of a <code>Polygon</code> with holes is not connected. Each hole defines a connected component of the exterior.",
            "The preceding assertions make a <code>Polygon</code> a simple geometry.",
            "A <code>Polygon</code> with one exterior ring and one interior ring: <code>POLYGON((0 0,10 0,10 10,0 10,0 0),(5 5,7 5,7 7,5 7, 5 5))</code>",
            "<code><code>POLYGON((0 0,10 0,10 10,0 10,0 0),(5 5,7 5,7 7,5 7, 5 5))</code></code>",
            "A <code>MultiPolygon</code> with two <code>Polygon</code> values: <code>MULTIPOLYGON(((0 0,10 0,10 10,0 10,0 0)),((5 5,7 5,7 7,5 7, 5 5)))</code>",
            "The WKB type is a code that indicates the geometry type. MySQL uses values from 1 through 7 to indicate <code>Point</code>, <code>LineString</code>, <code>Polygon</code>, <code>MultiPoint</code>, <code>MultiLineString</code>, <code>MultiPolygon</code>, and <code>GeometryCollection</code>.",
            "MySQL supports geometry types of <code>Point</code>, <code>LineString</code>, <code>Polygon</code>, <code>MultiPoint</code>, <code>MultiLineString</code>, <code>MultiPolygon</code>, and <code>GeometryCollection</code>. Other geometry types are not supported.",
            "Use the <code>CREATE TABLE</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/create-table.html statement to create a table with a spatial column: <code>CREATE TABLE geom (g GEOMETRY);</code>",
            "<code><code>CREATE TABLE geom (g GEOMETRY);</code></code>",
            "<code>SET @g = 'LINESTRING(0 0,1 1,2 2)';\nINSERT INTO geom VALUES (ST_GeomFromText(@g));\nSET @g = 'POLYGON((0 0,10 0,10 10,0 10,0 0),(5 5,7 5,7 7,5 7, 5 5))';\nINSERT INTO geom VALUES (ST_GeomFromText(@g));\nSET @g =\n'GEOMETRYCOLLECTION(POINT(1 1),LINESTRING(0 0,1 1,2 2,3 3,4 4))';\nINSERT INTO geom VALUES (ST_GeomFromText(@g));</code>",
            "<code>SET @g = 'POINT(1 1)';\nINSERT INTO geom VALUES (ST_PointFromText(@g));\nSET @g = 'LINESTRING(0 0,1 1,2 2)';\nINSERT INTO geom VALUES (ST_LineStringFromText(@g));\nSET @g = 'POLYGON((0 0,10 0,10 10,0 10,0 0),(5 5,7 5,7 7,5 7, 5 5))';\nINSERT INTO geom VALUES (ST_PolygonFromText(@g));\nSET @g =\n'GEOMETRYCOLLECTION(POINT(1 1),LINESTRING(0 0,1 1,2 2,3 3,4 4))';\nINSERT INTO geom VALUES (ST_GeomCollFromText(@g));</code>"
        ],
        "Tree": [
            "(dataType POLYGON)"
        ]
    },
    {
        "Type": [
            "MULTIPOINT"
        ],
        "Description": [],
        "Links": [
            "https://dev.mysql.com/doc/refman/8.0/en/spatial-types.html",
            "https://dev.mysql.com/doc/refman/8.0/en/spatial-type-overview.html",
            "https://dev.mysql.com/doc/refman/8.0/en/gis-geometry-class-hierarchy.html",
            "https://dev.mysql.com/doc/refman/8.0/en/gis-class-geometry.html",
            "https://dev.mysql.com/doc/refman/8.0/en/gis-class-point.html",
            "https://dev.mysql.com/doc/refman/8.0/en/gis-class-polygon.html",
            "https://dev.mysql.com/doc/refman/8.0/en/gis-class-geometrycollection.html",
            "https://dev.mysql.com/doc/refman/8.0/en/gis-class-multipoint.html",
            "https://dev.mysql.com/doc/refman/8.0/en/gis-data-formats.html",
            "https://dev.mysql.com/doc/refman/8.0/en/geometry-well-formedness-validity.html",
            "https://dev.mysql.com/doc/refman/8.0/en/creating-spatial-columns.html",
            "https://dev.mysql.com/doc/refman/8.0/en/populating-spatial-columns.html"
        ],
        "Compensate": [
            "<code>GEOMETRY</code>",
            "<code>GEOMETRY</code> can store geometry values of any type. The other single-value types (<code>POINT</code>, <code>LINESTRING</code>, and <code>POLYGON</code>) restrict their values to a particular geometry type.",
            "<code>MULTIPOINT</code>",
            "<code>GEOMETRYCOLLECTION</code>",
            "<code>GEOMETRYCOLLECTION</code> can store a collection of objects of any type. The other collection types (<code>MULTIPOINT</code>, <code>MULTILINESTRING</code>, and <code>MULTIPOLYGON</code>) restrict collection members to those having a particular geometry type.",
            "<code>CREATE TABLE geom (g GEOMETRY);</code>",
            "<code>CREATE TABLE geom (\n p POINT SRID 0,\n g GEOMETRY NOT NULL SRID 4326\n);</code>",
            "<code>CREATE TABLE geom (g GEOMETRY NOT NULL SRID 4326);</code>",
            "<code>Geometry</code> (noninstantiable) <code>Point</code> (instantiable) <code>Curve</code> (noninstantiable) <code>LineString</code> (instantiable) <code>Line</code> <code>LinearRing</code> <code>Surface</code> (noninstantiable) <code>Polygon</code> (instantiable) <code>GeometryCollection</code> (instantiable) <code>MultiPoint</code> (instantiable) <code>MultiCurve</code> (noninstantiable) <code>MultiLineString</code> (instantiable) <code>MultiSurface</code> (noninstantiable) <code>MultiPolygon</code> (instantiable)",
            "<code>Geometry</code> is the base class. It is an abstract class. The instantiable subclasses of <code>Geometry</code> are restricted to zero-, one-, and two-dimensional geometric objects that exist in two-dimensional coordinate space. All instantiable geometry classes are defined so that valid instances of a geometry class are topologically closed (that is, all defined geometries include their boundary).",
            "The base <code>Geometry</code> class has subclasses for <code>Point</code>, <code>Curve</code>, <code>Surface</code>, and <code>GeometryCollection</code>:",
            "<code>GeometryCollection</code> has specialized zero-, one-, and two-dimensional collection classes named <code>MultiPoint</code>, <code>MultiLineString</code>, and <code>MultiPolygon</code> for modeling geometries corresponding to collections of <code>Points</code>, <code>LineStrings</code>, and <code>Polygons</code>, respectively. <code>MultiCurve</code> and <code>MultiSurface</code> are introduced as abstract superclasses that generalize the collection interfaces to handle <code>Curves</code> and <code>Surfaces</code>.",
            "<code>Geometry</code>, <code>Curve</code>, <code>Surface</code>, <code>MultiCurve</code>, and <code>MultiSurface</code> are defined as noninstantiable classes. They define a common set of methods for their subclasses and are included for extensibility.",
            "<code>Point</code>, <code>LineString</code>, <code>Polygon</code>, <code>GeometryCollection</code>, <code>MultiPoint</code>, <code>MultiLineString</code>, and <code>MultiPolygon</code> are instantiable classes.",
            "<code>Geometry</code> is the root class of the hierarchy. It is a noninstantiable class but has a number of properties, described in the following list, that are common to all geometry values created from any of the <code>Geometry</code> subclasses. Particular subclasses have their own specific properties, described later.",
            "Whether the value is simple or nonsimple. Geometry values of types (<code>LineString</code>, <code>MultiPoint</code>, <code>MultiLineString</code>) are either simple or nonsimple. Each type determines its own assertions for being simple or nonsimple.",
            "Its dimension. A geometry can have a dimension of \u22121, 0, 1, or 2: \u22121 for an empty geometry. 0 for a geometry with no length and no area. 1 for a geometry with nonzero length and zero area. 2 for a geometry with nonzero area. <code>Point</code> objects have a dimension of zero. <code>LineString</code> objects have a dimension of 1. <code>Polygon</code> objects have a dimension of 2. The dimensions of <code>MultiPoint</code>, <code>MultiLineString</code>, and <code>MultiPolygon</code> objects are the same as the dimensions of the elements they consist of.",
            "<code>GeomCollection</code> and <code>GeometryCollection</code> are synonymous, with <code>GeomCollection</code> the preferred type name.",
            "Element type (for example, a <code>MultiPoint</code> may contain only <code>Point</code> elements)",
            "A <code>MultiPoint</code> is a geometry collection composed of <code>Point</code> elements. The points are not connected or ordered in any way.",
            "<code>MultiPoint</code> Examples",
            "On a world map, a <code>MultiPoint</code> could represent a chain of small islands.",
            "On a city map, a <code>MultiPoint</code> could represent the outlets for a ticket office.",
            "<code>MultiPoint</code> Properties",
            "A <code>MultiPoint</code> is a zero-dimensional geometry.",
            "A <code>MultiPoint</code> is simple if no two of its <code>Point</code> values are equal (have identical coordinate values).",
            "The boundary of a <code>MultiPoint</code> is the empty set.",
            "A <code>MultiPoint</code> with three <code>Point</code> values: <code>MULTIPOINT(0 0, 20 20, 60 60)</code> Spatial functions such as <code>ST_MPointFromText()</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/gis-wkt-functions.html#function_st-mpointfromtext and <code>ST_GeomFromText()</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/gis-wkt-functions.html#function_st-geomfromtext that accept WKT-format representations of <code>MultiPoint</code> values permit individual points within values to be surrounded by parentheses. For example, both of the following function calls are valid: <code>ST_MPointFromText('MULTIPOINT (1 1, 2 2, 3 3)') ST_MPointFromText('MULTIPOINT ((1 1), (2 2), (3 3))')</code>",
            "<code><code>MULTIPOINT(0 0, 20 20, 60 60)</code></code>",
            "<code><code>ST_MPointFromText('MULTIPOINT (1 1, 2 2, 3 3)') ST_MPointFromText('MULTIPOINT ((1 1), (2 2), (3 3))')</code></code>",
            "A <code>GeometryCollection</code> consisting of two <code>Point</code> values and one <code>LineString</code>: <code>GEOMETRYCOLLECTION(POINT(10 10), POINT(30 30), LINESTRING(15 15, 20 20))</code>",
            "<code><code>GEOMETRYCOLLECTION(POINT(10 10), POINT(30 30), LINESTRING(15 15, 20 20))</code></code>",
            "The WKB type is a code that indicates the geometry type. MySQL uses values from 1 through 7 to indicate <code>Point</code>, <code>LineString</code>, <code>Polygon</code>, <code>MultiPoint</code>, <code>MultiLineString</code>, <code>MultiPolygon</code>, and <code>GeometryCollection</code>.",
            "MySQL supports geometry types of <code>Point</code>, <code>LineString</code>, <code>Polygon</code>, <code>MultiPoint</code>, <code>MultiLineString</code>, <code>MultiPolygon</code>, and <code>GeometryCollection</code>. Other geometry types are not supported.",
            "Only <code>GeometryCollection</code> can be empty. Such a value is stored with 0 elements.",
            "Collections are not empty (except <code>GeometryCollection</code>)",
            "Use the <code>CREATE TABLE</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/create-table.html statement to create a table with a spatial column: <code>CREATE TABLE geom (g GEOMETRY);</code>",
            "<code><code>CREATE TABLE geom (g GEOMETRY);</code></code>",
            "<code>SET @g = 'LINESTRING(0 0,1 1,2 2)';\nINSERT INTO geom VALUES (ST_GeomFromText(@g));\nSET @g = 'POLYGON((0 0,10 0,10 10,0 10,0 0),(5 5,7 5,7 7,5 7, 5 5))';\nINSERT INTO geom VALUES (ST_GeomFromText(@g));\nSET @g =\n'GEOMETRYCOLLECTION(POINT(1 1),LINESTRING(0 0,1 1,2 2,3 3,4 4))';\nINSERT INTO geom VALUES (ST_GeomFromText(@g));</code>",
            "<code>SET @g = 'POINT(1 1)';\nINSERT INTO geom VALUES (ST_PointFromText(@g));\nSET @g = 'LINESTRING(0 0,1 1,2 2)';\nINSERT INTO geom VALUES (ST_LineStringFromText(@g));\nSET @g = 'POLYGON((0 0,10 0,10 10,0 10,0 0),(5 5,7 5,7 7,5 7, 5 5))';\nINSERT INTO geom VALUES (ST_PolygonFromText(@g));\nSET @g =\n'GEOMETRYCOLLECTION(POINT(1 1),LINESTRING(0 0,1 1,2 2,3 3,4 4))';\nINSERT INTO geom VALUES (ST_GeomCollFromText(@g));</code>"
        ],
        "Tree": [
            "(dataType MULTIPOINT)"
        ]
    },
    {
        "Type": [
            "MULTILINESTRING"
        ],
        "Description": [],
        "Links": [
            "https://dev.mysql.com/doc/refman/8.0/en/spatial-types.html",
            "https://dev.mysql.com/doc/refman/8.0/en/spatial-type-overview.html",
            "https://dev.mysql.com/doc/refman/8.0/en/gis-geometry-class-hierarchy.html",
            "https://dev.mysql.com/doc/refman/8.0/en/gis-class-geometry.html",
            "https://dev.mysql.com/doc/refman/8.0/en/gis-class-curve.html",
            "https://dev.mysql.com/doc/refman/8.0/en/gis-class-linestring.html",
            "https://dev.mysql.com/doc/refman/8.0/en/gis-class-geometrycollection.html",
            "https://dev.mysql.com/doc/refman/8.0/en/gis-class-multicurve.html",
            "https://dev.mysql.com/doc/refman/8.0/en/gis-class-multilinestring.html",
            "https://dev.mysql.com/doc/refman/8.0/en/gis-data-formats.html",
            "https://dev.mysql.com/doc/refman/8.0/en/geometry-well-formedness-validity.html",
            "https://dev.mysql.com/doc/refman/8.0/en/creating-spatial-columns.html",
            "https://dev.mysql.com/doc/refman/8.0/en/populating-spatial-columns.html"
        ],
        "Compensate": [
            "<code>GEOMETRY</code>",
            "<code>GEOMETRY</code> can store geometry values of any type. The other single-value types (<code>POINT</code>, <code>LINESTRING</code>, and <code>POLYGON</code>) restrict their values to a particular geometry type.",
            "<code>MULTILINESTRING</code>",
            "<code>GEOMETRYCOLLECTION</code>",
            "<code>GEOMETRYCOLLECTION</code> can store a collection of objects of any type. The other collection types (<code>MULTIPOINT</code>, <code>MULTILINESTRING</code>, and <code>MULTIPOLYGON</code>) restrict collection members to those having a particular geometry type.",
            "<code>CREATE TABLE geom (g GEOMETRY);</code>",
            "<code>CREATE TABLE geom (\n p POINT SRID 0,\n g GEOMETRY NOT NULL SRID 4326\n);</code>",
            "<code>CREATE TABLE geom (g GEOMETRY NOT NULL SRID 4326);</code>",
            "<code>Geometry</code> (noninstantiable) <code>Point</code> (instantiable) <code>Curve</code> (noninstantiable) <code>LineString</code> (instantiable) <code>Line</code> <code>LinearRing</code> <code>Surface</code> (noninstantiable) <code>Polygon</code> (instantiable) <code>GeometryCollection</code> (instantiable) <code>MultiPoint</code> (instantiable) <code>MultiCurve</code> (noninstantiable) <code>MultiLineString</code> (instantiable) <code>MultiSurface</code> (noninstantiable) <code>MultiPolygon</code> (instantiable)",
            "<code>Geometry</code> is the base class. It is an abstract class. The instantiable subclasses of <code>Geometry</code> are restricted to zero-, one-, and two-dimensional geometric objects that exist in two-dimensional coordinate space. All instantiable geometry classes are defined so that valid instances of a geometry class are topologically closed (that is, all defined geometries include their boundary).",
            "The base <code>Geometry</code> class has subclasses for <code>Point</code>, <code>Curve</code>, <code>Surface</code>, and <code>GeometryCollection</code>:",
            "<code>GeometryCollection</code> has specialized zero-, one-, and two-dimensional collection classes named <code>MultiPoint</code>, <code>MultiLineString</code>, and <code>MultiPolygon</code> for modeling geometries corresponding to collections of <code>Points</code>, <code>LineStrings</code>, and <code>Polygons</code>, respectively. <code>MultiCurve</code> and <code>MultiSurface</code> are introduced as abstract superclasses that generalize the collection interfaces to handle <code>Curves</code> and <code>Surfaces</code>.",
            "<code>Geometry</code>, <code>Curve</code>, <code>Surface</code>, <code>MultiCurve</code>, and <code>MultiSurface</code> are defined as noninstantiable classes. They define a common set of methods for their subclasses and are included for extensibility.",
            "<code>Point</code>, <code>LineString</code>, <code>Polygon</code>, <code>GeometryCollection</code>, <code>MultiPoint</code>, <code>MultiLineString</code>, and <code>MultiPolygon</code> are instantiable classes.",
            "<code>Geometry</code> is the root class of the hierarchy. It is a noninstantiable class but has a number of properties, described in the following list, that are common to all geometry values created from any of the <code>Geometry</code> subclasses. Particular subclasses have their own specific properties, described later.",
            "Whether the value is simple or nonsimple. Geometry values of types (<code>LineString</code>, <code>MultiPoint</code>, <code>MultiLineString</code>) are either simple or nonsimple. Each type determines its own assertions for being simple or nonsimple.",
            "Its dimension. A geometry can have a dimension of \u22121, 0, 1, or 2: \u22121 for an empty geometry. 0 for a geometry with no length and no area. 1 for a geometry with nonzero length and zero area. 2 for a geometry with nonzero area. <code>Point</code> objects have a dimension of zero. <code>LineString</code> objects have a dimension of 1. <code>Polygon</code> objects have a dimension of 2. The dimensions of <code>MultiPoint</code>, <code>MultiLineString</code>, and <code>MultiPolygon</code> objects are the same as the dimensions of the elements they consist of.",
            "<code>GeomCollection</code> and <code>GeometryCollection</code> are synonymous, with <code>GeomCollection</code> the preferred type name.",
            "A <code>MultiCurve</code> is a geometry collection composed of <code>Curve</code> elements. <code>MultiCurve</code> is a noninstantiable class.",
            "<code>MultiCurve</code> Properties",
            "A <code>MultiCurve</code> is a one-dimensional geometry.",
            "A <code>MultiCurve</code> is simple if and only if all of its elements are simple; the only intersections between any two elements occur at points that are on the boundaries of both elements.",
            "A <code>MultiCurve</code> boundary is obtained by applying the \u201cmod 2 union rule\u201d (also known as the \u201codd-even rule\u201d): A point is in the boundary of a <code>MultiCurve</code> if it is in the boundaries of an odd number of <code>Curve</code> elements.",
            "A <code>MultiCurve</code> is closed if all of its elements are closed.",
            "The boundary of a closed <code>MultiCurve</code> is always empty.",
            "A <code>MultiLineString</code> is a <code>MultiCurve</code> geometry collection composed of <code>LineString</code> elements.",
            "<code>MultiLineString</code> Examples",
            "On a region map, a <code>MultiLineString</code> could represent a river system or a highway system.",
            "A <code>MultiLineString</code> with two <code>LineString</code> values: <code>MULTILINESTRING((10 10, 20 20), (15 15, 30 15))</code>",
            "<code><code>MULTILINESTRING((10 10, 20 20), (15 15, 30 15))</code></code>",
            "A <code>GeometryCollection</code> consisting of two <code>Point</code> values and one <code>LineString</code>: <code>GEOMETRYCOLLECTION(POINT(10 10), POINT(30 30), LINESTRING(15 15, 20 20))</code>",
            "<code><code>GEOMETRYCOLLECTION(POINT(10 10), POINT(30 30), LINESTRING(15 15, 20 20))</code></code>",
            "The WKB type is a code that indicates the geometry type. MySQL uses values from 1 through 7 to indicate <code>Point</code>, <code>LineString</code>, <code>Polygon</code>, <code>MultiPoint</code>, <code>MultiLineString</code>, <code>MultiPolygon</code>, and <code>GeometryCollection</code>.",
            "MySQL supports geometry types of <code>Point</code>, <code>LineString</code>, <code>Polygon</code>, <code>MultiPoint</code>, <code>MultiLineString</code>, <code>MultiPolygon</code>, and <code>GeometryCollection</code>. Other geometry types are not supported.",
            "Only <code>GeometryCollection</code> can be empty. Such a value is stored with 0 elements.",
            "Collections are not empty (except <code>GeometryCollection</code>)",
            "Use the <code>CREATE TABLE</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/create-table.html statement to create a table with a spatial column: <code>CREATE TABLE geom (g GEOMETRY);</code>",
            "<code><code>CREATE TABLE geom (g GEOMETRY);</code></code>",
            "<code>SET @g = 'LINESTRING(0 0,1 1,2 2)';\nINSERT INTO geom VALUES (ST_GeomFromText(@g));\nSET @g = 'POLYGON((0 0,10 0,10 10,0 10,0 0),(5 5,7 5,7 7,5 7, 5 5))';\nINSERT INTO geom VALUES (ST_GeomFromText(@g));\nSET @g =\n'GEOMETRYCOLLECTION(POINT(1 1),LINESTRING(0 0,1 1,2 2,3 3,4 4))';\nINSERT INTO geom VALUES (ST_GeomFromText(@g));</code>",
            "<code>SET @g = 'POINT(1 1)';\nINSERT INTO geom VALUES (ST_PointFromText(@g));\nSET @g = 'LINESTRING(0 0,1 1,2 2)';\nINSERT INTO geom VALUES (ST_LineStringFromText(@g));\nSET @g = 'POLYGON((0 0,10 0,10 10,0 10,0 0),(5 5,7 5,7 7,5 7, 5 5))';\nINSERT INTO geom VALUES (ST_PolygonFromText(@g));\nSET @g =\n'GEOMETRYCOLLECTION(POINT(1 1),LINESTRING(0 0,1 1,2 2,3 3,4 4))';\nINSERT INTO geom VALUES (ST_GeomCollFromText(@g));</code>"
        ],
        "Tree": [
            "(dataType MULTILINESTRING)"
        ]
    },
    {
        "Type": [
            "MULTIPOLYGON"
        ],
        "Description": [],
        "Links": [
            "https://dev.mysql.com/doc/refman/8.0/en/spatial-types.html",
            "https://dev.mysql.com/doc/refman/8.0/en/spatial-type-overview.html",
            "https://dev.mysql.com/doc/refman/8.0/en/gis-geometry-class-hierarchy.html",
            "https://dev.mysql.com/doc/refman/8.0/en/gis-class-geometry.html",
            "https://dev.mysql.com/doc/refman/8.0/en/gis-class-surface.html",
            "https://dev.mysql.com/doc/refman/8.0/en/gis-class-polygon.html",
            "https://dev.mysql.com/doc/refman/8.0/en/gis-class-geometrycollection.html",
            "https://dev.mysql.com/doc/refman/8.0/en/gis-class-multisurface.html",
            "https://dev.mysql.com/doc/refman/8.0/en/gis-class-multipolygon.html",
            "https://dev.mysql.com/doc/refman/8.0/en/gis-data-formats.html",
            "https://dev.mysql.com/doc/refman/8.0/en/geometry-well-formedness-validity.html",
            "https://dev.mysql.com/doc/refman/8.0/en/creating-spatial-columns.html",
            "https://dev.mysql.com/doc/refman/8.0/en/populating-spatial-columns.html"
        ],
        "Compensate": [
            "<code>GEOMETRY</code>",
            "<code>GEOMETRY</code> can store geometry values of any type. The other single-value types (<code>POINT</code>, <code>LINESTRING</code>, and <code>POLYGON</code>) restrict their values to a particular geometry type.",
            "<code>MULTIPOLYGON</code>",
            "<code>GEOMETRYCOLLECTION</code> can store a collection of objects of any type. The other collection types (<code>MULTIPOINT</code>, <code>MULTILINESTRING</code>, and <code>MULTIPOLYGON</code>) restrict collection members to those having a particular geometry type.",
            "<code>CREATE TABLE geom (g GEOMETRY);</code>",
            "<code>CREATE TABLE geom (\n p POINT SRID 0,\n g GEOMETRY NOT NULL SRID 4326\n);</code>",
            "<code>CREATE TABLE geom (g GEOMETRY NOT NULL SRID 4326);</code>",
            "<code>Geometry</code> (noninstantiable) <code>Point</code> (instantiable) <code>Curve</code> (noninstantiable) <code>LineString</code> (instantiable) <code>Line</code> <code>LinearRing</code> <code>Surface</code> (noninstantiable) <code>Polygon</code> (instantiable) <code>GeometryCollection</code> (instantiable) <code>MultiPoint</code> (instantiable) <code>MultiCurve</code> (noninstantiable) <code>MultiLineString</code> (instantiable) <code>MultiSurface</code> (noninstantiable) <code>MultiPolygon</code> (instantiable)",
            "<code>Geometry</code> is the base class. It is an abstract class. The instantiable subclasses of <code>Geometry</code> are restricted to zero-, one-, and two-dimensional geometric objects that exist in two-dimensional coordinate space. All instantiable geometry classes are defined so that valid instances of a geometry class are topologically closed (that is, all defined geometries include their boundary).",
            "The base <code>Geometry</code> class has subclasses for <code>Point</code>, <code>Curve</code>, <code>Surface</code>, and <code>GeometryCollection</code>:",
            "<code>GeometryCollection</code> has specialized zero-, one-, and two-dimensional collection classes named <code>MultiPoint</code>, <code>MultiLineString</code>, and <code>MultiPolygon</code> for modeling geometries corresponding to collections of <code>Points</code>, <code>LineStrings</code>, and <code>Polygons</code>, respectively. <code>MultiCurve</code> and <code>MultiSurface</code> are introduced as abstract superclasses that generalize the collection interfaces to handle <code>Curves</code> and <code>Surfaces</code>.",
            "<code>Geometry</code>, <code>Curve</code>, <code>Surface</code>, <code>MultiCurve</code>, and <code>MultiSurface</code> are defined as noninstantiable classes. They define a common set of methods for their subclasses and are included for extensibility.",
            "<code>Point</code>, <code>LineString</code>, <code>Polygon</code>, <code>GeometryCollection</code>, <code>MultiPoint</code>, <code>MultiLineString</code>, and <code>MultiPolygon</code> are instantiable classes.",
            "<code>Geometry</code> is the root class of the hierarchy. It is a noninstantiable class but has a number of properties, described in the following list, that are common to all geometry values created from any of the <code>Geometry</code> subclasses. Particular subclasses have their own specific properties, described later.",
            "Its dimension. A geometry can have a dimension of \u22121, 0, 1, or 2: \u22121 for an empty geometry. 0 for a geometry with no length and no area. 1 for a geometry with nonzero length and zero area. 2 for a geometry with nonzero area. <code>Point</code> objects have a dimension of zero. <code>LineString</code> objects have a dimension of 1. <code>Polygon</code> objects have a dimension of 2. The dimensions of <code>MultiPoint</code>, <code>MultiLineString</code>, and <code>MultiPolygon</code> objects are the same as the dimensions of the elements they consist of.",
            "A <code>MultiSurface</code> is a geometry collection composed of surface elements. <code>MultiSurface</code> is a noninstantiable class. Its only instantiable subclass is <code>MultiPolygon</code>.",
            "<code>MultiSurface</code> Assertions",
            "Surfaces within a <code>MultiSurface</code> have no interiors that intersect.",
            "Surfaces within a <code>MultiSurface</code> have boundaries that intersect at most at a finite number of points.",
            "A <code>MultiPolygon</code> is a <code>MultiSurface</code> object composed of <code>Polygon</code> elements.",
            "<code>MultiPolygon</code> Examples",
            "On a region map, a <code>MultiPolygon</code> could represent a system of lakes.",
            "<code>MultiPolygon</code> Assertions",
            "A <code>MultiPolygon</code> has no two <code>Polygon</code> elements with interiors that intersect.",
            "A <code>MultiPolygon</code> has no two <code>Polygon</code> elements that cross (crossing is also forbidden by the previous assertion), or that touch at an infinite number of points.",
            "A <code>MultiPolygon</code> may not have cut lines, spikes, or punctures. A <code>MultiPolygon</code> is a regular, closed point set.",
            "A <code>MultiPolygon</code> that has more than one <code>Polygon</code> has an interior that is not connected. The number of connected components of the interior of a <code>MultiPolygon</code> is equal to the number of <code>Polygon</code> values in the <code>MultiPolygon</code>.",
            "<code>MultiPolygon</code> Properties",
            "A <code>MultiPolygon</code> is a two-dimensional geometry.",
            "A <code>MultiPolygon</code> boundary is a set of closed curves (<code>LineString</code> values) corresponding to the boundaries of its <code>Polygon</code> elements.",
            "Each <code>Curve</code> in the boundary of the <code>MultiPolygon</code> is in the boundary of exactly one <code>Polygon</code> element.",
            "Every <code>Curve</code> in the boundary of an <code>Polygon</code> element is in the boundary of the <code>MultiPolygon</code>.",
            "A <code>MultiPolygon</code> with two <code>Polygon</code> values: <code>MULTIPOLYGON(((0 0,10 0,10 10,0 10,0 0)),((5 5,7 5,7 7,5 7, 5 5)))</code>",
            "<code><code>MULTIPOLYGON(((0 0,10 0,10 10,0 10,0 0)),((5 5,7 5,7 7,5 7, 5 5)))</code></code>",
            "The WKB type is a code that indicates the geometry type. MySQL uses values from 1 through 7 to indicate <code>Point</code>, <code>LineString</code>, <code>Polygon</code>, <code>MultiPoint</code>, <code>MultiLineString</code>, <code>MultiPolygon</code>, and <code>GeometryCollection</code>.",
            "MySQL supports geometry types of <code>Point</code>, <code>LineString</code>, <code>Polygon</code>, <code>MultiPoint</code>, <code>MultiLineString</code>, <code>MultiPolygon</code>, and <code>GeometryCollection</code>. Other geometry types are not supported.",
            "Use the <code>CREATE TABLE</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/create-table.html statement to create a table with a spatial column: <code>CREATE TABLE geom (g GEOMETRY);</code>",
            "<code><code>CREATE TABLE geom (g GEOMETRY);</code></code>"
        ],
        "Tree": [
            "(dataType MULTIPOLYGON)"
        ]
    },
    {
        "Type": [
            "GEOMETRYCOLLECTION"
        ],
        "Description": [],
        "Links": [
            "https://dev.mysql.com/doc/refman/8.0/en/spatial-types.html",
            "https://dev.mysql.com/doc/refman/8.0/en/spatial-type-overview.html",
            "https://dev.mysql.com/doc/refman/8.0/en/gis-geometry-class-hierarchy.html",
            "https://dev.mysql.com/doc/refman/8.0/en/gis-class-geometry.html",
            "https://dev.mysql.com/doc/refman/8.0/en/gis-class-geometrycollection.html",
            "https://dev.mysql.com/doc/refman/8.0/en/gis-data-formats.html",
            "https://dev.mysql.com/doc/refman/8.0/en/geometry-well-formedness-validity.html",
            "https://dev.mysql.com/doc/refman/8.0/en/creating-spatial-columns.html",
            "https://dev.mysql.com/doc/refman/8.0/en/populating-spatial-columns.html"
        ],
        "Compensate": [
            "<code>GEOMETRY</code>",
            "<code>GEOMETRY</code> can store geometry values of any type. The other single-value types (<code>POINT</code>, <code>LINESTRING</code>, and <code>POLYGON</code>) restrict their values to a particular geometry type.",
            "<code>GEOMETRYCOLLECTION</code>",
            "<code>GEOMETRYCOLLECTION</code> can store a collection of objects of any type. The other collection types (<code>MULTIPOINT</code>, <code>MULTILINESTRING</code>, and <code>MULTIPOLYGON</code>) restrict collection members to those having a particular geometry type.",
            "<code>CREATE TABLE geom (g GEOMETRY);</code>",
            "<code>CREATE TABLE geom (\n p POINT SRID 0,\n g GEOMETRY NOT NULL SRID 4326\n);</code>",
            "<code>CREATE TABLE geom (g GEOMETRY NOT NULL SRID 4326);</code>",
            "<code>Geometry</code> (noninstantiable) <code>Point</code> (instantiable) <code>Curve</code> (noninstantiable) <code>LineString</code> (instantiable) <code>Line</code> <code>LinearRing</code> <code>Surface</code> (noninstantiable) <code>Polygon</code> (instantiable) <code>GeometryCollection</code> (instantiable) <code>MultiPoint</code> (instantiable) <code>MultiCurve</code> (noninstantiable) <code>MultiLineString</code> (instantiable) <code>MultiSurface</code> (noninstantiable) <code>MultiPolygon</code> (instantiable)",
            "<code>Geometry</code> is the base class. It is an abstract class. The instantiable subclasses of <code>Geometry</code> are restricted to zero-, one-, and two-dimensional geometric objects that exist in two-dimensional coordinate space. All instantiable geometry classes are defined so that valid instances of a geometry class are topologically closed (that is, all defined geometries include their boundary).",
            "The base <code>Geometry</code> class has subclasses for <code>Point</code>, <code>Curve</code>, <code>Surface</code>, and <code>GeometryCollection</code>:",
            "<code>GeometryCollection</code> has specialized zero-, one-, and two-dimensional collection classes named <code>MultiPoint</code>, <code>MultiLineString</code>, and <code>MultiPolygon</code> for modeling geometries corresponding to collections of <code>Points</code>, <code>LineStrings</code>, and <code>Polygons</code>, respectively. <code>MultiCurve</code> and <code>MultiSurface</code> are introduced as abstract superclasses that generalize the collection interfaces to handle <code>Curves</code> and <code>Surfaces</code>.",
            "<code>Geometry</code>, <code>Curve</code>, <code>Surface</code>, <code>MultiCurve</code>, and <code>MultiSurface</code> are defined as noninstantiable classes. They define a common set of methods for their subclasses and are included for extensibility.",
            "<code>Point</code>, <code>LineString</code>, <code>Polygon</code>, <code>GeometryCollection</code>, <code>MultiPoint</code>, <code>MultiLineString</code>, and <code>MultiPolygon</code> are instantiable classes.",
            "<code>Geometry</code> is the root class of the hierarchy. It is a noninstantiable class but has a number of properties, described in the following list, that are common to all geometry values created from any of the <code>Geometry</code> subclasses. Particular subclasses have their own specific properties, described later.",
            "<code>GeomCollection</code> and <code>GeometryCollection</code> are synonymous, with <code>GeomCollection</code> the preferred type name.",
            "A <code>GeometryCollection</code> consisting of two <code>Point</code> values and one <code>LineString</code>: <code>GEOMETRYCOLLECTION(POINT(10 10), POINT(30 30), LINESTRING(15 15, 20 20))</code>",
            "<code><code>GEOMETRYCOLLECTION(POINT(10 10), POINT(30 30), LINESTRING(15 15, 20 20))</code></code>",
            "The WKB type is a code that indicates the geometry type. MySQL uses values from 1 through 7 to indicate <code>Point</code>, <code>LineString</code>, <code>Polygon</code>, <code>MultiPoint</code>, <code>MultiLineString</code>, <code>MultiPolygon</code>, and <code>GeometryCollection</code>.",
            "MySQL supports geometry types of <code>Point</code>, <code>LineString</code>, <code>Polygon</code>, <code>MultiPoint</code>, <code>MultiLineString</code>, <code>MultiPolygon</code>, and <code>GeometryCollection</code>. Other geometry types are not supported.",
            "Only <code>GeometryCollection</code> can be empty. Such a value is stored with 0 elements.",
            "Collections are not empty (except <code>GeometryCollection</code>)",
            "Use the <code>CREATE TABLE</code>&LINK&https://dev.mysql.com/doc/refman/8.0/en/create-table.html statement to create a table with a spatial column: <code>CREATE TABLE geom (g GEOMETRY);</code>",
            "<code><code>CREATE TABLE geom (g GEOMETRY);</code></code>",
            "<code>SET @g = 'LINESTRING(0 0,1 1,2 2)';\nINSERT INTO geom VALUES (ST_GeomFromText(@g));\nSET @g = 'POLYGON((0 0,10 0,10 10,0 10,0 0),(5 5,7 5,7 7,5 7, 5 5))';\nINSERT INTO geom VALUES (ST_GeomFromText(@g));\nSET @g =\n'GEOMETRYCOLLECTION(POINT(1 1),LINESTRING(0 0,1 1,2 2,3 3,4 4))';\nINSERT INTO geom VALUES (ST_GeomFromText(@g));</code>",
            "<code>SET @g = 'POINT(1 1)';\nINSERT INTO geom VALUES (ST_PointFromText(@g));\nSET @g = 'LINESTRING(0 0,1 1,2 2)';\nINSERT INTO geom VALUES (ST_LineStringFromText(@g));\nSET @g = 'POLYGON((0 0,10 0,10 10,0 10,0 0),(5 5,7 5,7 7,5 7, 5 5))';\nINSERT INTO geom VALUES (ST_PolygonFromText(@g));\nSET @g =\n'GEOMETRYCOLLECTION(POINT(1 1),LINESTRING(0 0,1 1,2 2,3 3,4 4))';\nINSERT INTO geom VALUES (ST_GeomCollFromText(@g));</code>"
        ],
        "Tree": [
            "(dataType GEOMETRYCOLLECTION)"
        ]
    }
]